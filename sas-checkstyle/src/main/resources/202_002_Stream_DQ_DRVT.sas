/**************************************************************************** 
 * Job:             202_002_Stream_DQ_DRVT                A5ELGGF9.AH00003N * 
 * Description:                                                             * 
 *                                                                          * 
 * Metadata Server: bravo14                                                 * 
 * Port:            8561                                                    * 
 * Location:        /DWH_DMDQ_REP/Jobs                                      * 
 *                                                                          * 
 * Server:          SASApp                                A5C46MZY.AQ000002 * 
 *                                                                          * 
 * Generated on:    16 Июль 2013 г. 17:46:14 MSD                            * 
 * Generated by:    sasdwh                                                  * 
 * Version:         SAS Data Integration Studio 4.5                         * 
 ****************************************************************************/ 

/* General macro variables  */ 
%let jobID = %quote(A5ELGGF9.AH00003N);
%let etls_jobName = %nrquote(202_002_Stream_DQ_DRVT);
%let etls_userID = %nrquote(sasdwh);

/* Setup to capture return codes  */ 
%global job_rc trans_rc sqlrc ;
%let sysrc = 0;
%let job_rc = 0;
%let trans_rc = 0;
%let sqlrc = 0;
%global etls_stepStartTime; 
/* initialize syserr to 0 */
data _null_; run;

%macro rcSet(error); 
   %if (&error gt &trans_rc) %then 
      %let trans_rc = &error;
   %if (&error gt &job_rc) %then 
      %let job_rc = &error;
%mend rcSet; 

%macro rcSetDS(error); 
   if &error gt input(symget('trans_rc'),12.) then 
      call symput('trans_rc',trim(left(put(&error,12.))));
   if &error gt input(symget('job_rc'),12.) then 
      call symput('job_rc',trim(left(put(&error,12.))));
%mend rcSetDS; 

/* Create metadata macro variables */
%let IOMServer      = %nrquote(SASApp);
%let metaPort       = %nrquote(8561);
%let metaServer     = %nrquote(bravo14);

/* Set metadata options */
options metaport       = &metaPort 
        metaserver     = "&metaServer"; 

/* Setup for capturing job status  */ 
%let etls_startTime = %sysfunc(datetime(),datetime.);
%let etls_recordsBefore = 0;
%let etls_recordsAfter = 0;
%let etls_lib = 0;
%let etls_table = 0;

%global etls_debug; 
%macro etls_setDebug; 
   %if %str(&etls_debug) ne 0 %then 
      OPTIONS MPRINT%str(;); 
%mend; 
%etls_setDebug; 

/*==========================================================================* 
 * Step:            Начать модуль                         A5ELGGF9.AK0001AT * 
 * Transform:       Начать модуль                                           * 
 * Description:                                                             * 
 *==========================================================================*/ 

%let transformID = %quote(A5ELGGF9.AK0001AT);
%let trans_rc = 0;
%let etls_stepStartTime = %sysfunc(datetime(), datetime20.); 

%let _INPUT_count = 0; 
%let _OUTPUT_count = 0; 


/*****************************************************************
* ВЕРСИЯ:
*   $Id: transform_job_start.sas 1747 2012-08-01 11:26:13Z nesterenok $
*
******************************************************************
* НАЗНАЧЕНИЕ:
*   Регистрирует начало модуля ETL.
*
* ПАРАМЕТРЫ:
*   нет
*
******************************************************************/

%macro transform_job_start;

   /* Продолжаем поток (или создаем новый) */
   %local lmvStreamName;
   %if %sysfunc(sysexist(LSB_JOBNAME)) %then
      %let lmvStreamName = %scan(%sysfunc(sysget(LSB_JOBNAME)), 3, :);
   %else
      %let lmvStreamName = ;

   %job_continue_reg(mpJobType=STREAM, mpJobName=&lmvStreamName, mpPostEvent=N, mpForcedStart=Y);

   /* Для DI, начинаем поток заново, если старый был начат не сегодня */
   %if %length(&lmvStreamName) eq 0 and &STREAM_START_DT ne %sysfunc(today()) %then %do;
      %job_start_reg(mpJobType=STREAM, mpParentJobId=, mpJobName=&lmvStreamName.);
   %end;

   /* Начинаем модуль */
   %job_start_reg(mpJobType=JOB, mpParentJobId=&STREAM_ID, mpJobName=&ETLS_JobName.);

%mend transform_job_start;

%transform_job_start;


%rcSet(&syserr); 
%rcSet(&sysrc); 
%rcSet(&sqlrc); 



/**  Step end Начать модуль **/

/**************************************************************************** 
 * Job:             202_010_Mart_DQ_DRVT_REP01            A5ELGGF9.AH000027 * 
 * Description:     Проверка количества связанных сделок MIDAS (2           * 
 *                  процентные сделки для IRS, CIRS, две валютные сделки    * 
 *                   для FX Swap, 2 связанные сделки для DCD)               * 
 *                                                                          * 
 * Metadata Server: bravo14                                                 * 
 * Port:            8561                                                    * 
 * Location:        /DWH_DMDQ_REP/Jobs/Includes/DQ_DRVT                     * 
 *                                                                          * 
 * Server:          SASApp                                A5C46MZY.AQ000002 * 
 *                                                                          * 
 * Source Tables:   FINANCIAL_ACCOUNT -                   A569C89V.AE0000FK * 
 *                   dwh_dds.FINANCIAL_ACCOUNT                              * 
 *                  FINANCIAL_INSTRUMENT_ASSOC -          A569C89V.AE0000FW * 
 *                   dwh_dds.FINANCIAL_INSTRUMENT_ASSOC                     * 
 *                  FINANCIAL_INSTRUMENT -                A569C89V.AE0000FV * 
 *                   dwh_dds.FINANCIAL_INSTRUMENT                           * 
 *                  FINANCIAL_ACCOUNT_ASSOC -             A569C89V.AE0000FL * 
 *                   dwh_dds.FINANCIAL_ACCOUNT_ASSOC                        * 
 *                  FINANCIAL_ACCOUNT -                   A569C89V.AE0000FK * 
 *                   dwh_dds.FINANCIAL_ACCOUNT                              * 
 *                  FINANCIAL_ACCOUNT -                   A569C89V.AE0000FK * 
 *                   dwh_dds.FINANCIAL_ACCOUNT                              * 
 *                  FINANCIAL_INSTRUMENT_ASSOC -          A569C89V.AE0000FW * 
 *                   dwh_dds.FINANCIAL_INSTRUMENT_ASSOC                     * 
 *                  FINANCIAL_INSTRUMENT -                A569C89V.AE0000FV * 
 *                   dwh_dds.FINANCIAL_INSTRUMENT                           * 
 *                  FINANCIAL_INSTRUMENT_ASSOC -          A569C89V.AE0000FW * 
 *                   dwh_dds.FINANCIAL_INSTRUMENT_ASSOC                     * 
 *                  FINANCIAL_INSTRUMENT -                A569C89V.AE0000FV * 
 *                   dwh_dds.FINANCIAL_INSTRUMENT                           * 
 *                  SWAP_INSTRUMENT_LEG -                 A569C89V.AE0000JF * 
 *                   dwh_dds.SWAP_INSTRUMENT_LEG                            * 
 *                  FINANCIAL_ACCOUNT_ASSOC -             A569C89V.AE0000FL * 
 *                   dwh_dds.FINANCIAL_ACCOUNT_ASSOC                        * 
 *                  FINANCIAL_INSTRUMENT_ASSOC -          A569C89V.AE0000FW * 
 *                   dwh_dds.FINANCIAL_INSTRUMENT_ASSOC                     * 
 *                  FINANCIAL_INSTRUMENT -                A569C89V.AE0000FV * 
 *                   dwh_dds.FINANCIAL_INSTRUMENT                           * 
 *                  FINANCIAL_INSTRUMENT_TYPE -           A569C89V.AE0000FZ * 
 *                   dwh_dds.FINANCIAL_INSTRUMENT_TYPE                      * 
 *                  ETL_JOB - etl_sys.ETL_JOB             A59S11RW.AE00001A * 
 * Target Tables:   DQ_DRVT_DWH_DM - dm_dq.DQ_DRVT_DWH_DM A5ELGGF9.AE000049 * 
 *                  DQ_DRVT_INSTRUMENTTYPE -              A5ELGGF9.AE00004A * 
 *                   dm_dq.DQ_DRVT_INSTRUMENTTYPE                           * 
 *                  DQ_DRVT_REPORT_PRC -                  A5ELGGF9.AE00004E * 
 *                   dm_dq.DQ_DRVT_REPORT_PRC                               * 
 *                  DQ_DRVT_DWH_DM - dm_dq.DQ_DRVT_DWH_DM A5ELGGF9.AE000049 * 
 *                  DQ_DRVT_REPORT_PRC -                  A5ELGGF9.AE00004E * 
 *                   dm_dq.DQ_DRVT_REPORT_PRC                               * 
 *                                                                          * 
 * Generated on:    16 Июль 2013 г. 17:46:14 MSD                            * 
 * Generated by:    sasdwh                                                  * 
 * Version:         SAS Data Integration Studio 4.5                         * 
 ****************************************************************************/ 

/* General macro variables  */ 
%let jobID = %quote(A5ELGGF9.AH000027);
%let etls_jobName = %nrquote(202_010_Mart_DQ_DRVT_REP01);
%let etls_userID = %nrquote(sasdwh);


/* Create metadata macro variables */
%let IOMServer      = %nrquote(SASApp);
%let metaPort       = %nrquote(8561);
%let metaServer     = %nrquote(bravo14);

/* Set metadata options */
options metaport       = &metaPort 
        metaserver     = "&metaServer"; 

/* Setup for capturing job status  */ 
%let etls_startTime = %sysfunc(datetime(),datetime.);
%let etls_recordsBefore = 0;
%let etls_recordsAfter = 0;
%let etls_lib = 0;
%let etls_table = 0;

%global etls_debug; 
%macro etls_setDebug; 
   %if %str(&etls_debug) ne 0 %then 
      OPTIONS MPRINT%str(;); 
%mend; 
%etls_setDebug; 

/*---- Start of Pre-Process Code  ----*/ 

%LET REPDT=&DMDQ_REPORT_START_DTTM;
/*---- End of Pre-Process Code  ----*/ 

%rcSet(&syserr); 
%rcSet(&sqlrc); 

/*==========================================================================* 
 * Step:            Начать модуль                         A5ELGGF9.AK0000WD * 
 * Transform:       Начать модуль                                           * 
 * Description:                                                             * 
 *==========================================================================*/ 

%let transformID = %quote(A5ELGGF9.AK0000WD);
%let trans_rc = 0;
%let etls_stepStartTime = %sysfunc(datetime(), datetime20.); 

%let _INPUT_count = 0; 
%let _OUTPUT_count = 0; 


/*****************************************************************
* ВЕРСИЯ:
*   $Id: transform_job_start.sas 1747 2012-08-01 11:26:13Z nesterenok $
*
******************************************************************
* НАЗНАЧЕНИЕ:
*   Регистрирует начало модуля ETL.
*
* ПАРАМЕТРЫ:
*   нет
*
******************************************************************/

%macro transform_job_start;

   /* Продолжаем поток (или создаем новый) */
   %local lmvStreamName;
   %if %sysfunc(sysexist(LSB_JOBNAME)) %then
      %let lmvStreamName = %scan(%sysfunc(sysget(LSB_JOBNAME)), 3, :);
   %else
      %let lmvStreamName = ;

   %job_continue_reg(mpJobType=STREAM, mpJobName=&lmvStreamName, mpPostEvent=N, mpForcedStart=Y);

   /* Для DI, начинаем поток заново, если старый был начат не сегодня */
   %if %length(&lmvStreamName) eq 0 and &STREAM_START_DT ne %sysfunc(today()) %then %do;
      %job_start_reg(mpJobType=STREAM, mpParentJobId=, mpJobName=&lmvStreamName.);
   %end;

   /* Начинаем модуль */
   %job_start_reg(mpJobType=JOB, mpParentJobId=&STREAM_ID, mpJobName=&ETLS_JobName.);

%mend transform_job_start;

%transform_job_start;


%rcSet(&syserr); 
%rcSet(&sysrc); 
%rcSet(&sqlrc); 



/**  Step end Начать модуль **/

/*==========================================================================* 
 * Step:            Очистить таблицу                      A5ELGGF9.AK0000WE * 
 * Transform:       Очистить таблицу                                        * 
 * Description:                                                             * 
 *                                                                          * 
 * Target Table:    DQ_DRVT_DWH_DM - dm_dq.DQ_DRVT_DWH_DM A5ELGGF9.AE000049 * 
 *==========================================================================*/ 

%let transformID = %quote(A5ELGGF9.AK0000WE);
%let trans_rc = 0;
%let etls_stepStartTime = %sysfunc(datetime(), datetime20.); 

%let _INPUT_count = 0; 
%let _OUTPUT_count = 1; 
%let _OUTPUT = dm_dq.DQ_DRVT_DWH_DM;
%let _OUTPUT_connect =  DEFER=YES PATH=DWH.IMB.RU AUTHDOMAIN="OraAuth_DM_DQ" 
;
%let _OUTPUT_engine = ORACLE;
%let _OUTPUT_memtype = DATA;
%let _OUTPUT_options = %nrquote();
%let _OUTPUT_alter = %nrquote();
%let _OUTPUT_path = %nrquote(/DWH_DMDQ_REP/Marts/DQ_DRVT/DQ_DRVT_DWH_DM%(Table%));
%let _OUTPUT_type = 1;
%let _OUTPUT_label = %nrquote();
/* List of target columns to keep  */ 
%let _OUTPUT_keep = REPORTCODE REPORTDATE FRONTKDEALID FRONTFDEALID DEALID 
        INSTRUMENTTYPECD DEALDATE ADDITIONALINFORMATION STARTDATE NEXTDATE 
        ENDDATE LEGNUMBER VALUEFRS VALUESEC;

%let tpOut = dm_dq.DQ_DRVT_DWH_DM;
%let tpOut_connect =  DEFER=YES PATH=DWH.IMB.RU AUTHDOMAIN="OraAuth_DM_DQ" 
;
%let tpOut_engine = ORACLE;
%let tpOut_memtype = DATA;
%let tpOut_options = %nrquote();
%let tpOut_alter = %nrquote();
%let tpOut_path = %nrquote(/DWH_DMDQ_REP/Marts/DQ_DRVT/DQ_DRVT_DWH_DM%(Table%));
%let tpOut_type = 1;
%let tpOut_label = %nrquote();
/* List of target columns to keep  */ 
%let tpOut_keep = REPORTCODE REPORTDATE FRONTKDEALID FRONTFDEALID DEALID 
        INSTRUMENTTYPECD DEALDATE ADDITIONALINFORMATION STARTDATE NEXTDATE 
        ENDDATE LEGNUMBER VALUEFRS VALUESEC;


%let tpWhere = %nrquote(REPORTCODE = %'П-01%' AND REPORTDATE = &DMDQ_REPORT_START_DTTM);

/* List of target columns to keep  */ 
%let _keep = REPORTCODE REPORTDATE FRONTKDEALID FRONTFDEALID DEALID 
        INSTRUMENTTYPECD DEALDATE ADDITIONALINFORMATION STARTDATE NEXTDATE 
        ENDDATE LEGNUMBER VALUEFRS VALUESEC;
/* List of target columns to keep  */ 
%let keep = REPORTCODE REPORTDATE FRONTKDEALID FRONTFDEALID DEALID 
        INSTRUMENTTYPECD DEALDATE ADDITIONALINFORMATION STARTDATE NEXTDATE 
        ENDDATE LEGNUMBER VALUEFRS VALUESEC;
/*****************************************************************
* ВЕРСИЯ:
*   $Id: transform_table_delete.sas 2142 2012-08-17 14:15:09Z nesterenok $
*
******************************************************************
* НАЗНАЧЕНИЕ:
*   Удаляет из указанной таблицы записи.
*
* ПАРАМЕТРЫ:
*   tpOut                  + имя целевой таблицы, которая будет очищена
*   tpWhere                - условие отбора записей под удаление
*                            по умолчанию отсутствует, т.е. удаляются все записи
*
******************************************************************/

%macro transform_table_delete;

   /* Удаляем записи */
   /* TODO: truncate */
   proc sql;
      delete from &tpOut
      %if %length(&tpWhere) gt 0 %then %do;
         where (%unquote(&tpWhere))
      %end;
      ;
   quit;
   %error_check (mpStepType=SQL);

%mend transform_table_delete;

%transform_table_delete;


%rcSet(&syserr); 
%rcSet(&sysrc); 
%rcSet(&sqlrc); 



/**  Step end Очистить таблицу **/

/*==========================================================================* 
 * Step:            Очистить таблицу                      A5ELGGF9.AK0000WF * 
 * Transform:       Очистить таблицу                                        * 
 * Description:                                                             * 
 *                                                                          * 
 * Target Table:    DQ_DRVT_REPORT_PRC -                  A5ELGGF9.AE00004E * 
 *                   dm_dq.DQ_DRVT_REPORT_PRC                               * 
 *==========================================================================*/ 

%let transformID = %quote(A5ELGGF9.AK0000WF);
%let trans_rc = 0;
%let etls_stepStartTime = %sysfunc(datetime(), datetime20.); 

%let _INPUT_count = 0; 
%let _OUTPUT_count = 1; 
%let _OUTPUT = dm_dq.DQ_DRVT_REPORT_PRC;
%let _OUTPUT_connect =  DEFER=YES PATH=DWH.IMB.RU AUTHDOMAIN="OraAuth_DM_DQ" 
;
%let _OUTPUT_engine = ORACLE;
%let _OUTPUT_memtype = DATA;
%let _OUTPUT_options = %nrquote();
%let _OUTPUT_alter = %nrquote();
%let _OUTPUT_path = %nrquote(/DWH_DMDQ_REP/Marts/DQ_DRVT/DQ_DRVT_REPORT_PRC%(Table%));
%let _OUTPUT_type = 1;
%let _OUTPUT_label = %nrquote();
/* List of target columns to keep  */ 
%let _OUTPUT_keep = REP_DT REP_ID PRC CNT_ALL CNT_ERR DWH_DT;

%let tpOut = dm_dq.DQ_DRVT_REPORT_PRC;
%let tpOut_connect =  DEFER=YES PATH=DWH.IMB.RU AUTHDOMAIN="OraAuth_DM_DQ" 
;
%let tpOut_engine = ORACLE;
%let tpOut_memtype = DATA;
%let tpOut_options = %nrquote();
%let tpOut_alter = %nrquote();
%let tpOut_path = %nrquote(/DWH_DMDQ_REP/Marts/DQ_DRVT/DQ_DRVT_REPORT_PRC%(Table%));
%let tpOut_type = 1;
%let tpOut_label = %nrquote();
/* List of target columns to keep  */ 
%let tpOut_keep = REP_DT REP_ID PRC CNT_ALL CNT_ERR DWH_DT;


%let tpWhere = %nrquote(REP_ID = 1 AND REP_DT = &DMDQ_REPORT_START_DTTM);

/* List of target columns to keep  */ 
%let _keep = REP_DT REP_ID PRC CNT_ALL CNT_ERR DWH_DT;
/* List of target columns to keep  */ 
%let keep = REP_DT REP_ID PRC CNT_ALL CNT_ERR DWH_DT;
/*****************************************************************
* ВЕРСИЯ:
*   $Id: transform_table_delete.sas 2142 2012-08-17 14:15:09Z nesterenok $
*
******************************************************************
* НАЗНАЧЕНИЕ:
*   Удаляет из указанной таблицы записи.
*
* ПАРАМЕТРЫ:
*   tpOut                  + имя целевой таблицы, которая будет очищена
*   tpWhere                - условие отбора записей под удаление
*                            по умолчанию отсутствует, т.е. удаляются все записи
*
******************************************************************/

%macro transform_table_delete;

   /* Удаляем записи */
   /* TODO: truncate */
   proc sql;
      delete from &tpOut
      %if %length(&tpWhere) gt 0 %then %do;
         where (%unquote(&tpWhere))
      %end;
      ;
   quit;
   %error_check (mpStepType=SQL);

%mend transform_table_delete;

%transform_table_delete;


%rcSet(&syserr); 
%rcSet(&sysrc); 
%rcSet(&sqlrc); 



/**  Step end Очистить таблицу **/

/*==========================================================================* 
 * Step:            Extract                               A5ELGGF9.AK0000WG * 
 * Transform:       Extract                                                 * 
 * Description:     Отбор сделок DCD                                        * 
 *                                                                          * 
 * Source Table:    FINANCIAL_ACCOUNT -                   A569C89V.AE0000FK * 
 *                   dwh_dds.FINANCIAL_ACCOUNT                              * 
 * Target Table:    FINANCIAL_ACCOUNT - work.W1MF0DQGK    A5ELGGF9.AF0000CG * 
 *==========================================================================*/ 

%let transformID = %quote(A5ELGGF9.AK0000WG);
%let trans_rc = 0;
%let etls_stepStartTime = %sysfunc(datetime(), datetime20.); 

%let etls_recnt = 0;
%macro etls_recordCheck; 
   %let etls_recCheckExist = %eval(%sysfunc(exist(dwh_dds.FINANCIAL_ACCOUNT, DATA)) or 
         %sysfunc(exist(dwh_dds.FINANCIAL_ACCOUNT, VIEW))); 
   
   %if (&etls_recCheckExist) %then
   %do;
      proc sql noprint;
         select count(*) into :etls_recnt from dwh_dds.FINANCIAL_ACCOUNT;
      quit;
   %end;
%mend etls_recordCheck;
%etls_recordCheck;

%let SYSLAST = %nrquote(dwh_dds.FINANCIAL_ACCOUNT); 

%let SYS_SQL_IP_SPEEDO = Y;
%let SYS_SQL_MAPPUTTO = sas_put;
%let SYS_SQLREDUCEPUT = DBMS;
%global etls_sql_pushDown;
%let etls_sql_pushDown = -1;
option DBIDIRECTEXEC;

/*---- Map the columns  ----*/ 
proc datasets lib = work nolist nowarn memtype = (data view);
   delete W1MF0DQGK;
quit;

%put %str(NOTE: Mapping columns ...);
proc sql;
   create view work.W1MF0DQGK as
      select
         ACCOUNT_RK,
         VALID_FROM_DTTM,
         VALID_TO_DTTM,
         ACCOUNT_ID,
         SOURCE_SYSTEM_CD,
         ACCOUNT_REGISTRATION_NM,
         ALTERNATE_ACCOUNT_NM,
         FINANCIAL_ACCOUNT_TYPE_CD,
         AUTO_DEBIT_ACCOUNT_TYPE_CD,
         ACCOUNT_REGISTRATION_TYPE_CD,
         ACCOUNT_STATUS_CD,
         OPEN_DT,
         CLOSE_DT,
         CLOSE_REASON_CD,
         ACCOUNT_TAX_ID,
         EXPECTED_LOSS_PCT,
         INDIVIDUAL_ORGANIZATION_CD,
         SOURCE_CD,
         OPENING_CHANNEL_CD,
         PREFERRED_CHANNEL_CD,
         CURRENCY_CD,
         PRIMARY_PHONE_NO,
         PRIMARY_PHONE_TYPE_CD,
         SECONDARY_PHONE_NO,
         SECONDARY_PHONE_TYPE_CD,
         MAILABLE_FLG,
         TELEPHONABLE_FLG,
         EMAIL_FLG,
         SMS_FLG,
         DO_NOT_CONTACT_FLG,
         EMPLOYEE_RK,
         CURRENCY_BASED_ACCOUNT_FLG,
         FEE_BASED_FLG,
         ANNUAL_FEES_AMT,
         MONTHLY_FEES_AMT,
         CAMPAIGN_CD,
         COMMUNICATION_CD,
         REGISTERED_ONLINE_DT,
         FIRST_LOGIN_DT,
         ONLINE_BILL_PAYMENT_FLG,
         ID_VERIFICATION_TYPE_CD,
         PREVIOUS_ACCOUNT_ID,
         OPEN_BRANCH_FINANCIAL_UNIT_RK,
         PRIM_BRANCH_FINANCIAL_UNIT_RK,
         FINANCIAL_APPLICATION_RK,
         CREDIT_FACILITY_RK,
         FUTURE_MARGIN_INCOME_AMT,
         IN_DEFAULT_FLG,
         FINANCIAL_BOOK_RK,
         IRRECOVERABLE_FLG,
         OWNED_BY_INTERNAL_ORG_RK,
         PREVIOUS_BANK_EXTERNAL_ORG_RK,
         NETTING_SET_RK,
         REVOLVING_FLG,
         SOURCE_CHANNEL_CD,
         GRACE_PERIOD_DAYS_CNT,
         REMARGINING_DAYS_CNT,
         FINANCIAL_CALENDAR_RK,
         DAY_BASIS_CD,
         PORTFOLIO_ID,
         SECURITIZATION_POOL_RK,
         RECEIVABLES_POOL_RK,
         ACCOUNT_USAGE_TYPE_CD,
         RISK_ALARM_FLG,
         LOW_PROFITABILITY_FLG,
         ACCOUNT_LIFECYCLE_STG_CD,
         ATTRITION_ALARM_FLG,
         BALANCE_FROZEN_FLG,
         BALANCE_FROZEN_DT,
         ACCOUNT_BLOCK_REASON_CD,
         TAXATION_STATE_CD,
         EFFECTIVE_MATURITY_YEAR_NO,
         GL_ACCOUNT_RK,
         FROM_OTHER_INSTITUTION_FLG,
         ACCOUNT_RENEWAL_CNT,
         BALANCE_TRANSFER_DT,
         BALANCE_TRANSFER_AMT,
         BALANCE_TRANSFER_CNT,
         BASE_LONG_TERM_APR_RT,
         BROKER_FLG,
         MULT_RATE_FLG,
         AUTO_DEBIT_ACCOUNT_NO,
         WORST_STATUS_LAST_12_MTH_CD,
         WORST_STATUS_LAST_12_MTH_DT,
         BALANCE_TRNSF_OTHER_ACCT_CNT,
         EFFECTIVE_FROM_DTTM,
         EFFECTIVE_TO_DTTM,
         COUNTERPARTY_RK,
         INSURED_BY_COUNTERPARTY_RK,
         STATEMENT_FREQUENCY_CD,
         SECURITY_DEPOSIT_AMT,
         SECURITY_DEPOSIT_REFUND_AMT,
         FIRST_PAYMENT_DT,
         LAST_PAYMENT_DT,
         FIRST_RESET_DT,
         LAST_RESET_DT,
         RESETS_PER_ANNUM_NO,
         PRINCIPAL_PAYMENT_TYPE_CD,
         PRINCIPAL_PAYMENT_AMT,
         RATE_POLICY_RK,
         SPREAD_RT,
         DISCOUNT_SPREAD_RT,
         INITIAL_CONTRACT_RT,
         FIXED_MONTHLY_PREPAYMENT_RT,
         CAPITAL_ALLOCATION_RK,
         CAPITAL_COST_RK,
         SEGMENT_RK,
         NEAR_BRANCH_FINANCIAL_UNIT_RK,
         STATEMENT_OPT_FLG,
         VALUE_SCALING_FACTOR_RT,
         INTERNAL_REPORTING_CATEGORY_CD,
         CONVEXITY_ADJUSTMENT_FLG,
         ARREARS_PAYMENT_CD,
         QUANTO_FEATURE_RK,
         CASH_INTENSIVE_BUSINESS_FLG,
         LETTER_OF_CREDIT_ONFILE_FLG,
         TRADE_FINANCE_FLG,
         ANNUITY_PAYMENT_TYPE_CD,
         INTEREST_PAYMENT_TYPE_CD,
         INTEREST_PAYMENT_TIME_FREQ_CD,
         LIQUIDITY_CATEGORY_TYPE_CD,
         HOLIDAY_DATE_ROLL_CONV_CD,
         WEEKEND_DATE_ROLL_CONV_CD,
         EXPENSE_ALLOCATION_RK,
         FIRST_INTEREST_PAYMENT_DT,
         LAST_INTEREST_PAYMENT_DT,
         PROCESSED_DTTM,
         IRB_DUMMY_TYPE_CD,
         IRB_SRC_ACCOUNT_ID
   from &SYSLAST
      where FINANCIAL_ACCOUNT_TYPE_CD = 'DCD' AND
         VALID_FROM_DTTM <= &REPDT < VALID_TO_DTTM
   ;
quit;

%let SYSLAST = work.W1MF0DQGK;

%global etls_sql_pushDown;
%let etls_sql_pushDown = &sys_sql_ip_all;

%rcSet(&sqlrc); 



/**  Step end Extract **/

/*==========================================================================* 
 * Step:            Extract                               A5ELGGF9.AK0000WH * 
 * Transform:       Extract                                                 * 
 * Description:     Отбор сделок DEP                                        * 
 *                                                                          * 
 * Source Table:    FINANCIAL_ACCOUNT -                   A569C89V.AE0000FK * 
 *                   dwh_dds.FINANCIAL_ACCOUNT                              * 
 * Target Table:    FINANCIAL_ACCOUNT - work.W1MPV9BL3    A5ELGGF9.AF0000CH * 
 *==========================================================================*/ 

%let transformID = %quote(A5ELGGF9.AK0000WH);
%let trans_rc = 0;
%let etls_stepStartTime = %sysfunc(datetime(), datetime20.); 

%let etls_recnt = 0;
%macro etls_recordCheck; 
   %let etls_recCheckExist = %eval(%sysfunc(exist(dwh_dds.FINANCIAL_ACCOUNT, DATA)) or 
         %sysfunc(exist(dwh_dds.FINANCIAL_ACCOUNT, VIEW))); 
   
   %if (&etls_recCheckExist) %then
   %do;
      proc sql noprint;
         select count(*) into :etls_recnt from dwh_dds.FINANCIAL_ACCOUNT;
      quit;
   %end;
%mend etls_recordCheck;
%etls_recordCheck;

%let SYSLAST = %nrquote(dwh_dds.FINANCIAL_ACCOUNT); 

%let SYS_SQL_IP_SPEEDO = Y;
%let SYS_SQL_MAPPUTTO = sas_put;
%let SYS_SQLREDUCEPUT = DBMS;
%global etls_sql_pushDown;
%let etls_sql_pushDown = -1;
option DBIDIRECTEXEC;

/*---- Map the columns  ----*/ 
proc datasets lib = work nolist nowarn memtype = (data view);
   delete W1MPV9BL3;
quit;

%put %str(NOTE: Mapping columns ...);
proc sql;
   create view work.W1MPV9BL3 as
      select
         ACCOUNT_RK,
         VALID_FROM_DTTM,
         VALID_TO_DTTM,
         ACCOUNT_ID,
         SOURCE_SYSTEM_CD,
         ACCOUNT_REGISTRATION_NM,
         ALTERNATE_ACCOUNT_NM,
         FINANCIAL_ACCOUNT_TYPE_CD,
         AUTO_DEBIT_ACCOUNT_TYPE_CD,
         ACCOUNT_REGISTRATION_TYPE_CD,
         ACCOUNT_STATUS_CD,
         OPEN_DT,
         CLOSE_DT,
         CLOSE_REASON_CD,
         ACCOUNT_TAX_ID,
         EXPECTED_LOSS_PCT,
         INDIVIDUAL_ORGANIZATION_CD,
         SOURCE_CD,
         OPENING_CHANNEL_CD,
         PREFERRED_CHANNEL_CD,
         CURRENCY_CD,
         PRIMARY_PHONE_NO,
         PRIMARY_PHONE_TYPE_CD,
         SECONDARY_PHONE_NO,
         SECONDARY_PHONE_TYPE_CD,
         MAILABLE_FLG,
         TELEPHONABLE_FLG,
         EMAIL_FLG,
         SMS_FLG,
         DO_NOT_CONTACT_FLG,
         EMPLOYEE_RK,
         CURRENCY_BASED_ACCOUNT_FLG,
         FEE_BASED_FLG,
         ANNUAL_FEES_AMT,
         MONTHLY_FEES_AMT,
         CAMPAIGN_CD,
         COMMUNICATION_CD,
         REGISTERED_ONLINE_DT,
         FIRST_LOGIN_DT,
         ONLINE_BILL_PAYMENT_FLG,
         ID_VERIFICATION_TYPE_CD,
         PREVIOUS_ACCOUNT_ID,
         OPEN_BRANCH_FINANCIAL_UNIT_RK,
         PRIM_BRANCH_FINANCIAL_UNIT_RK,
         FINANCIAL_APPLICATION_RK,
         CREDIT_FACILITY_RK,
         FUTURE_MARGIN_INCOME_AMT,
         IN_DEFAULT_FLG,
         FINANCIAL_BOOK_RK,
         IRRECOVERABLE_FLG,
         OWNED_BY_INTERNAL_ORG_RK,
         PREVIOUS_BANK_EXTERNAL_ORG_RK,
         NETTING_SET_RK,
         REVOLVING_FLG,
         SOURCE_CHANNEL_CD,
         GRACE_PERIOD_DAYS_CNT,
         REMARGINING_DAYS_CNT,
         FINANCIAL_CALENDAR_RK,
         DAY_BASIS_CD,
         PORTFOLIO_ID,
         SECURITIZATION_POOL_RK,
         RECEIVABLES_POOL_RK,
         ACCOUNT_USAGE_TYPE_CD,
         RISK_ALARM_FLG,
         LOW_PROFITABILITY_FLG,
         ACCOUNT_LIFECYCLE_STG_CD,
         ATTRITION_ALARM_FLG,
         BALANCE_FROZEN_FLG,
         BALANCE_FROZEN_DT,
         ACCOUNT_BLOCK_REASON_CD,
         TAXATION_STATE_CD,
         EFFECTIVE_MATURITY_YEAR_NO,
         GL_ACCOUNT_RK,
         FROM_OTHER_INSTITUTION_FLG,
         ACCOUNT_RENEWAL_CNT,
         BALANCE_TRANSFER_DT,
         BALANCE_TRANSFER_AMT,
         BALANCE_TRANSFER_CNT,
         BASE_LONG_TERM_APR_RT,
         BROKER_FLG,
         MULT_RATE_FLG,
         AUTO_DEBIT_ACCOUNT_NO,
         WORST_STATUS_LAST_12_MTH_CD,
         WORST_STATUS_LAST_12_MTH_DT,
         BALANCE_TRNSF_OTHER_ACCT_CNT,
         EFFECTIVE_FROM_DTTM,
         EFFECTIVE_TO_DTTM,
         COUNTERPARTY_RK,
         INSURED_BY_COUNTERPARTY_RK,
         STATEMENT_FREQUENCY_CD,
         SECURITY_DEPOSIT_AMT,
         SECURITY_DEPOSIT_REFUND_AMT,
         FIRST_PAYMENT_DT,
         LAST_PAYMENT_DT,
         FIRST_RESET_DT,
         LAST_RESET_DT,
         RESETS_PER_ANNUM_NO,
         PRINCIPAL_PAYMENT_TYPE_CD,
         PRINCIPAL_PAYMENT_AMT,
         RATE_POLICY_RK,
         SPREAD_RT,
         DISCOUNT_SPREAD_RT,
         INITIAL_CONTRACT_RT,
         FIXED_MONTHLY_PREPAYMENT_RT,
         CAPITAL_ALLOCATION_RK,
         CAPITAL_COST_RK,
         SEGMENT_RK,
         NEAR_BRANCH_FINANCIAL_UNIT_RK,
         STATEMENT_OPT_FLG,
         VALUE_SCALING_FACTOR_RT,
         INTERNAL_REPORTING_CATEGORY_CD,
         CONVEXITY_ADJUSTMENT_FLG,
         ARREARS_PAYMENT_CD,
         QUANTO_FEATURE_RK,
         CASH_INTENSIVE_BUSINESS_FLG,
         LETTER_OF_CREDIT_ONFILE_FLG,
         TRADE_FINANCE_FLG,
         ANNUITY_PAYMENT_TYPE_CD,
         INTEREST_PAYMENT_TYPE_CD,
         INTEREST_PAYMENT_TIME_FREQ_CD,
         LIQUIDITY_CATEGORY_TYPE_CD,
         HOLIDAY_DATE_ROLL_CONV_CD,
         WEEKEND_DATE_ROLL_CONV_CD,
         EXPENSE_ALLOCATION_RK,
         FIRST_INTEREST_PAYMENT_DT,
         LAST_INTEREST_PAYMENT_DT,
         PROCESSED_DTTM,
         IRB_DUMMY_TYPE_CD,
         IRB_SRC_ACCOUNT_ID
   from &SYSLAST
      where FINANCIAL_ACCOUNT_TYPE_CD = 'DEP' AND 
         VALID_FROM_DTTM <= &REPDT < VALID_TO_DTTM
   ;
quit;

%let SYSLAST = work.W1MPV9BL3;

%global etls_sql_pushDown;
%let etls_sql_pushDown = &sys_sql_ip_all;

%rcSet(&sqlrc); 



/**  Step end Extract **/

/*==========================================================================* 
 * Step:            SQL Join                              A5ELGGF9.AK0000WI * 
 * Transform:       Join                                                    * 
 * Description:                                                             * 
 *                                                                          * 
 * Source Tables:   FINANCIAL_ACCOUNT - work.W1MF0DQGK    A5ELGGF9.AF0000CG * 
 *                  FINANCIAL_INSTRUMENT_ASSOC -          A569C89V.AE0000FW * 
 *                   dwh_dds.FINANCIAL_INSTRUMENT_ASSOC                     * 
 *                  FINANCIAL_INSTRUMENT -                A569C89V.AE0000FV * 
 *                   dwh_dds.FINANCIAL_INSTRUMENT                           * 
 *                  FINANCIAL_ACCOUNT_ASSOC -             A569C89V.AE0000FL * 
 *                   dwh_dds.FINANCIAL_ACCOUNT_ASSOC                        * 
 *                  FINANCIAL_ACCOUNT - work.W1MPV9BL3    A5ELGGF9.AF0000CH * 
 * Target Table:    DCD - work.W1MF2CZX6                  A5ELGGF9.AF0000CI * 
 *==========================================================================*/ 

%let transformID = %quote(A5ELGGF9.AK0000WI);
%let trans_rc = 0;
%let etls_stepStartTime = %sysfunc(datetime(), datetime20.); 

%let etls_recnt = -1;
%let SYS_SQL_IP_SPEEDO = Y;
%let SYS_SQL_MAPPUTTO = sas_put;
%let SYS_SQLREDUCEPUT = DBMS;
%global etls_sql_pushDown;
%let etls_sql_pushDown = -1;
option DBIDIRECTEXEC;

proc datasets lib = work nolist nowarn memtype = (data view);
   delete W1MF2CZX6;
quit;

proc sql;
   create table work.W1MF2CZX6 as
   select
      W1MF0DQGK.ACCOUNT_RK length = 8   
         format = 11.
         informat = 11.
         label = 'ACCOUNT_RK',
      'П-01' as REPORTCODE length = 5   
         format = $5.
         informat = $5.
         label = 'REPORTCODE',
      &REPDT as REPORTDATE length = 8   
         format = DATETIME20.
         informat = DATETIME20.
         label = 'REPORTDATE',
      strip(W1MF0DQGK.ACCOUNT_REGISTRATION_NM) as FRONTKDEALID length = 10   
         format = $10.
         informat = $10.
         label = 'FRONTKDEALID',
      put(input(substr(W1MF0DQGK.ALTERNATE_ACCOUNT_NM, 1, findc(W1MF0DQGK.ALTERNATE_ACCOUNT_NM, '_')-1), best.), best.) as FRONTFDEALID length = 10   
         format = $10.
         informat = $10.
         label = 'FRONTFDEALID',
      case 
         when missing(FINANCIAL_INSTRUMENT.IRB_SRC_INSTRUMENT_ID )
            then W1MPV9BL3.IRB_SRC_ACCOUNT_ID
         when missing(W1MPV9BL3.IRB_SRC_ACCOUNT_ID )
            then FINANCIAL_INSTRUMENT.IRB_SRC_INSTRUMENT_ID
         when not missing(FINANCIAL_INSTRUMENT.IRB_SRC_INSTRUMENT_ID ) AND not missing(W1MPV9BL3.IRB_SRC_ACCOUNT_ID )
            then cats(FINANCIAL_INSTRUMENT.IRB_SRC_INSTRUMENT_ID , ',', W1MPV9BL3.IRB_SRC_ACCOUNT_ID )
      end as DEALID length = 100   
         format = $100.
         informat = $100.
         label = 'DEALID',
      ifc(missing(FINANCIAL_INSTRUMENT.FINANCIAL_INSTRUMENT_TYPE_CD), 'DCD', FINANCIAL_INSTRUMENT.FINANCIAL_INSTRUMENT_TYPE_CD) as INSTRUMENTTYPECD length = 3   
         format = $3.
         informat = $3.
         label = 'INSTRUMENTTYPECD',
      W1MF0DQGK.OPEN_DT as DEALDATE length = 8   
         format = DATETIME20.
         informat = DATETIME20.
         label = 'DEALDATE'
   from
      work.W1MF0DQGK left join 
      dwh_dds.FINANCIAL_INSTRUMENT_ASSOC
         on
         (
            W1MF0DQGK.ACCOUNT_RK = FINANCIAL_INSTRUMENT_ASSOC.REFERENCE_ACCOUNT_RK
            and FINANCIAL_INSTRUMENT_ASSOC.VALID_FROM_DTTM <= &REPDT < FINANCIAL_INSTRUMENT_ASSOC.VALID_TO_DTTM
         ) left join 
      dwh_dds.FINANCIAL_INSTRUMENT
         on
         (
            FINANCIAL_INSTRUMENT_ASSOC.FINANCIAL_INSTRUMENT_RK = FINANCIAL_INSTRUMENT.FINANCIAL_INSTRUMENT_RK
            and FINANCIAL_INSTRUMENT.VALID_FROM_DTTM <= &REPDT < FINANCIAL_INSTRUMENT.VALID_TO_DTTM
            and FINANCIAL_INSTRUMENT.IRB_DUMMY_TYPE_CD IS NULL 
            and FINANCIAL_INSTRUMENT.FINANCIAL_INSTRUMENT_TYPE_CD = 'DCD'
         ) left join 
      dwh_dds.FINANCIAL_ACCOUNT_ASSOC
         on
         (
            W1MF0DQGK.ACCOUNT_RK = FINANCIAL_ACCOUNT_ASSOC.ACCOUNT_RK
            and FINANCIAL_ACCOUNT_ASSOC.VALID_FROM_DTTM <= &REPDT < FINANCIAL_ACCOUNT_ASSOC.VALID_TO_DTTM
            and FINANCIAL_ACCOUNT_ASSOC.FINANCIAL_ACCT_ASSOC_TYPE_CD = 'DCD'
         ) left join 
      work.W1MPV9BL3
         on
         (
            FINANCIAL_ACCOUNT_ASSOC.REFERENCE_FINANCIAL_ACCOUNT_RK = W1MPV9BL3.ACCOUNT_RK
         )
   where
      FINANCIAL_INSTRUMENT.FINANCIAL_INSTRUMENT_RK NOT IS MISSING 
      or W1MPV9BL3.ACCOUNT_RK NOT IS MISSING 
      or W1MF0DQGK.IRB_DUMMY_TYPE_CD IS MISSING 
   group by
      W1MF0DQGK.ACCOUNT_RK
   having
      count(FINANCIAL_INSTRUMENT.FINANCIAL_INSTRUMENT_RK ) <> 1
   ;
quit;

%global etls_sql_pushDown;
%let etls_sql_pushDown = &sys_sql_ip_all;

%rcSet(&sqlrc); 



/**  Step end SQL Join **/

/*==========================================================================* 
 * Step:            SQL Join                              A5ELGGF9.AK0000WJ * 
 * Transform:       Join                                                    * 
 * Description:                                                             * 
 *                                                                          * 
 * Source Tables:   FINANCIAL_ACCOUNT - work.W1MF0DQGK    A5ELGGF9.AF0000CG * 
 *                  FINANCIAL_ACCOUNT - work.W1MPV9BL3    A5ELGGF9.AF0000CH * 
 *                  FINANCIAL_ACCOUNT_ASSOC -             A569C89V.AE0000FL * 
 *                   dwh_dds.FINANCIAL_ACCOUNT_ASSOC                        * 
 *                  FINANCIAL_INSTRUMENT_ASSOC -          A569C89V.AE0000FW * 
 *                   dwh_dds.FINANCIAL_INSTRUMENT_ASSOC                     * 
 *                  FINANCIAL_INSTRUMENT -                A569C89V.AE0000FV * 
 *                   dwh_dds.FINANCIAL_INSTRUMENT                           * 
 * Target Table:    DEP - work.W1MSB8N5I                  A5ELGGF9.AF0000CJ * 
 *==========================================================================*/ 

%let transformID = %quote(A5ELGGF9.AK0000WJ);
%let trans_rc = 0;
%let etls_stepStartTime = %sysfunc(datetime(), datetime20.); 

%let etls_recnt = -1;
%let SYS_SQL_IP_SPEEDO = Y;
%let SYS_SQL_MAPPUTTO = sas_put;
%let SYS_SQLREDUCEPUT = DBMS;
%global etls_sql_pushDown;
%let etls_sql_pushDown = -1;
option DBIDIRECTEXEC;

proc datasets lib = work nolist nowarn memtype = (data view);
   delete W1MSB8N5I;
quit;

proc sql;
   create table work.W1MSB8N5I as
   select
      W1MF0DQGK.ACCOUNT_RK length = 8   
         format = 11.
         informat = 11.
         label = 'ACCOUNT_RK',
      'П-01' as REPORTCODE length = 5   
         format = $5.
         informat = $5.
         label = 'REPORTCODE',
      &REPDT as REPORTDATE length = 8   
         format = DATETIME20.
         informat = DATETIME20.
         label = 'REPORTDATE',
      strip(W1MF0DQGK.ACCOUNT_REGISTRATION_NM ) as FRONTKDEALID length = 10   
         format = $10.
         informat = $10.
         label = 'FRONTKDEALID',
      put(input(substr(W1MF0DQGK.ALTERNATE_ACCOUNT_NM, 1, findc(W1MF0DQGK.ALTERNATE_ACCOUNT_NM, '_')-1), best.), best.) as FRONTFDEALID length = 10   
         format = $10.
         informat = $10.
         label = 'FRONTFDEALID',
      case 
         when missing(FINANCIAL_INSTRUMENT.IRB_SRC_INSTRUMENT_ID)
            then W1MPV9BL3.IRB_SRC_ACCOUNT_ID
         when missing(W1MPV9BL3.IRB_SRC_ACCOUNT_ID)
            then FINANCIAL_INSTRUMENT.IRB_SRC_INSTRUMENT_ID
         when NOT missing(FINANCIAL_INSTRUMENT.IRB_SRC_INSTRUMENT_ID) AND NOT missing(W1MPV9BL3.IRB_SRC_ACCOUNT_ID)
            then cats(FINANCIAL_INSTRUMENT.IRB_SRC_INSTRUMENT_ID , ',', W1MPV9BL3.IRB_SRC_ACCOUNT_ID )
      else " "
      end as DEALID length = 32   
         format = $32.
         informat = $32.,
      ifc(missing(FINANCIAL_INSTRUMENT.FINANCIAL_INSTRUMENT_TYPE_CD), 'DCD', FINANCIAL_INSTRUMENT.FINANCIAL_INSTRUMENT_TYPE_CD) as INSTRUMENTTYPECD length = 3   
         format = $3.
         informat = $3.
         label = 'INSTRUMENTTYPECD',
      W1MF0DQGK.OPEN_DT as DEALDATE length = 8   
         format = DATETIME20.
         informat = DATETIME20.
         label = 'DEALDATE'
   from
      work.W1MF0DQGK left join 
      dwh_dds.FINANCIAL_ACCOUNT_ASSOC
         on
         (
            W1MF0DQGK.ACCOUNT_RK = FINANCIAL_ACCOUNT_ASSOC.ACCOUNT_RK
            and FINANCIAL_ACCOUNT_ASSOC.VALID_FROM_DTTM <= &REPDT < FINANCIAL_ACCOUNT_ASSOC.VALID_TO_DTTM
         ) left join 
      work.W1MPV9BL3
         on
         (
            FINANCIAL_ACCOUNT_ASSOC.REFERENCE_FINANCIAL_ACCOUNT_RK = W1MPV9BL3.ACCOUNT_RK
            and W1MPV9BL3.FINANCIAL_ACCOUNT_TYPE_CD = 'DEP'
            and W1MPV9BL3.IRB_DUMMY_TYPE_CD IS MISSING 
         ) left join 
      dwh_dds.FINANCIAL_INSTRUMENT_ASSOC
         on
         (
            W1MF0DQGK.ACCOUNT_RK = FINANCIAL_INSTRUMENT_ASSOC.REFERENCE_ACCOUNT_RK
            and FINANCIAL_INSTRUMENT_ASSOC.VALID_FROM_DTTM <= &REPDT < FINANCIAL_INSTRUMENT_ASSOC.VALID_TO_DTTM
         ) left join 
      dwh_dds.FINANCIAL_INSTRUMENT
         on
         (
            FINANCIAL_INSTRUMENT_ASSOC.FINANCIAL_INSTRUMENT_RK = FINANCIAL_INSTRUMENT.FINANCIAL_INSTRUMENT_RK
            and FINANCIAL_INSTRUMENT.VALID_FROM_DTTM <= &REPDT < FINANCIAL_INSTRUMENT.VALID_TO_DTTM
         )
   where
      W1MPV9BL3.ACCOUNT_RK NOT IS MISSING 
      or FINANCIAL_INSTRUMENT.FINANCIAL_INSTRUMENT_RK NOT IS MISSING 
      or W1MF0DQGK.IRB_DUMMY_TYPE_CD IS MISSING 
   group by
      W1MF0DQGK.ACCOUNT_RK
   having
      count(W1MPV9BL3.ACCOUNT_RK ) <> 1
   ;
quit;

%global etls_sql_pushDown;
%let etls_sql_pushDown = &sys_sql_ip_all;

%rcSet(&sqlrc); 



/**  Step end SQL Join **/

/*==========================================================================* 
 * Step:            Extract                               A5ELGGF9.AK0000WK * 
 * Transform:       Extract                                                 * 
 * Description:     Отбор сделок DRV                                        * 
 *                                                                          * 
 * Source Table:    FINANCIAL_ACCOUNT -                   A569C89V.AE0000FK * 
 *                   dwh_dds.FINANCIAL_ACCOUNT                              * 
 * Target Table:    FINANCIAL_ACCOUNT - work.W1MF2W5NW    A5ELGGF9.AF0000CK * 
 *==========================================================================*/ 

%let transformID = %quote(A5ELGGF9.AK0000WK);
%let trans_rc = 0;
%let etls_stepStartTime = %sysfunc(datetime(), datetime20.); 

%let etls_recnt = 0;
%macro etls_recordCheck; 
   %let etls_recCheckExist = %eval(%sysfunc(exist(dwh_dds.FINANCIAL_ACCOUNT, DATA)) or 
         %sysfunc(exist(dwh_dds.FINANCIAL_ACCOUNT, VIEW))); 
   
   %if (&etls_recCheckExist) %then
   %do;
      proc sql noprint;
         select count(*) into :etls_recnt from dwh_dds.FINANCIAL_ACCOUNT;
      quit;
   %end;
%mend etls_recordCheck;
%etls_recordCheck;

%let SYSLAST = %nrquote(dwh_dds.FINANCIAL_ACCOUNT); 

%let SYS_SQL_IP_SPEEDO = Y;
%let SYS_SQL_MAPPUTTO = sas_put;
%let SYS_SQLREDUCEPUT = DBMS;
%global etls_sql_pushDown;
%let etls_sql_pushDown = -1;
option DBIDIRECTEXEC;

/*---- Map the columns  ----*/ 
proc datasets lib = work nolist nowarn memtype = (data view);
   delete W1MF2W5NW;
quit;

%put %str(NOTE: Mapping columns ...);
proc sql;
   create view work.W1MF2W5NW as
      select
         ACCOUNT_RK,
         VALID_FROM_DTTM,
         VALID_TO_DTTM,
         ACCOUNT_ID,
         SOURCE_SYSTEM_CD,
         ACCOUNT_REGISTRATION_NM,
         ALTERNATE_ACCOUNT_NM,
         FINANCIAL_ACCOUNT_TYPE_CD,
         AUTO_DEBIT_ACCOUNT_TYPE_CD,
         ACCOUNT_REGISTRATION_TYPE_CD,
         ACCOUNT_STATUS_CD,
         OPEN_DT,
         CLOSE_DT,
         CLOSE_REASON_CD,
         ACCOUNT_TAX_ID,
         EXPECTED_LOSS_PCT,
         INDIVIDUAL_ORGANIZATION_CD,
         SOURCE_CD,
         OPENING_CHANNEL_CD,
         PREFERRED_CHANNEL_CD,
         CURRENCY_CD,
         PRIMARY_PHONE_NO,
         PRIMARY_PHONE_TYPE_CD,
         SECONDARY_PHONE_NO,
         SECONDARY_PHONE_TYPE_CD,
         MAILABLE_FLG,
         TELEPHONABLE_FLG,
         EMAIL_FLG,
         SMS_FLG,
         DO_NOT_CONTACT_FLG,
         EMPLOYEE_RK,
         CURRENCY_BASED_ACCOUNT_FLG,
         FEE_BASED_FLG,
         ANNUAL_FEES_AMT,
         MONTHLY_FEES_AMT,
         CAMPAIGN_CD,
         COMMUNICATION_CD,
         REGISTERED_ONLINE_DT,
         FIRST_LOGIN_DT,
         ONLINE_BILL_PAYMENT_FLG,
         ID_VERIFICATION_TYPE_CD,
         PREVIOUS_ACCOUNT_ID,
         OPEN_BRANCH_FINANCIAL_UNIT_RK,
         PRIM_BRANCH_FINANCIAL_UNIT_RK,
         FINANCIAL_APPLICATION_RK,
         CREDIT_FACILITY_RK,
         FUTURE_MARGIN_INCOME_AMT,
         IN_DEFAULT_FLG,
         FINANCIAL_BOOK_RK,
         IRRECOVERABLE_FLG,
         OWNED_BY_INTERNAL_ORG_RK,
         PREVIOUS_BANK_EXTERNAL_ORG_RK,
         NETTING_SET_RK,
         REVOLVING_FLG,
         SOURCE_CHANNEL_CD,
         GRACE_PERIOD_DAYS_CNT,
         REMARGINING_DAYS_CNT,
         FINANCIAL_CALENDAR_RK,
         DAY_BASIS_CD,
         PORTFOLIO_ID,
         SECURITIZATION_POOL_RK,
         RECEIVABLES_POOL_RK,
         ACCOUNT_USAGE_TYPE_CD,
         RISK_ALARM_FLG,
         LOW_PROFITABILITY_FLG,
         ACCOUNT_LIFECYCLE_STG_CD,
         ATTRITION_ALARM_FLG,
         BALANCE_FROZEN_FLG,
         BALANCE_FROZEN_DT,
         ACCOUNT_BLOCK_REASON_CD,
         TAXATION_STATE_CD,
         EFFECTIVE_MATURITY_YEAR_NO,
         GL_ACCOUNT_RK,
         FROM_OTHER_INSTITUTION_FLG,
         ACCOUNT_RENEWAL_CNT,
         BALANCE_TRANSFER_DT,
         BALANCE_TRANSFER_AMT,
         BALANCE_TRANSFER_CNT,
         BASE_LONG_TERM_APR_RT,
         BROKER_FLG,
         MULT_RATE_FLG,
         AUTO_DEBIT_ACCOUNT_NO,
         WORST_STATUS_LAST_12_MTH_CD,
         WORST_STATUS_LAST_12_MTH_DT,
         BALANCE_TRNSF_OTHER_ACCT_CNT,
         EFFECTIVE_FROM_DTTM,
         EFFECTIVE_TO_DTTM,
         COUNTERPARTY_RK,
         INSURED_BY_COUNTERPARTY_RK,
         STATEMENT_FREQUENCY_CD,
         SECURITY_DEPOSIT_AMT,
         SECURITY_DEPOSIT_REFUND_AMT,
         FIRST_PAYMENT_DT,
         LAST_PAYMENT_DT,
         FIRST_RESET_DT,
         LAST_RESET_DT,
         RESETS_PER_ANNUM_NO,
         PRINCIPAL_PAYMENT_TYPE_CD,
         PRINCIPAL_PAYMENT_AMT,
         RATE_POLICY_RK,
         SPREAD_RT,
         DISCOUNT_SPREAD_RT,
         INITIAL_CONTRACT_RT,
         FIXED_MONTHLY_PREPAYMENT_RT,
         CAPITAL_ALLOCATION_RK,
         CAPITAL_COST_RK,
         SEGMENT_RK,
         NEAR_BRANCH_FINANCIAL_UNIT_RK,
         STATEMENT_OPT_FLG,
         VALUE_SCALING_FACTOR_RT,
         INTERNAL_REPORTING_CATEGORY_CD,
         CONVEXITY_ADJUSTMENT_FLG,
         ARREARS_PAYMENT_CD,
         QUANTO_FEATURE_RK,
         CASH_INTENSIVE_BUSINESS_FLG,
         LETTER_OF_CREDIT_ONFILE_FLG,
         TRADE_FINANCE_FLG,
         ANNUITY_PAYMENT_TYPE_CD,
         INTEREST_PAYMENT_TYPE_CD,
         INTEREST_PAYMENT_TIME_FREQ_CD,
         LIQUIDITY_CATEGORY_TYPE_CD,
         HOLIDAY_DATE_ROLL_CONV_CD,
         WEEKEND_DATE_ROLL_CONV_CD,
         EXPENSE_ALLOCATION_RK,
         FIRST_INTEREST_PAYMENT_DT,
         LAST_INTEREST_PAYMENT_DT,
         PROCESSED_DTTM,
         IRB_DUMMY_TYPE_CD,
         IRB_SRC_ACCOUNT_ID
   from &SYSLAST
      where FINANCIAL_ACCOUNT_TYPE_CD = 'DRV' AND 
         VALID_FROM_DTTM <= &REPDT < VALID_TO_DTTM
   ;
quit;

%let SYSLAST = work.W1MF2W5NW;

%global etls_sql_pushDown;
%let etls_sql_pushDown = &sys_sql_ip_all;

%rcSet(&sqlrc); 



/**  Step end Extract **/

/*==========================================================================* 
 * Step:            SQL Join                              A5ELGGF9.AK0000WL * 
 * Transform:       Join                                                    * 
 * Description:     MasterTableLEG = FRS, SEC                               * 
 *                                                                          * 
 * Source Tables:   FINANCIAL_ACCOUNT - work.W1MF2W5NW    A5ELGGF9.AF0000CK * 
 *                  FINANCIAL_INSTRUMENT_ASSOC -          A569C89V.AE0000FW * 
 *                   dwh_dds.FINANCIAL_INSTRUMENT_ASSOC                     * 
 *                  FINANCIAL_INSTRUMENT -                A569C89V.AE0000FV * 
 *                   dwh_dds.FINANCIAL_INSTRUMENT                           * 
 *                  SWAP_INSTRUMENT_LEG -                 A569C89V.AE0000JF * 
 *                   dwh_dds.SWAP_INSTRUMENT_LEG                            * 
 * Target Table:    SQL Join - work.W1MQTPHSE             A5ELGGF9.AF0000CL * 
 *==========================================================================*/ 

%let transformID = %quote(A5ELGGF9.AK0000WL);
%let trans_rc = 0;
%let etls_stepStartTime = %sysfunc(datetime(), datetime20.); 

%let etls_recnt = -1;
%let SYS_SQL_IP_SPEEDO = Y;
%let SYS_SQL_MAPPUTTO = sas_put;
%let SYS_SQLREDUCEPUT = DBMS;
%global etls_sql_pushDown;
%let etls_sql_pushDown = -1;
option DBIDIRECTEXEC;

proc datasets lib = work nolist nowarn memtype = (data view);
   delete W1MQTPHSE;
quit;

proc sql;
   create table work.W1MQTPHSE as
   select
      W1MF2W5NW.ACCOUNT_RK length = 8   
         format = 11.
         informat = 11.
         label = 'ACCOUNT_RK',
      'П-01' as REPORTCODE length = 5   
         format = $5.
         informat = $5.
         label = 'REPORTCODE',
      &REPDT as REPORTDATE length = 8   
         format = DATETIME20.
         informat = DATETIME20.
         label = 'REPORTDATE',
      strip(W1MF2W5NW.ACCOUNT_REGISTRATION_NM ) as FRONTKDEALID length = 10   
         format = $10.
         informat = $10.
         label = 'FRONTKDEALID',
      put(input(substr(W1MF2W5NW.ALTERNATE_ACCOUNT_NM, 1, findc(W1MF2W5NW.ALTERNATE_ACCOUNT_NM , '_')-1), best.), best.) as FRONTFDEALID length = 10   
         format = $10.
         informat = $10.
         label = 'FRONTFDEALID',
      FINANCIAL_INSTRUMENT.IRB_SRC_INSTRUMENT_ID as DEALID length = 100   
         format = $100.
         informat = $100.
         label = 'DEALID',
      FINANCIAL_INSTRUMENT.FINANCIAL_INSTRUMENT_TYPE_CD as INSTRUMENTTYPECD length = 3   
         format = $3.
         informat = $3.
         label = 'INSTRUMENTTYPECD',
      W1MF2W5NW.OPEN_DT as DEALDATE length = 8   
         format = DATETIME20.
         informat = DATETIME20.
         label = 'DEALDATE'
   from
      work.W1MF2W5NW left join 
      dwh_dds.FINANCIAL_INSTRUMENT_ASSOC
         on
         (
            W1MF2W5NW.ACCOUNT_RK = FINANCIAL_INSTRUMENT_ASSOC.REFERENCE_ACCOUNT_RK
            and FINANCIAL_INSTRUMENT_ASSOC.VALID_FROM_DTTM <= &REPDT < FINANCIAL_INSTRUMENT_ASSOC.VALID_TO_DTTM
         ) left join 
      dwh_dds.FINANCIAL_INSTRUMENT
         on
         (
            FINANCIAL_INSTRUMENT_ASSOC.FINANCIAL_INSTRUMENT_RK = FINANCIAL_INSTRUMENT.FINANCIAL_INSTRUMENT_RK
            and FINANCIAL_INSTRUMENT.VALID_FROM_DTTM <= &REPDT < FINANCIAL_INSTRUMENT.VALID_TO_DTTM
            and FINANCIAL_INSTRUMENT.IRB_DUMMY_TYPE_CD IS NULL 
         ) left join 
      dwh_dds.SWAP_INSTRUMENT_LEG
         on
         (
            FINANCIAL_INSTRUMENT.FINANCIAL_INSTRUMENT_RK = SWAP_INSTRUMENT_LEG.FINANCIAL_INSTRUMENT_RK
            and SWAP_INSTRUMENT_LEG.VALID_FROM_DTTM <= &REPDT < SWAP_INSTRUMENT_LEG.VALID_TO_DTTM
         )
   where
      FINANCIAL_INSTRUMENT.FINANCIAL_INSTRUMENT_TYPE_CD IN ('CIS','IRS', 'SWS', 'SWP')
   ;
quit;

%global etls_sql_pushDown;
%let etls_sql_pushDown = &sys_sql_ip_all;

%rcSet(&sqlrc); 



/**  Step end SQL Join **/

/*==========================================================================* 
 * Step:            User Written                          A5ELGGF9.AK0000WM * 
 * Transform:       User Written                                            * 
 * Description:     Проверка условия DQ                                     * 
 *                                                                          * 
 * Source Table:    SQL Join - work.W1MQTPHSE             A5ELGGF9.AF0000CL * 
 * Target Table:    User Written - work.W1MSUOBNV         A5ELGGF9.AF0000CM * 
 *                                                                          * 
 * User Written:    SourceCode                                              * 
 *==========================================================================*/ 

%let transformID = %quote(A5ELGGF9.AK0000WM);
%let trans_rc = 0;
%let etls_stepStartTime = %sysfunc(datetime(), datetime20.); 

%let etls_recCheckExist = 0; 
%let etls_recnt = 0; 
%macro etls_recordCheck; 
   %let etls_recCheckExist = %eval(%sysfunc(exist(work.W1MQTPHSE, DATA)) or 
         %sysfunc(exist(work.W1MQTPHSE, VIEW))); 
   
   %if (&etls_recCheckExist) %then
   %do;
      %local etls_syntaxcheck; 
      %let etls_syntaxcheck = %sysfunc(getoption(syntaxcheck)); 
      /* Turn off syntaxcheck option to perform following steps  */ 
      options nosyntaxcheck;
      
      proc contents data = work.W1MQTPHSE out = work.etls_contents(keep = nobs) noprint; 
      run; 
      
      data _null_; 
         set work.etls_contents (obs = 1); 
         call symput("etls_recnt", left(put(nobs,32.))); 
      run;
      
      proc datasets lib = work nolist nowarn memtype = (data view);
         delete etls_contents;
      quit;
      
      /* Reset syntaxcheck option to previous setting  */ 
      options &etls_syntaxcheck; 
   %end;
%mend etls_recordCheck;
%etls_recordCheck;

%let SYSLAST = %nrquote(work.W1MQTPHSE); 

%let _INPUT_count = 1;
%let _INPUT = work.W1MQTPHSE;
%let _INPUT_connect = ;
%let _INPUT_engine = ;
%let _INPUT_memtype = DATA;
%let _INPUT_options = %nrquote();
%let _INPUT_alter = %nrquote();
%let _INPUT_path = %nrquote(/SQL Join_A5ELGGF9.AF0000CL%(WorkTable%));
%let _INPUT_type = 1;
%let _INPUT_label = %nrquote();

%let _INPUT1 = work.W1MQTPHSE;
%let _INPUT1_connect = ;
%let _INPUT1_engine = ;
%let _INPUT1_memtype = DATA;
%let _INPUT1_options = %nrquote();
%let _INPUT1_alter = %nrquote();
%let _INPUT1_path = %nrquote(/SQL Join_A5ELGGF9.AF0000CL%(WorkTable%));
%let _INPUT1_type = 1;
%let _INPUT1_label = %nrquote();

%let _OUTPUT_count = 1;
%let _OUTPUT = work.W1MSUOBNV;
%let _OUTPUT_connect = ;
%let _OUTPUT_engine = ;
%let _OUTPUT_memtype = DATA;
%let _OUTPUT_options = %nrquote();
%let _OUTPUT_alter = %nrquote();
%let _OUTPUT_path = %nrquote(/User Written_A5ELGGF9.AF0000CM%(WorkTable%));
%let _OUTPUT_type = 1;
%let _OUTPUT_label = %nrquote();
/* List of target columns to keep  */ 
%let _OUTPUT_keep = ACCOUNT_RK REPORTCODE REPORTDATE FRONTKDEALID FRONTFDEALID DEALID 
        INSTRUMENTTYPECD DEALDATE;
%let _OUTPUT_col_count = 8;
%let _OUTPUT_col0_name = ACCOUNT_RK;
%let _OUTPUT_col0_table = work.W1MSUOBNV;
%let _OUTPUT_col0_length = 8;
%let _OUTPUT_col0_type = ;
%let _OUTPUT_col0_format = 11.;
%let _OUTPUT_col0_informat = 11.;
%let _OUTPUT_col0_label = %nrquote(ACCOUNT_RK);
%let _OUTPUT_col0_input0 = ACCOUNT_RK;
%let _OUTPUT_col0_exp = ;
%let _OUTPUT_col0_input = ACCOUNT_RK;
%let _OUTPUT_col0_input_count = 1;
%let _OUTPUT_col1_name = REPORTCODE;
%let _OUTPUT_col1_table = work.W1MSUOBNV;
%let _OUTPUT_col1_length = 5;
%let _OUTPUT_col1_type = $;
%let _OUTPUT_col1_format = $5.;
%let _OUTPUT_col1_informat = $5.;
%let _OUTPUT_col1_label = %nrquote(REPORTCODE);
%let _OUTPUT_col1_input0 = REPORTCODE;
%let _OUTPUT_col1_exp = ;
%let _OUTPUT_col1_input = REPORTCODE;
%let _OUTPUT_col1_input_count = 1;
%let _OUTPUT_col2_name = REPORTDATE;
%let _OUTPUT_col2_table = work.W1MSUOBNV;
%let _OUTPUT_col2_length = 8;
%let _OUTPUT_col2_type = ;
%let _OUTPUT_col2_format = DATETIME20.;
%let _OUTPUT_col2_informat = DATETIME20.;
%let _OUTPUT_col2_label = %nrquote(REPORTDATE);
%let _OUTPUT_col2_input0 = REPORTDATE;
%let _OUTPUT_col2_exp = ;
%let _OUTPUT_col2_input = REPORTDATE;
%let _OUTPUT_col2_input_count = 1;
%let _OUTPUT_col3_name = FRONTKDEALID;
%let _OUTPUT_col3_table = work.W1MSUOBNV;
%let _OUTPUT_col3_length = 10;
%let _OUTPUT_col3_type = $;
%let _OUTPUT_col3_format = $10.;
%let _OUTPUT_col3_informat = $10.;
%let _OUTPUT_col3_label = %nrquote(FRONTKDEALID);
%let _OUTPUT_col3_input0 = FRONTKDEALID;
%let _OUTPUT_col3_exp = ;
%let _OUTPUT_col3_input = FRONTKDEALID;
%let _OUTPUT_col3_input_count = 1;
%let _OUTPUT_col4_name = FRONTFDEALID;
%let _OUTPUT_col4_table = work.W1MSUOBNV;
%let _OUTPUT_col4_length = 10;
%let _OUTPUT_col4_type = $;
%let _OUTPUT_col4_format = $10.;
%let _OUTPUT_col4_informat = $10.;
%let _OUTPUT_col4_label = %nrquote(FRONTFDEALID);
%let _OUTPUT_col4_input0 = FRONTFDEALID;
%let _OUTPUT_col4_exp = ;
%let _OUTPUT_col4_input = FRONTFDEALID;
%let _OUTPUT_col4_input_count = 1;
%let _OUTPUT_col5_name = DEALID;
%let _OUTPUT_col5_table = work.W1MSUOBNV;
%let _OUTPUT_col5_length = 100;
%let _OUTPUT_col5_type = $;
%let _OUTPUT_col5_format = $100.;
%let _OUTPUT_col5_informat = $100.;
%let _OUTPUT_col5_label = %nrquote(IRB_SRC_INSTRUMENT_ID);
%let _OUTPUT_col5_input0 = DEALID;
%let _OUTPUT_col5_exp = ;
%let _OUTPUT_col5_input = DEALID;
%let _OUTPUT_col5_input_count = 1;
%let _OUTPUT_col6_name = INSTRUMENTTYPECD;
%let _OUTPUT_col6_table = work.W1MSUOBNV;
%let _OUTPUT_col6_length = 3;
%let _OUTPUT_col6_type = $;
%let _OUTPUT_col6_format = $3.;
%let _OUTPUT_col6_informat = $3.;
%let _OUTPUT_col6_label = %nrquote(FINANCIAL_INSTRUMENT_TYPE_CD);
%let _OUTPUT_col6_input0 = INSTRUMENTTYPECD;
%let _OUTPUT_col6_exp = ;
%let _OUTPUT_col6_input = INSTRUMENTTYPECD;
%let _OUTPUT_col6_input_count = 1;
%let _OUTPUT_col7_name = DEALDATE;
%let _OUTPUT_col7_table = work.W1MSUOBNV;
%let _OUTPUT_col7_length = 8;
%let _OUTPUT_col7_type = ;
%let _OUTPUT_col7_format = DATETIME20.;
%let _OUTPUT_col7_informat = DATETIME20.;
%let _OUTPUT_col7_label = %nrquote(OPEN_DT);
%let _OUTPUT_col7_input0 = DEALDATE;
%let _OUTPUT_col7_exp = ;
%let _OUTPUT_col7_input = DEALDATE;
%let _OUTPUT_col7_input_count = 1;

%let _OUTPUT1 = work.W1MSUOBNV;
%let _OUTPUT1_connect = ;
%let _OUTPUT1_engine = ;
%let _OUTPUT1_memtype = DATA;
%let _OUTPUT1_options = %nrquote();
%let _OUTPUT1_alter = %nrquote();
%let _OUTPUT1_path = %nrquote(/User Written_A5ELGGF9.AF0000CM%(WorkTable%));
%let _OUTPUT1_type = 1;
%let _OUTPUT1_label = %nrquote();
/* List of target columns to keep  */ 
%let _OUTPUT1_keep = ACCOUNT_RK REPORTCODE REPORTDATE FRONTKDEALID FRONTFDEALID DEALID 
        INSTRUMENTTYPECD DEALDATE;
%let _OUTPUT1_col_count = 8;
%let _OUTPUT1_col0_name = ACCOUNT_RK;
%let _OUTPUT1_col0_table = work.W1MSUOBNV;
%let _OUTPUT1_col0_length = 8;
%let _OUTPUT1_col0_type = ;
%let _OUTPUT1_col0_format = 11.;
%let _OUTPUT1_col0_informat = 11.;
%let _OUTPUT1_col0_label = %nrquote(ACCOUNT_RK);
%let _OUTPUT1_col0_input0 = ACCOUNT_RK;
%let _OUTPUT1_col0_exp = ;
%let _OUTPUT1_col0_input = ACCOUNT_RK;
%let _OUTPUT1_col0_input_count = 1;
%let _OUTPUT1_col1_name = REPORTCODE;
%let _OUTPUT1_col1_table = work.W1MSUOBNV;
%let _OUTPUT1_col1_length = 5;
%let _OUTPUT1_col1_type = $;
%let _OUTPUT1_col1_format = $5.;
%let _OUTPUT1_col1_informat = $5.;
%let _OUTPUT1_col1_label = %nrquote(REPORTCODE);
%let _OUTPUT1_col1_input0 = REPORTCODE;
%let _OUTPUT1_col1_exp = ;
%let _OUTPUT1_col1_input = REPORTCODE;
%let _OUTPUT1_col1_input_count = 1;
%let _OUTPUT1_col2_name = REPORTDATE;
%let _OUTPUT1_col2_table = work.W1MSUOBNV;
%let _OUTPUT1_col2_length = 8;
%let _OUTPUT1_col2_type = ;
%let _OUTPUT1_col2_format = DATETIME20.;
%let _OUTPUT1_col2_informat = DATETIME20.;
%let _OUTPUT1_col2_label = %nrquote(REPORTDATE);
%let _OUTPUT1_col2_input0 = REPORTDATE;
%let _OUTPUT1_col2_exp = ;
%let _OUTPUT1_col2_input = REPORTDATE;
%let _OUTPUT1_col2_input_count = 1;
%let _OUTPUT1_col3_name = FRONTKDEALID;
%let _OUTPUT1_col3_table = work.W1MSUOBNV;
%let _OUTPUT1_col3_length = 10;
%let _OUTPUT1_col3_type = $;
%let _OUTPUT1_col3_format = $10.;
%let _OUTPUT1_col3_informat = $10.;
%let _OUTPUT1_col3_label = %nrquote(FRONTKDEALID);
%let _OUTPUT1_col3_input0 = FRONTKDEALID;
%let _OUTPUT1_col3_exp = ;
%let _OUTPUT1_col3_input = FRONTKDEALID;
%let _OUTPUT1_col3_input_count = 1;
%let _OUTPUT1_col4_name = FRONTFDEALID;
%let _OUTPUT1_col4_table = work.W1MSUOBNV;
%let _OUTPUT1_col4_length = 10;
%let _OUTPUT1_col4_type = $;
%let _OUTPUT1_col4_format = $10.;
%let _OUTPUT1_col4_informat = $10.;
%let _OUTPUT1_col4_label = %nrquote(FRONTFDEALID);
%let _OUTPUT1_col4_input0 = FRONTFDEALID;
%let _OUTPUT1_col4_exp = ;
%let _OUTPUT1_col4_input = FRONTFDEALID;
%let _OUTPUT1_col4_input_count = 1;
%let _OUTPUT1_col5_name = DEALID;
%let _OUTPUT1_col5_table = work.W1MSUOBNV;
%let _OUTPUT1_col5_length = 100;
%let _OUTPUT1_col5_type = $;
%let _OUTPUT1_col5_format = $100.;
%let _OUTPUT1_col5_informat = $100.;
%let _OUTPUT1_col5_label = %nrquote(IRB_SRC_INSTRUMENT_ID);
%let _OUTPUT1_col5_input0 = DEALID;
%let _OUTPUT1_col5_exp = ;
%let _OUTPUT1_col5_input = DEALID;
%let _OUTPUT1_col5_input_count = 1;
%let _OUTPUT1_col6_name = INSTRUMENTTYPECD;
%let _OUTPUT1_col6_table = work.W1MSUOBNV;
%let _OUTPUT1_col6_length = 3;
%let _OUTPUT1_col6_type = $;
%let _OUTPUT1_col6_format = $3.;
%let _OUTPUT1_col6_informat = $3.;
%let _OUTPUT1_col6_label = %nrquote(FINANCIAL_INSTRUMENT_TYPE_CD);
%let _OUTPUT1_col6_input0 = INSTRUMENTTYPECD;
%let _OUTPUT1_col6_exp = ;
%let _OUTPUT1_col6_input = INSTRUMENTTYPECD;
%let _OUTPUT1_col6_input_count = 1;
%let _OUTPUT1_col7_name = DEALDATE;
%let _OUTPUT1_col7_table = work.W1MSUOBNV;
%let _OUTPUT1_col7_length = 8;
%let _OUTPUT1_col7_type = ;
%let _OUTPUT1_col7_format = DATETIME20.;
%let _OUTPUT1_col7_informat = DATETIME20.;
%let _OUTPUT1_col7_label = %nrquote(OPEN_DT);
%let _OUTPUT1_col7_input0 = DEALDATE;
%let _OUTPUT1_col7_exp = ;
%let _OUTPUT1_col7_input = DEALDATE;
%let _OUTPUT1_col7_input_count = 1;

/*---- Start of User Written Code  ----*/ 

proc sql;
	create table &_OUTPUT1 as	
	select * from &_INPUT1
	group by  ACCOUNT_RK
	having count(ACCOUNT_RK) ^= 2;
quit;

%error_check(mpStepType=SQL);

/*---- End of User Written Code  ----*/ 

%rcSet(&syserr); 
%rcSet(&sqlrc); 


/**  Step end User Written **/

/*==========================================================================* 
 * Step:            User Written                          A5ELGGF9.AK0000WN * 
 * Transform:       User Written                                            * 
 * Description:     Добавление атрибутов                                    * 
 *                                                                          * 
 * Source Table:    User Written - work.W1MSUOBNV         A5ELGGF9.AF0000CM * 
 * Target Table:    User Written - work.W1MT6BVXG         A5ELGGF9.AF0000CN * 
 *                                                                          * 
 * User Written:    SourceCode                                              * 
 *==========================================================================*/ 

%let transformID = %quote(A5ELGGF9.AK0000WN);
%let trans_rc = 0;
%let etls_stepStartTime = %sysfunc(datetime(), datetime20.); 

%let etls_recCheckExist = 0; 
%let etls_recnt = 0; 
%macro etls_recordCheck; 
   %let etls_recCheckExist = %eval(%sysfunc(exist(work.W1MSUOBNV, DATA)) or 
         %sysfunc(exist(work.W1MSUOBNV, VIEW))); 
   
   %if (&etls_recCheckExist) %then
   %do;
      %local etls_syntaxcheck; 
      %let etls_syntaxcheck = %sysfunc(getoption(syntaxcheck)); 
      /* Turn off syntaxcheck option to perform following steps  */ 
      options nosyntaxcheck;
      
      proc contents data = work.W1MSUOBNV out = work.etls_contents(keep = nobs) noprint; 
      run; 
      
      data _null_; 
         set work.etls_contents (obs = 1); 
         call symput("etls_recnt", left(put(nobs,32.))); 
      run;
      
      proc datasets lib = work nolist nowarn memtype = (data view);
         delete etls_contents;
      quit;
      
      /* Reset syntaxcheck option to previous setting  */ 
      options &etls_syntaxcheck; 
   %end;
%mend etls_recordCheck;
%etls_recordCheck;

%let SYSLAST = %nrquote(work.W1MSUOBNV); 

%let _INPUT_count = 1;
%let _INPUT = work.W1MSUOBNV;
%let _INPUT_connect = ;
%let _INPUT_engine = ;
%let _INPUT_memtype = DATA;
%let _INPUT_options = %nrquote();
%let _INPUT_alter = %nrquote();
%let _INPUT_path = %nrquote(/User Written_A5ELGGF9.AF0000CM%(WorkTable%));
%let _INPUT_type = 1;
%let _INPUT_label = %nrquote();

%let _INPUT1 = work.W1MSUOBNV;
%let _INPUT1_connect = ;
%let _INPUT1_engine = ;
%let _INPUT1_memtype = DATA;
%let _INPUT1_options = %nrquote();
%let _INPUT1_alter = %nrquote();
%let _INPUT1_path = %nrquote(/User Written_A5ELGGF9.AF0000CM%(WorkTable%));
%let _INPUT1_type = 1;
%let _INPUT1_label = %nrquote();

%let _OUTPUT_count = 1;
%let _OUTPUT = work.W1MT6BVXG;
%let _OUTPUT_connect = ;
%let _OUTPUT_engine = ;
%let _OUTPUT_memtype = DATA;
%let _OUTPUT_options = %nrquote();
%let _OUTPUT_alter = %nrquote();
%let _OUTPUT_path = %nrquote(/User Written_A5ELGGF9.AF0000CN%(WorkTable%));
%let _OUTPUT_type = 1;
%let _OUTPUT_label = %nrquote();
/* List of target columns to keep  */ 
%let _OUTPUT_keep = ACCOUNT_RK REPORTCODE REPORTDATE FRONTKDEALID FRONTFDEALID DEALID 
        INSTRUMENTTYPECD DEALDATE;
%let _OUTPUT_col_count = 8;
%let _OUTPUT_col0_name = ACCOUNT_RK;
%let _OUTPUT_col0_table = work.W1MT6BVXG;
%let _OUTPUT_col0_length = 8;
%let _OUTPUT_col0_type = ;
%let _OUTPUT_col0_format = 11.;
%let _OUTPUT_col0_informat = 11.;
%let _OUTPUT_col0_label = %nrquote(ACCOUNT_RK);
%let _OUTPUT_col0_input0 = ACCOUNT_RK;
%let _OUTPUT_col0_exp = ;
%let _OUTPUT_col0_input = ACCOUNT_RK;
%let _OUTPUT_col0_input_count = 1;
%let _OUTPUT_col1_name = REPORTCODE;
%let _OUTPUT_col1_table = work.W1MT6BVXG;
%let _OUTPUT_col1_length = 5;
%let _OUTPUT_col1_type = $;
%let _OUTPUT_col1_format = $5.;
%let _OUTPUT_col1_informat = $5.;
%let _OUTPUT_col1_label = %nrquote(REPORTCODE);
%let _OUTPUT_col1_input0 = REPORTCODE;
%let _OUTPUT_col1_exp = ;
%let _OUTPUT_col1_input = REPORTCODE;
%let _OUTPUT_col1_input_count = 1;
%let _OUTPUT_col2_name = REPORTDATE;
%let _OUTPUT_col2_table = work.W1MT6BVXG;
%let _OUTPUT_col2_length = 8;
%let _OUTPUT_col2_type = ;
%let _OUTPUT_col2_format = DATETIME20.;
%let _OUTPUT_col2_informat = DATETIME20.;
%let _OUTPUT_col2_label = %nrquote(REPORTDATE);
%let _OUTPUT_col2_input0 = REPORTDATE;
%let _OUTPUT_col2_exp = ;
%let _OUTPUT_col2_input = REPORTDATE;
%let _OUTPUT_col2_input_count = 1;
%let _OUTPUT_col3_name = FRONTKDEALID;
%let _OUTPUT_col3_table = work.W1MT6BVXG;
%let _OUTPUT_col3_length = 10;
%let _OUTPUT_col3_type = $;
%let _OUTPUT_col3_format = $10.;
%let _OUTPUT_col3_informat = $10.;
%let _OUTPUT_col3_label = %nrquote(FRONTKDEALID);
%let _OUTPUT_col3_input0 = FRONTKDEALID;
%let _OUTPUT_col3_exp = ;
%let _OUTPUT_col3_input = FRONTKDEALID;
%let _OUTPUT_col3_input_count = 1;
%let _OUTPUT_col4_name = FRONTFDEALID;
%let _OUTPUT_col4_table = work.W1MT6BVXG;
%let _OUTPUT_col4_length = 10;
%let _OUTPUT_col4_type = $;
%let _OUTPUT_col4_format = $10.;
%let _OUTPUT_col4_informat = $10.;
%let _OUTPUT_col4_label = %nrquote(FRONTFDEALID);
%let _OUTPUT_col4_input0 = FRONTFDEALID;
%let _OUTPUT_col4_exp = ;
%let _OUTPUT_col4_input = FRONTFDEALID;
%let _OUTPUT_col4_input_count = 1;
%let _OUTPUT_col5_name = DEALID;
%let _OUTPUT_col5_table = work.W1MT6BVXG;
%let _OUTPUT_col5_length = 100;
%let _OUTPUT_col5_type = $;
%let _OUTPUT_col5_format = $100.;
%let _OUTPUT_col5_informat = $100.;
%let _OUTPUT_col5_label = %nrquote(DEALID);
%let _OUTPUT_col5_input0 = DEALID;
%let _OUTPUT_col5_exp = ;
%let _OUTPUT_col5_input = DEALID;
%let _OUTPUT_col5_input_count = 1;
%let _OUTPUT_col6_name = INSTRUMENTTYPECD;
%let _OUTPUT_col6_table = work.W1MT6BVXG;
%let _OUTPUT_col6_length = 3;
%let _OUTPUT_col6_type = $;
%let _OUTPUT_col6_format = $3.;
%let _OUTPUT_col6_informat = $3.;
%let _OUTPUT_col6_label = %nrquote(INSTRUMENTTYPECD);
%let _OUTPUT_col6_input0 = INSTRUMENTTYPECD;
%let _OUTPUT_col6_exp = ;
%let _OUTPUT_col6_input = INSTRUMENTTYPECD;
%let _OUTPUT_col6_input_count = 1;
%let _OUTPUT_col7_name = DEALDATE;
%let _OUTPUT_col7_table = work.W1MT6BVXG;
%let _OUTPUT_col7_length = 8;
%let _OUTPUT_col7_type = ;
%let _OUTPUT_col7_format = DATETIME20.;
%let _OUTPUT_col7_informat = DATETIME20.;
%let _OUTPUT_col7_label = %nrquote(DEALDATE);
%let _OUTPUT_col7_input0 = DEALDATE;
%let _OUTPUT_col7_exp = ;
%let _OUTPUT_col7_input = DEALDATE;
%let _OUTPUT_col7_input_count = 1;

%let _OUTPUT1 = work.W1MT6BVXG;
%let _OUTPUT1_connect = ;
%let _OUTPUT1_engine = ;
%let _OUTPUT1_memtype = DATA;
%let _OUTPUT1_options = %nrquote();
%let _OUTPUT1_alter = %nrquote();
%let _OUTPUT1_path = %nrquote(/User Written_A5ELGGF9.AF0000CN%(WorkTable%));
%let _OUTPUT1_type = 1;
%let _OUTPUT1_label = %nrquote();
/* List of target columns to keep  */ 
%let _OUTPUT1_keep = ACCOUNT_RK REPORTCODE REPORTDATE FRONTKDEALID FRONTFDEALID DEALID 
        INSTRUMENTTYPECD DEALDATE;
%let _OUTPUT1_col_count = 8;
%let _OUTPUT1_col0_name = ACCOUNT_RK;
%let _OUTPUT1_col0_table = work.W1MT6BVXG;
%let _OUTPUT1_col0_length = 8;
%let _OUTPUT1_col0_type = ;
%let _OUTPUT1_col0_format = 11.;
%let _OUTPUT1_col0_informat = 11.;
%let _OUTPUT1_col0_label = %nrquote(ACCOUNT_RK);
%let _OUTPUT1_col0_input0 = ACCOUNT_RK;
%let _OUTPUT1_col0_exp = ;
%let _OUTPUT1_col0_input = ACCOUNT_RK;
%let _OUTPUT1_col0_input_count = 1;
%let _OUTPUT1_col1_name = REPORTCODE;
%let _OUTPUT1_col1_table = work.W1MT6BVXG;
%let _OUTPUT1_col1_length = 5;
%let _OUTPUT1_col1_type = $;
%let _OUTPUT1_col1_format = $5.;
%let _OUTPUT1_col1_informat = $5.;
%let _OUTPUT1_col1_label = %nrquote(REPORTCODE);
%let _OUTPUT1_col1_input0 = REPORTCODE;
%let _OUTPUT1_col1_exp = ;
%let _OUTPUT1_col1_input = REPORTCODE;
%let _OUTPUT1_col1_input_count = 1;
%let _OUTPUT1_col2_name = REPORTDATE;
%let _OUTPUT1_col2_table = work.W1MT6BVXG;
%let _OUTPUT1_col2_length = 8;
%let _OUTPUT1_col2_type = ;
%let _OUTPUT1_col2_format = DATETIME20.;
%let _OUTPUT1_col2_informat = DATETIME20.;
%let _OUTPUT1_col2_label = %nrquote(REPORTDATE);
%let _OUTPUT1_col2_input0 = REPORTDATE;
%let _OUTPUT1_col2_exp = ;
%let _OUTPUT1_col2_input = REPORTDATE;
%let _OUTPUT1_col2_input_count = 1;
%let _OUTPUT1_col3_name = FRONTKDEALID;
%let _OUTPUT1_col3_table = work.W1MT6BVXG;
%let _OUTPUT1_col3_length = 10;
%let _OUTPUT1_col3_type = $;
%let _OUTPUT1_col3_format = $10.;
%let _OUTPUT1_col3_informat = $10.;
%let _OUTPUT1_col3_label = %nrquote(FRONTKDEALID);
%let _OUTPUT1_col3_input0 = FRONTKDEALID;
%let _OUTPUT1_col3_exp = ;
%let _OUTPUT1_col3_input = FRONTKDEALID;
%let _OUTPUT1_col3_input_count = 1;
%let _OUTPUT1_col4_name = FRONTFDEALID;
%let _OUTPUT1_col4_table = work.W1MT6BVXG;
%let _OUTPUT1_col4_length = 10;
%let _OUTPUT1_col4_type = $;
%let _OUTPUT1_col4_format = $10.;
%let _OUTPUT1_col4_informat = $10.;
%let _OUTPUT1_col4_label = %nrquote(FRONTFDEALID);
%let _OUTPUT1_col4_input0 = FRONTFDEALID;
%let _OUTPUT1_col4_exp = ;
%let _OUTPUT1_col4_input = FRONTFDEALID;
%let _OUTPUT1_col4_input_count = 1;
%let _OUTPUT1_col5_name = DEALID;
%let _OUTPUT1_col5_table = work.W1MT6BVXG;
%let _OUTPUT1_col5_length = 100;
%let _OUTPUT1_col5_type = $;
%let _OUTPUT1_col5_format = $100.;
%let _OUTPUT1_col5_informat = $100.;
%let _OUTPUT1_col5_label = %nrquote(DEALID);
%let _OUTPUT1_col5_input0 = DEALID;
%let _OUTPUT1_col5_exp = ;
%let _OUTPUT1_col5_input = DEALID;
%let _OUTPUT1_col5_input_count = 1;
%let _OUTPUT1_col6_name = INSTRUMENTTYPECD;
%let _OUTPUT1_col6_table = work.W1MT6BVXG;
%let _OUTPUT1_col6_length = 3;
%let _OUTPUT1_col6_type = $;
%let _OUTPUT1_col6_format = $3.;
%let _OUTPUT1_col6_informat = $3.;
%let _OUTPUT1_col6_label = %nrquote(INSTRUMENTTYPECD);
%let _OUTPUT1_col6_input0 = INSTRUMENTTYPECD;
%let _OUTPUT1_col6_exp = ;
%let _OUTPUT1_col6_input = INSTRUMENTTYPECD;
%let _OUTPUT1_col6_input_count = 1;
%let _OUTPUT1_col7_name = DEALDATE;
%let _OUTPUT1_col7_table = work.W1MT6BVXG;
%let _OUTPUT1_col7_length = 8;
%let _OUTPUT1_col7_type = ;
%let _OUTPUT1_col7_format = DATETIME20.;
%let _OUTPUT1_col7_informat = DATETIME20.;
%let _OUTPUT1_col7_label = %nrquote(DEALDATE);
%let _OUTPUT1_col7_input0 = DEALDATE;
%let _OUTPUT1_col7_exp = ;
%let _OUTPUT1_col7_input = DEALDATE;
%let _OUTPUT1_col7_input_count = 1;

/*---- Start of User Written Code  ----*/ 

/*Трансформация для записи неуникальных DEALID в строку с разделителем ",".*/

proc sort data = &_INPUT1;
	by ACCOUNT_RK;
quit;
%error_check(mpStepType=DATA);

data &_OUTPUT1 (drop = DEALID_NEW);
	set &_INPUT1;
	by ACCOUNT_RK;

	retain DEALID_NEW;

if not missing(DEALID) then
do;
/*1 0*/
	if first.ACCOUNT_RK and not last.ACCOUNT_RK then DEALID_NEW = strip(DEALID);

/*0 0*/
	if not first.ACCOUNT_RK and not last.ACCOUNT_RK then DEALID_NEW = cats(DEALID_NEW, ',', DEALID);

/*1 1*/
	if first.ACCOUNT_RK and last.ACCOUNT_RK then
	do;
		DEALID_NEW = "";
		output;
	end;

/*0 1*/
	if not first.ACCOUNT_RK and last.ACCOUNT_RK then
	do;
		DEALID_NEW = cats(DEALID_NEW, ',', DEALID);
		DEALID=DEALID_NEW;
		DEALID_NEW = "";
		output;
	end;
end;
else output;
run;
%error_check(mpStepType=DATA);

/*---- End of User Written Code  ----*/ 

%rcSet(&syserr); 
%rcSet(&sqlrc); 


/**  Step end User Written **/

/*==========================================================================* 
 * Step:            SQL Join                              A5ELGGF9.AK0000WO * 
 * Transform:       Join                                                    * 
 * Description:     MasterTableОстальные, но не (DCD, CSG)                  * 
 *                                                                          * 
 * Source Tables:   FINANCIAL_ACCOUNT - work.W1MF2W5NW    A5ELGGF9.AF0000CK * 
 *                  FINANCIAL_INSTRUMENT_ASSOC -          A569C89V.AE0000FW * 
 *                   dwh_dds.FINANCIAL_INSTRUMENT_ASSOC                     * 
 *                  FINANCIAL_INSTRUMENT -                A569C89V.AE0000FV * 
 *                   dwh_dds.FINANCIAL_INSTRUMENT                           * 
 * Target Table:    SQL Join - work.W1MQI85NE             A5ELGGF9.AF0000CO * 
 *==========================================================================*/ 

%let transformID = %quote(A5ELGGF9.AK0000WO);
%let trans_rc = 0;
%let etls_stepStartTime = %sysfunc(datetime(), datetime20.); 

%let etls_recnt = -1;
%let SYS_SQL_IP_SPEEDO = Y;
%let SYS_SQL_MAPPUTTO = sas_put;
%let SYS_SQLREDUCEPUT = DBMS;
%global etls_sql_pushDown;
%let etls_sql_pushDown = -1;
option DBIDIRECTEXEC;

proc datasets lib = work nolist nowarn memtype = (data view);
   delete W1MQI85NE;
quit;

proc sql;
   create table work.W1MQI85NE as
   select
      W1MF2W5NW.ACCOUNT_RK length = 8   
         format = 11.
         informat = 11.
         label = 'ACCOUNT_RK',
      'П-01' as REPORTCODE length = 5   
         format = $5.
         informat = $5.
         label = 'REPORTCODE',
      &REPDT as REPORTDATE length = 8   
         format = DATETIME20.
         informat = DATETIME20.
         label = 'REPORTDATE',
      strip(W1MF2W5NW.ACCOUNT_REGISTRATION_NM ) as FRONTKDEALID length = 10   
         format = $10.
         informat = $10.
         label = 'FRONTKDEALID',
      put(input(substr(W1MF2W5NW.ALTERNATE_ACCOUNT_NM, 1, findc(W1MF2W5NW.ALTERNATE_ACCOUNT_NM , '_')-1), best.), best.) as FRONTFDEALID length = 10   
         format = $10.
         informat = $10.
         label = 'FRONTFDEALID',
      FINANCIAL_INSTRUMENT.IRB_SRC_INSTRUMENT_ID as DEALID length = 100   
         format = $100.
         informat = $100.
         label = 'DEALID',
      FINANCIAL_INSTRUMENT.FINANCIAL_INSTRUMENT_TYPE_CD as INSTRUMENTTYPECD length = 3   
         format = $3.
         informat = $3.
         label = 'INSTRUMENTTYPECD',
      W1MF2W5NW.OPEN_DT as DEALDATE length = 8   
         format = DATETIME20.
         informat = DATETIME20.
         label = 'DEALDATE'
   from
      work.W1MF2W5NW left join 
      dwh_dds.FINANCIAL_INSTRUMENT_ASSOC
         on
         (
            W1MF2W5NW.ACCOUNT_RK = FINANCIAL_INSTRUMENT_ASSOC.REFERENCE_ACCOUNT_RK
            and FINANCIAL_INSTRUMENT_ASSOC.VALID_FROM_DTTM <= &REPDT < FINANCIAL_INSTRUMENT_ASSOC.VALID_TO_DTTM
         ) left join 
      dwh_dds.FINANCIAL_INSTRUMENT
         on
         (
            FINANCIAL_INSTRUMENT_ASSOC.FINANCIAL_INSTRUMENT_RK = FINANCIAL_INSTRUMENT.FINANCIAL_INSTRUMENT_RK
            and FINANCIAL_INSTRUMENT.VALID_FROM_DTTM <= &REPDT < FINANCIAL_INSTRUMENT.VALID_TO_DTTM
         )
   where
      FINANCIAL_INSTRUMENT.FINANCIAL_INSTRUMENT_TYPE_CD NOT IN ('CIS', 'IRS', 'SWS', 'SWP','DCD', 'CSG')
      and not (FINANCIAL_INSTRUMENT.FINANCIAL_INSTRUMENT_RK IS MISSING 
      and W1MF2W5NW.IRB_DUMMY_TYPE_CD NOT IS MISSING )
   ;
quit;

%global etls_sql_pushDown;
%let etls_sql_pushDown = &sys_sql_ip_all;

%rcSet(&sqlrc); 



/**  Step end SQL Join **/

/*==========================================================================* 
 * Step:            User Written                          A5ELGGF9.AK0000WP * 
 * Transform:       User Written                                            * 
 * Description:     Проверка условия DQ                                     * 
 *                                                                          * 
 * Source Table:    SQL Join - work.W1MQI85NE             A5ELGGF9.AF0000CO * 
 * Target Table:    User Written - work.W1MT3GJD2         A5ELGGF9.AF0000CP * 
 *                                                                          * 
 * User Written:    SourceCode                                              * 
 *==========================================================================*/ 

%let transformID = %quote(A5ELGGF9.AK0000WP);
%let trans_rc = 0;
%let etls_stepStartTime = %sysfunc(datetime(), datetime20.); 

%let etls_recCheckExist = 0; 
%let etls_recnt = 0; 
%macro etls_recordCheck; 
   %let etls_recCheckExist = %eval(%sysfunc(exist(work.W1MQI85NE, DATA)) or 
         %sysfunc(exist(work.W1MQI85NE, VIEW))); 
   
   %if (&etls_recCheckExist) %then
   %do;
      %local etls_syntaxcheck; 
      %let etls_syntaxcheck = %sysfunc(getoption(syntaxcheck)); 
      /* Turn off syntaxcheck option to perform following steps  */ 
      options nosyntaxcheck;
      
      proc contents data = work.W1MQI85NE out = work.etls_contents(keep = nobs) noprint; 
      run; 
      
      data _null_; 
         set work.etls_contents (obs = 1); 
         call symput("etls_recnt", left(put(nobs,32.))); 
      run;
      
      proc datasets lib = work nolist nowarn memtype = (data view);
         delete etls_contents;
      quit;
      
      /* Reset syntaxcheck option to previous setting  */ 
      options &etls_syntaxcheck; 
   %end;
%mend etls_recordCheck;
%etls_recordCheck;

%let SYSLAST = %nrquote(work.W1MQI85NE); 

%let _INPUT_count = 1;
%let _INPUT = work.W1MQI85NE;
%let _INPUT_connect = ;
%let _INPUT_engine = ;
%let _INPUT_memtype = DATA;
%let _INPUT_options = %nrquote();
%let _INPUT_alter = %nrquote();
%let _INPUT_path = %nrquote(/SQL Join_A5ELGGF9.AF0000CO%(WorkTable%));
%let _INPUT_type = 1;
%let _INPUT_label = %nrquote();

%let _INPUT1 = work.W1MQI85NE;
%let _INPUT1_connect = ;
%let _INPUT1_engine = ;
%let _INPUT1_memtype = DATA;
%let _INPUT1_options = %nrquote();
%let _INPUT1_alter = %nrquote();
%let _INPUT1_path = %nrquote(/SQL Join_A5ELGGF9.AF0000CO%(WorkTable%));
%let _INPUT1_type = 1;
%let _INPUT1_label = %nrquote();

%let _OUTPUT_count = 1;
%let _OUTPUT = work.W1MT3GJD2;
%let _OUTPUT_connect = ;
%let _OUTPUT_engine = ;
%let _OUTPUT_memtype = DATA;
%let _OUTPUT_options = %nrquote();
%let _OUTPUT_alter = %nrquote();
%let _OUTPUT_path = %nrquote(/User Written_A5ELGGF9.AF0000CP%(WorkTable%));
%let _OUTPUT_type = 1;
%let _OUTPUT_label = %nrquote();
/* List of target columns to keep  */ 
%let _OUTPUT_keep = ACCOUNT_RK REPORTCODE REPORTDATE FRONTKDEALID FRONTFDEALID DEALID 
        INSTRUMENTTYPECD DEALDATE;
%let _OUTPUT_col_count = 8;
%let _OUTPUT_col0_name = ACCOUNT_RK;
%let _OUTPUT_col0_table = work.W1MT3GJD2;
%let _OUTPUT_col0_length = 8;
%let _OUTPUT_col0_type = ;
%let _OUTPUT_col0_format = 11.;
%let _OUTPUT_col0_informat = 11.;
%let _OUTPUT_col0_label = %nrquote(ACCOUNT_RK);
%let _OUTPUT_col0_input0 = ACCOUNT_RK;
%let _OUTPUT_col0_exp = ;
%let _OUTPUT_col0_input = ACCOUNT_RK;
%let _OUTPUT_col0_input_count = 1;
%let _OUTPUT_col1_name = REPORTCODE;
%let _OUTPUT_col1_table = work.W1MT3GJD2;
%let _OUTPUT_col1_length = 5;
%let _OUTPUT_col1_type = $;
%let _OUTPUT_col1_format = $5.;
%let _OUTPUT_col1_informat = $5.;
%let _OUTPUT_col1_label = %nrquote(REPORTCODE);
%let _OUTPUT_col1_input0 = REPORTCODE;
%let _OUTPUT_col1_exp = ;
%let _OUTPUT_col1_input = REPORTCODE;
%let _OUTPUT_col1_input_count = 1;
%let _OUTPUT_col2_name = REPORTDATE;
%let _OUTPUT_col2_table = work.W1MT3GJD2;
%let _OUTPUT_col2_length = 8;
%let _OUTPUT_col2_type = ;
%let _OUTPUT_col2_format = DATETIME20.;
%let _OUTPUT_col2_informat = DATETIME20.;
%let _OUTPUT_col2_label = %nrquote(REPORTDATE);
%let _OUTPUT_col2_input0 = REPORTDATE;
%let _OUTPUT_col2_exp = ;
%let _OUTPUT_col2_input = REPORTDATE;
%let _OUTPUT_col2_input_count = 1;
%let _OUTPUT_col3_name = FRONTKDEALID;
%let _OUTPUT_col3_table = work.W1MT3GJD2;
%let _OUTPUT_col3_length = 10;
%let _OUTPUT_col3_type = $;
%let _OUTPUT_col3_format = $10.;
%let _OUTPUT_col3_informat = $10.;
%let _OUTPUT_col3_label = %nrquote(FRONTKDEALID);
%let _OUTPUT_col3_input0 = FRONTKDEALID;
%let _OUTPUT_col3_exp = ;
%let _OUTPUT_col3_input = FRONTKDEALID;
%let _OUTPUT_col3_input_count = 1;
%let _OUTPUT_col4_name = FRONTFDEALID;
%let _OUTPUT_col4_table = work.W1MT3GJD2;
%let _OUTPUT_col4_length = 10;
%let _OUTPUT_col4_type = $;
%let _OUTPUT_col4_format = $10.;
%let _OUTPUT_col4_informat = $10.;
%let _OUTPUT_col4_label = %nrquote(FRONTFDEALID);
%let _OUTPUT_col4_input0 = FRONTFDEALID;
%let _OUTPUT_col4_exp = ;
%let _OUTPUT_col4_input = FRONTFDEALID;
%let _OUTPUT_col4_input_count = 1;
%let _OUTPUT_col5_name = DEALID;
%let _OUTPUT_col5_table = work.W1MT3GJD2;
%let _OUTPUT_col5_length = 100;
%let _OUTPUT_col5_type = $;
%let _OUTPUT_col5_format = $100.;
%let _OUTPUT_col5_informat = $100.;
%let _OUTPUT_col5_label = %nrquote(DEALID);
%let _OUTPUT_col5_input0 = DEALID;
%let _OUTPUT_col5_exp = ;
%let _OUTPUT_col5_input = DEALID;
%let _OUTPUT_col5_input_count = 1;
%let _OUTPUT_col6_name = INSTRUMENTTYPECD;
%let _OUTPUT_col6_table = work.W1MT3GJD2;
%let _OUTPUT_col6_length = 3;
%let _OUTPUT_col6_type = $;
%let _OUTPUT_col6_format = $3.;
%let _OUTPUT_col6_informat = $3.;
%let _OUTPUT_col6_label = %nrquote(INSTRUMENTTYPECD);
%let _OUTPUT_col6_input0 = INSTRUMENTTYPECD;
%let _OUTPUT_col6_exp = ;
%let _OUTPUT_col6_input = INSTRUMENTTYPECD;
%let _OUTPUT_col6_input_count = 1;
%let _OUTPUT_col7_name = DEALDATE;
%let _OUTPUT_col7_table = work.W1MT3GJD2;
%let _OUTPUT_col7_length = 8;
%let _OUTPUT_col7_type = ;
%let _OUTPUT_col7_format = DATETIME20.;
%let _OUTPUT_col7_informat = DATETIME20.;
%let _OUTPUT_col7_label = %nrquote(DEALDATE);
%let _OUTPUT_col7_input0 = DEALDATE;
%let _OUTPUT_col7_exp = ;
%let _OUTPUT_col7_input = DEALDATE;
%let _OUTPUT_col7_input_count = 1;

%let _OUTPUT1 = work.W1MT3GJD2;
%let _OUTPUT1_connect = ;
%let _OUTPUT1_engine = ;
%let _OUTPUT1_memtype = DATA;
%let _OUTPUT1_options = %nrquote();
%let _OUTPUT1_alter = %nrquote();
%let _OUTPUT1_path = %nrquote(/User Written_A5ELGGF9.AF0000CP%(WorkTable%));
%let _OUTPUT1_type = 1;
%let _OUTPUT1_label = %nrquote();
/* List of target columns to keep  */ 
%let _OUTPUT1_keep = ACCOUNT_RK REPORTCODE REPORTDATE FRONTKDEALID FRONTFDEALID DEALID 
        INSTRUMENTTYPECD DEALDATE;
%let _OUTPUT1_col_count = 8;
%let _OUTPUT1_col0_name = ACCOUNT_RK;
%let _OUTPUT1_col0_table = work.W1MT3GJD2;
%let _OUTPUT1_col0_length = 8;
%let _OUTPUT1_col0_type = ;
%let _OUTPUT1_col0_format = 11.;
%let _OUTPUT1_col0_informat = 11.;
%let _OUTPUT1_col0_label = %nrquote(ACCOUNT_RK);
%let _OUTPUT1_col0_input0 = ACCOUNT_RK;
%let _OUTPUT1_col0_exp = ;
%let _OUTPUT1_col0_input = ACCOUNT_RK;
%let _OUTPUT1_col0_input_count = 1;
%let _OUTPUT1_col1_name = REPORTCODE;
%let _OUTPUT1_col1_table = work.W1MT3GJD2;
%let _OUTPUT1_col1_length = 5;
%let _OUTPUT1_col1_type = $;
%let _OUTPUT1_col1_format = $5.;
%let _OUTPUT1_col1_informat = $5.;
%let _OUTPUT1_col1_label = %nrquote(REPORTCODE);
%let _OUTPUT1_col1_input0 = REPORTCODE;
%let _OUTPUT1_col1_exp = ;
%let _OUTPUT1_col1_input = REPORTCODE;
%let _OUTPUT1_col1_input_count = 1;
%let _OUTPUT1_col2_name = REPORTDATE;
%let _OUTPUT1_col2_table = work.W1MT3GJD2;
%let _OUTPUT1_col2_length = 8;
%let _OUTPUT1_col2_type = ;
%let _OUTPUT1_col2_format = DATETIME20.;
%let _OUTPUT1_col2_informat = DATETIME20.;
%let _OUTPUT1_col2_label = %nrquote(REPORTDATE);
%let _OUTPUT1_col2_input0 = REPORTDATE;
%let _OUTPUT1_col2_exp = ;
%let _OUTPUT1_col2_input = REPORTDATE;
%let _OUTPUT1_col2_input_count = 1;
%let _OUTPUT1_col3_name = FRONTKDEALID;
%let _OUTPUT1_col3_table = work.W1MT3GJD2;
%let _OUTPUT1_col3_length = 10;
%let _OUTPUT1_col3_type = $;
%let _OUTPUT1_col3_format = $10.;
%let _OUTPUT1_col3_informat = $10.;
%let _OUTPUT1_col3_label = %nrquote(FRONTKDEALID);
%let _OUTPUT1_col3_input0 = FRONTKDEALID;
%let _OUTPUT1_col3_exp = ;
%let _OUTPUT1_col3_input = FRONTKDEALID;
%let _OUTPUT1_col3_input_count = 1;
%let _OUTPUT1_col4_name = FRONTFDEALID;
%let _OUTPUT1_col4_table = work.W1MT3GJD2;
%let _OUTPUT1_col4_length = 10;
%let _OUTPUT1_col4_type = $;
%let _OUTPUT1_col4_format = $10.;
%let _OUTPUT1_col4_informat = $10.;
%let _OUTPUT1_col4_label = %nrquote(FRONTFDEALID);
%let _OUTPUT1_col4_input0 = FRONTFDEALID;
%let _OUTPUT1_col4_exp = ;
%let _OUTPUT1_col4_input = FRONTFDEALID;
%let _OUTPUT1_col4_input_count = 1;
%let _OUTPUT1_col5_name = DEALID;
%let _OUTPUT1_col5_table = work.W1MT3GJD2;
%let _OUTPUT1_col5_length = 100;
%let _OUTPUT1_col5_type = $;
%let _OUTPUT1_col5_format = $100.;
%let _OUTPUT1_col5_informat = $100.;
%let _OUTPUT1_col5_label = %nrquote(DEALID);
%let _OUTPUT1_col5_input0 = DEALID;
%let _OUTPUT1_col5_exp = ;
%let _OUTPUT1_col5_input = DEALID;
%let _OUTPUT1_col5_input_count = 1;
%let _OUTPUT1_col6_name = INSTRUMENTTYPECD;
%let _OUTPUT1_col6_table = work.W1MT3GJD2;
%let _OUTPUT1_col6_length = 3;
%let _OUTPUT1_col6_type = $;
%let _OUTPUT1_col6_format = $3.;
%let _OUTPUT1_col6_informat = $3.;
%let _OUTPUT1_col6_label = %nrquote(INSTRUMENTTYPECD);
%let _OUTPUT1_col6_input0 = INSTRUMENTTYPECD;
%let _OUTPUT1_col6_exp = ;
%let _OUTPUT1_col6_input = INSTRUMENTTYPECD;
%let _OUTPUT1_col6_input_count = 1;
%let _OUTPUT1_col7_name = DEALDATE;
%let _OUTPUT1_col7_table = work.W1MT3GJD2;
%let _OUTPUT1_col7_length = 8;
%let _OUTPUT1_col7_type = ;
%let _OUTPUT1_col7_format = DATETIME20.;
%let _OUTPUT1_col7_informat = DATETIME20.;
%let _OUTPUT1_col7_label = %nrquote(DEALDATE);
%let _OUTPUT1_col7_input0 = DEALDATE;
%let _OUTPUT1_col7_exp = ;
%let _OUTPUT1_col7_input = DEALDATE;
%let _OUTPUT1_col7_input_count = 1;

/*---- Start of User Written Code  ----*/ 

proc sql;
	create table &_OUTPUT1 as	
	select * from &_INPUT1
	group by  ACCOUNT_RK
	having count(ACCOUNT_RK) ^= 1;
quit;

%error_check(mpStepType=SQL);

/*---- End of User Written Code  ----*/ 

%rcSet(&syserr); 
%rcSet(&sqlrc); 


/**  Step end User Written **/

/*==========================================================================* 
 * Step:            User Written                          A5ELGGF9.AK0000WQ * 
 * Transform:       User Written                                            * 
 * Description:     Добавление атрибутов                                    * 
 *                                                                          * 
 * Source Table:    User Written - work.W1MT3GJD2         A5ELGGF9.AF0000CP * 
 * Target Table:    User Written - work.W1MTF8J02         A5ELGGF9.AF0000CQ * 
 *                                                                          * 
 * User Written:    SourceCode                                              * 
 *==========================================================================*/ 

%let transformID = %quote(A5ELGGF9.AK0000WQ);
%let trans_rc = 0;
%let etls_stepStartTime = %sysfunc(datetime(), datetime20.); 

%let etls_recCheckExist = 0; 
%let etls_recnt = 0; 
%macro etls_recordCheck; 
   %let etls_recCheckExist = %eval(%sysfunc(exist(work.W1MT3GJD2, DATA)) or 
         %sysfunc(exist(work.W1MT3GJD2, VIEW))); 
   
   %if (&etls_recCheckExist) %then
   %do;
      %local etls_syntaxcheck; 
      %let etls_syntaxcheck = %sysfunc(getoption(syntaxcheck)); 
      /* Turn off syntaxcheck option to perform following steps  */ 
      options nosyntaxcheck;
      
      proc contents data = work.W1MT3GJD2 out = work.etls_contents(keep = nobs) noprint; 
      run; 
      
      data _null_; 
         set work.etls_contents (obs = 1); 
         call symput("etls_recnt", left(put(nobs,32.))); 
      run;
      
      proc datasets lib = work nolist nowarn memtype = (data view);
         delete etls_contents;
      quit;
      
      /* Reset syntaxcheck option to previous setting  */ 
      options &etls_syntaxcheck; 
   %end;
%mend etls_recordCheck;
%etls_recordCheck;

%let SYSLAST = %nrquote(work.W1MT3GJD2); 

%let _INPUT_count = 1;
%let _INPUT = work.W1MT3GJD2;
%let _INPUT_connect = ;
%let _INPUT_engine = ;
%let _INPUT_memtype = DATA;
%let _INPUT_options = %nrquote();
%let _INPUT_alter = %nrquote();
%let _INPUT_path = %nrquote(/User Written_A5ELGGF9.AF0000CP%(WorkTable%));
%let _INPUT_type = 1;
%let _INPUT_label = %nrquote();

%let _INPUT1 = work.W1MT3GJD2;
%let _INPUT1_connect = ;
%let _INPUT1_engine = ;
%let _INPUT1_memtype = DATA;
%let _INPUT1_options = %nrquote();
%let _INPUT1_alter = %nrquote();
%let _INPUT1_path = %nrquote(/User Written_A5ELGGF9.AF0000CP%(WorkTable%));
%let _INPUT1_type = 1;
%let _INPUT1_label = %nrquote();

%let _OUTPUT_count = 1;
%let _OUTPUT = work.W1MTF8J02;
%let _OUTPUT_connect = ;
%let _OUTPUT_engine = ;
%let _OUTPUT_memtype = DATA;
%let _OUTPUT_options = %nrquote();
%let _OUTPUT_alter = %nrquote();
%let _OUTPUT_path = %nrquote(/User Written_A5ELGGF9.AF0000CQ%(WorkTable%));
%let _OUTPUT_type = 1;
%let _OUTPUT_label = %nrquote();
/* List of target columns to keep  */ 
%let _OUTPUT_keep = ACCOUNT_RK REPORTCODE REPORTDATE FRONTKDEALID FRONTFDEALID DEALID 
        INSTRUMENTTYPECD DEALDATE;
%let _OUTPUT_col_count = 8;
%let _OUTPUT_col0_name = ACCOUNT_RK;
%let _OUTPUT_col0_table = work.W1MTF8J02;
%let _OUTPUT_col0_length = 8;
%let _OUTPUT_col0_type = ;
%let _OUTPUT_col0_format = 11.;
%let _OUTPUT_col0_informat = 11.;
%let _OUTPUT_col0_label = %nrquote(ACCOUNT_RK);
%let _OUTPUT_col0_input0 = ACCOUNT_RK;
%let _OUTPUT_col0_exp = ;
%let _OUTPUT_col0_input = ACCOUNT_RK;
%let _OUTPUT_col0_input_count = 1;
%let _OUTPUT_col1_name = REPORTCODE;
%let _OUTPUT_col1_table = work.W1MTF8J02;
%let _OUTPUT_col1_length = 5;
%let _OUTPUT_col1_type = $;
%let _OUTPUT_col1_format = $5.;
%let _OUTPUT_col1_informat = $5.;
%let _OUTPUT_col1_label = %nrquote(REPORTCODE);
%let _OUTPUT_col1_input0 = REPORTCODE;
%let _OUTPUT_col1_exp = ;
%let _OUTPUT_col1_input = REPORTCODE;
%let _OUTPUT_col1_input_count = 1;
%let _OUTPUT_col2_name = REPORTDATE;
%let _OUTPUT_col2_table = work.W1MTF8J02;
%let _OUTPUT_col2_length = 8;
%let _OUTPUT_col2_type = ;
%let _OUTPUT_col2_format = DATETIME20.;
%let _OUTPUT_col2_informat = DATETIME20.;
%let _OUTPUT_col2_label = %nrquote(REPORTDATE);
%let _OUTPUT_col2_input0 = REPORTDATE;
%let _OUTPUT_col2_exp = ;
%let _OUTPUT_col2_input = REPORTDATE;
%let _OUTPUT_col2_input_count = 1;
%let _OUTPUT_col3_name = FRONTKDEALID;
%let _OUTPUT_col3_table = work.W1MTF8J02;
%let _OUTPUT_col3_length = 10;
%let _OUTPUT_col3_type = $;
%let _OUTPUT_col3_format = $10.;
%let _OUTPUT_col3_informat = $10.;
%let _OUTPUT_col3_label = %nrquote(FRONTKDEALID);
%let _OUTPUT_col3_input0 = FRONTKDEALID;
%let _OUTPUT_col3_exp = ;
%let _OUTPUT_col3_input = FRONTKDEALID;
%let _OUTPUT_col3_input_count = 1;
%let _OUTPUT_col4_name = FRONTFDEALID;
%let _OUTPUT_col4_table = work.W1MTF8J02;
%let _OUTPUT_col4_length = 10;
%let _OUTPUT_col4_type = $;
%let _OUTPUT_col4_format = $10.;
%let _OUTPUT_col4_informat = $10.;
%let _OUTPUT_col4_label = %nrquote(FRONTFDEALID);
%let _OUTPUT_col4_input0 = FRONTFDEALID;
%let _OUTPUT_col4_exp = ;
%let _OUTPUT_col4_input = FRONTFDEALID;
%let _OUTPUT_col4_input_count = 1;
%let _OUTPUT_col5_name = DEALID;
%let _OUTPUT_col5_table = work.W1MTF8J02;
%let _OUTPUT_col5_length = 100;
%let _OUTPUT_col5_type = $;
%let _OUTPUT_col5_format = $100.;
%let _OUTPUT_col5_informat = $100.;
%let _OUTPUT_col5_label = %nrquote(DEALID);
%let _OUTPUT_col5_input0 = DEALID;
%let _OUTPUT_col5_exp = ;
%let _OUTPUT_col5_input = DEALID;
%let _OUTPUT_col5_input_count = 1;
%let _OUTPUT_col6_name = INSTRUMENTTYPECD;
%let _OUTPUT_col6_table = work.W1MTF8J02;
%let _OUTPUT_col6_length = 3;
%let _OUTPUT_col6_type = $;
%let _OUTPUT_col6_format = $3.;
%let _OUTPUT_col6_informat = $3.;
%let _OUTPUT_col6_label = %nrquote(INSTRUMENTTYPECD);
%let _OUTPUT_col6_input0 = INSTRUMENTTYPECD;
%let _OUTPUT_col6_exp = ;
%let _OUTPUT_col6_input = INSTRUMENTTYPECD;
%let _OUTPUT_col6_input_count = 1;
%let _OUTPUT_col7_name = DEALDATE;
%let _OUTPUT_col7_table = work.W1MTF8J02;
%let _OUTPUT_col7_length = 8;
%let _OUTPUT_col7_type = ;
%let _OUTPUT_col7_format = DATETIME20.;
%let _OUTPUT_col7_informat = DATETIME20.;
%let _OUTPUT_col7_label = %nrquote(DEALDATE);
%let _OUTPUT_col7_input0 = DEALDATE;
%let _OUTPUT_col7_exp = ;
%let _OUTPUT_col7_input = DEALDATE;
%let _OUTPUT_col7_input_count = 1;

%let _OUTPUT1 = work.W1MTF8J02;
%let _OUTPUT1_connect = ;
%let _OUTPUT1_engine = ;
%let _OUTPUT1_memtype = DATA;
%let _OUTPUT1_options = %nrquote();
%let _OUTPUT1_alter = %nrquote();
%let _OUTPUT1_path = %nrquote(/User Written_A5ELGGF9.AF0000CQ%(WorkTable%));
%let _OUTPUT1_type = 1;
%let _OUTPUT1_label = %nrquote();
/* List of target columns to keep  */ 
%let _OUTPUT1_keep = ACCOUNT_RK REPORTCODE REPORTDATE FRONTKDEALID FRONTFDEALID DEALID 
        INSTRUMENTTYPECD DEALDATE;
%let _OUTPUT1_col_count = 8;
%let _OUTPUT1_col0_name = ACCOUNT_RK;
%let _OUTPUT1_col0_table = work.W1MTF8J02;
%let _OUTPUT1_col0_length = 8;
%let _OUTPUT1_col0_type = ;
%let _OUTPUT1_col0_format = 11.;
%let _OUTPUT1_col0_informat = 11.;
%let _OUTPUT1_col0_label = %nrquote(ACCOUNT_RK);
%let _OUTPUT1_col0_input0 = ACCOUNT_RK;
%let _OUTPUT1_col0_exp = ;
%let _OUTPUT1_col0_input = ACCOUNT_RK;
%let _OUTPUT1_col0_input_count = 1;
%let _OUTPUT1_col1_name = REPORTCODE;
%let _OUTPUT1_col1_table = work.W1MTF8J02;
%let _OUTPUT1_col1_length = 5;
%let _OUTPUT1_col1_type = $;
%let _OUTPUT1_col1_format = $5.;
%let _OUTPUT1_col1_informat = $5.;
%let _OUTPUT1_col1_label = %nrquote(REPORTCODE);
%let _OUTPUT1_col1_input0 = REPORTCODE;
%let _OUTPUT1_col1_exp = ;
%let _OUTPUT1_col1_input = REPORTCODE;
%let _OUTPUT1_col1_input_count = 1;
%let _OUTPUT1_col2_name = REPORTDATE;
%let _OUTPUT1_col2_table = work.W1MTF8J02;
%let _OUTPUT1_col2_length = 8;
%let _OUTPUT1_col2_type = ;
%let _OUTPUT1_col2_format = DATETIME20.;
%let _OUTPUT1_col2_informat = DATETIME20.;
%let _OUTPUT1_col2_label = %nrquote(REPORTDATE);
%let _OUTPUT1_col2_input0 = REPORTDATE;
%let _OUTPUT1_col2_exp = ;
%let _OUTPUT1_col2_input = REPORTDATE;
%let _OUTPUT1_col2_input_count = 1;
%let _OUTPUT1_col3_name = FRONTKDEALID;
%let _OUTPUT1_col3_table = work.W1MTF8J02;
%let _OUTPUT1_col3_length = 10;
%let _OUTPUT1_col3_type = $;
%let _OUTPUT1_col3_format = $10.;
%let _OUTPUT1_col3_informat = $10.;
%let _OUTPUT1_col3_label = %nrquote(FRONTKDEALID);
%let _OUTPUT1_col3_input0 = FRONTKDEALID;
%let _OUTPUT1_col3_exp = ;
%let _OUTPUT1_col3_input = FRONTKDEALID;
%let _OUTPUT1_col3_input_count = 1;
%let _OUTPUT1_col4_name = FRONTFDEALID;
%let _OUTPUT1_col4_table = work.W1MTF8J02;
%let _OUTPUT1_col4_length = 10;
%let _OUTPUT1_col4_type = $;
%let _OUTPUT1_col4_format = $10.;
%let _OUTPUT1_col4_informat = $10.;
%let _OUTPUT1_col4_label = %nrquote(FRONTFDEALID);
%let _OUTPUT1_col4_input0 = FRONTFDEALID;
%let _OUTPUT1_col4_exp = ;
%let _OUTPUT1_col4_input = FRONTFDEALID;
%let _OUTPUT1_col4_input_count = 1;
%let _OUTPUT1_col5_name = DEALID;
%let _OUTPUT1_col5_table = work.W1MTF8J02;
%let _OUTPUT1_col5_length = 100;
%let _OUTPUT1_col5_type = $;
%let _OUTPUT1_col5_format = $100.;
%let _OUTPUT1_col5_informat = $100.;
%let _OUTPUT1_col5_label = %nrquote(DEALID);
%let _OUTPUT1_col5_input0 = DEALID;
%let _OUTPUT1_col5_exp = ;
%let _OUTPUT1_col5_input = DEALID;
%let _OUTPUT1_col5_input_count = 1;
%let _OUTPUT1_col6_name = INSTRUMENTTYPECD;
%let _OUTPUT1_col6_table = work.W1MTF8J02;
%let _OUTPUT1_col6_length = 3;
%let _OUTPUT1_col6_type = $;
%let _OUTPUT1_col6_format = $3.;
%let _OUTPUT1_col6_informat = $3.;
%let _OUTPUT1_col6_label = %nrquote(INSTRUMENTTYPECD);
%let _OUTPUT1_col6_input0 = INSTRUMENTTYPECD;
%let _OUTPUT1_col6_exp = ;
%let _OUTPUT1_col6_input = INSTRUMENTTYPECD;
%let _OUTPUT1_col6_input_count = 1;
%let _OUTPUT1_col7_name = DEALDATE;
%let _OUTPUT1_col7_table = work.W1MTF8J02;
%let _OUTPUT1_col7_length = 8;
%let _OUTPUT1_col7_type = ;
%let _OUTPUT1_col7_format = DATETIME20.;
%let _OUTPUT1_col7_informat = DATETIME20.;
%let _OUTPUT1_col7_label = %nrquote(DEALDATE);
%let _OUTPUT1_col7_input0 = DEALDATE;
%let _OUTPUT1_col7_exp = ;
%let _OUTPUT1_col7_input = DEALDATE;
%let _OUTPUT1_col7_input_count = 1;

/*---- Start of User Written Code  ----*/ 

/*Трансформация для записи неуникальных DEALID в строку с разделителем ",".*/

proc sort data = &_INPUT1;
	by ACCOUNT_RK;
quit;
%error_check(mpStepType=DATA);

data &_OUTPUT1 (drop = DEALID_NEW);
	set &_INPUT1;
	by ACCOUNT_RK;

	retain DEALID_NEW;

if not missing(DEALID) then
do;
/*1 0*/
	if first.ACCOUNT_RK and not last.ACCOUNT_RK then DEALID_NEW = strip(DEALID);

/*0 0*/
	if not first.ACCOUNT_RK and not last.ACCOUNT_RK then DEALID_NEW = cats(DEALID_NEW, ',', DEALID);

/*1 1*/
	if first.ACCOUNT_RK and last.ACCOUNT_RK then
	do;
		DEALID_NEW = "";
		output;
	end;

/*0 1*/
	if not first.ACCOUNT_RK and last.ACCOUNT_RK then
	do;
		DEALID_NEW = cats(DEALID_NEW, ',', DEALID);
		DEALID=DEALID_NEW;
		DEALID_NEW = "";
		output;
	end;
end;
else output;
run;
%error_check(mpStepType=DATA);

/*---- End of User Written Code  ----*/ 

%rcSet(&syserr); 
%rcSet(&sqlrc); 


/**  Step end User Written **/

/*==========================================================================* 
 * Step:            Append                                A5ELGGF9.AK0000WR * 
 * Transform:       Append                                                  * 
 * Description:                                                             * 
 *                                                                          * 
 * Source Tables:   User Written - work.W1MT6BVXG         A5ELGGF9.AF0000CN * 
 *                  User Written - work.W1MTF8J02         A5ELGGF9.AF0000CQ * 
 *                  DCD - work.W1MF2CZX6                  A5ELGGF9.AF0000CI * 
 *                  DEP - work.W1MSB8N5I                  A5ELGGF9.AF0000CJ * 
 * Target Table:    Append - work.W1MUCZERJ               A5ELGGF9.AF0000CR * 
 *==========================================================================*/ 

%let transformID = %quote(A5ELGGF9.AK0000WR);
%let trans_rc = 0;
%let etls_stepStartTime = %sysfunc(datetime(), datetime20.); 

%let etls_recCheckExist = 0; 
%let etls_recnt = 0; 
%macro etls_recordCheck; 
   %let etls_recCheckExist = %eval(%sysfunc(exist(work.W1MT6BVXG, DATA)) or 
         %sysfunc(exist(work.W1MT6BVXG, VIEW))); 
   
   %if (&etls_recCheckExist) %then
   %do;
      %local etls_syntaxcheck; 
      %let etls_syntaxcheck = %sysfunc(getoption(syntaxcheck)); 
      /* Turn off syntaxcheck option to perform following steps  */ 
      options nosyntaxcheck;
      
      proc contents data = work.W1MT6BVXG out = work.etls_contents(keep = nobs) noprint; 
      run; 
      
      data _null_; 
         set work.etls_contents (obs = 1); 
         call symput("etls_recnt", left(put(nobs,32.))); 
      run;
      
      proc datasets lib = work nolist nowarn memtype = (data view);
         delete etls_contents;
      quit;
      
      /* Reset syntaxcheck option to previous setting  */ 
      options &etls_syntaxcheck; 
   %end;
%mend etls_recordCheck;
%etls_recordCheck;

%let dbxrc = %eval(%sysfunc(exist(work.W1MT6BVXG, DATA)) or 
      %sysfunc(exist(work.W1MT6BVXG, VIEW))); 

%let dbxrc = %eval(%sysfunc(exist(work.W1MTF8J02, DATA)) or 
      %sysfunc(exist(work.W1MTF8J02, VIEW))); 

%let dbxrc = %eval(%sysfunc(exist(work.W1MF2CZX6, DATA)) or 
      %sysfunc(exist(work.W1MF2CZX6, VIEW))); 

%let dbxrc = %eval(%sysfunc(exist(work.W1MSB8N5I, DATA)) or 
      %sysfunc(exist(work.W1MSB8N5I, VIEW))); 

/*---- Map the columns  ----*/ 
proc datasets lib = work nolist nowarn memtype = (data view);
   delete WJ2XD77;
quit;

%put %str(NOTE: Mapping columns ...);
proc sql;
   create view work.WJ2XD77 as
      select
         ACCOUNT_RK,
         REPORTCODE,
         REPORTDATE,
         FRONTKDEALID,
         FRONTFDEALID,
         DEALID length = 100   
            format = $100.
            informat = $100.
            label = 'DEALID',
         INSTRUMENTTYPECD,
         DEALDATE
   from work.W1MSB8N5I
   ;
quit;

%let SYSLAST = work.WJ2XD77;

proc datasets lib = work nolist nowarn memtype = (data view);
   delete W1MUCZERJ;
quit;

data work.W1MUCZERJ / view=work.W1MUCZERJ;
   set work.W1MT6BVXG
       work.W1MTF8J02
       work.W1MF2CZX6
       work.WJ2XD77;
   keep ACCOUNT_RK REPORTCODE REPORTDATE FRONTKDEALID FRONTFDEALID DEALID 
    INSTRUMENTTYPECD DEALDATE; 
run;

%rcSet(&syserr); 



/**  Step end Append **/

/*==========================================================================* 
 * Step:            Table Loader                          A5ELGGF9.AK0000WS * 
 * Transform:       Table Loader (Version 2.1)                              * 
 * Description:                                                             * 
 *                                                                          * 
 * Source Table:    Append - work.W1MUCZERJ               A5ELGGF9.AF0000CR * 
 * Target Table:    DQ_DRVT_DWH_DM - dm_dq.DQ_DRVT_DWH_DM A5ELGGF9.AE000049 * 
 *==========================================================================*/ 

%let transformID = %quote(A5ELGGF9.AK0000WS);
%let trans_rc = 0;
%let etls_stepStartTime = %sysfunc(datetime(), datetime20.); 

%let SYSLAST = %nrquote(work.W1MUCZERJ); 

%let SYS_SQL_IP_SPEEDO = Y;
%let SYS_SQL_MAPPUTTO = sas_put;
%let SYS_SQLREDUCEPUT = DBMS;
%global etls_sql_pushDown;
%let etls_sql_pushDown = -1;
option DBIDIRECTEXEC;

%global etls_tableExist;
%global etls_numIndex;
%global etls_lastTable;
%let etls_tableExist = -1; 
%let etls_numIndex = -1; 
%let etls_lastTable = &SYSLAST; 

/*---- Define load data macro  ----*/ 

/* --------------------------------------------------------------
   Load Technique Selection: AppendToExisting - AppendProc
   Constraint and index action selections: 'ASIS','ASIS','ASIS','ASIS'
   Additional options selections... 
      Set unmapped to missing on updates: false 
   -------------------------------------------------------------- */
%macro etls_loader;

   %let etls_tableOptions = ;
   
   /*---- Map the columns  ----*/ 
   proc datasets lib = work nolist nowarn memtype = (data view);
      delete WJ2XD84;
   quit;
   
   data _null_;
      put "NOTE: The following column(s) do not have a column mapping, so the"
           " value(s) will be set to missing: ADDITIONALINFORMATION, STARTDATE,"
           " NEXTDATE, ENDDATE, LEGNUMBER, VALUEFRS,    VALUESEC";
   run;
   
   %put %str(NOTE: Mapping columns ...);
   proc sql;
      create view work.WJ2XD84 as
         select
            REPORTCODE,
            REPORTDATE,
            FRONTKDEALID,
            FRONTFDEALID,
            DEALID,
            INSTRUMENTTYPECD,
            DEALDATE,
            "" as ADDITIONALINFORMATION length = 255
               format = $255.
               informat = $255.,
            . as STARTDATE length = 8
               format = DATETIME20.
               informat = DATETIME20.,
            . as NEXTDATE length = 8
               format = DATETIME20.
               informat = DATETIME20.,
            . as ENDDATE length = 8
               format = DATETIME20.
               informat = DATETIME20.,
            "" as LEGNUMBER length = 1
               format = $1.
               informat = $1.,
            "" as VALUEFRS length = 20
               format = $20.
               informat = $20.,
            "" as VALUESEC length = 20
               format = $20.
               informat = $20.
      from &etls_lastTable
      ;
   quit;
   
   %let SYSLAST = work.WJ2XD84;
   
   %let etls_lastTable = &SYSLAST; 
   %let etls_tableOptions = ; 
   
   /* Determine if the target table exists  */ 
   %let etls_tableExist = %eval(%sysfunc(exist(dm_dq.DQ_DRVT_DWH_DM, DATA)) or 
         %sysfunc(exist(dm_dq.DQ_DRVT_DWH_DM, VIEW))); 
   
   /*---- Create a new table  ----*/ 
   %if (&etls_tableExist eq 0) %then 
   %do;  /* if table does not exist  */ 
   
      %put %str(NOTE: Creating table ...);
      
      data dm_dq.DQ_DRVT_DWH_DM
              (dbnull = (
                         REPORTCODE = YES
                         REPORTDATE = YES
                         FRONTKDEALID = YES
                         FRONTFDEALID = YES
                         DEALID = YES
                         INSTRUMENTTYPECD = YES
                         DEALDATE = YES
                         ADDITIONALINFORMATION = YES
                         STARTDATE = YES
                         NEXTDATE = YES
                         ENDDATE = YES
                         LEGNUMBER = YES
                         VALUEFRS = YES
                         VALUESEC = YES));
         attrib REPORTCODE length = $5
            format = $5.
            informat = $5.
            label = 'REPORTCODE'; 
         attrib REPORTDATE length = 8
            format = DATETIME20.
            informat = DATETIME20.
            label = 'REPORTDATE'; 
         attrib FRONTKDEALID length = $10
            format = $10.
            informat = $10.
            label = 'FRONTKDEALID'; 
         attrib FRONTFDEALID length = $10
            format = $10.
            informat = $10.
            label = 'FRONTFDEALID'; 
         attrib DEALID length = $100
            format = $100.
            informat = $100.
            label = 'DEALID'; 
         attrib INSTRUMENTTYPECD length = $3
            format = $3.
            informat = $3.
            label = 'INSTRUMENTTYPECD'; 
         attrib DEALDATE length = 8
            format = DATETIME20.
            informat = DATETIME20.
            label = 'DEALDATE'; 
         attrib ADDITIONALINFORMATION length = $255
            format = $255.
            informat = $255.
            label = 'ADDITIONALINFORMATION'; 
         attrib STARTDATE length = 8
            format = DATETIME20.
            informat = DATETIME20.
            label = 'STARTDATE'; 
         attrib NEXTDATE length = 8
            format = DATETIME20.
            informat = DATETIME20.
            label = 'NEXTDATE'; 
         attrib ENDDATE length = 8
            format = DATETIME20.
            informat = DATETIME20.
            label = 'ENDDATE'; 
         attrib LEGNUMBER length = $1
            format = $1.
            informat = $1.
            label = 'LEGNUMBER'; 
         attrib VALUEFRS length = $20
            format = $20.
            informat = $20.
            label = 'VALUEFRS'; 
         attrib VALUESEC length = $20
            format = $20.
            informat = $20.
            label = 'VALUESEC'; 
         call missing(of _all_);
         stop;
      run;
      
      %rcSet(&syserr); 
      
   %end;  /* if table does not exist  */ 
   
   /*---- Append  ----*/ 
   %put %str(NOTE: Appending data ...);
   
   proc append base = dm_dq.DQ_DRVT_DWH_DM 
      data = &etls_lastTable (&etls_tableOptions)  force ; 
    run; 
   
   %rcSet(&syserr); 
   
   proc datasets lib = work nolist nowarn memtype = (data view);
      delete WJ2XD84;
   quit;
   
%mend etls_loader;
%etls_loader;

%let etls_recnt = 0;
%macro etls_recordCheck; 
   %let etls_recCheckExist = %eval(%sysfunc(exist(dm_dq.DQ_DRVT_DWH_DM, DATA)) or 
         %sysfunc(exist(dm_dq.DQ_DRVT_DWH_DM, VIEW))); 
   
   %if (&etls_recCheckExist) %then
   %do;
      proc sql noprint;
         select count(*) into :etls_recnt from dm_dq.DQ_DRVT_DWH_DM;
      quit;
   %end;
%mend etls_recordCheck;
%etls_recordCheck;



/**  Step end Table Loader **/

/*==========================================================================* 
 * Step:            SQL Join                              A5ELGGF9.AK0000WT * 
 * Transform:       Join                                                    * 
 * Description:                                                             * 
 *                                                                          * 
 * Source Tables:   Append - work.W1MUCZERJ               A5ELGGF9.AF0000CR * 
 *                  FINANCIAL_INSTRUMENT_TYPE -           A569C89V.AE0000FZ * 
 *                   dwh_dds.FINANCIAL_INSTRUMENT_TYPE                      * 
 * Target Table:    SQL Join - work.W1MUJ4OLZ             A5ELGGF9.AF0000CS * 
 *==========================================================================*/ 

%let transformID = %quote(A5ELGGF9.AK0000WT);
%let trans_rc = 0;
%let etls_stepStartTime = %sysfunc(datetime(), datetime20.); 

%let etls_recnt = -1;
%let SYS_SQL_IP_SPEEDO = Y;
%let SYS_SQL_MAPPUTTO = sas_put;
%let SYS_SQLREDUCEPUT = DBMS;
%global etls_sql_pushDown;
%let etls_sql_pushDown = -1;
option DBIDIRECTEXEC;

proc datasets lib = work nolist nowarn memtype = (data view);
   delete W1MUJ4OLZ;
quit;

proc sql;
   create table work.W1MUJ4OLZ as
   select distinct
      W1MUCZERJ.INSTRUMENTTYPECD length = 3   
         format = $3.
         informat = $3.
         label = 'INSTRUMENTTYPECD',
      FINANCIAL_INSTRUMENT_TYPE.FINANCIAL_INSTRUMENT_TYPE_DESC as INSTRUMENTTYPE length = 100   
         format = $100.
         informat = $100.
         label = 'INSTRUMENTTYPE'
   from
      work.W1MUCZERJ left join 
      dwh_dds.FINANCIAL_INSTRUMENT_TYPE
         on
         (
            W1MUCZERJ.INSTRUMENTTYPECD = FINANCIAL_INSTRUMENT_TYPE.FINANCIAL_INSTRUMENT_TYPE_CD
            and FINANCIAL_INSTRUMENT_TYPE.VALID_TO_DTTM = &ETL_SCD_FUTURE_DTTM
         )
   where
      W1MUCZERJ.INSTRUMENTTYPECD NOT IS MISSING 
   ;
quit;

%global etls_sql_pushDown;
%let etls_sql_pushDown = &sys_sql_ip_all;

%rcSet(&sqlrc); 



/**  Step end SQL Join **/

/*==========================================================================* 
 * Step:            Table Loader                          A5ELGGF9.AK0000WU * 
 * Transform:       Table Loader (Version 2.1)                              * 
 * Description:                                                             * 
 *                                                                          * 
 * Source Table:    SQL Join - work.W1MUJ4OLZ             A5ELGGF9.AF0000CS * 
 * Target Table:    DQ_DRVT_INSTRUMENTTYPE -              A5ELGGF9.AE00004A * 
 *                   dm_dq.DQ_DRVT_INSTRUMENTTYPE                           * 
 *==========================================================================*/ 

%let transformID = %quote(A5ELGGF9.AK0000WU);
%let trans_rc = 0;
%let etls_stepStartTime = %sysfunc(datetime(), datetime20.); 

%let SYSLAST = %nrquote(work.W1MUJ4OLZ); 

%let SYS_SQL_IP_SPEEDO = Y;
%let SYS_SQL_MAPPUTTO = sas_put;
%let SYS_SQLREDUCEPUT = DBMS;
%global etls_sql_pushDown;
%let etls_sql_pushDown = -1;
option DBIDIRECTEXEC;

%global etls_tableExist;
%global etls_numIndex;
%global etls_lastTable;
%let etls_tableExist = -1; 
%let etls_numIndex = -1; 
%let etls_lastTable = &SYSLAST; 

/*---- Define load data macro  ----*/ 

/* --------------------------------------------------------------
   Load Technique Selection: Update - Matching=SQLSet, New=AppendProc
   Blanks may replace non-blanks: false
   Constraint and index action selections: 'ASIS','ASIS','ASIS','ASIS'
   Additional options selections... 
      Set unmapped to missing on updates: false 
   -------------------------------------------------------------- */
%macro etls_loader;

   %let etls_tableOptions = ;
   
   /* Determine if the target table exists  */ 
   %let etls_tableExist = %eval(%sysfunc(exist(dm_dq.DQ_DRVT_INSTRUMENTTYPE, DATA)) or 
         %sysfunc(exist(dm_dq.DQ_DRVT_INSTRUMENTTYPE, VIEW))); 
   
   %let etls_hasUpdateIndex=0; 
   
   /*---- Create a new table  ----*/ 
   %if (&etls_tableExist eq 0) %then 
   %do;  /* if table does not exist  */ 
   
      %put %str(NOTE: Creating table ...);
      
      data dm_dq.DQ_DRVT_INSTRUMENTTYPE
              (dbnull = (
                         INSTRUMENTTYPECD = YES
                         INSTRUMENTTYPE = YES));
         attrib INSTRUMENTTYPECD length = $3
            format = $3.
            informat = $3.
            label = 'INSTRUMENTTYPECD'; 
         attrib INSTRUMENTTYPE length = $100
            format = $100.
            informat = $100.
            label = 'INSTRUMENTTYPE'; 
         call missing(of _all_);
         stop;
      run;
      
      %rcSet(&syserr); 
      
   %end;  /* if table does not exist  */ 
   
   %let etls_recCheckExist = 0; 
   %let etls_targetHasRows = 0; 
   %macro etls_recordCheck; 
      %let etls_recCheckExist = %eval(%sysfunc(exist(dm_dq.DQ_DRVT_INSTRUMENTTYPE, DATA)) or 
            %sysfunc(exist(dm_dq.DQ_DRVT_INSTRUMENTTYPE, VIEW))); 
      
      %if (&etls_recCheckExist) %then
      %do;
         %local etls_syntaxcheck; 
         %let etls_syntaxcheck = %sysfunc(getoption(syntaxcheck)); 
         /* Turn off syntaxcheck option to perform following steps  */ 
         options nosyntaxcheck;
         
         data _null_; 
            set dm_dq.DQ_DRVT_INSTRUMENTTYPE( obs=1 ); 
            call symput("etls_targetHasRows",'1'); 
         run; 
         /* Reset syntaxcheck option to previous setting  */ 
         options &etls_syntaxcheck; 
      %end;
   %mend etls_recordCheck;
   %etls_recordCheck;
   
   
   %if (&etls_targetHasRows) %then 
   %do;  /* if has rows */ 
      proc sql ; 
         /* update existing records in the master table  */ 
         update dm_dq.DQ_DRVT_INSTRUMENTTYPE as m
            set INSTRUMENTTYPE = (select case when t.INSTRUMENTTYPE="" then m.INSTRUMENTTYPE else t.INSTRUMENTTYPE end from &etls_lastTable as t 
                                where m.INSTRUMENTTYPECD = t.INSTRUMENTTYPECD)
               where exists (select * from &etls_lastTable as t
                                   where m.INSTRUMENTTYPECD = t.INSTRUMENTTYPECD);
         
         /* create a temporary table of new records from the transaction table  */ 
         create table etls_newrecords as 
            select * 
               from &etls_lastTable as t 
                  where not exists 
                     (select * from dm_dq.DQ_DRVT_INSTRUMENTTYPE
                   as m 
                                      where m.INSTRUMENTTYPECD = t.INSTRUMENTTYPECD)
         ; 
         
      quit;
      
      %let etls_lastTable = &SYSLAST;
      
      %let etls_tableOptions = ; 
      
      %global etls_sql_pushDown;
      %let etls_sql_pushDown = &sys_sql_ip_all;
      
      %rcSet(&sqlrc); 
      
   %end; /* if has rows */ 
   
   /*---- Append  ----*/ 
   %put %str(NOTE: Appending data ...);
   
   proc append base = dm_dq.DQ_DRVT_INSTRUMENTTYPE 
      data = &etls_lastTable (&etls_tableOptions)  force ; 
    run; 
   
   %rcSet(&syserr); 
   
   proc datasets lib = work nolist nowarn memtype = (data view);
      delete etls_newrecords;
   quit;
   
%mend etls_loader;
%etls_loader;

%let etls_recnt = 0;
%macro etls_recordCheck; 
   %let etls_recCheckExist = %eval(%sysfunc(exist(dm_dq.DQ_DRVT_INSTRUMENTTYPE, DATA)) or 
         %sysfunc(exist(dm_dq.DQ_DRVT_INSTRUMENTTYPE, VIEW))); 
   
   %if (&etls_recCheckExist) %then
   %do;
      proc sql noprint;
         select count(*) into :etls_recnt from dm_dq.DQ_DRVT_INSTRUMENTTYPE;
      quit;
   %end;
%mend etls_recordCheck;
%etls_recordCheck;



/**  Step end Table Loader **/

/*==========================================================================* 
 * Step:            Append                                A5ELGGF9.AK0000WV * 
 * Transform:       Append                                                  * 
 * Description:                                                             * 
 *                                                                          * 
 * Source Tables:   FINANCIAL_ACCOUNT - work.W1MF0DQGK    A5ELGGF9.AF0000CG * 
 *                  SQL Join - work.W1MQTPHSE             A5ELGGF9.AF0000CL * 
 *                  SQL Join - work.W1MQI85NE             A5ELGGF9.AF0000CO * 
 * Target Table:    Append - work.W9JV883T                A5ELGGF9.AF0000CT * 
 *==========================================================================*/ 

%let transformID = %quote(A5ELGGF9.AK0000WV);
%let trans_rc = 0;
%let etls_stepStartTime = %sysfunc(datetime(), datetime20.); 

%let etls_recnt = -1;
%let dbxrc = %eval(%sysfunc(exist(work.W1MF0DQGK, DATA)) or 
      %sysfunc(exist(work.W1MF0DQGK, VIEW))); 

/*---- Map the columns  ----*/ 
proc datasets lib = work nolist nowarn memtype = (data view);
   delete WJ2XDCK;
quit;

%put %str(NOTE: Mapping columns ...);
proc sql;
   create view work.WJ2XDCK as
      select
         ACCOUNT_RK
   from work.W1MF0DQGK
   ;
quit;

%let SYSLAST = work.WJ2XDCK;

%let dbxrc = %eval(%sysfunc(exist(work.W1MQTPHSE, DATA)) or 
      %sysfunc(exist(work.W1MQTPHSE, VIEW))); 

/*---- Map the columns  ----*/ 
proc datasets lib = work nolist nowarn memtype = (data view);
   delete WJ2XDCP;
quit;

%put %str(NOTE: Mapping columns ...);
proc sql;
   create view work.WJ2XDCP as
      select
         ACCOUNT_RK
   from work.W1MQTPHSE
   ;
quit;

%let SYSLAST = work.WJ2XDCP;

%let dbxrc = %eval(%sysfunc(exist(work.W1MQI85NE, DATA)) or 
      %sysfunc(exist(work.W1MQI85NE, VIEW))); 

/*---- Map the columns  ----*/ 
proc datasets lib = work nolist nowarn memtype = (data view);
   delete WJ2XDCU;
quit;

%put %str(NOTE: Mapping columns ...);
proc sql;
   create view work.WJ2XDCU as
      select
         ACCOUNT_RK
   from work.W1MQI85NE
   ;
quit;

%let SYSLAST = work.WJ2XDCU;

proc datasets lib = work nolist nowarn memtype = (data view);
   delete W9JV883T;
quit;

data work.W9JV883T / view=work.W9JV883T;
   set work.WJ2XDCK
       work.WJ2XDCP
       work.WJ2XDCU;
   keep ACCOUNT_RK; 
run;

%rcSet(&syserr); 



/**  Step end Append **/

/*==========================================================================* 
 * Step:            Sort                                  A5ELGGF9.AK0000WW * 
 * Transform:       Sort                                                    * 
 * Description:                                                             * 
 *                                                                          * 
 * Source Table:    Append - work.W9JV883T                A5ELGGF9.AF0000CT * 
 * Target Table:    Sort - work.W9JZFE7Z                  A5ELGGF9.AF0000CU * 
 *==========================================================================*/ 

%let transformID = %quote(A5ELGGF9.AK0000WW);
%let trans_rc = 0;
%let etls_stepStartTime = %sysfunc(datetime(), datetime20.); 

%let etls_recnt = -1;
%let SYSLAST = %nrquote(work.W9JV883T); 

proc datasets lib = work nolist nowarn memtype = (data view);
   delete W9JZFE7Z;
quit;

proc sort data = &SYSLAST 
   out = work.W9JZFE7Z
      NODUPKEY ; 
   by
      ACCOUNT_RK
   ;
run; 

%rcSet(&syserr); 



/**  Step end Sort **/

/*==========================================================================* 
 * Step:            User Written                          A5ELGGF9.AK0000WX * 
 * Transform:       User Written                                            * 
 * Description:     Сбор статистики                                         * 
 *                                                                          * 
 * Source Tables:   Sort - work.W9JZFE7Z                  A5ELGGF9.AF0000CU * 
 *                  Append - work.W1MUCZERJ               A5ELGGF9.AF0000CR * 
 *                  ETL_JOB - etl_sys.ETL_JOB             A59S11RW.AE00001A * 
 * Target Table:    User Written - work.W1MUTJ4TM         A5ELGGF9.AF0000CV * 
 *                                                                          * 
 * User Written:    SourceCode                                              * 
 *==========================================================================*/ 

%let transformID = %quote(A5ELGGF9.AK0000WX);
%let trans_rc = 0;
%let etls_stepStartTime = %sysfunc(datetime(), datetime20.); 

%let etls_recCheckExist = 0; 
%let etls_recnt = 0; 
%macro etls_recordCheck; 
   %let etls_recCheckExist = %eval(%sysfunc(exist(work.W9JZFE7Z, DATA)) or 
         %sysfunc(exist(work.W9JZFE7Z, VIEW))); 
   
   %if (&etls_recCheckExist) %then
   %do;
      %local etls_syntaxcheck; 
      %let etls_syntaxcheck = %sysfunc(getoption(syntaxcheck)); 
      /* Turn off syntaxcheck option to perform following steps  */ 
      options nosyntaxcheck;
      
      proc contents data = work.W9JZFE7Z out = work.etls_contents(keep = nobs) noprint; 
      run; 
      
      data _null_; 
         set work.etls_contents (obs = 1); 
         call symput("etls_recnt", left(put(nobs,32.))); 
      run;
      
      proc datasets lib = work nolist nowarn memtype = (data view);
         delete etls_contents;
      quit;
      
      /* Reset syntaxcheck option to previous setting  */ 
      options &etls_syntaxcheck; 
   %end;
%mend etls_recordCheck;
%etls_recordCheck;

%let _INPUT_count = 3;
%let _INPUT = work.W9JZFE7Z;
%let _INPUT_connect = ;
%let _INPUT_engine = ;
%let _INPUT_memtype = DATA;
%let _INPUT_options = %nrquote();
%let _INPUT_alter = %nrquote();
%let _INPUT_path = %nrquote(/Sort_A5ELGGF9.AF0000CU%(WorkTable%));
%let _INPUT_type = 1;
%let _INPUT_label = %nrquote();

%let _INPUT1 = work.W9JZFE7Z;
%let _INPUT1_connect = ;
%let _INPUT1_engine = ;
%let _INPUT1_memtype = DATA;
%let _INPUT1_options = %nrquote();
%let _INPUT1_alter = %nrquote();
%let _INPUT1_path = %nrquote(/Sort_A5ELGGF9.AF0000CU%(WorkTable%));
%let _INPUT1_type = 1;
%let _INPUT1_label = %nrquote();

%let _INPUT2 = work.W1MUCZERJ;
%let _INPUT2_connect = ;
%let _INPUT2_engine = ;
%let _INPUT2_memtype = VIEW;
%let _INPUT2_options = %nrquote();
%let _INPUT2_alter = %nrquote();
%let _INPUT2_path = %nrquote(/Append_A5ELGGF9.AF0000CR%(WorkTable%));
%let _INPUT2_type = 1;
%let _INPUT2_label = %nrquote();

%let _INPUT3 = etl_sys.ETL_JOB;
%let _INPUT3_connect =  PATH=DWH.IMB.RU AUTHDOMAIN="OraAuth_ETL_SYS" 
;
%let _INPUT3_engine = ORACLE;
%let _INPUT3_memtype = DATA;
%let _INPUT3_options = %nrquote();
%let _INPUT3_alter = %nrquote();
%let _INPUT3_path = %nrquote(/DWH_DWHDDS_SYS/Tables/ETL_SYS/ETL_JOB%(Table%));
%let _INPUT3_type = 1;
%let _INPUT3_label = %nrquote();

%let _OUTPUT_count = 1;
%let _OUTPUT = work.W1MUTJ4TM;
%let _OUTPUT_connect = ;
%let _OUTPUT_engine = ;
%let _OUTPUT_memtype = DATA;
%let _OUTPUT_options = %nrquote();
%let _OUTPUT_alter = %nrquote();
%let _OUTPUT_path = %nrquote(/User Written_A5ELGGF9.AF0000CV%(WorkTable%));
%let _OUTPUT_type = 1;
%let _OUTPUT_label = %nrquote();
/* List of target columns to keep  */ 
%let _OUTPUT_keep = REP_DT REP_ID PRC CNT_ALL CNT_ERR DWH_DT;
%let _OUTPUT_col_count = 6;
%let _OUTPUT_col0_name = REP_DT;
%let _OUTPUT_col0_table = work.W1MUTJ4TM;
%let _OUTPUT_col0_length = 8;
%let _OUTPUT_col0_type = ;
%let _OUTPUT_col0_format = ;
%let _OUTPUT_col0_informat = ;
%let _OUTPUT_col0_label = %nrquote();
%let _OUTPUT_col0_exp = ;
%let _OUTPUT_col0_input_count = 0;
%let _OUTPUT_col1_name = REP_ID;
%let _OUTPUT_col1_table = work.W1MUTJ4TM;
%let _OUTPUT_col1_length = 8;
%let _OUTPUT_col1_type = ;
%let _OUTPUT_col1_format = ;
%let _OUTPUT_col1_informat = ;
%let _OUTPUT_col1_label = %nrquote();
%let _OUTPUT_col1_exp = ;
%let _OUTPUT_col1_input_count = 0;
%let _OUTPUT_col2_name = PRC;
%let _OUTPUT_col2_table = work.W1MUTJ4TM;
%let _OUTPUT_col2_length = 8;
%let _OUTPUT_col2_type = ;
%let _OUTPUT_col2_format = ;
%let _OUTPUT_col2_informat = ;
%let _OUTPUT_col2_label = %nrquote();
%let _OUTPUT_col2_exp = ;
%let _OUTPUT_col2_input_count = 0;
%let _OUTPUT_col3_name = CNT_ALL;
%let _OUTPUT_col3_table = work.W1MUTJ4TM;
%let _OUTPUT_col3_length = 8;
%let _OUTPUT_col3_type = ;
%let _OUTPUT_col3_format = ;
%let _OUTPUT_col3_informat = ;
%let _OUTPUT_col3_label = %nrquote();
%let _OUTPUT_col3_exp = ;
%let _OUTPUT_col3_input_count = 0;
%let _OUTPUT_col4_name = CNT_ERR;
%let _OUTPUT_col4_table = work.W1MUTJ4TM;
%let _OUTPUT_col4_length = 8;
%let _OUTPUT_col4_type = ;
%let _OUTPUT_col4_format = ;
%let _OUTPUT_col4_informat = ;
%let _OUTPUT_col4_label = %nrquote();
%let _OUTPUT_col4_exp = ;
%let _OUTPUT_col4_input_count = 0;
%let _OUTPUT_col5_name = DWH_DT;
%let _OUTPUT_col5_table = work.W1MUTJ4TM;
%let _OUTPUT_col5_length = 8;
%let _OUTPUT_col5_type = ;
%let _OUTPUT_col5_format = ;
%let _OUTPUT_col5_informat = ;
%let _OUTPUT_col5_label = %nrquote();
%let _OUTPUT_col5_exp = ;
%let _OUTPUT_col5_input_count = 0;

%let _OUTPUT1 = work.W1MUTJ4TM;
%let _OUTPUT1_connect = ;
%let _OUTPUT1_engine = ;
%let _OUTPUT1_memtype = DATA;
%let _OUTPUT1_options = %nrquote();
%let _OUTPUT1_alter = %nrquote();
%let _OUTPUT1_path = %nrquote(/User Written_A5ELGGF9.AF0000CV%(WorkTable%));
%let _OUTPUT1_type = 1;
%let _OUTPUT1_label = %nrquote();
/* List of target columns to keep  */ 
%let _OUTPUT1_keep = REP_DT REP_ID PRC CNT_ALL CNT_ERR DWH_DT;
%let _OUTPUT1_col_count = 6;
%let _OUTPUT1_col0_name = REP_DT;
%let _OUTPUT1_col0_table = work.W1MUTJ4TM;
%let _OUTPUT1_col0_length = 8;
%let _OUTPUT1_col0_type = ;
%let _OUTPUT1_col0_format = ;
%let _OUTPUT1_col0_informat = ;
%let _OUTPUT1_col0_label = %nrquote();
%let _OUTPUT1_col0_exp = ;
%let _OUTPUT1_col0_input_count = 0;
%let _OUTPUT1_col1_name = REP_ID;
%let _OUTPUT1_col1_table = work.W1MUTJ4TM;
%let _OUTPUT1_col1_length = 8;
%let _OUTPUT1_col1_type = ;
%let _OUTPUT1_col1_format = ;
%let _OUTPUT1_col1_informat = ;
%let _OUTPUT1_col1_label = %nrquote();
%let _OUTPUT1_col1_exp = ;
%let _OUTPUT1_col1_input_count = 0;
%let _OUTPUT1_col2_name = PRC;
%let _OUTPUT1_col2_table = work.W1MUTJ4TM;
%let _OUTPUT1_col2_length = 8;
%let _OUTPUT1_col2_type = ;
%let _OUTPUT1_col2_format = ;
%let _OUTPUT1_col2_informat = ;
%let _OUTPUT1_col2_label = %nrquote();
%let _OUTPUT1_col2_exp = ;
%let _OUTPUT1_col2_input_count = 0;
%let _OUTPUT1_col3_name = CNT_ALL;
%let _OUTPUT1_col3_table = work.W1MUTJ4TM;
%let _OUTPUT1_col3_length = 8;
%let _OUTPUT1_col3_type = ;
%let _OUTPUT1_col3_format = ;
%let _OUTPUT1_col3_informat = ;
%let _OUTPUT1_col3_label = %nrquote();
%let _OUTPUT1_col3_exp = ;
%let _OUTPUT1_col3_input_count = 0;
%let _OUTPUT1_col4_name = CNT_ERR;
%let _OUTPUT1_col4_table = work.W1MUTJ4TM;
%let _OUTPUT1_col4_length = 8;
%let _OUTPUT1_col4_type = ;
%let _OUTPUT1_col4_format = ;
%let _OUTPUT1_col4_informat = ;
%let _OUTPUT1_col4_label = %nrquote();
%let _OUTPUT1_col4_exp = ;
%let _OUTPUT1_col4_input_count = 0;
%let _OUTPUT1_col5_name = DWH_DT;
%let _OUTPUT1_col5_table = work.W1MUTJ4TM;
%let _OUTPUT1_col5_length = 8;
%let _OUTPUT1_col5_type = ;
%let _OUTPUT1_col5_format = ;
%let _OUTPUT1_col5_informat = ;
%let _OUTPUT1_col5_label = %nrquote();
%let _OUTPUT1_col5_exp = ;
%let _OUTPUT1_col5_input_count = 0;

/*---- Start of User Written Code  ----*/ 


proc sql;
/*Кол-во всех уникальных деривативных сделок*/
	select count(distinct ACCOUNT_RK) into :CNT_ALL from &_INPUT1;
/*Кол-во ошибочных сделок*/
	select count(distinct ACCOUNT_RK) into :CNT_ERR from &_INPUT2;
/*Дата успешного выполнения процесса в DWH*/
	select end_dttm into :DWH_DT from &_INPUT3 where JOB_ID = (
  select MAX(job_id) 
  from &_INPUT3 
  where upper(job_nm) = '081_360_COMMIT_MIDAS_FIN_INSTR_FULL' and success_flg = 'Y'
  );
quit;
%error_check(mpStepType=SQL);

/*Формируем выходной набор.*/
data &_OUTPUT1;
	attrib
		REP_DT length = 8 format = DATETIME20.
		REP_ID length = 8
		PRC length =8
		CNT_ALL length=8
		CNT_ERR length = 8
		DWH_DT length = 8 format = DATETIME20.
	;

	REP_DT = &REPDT.;
	REP_ID = 1;
	PRC = DIVIDE(&CNT_ERR. , &CNT_ALL.) * 100;
	if missing(PRC) then PRC=0;
	CNT_ALL = &CNT_ALL.;
	CNT_ERR = &CNT_ERR.;
	DWH_DT = "&DWH_DT."dt;
run;
%error_check(mpStepType=DATA);


/*---- End of User Written Code  ----*/ 

%rcSet(&syserr); 
%rcSet(&sqlrc); 


/**  Step end User Written **/

/*==========================================================================* 
 * Step:            Table Loader                          A5ELGGF9.AK0000WY * 
 * Transform:       Table Loader (Version 2.1)                              * 
 * Description:                                                             * 
 *                                                                          * 
 * Source Table:    User Written - work.W1MUTJ4TM         A5ELGGF9.AF0000CV * 
 * Target Table:    DQ_DRVT_REPORT_PRC -                  A5ELGGF9.AE00004E * 
 *                   dm_dq.DQ_DRVT_REPORT_PRC                               * 
 *==========================================================================*/ 

%let transformID = %quote(A5ELGGF9.AK0000WY);
%let trans_rc = 0;
%let etls_stepStartTime = %sysfunc(datetime(), datetime20.); 

%let SYSLAST = %nrquote(work.W1MUTJ4TM); 

%let SYS_SQL_IP_SPEEDO = Y;
%let SYS_SQL_MAPPUTTO = sas_put;
%let SYS_SQLREDUCEPUT = DBMS;
%global etls_sql_pushDown;
%let etls_sql_pushDown = -1;
option DBIDIRECTEXEC;

%global etls_tableExist;
%global etls_numIndex;
%global etls_lastTable;
%let etls_tableExist = -1; 
%let etls_numIndex = -1; 
%let etls_lastTable = &SYSLAST; 

/*---- Define load data macro  ----*/ 

/* --------------------------------------------------------------
   Load Technique Selection: AppendToExisting - AppendProc
   Constraint and index action selections: 'ASIS','ASIS','ASIS','ASIS'
   Additional options selections... 
      Set unmapped to missing on updates: false 
   -------------------------------------------------------------- */
%macro etls_loader;

   %let etls_tableOptions = ;
   
   /*---- Map the columns  ----*/ 
   proc datasets lib = work nolist nowarn memtype = (data view);
      delete WJ2XDO4;
   quit;
   
   %put %str(NOTE: Mapping columns ...);
   proc sql;
      create view work.WJ2XDO4 as
         select
            REP_DT   
               format = DATETIME20.
               informat = DATETIME20.,
            REP_ID   
               format = 7.
               informat = 7.,
            PRC   
               format = 19.8
               informat = 19.8,
            CNT_ALL   
               format = 13.
               informat = 13.,
            CNT_ERR   
               format = 13.
               informat = 13.,
            DWH_DT   
               format = DATETIME20.
               informat = DATETIME20.
      from &etls_lastTable
      ;
   quit;
   
   %let SYSLAST = work.WJ2XDO4;
   
   %let etls_lastTable = &SYSLAST; 
   %let etls_tableOptions = ; 
   
   /* Determine if the target table exists  */ 
   %let etls_tableExist = %eval(%sysfunc(exist(dm_dq.DQ_DRVT_REPORT_PRC, DATA)) or 
         %sysfunc(exist(dm_dq.DQ_DRVT_REPORT_PRC, VIEW))); 
   
   /*---- Create a new table  ----*/ 
   %if (&etls_tableExist eq 0) %then 
   %do;  /* if table does not exist  */ 
   
      %put %str(NOTE: Creating table ...);
      
      data dm_dq.DQ_DRVT_REPORT_PRC
              (dbnull = (
                         REP_DT = NO
                         REP_ID = NO
                         PRC = YES
                         CNT_ALL = YES
                         CNT_ERR = YES
                         DWH_DT = YES));
         attrib REP_DT length = 8
            format = DATETIME20.
            informat = DATETIME20.
            label = 'REP_DT'; 
         attrib REP_ID length = 8
            format = 7.
            informat = 7.
            label = 'REP_ID'; 
         attrib PRC length = 8
            format = 19.8
            informat = 19.8
            label = 'PRC'; 
         attrib CNT_ALL length = 8
            format = 13.
            informat = 13.
            label = 'CNT_ALL'; 
         attrib CNT_ERR length = 8
            format = 13.
            informat = 13.
            label = 'CNT_ERR'; 
         attrib DWH_DT length = 8
            format = DATETIME20.
            informat = DATETIME20.
            label = 'DWH_DT'; 
         call missing(of _all_);
         stop;
      run;
      
      %rcSet(&syserr); 
      
   %end;  /* if table does not exist  */ 
   
   /*---- Append  ----*/ 
   %put %str(NOTE: Appending data ...);
   
   proc append base = dm_dq.DQ_DRVT_REPORT_PRC 
      data = &etls_lastTable (&etls_tableOptions)  force ; 
    run; 
   
   %rcSet(&syserr); 
   
   proc datasets lib = work nolist nowarn memtype = (data view);
      delete WJ2XDO4;
   quit;
   
%mend etls_loader;
%etls_loader;

%let etls_recnt = 0;
%macro etls_recordCheck; 
   %let etls_recCheckExist = %eval(%sysfunc(exist(dm_dq.DQ_DRVT_REPORT_PRC, DATA)) or 
         %sysfunc(exist(dm_dq.DQ_DRVT_REPORT_PRC, VIEW))); 
   
   %if (&etls_recCheckExist) %then
   %do;
      proc sql noprint;
         select count(*) into :etls_recnt from dm_dq.DQ_DRVT_REPORT_PRC;
      quit;
   %end;
%mend etls_recordCheck;
%etls_recordCheck;



/**  Step end Table Loader **/

/*==========================================================================* 
 * Step:            Завершить модуль                      A5ELGGF9.AK0000WZ * 
 * Transform:       Завершить модуль                                        * 
 * Description:                                                             * 
 *==========================================================================*/ 

%let transformID = %quote(A5ELGGF9.AK0000WZ);
%let trans_rc = 0;
%let etls_stepStartTime = %sysfunc(datetime(), datetime20.); 

%let _INPUT_count = 0; 
%let _OUTPUT_count = 0; 


/*****************************************************************
* ВЕРСИЯ:
*   $Id: transform_job_finish.sas 247 2012-04-03 07:31:10Z nesterenok $
*
******************************************************************
* НАЗНАЧЕНИЕ:
*   Регистрирует конец модуля ETL.
*
* ПАРАМЕТРЫ:
*   нет
*
******************************************************************/

%macro transform_job_finish;

   /* Продолжаем модуль */
   %job_continue_reg(mpJobType=JOB, mpJobName=&ETLS_JobName., mpPostEvent=N);

   /* Завершаем модуль */
   %job_finish_reg(mpJobType=JOB);

%mend transform_job_finish;

%transform_job_finish;


%rcSet(&syserr); 
%rcSet(&sysrc); 
%rcSet(&sqlrc); 



/**  Step end Завершить модуль **/

%let etls_endTime = %sysfunc(datetime(),datetime.);



/**  Job end 202_010_Mart_DQ_DRVT_REP01 **/

/* Reset jobid and name */
%let jobID = %quote(A5ELGGF9.AH00003N);
%let etls_jobName = %nrquote(202_002_Stream_DQ_DRVT);

/**************************************************************************** 
 * Job:             202_020_Mart_DQ_DRVT_REP02            A5ELGGF9.AH000028 * 
 * Description:     Проверка на заполнение всех полей Витрины               * 
 *                   "Деривативы", применимых к данному инструменту.        * 
 *                                                                          * 
 * Metadata Server: bravo14                                                 * 
 * Port:            8561                                                    * 
 * Location:        /DWH_DMDQ_REP/Jobs/Includes/DQ_DRVT                     * 
 *                                                                          * 
 * Server:          SASApp                                A5C46MZY.AQ000002 * 
 *                                                                          * 
 * Source Tables:   INSTRUMENTTYPE -                      A5LX14I5.A900001B * 
 *                   DM_DRVT.INSTRUMENTTYPE                                 * 
 *                  INSTRUMENTCLASS -                     A5LX14I5.A900001A * 
 *                   DM_DRVT.INSTRUMENTCLASS                                * 
 *                  FLAGDELIVERY - DM_DRVT.FLAGDELIVERY   A5LX14I5.A9000017 * 
 *                  OPTIONTYPE - DM_DRVT.OPTIONTYPE       A5LX14I5.A900001G * 
 *                  DEALSTATUS - DM_DRVT.DEALSTATUS       A5LX14I5.A9000015 * 
 *                  INTERESTRATETYPE -                    A5LX14I5.A900001E * 
 *                   DM_DRVT.INTERESTRATETYPE                               * 
 *                  DEAL - DM_DRVT.DEAL                   A5LX14I5.A9000014 * 
 *                  ETL_JOB - etl_sys.ETL_JOB             A59S11RW.AE00001A * 
 *                  INSTRUMENTTYPE -                      A5LX14I5.A900001B * 
 *                   DM_DRVT.INSTRUMENTTYPE                                 * 
 *                  INTERESTRATESCHEDULE -                A5LX14I5.A900001D * 
 *                   DM_DRVT.INTERESTRATESCHEDULE                           * 
 *                  INTERESTRATEACCRUEDHIST -             A5LX14I5.A900001C * 
 *                   DM_DRVT.INTERESTRATEACCRUEDHIST                        * 
 *                  FAIRVALUE - DM_DRVT.FAIRVALUE         A5LX14I5.A9000016 * 
 *                  INSTRUMENTTYPE -                      A5LX14I5.A900001B * 
 *                   DM_DRVT.INSTRUMENTTYPE                                 * 
 *                  INTERESTRATETYPE -                    A5LX14I5.A900001E * 
 *                   DM_DRVT.INTERESTRATETYPE                               * 
 * Target Tables:   DQ_DRVT_DWH_DM - dm_dq.DQ_DRVT_DWH_DM A5ELGGF9.AE000049 * 
 *                  DQ_DRVT_REPORT_PRC -                  A5ELGGF9.AE00004E * 
 *                   dm_dq.DQ_DRVT_REPORT_PRC                               * 
 *                  DQ_DRVT_INSTRUMENTTYPE -              A5ELGGF9.AE00004A * 
 *                   dm_dq.DQ_DRVT_INSTRUMENTTYPE                           * 
 *                  DQ_DRVT_DWH_DM - dm_dq.DQ_DRVT_DWH_DM A5ELGGF9.AE000049 * 
 *                  DQ_DRVT_REPORT_PRC -                  A5ELGGF9.AE00004E * 
 *                   dm_dq.DQ_DRVT_REPORT_PRC                               * 
 *                                                                          * 
 * Generated on:    16 Июль 2013 г. 17:46:14 MSD                            * 
 * Generated by:    sasdwh                                                  * 
 * Version:         SAS Data Integration Studio 4.5                         * 
 ****************************************************************************/ 

/* General macro variables  */ 
%let jobID = %quote(A5ELGGF9.AH000028);
%let etls_jobName = %nrquote(202_020_Mart_DQ_DRVT_REP02);
%let etls_userID = %nrquote(sasdwh);


/* Create metadata macro variables */
%let IOMServer      = %nrquote(SASApp);
%let metaPort       = %nrquote(8561);
%let metaServer     = %nrquote(bravo14);

/* Set metadata options */
options metaport       = &metaPort 
        metaserver     = "&metaServer"; 

/* Setup for capturing job status  */ 
%let etls_startTime = %sysfunc(datetime(),datetime.);
%let etls_recordsBefore = 0;
%let etls_recordsAfter = 0;
%let etls_lib = 0;
%let etls_table = 0;

%global etls_debug; 
%macro etls_setDebug; 
   %if %str(&etls_debug) ne 0 %then 
      OPTIONS MPRINT%str(;); 
%mend; 
%etls_setDebug; 

/*---- Start of Pre-Process Code  ----*/ 

%LET REPDT=&DMDQ_REPORT_START_DTTM;
/* test 
%LET REPDT=%sysfunc(dhms(%sysfunc(putn('15Nov2012'd, best.)), 0, 0, 0)); 
*/

/*---- End of Pre-Process Code  ----*/ 

%rcSet(&syserr); 
%rcSet(&sqlrc); 

/*==========================================================================* 
 * Step:            Начать модуль                         A5ELGGF9.AK0000X0 * 
 * Transform:       Начать модуль                                           * 
 * Description:                                                             * 
 *==========================================================================*/ 

%let transformID = %quote(A5ELGGF9.AK0000X0);
%let trans_rc = 0;
%let etls_stepStartTime = %sysfunc(datetime(), datetime20.); 

%let _INPUT_count = 0; 
%let _OUTPUT_count = 0; 


/*****************************************************************
* ВЕРСИЯ:
*   $Id: transform_job_start.sas 1747 2012-08-01 11:26:13Z nesterenok $
*
******************************************************************
* НАЗНАЧЕНИЕ:
*   Регистрирует начало модуля ETL.
*
* ПАРАМЕТРЫ:
*   нет
*
******************************************************************/

%macro transform_job_start;

   /* Продолжаем поток (или создаем новый) */
   %local lmvStreamName;
   %if %sysfunc(sysexist(LSB_JOBNAME)) %then
      %let lmvStreamName = %scan(%sysfunc(sysget(LSB_JOBNAME)), 3, :);
   %else
      %let lmvStreamName = ;

   %job_continue_reg(mpJobType=STREAM, mpJobName=&lmvStreamName, mpPostEvent=N, mpForcedStart=Y);

   /* Для DI, начинаем поток заново, если старый был начат не сегодня */
   %if %length(&lmvStreamName) eq 0 and &STREAM_START_DT ne %sysfunc(today()) %then %do;
      %job_start_reg(mpJobType=STREAM, mpParentJobId=, mpJobName=&lmvStreamName.);
   %end;

   /* Начинаем модуль */
   %job_start_reg(mpJobType=JOB, mpParentJobId=&STREAM_ID, mpJobName=&ETLS_JobName.);

%mend transform_job_start;

%transform_job_start;


%rcSet(&syserr); 
%rcSet(&sysrc); 
%rcSet(&sqlrc); 



/**  Step end Начать модуль **/

/*==========================================================================* 
 * Step:            Очистить таблицу                      A5ELGGF9.AK0000X1 * 
 * Transform:       Очистить таблицу                                        * 
 * Description:                                                             * 
 *                                                                          * 
 * Target Table:    DQ_DRVT_DWH_DM - dm_dq.DQ_DRVT_DWH_DM A5ELGGF9.AE000049 * 
 *==========================================================================*/ 

%let transformID = %quote(A5ELGGF9.AK0000X1);
%let trans_rc = 0;
%let etls_stepStartTime = %sysfunc(datetime(), datetime20.); 

%let _INPUT_count = 0; 
%let _OUTPUT_count = 1; 
%let _OUTPUT = dm_dq.DQ_DRVT_DWH_DM;
%let _OUTPUT_connect =  DEFER=YES PATH=DWH.IMB.RU AUTHDOMAIN="OraAuth_DM_DQ" 
;
%let _OUTPUT_engine = ORACLE;
%let _OUTPUT_memtype = DATA;
%let _OUTPUT_options = %nrquote();
%let _OUTPUT_alter = %nrquote();
%let _OUTPUT_path = %nrquote(/DWH_DMDQ_REP/Marts/DQ_DRVT/DQ_DRVT_DWH_DM%(Table%));
%let _OUTPUT_type = 1;
%let _OUTPUT_label = %nrquote();
/* List of target columns to keep  */ 
%let _OUTPUT_keep = REPORTCODE REPORTDATE FRONTKDEALID FRONTFDEALID DEALID 
        INSTRUMENTTYPECD DEALDATE ADDITIONALINFORMATION STARTDATE NEXTDATE 
        ENDDATE LEGNUMBER VALUEFRS VALUESEC;

%let tpOut = dm_dq.DQ_DRVT_DWH_DM;
%let tpOut_connect =  DEFER=YES PATH=DWH.IMB.RU AUTHDOMAIN="OraAuth_DM_DQ" 
;
%let tpOut_engine = ORACLE;
%let tpOut_memtype = DATA;
%let tpOut_options = %nrquote();
%let tpOut_alter = %nrquote();
%let tpOut_path = %nrquote(/DWH_DMDQ_REP/Marts/DQ_DRVT/DQ_DRVT_DWH_DM%(Table%));
%let tpOut_type = 1;
%let tpOut_label = %nrquote();
/* List of target columns to keep  */ 
%let tpOut_keep = REPORTCODE REPORTDATE FRONTKDEALID FRONTFDEALID DEALID 
        INSTRUMENTTYPECD DEALDATE ADDITIONALINFORMATION STARTDATE NEXTDATE 
        ENDDATE LEGNUMBER VALUEFRS VALUESEC;


%let tpWhere = %nrquote(REPORTCODE = %'П-02%' AND REPORTDATE = &DMDQ_REPORT_START_DTTM);

/* List of target columns to keep  */ 
%let _keep = REPORTCODE REPORTDATE FRONTKDEALID FRONTFDEALID DEALID 
        INSTRUMENTTYPECD DEALDATE ADDITIONALINFORMATION STARTDATE NEXTDATE 
        ENDDATE LEGNUMBER VALUEFRS VALUESEC;
/* List of target columns to keep  */ 
%let keep = REPORTCODE REPORTDATE FRONTKDEALID FRONTFDEALID DEALID 
        INSTRUMENTTYPECD DEALDATE ADDITIONALINFORMATION STARTDATE NEXTDATE 
        ENDDATE LEGNUMBER VALUEFRS VALUESEC;
/*****************************************************************
* ВЕРСИЯ:
*   $Id: transform_table_delete.sas 2142 2012-08-17 14:15:09Z nesterenok $
*
******************************************************************
* НАЗНАЧЕНИЕ:
*   Удаляет из указанной таблицы записи.
*
* ПАРАМЕТРЫ:
*   tpOut                  + имя целевой таблицы, которая будет очищена
*   tpWhere                - условие отбора записей под удаление
*                            по умолчанию отсутствует, т.е. удаляются все записи
*
******************************************************************/

%macro transform_table_delete;

   /* Удаляем записи */
   /* TODO: truncate */
   proc sql;
      delete from &tpOut
      %if %length(&tpWhere) gt 0 %then %do;
         where (%unquote(&tpWhere))
      %end;
      ;
   quit;
   %error_check (mpStepType=SQL);

%mend transform_table_delete;

%transform_table_delete;


%rcSet(&syserr); 
%rcSet(&sysrc); 
%rcSet(&sqlrc); 



/**  Step end Очистить таблицу **/

/*==========================================================================* 
 * Step:            Очистить таблицу                      A5ELGGF9.AK0000X2 * 
 * Transform:       Очистить таблицу                                        * 
 * Description:                                                             * 
 *                                                                          * 
 * Target Table:    DQ_DRVT_REPORT_PRC -                  A5ELGGF9.AE00004E * 
 *                   dm_dq.DQ_DRVT_REPORT_PRC                               * 
 *==========================================================================*/ 

%let transformID = %quote(A5ELGGF9.AK0000X2);
%let trans_rc = 0;
%let etls_stepStartTime = %sysfunc(datetime(), datetime20.); 

%let _INPUT_count = 0; 
%let _OUTPUT_count = 1; 
%let _OUTPUT = dm_dq.DQ_DRVT_REPORT_PRC;
%let _OUTPUT_connect =  DEFER=YES PATH=DWH.IMB.RU AUTHDOMAIN="OraAuth_DM_DQ" 
;
%let _OUTPUT_engine = ORACLE;
%let _OUTPUT_memtype = DATA;
%let _OUTPUT_options = %nrquote();
%let _OUTPUT_alter = %nrquote();
%let _OUTPUT_path = %nrquote(/DWH_DMDQ_REP/Marts/DQ_DRVT/DQ_DRVT_REPORT_PRC%(Table%));
%let _OUTPUT_type = 1;
%let _OUTPUT_label = %nrquote();
/* List of target columns to keep  */ 
%let _OUTPUT_keep = REP_DT REP_ID PRC CNT_ALL CNT_ERR DWH_DT;

%let tpOut = dm_dq.DQ_DRVT_REPORT_PRC;
%let tpOut_connect =  DEFER=YES PATH=DWH.IMB.RU AUTHDOMAIN="OraAuth_DM_DQ" 
;
%let tpOut_engine = ORACLE;
%let tpOut_memtype = DATA;
%let tpOut_options = %nrquote();
%let tpOut_alter = %nrquote();
%let tpOut_path = %nrquote(/DWH_DMDQ_REP/Marts/DQ_DRVT/DQ_DRVT_REPORT_PRC%(Table%));
%let tpOut_type = 1;
%let tpOut_label = %nrquote();
/* List of target columns to keep  */ 
%let tpOut_keep = REP_DT REP_ID PRC CNT_ALL CNT_ERR DWH_DT;


%let tpWhere = %nrquote(REP_ID = 2 AND REP_DT = &DMDQ_REPORT_START_DTTM);

/* List of target columns to keep  */ 
%let _keep = REP_DT REP_ID PRC CNT_ALL CNT_ERR DWH_DT;
/* List of target columns to keep  */ 
%let keep = REP_DT REP_ID PRC CNT_ALL CNT_ERR DWH_DT;
/*****************************************************************
* ВЕРСИЯ:
*   $Id: transform_table_delete.sas 2142 2012-08-17 14:15:09Z nesterenok $
*
******************************************************************
* НАЗНАЧЕНИЕ:
*   Удаляет из указанной таблицы записи.
*
* ПАРАМЕТРЫ:
*   tpOut                  + имя целевой таблицы, которая будет очищена
*   tpWhere                - условие отбора записей под удаление
*                            по умолчанию отсутствует, т.е. удаляются все записи
*
******************************************************************/

%macro transform_table_delete;

   /* Удаляем записи */
   /* TODO: truncate */
   proc sql;
      delete from &tpOut
      %if %length(&tpWhere) gt 0 %then %do;
         where (%unquote(&tpWhere))
      %end;
      ;
   quit;
   %error_check (mpStepType=SQL);

%mend transform_table_delete;

%transform_table_delete;


%rcSet(&syserr); 
%rcSet(&sysrc); 
%rcSet(&sqlrc); 



/**  Step end Очистить таблицу **/

/*==========================================================================* 
 * Step:            Extract                               A5ELGGF9.AK0000X3 * 
 * Transform:       Extract                                                 * 
 * Description:                                                             * 
 *                                                                          * 
 * Source Table:    DEAL - DM_DRVT.DEAL                   A5LX14I5.A9000014 * 
 * Target Table:    Extract - work.W1N4UFHAR              A5ELGGF9.AF0000CW * 
 *==========================================================================*/ 

%let transformID = %quote(A5ELGGF9.AK0000X3);
%let trans_rc = 0;
%let etls_stepStartTime = %sysfunc(datetime(), datetime20.); 

%let etls_recnt = 0;
%macro etls_recordCheck; 
   %let etls_recCheckExist = %eval(%sysfunc(exist(DM_DRVT.DEAL, DATA)) or 
         %sysfunc(exist(DM_DRVT.DEAL, VIEW))); 
   
   %if (&etls_recCheckExist) %then
   %do;
      proc sql noprint;
         select count(*) into :etls_recnt from DM_DRVT.DEAL;
      quit;
   %end;
%mend etls_recordCheck;
%etls_recordCheck;

%let SYSLAST = %nrquote(DM_DRVT.DEAL); 

%let SYS_SQL_IP_SPEEDO = Y;
%let SYS_SQL_MAPPUTTO = sas_put;
%let SYS_SQLREDUCEPUT = DBMS;
%global etls_sql_pushDown;
%let etls_sql_pushDown = -1;
option DBIDIRECTEXEC;

/*---- Map the columns  ----*/ 
proc datasets lib = work nolist nowarn memtype = (data view);
   delete W1N4UFHAR;
quit;

%put %str(NOTE: Mapping columns ...);
proc sql;
   create view work.W1N4UFHAR as
      select
         DEALRK   
            format = 11.
            informat = 11.,
         VALID_FROM_DTTM,
         VALID_TO_DTTM,
         FRONTKDEALID,
         FRONTFDEALID,
         DEALDATE,
         DEALGROUP,
         INSTRUMENTTYPECD,
         FLAGPFI,
         INSTRUMENTCLASSCD,
         FLAGDELIVERYCD,
         FLAGOTC,
         CUSTOMERNO,
         PREMIUM   
            format = 20.5
            informat = 20.5,
         PREMIUMCCY,
         OPTIONTYPECD,
         PREMIUMPAYMENTMODE,
         HEDGEINDICATOR,
         ORIGINALMATURITY   
            format = 19.
            informat = 19.,
         DEALSTATUSCD length = 10   
            format = $10.
            informat = $10.,
         DEALID1,
         DEALTYPE1,
         DEALSUBTYPE1,
         DEALDIRECTION1,
         PLACEDTAKEN1,
         VALUEDATE1,
         MATURITYDATE1,
         UNDERLYINGCCY1,
         UNDERLYINGNAME1,
         NOTIONALCURRENT1   
            format = 20.5
            informat = 20.5,
         PRICECCY1,
         GROSSRATE1   
            format = 20.5
            informat = 20.5,
         AMOUNT1   
            format = 20.5
            informat = 20.5,
         CALCBASIS1,
         INTERESTRATE1   
            format = 20.5
            informat = 20.5,
         INTERESTRATETYPECD1,
         PAYMENTFREQUENCY1,
         STARTDATE1,
         STARTPERIODDATE1,
         NEXTPERIODDATE1,
         NEXTINTPAYMENTDATE1,
         DCDFX_DEALID,
         DCDFX_TYPE,
         DCDFX_SUBTYPE,
         DEALID2,
         DEALTYPE2,
         DEALSUBTYPE2,
         DEALDIRECTION2 length = 10   
            format = $10.
            informat = $10.,
         PLACEDTAKEN2,
         VALUEDATE2,
         MATURITYDATE2,
         UNDERLYINGCCY2,
         UNDERLYINGNAME2,
         NOTIONALCURRENT2   
            format = 20.5
            informat = 20.5,
         PRICECCY2,
         GROSSRATE2   
            format = 20.5
            informat = 20.5,
         AMOUNT2   
            format = 20.5
            informat = 20.5,
         CALCBASIS2,
         INTERESTRATE2   
            format = 20.5
            informat = 20.5,
         INTERESTRATETYPECD2,
         PAYMENTFREQUENCY2,
         STARTDATE2,
         STARTPERIODDATE2,
         NEXTPERIODDATE2,
         NEXTINTPAYMENTDATE2
   from &SYSLAST
      where VALID_FROM_DTTM <= &REPDT < VALID_TO_DTTM
   ;
quit;

%let SYSLAST = work.W1N4UFHAR;

%global etls_sql_pushDown;
%let etls_sql_pushDown = &sys_sql_ip_all;

%rcSet(&sqlrc); 



/**  Step end Extract **/

/*==========================================================================* 
 * Step:            Lookup                                A5ELGGF9.AK0000X4 * 
 * Transform:       Lookup                                                  * 
 * Description:     Добавление полей справочников                           * 
 *                                                                          * 
 * Source Tables:   Extract - work.W1N4UFHAR              A5ELGGF9.AF0000CW * 
 *                  INSTRUMENTTYPE -                      A5LX14I5.A900001B * 
 *                   DM_DRVT.INSTRUMENTTYPE                                 * 
 *                  INSTRUMENTCLASS -                     A5LX14I5.A900001A * 
 *                   DM_DRVT.INSTRUMENTCLASS                                * 
 *                  FLAGDELIVERY - DM_DRVT.FLAGDELIVERY   A5LX14I5.A9000017 * 
 *                  OPTIONTYPE - DM_DRVT.OPTIONTYPE       A5LX14I5.A900001G * 
 *                  DEALSTATUS - DM_DRVT.DEALSTATUS       A5LX14I5.A9000015 * 
 *                  INTERESTRATETYPE -                    A5LX14I5.A900001E * 
 *                   DM_DRVT.INTERESTRATETYPE                               * 
 * Target Table:    Lookup - work.W1N4MI9NV               A5ELGGF9.AF0000CX * 
 *==========================================================================*/ 

%let transformID = %quote(A5ELGGF9.AK0000X4);
%let trans_rc = 0;
%let etls_stepStartTime = %sysfunc(datetime(), datetime20.); 

%let etls_recnt = -1;
%let runTime = %sysfunc(datetime()); 

proc datasets lib = work nolist nowarn memtype = (data view);
   delete W1N4MI9NV;
quit;

/*---- Begin DATA step to perform lookups  ----*/ 
DATA  work.W1N4MI9NV
         (keep = FRONTKDEALID FRONTFDEALID DEALDATE INSTRUMENTTYPECD DEALID1 DEALID2 
                 INSTRUMENTTYPE INSTRUMENTCLASS FLAGDELIVERY OPTIONTYPE DEALSTATUS 
                 DEALRK DEALGROUP FLAGPFI INSTRUMENTCLASSCD FLAGDELIVERYCD FLAGOTC 
                 CUSTOMERNO PREMIUM PREMIUMCCY OPTIONTYPECD PREMIUMPAYMENTMODE 
                 HEDGEINDICATOR ORIGINALMATURITY DEALSTATUSCD DEALTYPE1 DEALSUBTYPE1 
                 DEALDIRECTION1 PLACEDTAKEN1 VALUEDATE1 MATURITYDATE1 UNDERLYINGCCY1 
                 UNDERLYINGNAME1 NOTIONALCURRENT1 PRICECCY1 GROSSRATE1 AMOUNT1 
                 CALCBASIS1 INTERESTRATE1 INTERESTRATETYPECD1 PAYMENTFREQUENCY1 
                 STARTDATE1 STARTPERIODDATE1 NEXTPERIODDATE1 NEXTINTPAYMENTDATE1 
                 DCDFX_DEALID DCDFX_TYPE DCDFX_SUBTYPE DEALTYPE2 DEALSUBTYPE2 
                 DEALDIRECTION2 PLACEDTAKEN2 VALUEDATE2 MATURITYDATE2 UNDERLYINGCCY2 
                 UNDERLYINGNAME2 NOTIONALCURRENT2 PRICECCY2 GROSSRATE2 AMOUNT2 
                 CALCBASIS2 INTERESTRATE2 INTERESTRATETYPECD2 PAYMENTFREQUENCY2 
                 STARTDATE2 STARTPERIODDATE2 NEXTPERIODDATE2 NEXTINTPAYMENTDATE2 
                 INTERESTRATETYPE1 )
      ; 
   
   attrib FRONTKDEALID length=$10 format=$10. label="FRONTKDEALID"
          FRONTFDEALID length=$10 format=$10. label="FRONTFDEALID"
          DEALDATE length=8 format=DATETIME20. label="DEALDATE"
          INSTRUMENTTYPECD length=$3 format=$3. label="INSTRUMENTTYPECD"
          DEALID1 length=$32 format=$32. label="DEALID1"
          DEALID2 length=$32 format=$32. label="DEALID2"
          INSTRUMENTTYPE length=$100 format=$100. label="INSTRUMENTTYPE"
          INSTRUMENTCLASS length=$100 format=$100. label="INSTRUMENTCLASS"
          FLAGDELIVERY length=$100 format=$100. label="FLAGDELIVERY"
          OPTIONTYPE length=$100 format=$100. label="OPTIONTYPE"
          DEALSTATUS length=$100 format=$100. label="DEALSTATUS"
          DEALRK length=8 format=11. label="DEALRK"
          DEALGROUP length=$32 format=$32. label="DEALGROUP"
          FLAGPFI length=$20 format=$20. label="FLAGPFI"
          INSTRUMENTCLASSCD length=$3 format=$3. label="INSTRUMENTCLASSCD"
          FLAGDELIVERYCD length=$3 format=$3. label="FLAGDELIVERYCD"
          FLAGOTC length=$3 format=$3. label="FLAGOTC"
          CUSTOMERNO length=$32 format=$32. label="CUSTOMERNO"
          PREMIUM length=8 format=20.5 label="PREMIUM"
          PREMIUMCCY length=$3 format=$3. label="PREMIUMCCY"
          OPTIONTYPECD length=$3 format=$3. label="OPTIONTYPECD"
          PREMIUMPAYMENTMODE length=$20 format=$20. label="PREMIUMPAYMENTMODE"
          HEDGEINDICATOR length=$10 format=$10. label="HEDGEINDICATOR"
          ORIGINALMATURITY length=8 format=19. label="ORIGINALMATURITY"
          DEALSTATUSCD length=$10 format=$10. label="DEALSTATUSCD"
          DEALTYPE1 length=$2 format=$2. label="DEALTYPE1"
          DEALSUBTYPE1 length=$2 format=$2. label="DEALSUBTYPE1"
          DEALDIRECTION1 length=$5 format=$5. label="DEALDIRECTION1"
          PLACEDTAKEN1 length=$10 format=$10. label="PLACEDTAKEN1"
          VALUEDATE1 length=8 format=DATETIME20. label="VALUEDATE1"
          MATURITYDATE1 length=8 format=DATETIME20. label="MATURITYDATE1"
          UNDERLYINGCCY1 length=$3 format=$3. label="UNDERLYINGCCY1"
          UNDERLYINGNAME1 length=$32 format=$32. label="UNDERLYINGNAME1"
          NOTIONALCURRENT1 length=8 format=20.5 label="NOTIONALCURRENT1"
          PRICECCY1 length=$3 format=$3. label="PRICECCY1"
          GROSSRATE1 length=8 format=20.5 label="GROSSRATE1"
          AMOUNT1 length=8 format=20.5 label="AMOUNT1"
          CALCBASIS1 length=$10 format=$10. label="CALCBASIS1"
          INTERESTRATE1 length=8 format=20.5 label="INTERESTRATE1"
          INTERESTRATETYPECD1 length=$3 format=$3. label="INTERESTRATETYPECD1"
          PAYMENTFREQUENCY1 length=$3 format=$3. label="PAYMENTFREQUENCY1"
          STARTDATE1 length=8 format=DATETIME20. label="STARTDATE1"
          STARTPERIODDATE1 length=8 format=DATETIME20. label="STARTPERIODDATE1"
          NEXTPERIODDATE1 length=8 format=DATETIME20. label="NEXTPERIODDATE1"
          NEXTINTPAYMENTDATE1 length=8 format=DATETIME20. label="NEXTINTPAYMENTDATE1"
          DCDFX_DEALID length=$32 format=$32. label="DCDFX_DEALID"
          DCDFX_TYPE length=$2 format=$2. label="DCDFX_TYPE"
          DCDFX_SUBTYPE length=$2 format=$2. label="DCDFX_SUBTYPE"
          DEALTYPE2 length=$2 format=$2. label="DEALTYPE2"
          DEALSUBTYPE2 length=$2 format=$2. label="DEALSUBTYPE2"
          DEALDIRECTION2 length=$10 format=$10. label="DEALDIRECTION2"
          PLACEDTAKEN2 length=$10 format=$10. label="PLACEDTAKEN2"
          VALUEDATE2 length=8 format=DATETIME20. label="VALUEDATE2"
          MATURITYDATE2 length=8 format=DATETIME20. label="MATURITYDATE2"
          UNDERLYINGCCY2 length=$3 format=$3. label="UNDERLYINGCCY2"
          UNDERLYINGNAME2 length=$32 format=$32. label="UNDERLYINGNAME2"
          NOTIONALCURRENT2 length=8 format=20.5 label="NOTIONALCURRENT2"
          PRICECCY2 length=$3 format=$3. label="PRICECCY2"
          GROSSRATE2 length=8 format=20.5 label="GROSSRATE2"
          AMOUNT2 length=8 format=20.5 label="AMOUNT2"
          CALCBASIS2 length=$10 format=$10. label="CALCBASIS2"
          INTERESTRATE2 length=8 format=20.5 label="INTERESTRATE2"
          INTERESTRATETYPECD2 length=$3 format=$3. label="INTERESTRATETYPECD2"
          PAYMENTFREQUENCY2 length=$3 format=$3. label="PAYMENTFREQUENCY2"
          STARTDATE2 length=8 format=DATETIME20. label="STARTDATE2"
          STARTPERIODDATE2 length=8 format=DATETIME20. label="STARTPERIODDATE2"
          NEXTPERIODDATE2 length=8 format=DATETIME20. label="NEXTPERIODDATE2"
          NEXTINTPAYMENTDATE2 length=8 format=DATETIME20. label="NEXTINTPAYMENTDATE2"
          INTERESTRATETYPE1 length=$100 format=$100. label="INTERESTRATETYPE"
          INTERESTRATETYPE length= $100
          INTERESTRATETYPECD length= $3
          ; 
   
   retain missing0-missing5 0; 
   
   etls_assign_target_value = 0; 
   /* Build hash objects from lookup tables before reading first source row  */ 
   if (_n_ = 1) then 
   do; 
      /* Build hash h0 from lookup table DM_DRVT.INSTRUMENTTYPE */ 
      nlobs = .; 
      dsid = open("DM_DRVT.INSTRUMENTTYPE"); 
      if (dsid > 0) then 
      do; 
         if ( attrc(dsid, 'MTYPE') = 'DATA' ) then 
            nlobs = attrn(dsid, 'NLOBS'); 
         else 
            nlobs = -1; 
            
         dsid = close(dsid); 
         if (nlobs ^= 0) then 
         do; 
            if (nlobs > 0) then 
               exponent = ceil(log2(nlobs)); 
            else 
               exponent = 8; 
            declare hash h0(dataset: "DM_DRVT.INSTRUMENTTYPE", hashexp: exponent);
            h0.defineKey( "INSTRUMENTTYPECD");
            h0.defineData( "INSTRUMENTTYPE");
            h0.defineDone();
            if (nlobs = -1) then 
            do; 
               if (h0.Num_Items < 1) then
               do; 
                  put "NOTE: Lookup table is empty: DM_DRVT.INSTRUMENTTYPE";
                  missing0 = 98; 
               end; 
            end; 
         end; 
         else 
         do; 
            put "NOTE: Lookup table is empty: DM_DRVT.INSTRUMENTTYPE";
            missing0 = 98; 
         end; 
      end; 
      else 
      do; 
         put "NOTE: Lookup table does not exist or cannot be opened:"
              " DM_DRVT.INSTRUMENTTYPE";
         
         missing0 = 99; 
      end; 
      
      /* Build hash h1 from lookup table DM_DRVT.INSTRUMENTCLASS */ 
      nlobs = .; 
      dsid = open("DM_DRVT.INSTRUMENTCLASS"); 
      if (dsid > 0) then 
      do; 
         if ( attrc(dsid, 'MTYPE') = 'DATA' ) then 
            nlobs = attrn(dsid, 'NLOBS'); 
         else 
            nlobs = -1; 
            
         dsid = close(dsid); 
         if (nlobs ^= 0) then 
         do; 
            if (nlobs > 0) then 
               exponent = ceil(log2(nlobs)); 
            else 
               exponent = 8; 
            declare hash h1(dataset: "DM_DRVT.INSTRUMENTCLASS", hashexp: exponent);
            h1.defineKey( "INSTRUMENTCLASSCD");
            h1.defineData( "INSTRUMENTCLASS");
            h1.defineDone();
            if (nlobs = -1) then 
            do; 
               if (h1.Num_Items < 1) then
               do; 
                  put "NOTE: Lookup table is empty: DM_DRVT.INSTRUMENTCLASS";
                  missing1 = 98; 
               end; 
            end; 
         end; 
         else 
         do; 
            put "NOTE: Lookup table is empty: DM_DRVT.INSTRUMENTCLASS";
            missing1 = 98; 
         end; 
      end; 
      else 
      do; 
         put "NOTE: Lookup table does not exist or cannot be opened:"
              " DM_DRVT.INSTRUMENTCLASS";
         
         missing1 = 99; 
      end; 
      
      /* Build hash h2 from lookup table DM_DRVT.FLAGDELIVERY */ 
      nlobs = .; 
      dsid = open("DM_DRVT.FLAGDELIVERY"); 
      if (dsid > 0) then 
      do; 
         if ( attrc(dsid, 'MTYPE') = 'DATA' ) then 
            nlobs = attrn(dsid, 'NLOBS'); 
         else 
            nlobs = -1; 
            
         dsid = close(dsid); 
         if (nlobs ^= 0) then 
         do; 
            if (nlobs > 0) then 
               exponent = ceil(log2(nlobs)); 
            else 
               exponent = 8; 
            declare hash h2(dataset: "DM_DRVT.FLAGDELIVERY", hashexp: exponent);
            h2.defineKey( "FLAGDELIVERYCD");
            h2.defineData( "FLAGDELIVERY");
            h2.defineDone();
            if (nlobs = -1) then 
            do; 
               if (h2.Num_Items < 1) then
               do; 
                  put "NOTE: Lookup table is empty: DM_DRVT.FLAGDELIVERY";
                  missing2 = 98; 
               end; 
            end; 
         end; 
         else 
         do; 
            put "NOTE: Lookup table is empty: DM_DRVT.FLAGDELIVERY";
            missing2 = 98; 
         end; 
      end; 
      else 
      do; 
         put "NOTE: Lookup table does not exist or cannot be opened:"
              " DM_DRVT.FLAGDELIVERY";
         
         missing2 = 99; 
      end; 
      
      /* Build hash h3 from lookup table DM_DRVT.OPTIONTYPE */ 
      nlobs = .; 
      dsid = open("DM_DRVT.OPTIONTYPE"); 
      if (dsid > 0) then 
      do; 
         if ( attrc(dsid, 'MTYPE') = 'DATA' ) then 
            nlobs = attrn(dsid, 'NLOBS'); 
         else 
            nlobs = -1; 
            
         dsid = close(dsid); 
         if (nlobs ^= 0) then 
         do; 
            if (nlobs > 0) then 
               exponent = ceil(log2(nlobs)); 
            else 
               exponent = 8; 
            declare hash h3(dataset: "DM_DRVT.OPTIONTYPE", hashexp: exponent);
            h3.defineKey( "OPTIONTYPECD");
            h3.defineData( "OPTIONTYPE");
            h3.defineDone();
            if (nlobs = -1) then 
            do; 
               if (h3.Num_Items < 1) then
               do; 
                  put "NOTE: Lookup table is empty: DM_DRVT.OPTIONTYPE";
                  missing3 = 98; 
               end; 
            end; 
         end; 
         else 
         do; 
            put "NOTE: Lookup table is empty: DM_DRVT.OPTIONTYPE";
            missing3 = 98; 
         end; 
      end; 
      else 
      do; 
         put "NOTE: Lookup table does not exist or cannot be opened:"
              " DM_DRVT.OPTIONTYPE";
         
         missing3 = 99; 
      end; 
      
      /* Build hash h4 from lookup table DM_DRVT.DEALSTATUS */ 
      nlobs = .; 
      dsid = open("DM_DRVT.DEALSTATUS"); 
      if (dsid > 0) then 
      do; 
         if ( attrc(dsid, 'MTYPE') = 'DATA' ) then 
            nlobs = attrn(dsid, 'NLOBS'); 
         else 
            nlobs = -1; 
            
         dsid = close(dsid); 
         if (nlobs ^= 0) then 
         do; 
            if (nlobs > 0) then 
               exponent = ceil(log2(nlobs)); 
            else 
               exponent = 8; 
            declare hash h4(dataset: "DM_DRVT.DEALSTATUS", hashexp: exponent);
            h4.defineKey( "DEALSTATUSCD");
            h4.defineData( "DEALSTATUS");
            h4.defineDone();
            if (nlobs = -1) then 
            do; 
               if (h4.Num_Items < 1) then
               do; 
                  put "NOTE: Lookup table is empty: DM_DRVT.DEALSTATUS";
                  missing4 = 98; 
               end; 
            end; 
         end; 
         else 
         do; 
            put "NOTE: Lookup table is empty: DM_DRVT.DEALSTATUS";
            missing4 = 98; 
         end; 
      end; 
      else 
      do; 
         put "NOTE: Lookup table does not exist or cannot be opened:"
              " DM_DRVT.DEALSTATUS";
         
         missing4 = 99; 
      end; 
      
      /* Build hash h5 from lookup table DM_DRVT.INTERESTRATETYPE */ 
      nlobs = .; 
      dsid = open("DM_DRVT.INTERESTRATETYPE"); 
      if (dsid > 0) then 
      do; 
         if ( attrc(dsid, 'MTYPE') = 'DATA' ) then 
            nlobs = attrn(dsid, 'NLOBS'); 
         else 
            nlobs = -1; 
            
         dsid = close(dsid); 
         if (nlobs ^= 0) then 
         do; 
            if (nlobs > 0) then 
               exponent = ceil(log2(nlobs)); 
            else 
               exponent = 8; 
            declare hash h5(dataset: "DM_DRVT.INTERESTRATETYPE", hashexp: exponent);
            h5.defineKey( "INTERESTRATETYPECD");
            h5.defineData( "INTERESTRATETYPE");
            h5.defineDone();
            if (nlobs = -1) then 
            do; 
               if (h5.Num_Items < 1) then
               do; 
                  put "NOTE: Lookup table is empty: DM_DRVT.INTERESTRATETYPE";
                  missing5 = 98; 
               end; 
            end; 
         end; 
         else 
         do; 
            put "NOTE: Lookup table is empty: DM_DRVT.INTERESTRATETYPE";
            missing5 = 98; 
         end; 
      end; 
      else 
      do; 
         put "NOTE: Lookup table does not exist or cannot be opened:"
              " DM_DRVT.INTERESTRATETYPE";
         
         missing5 = 99; 
      end; 
      
      call missing (INSTRUMENTTYPECD, INSTRUMENTTYPE, INSTRUMENTCLASSCD, 
                    INSTRUMENTCLASS, FLAGDELIVERYCD, FLAGDELIVERY, OPTIONTYPECD, 
                    OPTIONTYPE, DEALSTATUSCD, DEALSTATUS, INTERESTRATETYPECD, 
                    INTERESTRATETYPE); 
   
   end; /* All hash objects have been defined */
   
   /* Read a row from the source table  */ 
   set work.W1N4UFHAR end = eof;
   
   /* Is the current key value stored in hash h0?  */ 
   if (missing0 < 1) then 
   do; 
      rc0 = h0.find(key: INSTRUMENTTYPECD);
   end; 
   else 
      rc0 = missing0; 
      
   /* Is the current key value stored in hash h1?  */ 
   if (missing1 < 1) then 
   do; 
      rc1 = h1.find(key: INSTRUMENTCLASSCD);
   end; 
   else 
      rc1 = missing1; 
      
   /* Is the current key value stored in hash h2?  */ 
   if (missing2 < 1) then 
   do; 
      rc2 = h2.find(key: FLAGDELIVERYCD);
   end; 
   else 
      rc2 = missing2; 
      
   /* Is the current key value stored in hash h3?  */ 
   if (missing3 < 1) then 
   do; 
      rc3 = h3.find(key: OPTIONTYPECD);
   end; 
   else 
      rc3 = missing3; 
      
   /* Is the current key value stored in hash h4?  */ 
   if (missing4 < 1) then 
   do; 
      rc4 = h4.find(key: DEALSTATUSCD);
   end; 
   else 
      rc4 = missing4; 
      
   /* Is the current key value stored in hash h5?  */ 
   if (missing5 < 1) then 
   do; 
      rc5 = h5.find(key: INTERESTRATETYPECD1);
      INTERESTRATETYPE1 = INTERESTRATETYPE;
   end; 
   else 
      rc5 = missing5; 
      
   /* Examine success of lookups  */ 
   if ( rc0=0 and rc1=0 and rc2=0 and rc3=0 and rc4=0 and rc5=0 ) then 
   do; 
      /* Write row to target  */ 
      output work.W1N4MI9NV; 
   end; 
   else 
   do; 
      error_total + 1; 
      
      if (rc0 ^= 0) then 
      do; 
         exception_total + 1; 
         if (rc0 = 99) then 
         do; 
            /* Check: Lookup table missing-Write exception row  */ 
            /* Check: Lookup table missing-Set target columns to value  */ 
         end; 
         
         else if (rc0 = 98) then 
         do; 
            /* Check: Lookup table has no rows-Write exception row  */ 
            /* Check: Lookup table has no rows-Set target columns to value  */ 
         end; 
         
         else 
         do; 
            /* Check: Lookup value not found-Set target columns to missing  */ 
            call missing (INSTRUMENTTYPE); 
            etls_assign_target_value = 1; 
         end; 
      end; 
      
      if (rc1 ^= 0) then 
      do; 
         exception_total + 1; 
         if (rc1 = 99) then 
         do; 
            /* Check: Lookup table missing-Write exception row  */ 
            /* Check: Lookup table missing-Set target columns to value  */ 
         end; 
         
         else if (rc1 = 98) then 
         do; 
            /* Check: Lookup table has no rows-Write exception row  */ 
            /* Check: Lookup table has no rows-Set target columns to value  */ 
         end; 
         
         else 
         do; 
            /* Check: Lookup value not found-Set target columns to missing  */ 
            call missing (INSTRUMENTCLASS); 
            etls_assign_target_value = 1; 
         end; 
      end; 
      
      if (rc2 ^= 0) then 
      do; 
         exception_total + 1; 
         if (rc2 = 99) then 
         do; 
            /* Check: Lookup table missing-Write exception row  */ 
            /* Check: Lookup table missing-Set target columns to value  */ 
         end; 
         
         else if (rc2 = 98) then 
         do; 
            /* Check: Lookup table has no rows-Write exception row  */ 
            /* Check: Lookup table has no rows-Set target columns to value  */ 
         end; 
         
         else 
         do; 
            /* Check: Lookup value not found-Set target columns to missing  */ 
            call missing (FLAGDELIVERY); 
            etls_assign_target_value = 1; 
         end; 
      end; 
      
      if (rc3 ^= 0) then 
      do; 
         exception_total + 1; 
         if (rc3 = 99) then 
         do; 
            /* Check: Lookup table missing-Write exception row  */ 
            /* Check: Lookup table missing-Set target columns to value  */ 
         end; 
         
         else if (rc3 = 98) then 
         do; 
            /* Check: Lookup table has no rows-Write exception row  */ 
            /* Check: Lookup table has no rows-Set target columns to value  */ 
         end; 
         
         else 
         do; 
            /* Check: Lookup value not found-Set target columns to missing  */ 
            call missing (OPTIONTYPE); 
            etls_assign_target_value = 1; 
         end; 
      end; 
      
      if (rc4 ^= 0) then 
      do; 
         exception_total + 1; 
         if (rc4 = 99) then 
         do; 
            /* Check: Lookup table missing-Write exception row  */ 
            /* Check: Lookup table missing-Set target columns to value  */ 
         end; 
         
         else if (rc4 = 98) then 
         do; 
            /* Check: Lookup table has no rows-Write exception row  */ 
            /* Check: Lookup table has no rows-Set target columns to value  */ 
         end; 
         
         else 
         do; 
            /* Check: Lookup value not found-Set target columns to missing  */ 
            call missing (DEALSTATUS); 
            etls_assign_target_value = 1; 
         end; 
      end; 
      
      if (rc5 ^= 0) then 
      do; 
         exception_total + 1; 
         if (rc5 = 99) then 
         do; 
            /* Check: Lookup table missing-Write exception row  */ 
            /* Check: Lookup table missing-Set target columns to value  */ 
         end; 
         
         else if (rc5 = 98) then 
         do; 
            /* Check: Lookup table has no rows-Write exception row  */ 
            /* Check: Lookup table has no rows-Set target columns to value  */ 
         end; 
         
         else 
         do; 
            /* Check: Lookup value not found-Set target columns to missing  */ 
            call missing (INTERESTRATETYPE1); 
            etls_assign_target_value = 1; 
         end; 
      end; 
      
      /* Set target columns to value/missing requested?  */ 
      if (etls_assign_target_value eq 1) then 
         /* Write row to target  */ 
         output work.W1N4MI9NV; 
   
   end; /* One or more lookups failed */
   
   if (eof = 1) then 
   do; 
      put "Source records with errors: " error_total ; 
      put "Total lookup exceptions: " exception_total ; 
   end; 

run; 

%rcSet(&syserr); 



/**  Step end Lookup **/

/*==========================================================================* 
 * Step:            Lookup                                A5ELGGF9.AK0000X5 * 
 * Transform:       Lookup                                                  * 
 * Description:     Добавление атрибутов витрины                            * 
 *                                                                          * 
 * Source Tables:   Lookup - work.W1N4MI9NV               A5ELGGF9.AF0000CX * 
 *                  INTERESTRATESCHEDULE -                A5LX14I5.A900001D * 
 *                   DM_DRVT.INTERESTRATESCHEDULE                           * 
 *                  INTERESTRATEACCRUEDHIST -             A5LX14I5.A900001C * 
 *                   DM_DRVT.INTERESTRATEACCRUEDHIST                        * 
 *                  FAIRVALUE - DM_DRVT.FAIRVALUE         A5LX14I5.A9000016 * 
 *                  INSTRUMENTTYPE -                      A5LX14I5.A900001B * 
 *                   DM_DRVT.INSTRUMENTTYPE                                 * 
 *                  INTERESTRATETYPE -                    A5LX14I5.A900001E * 
 *                   DM_DRVT.INTERESTRATETYPE                               * 
 * Target Table:    Lookup - work.W22N7A824               A5ELGGF9.AF0000CY * 
 *==========================================================================*/ 

%let transformID = %quote(A5ELGGF9.AK0000X5);
%let trans_rc = 0;
%let etls_stepStartTime = %sysfunc(datetime(), datetime20.); 

%let etls_recCheckExist = 0; 
%let etls_recnt = 0; 
%macro etls_recordCheck; 
   %let etls_recCheckExist = %eval(%sysfunc(exist(work.W1N4MI9NV, DATA)) or 
         %sysfunc(exist(work.W1N4MI9NV, VIEW))); 
   
   %if (&etls_recCheckExist) %then
   %do;
      %local etls_syntaxcheck; 
      %let etls_syntaxcheck = %sysfunc(getoption(syntaxcheck)); 
      /* Turn off syntaxcheck option to perform following steps  */ 
      options nosyntaxcheck;
      
      proc contents data = work.W1N4MI9NV out = work.etls_contents(keep = nobs) noprint; 
      run; 
      
      data _null_; 
         set work.etls_contents (obs = 1); 
         call symput("etls_recnt", left(put(nobs,32.))); 
      run;
      
      proc datasets lib = work nolist nowarn memtype = (data view);
         delete etls_contents;
      quit;
      
      /* Reset syntaxcheck option to previous setting  */ 
      options &etls_syntaxcheck; 
   %end;
%mend etls_recordCheck;
%etls_recordCheck;

%let runTime = %sysfunc(datetime()); 

/* Creating view to eliminate column name collisions for lookup table  */ 
/*  DM_DRVT.INTERESTRATEACCRUEDHIST                                    */ 
proc datasets lib = work nolist nowarn memtype = (data view);
   delete etls_temp_lookupview1;
quit;

proc sql; create view etls_temp_lookupview1 as 
   select 
      FRONTKDEALID as ETLS_WJ2XWET,
      LEGNUMBER as ETLS_WJ2XWFD,
      OPERDATE,
      ACCRUEDINTEREST,
      DEALRK
   from DM_DRVT.INTERESTRATEACCRUEDHIST
   ;
quit;
/* Creating view to eliminate column name collisions for lookup table  */ 
/*  DM_DRVT.FAIRVALUE                                                  */ 
proc datasets lib = work nolist nowarn memtype = (data view);
   delete etls_temp_lookupview2;
quit;

proc sql; create view etls_temp_lookupview2 as 
   select 
      FRONTKDEALID as ETLS_WJ2XWFX,
      INSTRUMENTTYPECD,
      OPERDATE as ETLS_WJ2XWEU,
      FAIRVALUERUR,
      LEGNUMBER as ETLS_WJ2XWG7,
      DEALRK
   from DM_DRVT.FAIRVALUE
   ;
quit;
proc datasets lib = work nolist nowarn memtype = (data view);
   delete WJ2XWEZ;
quit;

/*---- Begin DATA step to perform lookups  ----*/ 
DATA  work.WJ2XWEZ
         (keep = DEAL_FRONTKDEALID DEAL_FRONTFDEALID DEAL_DEALDATE 
                 DEAL_INSTRUMENTTYPECD DEAL_DEALID1 DEAL_DEALID2 DEAL_INSTRUMENTTYPE 
                 DEAL_INSTRUMENTCLASS DEAL_FLAGDELIVERY DEAL_OPTIONTYPE DEAL_DEALSTATUS 
                 DEAL_INTERESTRATETYPECD DEAL_DEALRK DEAL_DEALGROUP DEAL_FLAGPFI 
                 DEAL_INSTRUMENTCLASSCD DEAL_FLAGDELIVERYCD DEAL_FLAGOTC 
                 DEAL_CUSTOMERNO DEAL_PREMIUM DEAL_PREMIUMCCY DEAL_OPTIONTYPECD 
                 DEAL_PREMIUMPAYMENTMODE DEAL_HEDGEINDICATOR DEAL_ORIGINALMATURITY 
                 DEAL_DEALSTATUSCD DEAL_DEALTYPE1 DEAL_DEALSUBTYPE1 DEAL_DEALDIRECTION1 
                 DEAL_PLACEDTAKEN1 DEAL_VALUEDATE1 DEAL_MATURITYDATE1 
                 DEAL_UNDERLYINGCCY1 DEAL_UNDERLYINGNAME1 DEAL_NOTIONALCURRENT1 
                 DEAL_PRICECCY1 DEAL_GROSSRATE1 DEAL_AMOUNT1 DEAL_CALCBASIS1 
                 DEAL_INTERESTRATE1 DEAL_INTERESTRATETYPECD1 DEAL_PAYMENTFREQUENCY1 
                 DEAL_STARTDATE1 DEAL_STARTPERIODDATE1 DEAL_NEXTPERIODDATE1 
                 DEAL_NEXTINTPAYMENTDATE1 DEAL_DCDFX_DEALID DEAL_DCDFX_TYPE 
                 DEAL_DCDFX_SUBTYPE DEAL_DEALTYPE2 DEAL_DEALSUBTYPE2 
                 DEAL_DEALDIRECTION2 DEAL_PLACEDTAKEN2 DEAL_VALUEDATE2 
                 DEAL_MATURITYDATE2 DEAL_UNDERLYINGCCY2 DEAL_UNDERLYINGNAME2 
                 DEAL_NOTIONALCURRENT2 DEAL_PRICECCY2 DEAL_GROSSRATE2 DEAL_AMOUNT2 
                 DEAL_CALCBASIS2 DEAL_INTERESTRATE2 DEAL_INTERESTRATETYPECD2 
                 DEAL_PAYMENTFREQUENCY2 DEAL_STARTDATE2 DEAL_STARTPERIODDATE2 
                 DEAL_NEXTPERIODDATE2 DEAL_NEXTINTPAYMENTDATE2 IRSCH_FRONTKDEALID 
                 IRSCH_LEGNUMBER IRSCH_SEQ IRSCH_STARTPERIODDATE IRSCH_ENDPERIODDATE 
                 IRSCH_INTERESTRATE IRSCH_NOTIONAL IRSCH_PAYMENTDATE IRSCH_FIXINGDATE 
                 IRSCH_SETTLEMENTPRICE IRSCH_ISEXECUTED IRAH_FRONTKDEALID 
                 IRAH_LEGNUMBER IRAH_OPERDATE IRAH_ACCRUEDINTEREST FV_FRONTKDEALID 
                 FV_INSTRUMENTTYPECD FV_OPERDATE FV_FAIRVALUERUR FV_LEGNUMBER 
                 FV_INSTRUMENTTYPE DEAL_INTERESTRATETYPE2 DEAL_INTERESTRATETYPE1 
                 FRONTKDEALID FRONTFDEALID DEALDATE INSTRUMENTTYPECD DEALID1 DEALID2 
                 INSTRUMENTTYPE INSTRUMENTCLASS FLAGDELIVERY OPTIONTYPE DEALSTATUS 
                 DEALRK DEALGROUP FLAGPFI INSTRUMENTCLASSCD FLAGDELIVERYCD FLAGOTC 
                 CUSTOMERNO PREMIUM PREMIUMCCY OPTIONTYPECD PREMIUMPAYMENTMODE 
                 HEDGEINDICATOR ORIGINALMATURITY DEALSTATUSCD DEALTYPE1 DEALSUBTYPE1 
                 DEALDIRECTION1 PLACEDTAKEN1 VALUEDATE1 MATURITYDATE1 UNDERLYINGCCY1 
                 UNDERLYINGNAME1 NOTIONALCURRENT1 PRICECCY1 GROSSRATE1 AMOUNT1 
                 CALCBASIS1 INTERESTRATE1 INTERESTRATETYPECD1 PAYMENTFREQUENCY1 
                 STARTDATE1 STARTPERIODDATE1 NEXTPERIODDATE1 NEXTINTPAYMENTDATE1 
                 DCDFX_DEALID DCDFX_TYPE DCDFX_SUBTYPE DEALTYPE2 DEALSUBTYPE2 
                 DEALDIRECTION2 PLACEDTAKEN2 VALUEDATE2 MATURITYDATE2 UNDERLYINGCCY2 
                 UNDERLYINGNAME2 NOTIONALCURRENT2 PRICECCY2 GROSSRATE2 AMOUNT2 
                 CALCBASIS2 INTERESTRATE2 INTERESTRATETYPECD2 PAYMENTFREQUENCY2 
                 STARTDATE2 STARTPERIODDATE2 NEXTPERIODDATE2 NEXTINTPAYMENTDATE2 
                 INTERESTRATETYPE1 )
      ; 
   
   attrib DEAL_FRONTKDEALID length=$10 format=$10. label="DEAL_FRONTKDEALID"
          DEAL_FRONTFDEALID length=$10 format=$10. label="DEAL_FRONTFDEALID"
          DEAL_DEALDATE length=8 format=DATETIME20. label="DEAL_DEALDATE"
          DEAL_INSTRUMENTTYPECD length=$32 format=$3. label="DEAL_INSTRUMENTTYPECD"
          DEAL_DEALID1 length=$32 format=$32. label="DEAL_DEALID1"
          DEAL_DEALID2 length=$32 format=$32. label="DEAL_DEALID2"
          DEAL_INSTRUMENTTYPE length=$100 format=$100. label="DEAL_INSTRUMENTTYPE"
          DEAL_INSTRUMENTCLASS length=$100 format=$100. label="DEAL_INSTRUMENTCLASS"
          DEAL_FLAGDELIVERY length=$100 format=$100. label="DEAL_FLAGDELIVERY"
          DEAL_OPTIONTYPE length=$100 format=$100. label="DEAL_OPTIONTYPE"
          DEAL_DEALSTATUS length=$100 format=$100. label="DEAL_DEALSTATUS"
          DEAL_INTERESTRATETYPECD length=$3 format=$3. label="DEAL_INTERESTRATETYPECD"
          DEAL_DEALRK length=8 format=11. label="DEAL_DEALRK"
          DEAL_DEALGROUP length=$32 format=$32. label="DEAL_DEALGROUP"
          DEAL_FLAGPFI length=$20 format=$20. label="DEAL_FLAGPFI"
          DEAL_INSTRUMENTCLASSCD length=$3 format=$3. label="DEAL_INSTRUMENTCLASSCD"
          DEAL_FLAGDELIVERYCD length=$3 format=$3. label="DEAL_FLAGDELIVERYCD"
          DEAL_FLAGOTC length=$3 format=$3. label="DEAL_FLAGOTC"
          DEAL_CUSTOMERNO length=$32 format=$32. label="DEAL_CUSTOMERNO"
          DEAL_PREMIUM length=8 format=20.5 label="DEAL_PREMIUM"
          DEAL_PREMIUMCCY length=$3 format=$3. label="DEAL_PREMIUMCCY"
          DEAL_OPTIONTYPECD length=$3 format=$3. label="DEAL_OPTIONTYPECD"
          DEAL_PREMIUMPAYMENTMODE length=$20 format=$20. label="DEAL_PREMIUMPAYMENTMODE"
          DEAL_HEDGEINDICATOR length=$10 format=$10. label="DEAL_HEDGEINDICATOR"
          DEAL_ORIGINALMATURITY length=8 format=19. label="DEAL_ORIGINALMATURITY"
          DEAL_DEALSTATUSCD length=$10 format=$10. label="DEAL_DEALSTATUSCD"
          DEAL_DEALTYPE1 length=$2 format=$2. label="DEAL_DEALTYPE1"
          DEAL_DEALSUBTYPE1 length=$2 format=$2. label="DEAL_DEALSUBTYPE1"
          DEAL_DEALDIRECTION1 length=$5 format=$5. label="DEAL_DEALDIRECTION1"
          DEAL_PLACEDTAKEN1 length=$10 format=$10. label="DEAL_PLACEDTAKEN1"
          DEAL_VALUEDATE1 length=8 format=DATETIME20. label="DEAL_VALUEDATE1"
          DEAL_MATURITYDATE1 length=8 format=DATETIME20. label="DEAL_MATURITYDATE1"
          DEAL_UNDERLYINGCCY1 length=$3 format=$3. label="DEAL_UNDERLYINGCCY1"
          DEAL_UNDERLYINGNAME1 length=$32 format=$32. label="DEAL_UNDERLYINGNAME1"
          DEAL_NOTIONALCURRENT1 length=8 format=20.5 label="DEAL_NOTIONALCURRENT1"
          DEAL_PRICECCY1 length=$3 format=$3. label="DEAL_PRICECCY1"
          DEAL_GROSSRATE1 length=8 format=20.5 label="DEAL_GROSSRATE1"
          DEAL_AMOUNT1 length=8 format=20.5 label="DEAL_AMOUNT1"
          DEAL_CALCBASIS1 length=$10 format=$10. label="DEAL_CALCBASIS1"
          DEAL_INTERESTRATE1 length=8 format=20.5 label="DEAL_INTERESTRATE1"
          DEAL_INTERESTRATETYPECD1 length=$3 format=$3. label="DEAL_INTERESTRATETYPECD1"
          DEAL_PAYMENTFREQUENCY1 length=$3 format=$3. label="DEAL_PAYMENTFREQUENCY1"
          DEAL_STARTDATE1 length=8 format=DATETIME20. label="DEAL_STARTDATE1"
          DEAL_STARTPERIODDATE1 length=8 format=DATETIME20. label="DEAL_STARTPERIODDATE1"
          DEAL_NEXTPERIODDATE1 length=8 format=DATETIME20. label="DEAL_NEXTPERIODDATE1"
          DEAL_NEXTINTPAYMENTDATE1 length=8 format=DATETIME20. label="DEAL_NEXTINTPAYMENTDATE1"
          DEAL_DCDFX_DEALID length=$32 format=$32. label="DEAL_DCDFX_DEALID"
          DEAL_DCDFX_TYPE length=$2 format=$2. label="DEAL_DCDFX_TYPE"
          DEAL_DCDFX_SUBTYPE length=$2 format=$2. label="DEAL_DCDFX_SUBTYPE"
          DEAL_DEALTYPE2 length=$2 format=$2. label="DEAL_DEALTYPE2"
          DEAL_DEALSUBTYPE2 length=$2 format=$2. label="DEAL_DEALSUBTYPE2"
          DEAL_DEALDIRECTION2 length=$10 format=$10. label="DEAL_DEALDIRECTION2"
          DEAL_PLACEDTAKEN2 length=$10 format=$10. label="DEAL_PLACEDTAKEN2"
          DEAL_VALUEDATE2 length=8 format=DATETIME20. label="DEAL_VALUEDATE2"
          DEAL_MATURITYDATE2 length=8 format=DATETIME20. label="DEAL_MATURITYDATE2"
          DEAL_UNDERLYINGCCY2 length=$3 format=$3. label="DEAL_UNDERLYINGCCY2"
          DEAL_UNDERLYINGNAME2 length=$32 format=$32. label="DEAL_UNDERLYINGNAME2"
          DEAL_NOTIONALCURRENT2 length=8 format=20.5 label="DEAL_NOTIONALCURRENT2"
          DEAL_PRICECCY2 length=$3 format=$3. label="DEAL_PRICECCY2"
          DEAL_GROSSRATE2 length=8 format=20.5 label="DEAL_GROSSRATE2"
          DEAL_AMOUNT2 length=8 format=20.5 label="DEAL_AMOUNT2"
          DEAL_CALCBASIS2 length=$10 format=$10. label="DEAL_CALCBASIS2"
          DEAL_INTERESTRATE2 length=8 format=20.5 label="DEAL_INTERESTRATE2"
          DEAL_INTERESTRATETYPECD2 length=$3 format=$3. label="DEAL_INTERESTRATETYPECD2"
          DEAL_PAYMENTFREQUENCY2 length=$3 format=$3. label="DEAL_PAYMENTFREQUENCY2"
          DEAL_STARTDATE2 length=8 format=DATETIME20. label="DEAL_STARTDATE2"
          DEAL_STARTPERIODDATE2 length=8 format=DATETIME20. label="DEAL_STARTPERIODDATE2"
          DEAL_NEXTPERIODDATE2 length=8 format=DATETIME20. label="DEAL_NEXTPERIODDATE2"
          DEAL_NEXTINTPAYMENTDATE2 length=8 format=DATETIME20. label="DEAL_NEXTINTPAYMENTDATE2"
          IRSCH_FRONTKDEALID length=$10 format=$10. label="IRSCH_FRONTKDEALID"
          IRSCH_LEGNUMBER length=$1 format=$1. label="IRSCH_LEGNUMBER"
          IRSCH_SEQ length=8 format=19. label="IRSCH_SEQ"
          IRSCH_STARTPERIODDATE length=8 format=DATETIME20. label="IRSCH_STARTPERIODDATE"
          IRSCH_ENDPERIODDATE length=8 format=DATETIME20. label="IRSCH_ENDPERIODDATE"
          IRSCH_INTERESTRATE length=8 format=18.7 label="IRSCH_INTERESTRATE"
          IRSCH_NOTIONAL length=8 format=20.5 label="IRSCH_NOTIONAL"
          IRSCH_PAYMENTDATE length=8 format=DATETIME20. label="IRSCH_PAYMENTDATE"
          IRSCH_FIXINGDATE length=8 format=DATETIME20. label="IRSCH_FIXINGDATE"
          IRSCH_SETTLEMENTPRICE length=8 format=18.7 label="IRSCH_SETTLEMENTPRICE"
          IRSCH_ISEXECUTED length=$1 format=$1. label="IRSCH_ISEXECUTED"
          IRAH_FRONTKDEALID length=$10 format=$10. label="IRAH_FRONTKDEALID"
          IRAH_LEGNUMBER length=$1 format=$1. label="IRAH_LEGNUMBER"
          IRAH_OPERDATE length=8 format=DATETIME20. label="IRAH_OPERDATE"
          IRAH_ACCRUEDINTEREST length=8 format=18.5 label="IRAH_ACCRUEDINTEREST"
          FV_FRONTKDEALID length=$10 format=$10. label="FV_FRONTKDEALID"
          FV_INSTRUMENTTYPECD length=$32 format=$32. label="FV_INSTRUMENTTYPECD"
          FV_OPERDATE length=8 format=DATETIME20. label="FV_OPERDATE"
          FV_FAIRVALUERUR length=8 format=20.5 label="FV_FAIRVALUERUR"
          FV_LEGNUMBER length=$1 format=$1. label="FV_LEGNUMBER"
          FV_INSTRUMENTTYPE length=$100 format=$100. label="FV_INSTRUMENTTYPE"
          DEAL_INTERESTRATETYPE2 length=$100 format=$100. label="INTERESTRATETYPE"
          DEAL_INTERESTRATETYPE1 length=$100 format=$100. label="INTERESTRATETYPE"
          FRONTKDEALID length= $10
          LEGNUMBER length= $1
          SEQ length= 8
          STARTPERIODDATE length= 8
          ENDPERIODDATE length= 8
          INTERESTRATE length= 8
          NOTIONAL length= 8
          PAYMENTDATE length= 8
          FIXINGDATE length= 8
          SETTLEMENTPRICE length= 8
          ISEXECUTED length= $1
          DEALRK length= 8
          ETLS_WJ2XWET length= $10
          ETLS_WJ2XWFD length= $1
          OPERDATE length= 8
          ACCRUEDINTEREST length= 8
          ETLS_WJ2XWFX length= $10
          INSTRUMENTTYPECD length= $32
          ETLS_WJ2XWEU length= 8
          FAIRVALUERUR length= 8
          ETLS_WJ2XWG7 length= $1
          INSTRUMENTTYPE length= $100
          INTERESTRATETYPE length= $100
          INTERESTRATETYPECD length= $3
          ; 
   
   retain missing0-missing4 0; 
   
   etls_assign_target_value = 0; 
   /* Build hash objects from lookup tables before reading first source row  */ 
   if (_n_ = 1) then 
   do; 
      /* Build hash h0 from lookup table DM_DRVT.INTERESTRATESCHEDULE */ 
      nlobs = .; 
      dsid = open("DM_DRVT.INTERESTRATESCHEDULE"); 
      if (dsid > 0) then 
      do; 
         if ( attrc(dsid, 'MTYPE') = 'DATA' ) then 
            nlobs = attrn(dsid, 'NLOBS'); 
         else 
            nlobs = -1; 
            
         dsid = close(dsid); 
         if (nlobs ^= 0) then 
         do; 
            if (nlobs > 0) then 
               exponent = ceil(log2(nlobs)); 
            else 
               exponent = 8; 
            declare hash h0(dataset: "DM_DRVT.INTERESTRATESCHEDULE", hashexp: exponent);
            h0.defineKey( "DEALRK");
            h0.defineData( "FRONTKDEALID",
                           "LEGNUMBER",
                           "SEQ",
                           "STARTPERIODDATE",
                           "ENDPERIODDATE",
                           "INTERESTRATE",
                           "NOTIONAL",
                           "PAYMENTDATE",
                           "FIXINGDATE",
                           "SETTLEMENTPRICE",
                           "ISEXECUTED");
            h0.defineDone();
            if (nlobs = -1) then 
            do; 
               if (h0.Num_Items < 1) then
               do; 
                  put "NOTE: Lookup table is empty: DM_DRVT.INTERESTRATESCHEDULE";
                  missing0 = 98; 
               end; 
            end; 
         end; 
         else 
         do; 
            put "NOTE: Lookup table is empty: DM_DRVT.INTERESTRATESCHEDULE";
            missing0 = 98; 
         end; 
      end; 
      else 
      do; 
         put "NOTE: Lookup table does not exist or cannot be opened:"
              " DM_DRVT.INTERESTRATESCHEDULE";
         
         missing0 = 99; 
      end; 
      
      /* Build hash h1 from lookup table etls_temp_lookupview1 */ 
      nlobs = .; 
      dsid = open("etls_temp_lookupview1"); 
      if (dsid > 0) then 
      do; 
         if ( attrc(dsid, 'MTYPE') = 'DATA' ) then 
            nlobs = attrn(dsid, 'NLOBS'); 
         else 
            nlobs = -1; 
            
         dsid = close(dsid); 
         if (nlobs ^= 0) then 
         do; 
            if (nlobs > 0) then 
               exponent = ceil(log2(nlobs)); 
            else 
               exponent = 8; 
            declare hash h1(dataset: "etls_temp_lookupview1", hashexp: exponent);
            h1.defineKey( "DEALRK");
            h1.defineData( "ETLS_WJ2XWET",
                           "ETLS_WJ2XWFD",
                           "OPERDATE",
                           "ACCRUEDINTEREST");
            h1.defineDone();
            if (nlobs = -1) then 
            do; 
               if (h1.Num_Items < 1) then
               do; 
                  put "NOTE: Lookup table is empty: etls_temp_lookupview1";
                  missing1 = 98; 
               end; 
            end; 
         end; 
         else 
         do; 
            put "NOTE: Lookup table is empty: etls_temp_lookupview1";
            missing1 = 98; 
         end; 
      end; 
      else 
      do; 
         put "NOTE: Lookup table does not exist or cannot be opened:"
              " etls_temp_lookupview1";
         
         missing1 = 99; 
      end; 
      
      /* Build hash h2 from lookup table etls_temp_lookupview2 */ 
      nlobs = .; 
      dsid = open("etls_temp_lookupview2"); 
      if (dsid > 0) then 
      do; 
         if ( attrc(dsid, 'MTYPE') = 'DATA' ) then 
            nlobs = attrn(dsid, 'NLOBS'); 
         else 
            nlobs = -1; 
            
         dsid = close(dsid); 
         if (nlobs ^= 0) then 
         do; 
            if (nlobs > 0) then 
               exponent = ceil(log2(nlobs)); 
            else 
               exponent = 8; 
            declare hash h2(dataset: "etls_temp_lookupview2", hashexp: exponent);
            h2.defineKey( "DEALRK");
            h2.defineData( "ETLS_WJ2XWFX",
                           "INSTRUMENTTYPECD",
                           "ETLS_WJ2XWEU",
                           "FAIRVALUERUR",
                           "ETLS_WJ2XWG7");
            h2.defineDone();
            if (nlobs = -1) then 
            do; 
               if (h2.Num_Items < 1) then
               do; 
                  put "NOTE: Lookup table is empty: etls_temp_lookupview2";
                  missing2 = 98; 
               end; 
            end; 
         end; 
         else 
         do; 
            put "NOTE: Lookup table is empty: etls_temp_lookupview2";
            missing2 = 98; 
         end; 
      end; 
      else 
      do; 
         put "NOTE: Lookup table does not exist or cannot be opened:"
              " etls_temp_lookupview2";
         
         missing2 = 99; 
      end; 
      
      /* Build hash h3 from lookup table DM_DRVT.INSTRUMENTTYPE */ 
      nlobs = .; 
      dsid = open("DM_DRVT.INSTRUMENTTYPE"); 
      if (dsid > 0) then 
      do; 
         if ( attrc(dsid, 'MTYPE') = 'DATA' ) then 
            nlobs = attrn(dsid, 'NLOBS'); 
         else 
            nlobs = -1; 
            
         dsid = close(dsid); 
         if (nlobs ^= 0) then 
         do; 
            if (nlobs > 0) then 
               exponent = ceil(log2(nlobs)); 
            else 
               exponent = 8; 
            declare hash h3(dataset: "DM_DRVT.INSTRUMENTTYPE", hashexp: exponent);
            h3.defineKey( "INSTRUMENTTYPECD");
            h3.defineData( "INSTRUMENTTYPE");
            h3.defineDone();
            if (nlobs = -1) then 
            do; 
               if (h3.Num_Items < 1) then
               do; 
                  put "NOTE: Lookup table is empty: DM_DRVT.INSTRUMENTTYPE";
                  missing3 = 98; 
               end; 
            end; 
         end; 
         else 
         do; 
            put "NOTE: Lookup table is empty: DM_DRVT.INSTRUMENTTYPE";
            missing3 = 98; 
         end; 
      end; 
      else 
      do; 
         put "NOTE: Lookup table does not exist or cannot be opened:"
              " DM_DRVT.INSTRUMENTTYPE";
         
         missing3 = 99; 
      end; 
      
      /* Build hash h4 from lookup table DM_DRVT.INTERESTRATETYPE */ 
      nlobs = .; 
      dsid = open("DM_DRVT.INTERESTRATETYPE"); 
      if (dsid > 0) then 
      do; 
         if ( attrc(dsid, 'MTYPE') = 'DATA' ) then 
            nlobs = attrn(dsid, 'NLOBS'); 
         else 
            nlobs = -1; 
            
         dsid = close(dsid); 
         if (nlobs ^= 0) then 
         do; 
            if (nlobs > 0) then 
               exponent = ceil(log2(nlobs)); 
            else 
               exponent = 8; 
            declare hash h4(dataset: "DM_DRVT.INTERESTRATETYPE", hashexp: exponent);
            h4.defineKey( "INTERESTRATETYPECD");
            h4.defineData( "INTERESTRATETYPE");
            h4.defineDone();
            if (nlobs = -1) then 
            do; 
               if (h4.Num_Items < 1) then
               do; 
                  put "NOTE: Lookup table is empty: DM_DRVT.INTERESTRATETYPE";
                  missing4 = 98; 
               end; 
            end; 
         end; 
         else 
         do; 
            put "NOTE: Lookup table is empty: DM_DRVT.INTERESTRATETYPE";
            missing4 = 98; 
         end; 
      end; 
      else 
      do; 
         put "NOTE: Lookup table does not exist or cannot be opened:"
              " DM_DRVT.INTERESTRATETYPE";
         
         missing4 = 99; 
      end; 
      
      call missing (DEALRK, FRONTKDEALID, LEGNUMBER, SEQ, STARTPERIODDATE, 
                    ENDPERIODDATE, INTERESTRATE, NOTIONAL, PAYMENTDATE, FIXINGDATE, 
                    SETTLEMENTPRICE, ISEXECUTED, ETLS_WJ2XWET, ETLS_WJ2XWFD, 
                    OPERDATE, ACCRUEDINTEREST, ETLS_WJ2XWFX, INSTRUMENTTYPECD, 
                    ETLS_WJ2XWEU, FAIRVALUERUR, ETLS_WJ2XWG7, INSTRUMENTTYPE, 
                    INTERESTRATETYPECD, INTERESTRATETYPE); 
   
   end; /* All hash objects have been defined */
   
   /* Read a row from the source table  */ 
   set work.W1N4MI9NV end = eof;
   
   /* Is the current key value stored in hash h0?  */ 
   if (missing0 < 1) then 
   do; 
      rc0 = h0.find(key: DEALRK);
      IRSCH_FRONTKDEALID = FRONTKDEALID;
      IRSCH_LEGNUMBER = LEGNUMBER;
      IRSCH_SEQ = SEQ;
      IRSCH_STARTPERIODDATE = STARTPERIODDATE;
      IRSCH_ENDPERIODDATE = ENDPERIODDATE;
      IRSCH_INTERESTRATE = INTERESTRATE;
      IRSCH_NOTIONAL = NOTIONAL;
      IRSCH_PAYMENTDATE = PAYMENTDATE;
      IRSCH_FIXINGDATE = FIXINGDATE;
      IRSCH_SETTLEMENTPRICE = SETTLEMENTPRICE;
      IRSCH_ISEXECUTED = ISEXECUTED;
   end; 
   else 
      rc0 = missing0; 
      
   /* Is the current key value stored in hash h1?  */ 
   if (missing1 < 1) then 
   do; 
      rc1 = h1.find(key: DEALRK);
      IRAH_FRONTKDEALID = ETLS_WJ2XWET;
      IRAH_LEGNUMBER = ETLS_WJ2XWFD;
      IRAH_OPERDATE = OPERDATE;
      IRAH_ACCRUEDINTEREST = ACCRUEDINTEREST;
   end; 
   else 
      rc1 = missing1; 
      
   /* Is the current key value stored in hash h2?  */ 
   if (missing2 < 1) then 
   do; 
      rc2 = h2.find(key: DEALRK);
      FV_FRONTKDEALID = ETLS_WJ2XWFX;
      FV_INSTRUMENTTYPECD = INSTRUMENTTYPECD;
      FV_OPERDATE = ETLS_WJ2XWEU;
      FV_FAIRVALUERUR = FAIRVALUERUR;
      FV_LEGNUMBER = ETLS_WJ2XWG7;
   end; 
   else 
      rc2 = missing2; 
      
   /* Is the current key value stored in hash h3?  */ 
   if (missing3 < 1) then 
   do; 
      rc3 = h3.find(key: INSTRUMENTTYPECD);
      FV_INSTRUMENTTYPE = INSTRUMENTTYPE;
   end; 
   else 
      rc3 = missing3; 
      
   /* Is the current key value stored in hash h4?  */ 
   if (missing4 < 1) then 
   do; 
      rc4 = h4.find(key: INTERESTRATETYPECD2);
      DEAL_INTERESTRATETYPE2 = INTERESTRATETYPE;
   end; 
   else 
      rc4 = missing4; 
      
   /* Examine success of lookups  */ 
   if ( rc0=0 and rc1=0 and rc2=0 and rc3=0 and rc4=0 ) then 
   do; 
      /* Write row to target  */ 
      output work.WJ2XWEZ; 
   end; 
   else 
   do; 
      error_total + 1; 
      
      if (rc0 ^= 0) then 
      do; 
         exception_total + 1; 
         if (rc0 = 99) then 
         do; 
            /* Check: Lookup table missing-Write exception row  */ 
            /* Check: Lookup table missing-Set target columns to value  */ 
         end; 
         
         else if (rc0 = 98) then 
         do; 
            /* Check: Lookup table has no rows-Write exception row  */ 
            /* Check: Lookup table has no rows-Set target columns to value  */ 
         end; 
         
         else 
         do; 
            /* Check: Lookup value not found-Set target columns to missing  */ 
            call missing (IRSCH_FRONTKDEALID, IRSCH_LEGNUMBER, IRSCH_SEQ, 
                          IRSCH_STARTPERIODDATE, IRSCH_ENDPERIODDATE, IRSCH_INTERESTRATE, 
                          IRSCH_NOTIONAL, IRSCH_PAYMENTDATE, IRSCH_FIXINGDATE, 
                          IRSCH_SETTLEMENTPRICE, IRSCH_ISEXECUTED); 
            etls_assign_target_value = 1; 
         end; 
      end; 
      
      if (rc1 ^= 0) then 
      do; 
         exception_total + 1; 
         if (rc1 = 99) then 
         do; 
            /* Check: Lookup table missing-Write exception row  */ 
            /* Check: Lookup table missing-Set target columns to value  */ 
         end; 
         
         else if (rc1 = 98) then 
         do; 
            /* Check: Lookup table has no rows-Write exception row  */ 
            /* Check: Lookup table has no rows-Set target columns to value  */ 
         end; 
         
         else 
         do; 
            /* Check: Lookup value not found-Set target columns to missing  */ 
            call missing (IRAH_FRONTKDEALID, IRAH_LEGNUMBER, IRAH_OPERDATE, 
                          IRAH_ACCRUEDINTEREST); 
            etls_assign_target_value = 1; 
         end; 
      end; 
      
      if (rc2 ^= 0) then 
      do; 
         exception_total + 1; 
         if (rc2 = 99) then 
         do; 
            /* Check: Lookup table missing-Write exception row  */ 
            /* Check: Lookup table missing-Set target columns to value  */ 
         end; 
         
         else if (rc2 = 98) then 
         do; 
            /* Check: Lookup table has no rows-Write exception row  */ 
            /* Check: Lookup table has no rows-Set target columns to value  */ 
         end; 
         
         else 
         do; 
            /* Check: Lookup value not found-Set target columns to missing  */ 
            call missing (FV_FRONTKDEALID, FV_INSTRUMENTTYPECD, FV_OPERDATE, 
                          FV_FAIRVALUERUR, FV_LEGNUMBER); 
            etls_assign_target_value = 1; 
         end; 
      end; 
      
      if (rc3 ^= 0) then 
      do; 
         exception_total + 1; 
         if (rc3 = 99) then 
         do; 
            /* Check: Lookup table missing-Write exception row  */ 
            /* Check: Lookup table missing-Set target columns to value  */ 
         end; 
         
         else if (rc3 = 98) then 
         do; 
            /* Check: Lookup table has no rows-Write exception row  */ 
            /* Check: Lookup table has no rows-Set target columns to value  */ 
         end; 
         
         else 
         do; 
            /* Check: Lookup value not found-Set target columns to missing  */ 
            call missing (FV_INSTRUMENTTYPE); 
            etls_assign_target_value = 1; 
         end; 
      end; 
      
      if (rc4 ^= 0) then 
      do; 
         exception_total + 1; 
         if (rc4 = 99) then 
         do; 
            /* Check: Lookup table missing-Write exception row  */ 
            /* Check: Lookup table missing-Set target columns to value  */ 
         end; 
         
         else if (rc4 = 98) then 
         do; 
            /* Check: Lookup table has no rows-Write exception row  */ 
            /* Check: Lookup table has no rows-Set target columns to value  */ 
         end; 
         
         else 
         do; 
            /* Check: Lookup value not found-Set target columns to missing  */ 
            call missing (DEAL_INTERESTRATETYPE2); 
            etls_assign_target_value = 1; 
         end; 
      end; 
      
      /* Set target columns to value/missing requested?  */ 
      if (etls_assign_target_value eq 1) then 
         /* Write row to target  */ 
         output work.WJ2XWEZ; 
   
   end; /* One or more lookups failed */
   
   if (eof = 1) then 
   do; 
      put "Source records with errors: " error_total ; 
      put "Total lookup exceptions: " exception_total ; 
   end; 

run; 

%rcSet(&syserr); 

/*---- Map the columns  ----*/ 
proc datasets lib = work nolist nowarn memtype = (data view);
   delete W22N7A824;
quit;

data _null_;
   put "NOTE: The following column(s) do not have a column mapping, so the"
        " value(s) will be set to missing: DEAL_INTERESTRATETYPECD";
run;

%put %str(NOTE: Mapping columns ...);
proc sql;
   create table work.W22N7A824 as
      select
         FRONTKDEALID as DEAL_FRONTKDEALID   
            label = 'DEAL_FRONTKDEALID',
         FRONTFDEALID as DEAL_FRONTFDEALID   
            label = 'DEAL_FRONTFDEALID',
         DEALDATE as DEAL_DEALDATE   
            label = 'DEAL_DEALDATE',
         INSTRUMENTTYPECD as DEAL_INSTRUMENTTYPECD length = 32   
            label = 'DEAL_INSTRUMENTTYPECD',
         DEALID1 as DEAL_DEALID1   
            label = 'DEAL_DEALID1',
         DEALID2 as DEAL_DEALID2   
            label = 'DEAL_DEALID2',
         INSTRUMENTTYPE as DEAL_INSTRUMENTTYPE   
            label = 'DEAL_INSTRUMENTTYPE',
         INSTRUMENTCLASS as DEAL_INSTRUMENTCLASS   
            label = 'DEAL_INSTRUMENTCLASS',
         FLAGDELIVERY as DEAL_FLAGDELIVERY   
            label = 'DEAL_FLAGDELIVERY',
         OPTIONTYPE as DEAL_OPTIONTYPE   
            label = 'DEAL_OPTIONTYPE',
         DEALSTATUS as DEAL_DEALSTATUS   
            label = 'DEAL_DEALSTATUS',
         "" as DEAL_INTERESTRATETYPECD length = 3
            format = $3.
            label = 'DEAL_INTERESTRATETYPECD',
         DEALRK as DEAL_DEALRK   
            label = 'DEAL_DEALRK',
         DEALGROUP as DEAL_DEALGROUP   
            label = 'DEAL_DEALGROUP',
         FLAGPFI as DEAL_FLAGPFI   
            label = 'DEAL_FLAGPFI',
         INSTRUMENTCLASSCD as DEAL_INSTRUMENTCLASSCD   
            label = 'DEAL_INSTRUMENTCLASSCD',
         FLAGDELIVERYCD as DEAL_FLAGDELIVERYCD   
            label = 'DEAL_FLAGDELIVERYCD',
         FLAGOTC as DEAL_FLAGOTC   
            label = 'DEAL_FLAGOTC',
         CUSTOMERNO as DEAL_CUSTOMERNO   
            label = 'DEAL_CUSTOMERNO',
         PREMIUM as DEAL_PREMIUM   
            label = 'DEAL_PREMIUM',
         PREMIUMCCY as DEAL_PREMIUMCCY   
            label = 'DEAL_PREMIUMCCY',
         OPTIONTYPECD as DEAL_OPTIONTYPECD   
            label = 'DEAL_OPTIONTYPECD',
         PREMIUMPAYMENTMODE as DEAL_PREMIUMPAYMENTMODE   
            label = 'DEAL_PREMIUMPAYMENTMODE',
         HEDGEINDICATOR as DEAL_HEDGEINDICATOR   
            label = 'DEAL_HEDGEINDICATOR',
         ORIGINALMATURITY as DEAL_ORIGINALMATURITY   
            label = 'DEAL_ORIGINALMATURITY',
         DEALSTATUSCD as DEAL_DEALSTATUSCD   
            label = 'DEAL_DEALSTATUSCD',
         DEALTYPE1 as DEAL_DEALTYPE1   
            label = 'DEAL_DEALTYPE1',
         DEALSUBTYPE1 as DEAL_DEALSUBTYPE1   
            label = 'DEAL_DEALSUBTYPE1',
         DEALDIRECTION1 as DEAL_DEALDIRECTION1   
            label = 'DEAL_DEALDIRECTION1',
         PLACEDTAKEN1 as DEAL_PLACEDTAKEN1   
            label = 'DEAL_PLACEDTAKEN1',
         VALUEDATE1 as DEAL_VALUEDATE1   
            label = 'DEAL_VALUEDATE1',
         MATURITYDATE1 as DEAL_MATURITYDATE1   
            label = 'DEAL_MATURITYDATE1',
         UNDERLYINGCCY1 as DEAL_UNDERLYINGCCY1   
            label = 'DEAL_UNDERLYINGCCY1',
         UNDERLYINGNAME1 as DEAL_UNDERLYINGNAME1   
            label = 'DEAL_UNDERLYINGNAME1',
         NOTIONALCURRENT1 as DEAL_NOTIONALCURRENT1   
            label = 'DEAL_NOTIONALCURRENT1',
         PRICECCY1 as DEAL_PRICECCY1   
            label = 'DEAL_PRICECCY1',
         GROSSRATE1 as DEAL_GROSSRATE1   
            label = 'DEAL_GROSSRATE1',
         AMOUNT1 as DEAL_AMOUNT1   
            label = 'DEAL_AMOUNT1',
         CALCBASIS1 as DEAL_CALCBASIS1   
            label = 'DEAL_CALCBASIS1',
         INTERESTRATE1 as DEAL_INTERESTRATE1   
            label = 'DEAL_INTERESTRATE1',
         INTERESTRATETYPECD1 as DEAL_INTERESTRATETYPECD1   
            label = 'DEAL_INTERESTRATETYPECD1',
         PAYMENTFREQUENCY1 as DEAL_PAYMENTFREQUENCY1   
            label = 'DEAL_PAYMENTFREQUENCY1',
         STARTDATE1 as DEAL_STARTDATE1   
            label = 'DEAL_STARTDATE1',
         STARTPERIODDATE1 as DEAL_STARTPERIODDATE1   
            label = 'DEAL_STARTPERIODDATE1',
         NEXTPERIODDATE1 as DEAL_NEXTPERIODDATE1   
            label = 'DEAL_NEXTPERIODDATE1',
         NEXTINTPAYMENTDATE1 as DEAL_NEXTINTPAYMENTDATE1   
            label = 'DEAL_NEXTINTPAYMENTDATE1',
         DCDFX_DEALID as DEAL_DCDFX_DEALID   
            label = 'DEAL_DCDFX_DEALID',
         DCDFX_TYPE as DEAL_DCDFX_TYPE   
            label = 'DEAL_DCDFX_TYPE',
         DCDFX_SUBTYPE as DEAL_DCDFX_SUBTYPE   
            label = 'DEAL_DCDFX_SUBTYPE',
         DEALTYPE2 as DEAL_DEALTYPE2   
            label = 'DEAL_DEALTYPE2',
         DEALSUBTYPE2 as DEAL_DEALSUBTYPE2   
            label = 'DEAL_DEALSUBTYPE2',
         DEALDIRECTION2 as DEAL_DEALDIRECTION2   
            label = 'DEAL_DEALDIRECTION2',
         PLACEDTAKEN2 as DEAL_PLACEDTAKEN2   
            label = 'DEAL_PLACEDTAKEN2',
         VALUEDATE2 as DEAL_VALUEDATE2   
            label = 'DEAL_VALUEDATE2',
         MATURITYDATE2 as DEAL_MATURITYDATE2   
            label = 'DEAL_MATURITYDATE2',
         UNDERLYINGCCY2 as DEAL_UNDERLYINGCCY2   
            label = 'DEAL_UNDERLYINGCCY2',
         UNDERLYINGNAME2 as DEAL_UNDERLYINGNAME2   
            label = 'DEAL_UNDERLYINGNAME2',
         NOTIONALCURRENT2 as DEAL_NOTIONALCURRENT2   
            label = 'DEAL_NOTIONALCURRENT2',
         PRICECCY2 as DEAL_PRICECCY2   
            label = 'DEAL_PRICECCY2',
         GROSSRATE2 as DEAL_GROSSRATE2   
            label = 'DEAL_GROSSRATE2',
         AMOUNT2 as DEAL_AMOUNT2   
            label = 'DEAL_AMOUNT2',
         CALCBASIS2 as DEAL_CALCBASIS2   
            label = 'DEAL_CALCBASIS2',
         INTERESTRATE2 as DEAL_INTERESTRATE2   
            label = 'DEAL_INTERESTRATE2',
         INTERESTRATETYPECD2 as DEAL_INTERESTRATETYPECD2   
            label = 'DEAL_INTERESTRATETYPECD2',
         PAYMENTFREQUENCY2 as DEAL_PAYMENTFREQUENCY2   
            label = 'DEAL_PAYMENTFREQUENCY2',
         STARTDATE2 as DEAL_STARTDATE2   
            label = 'DEAL_STARTDATE2',
         STARTPERIODDATE2 as DEAL_STARTPERIODDATE2   
            label = 'DEAL_STARTPERIODDATE2',
         NEXTPERIODDATE2 as DEAL_NEXTPERIODDATE2   
            label = 'DEAL_NEXTPERIODDATE2',
         NEXTINTPAYMENTDATE2 as DEAL_NEXTINTPAYMENTDATE2   
            label = 'DEAL_NEXTINTPAYMENTDATE2',
         IRSCH_FRONTKDEALID,
         IRSCH_LEGNUMBER,
         IRSCH_SEQ,
         IRSCH_STARTPERIODDATE,
         IRSCH_ENDPERIODDATE,
         IRSCH_INTERESTRATE,
         IRSCH_NOTIONAL,
         IRSCH_PAYMENTDATE,
         IRSCH_FIXINGDATE,
         IRSCH_SETTLEMENTPRICE,
         IRSCH_ISEXECUTED,
         IRAH_FRONTKDEALID,
         IRAH_LEGNUMBER,
         IRAH_OPERDATE,
         IRAH_ACCRUEDINTEREST,
         FV_FRONTKDEALID,
         FV_INSTRUMENTTYPECD,
         FV_OPERDATE,
         FV_FAIRVALUERUR,
         FV_LEGNUMBER,
         FV_INSTRUMENTTYPE,
         DEAL_INTERESTRATETYPE2,
         INTERESTRATETYPE1 as DEAL_INTERESTRATETYPE1
   from work.WJ2XWEZ
   ;
quit;

%let SYSLAST = work.W22N7A824;

proc datasets lib = work nolist nowarn memtype = (data view);
   delete WJ2XWEZ;
quit;



/**  Step end Lookup **/

/*==========================================================================* 
 * Step:            User Written                          A5ELGGF9.AK0000X6 * 
 * Transform:       User Written                                            * 
 * Description:     Проверка условий DQ                                     * 
 *                                                                          * 
 * Source Table:    Lookup - work.W22N7A824               A5ELGGF9.AF0000CY * 
 * Target Table:    User Written - work.W1KBT2DCD         A5ELGGF9.AF0000CZ * 
 *                                                                          * 
 * User Written:    SourceCode                                              * 
 *==========================================================================*/ 

%let transformID = %quote(A5ELGGF9.AK0000X6);
%let trans_rc = 0;
%let etls_stepStartTime = %sysfunc(datetime(), datetime20.); 

%let etls_recCheckExist = 0; 
%let etls_recnt = 0; 
%macro etls_recordCheck; 
   %let etls_recCheckExist = %eval(%sysfunc(exist(work.W22N7A824, DATA)) or 
         %sysfunc(exist(work.W22N7A824, VIEW))); 
   
   %if (&etls_recCheckExist) %then
   %do;
      %local etls_syntaxcheck; 
      %let etls_syntaxcheck = %sysfunc(getoption(syntaxcheck)); 
      /* Turn off syntaxcheck option to perform following steps  */ 
      options nosyntaxcheck;
      
      proc contents data = work.W22N7A824 out = work.etls_contents(keep = nobs) noprint; 
      run; 
      
      data _null_; 
         set work.etls_contents (obs = 1); 
         call symput("etls_recnt", left(put(nobs,32.))); 
      run;
      
      proc datasets lib = work nolist nowarn memtype = (data view);
         delete etls_contents;
      quit;
      
      /* Reset syntaxcheck option to previous setting  */ 
      options &etls_syntaxcheck; 
   %end;
%mend etls_recordCheck;
%etls_recordCheck;

%let SYSLAST = %nrquote(work.W22N7A824); 

%let _INPUT_count = 1;
%let _INPUT = work.W22N7A824;
%let _INPUT_connect = ;
%let _INPUT_engine = ;
%let _INPUT_memtype = DATA;
%let _INPUT_options = %nrquote();
%let _INPUT_alter = %nrquote();
%let _INPUT_path = %nrquote(/Lookup_A5ELGGF9.AF0000CY%(WorkTable%));
%let _INPUT_type = 1;
%let _INPUT_label = %nrquote();

%let _INPUT1 = work.W22N7A824;
%let _INPUT1_connect = ;
%let _INPUT1_engine = ;
%let _INPUT1_memtype = DATA;
%let _INPUT1_options = %nrquote();
%let _INPUT1_alter = %nrquote();
%let _INPUT1_path = %nrquote(/Lookup_A5ELGGF9.AF0000CY%(WorkTable%));
%let _INPUT1_type = 1;
%let _INPUT1_label = %nrquote();

%let _OUTPUT_count = 1;
%let _OUTPUT = work.W1KBT2DCD;
%let _OUTPUT_connect = ;
%let _OUTPUT_engine = ;
%let _OUTPUT_memtype = DATA;
%let _OUTPUT_options = %nrquote();
%let _OUTPUT_alter = %nrquote();
%let _OUTPUT_path = %nrquote(/User Written_A5ELGGF9.AF0000CZ%(WorkTable%));
%let _OUTPUT_type = 1;
%let _OUTPUT_label = %nrquote();
/* List of target columns to keep  */ 
%let _OUTPUT_keep = DEALRK REPORTCODE REPORTDATE FRONTKDEALID FRONTFDEALID DEALID 
        INSTRUMENTTYPECD DEALDATE ADDITIONALINFORMATION;
%let _OUTPUT_col_count = 9;
%let _OUTPUT_col0_name = DEALRK;
%let _OUTPUT_col0_table = work.W1KBT2DCD;
%let _OUTPUT_col0_length = 8;
%let _OUTPUT_col0_type = ;
%let _OUTPUT_col0_format = 11.;
%let _OUTPUT_col0_informat = 11.;
%let _OUTPUT_col0_label = %nrquote(DEAL_DEALRK);
%let _OUTPUT_col0_input0 = DEAL_DEALRK;
%let _OUTPUT_col0_exp = ;
%let _OUTPUT_col0_input = DEAL_DEALRK;
%let _OUTPUT_col0_input_count = 1;
%let _OUTPUT_col1_name = REPORTCODE;
%let _OUTPUT_col1_table = work.W1KBT2DCD;
%let _OUTPUT_col1_length = 5;
%let _OUTPUT_col1_type = $;
%let _OUTPUT_col1_format = $5.;
%let _OUTPUT_col1_informat = $5.;
%let _OUTPUT_col1_label = %nrquote();
%let _OUTPUT_col1_exp = "UserWritten";
%let _OUTPUT_col1_input_count = 0;
%let _OUTPUT_col2_name = REPORTDATE;
%let _OUTPUT_col2_table = work.W1KBT2DCD;
%let _OUTPUT_col2_length = 8;
%let _OUTPUT_col2_type = ;
%let _OUTPUT_col2_format = DATETIME20.;
%let _OUTPUT_col2_informat = DATETIME20.;
%let _OUTPUT_col2_label = %nrquote();
%let _OUTPUT_col2_exp = "UserWritten";
%let _OUTPUT_col2_input_count = 0;
%let _OUTPUT_col3_name = FRONTKDEALID;
%let _OUTPUT_col3_table = work.W1KBT2DCD;
%let _OUTPUT_col3_length = 10;
%let _OUTPUT_col3_type = $;
%let _OUTPUT_col3_format = $10.;
%let _OUTPUT_col3_informat = $10.;
%let _OUTPUT_col3_label = %nrquote(DEAL_FRONTKDEALID);
%let _OUTPUT_col3_input0 = DEAL_FRONTKDEALID;
%let _OUTPUT_col3_exp = ;
%let _OUTPUT_col3_input = DEAL_FRONTKDEALID;
%let _OUTPUT_col3_input_count = 1;
%let _OUTPUT_col4_name = FRONTFDEALID;
%let _OUTPUT_col4_table = work.W1KBT2DCD;
%let _OUTPUT_col4_length = 10;
%let _OUTPUT_col4_type = $;
%let _OUTPUT_col4_format = $10.;
%let _OUTPUT_col4_informat = $10.;
%let _OUTPUT_col4_label = %nrquote(DEAL_FRONTFDEALID);
%let _OUTPUT_col4_input0 = DEAL_FRONTFDEALID;
%let _OUTPUT_col4_exp = ;
%let _OUTPUT_col4_input = DEAL_FRONTFDEALID;
%let _OUTPUT_col4_input_count = 1;
%let _OUTPUT_col5_name = DEALID;
%let _OUTPUT_col5_table = work.W1KBT2DCD;
%let _OUTPUT_col5_length = 100;
%let _OUTPUT_col5_type = $;
%let _OUTPUT_col5_format = $100.;
%let _OUTPUT_col5_informat = $100.;
%let _OUTPUT_col5_label = %nrquote();
%let _OUTPUT_col5_exp = "UserWritten";
%let _OUTPUT_col5_input_count = 0;
%let _OUTPUT_col6_name = INSTRUMENTTYPECD;
%let _OUTPUT_col6_table = work.W1KBT2DCD;
%let _OUTPUT_col6_length = 3;
%let _OUTPUT_col6_type = $;
%let _OUTPUT_col6_format = $3.;
%let _OUTPUT_col6_informat = $3.;
%let _OUTPUT_col6_label = %nrquote();
%let _OUTPUT_col6_input0 = DEAL_INSTRUMENTTYPECD;
%let _OUTPUT_col6_exp = put(DEAL_INSTRUMENTTYPECD );
%let _OUTPUT_col6_input = DEAL_INSTRUMENTTYPECD;
%let _OUTPUT_col6_input_count = 1;
%let _OUTPUT_col7_name = DEALDATE;
%let _OUTPUT_col7_table = work.W1KBT2DCD;
%let _OUTPUT_col7_length = 8;
%let _OUTPUT_col7_type = ;
%let _OUTPUT_col7_format = DATETIME20.;
%let _OUTPUT_col7_informat = DATETIME20.;
%let _OUTPUT_col7_label = %nrquote(DEAL_DEALDATE);
%let _OUTPUT_col7_input0 = DEAL_DEALDATE;
%let _OUTPUT_col7_exp = ;
%let _OUTPUT_col7_input = DEAL_DEALDATE;
%let _OUTPUT_col7_input_count = 1;
%let _OUTPUT_col8_name = ADDITIONALINFORMATION;
%let _OUTPUT_col8_table = work.W1KBT2DCD;
%let _OUTPUT_col8_length = 255;
%let _OUTPUT_col8_type = $;
%let _OUTPUT_col8_format = $255.;
%let _OUTPUT_col8_informat = $255.;
%let _OUTPUT_col8_label = %nrquote();
%let _OUTPUT_col8_exp = "UserWritten";
%let _OUTPUT_col8_input_count = 0;

%let _OUTPUT1 = work.W1KBT2DCD;
%let _OUTPUT1_connect = ;
%let _OUTPUT1_engine = ;
%let _OUTPUT1_memtype = DATA;
%let _OUTPUT1_options = %nrquote();
%let _OUTPUT1_alter = %nrquote();
%let _OUTPUT1_path = %nrquote(/User Written_A5ELGGF9.AF0000CZ%(WorkTable%));
%let _OUTPUT1_type = 1;
%let _OUTPUT1_label = %nrquote();
/* List of target columns to keep  */ 
%let _OUTPUT1_keep = DEALRK REPORTCODE REPORTDATE FRONTKDEALID FRONTFDEALID DEALID 
        INSTRUMENTTYPECD DEALDATE ADDITIONALINFORMATION;
%let _OUTPUT1_col_count = 9;
%let _OUTPUT1_col0_name = DEALRK;
%let _OUTPUT1_col0_table = work.W1KBT2DCD;
%let _OUTPUT1_col0_length = 8;
%let _OUTPUT1_col0_type = ;
%let _OUTPUT1_col0_format = 11.;
%let _OUTPUT1_col0_informat = 11.;
%let _OUTPUT1_col0_label = %nrquote(DEAL_DEALRK);
%let _OUTPUT1_col0_input0 = DEAL_DEALRK;
%let _OUTPUT1_col0_exp = ;
%let _OUTPUT1_col0_input = DEAL_DEALRK;
%let _OUTPUT1_col0_input_count = 1;
%let _OUTPUT1_col1_name = REPORTCODE;
%let _OUTPUT1_col1_table = work.W1KBT2DCD;
%let _OUTPUT1_col1_length = 5;
%let _OUTPUT1_col1_type = $;
%let _OUTPUT1_col1_format = $5.;
%let _OUTPUT1_col1_informat = $5.;
%let _OUTPUT1_col1_label = %nrquote();
%let _OUTPUT1_col1_exp = "UserWritten";
%let _OUTPUT1_col1_input_count = 0;
%let _OUTPUT1_col2_name = REPORTDATE;
%let _OUTPUT1_col2_table = work.W1KBT2DCD;
%let _OUTPUT1_col2_length = 8;
%let _OUTPUT1_col2_type = ;
%let _OUTPUT1_col2_format = DATETIME20.;
%let _OUTPUT1_col2_informat = DATETIME20.;
%let _OUTPUT1_col2_label = %nrquote();
%let _OUTPUT1_col2_exp = "UserWritten";
%let _OUTPUT1_col2_input_count = 0;
%let _OUTPUT1_col3_name = FRONTKDEALID;
%let _OUTPUT1_col3_table = work.W1KBT2DCD;
%let _OUTPUT1_col3_length = 10;
%let _OUTPUT1_col3_type = $;
%let _OUTPUT1_col3_format = $10.;
%let _OUTPUT1_col3_informat = $10.;
%let _OUTPUT1_col3_label = %nrquote(DEAL_FRONTKDEALID);
%let _OUTPUT1_col3_input0 = DEAL_FRONTKDEALID;
%let _OUTPUT1_col3_exp = ;
%let _OUTPUT1_col3_input = DEAL_FRONTKDEALID;
%let _OUTPUT1_col3_input_count = 1;
%let _OUTPUT1_col4_name = FRONTFDEALID;
%let _OUTPUT1_col4_table = work.W1KBT2DCD;
%let _OUTPUT1_col4_length = 10;
%let _OUTPUT1_col4_type = $;
%let _OUTPUT1_col4_format = $10.;
%let _OUTPUT1_col4_informat = $10.;
%let _OUTPUT1_col4_label = %nrquote(DEAL_FRONTFDEALID);
%let _OUTPUT1_col4_input0 = DEAL_FRONTFDEALID;
%let _OUTPUT1_col4_exp = ;
%let _OUTPUT1_col4_input = DEAL_FRONTFDEALID;
%let _OUTPUT1_col4_input_count = 1;
%let _OUTPUT1_col5_name = DEALID;
%let _OUTPUT1_col5_table = work.W1KBT2DCD;
%let _OUTPUT1_col5_length = 100;
%let _OUTPUT1_col5_type = $;
%let _OUTPUT1_col5_format = $100.;
%let _OUTPUT1_col5_informat = $100.;
%let _OUTPUT1_col5_label = %nrquote();
%let _OUTPUT1_col5_exp = "UserWritten";
%let _OUTPUT1_col5_input_count = 0;
%let _OUTPUT1_col6_name = INSTRUMENTTYPECD;
%let _OUTPUT1_col6_table = work.W1KBT2DCD;
%let _OUTPUT1_col6_length = 3;
%let _OUTPUT1_col6_type = $;
%let _OUTPUT1_col6_format = $3.;
%let _OUTPUT1_col6_informat = $3.;
%let _OUTPUT1_col6_label = %nrquote();
%let _OUTPUT1_col6_input0 = DEAL_INSTRUMENTTYPECD;
%let _OUTPUT1_col6_exp = put(DEAL_INSTRUMENTTYPECD );
%let _OUTPUT1_col6_input = DEAL_INSTRUMENTTYPECD;
%let _OUTPUT1_col6_input_count = 1;
%let _OUTPUT1_col7_name = DEALDATE;
%let _OUTPUT1_col7_table = work.W1KBT2DCD;
%let _OUTPUT1_col7_length = 8;
%let _OUTPUT1_col7_type = ;
%let _OUTPUT1_col7_format = DATETIME20.;
%let _OUTPUT1_col7_informat = DATETIME20.;
%let _OUTPUT1_col7_label = %nrquote(DEAL_DEALDATE);
%let _OUTPUT1_col7_input0 = DEAL_DEALDATE;
%let _OUTPUT1_col7_exp = ;
%let _OUTPUT1_col7_input = DEAL_DEALDATE;
%let _OUTPUT1_col7_input_count = 1;
%let _OUTPUT1_col8_name = ADDITIONALINFORMATION;
%let _OUTPUT1_col8_table = work.W1KBT2DCD;
%let _OUTPUT1_col8_length = 255;
%let _OUTPUT1_col8_type = $;
%let _OUTPUT1_col8_format = $255.;
%let _OUTPUT1_col8_informat = $255.;
%let _OUTPUT1_col8_label = %nrquote();
%let _OUTPUT1_col8_exp = "UserWritten";
%let _OUTPUT1_col8_input_count = 0;

/*---- Start of User Written Code  ----*/ 


/*====================================================================*/
/* Для каждого из инструментов проверяется заполнение соответствующих */
/* полей, список которых задается макропеременными.        				 */
/*																							 */
/*																							 */
/* 2012-08-30 - Chepigin Alexander - Initial Coding*/
/*====================================================================*/

/*Список всех полей по инструментам*/
%LET CAP=%STR(DEAL_FrontKDealID DEAL_DealDate DEAL_DealGroup DEAL_InstrumentType DEAL_FlagPFI DEAL_InstrumentClass DEAL_FlagDelivery /
DEAL_FlagOTC DEAL_CustomerNo DEAL_Premium DEAL_PremiumCCY DEAL_OptionType DEAL_PremiumPaymentMode DEAL_HedgeIndicator DEAL_OriginalMaturity /
DEAL_DealStatus DEAL_DealID1 DEAL_DealType1 DEAL_DealSubType1 DEAL_DealDirection1 DEAL_PlacedTaken1 DEAL_ValueDate1 DEAL_MaturityDate1 /
DEAL_UnderlyingCCY1 DEAL_UnderlyingName1 DEAL_NotionalCurrent1 DEAL_CalcBasis1 DEAL_InterestRate1 DEAL_InterestRateType1 DEAL_PaymentFrequency1 /
DEAL_StartDate1 DEAL_StartPeriodDate1 DEAL_NextPeriodDate1 DEAL_NextIntPaymentDate1 IRSCH_FrontKDealID  IRSCH_LegNumber IRSCH_Seq /
IRSCH_StartPeriodDate IRSCH_EndPeriodDate IRSCH_InterestRate IRSCH_Notional IRSCH_PaymentDate IRSCH_FixingDate IRSCH_SettlementPrice /
IRSCH_IsExecuted IRAH_FrontKDealID  IRAH_LegNumber IRAH_OperDate IRAH_AccruedInterest FV_FrontKDealID  FV_InstrumentType FV_OperDate /
FV_FairValueRUR FV_LegNumber);
%LET CIS=%STR(DEAL_FrontKDealID DEAL_DealDate DEAL_DealGroup DEAL_InstrumentType DEAL_FlagPFI DEAL_InstrumentClass DEAL_FlagDelivery / 
DEAL_FlagOTC DEAL_CustomerNo DEAL_HedgeIndicator DEAL_OriginalMaturity DEAL_DealStatus DEAL_DealID1 DEAL_DealType1 DEAL_DealSubType1 / 
 DEAL_DealDirection1 DEAL_PlacedTaken1 DEAL_ValueDate1 DEAL_MaturityDate1 DEAL_UnderlyingCCY1 DEAL_UnderlyingName1 DEAL_NotionalCurrent1 /
 DEAL_CalcBasis1 DEAL_InterestRate1 DEAL_InterestRateType1 DEAL_PaymentFrequency1 DEAL_StartDate1 DEAL_StartPeriodDate1 /
DEAL_NextPeriodDate1 DEAL_NextIntPaymentDate1 DEAL_DealID2 DEAL_DealType2 DEAL_DealSubType2 DEAL_DealDirection2 DEAL_PlacedTaken2 /
DEAL_ValueDate2  DEAL_MaturityDate2 DEAL_UnderlyingCCY2 DEAL_UnderlyingName2  DEAL_NotionalCurrent2  DEAL_CalcBasis2 DEAL_InterestRate2 /
DEAL_InterestRateType2 DEAL_PaymentFrequency2 DEAL_StartDate2 DEAL_StartPeriodDate2 DEAL_NextPeriodDate2  DEAL_NextIntPaymentDate2 /
IRSCH_FrontKDealID  IRSCH_LegNumber IRSCH_Seq IRSCH_StartPeriodDate IRSCH_EndPeriodDate IRSCH_InterestRate IRSCH_Notional IRSCH_PaymentDate /
IRSCH_FixingDate  NECIRS_FrontKDealID NECIRS_DealID NECIRS_DealType NECIRS_DealSubType NECIRS_DealDirection NECIRS_ValueDate /
NECIRS_UnderlyingCCY NECIRS_Notional NECIRS_PriceCCY NECIRS_GrossRate NECIRS_Amount NECIRS_Status IRAH_FrontKDealID  IRAH_LegNumber /
IRAH_OperDate IRAH_AccruedInterest FV_FrontKDealID  FV_InstrumentType FV_OperDate FV_FairValueRUR FV_LegNumber);
%LET CSG=%STR(DEAL_FrontKDealID DEAL_DealDate DEAL_DealGroup DEAL_InstrumentType DEAL_FlagPFI DEAL_InstrumentClass DEAL_FlagDelivery /
DEAL_FlagOTC DEAL_CustomerNo DEAL_HedgeIndicator DEAL_OriginalMaturity DEAL_DealStatus DEAL_DealID1 DEAL_DealType1 DEAL_DealSubType1 /
DEAL_DealDirection1 DEAL_PlacedTaken1 DEAL_ValueDate1 DEAL_MaturityDate1 DEAL_UnderlyingCCY1 DEAL_UnderlyingName1 DEAL_NotionalCurrent1 /
DEAL_CalcBasis1 DEAL_InterestRate1 DEAL_InterestRateType1 DEAL_PaymentFrequency1 DEAL_StartDate1 DEAL_StartPeriodDate1 /
DEAL_NextPeriodDate1 DEAL_NextIntPaymentDate1 DEAL_DealID2 DEAL_DealType2 DEAL_DealSubType2 DEAL_DealDirection2 DEAL_PlacedTaken2 /
DEAL_ValueDate2  DEAL_MaturityDate2 DEAL_UnderlyingCCY2 DEAL_UnderlyingName2  DEAL_NotionalCurrent2  DEAL_CalcBasis2 DEAL_InterestRate2 /
DEAL_InterestRateType2 DEAL_PaymentFrequency2 DEAL_StartDate2 DEAL_StartPeriodDate2 DEAL_NextPeriodDate2  DEAL_NextIntPaymentDate2 /
IRSCH_FrontKDealID  IRSCH_LegNumber IRSCH_Seq IRSCH_StartPeriodDate IRSCH_EndPeriodDate IRSCH_InterestRate IRSCH_Notional /
IRSCH_PaymentDate IRSCH_FixingDate  NECIRS_FrontKDealID NECIRS_DealID NECIRS_DealType NECIRS_DealSubType NECIRS_DealDirection /
NECIRS_ValueDate NECIRS_UnderlyingCCY NECIRS_Notional NECIRS_PriceCCY NECIRS_GrossRate NECIRS_Amount NECIRS_Status IRAH_FrontKDealID /
IRAH_LegNumber IRAH_OperDate IRAH_AccruedInterest FV_FrontKDealID  FV_InstrumentType FV_OperDate FV_FairValueRUR FV_LegNumber);
%LET DCD=%STR(DEAL_FrontKDealID DEAL_DealDate DEAL_DealGroup DEAL_InstrumentType DEAL_FlagPFI DEAL_InstrumentClass DEAL_FlagDelivery /
DEAL_FlagOTC DEAL_CustomerNo DEAL_OptionType DEAL_HedgeIndicator DEAL_OriginalMaturity DEAL_DealStatus DEAL_DealID1 DEAL_DealType1 /
DEAL_DealSubType1 DEAL_DealDirection1 DEAL_PlacedTaken1 DEAL_ValueDate1 DEAL_MaturityDate1 DEAL_UnderlyingCCY1 /
DEAL_NotionalCurrent1 DEAL_PriceCCY1 DEAL_GrossRate1 DEAL_Amount1 DEAL_CalcBasis1 DEAL_InterestRate1 DEAL_InterestRateType1 /
DEAL_PaymentFrequency1 DEAL_StartDate1 DEAL_StartPeriodDate1 DEAL_NextPeriodDate1 DEAL_DCDFX_DealID DEAL_DCDFX_Type DEAL_DCDFX_SubType /
IRSCH_FrontKDealID  IRSCH_LegNumber IRSCH_Seq IRSCH_StartPeriodDate IRSCH_EndPeriodDate IRSCH_InterestRate IRSCH_Notional /
IRSCH_PaymentDate IRAH_FrontKDealID  IRAH_LegNumber IRAH_OperDate IRAH_AccruedInterest);
%LET FLR=%STR(DEAL_FrontKDealID DEAL_DealDate DEAL_DealGroup DEAL_InstrumentType DEAL_FlagPFI DEAL_InstrumentClass DEAL_FlagDelivery /
DEAL_FlagOTC DEAL_CustomerNo DEAL_Premium DEAL_PremiumCCY DEAL_OptionType DEAL_PremiumPaymentMode DEAL_HedgeIndicator /
DEAL_OriginalMaturity DEAL_DealStatus DEAL_DealID1 DEAL_DealType1 DEAL_DealSubType1 DEAL_DealDirection1 DEAL_PlacedTaken1 /
DEAL_ValueDate1 DEAL_MaturityDate1 DEAL_UnderlyingCCY1 DEAL_UnderlyingName1 DEAL_NotionalCurrent1 DEAL_CalcBasis1 /
DEAL_InterestRate1 DEAL_InterestRateType1 DEAL_PaymentFrequency1 DEAL_StartDate1 DEAL_StartPeriodDate1 DEAL_NextPeriodDate1 /
DEAL_NextIntPaymentDate1 IRSCH_FrontKDealID  IRSCH_LegNumber IRSCH_Seq IRSCH_StartPeriodDate IRSCH_EndPeriodDate /
IRSCH_InterestRate IRSCH_Notional IRSCH_PaymentDate IRSCH_FixingDate IRSCH_SettlementPrice IRSCH_IsExecuted IRAH_FrontKDealID /
 IRAH_LegNumber IRAH_OperDate IRAH_AccruedInterest FV_FrontKDealID  FV_InstrumentType FV_OperDate FV_FairValueRUR FV_LegNumber);
%LET FRA=%STR(DEAL_FrontKDealID DEAL_DealDate DEAL_DealGroup DEAL_InstrumentType DEAL_FlagPFI DEAL_InstrumentClass DEAL_FlagDelivery /
DEAL_FlagOTC DEAL_CustomerNo DEAL_HedgeIndicator DEAL_OriginalMaturity DEAL_DealStatus DEAL_DealID1 DEAL_DealType1 DEAL_DealSubType1 /
DEAL_DealDirection1 DEAL_PlacedTaken1 DEAL_ValueDate1 DEAL_MaturityDate1 DEAL_UnderlyingCCY1 DEAL_UnderlyingName1 DEAL_NotionalCurrent1 /
DEAL_CalcBasis1 DEAL_InterestRate1 DEAL_InterestRateType1 DEAL_StartDate1 DEAL_StartPeriodDate1 DEAL_NextPeriodDate1 IRSCH_FrontKDealID  /
IRSCH_LegNumber IRSCH_Seq IRSCH_StartPeriodDate IRSCH_EndPeriodDate IRSCH_InterestRate IRSCH_Notional FV_FrontKDealID /
 FV_InstrumentType FV_OperDate FV_FairValueRUR FV_LegNumber);
%LET FUT=%STR(DEAL_DealDate DEAL_DealGroup DEAL_InstrumentType DEAL_FlagPFI DEAL_InstrumentClass DEAL_FlagDelivery DEAL_FlagOTC /
DEAL_CustomerNo DEAL_OriginalMaturity DEAL_DealStatus DEAL_DealID1 DEAL_DealType1 DEAL_DealSubType1 DEAL_DealDirection1 DEAL_ValueDate1 /
DEAL_MaturityDate1 DEAL_UnderlyingCCY1 DEAL_NotionalCurrent1 DEAL_PriceCCY1 DEAL_GrossRate1 DEAL_Amount1);
%LET FWD=%STR(DEAL_FrontKDealID DEAL_FrontFDealID DEAL_DealDate DEAL_DealGroup DEAL_InstrumentType DEAL_FlagPFI DEAL_InstrumentClass /
DEAL_FlagDelivery DEAL_FlagOTC DEAL_CustomerNo DEAL_OriginalMaturity DEAL_DealStatus DEAL_DealID1 DEAL_DealType1 DEAL_DealSubType1 /
DEAL_DealDirection1 DEAL_ValueDate1 DEAL_MaturityDate1 DEAL_UnderlyingCCY1 DEAL_NotionalCurrent1 DEAL_PriceCCY1 /
DEAL_GrossRate1 DEAL_Amount1 FV_FrontKDealID  FV_InstrumentType FV_OperDate FV_FairValueRUR FV_LegNumber);
%LET IRS=%STR(DEAL_FrontKDealID DEAL_DealDate DEAL_DealGroup DEAL_InstrumentType DEAL_FlagPFI DEAL_InstrumentClass DEAL_FlagDelivery /
DEAL_FlagOTC DEAL_CustomerNo DEAL_HedgeIndicator DEAL_OriginalMaturity DEAL_DealStatus DEAL_DealID1 DEAL_DealType1 DEAL_DealSubType1 /
DEAL_DealDirection1 DEAL_PlacedTaken1 DEAL_ValueDate1 DEAL_MaturityDate1 DEAL_UnderlyingCCY1 DEAL_UnderlyingName1 DEAL_NotionalCurrent1 /
DEAL_CalcBasis1 DEAL_InterestRate1 DEAL_InterestRateType1 DEAL_PaymentFrequency1 DEAL_StartDate1 DEAL_StartPeriodDate1 /
DEAL_NextPeriodDate1 DEAL_NextIntPaymentDate1 DEAL_DealID2 DEAL_DealType2 DEAL_DealSubType2 DEAL_DealDirection2 DEAL_PlacedTaken2 /
DEAL_ValueDate2  DEAL_MaturityDate2 DEAL_UnderlyingCCY2 DEAL_UnderlyingName2  DEAL_NotionalCurrent2  DEAL_CalcBasis2 DEAL_InterestRate2 /
DEAL_InterestRateType2 DEAL_PaymentFrequency2 DEAL_StartDate2 DEAL_StartPeriodDate2 DEAL_NextPeriodDate2  DEAL_NextIntPaymentDate2 /
IRSCH_FrontKDealID  IRSCH_LegNumber IRSCH_Seq IRSCH_StartPeriodDate IRSCH_EndPeriodDate IRSCH_InterestRate IRSCH_Notional /
IRSCH_PaymentDate IRSCH_FixingDate IRAH_FrontKDealID  IRAH_LegNumber IRAH_OperDate IRAH_AccruedInterest FV_FrontKDealID  /
FV_InstrumentType FV_OperDate FV_FairValueRUR FV_LegNumber);
%LET NDF=%STR(DEAL_FrontKDealID DEAL_FrontFDealID DEAL_DealDate DEAL_DealGroup DEAL_InstrumentType DEAL_FlagPFI DEAL_InstrumentClass /
DEAL_FlagDelivery DEAL_FlagOTC DEAL_CustomerNo DEAL_OriginalMaturity DEAL_DealStatus DEAL_DealID1 DEAL_DealType1 DEAL_DealSubType1 /
DEAL_DealDirection1 DEAL_ValueDate1 DEAL_MaturityDate1 DEAL_UnderlyingCCY1 DEAL_NotionalCurrent1 DEAL_PriceCCY1 /
DEAL_GrossRate1 DEAL_Amount1 FV_FrontKDealID  FV_InstrumentType FV_OperDate FV_FairValueRUR FV_LegNumber);
%LET OPT=%STR(DEAL_FrontKDealID DEAL_DealDate DEAL_DealGroup DEAL_InstrumentType DEAL_FlagPFI DEAL_InstrumentClass DEAL_FlagDelivery /
DEAL_FlagOTC DEAL_CustomerNo DEAL_Premium DEAL_PremiumCCY DEAL_OptionType DEAL_PremiumPaymentMode DEAL_OriginalMaturity DEAL_DealStatus /
DEAL_DealID1 DEAL_DealType1 DEAL_DealSubType1 DEAL_DealDirection1 DEAL_ValueDate1 DEAL_MaturityDate1 DEAL_UnderlyingCCY1 /
DEAL_NotionalCurrent1 DEAL_PriceCCY1 DEAL_GrossRate1 DEAL_Amount1 FV_FrontKDealID  FV_InstrumentType FV_OperDate /
FV_FairValueRUR FV_LegNumber);
%LET SPT=%STR(DEAL_DealDate DEAL_DealGroup DEAL_InstrumentType DEAL_FlagPFI DEAL_InstrumentClass DEAL_FlagDelivery DEAL_FlagOTC /
DEAL_CustomerNo DEAL_OriginalMaturity DEAL_DealStatus DEAL_DealID1 DEAL_DealType1 DEAL_DealSubType1 DEAL_DealDirection1 DEAL_ValueDate1 /
DEAL_MaturityDate1 DEAL_UnderlyingCCY1 DEAL_NotionalCurrent1 DEAL_PriceCCY1 DEAL_GrossRate1 DEAL_Amount1);
%LET SWP=%STR(DEAL_FrontKDealID DEAL_FrontFDealID DEAL_DealDate DEAL_DealGroup DEAL_InstrumentType DEAL_FlagPFI DEAL_InstrumentClass /
DEAL_FlagDelivery DEAL_FlagOTC DEAL_CustomerNo DEAL_OriginalMaturity DEAL_DealStatus DEAL_DealID1 DEAL_DealType1 DEAL_DealSubType1 /
DEAL_DealDirection1 DEAL_ValueDate1 DEAL_MaturityDate1 DEAL_UnderlyingCCY1 DEAL_NotionalCurrent1 DEAL_PriceCCY1 /
DEAL_GrossRate1 DEAL_Amount1 DEAL_DealID2 DEAL_DealType2 DEAL_DealSubType2 DEAL_DealDirection2 DEAL_ValueDate2  DEAL_MaturityDate2 /
DEAL_UnderlyingCCY2 DEAL_NotionalCurrent2  DEAL_PriceCCY2 DEAL_GrossRate2 DEAL_Amount2  FV_FrontKDealID /
 FV_InstrumentType FV_OperDate FV_FairValueRUR FV_LegNumber);
%LET SWS=%STR(DEAL_FrontKDealID DEAL_FrontFDealID DEAL_DealDate DEAL_DealGroup DEAL_InstrumentType DEAL_FlagPFI DEAL_InstrumentClass /
DEAL_FlagDelivery DEAL_FlagOTC DEAL_CustomerNo DEAL_OriginalMaturity DEAL_DealStatus DEAL_DealID1 DEAL_DealType1 DEAL_DealSubType1 /
DEAL_DealDirection1 DEAL_ValueDate1 DEAL_MaturityDate1 DEAL_UnderlyingCCY1 DEAL_NotionalCurrent1 DEAL_PriceCCY1 /
DEAL_GrossRate1 DEAL_Amount1 DEAL_DealID2 DEAL_DealType2 DEAL_DealSubType2 DEAL_DealDirection2 DEAL_ValueDate2  DEAL_MaturityDate2 /
DEAL_UnderlyingCCY2 DEAL_NotionalCurrent2  DEAL_PriceCCY2 DEAL_GrossRate2 DEAL_Amount2  FV_FrontKDealID /
 FV_InstrumentType FV_OperDate FV_FairValueRUR FV_LegNumber);


%macro P02;
	
	data &_OUTPUT1	(keep = DEALRK REPORTCODE REPORTDATE FRONTKDEALID FRONTFDEALID
									DEALID DEALDATE ADDITIONALINFORMATION INSTRUMENTTYPECD);
		attrib
			DEALRK length = 8 format = 11. informat = 11. 
			REPORTCODE length = $5 format = $5. informat = $5.
			REPORTDATE length = 8 format = DATETIME20. informat = DATETIME20.
			FRONTKDEALID length = $10 format = $10. informat = $10.
			FRONTFDEALID length = $10 format = $10. informat = $10.
			DEALID length = $100 format = $100. informat = $100.
			INSTRUMENTTYPECD length = $3 format = $3. informat = $3.
			DEALDATE length = 8 format = DATETIME20. informat = DATETIME20.
			ADDITIONALINFORMATION length = $255 format = $255. informat = $255.
		;
		set &_INPUT1 (rename = (DEAL_DEALRK=DEALRK DEAL_FRONTKDEALID=FRONTKDEALID DEAL_FRONTFDEALID=FRONTFDEALID DEAL_DEALID1=DEALID1 DEAL_DEALID2=DEALID2
										DEAL_DEALDATE=DEALDATE /*DEAL_INSTRUMENTTYPECD=INSTRUMENTTYPECD*/ DEAL_DCDFX_DEALID=DCDFX_DEALID));
		DEAL_DEALRK=DEALRK;
		DEAL_FRONTKDEALID=FRONTKDEALID;
		DEAL_FRONTFDEALID=FRONTFDEALID;
		DEAL_DEALID1=DEALID1;
		DEAL_DEALID2=DEALID2;
		DEAL_DEALDATE=DEALDATE;
		INSTRUMENTTYPECD = strip(DEAL_INSTRUMENTTYPECD);
		DEAL_INSTRUMENTTYPECD=INSTRUMENTTYPECD;
		DEAL_DCDFX_DEALID = DCDFX_DEALID;

		REPORTCODE = 'П-02';
		REPORTDATE = &REPDT.;
		retain ADDITIONALINFORMATION;
		select (INSTRUMENTTYPECD);
			when ('CAP')
			do;
				ADDITIONALINFORMATION = "";
				%DO J=1 %TO %sysfunc(countw(&CAP));
					%LET ATTR=%SCAN(&CAP, &J);
					if &ATTR eq NULL then do;
						ADDITIONALINFORMATION = cats(ADDITIONALINFORMATION, "&ATTR", ',');
						DEALID = DEALID1;
					end;
				%END;
				if not missing(ADDITIONALINFORMATION) then
				do;
					ADDITIONALINFORMATION = substr(ADDITIONALINFORMATION, 1, length(ADDITIONALINFORMATION)-1);
					output;
				end;
			end;
			when ('CIS')
			do;
				ADDITIONALINFORMATION = "";
				%DO J=1 %TO %sysfunc(countw(&CIS));
					%LET ATTR=%SCAN(&CIS, &J);
					if &ATTR eq NULL then do;
						ADDITIONALINFORMATION = cats(ADDITIONALINFORMATION, "&ATTR", ',');
						select;
							when (missing(DEALID1)) DEALID=DEALID2;
							when (missing(DEALID2)) DEALID=DEALID1;
							when (not missing(DEALID1) AND not missing(DEALID2)) DEALID = cats(DEALID1, ',', DEALID2);
							otherwise DEALID = " ";
						end;
					end;
				%END;
				if not missing(ADDITIONALINFORMATION) then
				do;
					ADDITIONALINFORMATION = substr(ADDITIONALINFORMATION, 1, length(ADDITIONALINFORMATION)-1);
					output;
				end;
			end;
			when ('CSG')
			do;
				ADDITIONALINFORMATION = "";
				%DO J=1 %TO %sysfunc(countw(&CSG));
					%LET ATTR=%SCAN(&CSG, &J);
					if &ATTR eq NULL then do;
						ADDITIONALINFORMATION = cats(ADDITIONALINFORMATION, "&ATTR", ',');
						DEALID = DEALID1;
					end;
				%END;
				if not missing(ADDITIONALINFORMATION) then
				do;
					ADDITIONALINFORMATION = substr(ADDITIONALINFORMATION, 1, length(ADDITIONALINFORMATION)-1);
					output;
				end;
			end;
			when ('DCD')
			do;
				ADDITIONALINFORMATION = "";
				%DO J=1 %TO %sysfunc(countw(&DCD));
					%LET ATTR=%SCAN(&DCD, &J);
					if &ATTR eq NULL then do;
						ADDITIONALINFORMATION = cats(ADDITIONALINFORMATION, "&ATTR", ',');
						select;
							when (missing(DEALID1)) DEALID=DCDFX_DEALID;
							when (missing(DCDFX_DEALID)) DEALID=DEALID1;
							when (not missing(DEALID1) AND not missing(DCDFX_DEALID)) DEALID = cats(DEALID1, ',', DCDFX_DEALID);
							otherwise DEALID = " ";
						end;
					end;
				%END;
				if not missing(ADDITIONALINFORMATION) then
				do;
					ADDITIONALINFORMATION = substr(ADDITIONALINFORMATION, 1, length(ADDITIONALINFORMATION)-1);
					output;
				end;
			end;
			when ('FLR')
			do;
				ADDITIONALINFORMATION = "";
				%DO J=1 %TO %sysfunc(countw(&FLR));
					%LET ATTR=%SCAN(&FLR, &J);
					if &ATTR eq NULL then do;
						ADDITIONALINFORMATION = cats(ADDITIONALINFORMATION, "&ATTR", ',');
						DEALID = DEALID1;
					end;
				%END;
				if not missing(ADDITIONALINFORMATION) then
				do;
					ADDITIONALINFORMATION = substr(ADDITIONALINFORMATION, 1, length(ADDITIONALINFORMATION)-1);
					output;
				end;
			end;
			when ('FRA')
			do;
				ADDITIONALINFORMATION = "";
				%DO J=1 %TO %sysfunc(countw(&FRA));
					%LET ATTR=%SCAN(&FRA, &J);
					if &ATTR eq NULL then do;
						ADDITIONALINFORMATION = cats(ADDITIONALINFORMATION, "&ATTR", ',');
						DEALID = DEALID1;
					end;
				%END;
				if not missing(ADDITIONALINFORMATION) then
				do;
					ADDITIONALINFORMATION = substr(ADDITIONALINFORMATION, 1, length(ADDITIONALINFORMATION)-1);
					output;
				end;
			end;
			when ('FUT')
			do;
				ADDITIONALINFORMATION = "";
				%DO J=1 %TO %sysfunc(countw(&FUT));
					%LET ATTR=%SCAN(&FUT, &J);
					if &ATTR eq NULL then do;
						ADDITIONALINFORMATION = cats(ADDITIONALINFORMATION, "&ATTR", ',');
						DEALID = DEALID1;
					end;
				%END;
				if not missing(ADDITIONALINFORMATION) then
				do;
					ADDITIONALINFORMATION = substr(ADDITIONALINFORMATION, 1, length(ADDITIONALINFORMATION)-1);
					output;
				end;
			end;
			when ('FWD')
			do;
				ADDITIONALINFORMATION = "";
				%DO J=1 %TO %sysfunc(countw(&FWD));
					%LET ATTR=%SCAN(&FWD, &J);
					if &ATTR eq NULL then do;
						ADDITIONALINFORMATION = cats(ADDITIONALINFORMATION, "&ATTR", ',');
						DEALID = DEALID1;
					end;
				%END;
				if not missing(ADDITIONALINFORMATION) then
				do;
					ADDITIONALINFORMATION = substr(ADDITIONALINFORMATION, 1, length(ADDITIONALINFORMATION)-1);
					output;
				end;
			end;
			when ('IRS')
			do;
				ADDITIONALINFORMATION = "";
				%DO J=1 %TO %sysfunc(countw(&IRS));
					%LET ATTR=%SCAN(&IRS, &J);
					if &ATTR eq NULL then do;
						ADDITIONALINFORMATION = cats(ADDITIONALINFORMATION, "&ATTR", ',');
						select;
							when (missing(DEALID1)) DEALID=DEALID2;
							when (missing(DEALID2)) DEALID=DEALID1;
							when (not missing(DEALID1) AND not missing(DEALID2)) DEALID = cats(DEALID1, ',', DEALID2);
							otherwise DEALID = " ";
						end;
					end;
				%END;
				if not missing(ADDITIONALINFORMATION) then
				do;
					ADDITIONALINFORMATION = substr(ADDITIONALINFORMATION, 1, length(ADDITIONALINFORMATION)-1);
					output;
				end;
			end;
			when ('NDF')
			do;
				ADDITIONALINFORMATION = "";
				%DO J=1 %TO %sysfunc(countw(&NDF));
					%LET ATTR=%SCAN(&NDF, &J);
					if &ATTR eq NULL then do;
						ADDITIONALINFORMATION = cats(ADDITIONALINFORMATION, "&ATTR", ',');
						DEALID = DEALID1;
					end;
				%END;
				if not missing(ADDITIONALINFORMATION) then
				do;
					ADDITIONALINFORMATION = substr(ADDITIONALINFORMATION, 1, length(ADDITIONALINFORMATION)-1);
					output;
				end;
			end;
			when ('OPT')
			do;
				ADDITIONALINFORMATION = "";
				%DO J=1 %TO %sysfunc(countw(&OPT));
					%LET ATTR=%SCAN(&OPT, &J);
					if &ATTR eq NULL then do;
						ADDITIONALINFORMATION = cats(ADDITIONALINFORMATION, "&ATTR", ',');
						DEALID = DEALID1;
					end;
				%END;
				if not missing(ADDITIONALINFORMATION) then
				do;
					ADDITIONALINFORMATION = substr(ADDITIONALINFORMATION, 1, length(ADDITIONALINFORMATION)-1);
					output;
				end;
			end;
			when ('SPT')
			do;
				ADDITIONALINFORMATION = "";
				%DO J=1 %TO %sysfunc(countw(&SPT));
					%LET ATTR=%SCAN(&SPT, &J);
					if &ATTR eq NULL then do;
						ADDITIONALINFORMATION = cats(ADDITIONALINFORMATION, "&ATTR", ',');
						DEALID = DEALID1;
					end;
				%END;
				if not missing(ADDITIONALINFORMATION) then
				do;
					ADDITIONALINFORMATION = substr(ADDITIONALINFORMATION, 1, length(ADDITIONALINFORMATION)-1);
					output;
				end;
			end;
			when ('SWP')
			do;
				ADDITIONALINFORMATION = "";
				%DO J=1 %TO %sysfunc(countw(&SWP));
					%LET ATTR=%SCAN(&SWP, &J);
					if &ATTR eq NULL then do;
						ADDITIONALINFORMATION = cats(ADDITIONALINFORMATION, "&ATTR", ',');
						select;
							when (missing(DEALID1)) DEALID=DEALID2;
							when (missing(DEALID2)) DEALID=DEALID1;
							when (not missing(DEALID1) AND not missing(DEALID2)) DEALID = cats(DEALID1, ',', DEALID2);
							otherwise DEALID = " ";
						end;
					end;
				%END;
				if not missing(ADDITIONALINFORMATION) then
				do;
					ADDITIONALINFORMATION = substr(ADDITIONALINFORMATION, 1, length(ADDITIONALINFORMATION)-1);
					output;
				end;
			end;
			when ('SWS')
			do;
				ADDITIONALINFORMATION = "";
				%DO J=1 %TO %sysfunc(countw(&SWS));
					%LET ATTR=%SCAN(&SWS, &J);
					if &ATTR eq NULL then do;
						ADDITIONALINFORMATION = cats(ADDITIONALINFORMATION, "&ATTR", ',');
						select;
							when (missing(DEALID1)) DEALID=DEALID2;
							when (missing(DEALID2)) DEALID=DEALID1;
							when (not missing(DEALID1) AND not missing(DEALID2)) DEALID = cats(DEALID1, ',', DEALID2);
							otherwise DEALID = " ";
						end;
					end;
				%END;
				if not missing(ADDITIONALINFORMATION) then
				do;
					ADDITIONALINFORMATION = substr(ADDITIONALINFORMATION, 1, length(ADDITIONALINFORMATION)-1);
					output;
				end;
			end;
			when ('OPT')
			do;
				ADDITIONALINFORMATION = "";
				%DO J=1 %TO %sysfunc(countw(&OPT));
					%LET ATTR=%SCAN(&OPT, &J);
					if &ATTR eq NULL then do;
						ADDITIONALINFORMATION = cats(ADDITIONALINFORMATION, "&ATTR", ',');
						DEALID = DEALID1;
					end;
				%END;
				if not missing(ADDITIONALINFORMATION) then
				do;
					ADDITIONALINFORMATION = substr(ADDITIONALINFORMATION, 1, length(ADDITIONALINFORMATION)-1);
					output;
				end;
			end;
			when ('CIS')
			do;
				ADDITIONALINFORMATION = "";
				%DO J=1 %TO %sysfunc(countw(&CIS));
					%LET ATTR=%SCAN(&CIS, &J);
					if &ATTR eq NULL then do;
						ADDITIONALINFORMATION = cats(ADDITIONALINFORMATION, "&ATTR", ',');
						select;
							when (missing(DEALID1)) DEALID=DEALID2;
							when (missing(DEALID2)) DEALID=DEALID1;
							when (not missing(DEALID1) AND not missing(DEALID2)) DEALID = cats(DEALID1, ',', DEALID2);
							otherwise DEALID = " ";
						end;
					end;
				%END;
				if not missing(ADDITIONALINFORMATION) then
				do;
					ADDITIONALINFORMATION = substr(ADDITIONALINFORMATION, 1, length(ADDITIONALINFORMATION)-1);
					output;
				end;
			end;
			otherwise delete;
		end;
	run;

%error_check(mpStepType=DATA);
	
%mend P02;

%P02;



/*---- End of User Written Code  ----*/ 

%rcSet(&syserr); 
%rcSet(&sqlrc); 


/**  Step end User Written **/

/*==========================================================================* 
 * Step:            Table Loader                          A5ELGGF9.AK0000X7 * 
 * Transform:       Table Loader (Version 2.1)                              * 
 * Description:                                                             * 
 *                                                                          * 
 * Source Table:    User Written - work.W1KBT2DCD         A5ELGGF9.AF0000CZ * 
 * Target Table:    DQ_DRVT_DWH_DM - dm_dq.DQ_DRVT_DWH_DM A5ELGGF9.AE000049 * 
 *==========================================================================*/ 

%let transformID = %quote(A5ELGGF9.AK0000X7);
%let trans_rc = 0;
%let etls_stepStartTime = %sysfunc(datetime(), datetime20.); 

%let SYSLAST = %nrquote(work.W1KBT2DCD); 

%let SYS_SQL_IP_SPEEDO = Y;
%let SYS_SQL_MAPPUTTO = sas_put;
%let SYS_SQLREDUCEPUT = DBMS;
%global etls_sql_pushDown;
%let etls_sql_pushDown = -1;
option DBIDIRECTEXEC;

%global etls_tableExist;
%global etls_numIndex;
%global etls_lastTable;
%let etls_tableExist = -1; 
%let etls_numIndex = -1; 
%let etls_lastTable = &SYSLAST; 

/*---- Define load data macro  ----*/ 

/* --------------------------------------------------------------
   Load Technique Selection: AppendToExisting - AppendProc
   Constraint and index action selections: 'ASIS','ASIS','ASIS','ASIS'
   Additional options selections... 
      Set unmapped to missing on updates: false 
   -------------------------------------------------------------- */
%macro etls_loader;

   %let etls_tableOptions = ;
   
   /*---- Map the columns  ----*/ 
   proc datasets lib = work nolist nowarn memtype = (data view);
      delete WJ2XXIM;
   quit;
   
   data _null_;
      put "NOTE: The following column(s) do not have a column mapping, so the"
           " value(s) will be set to missing: STARTDATE, NEXTDATE, ENDDATE,"
           " LEGNUMBER, VALUEFRS, VALUESEC";
   run;
   
   %put %str(NOTE: Mapping columns ...);
   proc sql;
      create view work.WJ2XXIM as
         select
            REPORTCODE,
            REPORTDATE,
            FRONTKDEALID,
            FRONTFDEALID,
            DEALID,
            INSTRUMENTTYPECD,
            DEALDATE,
            ADDITIONALINFORMATION,
            . as STARTDATE length = 8
               format = DATETIME20.
               informat = DATETIME20.,
            . as NEXTDATE length = 8
               format = DATETIME20.
               informat = DATETIME20.,
            . as ENDDATE length = 8
               format = DATETIME20.
               informat = DATETIME20.,
            "" as LEGNUMBER length = 1
               format = $1.
               informat = $1.,
            "" as VALUEFRS length = 20
               format = $20.
               informat = $20.,
            "" as VALUESEC length = 20
               format = $20.
               informat = $20.
      from &etls_lastTable
      ;
   quit;
   
   %let SYSLAST = work.WJ2XXIM;
   
   %let etls_lastTable = &SYSLAST; 
   %let etls_tableOptions = ; 
   
   /* Determine if the target table exists  */ 
   %let etls_tableExist = %eval(%sysfunc(exist(dm_dq.DQ_DRVT_DWH_DM, DATA)) or 
         %sysfunc(exist(dm_dq.DQ_DRVT_DWH_DM, VIEW))); 
   
   /*---- Create a new table  ----*/ 
   %if (&etls_tableExist eq 0) %then 
   %do;  /* if table does not exist  */ 
   
      %put %str(NOTE: Creating table ...);
      
      data dm_dq.DQ_DRVT_DWH_DM
              (dbnull = (
                         REPORTCODE = YES
                         REPORTDATE = YES
                         FRONTKDEALID = YES
                         FRONTFDEALID = YES
                         DEALID = YES
                         INSTRUMENTTYPECD = YES
                         DEALDATE = YES
                         ADDITIONALINFORMATION = YES
                         STARTDATE = YES
                         NEXTDATE = YES
                         ENDDATE = YES
                         LEGNUMBER = YES
                         VALUEFRS = YES
                         VALUESEC = YES));
         attrib REPORTCODE length = $5
            format = $5.
            informat = $5.
            label = 'REPORTCODE'; 
         attrib REPORTDATE length = 8
            format = DATETIME20.
            informat = DATETIME20.
            label = 'REPORTDATE'; 
         attrib FRONTKDEALID length = $10
            format = $10.
            informat = $10.
            label = 'FRONTKDEALID'; 
         attrib FRONTFDEALID length = $10
            format = $10.
            informat = $10.
            label = 'FRONTFDEALID'; 
         attrib DEALID length = $100
            format = $100.
            informat = $100.
            label = 'DEALID'; 
         attrib INSTRUMENTTYPECD length = $3
            format = $3.
            informat = $3.
            label = 'INSTRUMENTTYPECD'; 
         attrib DEALDATE length = 8
            format = DATETIME20.
            informat = DATETIME20.
            label = 'DEALDATE'; 
         attrib ADDITIONALINFORMATION length = $255
            format = $255.
            informat = $255.
            label = 'ADDITIONALINFORMATION'; 
         attrib STARTDATE length = 8
            format = DATETIME20.
            informat = DATETIME20.
            label = 'STARTDATE'; 
         attrib NEXTDATE length = 8
            format = DATETIME20.
            informat = DATETIME20.
            label = 'NEXTDATE'; 
         attrib ENDDATE length = 8
            format = DATETIME20.
            informat = DATETIME20.
            label = 'ENDDATE'; 
         attrib LEGNUMBER length = $1
            format = $1.
            informat = $1.
            label = 'LEGNUMBER'; 
         attrib VALUEFRS length = $20
            format = $20.
            informat = $20.
            label = 'VALUEFRS'; 
         attrib VALUESEC length = $20
            format = $20.
            informat = $20.
            label = 'VALUESEC'; 
         call missing(of _all_);
         stop;
      run;
      
      %rcSet(&syserr); 
      
   %end;  /* if table does not exist  */ 
   
   /*---- Append  ----*/ 
   %put %str(NOTE: Appending data ...);
   
   proc append base = dm_dq.DQ_DRVT_DWH_DM 
      data = &etls_lastTable (&etls_tableOptions)  force ; 
    run; 
   
   %rcSet(&syserr); 
   
   proc datasets lib = work nolist nowarn memtype = (data view);
      delete WJ2XXIM;
   quit;
   
%mend etls_loader;
%etls_loader;

%let etls_recnt = 0;
%macro etls_recordCheck; 
   %let etls_recCheckExist = %eval(%sysfunc(exist(dm_dq.DQ_DRVT_DWH_DM, DATA)) or 
         %sysfunc(exist(dm_dq.DQ_DRVT_DWH_DM, VIEW))); 
   
   %if (&etls_recCheckExist) %then
   %do;
      proc sql noprint;
         select count(*) into :etls_recnt from dm_dq.DQ_DRVT_DWH_DM;
      quit;
   %end;
%mend etls_recordCheck;
%etls_recordCheck;



/**  Step end Table Loader **/

/*==========================================================================* 
 * Step:            SQL Join                              A5ELGGF9.AK0000X8 * 
 * Transform:       Join                                                    * 
 * Description:                                                             * 
 *                                                                          * 
 * Source Tables:   User Written - work.W1KBT2DCD         A5ELGGF9.AF0000CZ * 
 *                  INSTRUMENTTYPE -                      A5LX14I5.A900001B * 
 *                   DM_DRVT.INSTRUMENTTYPE                                 * 
 * Target Table:    SQL Join - work.W1PXYJN09             A5ELGGF9.AF0000D0 * 
 *==========================================================================*/ 

%let transformID = %quote(A5ELGGF9.AK0000X8);
%let trans_rc = 0;
%let etls_stepStartTime = %sysfunc(datetime(), datetime20.); 

%let etls_recCheckExist = 0; 
%let etls_recnt = 0; 
%macro etls_recordCheck; 
   %let etls_recCheckExist = %eval(%sysfunc(exist(work.W1KBT2DCD, DATA)) or 
         %sysfunc(exist(work.W1KBT2DCD, VIEW))); 
   
   %if (&etls_recCheckExist) %then
   %do;
      %local etls_syntaxcheck; 
      %let etls_syntaxcheck = %sysfunc(getoption(syntaxcheck)); 
      /* Turn off syntaxcheck option to perform following steps  */ 
      options nosyntaxcheck;
      
      proc contents data = work.W1KBT2DCD out = work.etls_contents(keep = nobs) noprint; 
      run; 
      
      data _null_; 
         set work.etls_contents (obs = 1); 
         call symput("etls_recnt", left(put(nobs,32.))); 
      run;
      
      proc datasets lib = work nolist nowarn memtype = (data view);
         delete etls_contents;
      quit;
      
      /* Reset syntaxcheck option to previous setting  */ 
      options &etls_syntaxcheck; 
   %end;
%mend etls_recordCheck;
%etls_recordCheck;

%let SYS_SQL_IP_SPEEDO = Y;
%let SYS_SQL_MAPPUTTO = sas_put;
%let SYS_SQLREDUCEPUT = DBMS;
%global etls_sql_pushDown;
%let etls_sql_pushDown = -1;
option DBIDIRECTEXEC;

proc datasets lib = work nolist nowarn memtype = (data view);
   delete W1PXYJN09;
quit;

proc sql;
   create table work.W1PXYJN09 as
   select distinct
      W1KBT2DCD.INSTRUMENTTYPECD length = 3   
         format = $3.
         informat = $3.
         label = 'INSTRUMENTTYPECD',
      INSTRUMENTTYPE.INSTRUMENTTYPE length = 100   
         format = $100.
         informat = $100.
         label = 'INSTRUMENTTYPE'
   from
      work.W1KBT2DCD left join 
      DM_DRVT.INSTRUMENTTYPE
         on
         (
            W1KBT2DCD.INSTRUMENTTYPECD = INSTRUMENTTYPE.INSTRUMENTTYPECD
         )
   where
      W1KBT2DCD.INSTRUMENTTYPECD NOT IS MISSING 
   ;
quit;

%global etls_sql_pushDown;
%let etls_sql_pushDown = &sys_sql_ip_all;

%rcSet(&sqlrc); 



/**  Step end SQL Join **/

/*==========================================================================* 
 * Step:            Table Loader                          A5ELGGF9.AK0000X9 * 
 * Transform:       Table Loader (Version 2.1)                              * 
 * Description:                                                             * 
 *                                                                          * 
 * Source Table:    SQL Join - work.W1PXYJN09             A5ELGGF9.AF0000D0 * 
 * Target Table:    DQ_DRVT_INSTRUMENTTYPE -              A5ELGGF9.AE00004A * 
 *                   dm_dq.DQ_DRVT_INSTRUMENTTYPE                           * 
 *==========================================================================*/ 

%let transformID = %quote(A5ELGGF9.AK0000X9);
%let trans_rc = 0;
%let etls_stepStartTime = %sysfunc(datetime(), datetime20.); 

%let SYSLAST = %nrquote(work.W1PXYJN09); 

%let SYS_SQL_IP_SPEEDO = Y;
%let SYS_SQL_MAPPUTTO = sas_put;
%let SYS_SQLREDUCEPUT = DBMS;
%global etls_sql_pushDown;
%let etls_sql_pushDown = -1;
option DBIDIRECTEXEC;

%global etls_tableExist;
%global etls_numIndex;
%global etls_lastTable;
%let etls_tableExist = -1; 
%let etls_numIndex = -1; 
%let etls_lastTable = &SYSLAST; 

/*---- Define load data macro  ----*/ 

/* --------------------------------------------------------------
   Load Technique Selection: Update - Matching=SQLSet, New=AppendProc
   Blanks may replace non-blanks: false
   Constraint and index action selections: 'ASIS','ASIS','ASIS','ASIS'
   Additional options selections... 
      Set unmapped to missing on updates: false 
   -------------------------------------------------------------- */
%macro etls_loader;

   %let etls_tableOptions = ;
   
   /* Determine if the target table exists  */ 
   %let etls_tableExist = %eval(%sysfunc(exist(dm_dq.DQ_DRVT_INSTRUMENTTYPE, DATA)) or 
         %sysfunc(exist(dm_dq.DQ_DRVT_INSTRUMENTTYPE, VIEW))); 
   
   %let etls_hasUpdateIndex=0; 
   
   /*---- Create a new table  ----*/ 
   %if (&etls_tableExist eq 0) %then 
   %do;  /* if table does not exist  */ 
   
      %put %str(NOTE: Creating table ...);
      
      data dm_dq.DQ_DRVT_INSTRUMENTTYPE
              (dbnull = (
                         INSTRUMENTTYPECD = YES
                         INSTRUMENTTYPE = YES));
         attrib INSTRUMENTTYPECD length = $3
            format = $3.
            informat = $3.
            label = 'INSTRUMENTTYPECD'; 
         attrib INSTRUMENTTYPE length = $100
            format = $100.
            informat = $100.
            label = 'INSTRUMENTTYPE'; 
         call missing(of _all_);
         stop;
      run;
      
      %rcSet(&syserr); 
      
   %end;  /* if table does not exist  */ 
   
   %let etls_recCheckExist = 0; 
   %let etls_targetHasRows = 0; 
   %macro etls_recordCheck; 
      %let etls_recCheckExist = %eval(%sysfunc(exist(dm_dq.DQ_DRVT_INSTRUMENTTYPE, DATA)) or 
            %sysfunc(exist(dm_dq.DQ_DRVT_INSTRUMENTTYPE, VIEW))); 
      
      %if (&etls_recCheckExist) %then
      %do;
         %local etls_syntaxcheck; 
         %let etls_syntaxcheck = %sysfunc(getoption(syntaxcheck)); 
         /* Turn off syntaxcheck option to perform following steps  */ 
         options nosyntaxcheck;
         
         data _null_; 
            set dm_dq.DQ_DRVT_INSTRUMENTTYPE( obs=1 ); 
            call symput("etls_targetHasRows",'1'); 
         run; 
         /* Reset syntaxcheck option to previous setting  */ 
         options &etls_syntaxcheck; 
      %end;
   %mend etls_recordCheck;
   %etls_recordCheck;
   
   
   %if (&etls_targetHasRows) %then 
   %do;  /* if has rows */ 
      proc sql ; 
         /* update existing records in the master table  */ 
         update dm_dq.DQ_DRVT_INSTRUMENTTYPE as m
            set INSTRUMENTTYPE = (select case when t.INSTRUMENTTYPE="" then m.INSTRUMENTTYPE else t.INSTRUMENTTYPE end from &etls_lastTable as t 
                                where m.INSTRUMENTTYPECD = t.INSTRUMENTTYPECD)
               where exists (select * from &etls_lastTable as t
                                   where m.INSTRUMENTTYPECD = t.INSTRUMENTTYPECD);
         
         /* create a temporary table of new records from the transaction table  */ 
         create table etls_newrecords as 
            select * 
               from &etls_lastTable as t 
                  where not exists 
                     (select * from dm_dq.DQ_DRVT_INSTRUMENTTYPE
                   as m 
                                      where m.INSTRUMENTTYPECD = t.INSTRUMENTTYPECD)
         ; 
         
      quit;
      
      %let etls_lastTable = &SYSLAST;
      
      %let etls_tableOptions = ; 
      
      %global etls_sql_pushDown;
      %let etls_sql_pushDown = &sys_sql_ip_all;
      
      %rcSet(&sqlrc); 
      
   %end; /* if has rows */ 
   
   /*---- Append  ----*/ 
   %put %str(NOTE: Appending data ...);
   
   proc append base = dm_dq.DQ_DRVT_INSTRUMENTTYPE 
      data = &etls_lastTable (&etls_tableOptions)  force ; 
    run; 
   
   %rcSet(&syserr); 
   
   proc datasets lib = work nolist nowarn memtype = (data view);
      delete etls_newrecords;
   quit;
   
%mend etls_loader;
%etls_loader;

%let etls_recnt = 0;
%macro etls_recordCheck; 
   %let etls_recCheckExist = %eval(%sysfunc(exist(dm_dq.DQ_DRVT_INSTRUMENTTYPE, DATA)) or 
         %sysfunc(exist(dm_dq.DQ_DRVT_INSTRUMENTTYPE, VIEW))); 
   
   %if (&etls_recCheckExist) %then
   %do;
      proc sql noprint;
         select count(*) into :etls_recnt from dm_dq.DQ_DRVT_INSTRUMENTTYPE;
      quit;
   %end;
%mend etls_recordCheck;
%etls_recordCheck;



/**  Step end Table Loader **/

/*==========================================================================* 
 * Step:            User Written                          A5ELGGF9.AK0000XA * 
 * Transform:       User Written                                            * 
 * Description:     Сбор статистики                                         * 
 *                                                                          * 
 * Source Tables:   Extract - work.W1N4UFHAR              A5ELGGF9.AF0000CW * 
 *                  User Written - work.W1KBT2DCD         A5ELGGF9.AF0000CZ * 
 *                  ETL_JOB - etl_sys.ETL_JOB             A59S11RW.AE00001A * 
 * Target Table:    User Written - work.W1N5B6UUD         A5ELGGF9.AF0000D1 * 
 *                                                                          * 
 * User Written:    SourceCode                                              * 
 *==========================================================================*/ 

%let transformID = %quote(A5ELGGF9.AK0000XA);
%let trans_rc = 0;
%let etls_stepStartTime = %sysfunc(datetime(), datetime20.); 

%let etls_recnt = -1;
%let _INPUT_count = 3;
%let _INPUT = work.W1N4UFHAR;
%let _INPUT_connect = ;
%let _INPUT_engine = ;
%let _INPUT_memtype = VIEW;
%let _INPUT_options = %nrquote();
%let _INPUT_alter = %nrquote();
%let _INPUT_path = %nrquote(/Extract_A5ELGGF9.AF0000CW%(WorkTable%));
%let _INPUT_type = 1;
%let _INPUT_label = %nrquote();

%let _INPUT1 = work.W1N4UFHAR;
%let _INPUT1_connect = ;
%let _INPUT1_engine = ;
%let _INPUT1_memtype = VIEW;
%let _INPUT1_options = %nrquote();
%let _INPUT1_alter = %nrquote();
%let _INPUT1_path = %nrquote(/Extract_A5ELGGF9.AF0000CW%(WorkTable%));
%let _INPUT1_type = 1;
%let _INPUT1_label = %nrquote();

%let _INPUT2 = work.W1KBT2DCD;
%let _INPUT2_connect = ;
%let _INPUT2_engine = ;
%let _INPUT2_memtype = DATA;
%let _INPUT2_options = %nrquote();
%let _INPUT2_alter = %nrquote();
%let _INPUT2_path = %nrquote(/User Written_A5ELGGF9.AF0000CZ%(WorkTable%));
%let _INPUT2_type = 1;
%let _INPUT2_label = %nrquote();

%let _INPUT3 = etl_sys.ETL_JOB;
%let _INPUT3_connect =  PATH=DWH.IMB.RU AUTHDOMAIN="OraAuth_ETL_SYS" 
;
%let _INPUT3_engine = ORACLE;
%let _INPUT3_memtype = DATA;
%let _INPUT3_options = %nrquote();
%let _INPUT3_alter = %nrquote();
%let _INPUT3_path = %nrquote(/DWH_DWHDDS_SYS/Tables/ETL_SYS/ETL_JOB%(Table%));
%let _INPUT3_type = 1;
%let _INPUT3_label = %nrquote();

%let _OUTPUT_count = 1;
%let _OUTPUT = work.W1N5B6UUD;
%let _OUTPUT_connect = ;
%let _OUTPUT_engine = ;
%let _OUTPUT_memtype = DATA;
%let _OUTPUT_options = %nrquote();
%let _OUTPUT_alter = %nrquote();
%let _OUTPUT_path = %nrquote(/User Written_A5ELGGF9.AF0000D1%(WorkTable%));
%let _OUTPUT_type = 1;
%let _OUTPUT_label = %nrquote();
/* List of target columns to keep  */ 
%let _OUTPUT_keep = REP_DT REP_ID PRC CNT_ALL CNT_ERR DWH_DT;
%let _OUTPUT_col_count = 6;
%let _OUTPUT_col0_name = REP_DT;
%let _OUTPUT_col0_table = work.W1N5B6UUD;
%let _OUTPUT_col0_length = 8;
%let _OUTPUT_col0_type = ;
%let _OUTPUT_col0_format = DATETIME20.;
%let _OUTPUT_col0_informat = ;
%let _OUTPUT_col0_label = %nrquote();
%let _OUTPUT_col0_exp = ;
%let _OUTPUT_col0_input_count = 0;
%let _OUTPUT_col1_name = REP_ID;
%let _OUTPUT_col1_table = work.W1N5B6UUD;
%let _OUTPUT_col1_length = 8;
%let _OUTPUT_col1_type = ;
%let _OUTPUT_col1_format = ;
%let _OUTPUT_col1_informat = ;
%let _OUTPUT_col1_label = %nrquote();
%let _OUTPUT_col1_exp = ;
%let _OUTPUT_col1_input_count = 0;
%let _OUTPUT_col2_name = PRC;
%let _OUTPUT_col2_table = work.W1N5B6UUD;
%let _OUTPUT_col2_length = 8;
%let _OUTPUT_col2_type = ;
%let _OUTPUT_col2_format = ;
%let _OUTPUT_col2_informat = ;
%let _OUTPUT_col2_label = %nrquote();
%let _OUTPUT_col2_exp = ;
%let _OUTPUT_col2_input_count = 0;
%let _OUTPUT_col3_name = CNT_ALL;
%let _OUTPUT_col3_table = work.W1N5B6UUD;
%let _OUTPUT_col3_length = 8;
%let _OUTPUT_col3_type = ;
%let _OUTPUT_col3_format = ;
%let _OUTPUT_col3_informat = ;
%let _OUTPUT_col3_label = %nrquote();
%let _OUTPUT_col3_exp = ;
%let _OUTPUT_col3_input_count = 0;
%let _OUTPUT_col4_name = CNT_ERR;
%let _OUTPUT_col4_table = work.W1N5B6UUD;
%let _OUTPUT_col4_length = 8;
%let _OUTPUT_col4_type = ;
%let _OUTPUT_col4_format = ;
%let _OUTPUT_col4_informat = ;
%let _OUTPUT_col4_label = %nrquote();
%let _OUTPUT_col4_exp = ;
%let _OUTPUT_col4_input_count = 0;
%let _OUTPUT_col5_name = DWH_DT;
%let _OUTPUT_col5_table = work.W1N5B6UUD;
%let _OUTPUT_col5_length = 8;
%let _OUTPUT_col5_type = ;
%let _OUTPUT_col5_format = DATETIME20.;
%let _OUTPUT_col5_informat = ;
%let _OUTPUT_col5_label = %nrquote();
%let _OUTPUT_col5_exp = ;
%let _OUTPUT_col5_input_count = 0;

%let _OUTPUT1 = work.W1N5B6UUD;
%let _OUTPUT1_connect = ;
%let _OUTPUT1_engine = ;
%let _OUTPUT1_memtype = DATA;
%let _OUTPUT1_options = %nrquote();
%let _OUTPUT1_alter = %nrquote();
%let _OUTPUT1_path = %nrquote(/User Written_A5ELGGF9.AF0000D1%(WorkTable%));
%let _OUTPUT1_type = 1;
%let _OUTPUT1_label = %nrquote();
/* List of target columns to keep  */ 
%let _OUTPUT1_keep = REP_DT REP_ID PRC CNT_ALL CNT_ERR DWH_DT;
%let _OUTPUT1_col_count = 6;
%let _OUTPUT1_col0_name = REP_DT;
%let _OUTPUT1_col0_table = work.W1N5B6UUD;
%let _OUTPUT1_col0_length = 8;
%let _OUTPUT1_col0_type = ;
%let _OUTPUT1_col0_format = DATETIME20.;
%let _OUTPUT1_col0_informat = ;
%let _OUTPUT1_col0_label = %nrquote();
%let _OUTPUT1_col0_exp = ;
%let _OUTPUT1_col0_input_count = 0;
%let _OUTPUT1_col1_name = REP_ID;
%let _OUTPUT1_col1_table = work.W1N5B6UUD;
%let _OUTPUT1_col1_length = 8;
%let _OUTPUT1_col1_type = ;
%let _OUTPUT1_col1_format = ;
%let _OUTPUT1_col1_informat = ;
%let _OUTPUT1_col1_label = %nrquote();
%let _OUTPUT1_col1_exp = ;
%let _OUTPUT1_col1_input_count = 0;
%let _OUTPUT1_col2_name = PRC;
%let _OUTPUT1_col2_table = work.W1N5B6UUD;
%let _OUTPUT1_col2_length = 8;
%let _OUTPUT1_col2_type = ;
%let _OUTPUT1_col2_format = ;
%let _OUTPUT1_col2_informat = ;
%let _OUTPUT1_col2_label = %nrquote();
%let _OUTPUT1_col2_exp = ;
%let _OUTPUT1_col2_input_count = 0;
%let _OUTPUT1_col3_name = CNT_ALL;
%let _OUTPUT1_col3_table = work.W1N5B6UUD;
%let _OUTPUT1_col3_length = 8;
%let _OUTPUT1_col3_type = ;
%let _OUTPUT1_col3_format = ;
%let _OUTPUT1_col3_informat = ;
%let _OUTPUT1_col3_label = %nrquote();
%let _OUTPUT1_col3_exp = ;
%let _OUTPUT1_col3_input_count = 0;
%let _OUTPUT1_col4_name = CNT_ERR;
%let _OUTPUT1_col4_table = work.W1N5B6UUD;
%let _OUTPUT1_col4_length = 8;
%let _OUTPUT1_col4_type = ;
%let _OUTPUT1_col4_format = ;
%let _OUTPUT1_col4_informat = ;
%let _OUTPUT1_col4_label = %nrquote();
%let _OUTPUT1_col4_exp = ;
%let _OUTPUT1_col4_input_count = 0;
%let _OUTPUT1_col5_name = DWH_DT;
%let _OUTPUT1_col5_table = work.W1N5B6UUD;
%let _OUTPUT1_col5_length = 8;
%let _OUTPUT1_col5_type = ;
%let _OUTPUT1_col5_format = DATETIME20.;
%let _OUTPUT1_col5_informat = ;
%let _OUTPUT1_col5_label = %nrquote();
%let _OUTPUT1_col5_exp = ;
%let _OUTPUT1_col5_input_count = 0;

/*---- Start of User Written Code  ----*/ 

proc sql;
/*Кол-во всех уникальных деривативных сделок*/
	select count(distinct DEALRK) into :CNT_ALL from &_INPUT1;
/*Кол-во ошибочных сделок*/
	select count(distinct DEALRK) into :CNT_ERR from &_INPUT2;
/*Дата успешного выполнения процесса в DWH*/
	select end_dttm into :DWH_DT from &_INPUT3 where JOB_ID = (
  select MAX(job_id) 
  from &_INPUT3 
  where upper(job_nm) = '401_021_MART_DEAL' and success_flg = 'Y'
  );
quit;
%error_check(mpStepType=SQL);

data &_OUTPUT1;
	attrib
		REP_DT length = 8 format = DATETIME20.
		REP_ID length = 8
		PRC length =8
		CNT_ALL length=8
		CNT_ERR length = 8
		DWH_DT length = 8 format = DATETIME20.
	;

	REP_DT = &REPDT.;
	REP_ID = 2;
	PRC = DIVIDE(&CNT_ERR. , &CNT_ALL.) * 100;
	if missing(PRC) then PRC=0;
	CNT_ALL = &CNT_ALL.;
	CNT_ERR = &CNT_ERR.;
	DWH_DT = "&DWH_DT."dt;
run;
%error_check(mpStepType=DATA);
/*---- End of User Written Code  ----*/ 

%rcSet(&syserr); 
%rcSet(&sqlrc); 


/**  Step end User Written **/

/*==========================================================================* 
 * Step:            Table Loader                          A5ELGGF9.AK0000XB * 
 * Transform:       Table Loader (Version 2.1)                              * 
 * Description:                                                             * 
 *                                                                          * 
 * Source Table:    User Written - work.W1N5B6UUD         A5ELGGF9.AF0000D1 * 
 * Target Table:    DQ_DRVT_REPORT_PRC -                  A5ELGGF9.AE00004E * 
 *                   dm_dq.DQ_DRVT_REPORT_PRC                               * 
 *==========================================================================*/ 

%let transformID = %quote(A5ELGGF9.AK0000XB);
%let trans_rc = 0;
%let etls_stepStartTime = %sysfunc(datetime(), datetime20.); 

%let SYSLAST = %nrquote(work.W1N5B6UUD); 

%let SYS_SQL_IP_SPEEDO = Y;
%let SYS_SQL_MAPPUTTO = sas_put;
%let SYS_SQLREDUCEPUT = DBMS;
%global etls_sql_pushDown;
%let etls_sql_pushDown = -1;
option DBIDIRECTEXEC;

%global etls_tableExist;
%global etls_numIndex;
%global etls_lastTable;
%let etls_tableExist = -1; 
%let etls_numIndex = -1; 
%let etls_lastTable = &SYSLAST; 

/*---- Define load data macro  ----*/ 

/* --------------------------------------------------------------
   Load Technique Selection: AppendToExisting - AppendProc
   Constraint and index action selections: 'ASIS','ASIS','ASIS','ASIS'
   Additional options selections... 
      Set unmapped to missing on updates: false 
   -------------------------------------------------------------- */
%macro etls_loader;

   %let etls_tableOptions = ;
   
   /*---- Map the columns  ----*/ 
   proc datasets lib = work nolist nowarn memtype = (data view);
      delete WJ2XXWZ;
   quit;
   
   %put %str(NOTE: Mapping columns ...);
   proc sql;
      create view work.WJ2XXWZ as
         select
            REP_DT   
               informat = DATETIME20.,
            REP_ID   
               format = 7.
               informat = 7.,
            PRC   
               format = 19.8
               informat = 19.8,
            CNT_ALL   
               format = 13.
               informat = 13.,
            CNT_ERR   
               format = 13.
               informat = 13.,
            DWH_DT   
               informat = DATETIME20.
      from &etls_lastTable
      ;
   quit;
   
   %let SYSLAST = work.WJ2XXWZ;
   
   %let etls_lastTable = &SYSLAST; 
   %let etls_tableOptions = ; 
   
   /* Determine if the target table exists  */ 
   %let etls_tableExist = %eval(%sysfunc(exist(dm_dq.DQ_DRVT_REPORT_PRC, DATA)) or 
         %sysfunc(exist(dm_dq.DQ_DRVT_REPORT_PRC, VIEW))); 
   
   /*---- Create a new table  ----*/ 
   %if (&etls_tableExist eq 0) %then 
   %do;  /* if table does not exist  */ 
   
      %put %str(NOTE: Creating table ...);
      
      data dm_dq.DQ_DRVT_REPORT_PRC
              (dbnull = (
                         REP_DT = NO
                         REP_ID = NO
                         PRC = YES
                         CNT_ALL = YES
                         CNT_ERR = YES
                         DWH_DT = YES));
         attrib REP_DT length = 8
            format = DATETIME20.
            informat = DATETIME20.
            label = 'REP_DT'; 
         attrib REP_ID length = 8
            format = 7.
            informat = 7.
            label = 'REP_ID'; 
         attrib PRC length = 8
            format = 19.8
            informat = 19.8
            label = 'PRC'; 
         attrib CNT_ALL length = 8
            format = 13.
            informat = 13.
            label = 'CNT_ALL'; 
         attrib CNT_ERR length = 8
            format = 13.
            informat = 13.
            label = 'CNT_ERR'; 
         attrib DWH_DT length = 8
            format = DATETIME20.
            informat = DATETIME20.
            label = 'DWH_DT'; 
         call missing(of _all_);
         stop;
      run;
      
      %rcSet(&syserr); 
      
   %end;  /* if table does not exist  */ 
   
   /*---- Append  ----*/ 
   %put %str(NOTE: Appending data ...);
   
   proc append base = dm_dq.DQ_DRVT_REPORT_PRC 
      data = &etls_lastTable (&etls_tableOptions)  force ; 
    run; 
   
   %rcSet(&syserr); 
   
   proc datasets lib = work nolist nowarn memtype = (data view);
      delete WJ2XXWZ;
   quit;
   
%mend etls_loader;
%etls_loader;

%let etls_recnt = 0;
%macro etls_recordCheck; 
   %let etls_recCheckExist = %eval(%sysfunc(exist(dm_dq.DQ_DRVT_REPORT_PRC, DATA)) or 
         %sysfunc(exist(dm_dq.DQ_DRVT_REPORT_PRC, VIEW))); 
   
   %if (&etls_recCheckExist) %then
   %do;
      proc sql noprint;
         select count(*) into :etls_recnt from dm_dq.DQ_DRVT_REPORT_PRC;
      quit;
   %end;
%mend etls_recordCheck;
%etls_recordCheck;



/**  Step end Table Loader **/

/*==========================================================================* 
 * Step:            Завершить модуль                      A5ELGGF9.AK0000XC * 
 * Transform:       Завершить модуль                                        * 
 * Description:                                                             * 
 *==========================================================================*/ 

%let transformID = %quote(A5ELGGF9.AK0000XC);
%let trans_rc = 0;
%let etls_stepStartTime = %sysfunc(datetime(), datetime20.); 

%let _INPUT_count = 0; 
%let _OUTPUT_count = 0; 


/*****************************************************************
* ВЕРСИЯ:
*   $Id: transform_job_finish.sas 247 2012-04-03 07:31:10Z nesterenok $
*
******************************************************************
* НАЗНАЧЕНИЕ:
*   Регистрирует конец модуля ETL.
*
* ПАРАМЕТРЫ:
*   нет
*
******************************************************************/

%macro transform_job_finish;

   /* Продолжаем модуль */
   %job_continue_reg(mpJobType=JOB, mpJobName=&ETLS_JobName., mpPostEvent=N);

   /* Завершаем модуль */
   %job_finish_reg(mpJobType=JOB);

%mend transform_job_finish;

%transform_job_finish;


%rcSet(&syserr); 
%rcSet(&sysrc); 
%rcSet(&sqlrc); 



/**  Step end Завершить модуль **/

%let etls_endTime = %sysfunc(datetime(),datetime.);



/**  Job end 202_020_Mart_DQ_DRVT_REP02 **/

/* Reset jobid and name */
%let jobID = %quote(A5ELGGF9.AH00003N);
%let etls_jobName = %nrquote(202_002_Stream_DQ_DRVT);

/**************************************************************************** 
 * Job:             202_030_Mart_DQ_DRVT_REP03            A5ELGGF9.AH000029 * 
 * Description:     Дата начала текущего процентнго периода по сделке       * 
 *                  (IRS, CIRS, CAP, FLR) должна быть меньше или равна      * 
 *                  дате проверки и меньше даты начала следующего           * 
 *                   процентного периода.                                   * 
 *                                                                          * 
 * Metadata Server: bravo14                                                 * 
 * Port:            8561                                                    * 
 * Location:        /DWH_DMDQ_REP/Jobs/Includes/DQ_DRVT                     * 
 *                                                                          * 
 * Server:          SASApp                                A5C46MZY.AQ000002 * 
 *                                                                          * 
 * Source Tables:   INSTRUMENTTYPE -                      A5LX14I5.A900001B * 
 *                   DM_DRVT.INSTRUMENTTYPE                                 * 
 *                  DEAL - DM_DRVT.DEAL                   A5LX14I5.A9000014 * 
 *                  ETL_JOB - etl_sys.ETL_JOB             A59S11RW.AE00001A * 
 * Target Tables:   DQ_DRVT_DWH_DM - dm_dq.DQ_DRVT_DWH_DM A5ELGGF9.AE000049 * 
 *                  DQ_DRVT_INSTRUMENTTYPE -              A5ELGGF9.AE00004A * 
 *                   dm_dq.DQ_DRVT_INSTRUMENTTYPE                           * 
 *                  DQ_DRVT_REPORT_PRC -                  A5ELGGF9.AE00004E * 
 *                   dm_dq.DQ_DRVT_REPORT_PRC                               * 
 *                  DQ_DRVT_DWH_DM - dm_dq.DQ_DRVT_DWH_DM A5ELGGF9.AE000049 * 
 *                  DQ_DRVT_REPORT_PRC -                  A5ELGGF9.AE00004E * 
 *                   dm_dq.DQ_DRVT_REPORT_PRC                               * 
 *                                                                          * 
 * Generated on:    16 Июль 2013 г. 17:46:17 MSD                            * 
 * Generated by:    sasdwh                                                  * 
 * Version:         SAS Data Integration Studio 4.5                         * 
 ****************************************************************************/ 

/* General macro variables  */ 
%let jobID = %quote(A5ELGGF9.AH000029);
%let etls_jobName = %nrquote(202_030_Mart_DQ_DRVT_REP03);
%let etls_userID = %nrquote(sasdwh);


/* Create metadata macro variables */
%let IOMServer      = %nrquote(SASApp);
%let metaPort       = %nrquote(8561);
%let metaServer     = %nrquote(bravo14);

/* Set metadata options */
options metaport       = &metaPort 
        metaserver     = "&metaServer"; 

/* Setup for capturing job status  */ 
%let etls_startTime = %sysfunc(datetime(),datetime.);
%let etls_recordsBefore = 0;
%let etls_recordsAfter = 0;
%let etls_lib = 0;
%let etls_table = 0;

%global etls_debug; 
%macro etls_setDebug; 
   %if %str(&etls_debug) ne 0 %then 
      OPTIONS MPRINT%str(;); 
%mend; 
%etls_setDebug; 

/*---- Start of Pre-Process Code  ----*/ 

%LET REPDT=&DMDQ_REPORT_START_DTTM;
/*---- End of Pre-Process Code  ----*/ 

%rcSet(&syserr); 
%rcSet(&sqlrc); 

/*==========================================================================* 
 * Step:            Начать модуль                         A5ELGGF9.AK0000XD * 
 * Transform:       Начать модуль                                           * 
 * Description:                                                             * 
 *==========================================================================*/ 

%let transformID = %quote(A5ELGGF9.AK0000XD);
%let trans_rc = 0;
%let etls_stepStartTime = %sysfunc(datetime(), datetime20.); 

%let _INPUT_count = 0; 
%let _OUTPUT_count = 0; 


/*****************************************************************
* ВЕРСИЯ:
*   $Id: transform_job_start.sas 1747 2012-08-01 11:26:13Z nesterenok $
*
******************************************************************
* НАЗНАЧЕНИЕ:
*   Регистрирует начало модуля ETL.
*
* ПАРАМЕТРЫ:
*   нет
*
******************************************************************/

%macro transform_job_start;

   /* Продолжаем поток (или создаем новый) */
   %local lmvStreamName;
   %if %sysfunc(sysexist(LSB_JOBNAME)) %then
      %let lmvStreamName = %scan(%sysfunc(sysget(LSB_JOBNAME)), 3, :);
   %else
      %let lmvStreamName = ;

   %job_continue_reg(mpJobType=STREAM, mpJobName=&lmvStreamName, mpPostEvent=N, mpForcedStart=Y);

   /* Для DI, начинаем поток заново, если старый был начат не сегодня */
   %if %length(&lmvStreamName) eq 0 and &STREAM_START_DT ne %sysfunc(today()) %then %do;
      %job_start_reg(mpJobType=STREAM, mpParentJobId=, mpJobName=&lmvStreamName.);
   %end;

   /* Начинаем модуль */
   %job_start_reg(mpJobType=JOB, mpParentJobId=&STREAM_ID, mpJobName=&ETLS_JobName.);

%mend transform_job_start;

%transform_job_start;


%rcSet(&syserr); 
%rcSet(&sysrc); 
%rcSet(&sqlrc); 



/**  Step end Начать модуль **/

/*==========================================================================* 
 * Step:            Очистить таблицу                      A5ELGGF9.AK0000XE * 
 * Transform:       Очистить таблицу                                        * 
 * Description:                                                             * 
 *                                                                          * 
 * Target Table:    DQ_DRVT_DWH_DM - dm_dq.DQ_DRVT_DWH_DM A5ELGGF9.AE000049 * 
 *==========================================================================*/ 

%let transformID = %quote(A5ELGGF9.AK0000XE);
%let trans_rc = 0;
%let etls_stepStartTime = %sysfunc(datetime(), datetime20.); 

%let _INPUT_count = 0; 
%let _OUTPUT_count = 1; 
%let _OUTPUT = dm_dq.DQ_DRVT_DWH_DM;
%let _OUTPUT_connect =  DEFER=YES PATH=DWH.IMB.RU AUTHDOMAIN="OraAuth_DM_DQ" 
;
%let _OUTPUT_engine = ORACLE;
%let _OUTPUT_memtype = DATA;
%let _OUTPUT_options = %nrquote();
%let _OUTPUT_alter = %nrquote();
%let _OUTPUT_path = %nrquote(/DWH_DMDQ_REP/Marts/DQ_DRVT/DQ_DRVT_DWH_DM%(Table%));
%let _OUTPUT_type = 1;
%let _OUTPUT_label = %nrquote();
/* List of target columns to keep  */ 
%let _OUTPUT_keep = REPORTCODE REPORTDATE FRONTKDEALID FRONTFDEALID DEALID 
        INSTRUMENTTYPECD DEALDATE ADDITIONALINFORMATION STARTDATE NEXTDATE 
        ENDDATE LEGNUMBER VALUEFRS VALUESEC;

%let tpOut = dm_dq.DQ_DRVT_DWH_DM;
%let tpOut_connect =  DEFER=YES PATH=DWH.IMB.RU AUTHDOMAIN="OraAuth_DM_DQ" 
;
%let tpOut_engine = ORACLE;
%let tpOut_memtype = DATA;
%let tpOut_options = %nrquote();
%let tpOut_alter = %nrquote();
%let tpOut_path = %nrquote(/DWH_DMDQ_REP/Marts/DQ_DRVT/DQ_DRVT_DWH_DM%(Table%));
%let tpOut_type = 1;
%let tpOut_label = %nrquote();
/* List of target columns to keep  */ 
%let tpOut_keep = REPORTCODE REPORTDATE FRONTKDEALID FRONTFDEALID DEALID 
        INSTRUMENTTYPECD DEALDATE ADDITIONALINFORMATION STARTDATE NEXTDATE 
        ENDDATE LEGNUMBER VALUEFRS VALUESEC;


%let tpWhere = %nrquote(REPORTCODE = %'П-03%' AND REPORTDATE = &DMDQ_REPORT_START_DTTM);

/* List of target columns to keep  */ 
%let _keep = REPORTCODE REPORTDATE FRONTKDEALID FRONTFDEALID DEALID 
        INSTRUMENTTYPECD DEALDATE ADDITIONALINFORMATION STARTDATE NEXTDATE 
        ENDDATE LEGNUMBER VALUEFRS VALUESEC;
/* List of target columns to keep  */ 
%let keep = REPORTCODE REPORTDATE FRONTKDEALID FRONTFDEALID DEALID 
        INSTRUMENTTYPECD DEALDATE ADDITIONALINFORMATION STARTDATE NEXTDATE 
        ENDDATE LEGNUMBER VALUEFRS VALUESEC;
/*****************************************************************
* ВЕРСИЯ:
*   $Id: transform_table_delete.sas 2142 2012-08-17 14:15:09Z nesterenok $
*
******************************************************************
* НАЗНАЧЕНИЕ:
*   Удаляет из указанной таблицы записи.
*
* ПАРАМЕТРЫ:
*   tpOut                  + имя целевой таблицы, которая будет очищена
*   tpWhere                - условие отбора записей под удаление
*                            по умолчанию отсутствует, т.е. удаляются все записи
*
******************************************************************/

%macro transform_table_delete;

   /* Удаляем записи */
   /* TODO: truncate */
   proc sql;
      delete from &tpOut
      %if %length(&tpWhere) gt 0 %then %do;
         where (%unquote(&tpWhere))
      %end;
      ;
   quit;
   %error_check (mpStepType=SQL);

%mend transform_table_delete;

%transform_table_delete;


%rcSet(&syserr); 
%rcSet(&sysrc); 
%rcSet(&sqlrc); 



/**  Step end Очистить таблицу **/

/*==========================================================================* 
 * Step:            Очистить таблицу                      A5ELGGF9.AK0000XF * 
 * Transform:       Очистить таблицу                                        * 
 * Description:                                                             * 
 *                                                                          * 
 * Target Table:    DQ_DRVT_REPORT_PRC -                  A5ELGGF9.AE00004E * 
 *                   dm_dq.DQ_DRVT_REPORT_PRC                               * 
 *==========================================================================*/ 

%let transformID = %quote(A5ELGGF9.AK0000XF);
%let trans_rc = 0;
%let etls_stepStartTime = %sysfunc(datetime(), datetime20.); 

%let _INPUT_count = 0; 
%let _OUTPUT_count = 1; 
%let _OUTPUT = dm_dq.DQ_DRVT_REPORT_PRC;
%let _OUTPUT_connect =  DEFER=YES PATH=DWH.IMB.RU AUTHDOMAIN="OraAuth_DM_DQ" 
;
%let _OUTPUT_engine = ORACLE;
%let _OUTPUT_memtype = DATA;
%let _OUTPUT_options = %nrquote();
%let _OUTPUT_alter = %nrquote();
%let _OUTPUT_path = %nrquote(/DWH_DMDQ_REP/Marts/DQ_DRVT/DQ_DRVT_REPORT_PRC%(Table%));
%let _OUTPUT_type = 1;
%let _OUTPUT_label = %nrquote();
/* List of target columns to keep  */ 
%let _OUTPUT_keep = REP_DT REP_ID PRC CNT_ALL CNT_ERR DWH_DT;

%let tpOut = dm_dq.DQ_DRVT_REPORT_PRC;
%let tpOut_connect =  DEFER=YES PATH=DWH.IMB.RU AUTHDOMAIN="OraAuth_DM_DQ" 
;
%let tpOut_engine = ORACLE;
%let tpOut_memtype = DATA;
%let tpOut_options = %nrquote();
%let tpOut_alter = %nrquote();
%let tpOut_path = %nrquote(/DWH_DMDQ_REP/Marts/DQ_DRVT/DQ_DRVT_REPORT_PRC%(Table%));
%let tpOut_type = 1;
%let tpOut_label = %nrquote();
/* List of target columns to keep  */ 
%let tpOut_keep = REP_DT REP_ID PRC CNT_ALL CNT_ERR DWH_DT;


%let tpWhere = %nrquote(REP_ID = 3 AND REP_DT = &DMDQ_REPORT_START_DTTM);

/* List of target columns to keep  */ 
%let _keep = REP_DT REP_ID PRC CNT_ALL CNT_ERR DWH_DT;
/* List of target columns to keep  */ 
%let keep = REP_DT REP_ID PRC CNT_ALL CNT_ERR DWH_DT;
/*****************************************************************
* ВЕРСИЯ:
*   $Id: transform_table_delete.sas 2142 2012-08-17 14:15:09Z nesterenok $
*
******************************************************************
* НАЗНАЧЕНИЕ:
*   Удаляет из указанной таблицы записи.
*
* ПАРАМЕТРЫ:
*   tpOut                  + имя целевой таблицы, которая будет очищена
*   tpWhere                - условие отбора записей под удаление
*                            по умолчанию отсутствует, т.е. удаляются все записи
*
******************************************************************/

%macro transform_table_delete;

   /* Удаляем записи */
   /* TODO: truncate */
   proc sql;
      delete from &tpOut
      %if %length(&tpWhere) gt 0 %then %do;
         where (%unquote(&tpWhere))
      %end;
      ;
   quit;
   %error_check (mpStepType=SQL);

%mend transform_table_delete;

%transform_table_delete;


%rcSet(&syserr); 
%rcSet(&sysrc); 
%rcSet(&sqlrc); 



/**  Step end Очистить таблицу **/

/*==========================================================================* 
 * Step:            Extract                               A5ELGGF9.AK0000XG * 
 * Transform:       Extract                                                 * 
 * Description:     Отбор сделокIRS CIS CAP FLR                             * 
 *                                                                          * 
 * Source Table:    DEAL - DM_DRVT.DEAL                   A5LX14I5.A9000014 * 
 * Target Table:    Extract - work.W1N67GXG4              A5ELGGF9.AF0000D2 * 
 *==========================================================================*/ 

%let transformID = %quote(A5ELGGF9.AK0000XG);
%let trans_rc = 0;
%let etls_stepStartTime = %sysfunc(datetime(), datetime20.); 

%let etls_recnt = 0;
%macro etls_recordCheck; 
   %let etls_recCheckExist = %eval(%sysfunc(exist(DM_DRVT.DEAL, DATA)) or 
         %sysfunc(exist(DM_DRVT.DEAL, VIEW))); 
   
   %if (&etls_recCheckExist) %then
   %do;
      proc sql noprint;
         select count(*) into :etls_recnt from DM_DRVT.DEAL;
      quit;
   %end;
%mend etls_recordCheck;
%etls_recordCheck;

%let SYSLAST = %nrquote(DM_DRVT.DEAL); 

%let SYS_SQL_IP_SPEEDO = Y;
%let SYS_SQL_MAPPUTTO = sas_put;
%let SYS_SQLREDUCEPUT = DBMS;
%global etls_sql_pushDown;
%let etls_sql_pushDown = -1;
option DBIDIRECTEXEC;

/*---- Map the columns  ----*/ 
proc datasets lib = work nolist nowarn memtype = (data view);
   delete W1N67GXG4;
quit;

data _null_;
   put "NOTE: The following column(s) do not have a column mapping, so the"
        " value(s) will be set to missing: FLAGPFI";
run;

%put %str(NOTE: Mapping columns ...);
proc sql;
   create view work.W1N67GXG4 as
      select
         DEALRK   
            format = 11.
            informat = 11.,
         VALID_FROM_DTTM,
         VALID_TO_DTTM,
         FRONTKDEALID,
         FRONTFDEALID,
         DEALDATE,
         DEALGROUP,
         INSTRUMENTTYPECD,
         "" as FLAGPFI length = 20
            format = $20.
            informat = $20.
            label = 'FLAGPFI',
         INSTRUMENTCLASSCD,
         FLAGDELIVERYCD,
         FLAGOTC,
         CUSTOMERNO,
         PREMIUM   
            format = 20.5
            informat = 20.5,
         PREMIUMCCY,
         OPTIONTYPECD,
         PREMIUMPAYMENTMODE,
         HEDGEINDICATOR,
         ORIGINALMATURITY   
            format = 19.
            informat = 19.,
         DEALSTATUSCD length = 10   
            format = $10.
            informat = $10.,
         DEALID1,
         DEALTYPE1,
         DEALSUBTYPE1,
         DEALDIRECTION1,
         PLACEDTAKEN1,
         VALUEDATE1,
         MATURITYDATE1,
         UNDERLYINGCCY1,
         UNDERLYINGNAME1,
         NOTIONALCURRENT1   
            format = 20.5
            informat = 20.5,
         PRICECCY1,
         GROSSRATE1   
            format = 20.5
            informat = 20.5,
         AMOUNT1   
            format = 20.5
            informat = 20.5,
         CALCBASIS1,
         INTERESTRATE1   
            format = 20.5
            informat = 20.5,
         INTERESTRATETYPECD1,
         PAYMENTFREQUENCY1,
         STARTDATE1,
         STARTPERIODDATE1,
         NEXTPERIODDATE1,
         NEXTINTPAYMENTDATE1,
         DCDFX_DEALID,
         DCDFX_TYPE,
         DCDFX_SUBTYPE,
         DEALID2,
         DEALTYPE2,
         DEALSUBTYPE2,
         DEALDIRECTION2 length = 10   
            format = $10.
            informat = $10.,
         PLACEDTAKEN2,
         VALUEDATE2,
         MATURITYDATE2,
         UNDERLYINGCCY2,
         UNDERLYINGNAME2,
         NOTIONALCURRENT2   
            format = 20.5
            informat = 20.5,
         PRICECCY2,
         GROSSRATE2   
            format = 20.5
            informat = 20.5,
         AMOUNT2   
            format = 20.5
            informat = 20.5,
         CALCBASIS2,
         INTERESTRATE2   
            format = 20.5
            informat = 20.5,
         INTERESTRATETYPECD2,
         PAYMENTFREQUENCY2,
         STARTDATE2,
         STARTPERIODDATE2,
         NEXTPERIODDATE2,
         NEXTINTPAYMENTDATE2
   from &SYSLAST
      where INSTRUMENTTYPECD in ('IRS', 'CIS', 'CAP', 'FLR') 
         AND 
         VALID_FROM_DTTM <= &REPDT < VALID_TO_DTTM
   ;
quit;

%let SYSLAST = work.W1N67GXG4;

%global etls_sql_pushDown;
%let etls_sql_pushDown = &sys_sql_ip_all;

%rcSet(&sqlrc); 



/**  Step end Extract **/

/*==========================================================================* 
 * Step:            User Written                          A5ELGGF9.AK0000XH * 
 * Transform:       User Written                                            * 
 * Description:     Проверка условий DQ                                     * 
 *                                                                          * 
 * Source Table:    Extract - work.W1N67GXG4              A5ELGGF9.AF0000D2 * 
 * Target Table:    User Written - work.W1N676JCA         A5ELGGF9.AF0000D3 * 
 *                                                                          * 
 * User Written:    SourceCode                                              * 
 *==========================================================================*/ 

%let transformID = %quote(A5ELGGF9.AK0000XH);
%let trans_rc = 0;
%let etls_stepStartTime = %sysfunc(datetime(), datetime20.); 

%let etls_recnt = -1;
%let SYSLAST = %nrquote(work.W1N67GXG4); 

%let _INPUT_count = 1;
%let _INPUT = work.W1N67GXG4;
%let _INPUT_connect = ;
%let _INPUT_engine = ;
%let _INPUT_memtype = VIEW;
%let _INPUT_options = %nrquote();
%let _INPUT_alter = %nrquote();
%let _INPUT_path = %nrquote(/Extract_A5ELGGF9.AF0000D2%(WorkTable%));
%let _INPUT_type = 1;
%let _INPUT_label = %nrquote();

%let _INPUT1 = work.W1N67GXG4;
%let _INPUT1_connect = ;
%let _INPUT1_engine = ;
%let _INPUT1_memtype = VIEW;
%let _INPUT1_options = %nrquote();
%let _INPUT1_alter = %nrquote();
%let _INPUT1_path = %nrquote(/Extract_A5ELGGF9.AF0000D2%(WorkTable%));
%let _INPUT1_type = 1;
%let _INPUT1_label = %nrquote();

%let _OUTPUT_count = 1;
%let _OUTPUT = work.W1N676JCA;
%let _OUTPUT_connect = ;
%let _OUTPUT_engine = ;
%let _OUTPUT_memtype = DATA;
%let _OUTPUT_options = %nrquote();
%let _OUTPUT_alter = %nrquote();
%let _OUTPUT_path = %nrquote(/User Written_A5ELGGF9.AF0000D3%(WorkTable%));
%let _OUTPUT_type = 1;
%let _OUTPUT_label = %nrquote();
/* List of target columns to keep  */ 
%let _OUTPUT_keep = REPORTCODE REPORTDATE FRONTKDEALID FRONTFDEALID DEALID 
        INSTRUMENTTYPECD DEALDATE STARTDATE NEXTDATE ENDDATE LEGNUMBER DEALRK;
%let _OUTPUT_col_count = 12;
%let _OUTPUT_col0_name = REPORTCODE;
%let _OUTPUT_col0_table = work.W1N676JCA;
%let _OUTPUT_col0_length = 5;
%let _OUTPUT_col0_type = $;
%let _OUTPUT_col0_format = $5.;
%let _OUTPUT_col0_informat = $5.;
%let _OUTPUT_col0_label = %nrquote();
%let _OUTPUT_col0_exp = ;
%let _OUTPUT_col0_input_count = 0;
%let _OUTPUT_col1_name = REPORTDATE;
%let _OUTPUT_col1_table = work.W1N676JCA;
%let _OUTPUT_col1_length = 8;
%let _OUTPUT_col1_type = ;
%let _OUTPUT_col1_format = DATETIME20.;
%let _OUTPUT_col1_informat = DATETIME20.;
%let _OUTPUT_col1_label = %nrquote();
%let _OUTPUT_col1_exp = ;
%let _OUTPUT_col1_input_count = 0;
%let _OUTPUT_col2_name = FRONTKDEALID;
%let _OUTPUT_col2_table = work.W1N676JCA;
%let _OUTPUT_col2_length = 10;
%let _OUTPUT_col2_type = $;
%let _OUTPUT_col2_format = $10.;
%let _OUTPUT_col2_informat = $10.;
%let _OUTPUT_col2_label = %nrquote(FRONTKDEALID);
%let _OUTPUT_col2_input0 = FRONTKDEALID;
%let _OUTPUT_col2_exp = ;
%let _OUTPUT_col2_input = FRONTKDEALID;
%let _OUTPUT_col2_input_count = 1;
%let _OUTPUT_col3_name = FRONTFDEALID;
%let _OUTPUT_col3_table = work.W1N676JCA;
%let _OUTPUT_col3_length = 10;
%let _OUTPUT_col3_type = $;
%let _OUTPUT_col3_format = $10.;
%let _OUTPUT_col3_informat = $10.;
%let _OUTPUT_col3_label = %nrquote(FRONTFDEALID);
%let _OUTPUT_col3_input0 = FRONTFDEALID;
%let _OUTPUT_col3_exp = ;
%let _OUTPUT_col3_input = FRONTFDEALID;
%let _OUTPUT_col3_input_count = 1;
%let _OUTPUT_col4_name = DEALID;
%let _OUTPUT_col4_table = work.W1N676JCA;
%let _OUTPUT_col4_length = 100;
%let _OUTPUT_col4_type = $;
%let _OUTPUT_col4_format = $100.;
%let _OUTPUT_col4_informat = $100.;
%let _OUTPUT_col4_label = %nrquote();
%let _OUTPUT_col4_exp = ;
%let _OUTPUT_col4_input_count = 0;
%let _OUTPUT_col5_name = INSTRUMENTTYPECD;
%let _OUTPUT_col5_table = work.W1N676JCA;
%let _OUTPUT_col5_length = 3;
%let _OUTPUT_col5_type = $;
%let _OUTPUT_col5_format = $3.;
%let _OUTPUT_col5_informat = $3.;
%let _OUTPUT_col5_label = %nrquote(INSTRUMENTTYPECD);
%let _OUTPUT_col5_input0 = INSTRUMENTTYPECD;
%let _OUTPUT_col5_exp = ;
%let _OUTPUT_col5_input = INSTRUMENTTYPECD;
%let _OUTPUT_col5_input_count = 1;
%let _OUTPUT_col6_name = DEALDATE;
%let _OUTPUT_col6_table = work.W1N676JCA;
%let _OUTPUT_col6_length = 8;
%let _OUTPUT_col6_type = ;
%let _OUTPUT_col6_format = DATETIME20.;
%let _OUTPUT_col6_informat = DATETIME20.;
%let _OUTPUT_col6_label = %nrquote(DEALDATE);
%let _OUTPUT_col6_input0 = DEALDATE;
%let _OUTPUT_col6_exp = ;
%let _OUTPUT_col6_input = DEALDATE;
%let _OUTPUT_col6_input_count = 1;
%let _OUTPUT_col7_name = STARTDATE;
%let _OUTPUT_col7_table = work.W1N676JCA;
%let _OUTPUT_col7_length = 8;
%let _OUTPUT_col7_type = ;
%let _OUTPUT_col7_format = DATETIME20.;
%let _OUTPUT_col7_informat = DATETIME20.;
%let _OUTPUT_col7_label = %nrquote();
%let _OUTPUT_col7_exp = ;
%let _OUTPUT_col7_input_count = 0;
%let _OUTPUT_col8_name = NEXTDATE;
%let _OUTPUT_col8_table = work.W1N676JCA;
%let _OUTPUT_col8_length = 8;
%let _OUTPUT_col8_type = ;
%let _OUTPUT_col8_format = DATETIME20.;
%let _OUTPUT_col8_informat = DATETIME20.;
%let _OUTPUT_col8_label = %nrquote();
%let _OUTPUT_col8_exp = ;
%let _OUTPUT_col8_input_count = 0;
%let _OUTPUT_col9_name = ENDDATE;
%let _OUTPUT_col9_table = work.W1N676JCA;
%let _OUTPUT_col9_length = 8;
%let _OUTPUT_col9_type = ;
%let _OUTPUT_col9_format = DATETIME20.;
%let _OUTPUT_col9_informat = DATETIME20.;
%let _OUTPUT_col9_label = %nrquote();
%let _OUTPUT_col9_exp = ;
%let _OUTPUT_col9_input_count = 0;
%let _OUTPUT_col10_name = LEGNUMBER;
%let _OUTPUT_col10_table = work.W1N676JCA;
%let _OUTPUT_col10_length = 1;
%let _OUTPUT_col10_type = $;
%let _OUTPUT_col10_format = $1.;
%let _OUTPUT_col10_informat = $1.;
%let _OUTPUT_col10_label = %nrquote();
%let _OUTPUT_col10_exp = ;
%let _OUTPUT_col10_input_count = 0;
%let _OUTPUT_col11_name = DEALRK;
%let _OUTPUT_col11_table = work.W1N676JCA;
%let _OUTPUT_col11_length = 8;
%let _OUTPUT_col11_type = ;
%let _OUTPUT_col11_format = 11.;
%let _OUTPUT_col11_informat = 11.;
%let _OUTPUT_col11_label = %nrquote(DEALRK);
%let _OUTPUT_col11_exp = ;
%let _OUTPUT_col11_input_count = 0;

%let _OUTPUT1 = work.W1N676JCA;
%let _OUTPUT1_connect = ;
%let _OUTPUT1_engine = ;
%let _OUTPUT1_memtype = DATA;
%let _OUTPUT1_options = %nrquote();
%let _OUTPUT1_alter = %nrquote();
%let _OUTPUT1_path = %nrquote(/User Written_A5ELGGF9.AF0000D3%(WorkTable%));
%let _OUTPUT1_type = 1;
%let _OUTPUT1_label = %nrquote();
/* List of target columns to keep  */ 
%let _OUTPUT1_keep = REPORTCODE REPORTDATE FRONTKDEALID FRONTFDEALID DEALID 
        INSTRUMENTTYPECD DEALDATE STARTDATE NEXTDATE ENDDATE LEGNUMBER DEALRK;
%let _OUTPUT1_col_count = 12;
%let _OUTPUT1_col0_name = REPORTCODE;
%let _OUTPUT1_col0_table = work.W1N676JCA;
%let _OUTPUT1_col0_length = 5;
%let _OUTPUT1_col0_type = $;
%let _OUTPUT1_col0_format = $5.;
%let _OUTPUT1_col0_informat = $5.;
%let _OUTPUT1_col0_label = %nrquote();
%let _OUTPUT1_col0_exp = ;
%let _OUTPUT1_col0_input_count = 0;
%let _OUTPUT1_col1_name = REPORTDATE;
%let _OUTPUT1_col1_table = work.W1N676JCA;
%let _OUTPUT1_col1_length = 8;
%let _OUTPUT1_col1_type = ;
%let _OUTPUT1_col1_format = DATETIME20.;
%let _OUTPUT1_col1_informat = DATETIME20.;
%let _OUTPUT1_col1_label = %nrquote();
%let _OUTPUT1_col1_exp = ;
%let _OUTPUT1_col1_input_count = 0;
%let _OUTPUT1_col2_name = FRONTKDEALID;
%let _OUTPUT1_col2_table = work.W1N676JCA;
%let _OUTPUT1_col2_length = 10;
%let _OUTPUT1_col2_type = $;
%let _OUTPUT1_col2_format = $10.;
%let _OUTPUT1_col2_informat = $10.;
%let _OUTPUT1_col2_label = %nrquote(FRONTKDEALID);
%let _OUTPUT1_col2_input0 = FRONTKDEALID;
%let _OUTPUT1_col2_exp = ;
%let _OUTPUT1_col2_input = FRONTKDEALID;
%let _OUTPUT1_col2_input_count = 1;
%let _OUTPUT1_col3_name = FRONTFDEALID;
%let _OUTPUT1_col3_table = work.W1N676JCA;
%let _OUTPUT1_col3_length = 10;
%let _OUTPUT1_col3_type = $;
%let _OUTPUT1_col3_format = $10.;
%let _OUTPUT1_col3_informat = $10.;
%let _OUTPUT1_col3_label = %nrquote(FRONTFDEALID);
%let _OUTPUT1_col3_input0 = FRONTFDEALID;
%let _OUTPUT1_col3_exp = ;
%let _OUTPUT1_col3_input = FRONTFDEALID;
%let _OUTPUT1_col3_input_count = 1;
%let _OUTPUT1_col4_name = DEALID;
%let _OUTPUT1_col4_table = work.W1N676JCA;
%let _OUTPUT1_col4_length = 100;
%let _OUTPUT1_col4_type = $;
%let _OUTPUT1_col4_format = $100.;
%let _OUTPUT1_col4_informat = $100.;
%let _OUTPUT1_col4_label = %nrquote();
%let _OUTPUT1_col4_exp = ;
%let _OUTPUT1_col4_input_count = 0;
%let _OUTPUT1_col5_name = INSTRUMENTTYPECD;
%let _OUTPUT1_col5_table = work.W1N676JCA;
%let _OUTPUT1_col5_length = 3;
%let _OUTPUT1_col5_type = $;
%let _OUTPUT1_col5_format = $3.;
%let _OUTPUT1_col5_informat = $3.;
%let _OUTPUT1_col5_label = %nrquote(INSTRUMENTTYPECD);
%let _OUTPUT1_col5_input0 = INSTRUMENTTYPECD;
%let _OUTPUT1_col5_exp = ;
%let _OUTPUT1_col5_input = INSTRUMENTTYPECD;
%let _OUTPUT1_col5_input_count = 1;
%let _OUTPUT1_col6_name = DEALDATE;
%let _OUTPUT1_col6_table = work.W1N676JCA;
%let _OUTPUT1_col6_length = 8;
%let _OUTPUT1_col6_type = ;
%let _OUTPUT1_col6_format = DATETIME20.;
%let _OUTPUT1_col6_informat = DATETIME20.;
%let _OUTPUT1_col6_label = %nrquote(DEALDATE);
%let _OUTPUT1_col6_input0 = DEALDATE;
%let _OUTPUT1_col6_exp = ;
%let _OUTPUT1_col6_input = DEALDATE;
%let _OUTPUT1_col6_input_count = 1;
%let _OUTPUT1_col7_name = STARTDATE;
%let _OUTPUT1_col7_table = work.W1N676JCA;
%let _OUTPUT1_col7_length = 8;
%let _OUTPUT1_col7_type = ;
%let _OUTPUT1_col7_format = DATETIME20.;
%let _OUTPUT1_col7_informat = DATETIME20.;
%let _OUTPUT1_col7_label = %nrquote();
%let _OUTPUT1_col7_exp = ;
%let _OUTPUT1_col7_input_count = 0;
%let _OUTPUT1_col8_name = NEXTDATE;
%let _OUTPUT1_col8_table = work.W1N676JCA;
%let _OUTPUT1_col8_length = 8;
%let _OUTPUT1_col8_type = ;
%let _OUTPUT1_col8_format = DATETIME20.;
%let _OUTPUT1_col8_informat = DATETIME20.;
%let _OUTPUT1_col8_label = %nrquote();
%let _OUTPUT1_col8_exp = ;
%let _OUTPUT1_col8_input_count = 0;
%let _OUTPUT1_col9_name = ENDDATE;
%let _OUTPUT1_col9_table = work.W1N676JCA;
%let _OUTPUT1_col9_length = 8;
%let _OUTPUT1_col9_type = ;
%let _OUTPUT1_col9_format = DATETIME20.;
%let _OUTPUT1_col9_informat = DATETIME20.;
%let _OUTPUT1_col9_label = %nrquote();
%let _OUTPUT1_col9_exp = ;
%let _OUTPUT1_col9_input_count = 0;
%let _OUTPUT1_col10_name = LEGNUMBER;
%let _OUTPUT1_col10_table = work.W1N676JCA;
%let _OUTPUT1_col10_length = 1;
%let _OUTPUT1_col10_type = $;
%let _OUTPUT1_col10_format = $1.;
%let _OUTPUT1_col10_informat = $1.;
%let _OUTPUT1_col10_label = %nrquote();
%let _OUTPUT1_col10_exp = ;
%let _OUTPUT1_col10_input_count = 0;
%let _OUTPUT1_col11_name = DEALRK;
%let _OUTPUT1_col11_table = work.W1N676JCA;
%let _OUTPUT1_col11_length = 8;
%let _OUTPUT1_col11_type = ;
%let _OUTPUT1_col11_format = 11.;
%let _OUTPUT1_col11_informat = 11.;
%let _OUTPUT1_col11_label = %nrquote(DEALRK);
%let _OUTPUT1_col11_exp = ;
%let _OUTPUT1_col11_input_count = 0;

/*---- Start of User Written Code  ----*/ 

/*====================================================================*/
/* Проверка условий согласно FSD 												 */
/*																							 */
/* 2012-08-30 - Chepigin Alexander - Initial Coding						 */
/*====================================================================*/

data &_OUTPUT (keep = DEALRK REPORTCODE REPORTDATE FRONTKDEALID FRONTFDEALID DEALID INSTRUMENTTYPECD DEALDATE STARTDATE NEXTDATE ENDDATE LEGNUMBER);
	attrib 
			REPORTCODE length = $5 format = $5. informat = $5.
			REPORTDATE length = 8 format = DATETIME20. informat = DATETIME20.
			FRONTKDEALID length = $10 format = $10. informat = $10.
			FRONTFDEALID length = $10 format = $10. informat = $10.
			DEALID length = $100 format = $100. informat = $100.
			INSTRUMENTTYPECD length = $3 format = $3. informat = $3.
			DEALDATE length = 8 format = DATETIME20. informat = DATETIME20.
			STARTDATE length = 8 format = DATETIME20. informat = DATETIME20.
			NEXTDATE length = 8 format = DATETIME20. informat = DATETIME20.
			ENDDATE length = 8 format = DATETIME20. informat = DATETIME20.
			LEGNUMBER length = $1 format = $1. informat = $1.
		;
	set &_INPUT1;
	REPORTCODE = 'П-03';
	REPORTDATE = &REPDT.;
	select;
		when (INSTRUMENTTYPECD = 'IRS' OR INSTRUMENTTYPECD = 'CIS')
		do;
			if (
				(STARTPERIODDATE1 > &REPDT) OR 
				(STARTPERIODDATE1 >= coalesce(NEXTPERIODDATE1, MATURITYDATE1))
				) then 
				do;
					select;
						when (missing(DEALID1)) DEALID=DEALID2;
						when (missing(DEALID2)) DEALID=DEALID1;
						when (not missing(DEALID1) AND not missing(DEALID2)) DEALID = cats(DEALID1, ',', DEALID2);
						otherwise DEALID = " ";
					end;
					STARTDATE = coalesce(STARTPERIODDATE1, STARTPERIODDATE2);
					NEXTDATE = coalesce(NEXTPERIODDATE1, NEXTPERIODDATE2);
					ENDDATE = coalesce(MATURITYDATE1, MATURITYDATE2);
					LEGNUMBER = '1';
					output;
				end;
			if (
				(STARTPERIODDATE2 > &REPDT) OR 
				(STARTPERIODDATE2 >= coalesce(NEXTPERIODDATE2, MATURITYDATE2))
				) then 
				do;
					select;
						when (missing(DEALID1)) DEALID=DEALID2;
						when (missing(DEALID2)) DEALID=DEALID1;
						when (not missing(DEALID1) AND not missing(DEALID2)) DEALID = cats(DEALID1, ',', DEALID2);
						otherwise DEALID = " ";
					end;
					STARTDATE = coalesce(STARTPERIODDATE1, STARTPERIODDATE2);
					NEXTDATE = coalesce(NEXTPERIODDATE1, NEXTPERIODDATE2);
					ENDDATE = coalesce(MATURITYDATE1, MATURITYDATE2);
					LEGNUMBER = '2';
					output;
				end;
		end;
		when (INSTRUMENTTYPECD = 'CAP' OR INSTRUMENTTYPECD = 'FLR')
		do;
			if (
				(STARTPERIODDATE1 > &REPDT) OR
				(STARTPERIODDATE1 >= coalesce(NEXTPERIODDATE1, MATURITYDATE1))
				) then 
				do;
					DEALID = DEALID1;
					STARTDATE = STARTPERIODDATE1;
					NEXTDATE = NEXTPERIODDATE1;
					ENDDATE = MATURITYDATE1;
					LEGNUMBER = ' ';
					output;
				end;
		end;
	end;
run;
%error_check(mpStepType=DATA);

/*---- End of User Written Code  ----*/ 

%rcSet(&syserr); 
%rcSet(&sqlrc); 


/**  Step end User Written **/

/*==========================================================================* 
 * Step:            SQL Join                              A5ELGGF9.AK0000XI * 
 * Transform:       Join                                                    * 
 * Description:                                                             * 
 *                                                                          * 
 * Source Tables:   User Written - work.W1N676JCA         A5ELGGF9.AF0000D3 * 
 *                  INSTRUMENTTYPE -                      A5LX14I5.A900001B * 
 *                   DM_DRVT.INSTRUMENTTYPE                                 * 
 * Target Table:    SQL Join - work.W1M0IVTMQ             A5ELGGF9.AF0000D4 * 
 *==========================================================================*/ 

%let transformID = %quote(A5ELGGF9.AK0000XI);
%let trans_rc = 0;
%let etls_stepStartTime = %sysfunc(datetime(), datetime20.); 

%let etls_recCheckExist = 0; 
%let etls_recnt = 0; 
%macro etls_recordCheck; 
   %let etls_recCheckExist = %eval(%sysfunc(exist(work.W1N676JCA, DATA)) or 
         %sysfunc(exist(work.W1N676JCA, VIEW))); 
   
   %if (&etls_recCheckExist) %then
   %do;
      %local etls_syntaxcheck; 
      %let etls_syntaxcheck = %sysfunc(getoption(syntaxcheck)); 
      /* Turn off syntaxcheck option to perform following steps  */ 
      options nosyntaxcheck;
      
      proc contents data = work.W1N676JCA out = work.etls_contents(keep = nobs) noprint; 
      run; 
      
      data _null_; 
         set work.etls_contents (obs = 1); 
         call symput("etls_recnt", left(put(nobs,32.))); 
      run;
      
      proc datasets lib = work nolist nowarn memtype = (data view);
         delete etls_contents;
      quit;
      
      /* Reset syntaxcheck option to previous setting  */ 
      options &etls_syntaxcheck; 
   %end;
%mend etls_recordCheck;
%etls_recordCheck;

%let SYS_SQL_IP_SPEEDO = Y;
%let SYS_SQL_MAPPUTTO = sas_put;
%let SYS_SQLREDUCEPUT = DBMS;
%global etls_sql_pushDown;
%let etls_sql_pushDown = -1;
option DBIDIRECTEXEC;

proc datasets lib = work nolist nowarn memtype = (data view);
   delete W1M0IVTMQ;
quit;

proc sql;
   create table work.W1M0IVTMQ as
   select distinct
      W1N676JCA.INSTRUMENTTYPECD length = 3   
         format = $3.
         informat = $3.
         label = 'INSTRUMENTTYPECD',
      INSTRUMENTTYPE.INSTRUMENTTYPE length = 100   
         format = $100.
         informat = $100.
         label = 'INSTRUMENTTYPE'
   from
      work.W1N676JCA left join 
      DM_DRVT.INSTRUMENTTYPE
         on
         (
            W1N676JCA.INSTRUMENTTYPECD = INSTRUMENTTYPE.INSTRUMENTTYPECD
         )
   where
      W1N676JCA.INSTRUMENTTYPECD NOT IS MISSING 
   ;
quit;

%global etls_sql_pushDown;
%let etls_sql_pushDown = &sys_sql_ip_all;

%rcSet(&sqlrc); 



/**  Step end SQL Join **/

/*==========================================================================* 
 * Step:            Table Loader                          A5ELGGF9.AK0000XJ * 
 * Transform:       Table Loader (Version 2.1)                              * 
 * Description:                                                             * 
 *                                                                          * 
 * Source Table:    SQL Join - work.W1M0IVTMQ             A5ELGGF9.AF0000D4 * 
 * Target Table:    DQ_DRVT_INSTRUMENTTYPE -              A5ELGGF9.AE00004A * 
 *                   dm_dq.DQ_DRVT_INSTRUMENTTYPE                           * 
 *==========================================================================*/ 

%let transformID = %quote(A5ELGGF9.AK0000XJ);
%let trans_rc = 0;
%let etls_stepStartTime = %sysfunc(datetime(), datetime20.); 

%let SYSLAST = %nrquote(work.W1M0IVTMQ); 

%let SYS_SQL_IP_SPEEDO = Y;
%let SYS_SQL_MAPPUTTO = sas_put;
%let SYS_SQLREDUCEPUT = DBMS;
%global etls_sql_pushDown;
%let etls_sql_pushDown = -1;
option DBIDIRECTEXEC;

%global etls_tableExist;
%global etls_numIndex;
%global etls_lastTable;
%let etls_tableExist = -1; 
%let etls_numIndex = -1; 
%let etls_lastTable = &SYSLAST; 

/*---- Define load data macro  ----*/ 

/* --------------------------------------------------------------
   Load Technique Selection: Update - Matching=SQLSet, New=AppendProc
   Blanks may replace non-blanks: false
   Constraint and index action selections: 'ASIS','ASIS','ASIS','ASIS'
   Additional options selections... 
      Set unmapped to missing on updates: false 
   -------------------------------------------------------------- */
%macro etls_loader;

   %let etls_tableOptions = ;
   
   /* Determine if the target table exists  */ 
   %let etls_tableExist = %eval(%sysfunc(exist(dm_dq.DQ_DRVT_INSTRUMENTTYPE, DATA)) or 
         %sysfunc(exist(dm_dq.DQ_DRVT_INSTRUMENTTYPE, VIEW))); 
   
   %let etls_hasUpdateIndex=0; 
   
   /*---- Create a new table  ----*/ 
   %if (&etls_tableExist eq 0) %then 
   %do;  /* if table does not exist  */ 
   
      %put %str(NOTE: Creating table ...);
      
      data dm_dq.DQ_DRVT_INSTRUMENTTYPE
              (dbnull = (
                         INSTRUMENTTYPECD = YES
                         INSTRUMENTTYPE = YES));
         attrib INSTRUMENTTYPECD length = $3
            format = $3.
            informat = $3.
            label = 'INSTRUMENTTYPECD'; 
         attrib INSTRUMENTTYPE length = $100
            format = $100.
            informat = $100.
            label = 'INSTRUMENTTYPE'; 
         call missing(of _all_);
         stop;
      run;
      
      %rcSet(&syserr); 
      
   %end;  /* if table does not exist  */ 
   
   %let etls_recCheckExist = 0; 
   %let etls_targetHasRows = 0; 
   %macro etls_recordCheck; 
      %let etls_recCheckExist = %eval(%sysfunc(exist(dm_dq.DQ_DRVT_INSTRUMENTTYPE, DATA)) or 
            %sysfunc(exist(dm_dq.DQ_DRVT_INSTRUMENTTYPE, VIEW))); 
      
      %if (&etls_recCheckExist) %then
      %do;
         %local etls_syntaxcheck; 
         %let etls_syntaxcheck = %sysfunc(getoption(syntaxcheck)); 
         /* Turn off syntaxcheck option to perform following steps  */ 
         options nosyntaxcheck;
         
         data _null_; 
            set dm_dq.DQ_DRVT_INSTRUMENTTYPE( obs=1 ); 
            call symput("etls_targetHasRows",'1'); 
         run; 
         /* Reset syntaxcheck option to previous setting  */ 
         options &etls_syntaxcheck; 
      %end;
   %mend etls_recordCheck;
   %etls_recordCheck;
   
   
   %if (&etls_targetHasRows) %then 
   %do;  /* if has rows */ 
      proc sql ; 
         /* update existing records in the master table  */ 
         update dm_dq.DQ_DRVT_INSTRUMENTTYPE as m
            set INSTRUMENTTYPE = (select case when t.INSTRUMENTTYPE="" then m.INSTRUMENTTYPE else t.INSTRUMENTTYPE end from &etls_lastTable as t 
                                where m.INSTRUMENTTYPECD = t.INSTRUMENTTYPECD)
               where exists (select * from &etls_lastTable as t
                                   where m.INSTRUMENTTYPECD = t.INSTRUMENTTYPECD);
         
         /* create a temporary table of new records from the transaction table  */ 
         create table etls_newrecords as 
            select * 
               from &etls_lastTable as t 
                  where not exists 
                     (select * from dm_dq.DQ_DRVT_INSTRUMENTTYPE
                   as m 
                                      where m.INSTRUMENTTYPECD = t.INSTRUMENTTYPECD)
         ; 
         
      quit;
      
      %let etls_lastTable = &SYSLAST;
      
      %let etls_tableOptions = ; 
      
      %global etls_sql_pushDown;
      %let etls_sql_pushDown = &sys_sql_ip_all;
      
      %rcSet(&sqlrc); 
      
   %end; /* if has rows */ 
   
   /*---- Append  ----*/ 
   %put %str(NOTE: Appending data ...);
   
   proc append base = dm_dq.DQ_DRVT_INSTRUMENTTYPE 
      data = &etls_lastTable (&etls_tableOptions)  force ; 
    run; 
   
   %rcSet(&syserr); 
   
   proc datasets lib = work nolist nowarn memtype = (data view);
      delete etls_newrecords;
   quit;
   
%mend etls_loader;
%etls_loader;

%let etls_recnt = 0;
%macro etls_recordCheck; 
   %let etls_recCheckExist = %eval(%sysfunc(exist(dm_dq.DQ_DRVT_INSTRUMENTTYPE, DATA)) or 
         %sysfunc(exist(dm_dq.DQ_DRVT_INSTRUMENTTYPE, VIEW))); 
   
   %if (&etls_recCheckExist) %then
   %do;
      proc sql noprint;
         select count(*) into :etls_recnt from dm_dq.DQ_DRVT_INSTRUMENTTYPE;
      quit;
   %end;
%mend etls_recordCheck;
%etls_recordCheck;



/**  Step end Table Loader **/

/*==========================================================================* 
 * Step:            Table Loader                          A5ELGGF9.AK0000XK * 
 * Transform:       Table Loader (Version 2.1)                              * 
 * Description:                                                             * 
 *                                                                          * 
 * Source Table:    User Written - work.W1N676JCA         A5ELGGF9.AF0000D3 * 
 * Target Table:    DQ_DRVT_DWH_DM - dm_dq.DQ_DRVT_DWH_DM A5ELGGF9.AE000049 * 
 *==========================================================================*/ 

%let transformID = %quote(A5ELGGF9.AK0000XK);
%let trans_rc = 0;
%let etls_stepStartTime = %sysfunc(datetime(), datetime20.); 

%let SYSLAST = %nrquote(work.W1N676JCA); 

%let SYS_SQL_IP_SPEEDO = Y;
%let SYS_SQL_MAPPUTTO = sas_put;
%let SYS_SQLREDUCEPUT = DBMS;
%global etls_sql_pushDown;
%let etls_sql_pushDown = -1;
option DBIDIRECTEXEC;

%global etls_tableExist;
%global etls_numIndex;
%global etls_lastTable;
%let etls_tableExist = -1; 
%let etls_numIndex = -1; 
%let etls_lastTable = &SYSLAST; 

/*---- Define load data macro  ----*/ 

/* --------------------------------------------------------------
   Load Technique Selection: AppendToExisting - AppendProc
   Constraint and index action selections: 'ASIS','ASIS','ASIS','ASIS'
   Additional options selections... 
      Set unmapped to missing on updates: false 
   -------------------------------------------------------------- */
%macro etls_loader;

   %let etls_tableOptions = ;
   
   /*---- Map the columns  ----*/ 
   proc datasets lib = work nolist nowarn memtype = (data view);
      delete WJ2Y06Z;
   quit;
   
   data _null_;
      put "NOTE: The following column(s) do not have a column mapping, so the"
           " value(s) will be set to missing: ADDITIONALINFORMATION, VALUEFRS,"
           " VALUESEC";
   run;
   
   %put %str(NOTE: Mapping columns ...);
   proc sql;
      create view work.WJ2Y06Z as
         select
            REPORTCODE,
            REPORTDATE,
            FRONTKDEALID,
            FRONTFDEALID,
            DEALID,
            INSTRUMENTTYPECD,
            DEALDATE,
            "" as ADDITIONALINFORMATION length = 255
               format = $255.
               informat = $255.,
            STARTDATE,
            NEXTDATE,
            ENDDATE,
            LEGNUMBER,
            "" as VALUEFRS length = 20
               format = $20.
               informat = $20.,
            "" as VALUESEC length = 20
               format = $20.
               informat = $20.
      from &etls_lastTable
      ;
   quit;
   
   %let SYSLAST = work.WJ2Y06Z;
   
   %let etls_lastTable = &SYSLAST; 
   %let etls_tableOptions = ; 
   
   /* Determine if the target table exists  */ 
   %let etls_tableExist = %eval(%sysfunc(exist(dm_dq.DQ_DRVT_DWH_DM, DATA)) or 
         %sysfunc(exist(dm_dq.DQ_DRVT_DWH_DM, VIEW))); 
   
   /*---- Create a new table  ----*/ 
   %if (&etls_tableExist eq 0) %then 
   %do;  /* if table does not exist  */ 
   
      %put %str(NOTE: Creating table ...);
      
      data dm_dq.DQ_DRVT_DWH_DM
              (dbnull = (
                         REPORTCODE = YES
                         REPORTDATE = YES
                         FRONTKDEALID = YES
                         FRONTFDEALID = YES
                         DEALID = YES
                         INSTRUMENTTYPECD = YES
                         DEALDATE = YES
                         ADDITIONALINFORMATION = YES
                         STARTDATE = YES
                         NEXTDATE = YES
                         ENDDATE = YES
                         LEGNUMBER = YES
                         VALUEFRS = YES
                         VALUESEC = YES));
         attrib REPORTCODE length = $5
            format = $5.
            informat = $5.
            label = 'REPORTCODE'; 
         attrib REPORTDATE length = 8
            format = DATETIME20.
            informat = DATETIME20.
            label = 'REPORTDATE'; 
         attrib FRONTKDEALID length = $10
            format = $10.
            informat = $10.
            label = 'FRONTKDEALID'; 
         attrib FRONTFDEALID length = $10
            format = $10.
            informat = $10.
            label = 'FRONTFDEALID'; 
         attrib DEALID length = $100
            format = $100.
            informat = $100.
            label = 'DEALID'; 
         attrib INSTRUMENTTYPECD length = $3
            format = $3.
            informat = $3.
            label = 'INSTRUMENTTYPECD'; 
         attrib DEALDATE length = 8
            format = DATETIME20.
            informat = DATETIME20.
            label = 'DEALDATE'; 
         attrib ADDITIONALINFORMATION length = $255
            format = $255.
            informat = $255.
            label = 'ADDITIONALINFORMATION'; 
         attrib STARTDATE length = 8
            format = DATETIME20.
            informat = DATETIME20.
            label = 'STARTDATE'; 
         attrib NEXTDATE length = 8
            format = DATETIME20.
            informat = DATETIME20.
            label = 'NEXTDATE'; 
         attrib ENDDATE length = 8
            format = DATETIME20.
            informat = DATETIME20.
            label = 'ENDDATE'; 
         attrib LEGNUMBER length = $1
            format = $1.
            informat = $1.
            label = 'LEGNUMBER'; 
         attrib VALUEFRS length = $20
            format = $20.
            informat = $20.
            label = 'VALUEFRS'; 
         attrib VALUESEC length = $20
            format = $20.
            informat = $20.
            label = 'VALUESEC'; 
         call missing(of _all_);
         stop;
      run;
      
      %rcSet(&syserr); 
      
   %end;  /* if table does not exist  */ 
   
   /*---- Append  ----*/ 
   %put %str(NOTE: Appending data ...);
   
   proc append base = dm_dq.DQ_DRVT_DWH_DM 
      data = &etls_lastTable (&etls_tableOptions)  force ; 
    run; 
   
   %rcSet(&syserr); 
   
   proc datasets lib = work nolist nowarn memtype = (data view);
      delete WJ2Y06Z;
   quit;
   
%mend etls_loader;
%etls_loader;

%let etls_recnt = 0;
%macro etls_recordCheck; 
   %let etls_recCheckExist = %eval(%sysfunc(exist(dm_dq.DQ_DRVT_DWH_DM, DATA)) or 
         %sysfunc(exist(dm_dq.DQ_DRVT_DWH_DM, VIEW))); 
   
   %if (&etls_recCheckExist) %then
   %do;
      proc sql noprint;
         select count(*) into :etls_recnt from dm_dq.DQ_DRVT_DWH_DM;
      quit;
   %end;
%mend etls_recordCheck;
%etls_recordCheck;



/**  Step end Table Loader **/

/*==========================================================================* 
 * Step:            User Written                          A5ELGGF9.AK0000XL * 
 * Transform:       User Written                                            * 
 * Description:     Сбор статистики                                         * 
 *                                                                          * 
 * Source Tables:   Extract - work.W1N67GXG4              A5ELGGF9.AF0000D2 * 
 *                  User Written - work.W1N676JCA         A5ELGGF9.AF0000D3 * 
 *                  ETL_JOB - etl_sys.ETL_JOB             A59S11RW.AE00001A * 
 * Target Table:    User Written - work.W1N6JR89O         A5ELGGF9.AF0000D5 * 
 *                                                                          * 
 * User Written:    SourceCode                                              * 
 *==========================================================================*/ 

%let transformID = %quote(A5ELGGF9.AK0000XL);
%let trans_rc = 0;
%let etls_stepStartTime = %sysfunc(datetime(), datetime20.); 

%let etls_recnt = -1;
%let _INPUT_count = 3;
%let _INPUT = work.W1N67GXG4;
%let _INPUT_connect = ;
%let _INPUT_engine = ;
%let _INPUT_memtype = VIEW;
%let _INPUT_options = %nrquote();
%let _INPUT_alter = %nrquote();
%let _INPUT_path = %nrquote(/Extract_A5ELGGF9.AF0000D2%(WorkTable%));
%let _INPUT_type = 1;
%let _INPUT_label = %nrquote();

%let _INPUT1 = work.W1N67GXG4;
%let _INPUT1_connect = ;
%let _INPUT1_engine = ;
%let _INPUT1_memtype = VIEW;
%let _INPUT1_options = %nrquote();
%let _INPUT1_alter = %nrquote();
%let _INPUT1_path = %nrquote(/Extract_A5ELGGF9.AF0000D2%(WorkTable%));
%let _INPUT1_type = 1;
%let _INPUT1_label = %nrquote();

%let _INPUT2 = work.W1N676JCA;
%let _INPUT2_connect = ;
%let _INPUT2_engine = ;
%let _INPUT2_memtype = DATA;
%let _INPUT2_options = %nrquote();
%let _INPUT2_alter = %nrquote();
%let _INPUT2_path = %nrquote(/User Written_A5ELGGF9.AF0000D3%(WorkTable%));
%let _INPUT2_type = 1;
%let _INPUT2_label = %nrquote();

%let _INPUT3 = etl_sys.ETL_JOB;
%let _INPUT3_connect =  PATH=DWH.IMB.RU AUTHDOMAIN="OraAuth_ETL_SYS" 
;
%let _INPUT3_engine = ORACLE;
%let _INPUT3_memtype = DATA;
%let _INPUT3_options = %nrquote();
%let _INPUT3_alter = %nrquote();
%let _INPUT3_path = %nrquote(/DWH_DWHDDS_SYS/Tables/ETL_SYS/ETL_JOB%(Table%));
%let _INPUT3_type = 1;
%let _INPUT3_label = %nrquote();

%let _OUTPUT_count = 1;
%let _OUTPUT = work.W1N6JR89O;
%let _OUTPUT_connect = ;
%let _OUTPUT_engine = ;
%let _OUTPUT_memtype = DATA;
%let _OUTPUT_options = %nrquote();
%let _OUTPUT_alter = %nrquote();
%let _OUTPUT_path = %nrquote(/User Written_A5ELGGF9.AF0000D5%(WorkTable%));
%let _OUTPUT_type = 1;
%let _OUTPUT_label = %nrquote();
/* List of target columns to keep  */ 
%let _OUTPUT_keep = REP_DT REP_ID PRC CNT_ALL CNT_ERR DWH_DT;
%let _OUTPUT_col_count = 6;
%let _OUTPUT_col0_name = REP_DT;
%let _OUTPUT_col0_table = work.W1N6JR89O;
%let _OUTPUT_col0_length = 8;
%let _OUTPUT_col0_type = ;
%let _OUTPUT_col0_format = DATETIME20.;
%let _OUTPUT_col0_informat = ;
%let _OUTPUT_col0_label = %nrquote();
%let _OUTPUT_col0_exp = ;
%let _OUTPUT_col0_input_count = 0;
%let _OUTPUT_col1_name = REP_ID;
%let _OUTPUT_col1_table = work.W1N6JR89O;
%let _OUTPUT_col1_length = 8;
%let _OUTPUT_col1_type = ;
%let _OUTPUT_col1_format = ;
%let _OUTPUT_col1_informat = ;
%let _OUTPUT_col1_label = %nrquote();
%let _OUTPUT_col1_exp = ;
%let _OUTPUT_col1_input_count = 0;
%let _OUTPUT_col2_name = PRC;
%let _OUTPUT_col2_table = work.W1N6JR89O;
%let _OUTPUT_col2_length = 8;
%let _OUTPUT_col2_type = ;
%let _OUTPUT_col2_format = ;
%let _OUTPUT_col2_informat = ;
%let _OUTPUT_col2_label = %nrquote();
%let _OUTPUT_col2_exp = ;
%let _OUTPUT_col2_input_count = 0;
%let _OUTPUT_col3_name = CNT_ALL;
%let _OUTPUT_col3_table = work.W1N6JR89O;
%let _OUTPUT_col3_length = 8;
%let _OUTPUT_col3_type = ;
%let _OUTPUT_col3_format = ;
%let _OUTPUT_col3_informat = ;
%let _OUTPUT_col3_label = %nrquote();
%let _OUTPUT_col3_exp = ;
%let _OUTPUT_col3_input_count = 0;
%let _OUTPUT_col4_name = CNT_ERR;
%let _OUTPUT_col4_table = work.W1N6JR89O;
%let _OUTPUT_col4_length = 8;
%let _OUTPUT_col4_type = ;
%let _OUTPUT_col4_format = ;
%let _OUTPUT_col4_informat = ;
%let _OUTPUT_col4_label = %nrquote();
%let _OUTPUT_col4_exp = ;
%let _OUTPUT_col4_input_count = 0;
%let _OUTPUT_col5_name = DWH_DT;
%let _OUTPUT_col5_table = work.W1N6JR89O;
%let _OUTPUT_col5_length = 8;
%let _OUTPUT_col5_type = ;
%let _OUTPUT_col5_format = DATETIME20.;
%let _OUTPUT_col5_informat = ;
%let _OUTPUT_col5_label = %nrquote();
%let _OUTPUT_col5_exp = ;
%let _OUTPUT_col5_input_count = 0;

%let _OUTPUT1 = work.W1N6JR89O;
%let _OUTPUT1_connect = ;
%let _OUTPUT1_engine = ;
%let _OUTPUT1_memtype = DATA;
%let _OUTPUT1_options = %nrquote();
%let _OUTPUT1_alter = %nrquote();
%let _OUTPUT1_path = %nrquote(/User Written_A5ELGGF9.AF0000D5%(WorkTable%));
%let _OUTPUT1_type = 1;
%let _OUTPUT1_label = %nrquote();
/* List of target columns to keep  */ 
%let _OUTPUT1_keep = REP_DT REP_ID PRC CNT_ALL CNT_ERR DWH_DT;
%let _OUTPUT1_col_count = 6;
%let _OUTPUT1_col0_name = REP_DT;
%let _OUTPUT1_col0_table = work.W1N6JR89O;
%let _OUTPUT1_col0_length = 8;
%let _OUTPUT1_col0_type = ;
%let _OUTPUT1_col0_format = DATETIME20.;
%let _OUTPUT1_col0_informat = ;
%let _OUTPUT1_col0_label = %nrquote();
%let _OUTPUT1_col0_exp = ;
%let _OUTPUT1_col0_input_count = 0;
%let _OUTPUT1_col1_name = REP_ID;
%let _OUTPUT1_col1_table = work.W1N6JR89O;
%let _OUTPUT1_col1_length = 8;
%let _OUTPUT1_col1_type = ;
%let _OUTPUT1_col1_format = ;
%let _OUTPUT1_col1_informat = ;
%let _OUTPUT1_col1_label = %nrquote();
%let _OUTPUT1_col1_exp = ;
%let _OUTPUT1_col1_input_count = 0;
%let _OUTPUT1_col2_name = PRC;
%let _OUTPUT1_col2_table = work.W1N6JR89O;
%let _OUTPUT1_col2_length = 8;
%let _OUTPUT1_col2_type = ;
%let _OUTPUT1_col2_format = ;
%let _OUTPUT1_col2_informat = ;
%let _OUTPUT1_col2_label = %nrquote();
%let _OUTPUT1_col2_exp = ;
%let _OUTPUT1_col2_input_count = 0;
%let _OUTPUT1_col3_name = CNT_ALL;
%let _OUTPUT1_col3_table = work.W1N6JR89O;
%let _OUTPUT1_col3_length = 8;
%let _OUTPUT1_col3_type = ;
%let _OUTPUT1_col3_format = ;
%let _OUTPUT1_col3_informat = ;
%let _OUTPUT1_col3_label = %nrquote();
%let _OUTPUT1_col3_exp = ;
%let _OUTPUT1_col3_input_count = 0;
%let _OUTPUT1_col4_name = CNT_ERR;
%let _OUTPUT1_col4_table = work.W1N6JR89O;
%let _OUTPUT1_col4_length = 8;
%let _OUTPUT1_col4_type = ;
%let _OUTPUT1_col4_format = ;
%let _OUTPUT1_col4_informat = ;
%let _OUTPUT1_col4_label = %nrquote();
%let _OUTPUT1_col4_exp = ;
%let _OUTPUT1_col4_input_count = 0;
%let _OUTPUT1_col5_name = DWH_DT;
%let _OUTPUT1_col5_table = work.W1N6JR89O;
%let _OUTPUT1_col5_length = 8;
%let _OUTPUT1_col5_type = ;
%let _OUTPUT1_col5_format = DATETIME20.;
%let _OUTPUT1_col5_informat = ;
%let _OUTPUT1_col5_label = %nrquote();
%let _OUTPUT1_col5_exp = ;
%let _OUTPUT1_col5_input_count = 0;

/*---- Start of User Written Code  ----*/ 

proc sql;
/*Кол-во всех уникальных деривативных сделок*/
	select count(distinct DEALRK) into :CNT_ALL from &_INPUT1;
/*Кол-во ошибочных сделок*/
	select count(distinct DEALRK) into :CNT_ERR from &_INPUT2;
/*Дата успешного выполнения процесса в DWH*/
	select end_dttm into :DWH_DT from &_INPUT3 where JOB_ID = (
  select MAX(job_id) 
  from &_INPUT3 
  where upper(job_nm) = '401_021_MART_DEAL' and success_flg = 'Y'
  );
quit;
%error_check(mpStepType=SQL);

data &_OUTPUT1;
	attrib
		REP_DT length = 8 format = DATETIME20.
		REP_ID length = 8
		PRC length =8
		CNT_ALL length=8
		CNT_ERR length = 8
		DWH_DT length = 8 format = DATETIME20.
	;

	REP_DT = &REPDT.;
	REP_ID = 3;
	PRC = DIVIDE(&CNT_ERR. , &CNT_ALL.) * 100;
	if missing(PRC) then PRC=0;
	CNT_ALL = &CNT_ALL.;
	CNT_ERR = &CNT_ERR.;
	DWH_DT = "&DWH_DT."dt;
run;
%error_check(mpStepType=DATA);
/*---- End of User Written Code  ----*/ 

%rcSet(&syserr); 
%rcSet(&sqlrc); 


/**  Step end User Written **/

/*==========================================================================* 
 * Step:            Table Loader                          A5ELGGF9.AK0000XM * 
 * Transform:       Table Loader (Version 2.1)                              * 
 * Description:                                                             * 
 *                                                                          * 
 * Source Table:    User Written - work.W1N6JR89O         A5ELGGF9.AF0000D5 * 
 * Target Table:    DQ_DRVT_REPORT_PRC -                  A5ELGGF9.AE00004E * 
 *                   dm_dq.DQ_DRVT_REPORT_PRC                               * 
 *==========================================================================*/ 

%let transformID = %quote(A5ELGGF9.AK0000XM);
%let trans_rc = 0;
%let etls_stepStartTime = %sysfunc(datetime(), datetime20.); 

%let SYSLAST = %nrquote(work.W1N6JR89O); 

%let SYS_SQL_IP_SPEEDO = Y;
%let SYS_SQL_MAPPUTTO = sas_put;
%let SYS_SQLREDUCEPUT = DBMS;
%global etls_sql_pushDown;
%let etls_sql_pushDown = -1;
option DBIDIRECTEXEC;

%global etls_tableExist;
%global etls_numIndex;
%global etls_lastTable;
%let etls_tableExist = -1; 
%let etls_numIndex = -1; 
%let etls_lastTable = &SYSLAST; 

/*---- Define load data macro  ----*/ 

/* --------------------------------------------------------------
   Load Technique Selection: AppendToExisting - AppendProc
   Constraint and index action selections: 'ASIS','ASIS','ASIS','ASIS'
   Additional options selections... 
      Set unmapped to missing on updates: false 
   -------------------------------------------------------------- */
%macro etls_loader;

   %let etls_tableOptions = ;
   
   /*---- Map the columns  ----*/ 
   proc datasets lib = work nolist nowarn memtype = (data view);
      delete WJ2Y0HJ;
   quit;
   
   %put %str(NOTE: Mapping columns ...);
   proc sql;
      create view work.WJ2Y0HJ as
         select
            REP_DT   
               informat = DATETIME20.,
            REP_ID   
               format = 7.
               informat = 7.,
            PRC   
               format = 19.8
               informat = 19.8,
            CNT_ALL   
               format = 13.
               informat = 13.,
            CNT_ERR   
               format = 13.
               informat = 13.,
            DWH_DT   
               informat = DATETIME20.
      from &etls_lastTable
      ;
   quit;
   
   %let SYSLAST = work.WJ2Y0HJ;
   
   %let etls_lastTable = &SYSLAST; 
   %let etls_tableOptions = ; 
   
   /* Determine if the target table exists  */ 
   %let etls_tableExist = %eval(%sysfunc(exist(dm_dq.DQ_DRVT_REPORT_PRC, DATA)) or 
         %sysfunc(exist(dm_dq.DQ_DRVT_REPORT_PRC, VIEW))); 
   
   /*---- Create a new table  ----*/ 
   %if (&etls_tableExist eq 0) %then 
   %do;  /* if table does not exist  */ 
   
      %put %str(NOTE: Creating table ...);
      
      data dm_dq.DQ_DRVT_REPORT_PRC
              (dbnull = (
                         REP_DT = NO
                         REP_ID = NO
                         PRC = YES
                         CNT_ALL = YES
                         CNT_ERR = YES
                         DWH_DT = YES));
         attrib REP_DT length = 8
            format = DATETIME20.
            informat = DATETIME20.
            label = 'REP_DT'; 
         attrib REP_ID length = 8
            format = 7.
            informat = 7.
            label = 'REP_ID'; 
         attrib PRC length = 8
            format = 19.8
            informat = 19.8
            label = 'PRC'; 
         attrib CNT_ALL length = 8
            format = 13.
            informat = 13.
            label = 'CNT_ALL'; 
         attrib CNT_ERR length = 8
            format = 13.
            informat = 13.
            label = 'CNT_ERR'; 
         attrib DWH_DT length = 8
            format = DATETIME20.
            informat = DATETIME20.
            label = 'DWH_DT'; 
         call missing(of _all_);
         stop;
      run;
      
      %rcSet(&syserr); 
      
   %end;  /* if table does not exist  */ 
   
   /*---- Append  ----*/ 
   %put %str(NOTE: Appending data ...);
   
   proc append base = dm_dq.DQ_DRVT_REPORT_PRC 
      data = &etls_lastTable (&etls_tableOptions)  force ; 
    run; 
   
   %rcSet(&syserr); 
   
   proc datasets lib = work nolist nowarn memtype = (data view);
      delete WJ2Y0HJ;
   quit;
   
%mend etls_loader;
%etls_loader;

%let etls_recnt = 0;
%macro etls_recordCheck; 
   %let etls_recCheckExist = %eval(%sysfunc(exist(dm_dq.DQ_DRVT_REPORT_PRC, DATA)) or 
         %sysfunc(exist(dm_dq.DQ_DRVT_REPORT_PRC, VIEW))); 
   
   %if (&etls_recCheckExist) %then
   %do;
      proc sql noprint;
         select count(*) into :etls_recnt from dm_dq.DQ_DRVT_REPORT_PRC;
      quit;
   %end;
%mend etls_recordCheck;
%etls_recordCheck;



/**  Step end Table Loader **/

/*==========================================================================* 
 * Step:            Завершить модуль                      A5ELGGF9.AK0000XN * 
 * Transform:       Завершить модуль                                        * 
 * Description:                                                             * 
 *==========================================================================*/ 

%let transformID = %quote(A5ELGGF9.AK0000XN);
%let trans_rc = 0;
%let etls_stepStartTime = %sysfunc(datetime(), datetime20.); 

%let _INPUT_count = 0; 
%let _OUTPUT_count = 0; 


/*****************************************************************
* ВЕРСИЯ:
*   $Id: transform_job_finish.sas 247 2012-04-03 07:31:10Z nesterenok $
*
******************************************************************
* НАЗНАЧЕНИЕ:
*   Регистрирует конец модуля ETL.
*
* ПАРАМЕТРЫ:
*   нет
*
******************************************************************/

%macro transform_job_finish;

   /* Продолжаем модуль */
   %job_continue_reg(mpJobType=JOB, mpJobName=&ETLS_JobName., mpPostEvent=N);

   /* Завершаем модуль */
   %job_finish_reg(mpJobType=JOB);

%mend transform_job_finish;

%transform_job_finish;


%rcSet(&syserr); 
%rcSet(&sysrc); 
%rcSet(&sqlrc); 



/**  Step end Завершить модуль **/

%let etls_endTime = %sysfunc(datetime(),datetime.);



/**  Job end 202_030_Mart_DQ_DRVT_REP03 **/

/* Reset jobid and name */
%let jobID = %quote(A5ELGGF9.AH00003N);
%let etls_jobName = %nrquote(202_002_Stream_DQ_DRVT);

/**************************************************************************** 
 * Job:             202_040_Mart_DQ_DRVT_REP04            A5ELGGF9.AH00002A * 
 * Description:     Дата начала ближайшей следующей выплаты процентов по    * 
 *                  сделке (IRS, CIRS, CAP, FLR) не может быть больше       * 
 *                   плановой даты окончания сделки.                        * 
 *                                                                          * 
 * Metadata Server: bravo14                                                 * 
 * Port:            8561                                                    * 
 * Location:        /DWH_DMDQ_REP/Jobs/Includes/DQ_DRVT                     * 
 *                                                                          * 
 * Server:          SASApp                                A5C46MZY.AQ000002 * 
 *                                                                          * 
 * Source Tables:   INSTRUMENTTYPE -                      A5LX14I5.A900001B * 
 *                   DM_DRVT.INSTRUMENTTYPE                                 * 
 *                  DEAL - DM_DRVT.DEAL                   A5LX14I5.A9000014 * 
 *                  ETL_JOB - etl_sys.ETL_JOB             A59S11RW.AE00001A * 
 * Target Tables:   DQ_DRVT_DWH_DM - dm_dq.DQ_DRVT_DWH_DM A5ELGGF9.AE000049 * 
 *                  DQ_DRVT_INSTRUMENTTYPE -              A5ELGGF9.AE00004A * 
 *                   dm_dq.DQ_DRVT_INSTRUMENTTYPE                           * 
 *                  DQ_DRVT_REPORT_PRC -                  A5ELGGF9.AE00004E * 
 *                   dm_dq.DQ_DRVT_REPORT_PRC                               * 
 *                  DQ_DRVT_DWH_DM - dm_dq.DQ_DRVT_DWH_DM A5ELGGF9.AE000049 * 
 *                  DQ_DRVT_REPORT_PRC -                  A5ELGGF9.AE00004E * 
 *                   dm_dq.DQ_DRVT_REPORT_PRC                               * 
 *                                                                          * 
 * Generated on:    16 Июль 2013 г. 17:46:17 MSD                            * 
 * Generated by:    sasdwh                                                  * 
 * Version:         SAS Data Integration Studio 4.5                         * 
 ****************************************************************************/ 

/* General macro variables  */ 
%let jobID = %quote(A5ELGGF9.AH00002A);
%let etls_jobName = %nrquote(202_040_Mart_DQ_DRVT_REP04);
%let etls_userID = %nrquote(sasdwh);


/* Create metadata macro variables */
%let IOMServer      = %nrquote(SASApp);
%let metaPort       = %nrquote(8561);
%let metaServer     = %nrquote(bravo14);

/* Set metadata options */
options metaport       = &metaPort 
        metaserver     = "&metaServer"; 

/* Setup for capturing job status  */ 
%let etls_startTime = %sysfunc(datetime(),datetime.);
%let etls_recordsBefore = 0;
%let etls_recordsAfter = 0;
%let etls_lib = 0;
%let etls_table = 0;

%global etls_debug; 
%macro etls_setDebug; 
   %if %str(&etls_debug) ne 0 %then 
      OPTIONS MPRINT%str(;); 
%mend; 
%etls_setDebug; 

/*---- Start of Pre-Process Code  ----*/ 

%LET REPDT=&DMDQ_REPORT_START_DTTM;
/*---- End of Pre-Process Code  ----*/ 

%rcSet(&syserr); 
%rcSet(&sqlrc); 

/*==========================================================================* 
 * Step:            Начать модуль                         A5ELGGF9.AK0000XO * 
 * Transform:       Начать модуль                                           * 
 * Description:                                                             * 
 *==========================================================================*/ 

%let transformID = %quote(A5ELGGF9.AK0000XO);
%let trans_rc = 0;
%let etls_stepStartTime = %sysfunc(datetime(), datetime20.); 

%let _INPUT_count = 0; 
%let _OUTPUT_count = 0; 


/*****************************************************************
* ВЕРСИЯ:
*   $Id: transform_job_start.sas 1747 2012-08-01 11:26:13Z nesterenok $
*
******************************************************************
* НАЗНАЧЕНИЕ:
*   Регистрирует начало модуля ETL.
*
* ПАРАМЕТРЫ:
*   нет
*
******************************************************************/

%macro transform_job_start;

   /* Продолжаем поток (или создаем новый) */
   %local lmvStreamName;
   %if %sysfunc(sysexist(LSB_JOBNAME)) %then
      %let lmvStreamName = %scan(%sysfunc(sysget(LSB_JOBNAME)), 3, :);
   %else
      %let lmvStreamName = ;

   %job_continue_reg(mpJobType=STREAM, mpJobName=&lmvStreamName, mpPostEvent=N, mpForcedStart=Y);

   /* Для DI, начинаем поток заново, если старый был начат не сегодня */
   %if %length(&lmvStreamName) eq 0 and &STREAM_START_DT ne %sysfunc(today()) %then %do;
      %job_start_reg(mpJobType=STREAM, mpParentJobId=, mpJobName=&lmvStreamName.);
   %end;

   /* Начинаем модуль */
   %job_start_reg(mpJobType=JOB, mpParentJobId=&STREAM_ID, mpJobName=&ETLS_JobName.);

%mend transform_job_start;

%transform_job_start;


%rcSet(&syserr); 
%rcSet(&sysrc); 
%rcSet(&sqlrc); 



/**  Step end Начать модуль **/

/*==========================================================================* 
 * Step:            Очистить таблицу                      A5ELGGF9.AK0000XP * 
 * Transform:       Очистить таблицу                                        * 
 * Description:                                                             * 
 *                                                                          * 
 * Target Table:    DQ_DRVT_DWH_DM - dm_dq.DQ_DRVT_DWH_DM A5ELGGF9.AE000049 * 
 *==========================================================================*/ 

%let transformID = %quote(A5ELGGF9.AK0000XP);
%let trans_rc = 0;
%let etls_stepStartTime = %sysfunc(datetime(), datetime20.); 

%let _INPUT_count = 0; 
%let _OUTPUT_count = 1; 
%let _OUTPUT = dm_dq.DQ_DRVT_DWH_DM;
%let _OUTPUT_connect =  DEFER=YES PATH=DWH.IMB.RU AUTHDOMAIN="OraAuth_DM_DQ" 
;
%let _OUTPUT_engine = ORACLE;
%let _OUTPUT_memtype = DATA;
%let _OUTPUT_options = %nrquote();
%let _OUTPUT_alter = %nrquote();
%let _OUTPUT_path = %nrquote(/DWH_DMDQ_REP/Marts/DQ_DRVT/DQ_DRVT_DWH_DM%(Table%));
%let _OUTPUT_type = 1;
%let _OUTPUT_label = %nrquote();
/* List of target columns to keep  */ 
%let _OUTPUT_keep = REPORTCODE REPORTDATE FRONTKDEALID FRONTFDEALID DEALID 
        INSTRUMENTTYPECD DEALDATE ADDITIONALINFORMATION STARTDATE NEXTDATE 
        ENDDATE LEGNUMBER VALUEFRS VALUESEC;

%let tpOut = dm_dq.DQ_DRVT_DWH_DM;
%let tpOut_connect =  DEFER=YES PATH=DWH.IMB.RU AUTHDOMAIN="OraAuth_DM_DQ" 
;
%let tpOut_engine = ORACLE;
%let tpOut_memtype = DATA;
%let tpOut_options = %nrquote();
%let tpOut_alter = %nrquote();
%let tpOut_path = %nrquote(/DWH_DMDQ_REP/Marts/DQ_DRVT/DQ_DRVT_DWH_DM%(Table%));
%let tpOut_type = 1;
%let tpOut_label = %nrquote();
/* List of target columns to keep  */ 
%let tpOut_keep = REPORTCODE REPORTDATE FRONTKDEALID FRONTFDEALID DEALID 
        INSTRUMENTTYPECD DEALDATE ADDITIONALINFORMATION STARTDATE NEXTDATE 
        ENDDATE LEGNUMBER VALUEFRS VALUESEC;


%let tpWhere = %nrquote(REPORTCODE = %'П-04%' AND REPORTDATE = &DMDQ_REPORT_START_DTTM);

/* List of target columns to keep  */ 
%let _keep = REPORTCODE REPORTDATE FRONTKDEALID FRONTFDEALID DEALID 
        INSTRUMENTTYPECD DEALDATE ADDITIONALINFORMATION STARTDATE NEXTDATE 
        ENDDATE LEGNUMBER VALUEFRS VALUESEC;
/* List of target columns to keep  */ 
%let keep = REPORTCODE REPORTDATE FRONTKDEALID FRONTFDEALID DEALID 
        INSTRUMENTTYPECD DEALDATE ADDITIONALINFORMATION STARTDATE NEXTDATE 
        ENDDATE LEGNUMBER VALUEFRS VALUESEC;
/*****************************************************************
* ВЕРСИЯ:
*   $Id: transform_table_delete.sas 2142 2012-08-17 14:15:09Z nesterenok $
*
******************************************************************
* НАЗНАЧЕНИЕ:
*   Удаляет из указанной таблицы записи.
*
* ПАРАМЕТРЫ:
*   tpOut                  + имя целевой таблицы, которая будет очищена
*   tpWhere                - условие отбора записей под удаление
*                            по умолчанию отсутствует, т.е. удаляются все записи
*
******************************************************************/

%macro transform_table_delete;

   /* Удаляем записи */
   /* TODO: truncate */
   proc sql;
      delete from &tpOut
      %if %length(&tpWhere) gt 0 %then %do;
         where (%unquote(&tpWhere))
      %end;
      ;
   quit;
   %error_check (mpStepType=SQL);

%mend transform_table_delete;

%transform_table_delete;


%rcSet(&syserr); 
%rcSet(&sysrc); 
%rcSet(&sqlrc); 



/**  Step end Очистить таблицу **/

/*==========================================================================* 
 * Step:            Очистить таблицу                      A5ELGGF9.AK0000XQ * 
 * Transform:       Очистить таблицу                                        * 
 * Description:                                                             * 
 *                                                                          * 
 * Target Table:    DQ_DRVT_REPORT_PRC -                  A5ELGGF9.AE00004E * 
 *                   dm_dq.DQ_DRVT_REPORT_PRC                               * 
 *==========================================================================*/ 

%let transformID = %quote(A5ELGGF9.AK0000XQ);
%let trans_rc = 0;
%let etls_stepStartTime = %sysfunc(datetime(), datetime20.); 

%let _INPUT_count = 0; 
%let _OUTPUT_count = 1; 
%let _OUTPUT = dm_dq.DQ_DRVT_REPORT_PRC;
%let _OUTPUT_connect =  DEFER=YES PATH=DWH.IMB.RU AUTHDOMAIN="OraAuth_DM_DQ" 
;
%let _OUTPUT_engine = ORACLE;
%let _OUTPUT_memtype = DATA;
%let _OUTPUT_options = %nrquote();
%let _OUTPUT_alter = %nrquote();
%let _OUTPUT_path = %nrquote(/DWH_DMDQ_REP/Marts/DQ_DRVT/DQ_DRVT_REPORT_PRC%(Table%));
%let _OUTPUT_type = 1;
%let _OUTPUT_label = %nrquote();
/* List of target columns to keep  */ 
%let _OUTPUT_keep = REP_DT REP_ID PRC CNT_ALL CNT_ERR DWH_DT;

%let tpOut = dm_dq.DQ_DRVT_REPORT_PRC;
%let tpOut_connect =  DEFER=YES PATH=DWH.IMB.RU AUTHDOMAIN="OraAuth_DM_DQ" 
;
%let tpOut_engine = ORACLE;
%let tpOut_memtype = DATA;
%let tpOut_options = %nrquote();
%let tpOut_alter = %nrquote();
%let tpOut_path = %nrquote(/DWH_DMDQ_REP/Marts/DQ_DRVT/DQ_DRVT_REPORT_PRC%(Table%));
%let tpOut_type = 1;
%let tpOut_label = %nrquote();
/* List of target columns to keep  */ 
%let tpOut_keep = REP_DT REP_ID PRC CNT_ALL CNT_ERR DWH_DT;


%let tpWhere = %nrquote(REP_ID = 4 AND REP_DT = &DMDQ_REPORT_START_DTTM);

/* List of target columns to keep  */ 
%let _keep = REP_DT REP_ID PRC CNT_ALL CNT_ERR DWH_DT;
/* List of target columns to keep  */ 
%let keep = REP_DT REP_ID PRC CNT_ALL CNT_ERR DWH_DT;
/*****************************************************************
* ВЕРСИЯ:
*   $Id: transform_table_delete.sas 2142 2012-08-17 14:15:09Z nesterenok $
*
******************************************************************
* НАЗНАЧЕНИЕ:
*   Удаляет из указанной таблицы записи.
*
* ПАРАМЕТРЫ:
*   tpOut                  + имя целевой таблицы, которая будет очищена
*   tpWhere                - условие отбора записей под удаление
*                            по умолчанию отсутствует, т.е. удаляются все записи
*
******************************************************************/

%macro transform_table_delete;

   /* Удаляем записи */
   /* TODO: truncate */
   proc sql;
      delete from &tpOut
      %if %length(&tpWhere) gt 0 %then %do;
         where (%unquote(&tpWhere))
      %end;
      ;
   quit;
   %error_check (mpStepType=SQL);

%mend transform_table_delete;

%transform_table_delete;


%rcSet(&syserr); 
%rcSet(&sysrc); 
%rcSet(&sqlrc); 



/**  Step end Очистить таблицу **/

/*==========================================================================* 
 * Step:            Extract                               A5ELGGF9.AK0000XR * 
 * Transform:       Extract                                                 * 
 * Description:     Отбор сделокIRS CIS CAP FLR                             * 
 *                                                                          * 
 * Source Table:    DEAL - DM_DRVT.DEAL                   A5LX14I5.A9000014 * 
 * Target Table:    Extract - work.W1N67GXG4              A5ELGGF9.AF0000D6 * 
 *==========================================================================*/ 

%let transformID = %quote(A5ELGGF9.AK0000XR);
%let trans_rc = 0;
%let etls_stepStartTime = %sysfunc(datetime(), datetime20.); 

%let etls_recnt = 0;
%macro etls_recordCheck; 
   %let etls_recCheckExist = %eval(%sysfunc(exist(DM_DRVT.DEAL, DATA)) or 
         %sysfunc(exist(DM_DRVT.DEAL, VIEW))); 
   
   %if (&etls_recCheckExist) %then
   %do;
      proc sql noprint;
         select count(*) into :etls_recnt from DM_DRVT.DEAL;
      quit;
   %end;
%mend etls_recordCheck;
%etls_recordCheck;

%let SYSLAST = %nrquote(DM_DRVT.DEAL); 

%let SYS_SQL_IP_SPEEDO = Y;
%let SYS_SQL_MAPPUTTO = sas_put;
%let SYS_SQLREDUCEPUT = DBMS;
%global etls_sql_pushDown;
%let etls_sql_pushDown = -1;
option DBIDIRECTEXEC;

/*---- Map the columns  ----*/ 
proc datasets lib = work nolist nowarn memtype = (data view);
   delete W1N67GXG4;
quit;

data _null_;
   put "NOTE: The following column(s) do not have a column mapping, so the"
        " value(s) will be set to missing: FLAGPFI";
run;

%put %str(NOTE: Mapping columns ...);
proc sql;
   create view work.W1N67GXG4 as
      select
         DEALRK   
            format = 11.
            informat = 11.,
         VALID_FROM_DTTM,
         VALID_TO_DTTM,
         FRONTKDEALID,
         FRONTFDEALID,
         DEALDATE,
         DEALGROUP,
         INSTRUMENTTYPECD,
         "" as FLAGPFI length = 20
            format = $20.
            informat = $20.
            label = 'FLAGPFI',
         INSTRUMENTCLASSCD,
         FLAGDELIVERYCD,
         FLAGOTC,
         CUSTOMERNO,
         PREMIUM   
            format = 20.5
            informat = 20.5,
         PREMIUMCCY,
         OPTIONTYPECD,
         PREMIUMPAYMENTMODE,
         HEDGEINDICATOR,
         ORIGINALMATURITY   
            format = 19.
            informat = 19.,
         DEALSTATUSCD length = 10   
            format = $10.
            informat = $10.,
         DEALID1,
         DEALTYPE1,
         DEALSUBTYPE1,
         DEALDIRECTION1,
         PLACEDTAKEN1,
         VALUEDATE1,
         MATURITYDATE1,
         UNDERLYINGCCY1,
         UNDERLYINGNAME1,
         NOTIONALCURRENT1   
            format = 20.5
            informat = 20.5,
         PRICECCY1,
         GROSSRATE1   
            format = 20.5
            informat = 20.5,
         AMOUNT1   
            format = 20.5
            informat = 20.5,
         CALCBASIS1,
         INTERESTRATE1   
            format = 20.5
            informat = 20.5,
         INTERESTRATETYPECD1,
         PAYMENTFREQUENCY1,
         STARTDATE1,
         STARTPERIODDATE1,
         NEXTPERIODDATE1,
         NEXTINTPAYMENTDATE1,
         DCDFX_DEALID,
         DCDFX_TYPE,
         DCDFX_SUBTYPE,
         DEALID2,
         DEALTYPE2,
         DEALSUBTYPE2,
         DEALDIRECTION2 length = 10   
            format = $10.
            informat = $10.,
         PLACEDTAKEN2,
         VALUEDATE2,
         MATURITYDATE2,
         UNDERLYINGCCY2,
         UNDERLYINGNAME2,
         NOTIONALCURRENT2   
            format = 20.5
            informat = 20.5,
         PRICECCY2,
         GROSSRATE2   
            format = 20.5
            informat = 20.5,
         AMOUNT2   
            format = 20.5
            informat = 20.5,
         CALCBASIS2,
         INTERESTRATE2   
            format = 20.5
            informat = 20.5,
         INTERESTRATETYPECD2,
         PAYMENTFREQUENCY2,
         STARTDATE2,
         STARTPERIODDATE2,
         NEXTPERIODDATE2,
         NEXTINTPAYMENTDATE2
   from &SYSLAST
      where INSTRUMENTTYPECD in ('IRS', 'CIS', 'CAP', 'FLR') 
         AND 
         VALID_FROM_DTTM <= &REPDT < VALID_TO_DTTM
   ;
quit;

%let SYSLAST = work.W1N67GXG4;

%global etls_sql_pushDown;
%let etls_sql_pushDown = &sys_sql_ip_all;

%rcSet(&sqlrc); 



/**  Step end Extract **/

/*==========================================================================* 
 * Step:            User Written                          A5ELGGF9.AK0000XS * 
 * Transform:       User Written                                            * 
 * Description:     Проверка условий DQ                                     * 
 *                                                                          * 
 * Source Table:    Extract - work.W1N67GXG4              A5ELGGF9.AF0000D6 * 
 * Target Table:    User Written - work.W1N676JCA         A5ELGGF9.AF0000D7 * 
 *                                                                          * 
 * User Written:    SourceCode                                              * 
 *==========================================================================*/ 

%let transformID = %quote(A5ELGGF9.AK0000XS);
%let trans_rc = 0;
%let etls_stepStartTime = %sysfunc(datetime(), datetime20.); 

%let etls_recnt = -1;
%let SYSLAST = %nrquote(work.W1N67GXG4); 

%let _INPUT_count = 1;
%let _INPUT = work.W1N67GXG4;
%let _INPUT_connect = ;
%let _INPUT_engine = ;
%let _INPUT_memtype = VIEW;
%let _INPUT_options = %nrquote();
%let _INPUT_alter = %nrquote();
%let _INPUT_path = %nrquote(/Extract_A5ELGGF9.AF0000D6%(WorkTable%));
%let _INPUT_type = 1;
%let _INPUT_label = %nrquote();

%let _INPUT1 = work.W1N67GXG4;
%let _INPUT1_connect = ;
%let _INPUT1_engine = ;
%let _INPUT1_memtype = VIEW;
%let _INPUT1_options = %nrquote();
%let _INPUT1_alter = %nrquote();
%let _INPUT1_path = %nrquote(/Extract_A5ELGGF9.AF0000D6%(WorkTable%));
%let _INPUT1_type = 1;
%let _INPUT1_label = %nrquote();

%let _OUTPUT_count = 1;
%let _OUTPUT = work.W1N676JCA;
%let _OUTPUT_connect = ;
%let _OUTPUT_engine = ;
%let _OUTPUT_memtype = DATA;
%let _OUTPUT_options = %nrquote();
%let _OUTPUT_alter = %nrquote();
%let _OUTPUT_path = %nrquote(/User Written_A5ELGGF9.AF0000D7%(WorkTable%));
%let _OUTPUT_type = 1;
%let _OUTPUT_label = %nrquote();
/* List of target columns to keep  */ 
%let _OUTPUT_keep = REPORTCODE REPORTDATE FRONTKDEALID FRONTFDEALID DEALID 
        INSTRUMENTTYPECD DEALDATE STARTDATE NEXTDATE ENDDATE LEGNUMBER;
%let _OUTPUT_col_count = 11;
%let _OUTPUT_col0_name = REPORTCODE;
%let _OUTPUT_col0_table = work.W1N676JCA;
%let _OUTPUT_col0_length = 5;
%let _OUTPUT_col0_type = $;
%let _OUTPUT_col0_format = $5.;
%let _OUTPUT_col0_informat = $5.;
%let _OUTPUT_col0_label = %nrquote();
%let _OUTPUT_col0_exp = ;
%let _OUTPUT_col0_input_count = 0;
%let _OUTPUT_col1_name = REPORTDATE;
%let _OUTPUT_col1_table = work.W1N676JCA;
%let _OUTPUT_col1_length = 8;
%let _OUTPUT_col1_type = ;
%let _OUTPUT_col1_format = DATETIME20.;
%let _OUTPUT_col1_informat = DATETIME20.;
%let _OUTPUT_col1_label = %nrquote();
%let _OUTPUT_col1_exp = ;
%let _OUTPUT_col1_input_count = 0;
%let _OUTPUT_col2_name = FRONTKDEALID;
%let _OUTPUT_col2_table = work.W1N676JCA;
%let _OUTPUT_col2_length = 10;
%let _OUTPUT_col2_type = $;
%let _OUTPUT_col2_format = $10.;
%let _OUTPUT_col2_informat = $10.;
%let _OUTPUT_col2_label = %nrquote(FRONTKDEALID);
%let _OUTPUT_col2_input0 = FRONTKDEALID;
%let _OUTPUT_col2_exp = ;
%let _OUTPUT_col2_input = FRONTKDEALID;
%let _OUTPUT_col2_input_count = 1;
%let _OUTPUT_col3_name = FRONTFDEALID;
%let _OUTPUT_col3_table = work.W1N676JCA;
%let _OUTPUT_col3_length = 10;
%let _OUTPUT_col3_type = $;
%let _OUTPUT_col3_format = $10.;
%let _OUTPUT_col3_informat = $10.;
%let _OUTPUT_col3_label = %nrquote(FRONTFDEALID);
%let _OUTPUT_col3_input0 = FRONTFDEALID;
%let _OUTPUT_col3_exp = ;
%let _OUTPUT_col3_input = FRONTFDEALID;
%let _OUTPUT_col3_input_count = 1;
%let _OUTPUT_col4_name = DEALID;
%let _OUTPUT_col4_table = work.W1N676JCA;
%let _OUTPUT_col4_length = 100;
%let _OUTPUT_col4_type = $;
%let _OUTPUT_col4_format = $100.;
%let _OUTPUT_col4_informat = $100.;
%let _OUTPUT_col4_label = %nrquote();
%let _OUTPUT_col4_input0 = DEALID1;
%let _OUTPUT_col4_exp = ;
%let _OUTPUT_col4_input = DEALID1;
%let _OUTPUT_col4_input_count = 1;
%let _OUTPUT_col5_name = INSTRUMENTTYPECD;
%let _OUTPUT_col5_table = work.W1N676JCA;
%let _OUTPUT_col5_length = 3;
%let _OUTPUT_col5_type = $;
%let _OUTPUT_col5_format = $3.;
%let _OUTPUT_col5_informat = $3.;
%let _OUTPUT_col5_label = %nrquote(INSTRUMENTTYPECD);
%let _OUTPUT_col5_input0 = INSTRUMENTTYPECD;
%let _OUTPUT_col5_exp = ;
%let _OUTPUT_col5_input = INSTRUMENTTYPECD;
%let _OUTPUT_col5_input_count = 1;
%let _OUTPUT_col6_name = DEALDATE;
%let _OUTPUT_col6_table = work.W1N676JCA;
%let _OUTPUT_col6_length = 8;
%let _OUTPUT_col6_type = ;
%let _OUTPUT_col6_format = DATETIME20.;
%let _OUTPUT_col6_informat = DATETIME20.;
%let _OUTPUT_col6_label = %nrquote(DEALDATE);
%let _OUTPUT_col6_input0 = DEALDATE;
%let _OUTPUT_col6_exp = ;
%let _OUTPUT_col6_input = DEALDATE;
%let _OUTPUT_col6_input_count = 1;
%let _OUTPUT_col7_name = STARTDATE;
%let _OUTPUT_col7_table = work.W1N676JCA;
%let _OUTPUT_col7_length = 8;
%let _OUTPUT_col7_type = ;
%let _OUTPUT_col7_format = DATETIME20.;
%let _OUTPUT_col7_informat = DATETIME20.;
%let _OUTPUT_col7_label = %nrquote();
%let _OUTPUT_col7_input0 = STARTPERIODDATE1;
%let _OUTPUT_col7_exp = ;
%let _OUTPUT_col7_input = STARTPERIODDATE1;
%let _OUTPUT_col7_input_count = 1;
%let _OUTPUT_col8_name = NEXTDATE;
%let _OUTPUT_col8_table = work.W1N676JCA;
%let _OUTPUT_col8_length = 8;
%let _OUTPUT_col8_type = ;
%let _OUTPUT_col8_format = DATETIME20.;
%let _OUTPUT_col8_informat = DATETIME20.;
%let _OUTPUT_col8_label = %nrquote();
%let _OUTPUT_col8_input0 = NEXTPERIODDATE1;
%let _OUTPUT_col8_exp = ;
%let _OUTPUT_col8_input = NEXTPERIODDATE1;
%let _OUTPUT_col8_input_count = 1;
%let _OUTPUT_col9_name = ENDDATE;
%let _OUTPUT_col9_table = work.W1N676JCA;
%let _OUTPUT_col9_length = 8;
%let _OUTPUT_col9_type = ;
%let _OUTPUT_col9_format = DATETIME20.;
%let _OUTPUT_col9_informat = DATETIME20.;
%let _OUTPUT_col9_label = %nrquote();
%let _OUTPUT_col9_input0 = MATURITYDATE1;
%let _OUTPUT_col9_exp = ;
%let _OUTPUT_col9_input = MATURITYDATE1;
%let _OUTPUT_col9_input_count = 1;
%let _OUTPUT_col10_name = LEGNUMBER;
%let _OUTPUT_col10_table = work.W1N676JCA;
%let _OUTPUT_col10_length = 1;
%let _OUTPUT_col10_type = $;
%let _OUTPUT_col10_format = $1.;
%let _OUTPUT_col10_informat = $1.;
%let _OUTPUT_col10_label = %nrquote();
%let _OUTPUT_col10_exp = ;
%let _OUTPUT_col10_input_count = 0;

%let _OUTPUT1 = work.W1N676JCA;
%let _OUTPUT1_connect = ;
%let _OUTPUT1_engine = ;
%let _OUTPUT1_memtype = DATA;
%let _OUTPUT1_options = %nrquote();
%let _OUTPUT1_alter = %nrquote();
%let _OUTPUT1_path = %nrquote(/User Written_A5ELGGF9.AF0000D7%(WorkTable%));
%let _OUTPUT1_type = 1;
%let _OUTPUT1_label = %nrquote();
/* List of target columns to keep  */ 
%let _OUTPUT1_keep = REPORTCODE REPORTDATE FRONTKDEALID FRONTFDEALID DEALID 
        INSTRUMENTTYPECD DEALDATE STARTDATE NEXTDATE ENDDATE LEGNUMBER;
%let _OUTPUT1_col_count = 11;
%let _OUTPUT1_col0_name = REPORTCODE;
%let _OUTPUT1_col0_table = work.W1N676JCA;
%let _OUTPUT1_col0_length = 5;
%let _OUTPUT1_col0_type = $;
%let _OUTPUT1_col0_format = $5.;
%let _OUTPUT1_col0_informat = $5.;
%let _OUTPUT1_col0_label = %nrquote();
%let _OUTPUT1_col0_exp = ;
%let _OUTPUT1_col0_input_count = 0;
%let _OUTPUT1_col1_name = REPORTDATE;
%let _OUTPUT1_col1_table = work.W1N676JCA;
%let _OUTPUT1_col1_length = 8;
%let _OUTPUT1_col1_type = ;
%let _OUTPUT1_col1_format = DATETIME20.;
%let _OUTPUT1_col1_informat = DATETIME20.;
%let _OUTPUT1_col1_label = %nrquote();
%let _OUTPUT1_col1_exp = ;
%let _OUTPUT1_col1_input_count = 0;
%let _OUTPUT1_col2_name = FRONTKDEALID;
%let _OUTPUT1_col2_table = work.W1N676JCA;
%let _OUTPUT1_col2_length = 10;
%let _OUTPUT1_col2_type = $;
%let _OUTPUT1_col2_format = $10.;
%let _OUTPUT1_col2_informat = $10.;
%let _OUTPUT1_col2_label = %nrquote(FRONTKDEALID);
%let _OUTPUT1_col2_input0 = FRONTKDEALID;
%let _OUTPUT1_col2_exp = ;
%let _OUTPUT1_col2_input = FRONTKDEALID;
%let _OUTPUT1_col2_input_count = 1;
%let _OUTPUT1_col3_name = FRONTFDEALID;
%let _OUTPUT1_col3_table = work.W1N676JCA;
%let _OUTPUT1_col3_length = 10;
%let _OUTPUT1_col3_type = $;
%let _OUTPUT1_col3_format = $10.;
%let _OUTPUT1_col3_informat = $10.;
%let _OUTPUT1_col3_label = %nrquote(FRONTFDEALID);
%let _OUTPUT1_col3_input0 = FRONTFDEALID;
%let _OUTPUT1_col3_exp = ;
%let _OUTPUT1_col3_input = FRONTFDEALID;
%let _OUTPUT1_col3_input_count = 1;
%let _OUTPUT1_col4_name = DEALID;
%let _OUTPUT1_col4_table = work.W1N676JCA;
%let _OUTPUT1_col4_length = 100;
%let _OUTPUT1_col4_type = $;
%let _OUTPUT1_col4_format = $100.;
%let _OUTPUT1_col4_informat = $100.;
%let _OUTPUT1_col4_label = %nrquote();
%let _OUTPUT1_col4_input0 = DEALID1;
%let _OUTPUT1_col4_exp = ;
%let _OUTPUT1_col4_input = DEALID1;
%let _OUTPUT1_col4_input_count = 1;
%let _OUTPUT1_col5_name = INSTRUMENTTYPECD;
%let _OUTPUT1_col5_table = work.W1N676JCA;
%let _OUTPUT1_col5_length = 3;
%let _OUTPUT1_col5_type = $;
%let _OUTPUT1_col5_format = $3.;
%let _OUTPUT1_col5_informat = $3.;
%let _OUTPUT1_col5_label = %nrquote(INSTRUMENTTYPECD);
%let _OUTPUT1_col5_input0 = INSTRUMENTTYPECD;
%let _OUTPUT1_col5_exp = ;
%let _OUTPUT1_col5_input = INSTRUMENTTYPECD;
%let _OUTPUT1_col5_input_count = 1;
%let _OUTPUT1_col6_name = DEALDATE;
%let _OUTPUT1_col6_table = work.W1N676JCA;
%let _OUTPUT1_col6_length = 8;
%let _OUTPUT1_col6_type = ;
%let _OUTPUT1_col6_format = DATETIME20.;
%let _OUTPUT1_col6_informat = DATETIME20.;
%let _OUTPUT1_col6_label = %nrquote(DEALDATE);
%let _OUTPUT1_col6_input0 = DEALDATE;
%let _OUTPUT1_col6_exp = ;
%let _OUTPUT1_col6_input = DEALDATE;
%let _OUTPUT1_col6_input_count = 1;
%let _OUTPUT1_col7_name = STARTDATE;
%let _OUTPUT1_col7_table = work.W1N676JCA;
%let _OUTPUT1_col7_length = 8;
%let _OUTPUT1_col7_type = ;
%let _OUTPUT1_col7_format = DATETIME20.;
%let _OUTPUT1_col7_informat = DATETIME20.;
%let _OUTPUT1_col7_label = %nrquote();
%let _OUTPUT1_col7_input0 = STARTPERIODDATE1;
%let _OUTPUT1_col7_exp = ;
%let _OUTPUT1_col7_input = STARTPERIODDATE1;
%let _OUTPUT1_col7_input_count = 1;
%let _OUTPUT1_col8_name = NEXTDATE;
%let _OUTPUT1_col8_table = work.W1N676JCA;
%let _OUTPUT1_col8_length = 8;
%let _OUTPUT1_col8_type = ;
%let _OUTPUT1_col8_format = DATETIME20.;
%let _OUTPUT1_col8_informat = DATETIME20.;
%let _OUTPUT1_col8_label = %nrquote();
%let _OUTPUT1_col8_input0 = NEXTPERIODDATE1;
%let _OUTPUT1_col8_exp = ;
%let _OUTPUT1_col8_input = NEXTPERIODDATE1;
%let _OUTPUT1_col8_input_count = 1;
%let _OUTPUT1_col9_name = ENDDATE;
%let _OUTPUT1_col9_table = work.W1N676JCA;
%let _OUTPUT1_col9_length = 8;
%let _OUTPUT1_col9_type = ;
%let _OUTPUT1_col9_format = DATETIME20.;
%let _OUTPUT1_col9_informat = DATETIME20.;
%let _OUTPUT1_col9_label = %nrquote();
%let _OUTPUT1_col9_input0 = MATURITYDATE1;
%let _OUTPUT1_col9_exp = ;
%let _OUTPUT1_col9_input = MATURITYDATE1;
%let _OUTPUT1_col9_input_count = 1;
%let _OUTPUT1_col10_name = LEGNUMBER;
%let _OUTPUT1_col10_table = work.W1N676JCA;
%let _OUTPUT1_col10_length = 1;
%let _OUTPUT1_col10_type = $;
%let _OUTPUT1_col10_format = $1.;
%let _OUTPUT1_col10_informat = $1.;
%let _OUTPUT1_col10_label = %nrquote();
%let _OUTPUT1_col10_exp = ;
%let _OUTPUT1_col10_input_count = 0;

/*---- Start of User Written Code  ----*/ 

/*====================================================================*/
/* Проверка условий согласно FSD													 */
/*																							 */
/* 2012-08-30 - Chepigin Alexander - Initial Coding						 */
/*====================================================================*/

data &_OUTPUT (keep = DEALRK REPORTCODE REPORTDATE FRONTKDEALID FRONTFDEALID DEALID INSTRUMENTTYPECD DEALDATE STARTDATE NEXTDATE ENDDATE LEGNUMBER);
	attrib 
			REPORTCODE length = $5 format = $5. informat = $5.
			REPORTDATE length = 8 format = DATETIME20. informat = DATETIME20.
			FRONTKDEALID length = $10 format = $10. informat = $10.
			FRONTFDEALID length = $10 format = $10. informat = $10.
			DEALID length = $100 format = $100. informat = $100.
			INSTRUMENTTYPECD length = $3 format = $3. informat = $3.
			DEALDATE length = 8 format = DATETIME20. informat = DATETIME20.
			STARTDATE length = 8 format = DATETIME20. informat = DATETIME20.
			NEXTDATE length = 8 format = DATETIME20. informat = DATETIME20.
			ENDDATE length = 8 format = DATETIME20. informat = DATETIME20.
			LEGNUMBER length = $1 format = $1. informat = $1.
		;
	set &_INPUT1;
	REPORTCODE = 'П-04';
	REPORTDATE = &REPDT.;
	select;
		when (INSTRUMENTTYPECD = 'IRS' OR INSTRUMENTTYPECD = 'CIS')
		do;
			if (
				missing(NEXTPERIODDATE1) = 0 AND
				(NEXTPERIODDATE1 >= MATURITYDATE1)
				) then
				do;
					select;
						when (missing(DEALID1)) DEALID=DEALID2;
						when (missing(DEALID2)) DEALID=DEALID1;
						when (not missing(DEALID1) AND not missing(DEALID2)) DEALID = cats(DEALID1, ',', DEALID2);
						otherwise DEALID = " ";
					end;
					STARTDATE = coalesce(STARTPERIODDATE1, STARTPERIODDATE2);
					NEXTDATE = coalesce(NEXTPERIODDATE1, NEXTPERIODDATE2);
					ENDDATE = coalesce(MATURITYDATE1, MATURITYDATE2);
					LEGNUMBER = '1';
					output;
				end;
			if (
				missing(NEXTPERIODDATE2) = 0 AND
				(NEXTPERIODDATE2 >= MATURITYDATE2)
				) then 
				do;
					select;
						when (missing(DEALID1)) DEALID=DEALID2;
						when (missing(DEALID2)) DEALID=DEALID1;
						when (not missing(DEALID1) AND not missing(DEALID2)) DEALID = cats(DEALID1, ',', DEALID2);
						otherwise DEALID = " ";
					end;
					STARTDATE = coalesce(STARTPERIODDATE1, STARTPERIODDATE2);
					NEXTDATE = coalesce(NEXTPERIODDATE1, NEXTPERIODDATE2);
					ENDDATE = coalesce(MATURITYDATE1, MATURITYDATE2);
					LEGNUMBER = '2';
					output;
				end;
		end;
		when (INSTRUMENTTYPECD = 'CAP' OR INSTRUMENTTYPECD = 'FLR')
		do;
			if (
				missing(NEXTPERIODDATE1) = 0 AND
				(NEXTPERIODDATE1 >= MATURITYDATE1)
				) then 
				do;
					DEALID = DEALID1;
					STARTDATE = STARTPERIODDATE1;
					NEXTDATE = NEXTPERIODDATE1;
					ENDDATE = MATURITYDATE1;
					LEGNUMBER = ' ';
					output;
				end;
		end;
	end;
run;
%error_check(mpStepType=DATA);
/*---- End of User Written Code  ----*/ 

%rcSet(&syserr); 
%rcSet(&sqlrc); 


/**  Step end User Written **/

/*==========================================================================* 
 * Step:            Table Loader                          A5ELGGF9.AK0000XT * 
 * Transform:       Table Loader (Version 2.1)                              * 
 * Description:                                                             * 
 *                                                                          * 
 * Source Table:    User Written - work.W1N676JCA         A5ELGGF9.AF0000D7 * 
 * Target Table:    DQ_DRVT_DWH_DM - dm_dq.DQ_DRVT_DWH_DM A5ELGGF9.AE000049 * 
 *==========================================================================*/ 

%let transformID = %quote(A5ELGGF9.AK0000XT);
%let trans_rc = 0;
%let etls_stepStartTime = %sysfunc(datetime(), datetime20.); 

%let SYSLAST = %nrquote(work.W1N676JCA); 

%let SYS_SQL_IP_SPEEDO = Y;
%let SYS_SQL_MAPPUTTO = sas_put;
%let SYS_SQLREDUCEPUT = DBMS;
%global etls_sql_pushDown;
%let etls_sql_pushDown = -1;
option DBIDIRECTEXEC;

%global etls_tableExist;
%global etls_numIndex;
%global etls_lastTable;
%let etls_tableExist = -1; 
%let etls_numIndex = -1; 
%let etls_lastTable = &SYSLAST; 

/*---- Define load data macro  ----*/ 

/* --------------------------------------------------------------
   Load Technique Selection: AppendToExisting - AppendProc
   Constraint and index action selections: 'ASIS','ASIS','ASIS','ASIS'
   Additional options selections... 
      Set unmapped to missing on updates: false 
   -------------------------------------------------------------- */
%macro etls_loader;

   %let etls_tableOptions = ;
   
   /*---- Map the columns  ----*/ 
   proc datasets lib = work nolist nowarn memtype = (data view);
      delete WJ2Y3JO;
   quit;
   
   data _null_;
      put "NOTE: The following column(s) do not have a column mapping, so the"
           " value(s) will be set to missing: ADDITIONALINFORMATION, VALUEFRS,"
           " VALUESEC";
   run;
   
   %put %str(NOTE: Mapping columns ...);
   proc sql;
      create view work.WJ2Y3JO as
         select
            REPORTCODE,
            REPORTDATE,
            FRONTKDEALID,
            FRONTFDEALID,
            DEALID,
            INSTRUMENTTYPECD,
            DEALDATE,
            "" as ADDITIONALINFORMATION length = 255
               format = $255.
               informat = $255.,
            STARTDATE,
            NEXTDATE,
            ENDDATE,
            LEGNUMBER,
            "" as VALUEFRS length = 20
               format = $20.
               informat = $20.,
            "" as VALUESEC length = 20
               format = $20.
               informat = $20.
      from &etls_lastTable
      ;
   quit;
   
   %let SYSLAST = work.WJ2Y3JO;
   
   %let etls_lastTable = &SYSLAST; 
   %let etls_tableOptions = ; 
   
   /* Determine if the target table exists  */ 
   %let etls_tableExist = %eval(%sysfunc(exist(dm_dq.DQ_DRVT_DWH_DM, DATA)) or 
         %sysfunc(exist(dm_dq.DQ_DRVT_DWH_DM, VIEW))); 
   
   /*---- Create a new table  ----*/ 
   %if (&etls_tableExist eq 0) %then 
   %do;  /* if table does not exist  */ 
   
      %put %str(NOTE: Creating table ...);
      
      data dm_dq.DQ_DRVT_DWH_DM
              (dbnull = (
                         REPORTCODE = YES
                         REPORTDATE = YES
                         FRONTKDEALID = YES
                         FRONTFDEALID = YES
                         DEALID = YES
                         INSTRUMENTTYPECD = YES
                         DEALDATE = YES
                         ADDITIONALINFORMATION = YES
                         STARTDATE = YES
                         NEXTDATE = YES
                         ENDDATE = YES
                         LEGNUMBER = YES
                         VALUEFRS = YES
                         VALUESEC = YES));
         attrib REPORTCODE length = $5
            format = $5.
            informat = $5.
            label = 'REPORTCODE'; 
         attrib REPORTDATE length = 8
            format = DATETIME20.
            informat = DATETIME20.
            label = 'REPORTDATE'; 
         attrib FRONTKDEALID length = $10
            format = $10.
            informat = $10.
            label = 'FRONTKDEALID'; 
         attrib FRONTFDEALID length = $10
            format = $10.
            informat = $10.
            label = 'FRONTFDEALID'; 
         attrib DEALID length = $100
            format = $100.
            informat = $100.
            label = 'DEALID'; 
         attrib INSTRUMENTTYPECD length = $3
            format = $3.
            informat = $3.
            label = 'INSTRUMENTTYPECD'; 
         attrib DEALDATE length = 8
            format = DATETIME20.
            informat = DATETIME20.
            label = 'DEALDATE'; 
         attrib ADDITIONALINFORMATION length = $255
            format = $255.
            informat = $255.
            label = 'ADDITIONALINFORMATION'; 
         attrib STARTDATE length = 8
            format = DATETIME20.
            informat = DATETIME20.
            label = 'STARTDATE'; 
         attrib NEXTDATE length = 8
            format = DATETIME20.
            informat = DATETIME20.
            label = 'NEXTDATE'; 
         attrib ENDDATE length = 8
            format = DATETIME20.
            informat = DATETIME20.
            label = 'ENDDATE'; 
         attrib LEGNUMBER length = $1
            format = $1.
            informat = $1.
            label = 'LEGNUMBER'; 
         attrib VALUEFRS length = $20
            format = $20.
            informat = $20.
            label = 'VALUEFRS'; 
         attrib VALUESEC length = $20
            format = $20.
            informat = $20.
            label = 'VALUESEC'; 
         call missing(of _all_);
         stop;
      run;
      
      %rcSet(&syserr); 
      
   %end;  /* if table does not exist  */ 
   
   /*---- Append  ----*/ 
   %put %str(NOTE: Appending data ...);
   
   proc append base = dm_dq.DQ_DRVT_DWH_DM 
      data = &etls_lastTable (&etls_tableOptions)  force ; 
    run; 
   
   %rcSet(&syserr); 
   
   proc datasets lib = work nolist nowarn memtype = (data view);
      delete WJ2Y3JO;
   quit;
   
%mend etls_loader;
%etls_loader;

%let etls_recnt = 0;
%macro etls_recordCheck; 
   %let etls_recCheckExist = %eval(%sysfunc(exist(dm_dq.DQ_DRVT_DWH_DM, DATA)) or 
         %sysfunc(exist(dm_dq.DQ_DRVT_DWH_DM, VIEW))); 
   
   %if (&etls_recCheckExist) %then
   %do;
      proc sql noprint;
         select count(*) into :etls_recnt from dm_dq.DQ_DRVT_DWH_DM;
      quit;
   %end;
%mend etls_recordCheck;
%etls_recordCheck;



/**  Step end Table Loader **/

/*==========================================================================* 
 * Step:            SQL Join                              A5ELGGF9.AK0000XU * 
 * Transform:       Join                                                    * 
 * Description:                                                             * 
 *                                                                          * 
 * Source Tables:   User Written - work.W1N676JCA         A5ELGGF9.AF0000D7 * 
 *                  INSTRUMENTTYPE -                      A5LX14I5.A900001B * 
 *                   DM_DRVT.INSTRUMENTTYPE                                 * 
 * Target Table:    SQL Join - work.W1M0IVTMQ             A5ELGGF9.AF0000D8 * 
 *==========================================================================*/ 

%let transformID = %quote(A5ELGGF9.AK0000XU);
%let trans_rc = 0;
%let etls_stepStartTime = %sysfunc(datetime(), datetime20.); 

%let etls_recCheckExist = 0; 
%let etls_recnt = 0; 
%macro etls_recordCheck; 
   %let etls_recCheckExist = %eval(%sysfunc(exist(work.W1N676JCA, DATA)) or 
         %sysfunc(exist(work.W1N676JCA, VIEW))); 
   
   %if (&etls_recCheckExist) %then
   %do;
      %local etls_syntaxcheck; 
      %let etls_syntaxcheck = %sysfunc(getoption(syntaxcheck)); 
      /* Turn off syntaxcheck option to perform following steps  */ 
      options nosyntaxcheck;
      
      proc contents data = work.W1N676JCA out = work.etls_contents(keep = nobs) noprint; 
      run; 
      
      data _null_; 
         set work.etls_contents (obs = 1); 
         call symput("etls_recnt", left(put(nobs,32.))); 
      run;
      
      proc datasets lib = work nolist nowarn memtype = (data view);
         delete etls_contents;
      quit;
      
      /* Reset syntaxcheck option to previous setting  */ 
      options &etls_syntaxcheck; 
   %end;
%mend etls_recordCheck;
%etls_recordCheck;

%let SYS_SQL_IP_SPEEDO = Y;
%let SYS_SQL_MAPPUTTO = sas_put;
%let SYS_SQLREDUCEPUT = DBMS;
%global etls_sql_pushDown;
%let etls_sql_pushDown = -1;
option DBIDIRECTEXEC;

proc datasets lib = work nolist nowarn memtype = (data view);
   delete W1M0IVTMQ;
quit;

proc sql;
   create table work.W1M0IVTMQ as
   select distinct
      W1N676JCA.INSTRUMENTTYPECD length = 3   
         format = $3.
         informat = $3.
         label = 'INSTRUMENTTYPECD',
      INSTRUMENTTYPE.INSTRUMENTTYPE length = 100   
         format = $100.
         informat = $100.
         label = 'INSTRUMENTTYPE'
   from
      work.W1N676JCA left join 
      DM_DRVT.INSTRUMENTTYPE
         on
         (
            W1N676JCA.INSTRUMENTTYPECD = INSTRUMENTTYPE.INSTRUMENTTYPECD
         )
   where
      W1N676JCA.INSTRUMENTTYPECD NOT IS MISSING 
   ;
quit;

%global etls_sql_pushDown;
%let etls_sql_pushDown = &sys_sql_ip_all;

%rcSet(&sqlrc); 



/**  Step end SQL Join **/

/*==========================================================================* 
 * Step:            Table Loader                          A5ELGGF9.AK0000XV * 
 * Transform:       Table Loader (Version 2.1)                              * 
 * Description:                                                             * 
 *                                                                          * 
 * Source Table:    SQL Join - work.W1M0IVTMQ             A5ELGGF9.AF0000D8 * 
 * Target Table:    DQ_DRVT_INSTRUMENTTYPE -              A5ELGGF9.AE00004A * 
 *                   dm_dq.DQ_DRVT_INSTRUMENTTYPE                           * 
 *==========================================================================*/ 

%let transformID = %quote(A5ELGGF9.AK0000XV);
%let trans_rc = 0;
%let etls_stepStartTime = %sysfunc(datetime(), datetime20.); 

%let SYSLAST = %nrquote(work.W1M0IVTMQ); 

%let SYS_SQL_IP_SPEEDO = Y;
%let SYS_SQL_MAPPUTTO = sas_put;
%let SYS_SQLREDUCEPUT = DBMS;
%global etls_sql_pushDown;
%let etls_sql_pushDown = -1;
option DBIDIRECTEXEC;

%global etls_tableExist;
%global etls_numIndex;
%global etls_lastTable;
%let etls_tableExist = -1; 
%let etls_numIndex = -1; 
%let etls_lastTable = &SYSLAST; 

/*---- Define load data macro  ----*/ 

/* --------------------------------------------------------------
   Load Technique Selection: Update - Matching=SQLSet, New=AppendProc
   Blanks may replace non-blanks: false
   Constraint and index action selections: 'ASIS','ASIS','ASIS','ASIS'
   Additional options selections... 
      Set unmapped to missing on updates: false 
   -------------------------------------------------------------- */
%macro etls_loader;

   %let etls_tableOptions = ;
   
   /* Determine if the target table exists  */ 
   %let etls_tableExist = %eval(%sysfunc(exist(dm_dq.DQ_DRVT_INSTRUMENTTYPE, DATA)) or 
         %sysfunc(exist(dm_dq.DQ_DRVT_INSTRUMENTTYPE, VIEW))); 
   
   %let etls_hasUpdateIndex=0; 
   
   /*---- Create a new table  ----*/ 
   %if (&etls_tableExist eq 0) %then 
   %do;  /* if table does not exist  */ 
   
      %put %str(NOTE: Creating table ...);
      
      data dm_dq.DQ_DRVT_INSTRUMENTTYPE
              (dbnull = (
                         INSTRUMENTTYPECD = YES
                         INSTRUMENTTYPE = YES));
         attrib INSTRUMENTTYPECD length = $3
            format = $3.
            informat = $3.
            label = 'INSTRUMENTTYPECD'; 
         attrib INSTRUMENTTYPE length = $100
            format = $100.
            informat = $100.
            label = 'INSTRUMENTTYPE'; 
         call missing(of _all_);
         stop;
      run;
      
      %rcSet(&syserr); 
      
   %end;  /* if table does not exist  */ 
   
   %let etls_recCheckExist = 0; 
   %let etls_targetHasRows = 0; 
   %macro etls_recordCheck; 
      %let etls_recCheckExist = %eval(%sysfunc(exist(dm_dq.DQ_DRVT_INSTRUMENTTYPE, DATA)) or 
            %sysfunc(exist(dm_dq.DQ_DRVT_INSTRUMENTTYPE, VIEW))); 
      
      %if (&etls_recCheckExist) %then
      %do;
         %local etls_syntaxcheck; 
         %let etls_syntaxcheck = %sysfunc(getoption(syntaxcheck)); 
         /* Turn off syntaxcheck option to perform following steps  */ 
         options nosyntaxcheck;
         
         data _null_; 
            set dm_dq.DQ_DRVT_INSTRUMENTTYPE( obs=1 ); 
            call symput("etls_targetHasRows",'1'); 
         run; 
         /* Reset syntaxcheck option to previous setting  */ 
         options &etls_syntaxcheck; 
      %end;
   %mend etls_recordCheck;
   %etls_recordCheck;
   
   
   %if (&etls_targetHasRows) %then 
   %do;  /* if has rows */ 
      proc sql ; 
         /* update existing records in the master table  */ 
         update dm_dq.DQ_DRVT_INSTRUMENTTYPE as m
            set INSTRUMENTTYPE = (select case when t.INSTRUMENTTYPE="" then m.INSTRUMENTTYPE else t.INSTRUMENTTYPE end from &etls_lastTable as t 
                                where m.INSTRUMENTTYPECD = t.INSTRUMENTTYPECD)
               where exists (select * from &etls_lastTable as t
                                   where m.INSTRUMENTTYPECD = t.INSTRUMENTTYPECD);
         
         /* create a temporary table of new records from the transaction table  */ 
         create table etls_newrecords as 
            select * 
               from &etls_lastTable as t 
                  where not exists 
                     (select * from dm_dq.DQ_DRVT_INSTRUMENTTYPE
                   as m 
                                      where m.INSTRUMENTTYPECD = t.INSTRUMENTTYPECD)
         ; 
         
      quit;
      
      %let etls_lastTable = &SYSLAST;
      
      %let etls_tableOptions = ; 
      
      %global etls_sql_pushDown;
      %let etls_sql_pushDown = &sys_sql_ip_all;
      
      %rcSet(&sqlrc); 
      
   %end; /* if has rows */ 
   
   /*---- Append  ----*/ 
   %put %str(NOTE: Appending data ...);
   
   proc append base = dm_dq.DQ_DRVT_INSTRUMENTTYPE 
      data = &etls_lastTable (&etls_tableOptions)  force ; 
    run; 
   
   %rcSet(&syserr); 
   
   proc datasets lib = work nolist nowarn memtype = (data view);
      delete etls_newrecords;
   quit;
   
%mend etls_loader;
%etls_loader;

%let etls_recnt = 0;
%macro etls_recordCheck; 
   %let etls_recCheckExist = %eval(%sysfunc(exist(dm_dq.DQ_DRVT_INSTRUMENTTYPE, DATA)) or 
         %sysfunc(exist(dm_dq.DQ_DRVT_INSTRUMENTTYPE, VIEW))); 
   
   %if (&etls_recCheckExist) %then
   %do;
      proc sql noprint;
         select count(*) into :etls_recnt from dm_dq.DQ_DRVT_INSTRUMENTTYPE;
      quit;
   %end;
%mend etls_recordCheck;
%etls_recordCheck;



/**  Step end Table Loader **/

/*==========================================================================* 
 * Step:            User Written                          A5ELGGF9.AK0000XW * 
 * Transform:       User Written                                            * 
 * Description:     Сбор статистики                                         * 
 *                                                                          * 
 * Source Tables:   Extract - work.W1N67GXG4              A5ELGGF9.AF0000D6 * 
 *                  User Written - work.W1N676JCA         A5ELGGF9.AF0000D7 * 
 *                  ETL_JOB - etl_sys.ETL_JOB             A59S11RW.AE00001A * 
 * Target Table:    User Written - work.W1N6JR89O         A5ELGGF9.AF0000D9 * 
 *                                                                          * 
 * User Written:    SourceCode                                              * 
 *==========================================================================*/ 

%let transformID = %quote(A5ELGGF9.AK0000XW);
%let trans_rc = 0;
%let etls_stepStartTime = %sysfunc(datetime(), datetime20.); 

%let etls_recnt = -1;
%let _INPUT_count = 3;
%let _INPUT = work.W1N67GXG4;
%let _INPUT_connect = ;
%let _INPUT_engine = ;
%let _INPUT_memtype = VIEW;
%let _INPUT_options = %nrquote();
%let _INPUT_alter = %nrquote();
%let _INPUT_path = %nrquote(/Extract_A5ELGGF9.AF0000D6%(WorkTable%));
%let _INPUT_type = 1;
%let _INPUT_label = %nrquote();

%let _INPUT1 = work.W1N67GXG4;
%let _INPUT1_connect = ;
%let _INPUT1_engine = ;
%let _INPUT1_memtype = VIEW;
%let _INPUT1_options = %nrquote();
%let _INPUT1_alter = %nrquote();
%let _INPUT1_path = %nrquote(/Extract_A5ELGGF9.AF0000D6%(WorkTable%));
%let _INPUT1_type = 1;
%let _INPUT1_label = %nrquote();

%let _INPUT2 = work.W1N676JCA;
%let _INPUT2_connect = ;
%let _INPUT2_engine = ;
%let _INPUT2_memtype = DATA;
%let _INPUT2_options = %nrquote();
%let _INPUT2_alter = %nrquote();
%let _INPUT2_path = %nrquote(/User Written_A5ELGGF9.AF0000D7%(WorkTable%));
%let _INPUT2_type = 1;
%let _INPUT2_label = %nrquote();

%let _INPUT3 = etl_sys.ETL_JOB;
%let _INPUT3_connect =  PATH=DWH.IMB.RU AUTHDOMAIN="OraAuth_ETL_SYS" 
;
%let _INPUT3_engine = ORACLE;
%let _INPUT3_memtype = DATA;
%let _INPUT3_options = %nrquote();
%let _INPUT3_alter = %nrquote();
%let _INPUT3_path = %nrquote(/DWH_DWHDDS_SYS/Tables/ETL_SYS/ETL_JOB%(Table%));
%let _INPUT3_type = 1;
%let _INPUT3_label = %nrquote();

%let _OUTPUT_count = 1;
%let _OUTPUT = work.W1N6JR89O;
%let _OUTPUT_connect = ;
%let _OUTPUT_engine = ;
%let _OUTPUT_memtype = DATA;
%let _OUTPUT_options = %nrquote();
%let _OUTPUT_alter = %nrquote();
%let _OUTPUT_path = %nrquote(/User Written_A5ELGGF9.AF0000D9%(WorkTable%));
%let _OUTPUT_type = 1;
%let _OUTPUT_label = %nrquote();
/* List of target columns to keep  */ 
%let _OUTPUT_keep = REP_DT REP_ID PRC CNT_ALL CNT_ERR DWH_DT;
%let _OUTPUT_col_count = 6;
%let _OUTPUT_col0_name = REP_DT;
%let _OUTPUT_col0_table = work.W1N6JR89O;
%let _OUTPUT_col0_length = 8;
%let _OUTPUT_col0_type = ;
%let _OUTPUT_col0_format = DATETIME20.;
%let _OUTPUT_col0_informat = ;
%let _OUTPUT_col0_label = %nrquote();
%let _OUTPUT_col0_exp = ;
%let _OUTPUT_col0_input_count = 0;
%let _OUTPUT_col1_name = REP_ID;
%let _OUTPUT_col1_table = work.W1N6JR89O;
%let _OUTPUT_col1_length = 8;
%let _OUTPUT_col1_type = ;
%let _OUTPUT_col1_format = ;
%let _OUTPUT_col1_informat = ;
%let _OUTPUT_col1_label = %nrquote();
%let _OUTPUT_col1_exp = ;
%let _OUTPUT_col1_input_count = 0;
%let _OUTPUT_col2_name = PRC;
%let _OUTPUT_col2_table = work.W1N6JR89O;
%let _OUTPUT_col2_length = 8;
%let _OUTPUT_col2_type = ;
%let _OUTPUT_col2_format = ;
%let _OUTPUT_col2_informat = ;
%let _OUTPUT_col2_label = %nrquote();
%let _OUTPUT_col2_exp = ;
%let _OUTPUT_col2_input_count = 0;
%let _OUTPUT_col3_name = CNT_ALL;
%let _OUTPUT_col3_table = work.W1N6JR89O;
%let _OUTPUT_col3_length = 8;
%let _OUTPUT_col3_type = ;
%let _OUTPUT_col3_format = ;
%let _OUTPUT_col3_informat = ;
%let _OUTPUT_col3_label = %nrquote();
%let _OUTPUT_col3_exp = ;
%let _OUTPUT_col3_input_count = 0;
%let _OUTPUT_col4_name = CNT_ERR;
%let _OUTPUT_col4_table = work.W1N6JR89O;
%let _OUTPUT_col4_length = 8;
%let _OUTPUT_col4_type = ;
%let _OUTPUT_col4_format = ;
%let _OUTPUT_col4_informat = ;
%let _OUTPUT_col4_label = %nrquote();
%let _OUTPUT_col4_exp = ;
%let _OUTPUT_col4_input_count = 0;
%let _OUTPUT_col5_name = DWH_DT;
%let _OUTPUT_col5_table = work.W1N6JR89O;
%let _OUTPUT_col5_length = 8;
%let _OUTPUT_col5_type = ;
%let _OUTPUT_col5_format = DATETIME20.;
%let _OUTPUT_col5_informat = ;
%let _OUTPUT_col5_label = %nrquote();
%let _OUTPUT_col5_exp = ;
%let _OUTPUT_col5_input_count = 0;

%let _OUTPUT1 = work.W1N6JR89O;
%let _OUTPUT1_connect = ;
%let _OUTPUT1_engine = ;
%let _OUTPUT1_memtype = DATA;
%let _OUTPUT1_options = %nrquote();
%let _OUTPUT1_alter = %nrquote();
%let _OUTPUT1_path = %nrquote(/User Written_A5ELGGF9.AF0000D9%(WorkTable%));
%let _OUTPUT1_type = 1;
%let _OUTPUT1_label = %nrquote();
/* List of target columns to keep  */ 
%let _OUTPUT1_keep = REP_DT REP_ID PRC CNT_ALL CNT_ERR DWH_DT;
%let _OUTPUT1_col_count = 6;
%let _OUTPUT1_col0_name = REP_DT;
%let _OUTPUT1_col0_table = work.W1N6JR89O;
%let _OUTPUT1_col0_length = 8;
%let _OUTPUT1_col0_type = ;
%let _OUTPUT1_col0_format = DATETIME20.;
%let _OUTPUT1_col0_informat = ;
%let _OUTPUT1_col0_label = %nrquote();
%let _OUTPUT1_col0_exp = ;
%let _OUTPUT1_col0_input_count = 0;
%let _OUTPUT1_col1_name = REP_ID;
%let _OUTPUT1_col1_table = work.W1N6JR89O;
%let _OUTPUT1_col1_length = 8;
%let _OUTPUT1_col1_type = ;
%let _OUTPUT1_col1_format = ;
%let _OUTPUT1_col1_informat = ;
%let _OUTPUT1_col1_label = %nrquote();
%let _OUTPUT1_col1_exp = ;
%let _OUTPUT1_col1_input_count = 0;
%let _OUTPUT1_col2_name = PRC;
%let _OUTPUT1_col2_table = work.W1N6JR89O;
%let _OUTPUT1_col2_length = 8;
%let _OUTPUT1_col2_type = ;
%let _OUTPUT1_col2_format = ;
%let _OUTPUT1_col2_informat = ;
%let _OUTPUT1_col2_label = %nrquote();
%let _OUTPUT1_col2_exp = ;
%let _OUTPUT1_col2_input_count = 0;
%let _OUTPUT1_col3_name = CNT_ALL;
%let _OUTPUT1_col3_table = work.W1N6JR89O;
%let _OUTPUT1_col3_length = 8;
%let _OUTPUT1_col3_type = ;
%let _OUTPUT1_col3_format = ;
%let _OUTPUT1_col3_informat = ;
%let _OUTPUT1_col3_label = %nrquote();
%let _OUTPUT1_col3_exp = ;
%let _OUTPUT1_col3_input_count = 0;
%let _OUTPUT1_col4_name = CNT_ERR;
%let _OUTPUT1_col4_table = work.W1N6JR89O;
%let _OUTPUT1_col4_length = 8;
%let _OUTPUT1_col4_type = ;
%let _OUTPUT1_col4_format = ;
%let _OUTPUT1_col4_informat = ;
%let _OUTPUT1_col4_label = %nrquote();
%let _OUTPUT1_col4_exp = ;
%let _OUTPUT1_col4_input_count = 0;
%let _OUTPUT1_col5_name = DWH_DT;
%let _OUTPUT1_col5_table = work.W1N6JR89O;
%let _OUTPUT1_col5_length = 8;
%let _OUTPUT1_col5_type = ;
%let _OUTPUT1_col5_format = DATETIME20.;
%let _OUTPUT1_col5_informat = ;
%let _OUTPUT1_col5_label = %nrquote();
%let _OUTPUT1_col5_exp = ;
%let _OUTPUT1_col5_input_count = 0;

/*---- Start of User Written Code  ----*/ 

proc sql;
/*Кол-во всех уникальных деривативных сделок*/
	select count(distinct DEALRK) into :CNT_ALL from &_INPUT1;
/*Кол-во ошибочных сделок*/
	select count(distinct DEALRK) into :CNT_ERR from &_INPUT2;
/*Дата успешного выполнения процесса в DWH*/
	select end_dttm into :DWH_DT from &_INPUT3 where JOB_ID = (
  select MAX(job_id) 
  from &_INPUT3 
  where upper(job_nm) = '401_021_MART_DEAL' and success_flg = 'Y'
  );
quit;
%error_check(mpStepType=SQL);

data &_OUTPUT1;
	attrib
		REP_DT length = 8 format = DATETIME20.
		REP_ID length = 8
		PRC length =8
		CNT_ALL length=8
		CNT_ERR length = 8
		DWH_DT length = 8 format = DATETIME20.
	;

	REP_DT = &REPDT.;
	REP_ID = 4;
	PRC = DIVIDE(&CNT_ERR. , &CNT_ALL.) * 100;
	if missing(PRC) then PRC=0;
	CNT_ALL = &CNT_ALL.;
	CNT_ERR = &CNT_ERR.;
	DWH_DT = "&DWH_DT."dt;
run;
%error_check(mpStepType=DATA);
/*---- End of User Written Code  ----*/ 

%rcSet(&syserr); 
%rcSet(&sqlrc); 


/**  Step end User Written **/

/*==========================================================================* 
 * Step:            Table Loader                          A5ELGGF9.AK0000XX * 
 * Transform:       Table Loader (Version 2.1)                              * 
 * Description:                                                             * 
 *                                                                          * 
 * Source Table:    User Written - work.W1N6JR89O         A5ELGGF9.AF0000D9 * 
 * Target Table:    DQ_DRVT_REPORT_PRC -                  A5ELGGF9.AE00004E * 
 *                   dm_dq.DQ_DRVT_REPORT_PRC                               * 
 *==========================================================================*/ 

%let transformID = %quote(A5ELGGF9.AK0000XX);
%let trans_rc = 0;
%let etls_stepStartTime = %sysfunc(datetime(), datetime20.); 

%let SYSLAST = %nrquote(work.W1N6JR89O); 

%let SYS_SQL_IP_SPEEDO = Y;
%let SYS_SQL_MAPPUTTO = sas_put;
%let SYS_SQLREDUCEPUT = DBMS;
%global etls_sql_pushDown;
%let etls_sql_pushDown = -1;
option DBIDIRECTEXEC;

%global etls_tableExist;
%global etls_numIndex;
%global etls_lastTable;
%let etls_tableExist = -1; 
%let etls_numIndex = -1; 
%let etls_lastTable = &SYSLAST; 

/*---- Define load data macro  ----*/ 

/* --------------------------------------------------------------
   Load Technique Selection: AppendToExisting - AppendProc
   Constraint and index action selections: 'ASIS','ASIS','ASIS','ASIS'
   Additional options selections... 
      Set unmapped to missing on updates: false 
   -------------------------------------------------------------- */
%macro etls_loader;

   %let etls_tableOptions = ;
   
   /*---- Map the columns  ----*/ 
   proc datasets lib = work nolist nowarn memtype = (data view);
      delete WJ2Y3V8;
   quit;
   
   %put %str(NOTE: Mapping columns ...);
   proc sql;
      create view work.WJ2Y3V8 as
         select
            REP_DT   
               informat = DATETIME20.,
            REP_ID   
               format = 7.
               informat = 7.,
            PRC   
               format = 19.8
               informat = 19.8,
            CNT_ALL   
               format = 13.
               informat = 13.,
            CNT_ERR   
               format = 13.
               informat = 13.,
            DWH_DT   
               informat = DATETIME20.
      from &etls_lastTable
      ;
   quit;
   
   %let SYSLAST = work.WJ2Y3V8;
   
   %let etls_lastTable = &SYSLAST; 
   %let etls_tableOptions = ; 
   
   /* Determine if the target table exists  */ 
   %let etls_tableExist = %eval(%sysfunc(exist(dm_dq.DQ_DRVT_REPORT_PRC, DATA)) or 
         %sysfunc(exist(dm_dq.DQ_DRVT_REPORT_PRC, VIEW))); 
   
   /*---- Create a new table  ----*/ 
   %if (&etls_tableExist eq 0) %then 
   %do;  /* if table does not exist  */ 
   
      %put %str(NOTE: Creating table ...);
      
      data dm_dq.DQ_DRVT_REPORT_PRC
              (dbnull = (
                         REP_DT = NO
                         REP_ID = NO
                         PRC = YES
                         CNT_ALL = YES
                         CNT_ERR = YES
                         DWH_DT = YES));
         attrib REP_DT length = 8
            format = DATETIME20.
            informat = DATETIME20.
            label = 'REP_DT'; 
         attrib REP_ID length = 8
            format = 7.
            informat = 7.
            label = 'REP_ID'; 
         attrib PRC length = 8
            format = 19.8
            informat = 19.8
            label = 'PRC'; 
         attrib CNT_ALL length = 8
            format = 13.
            informat = 13.
            label = 'CNT_ALL'; 
         attrib CNT_ERR length = 8
            format = 13.
            informat = 13.
            label = 'CNT_ERR'; 
         attrib DWH_DT length = 8
            format = DATETIME20.
            informat = DATETIME20.
            label = 'DWH_DT'; 
         call missing(of _all_);
         stop;
      run;
      
      %rcSet(&syserr); 
      
   %end;  /* if table does not exist  */ 
   
   /*---- Append  ----*/ 
   %put %str(NOTE: Appending data ...);
   
   proc append base = dm_dq.DQ_DRVT_REPORT_PRC 
      data = &etls_lastTable (&etls_tableOptions)  force ; 
    run; 
   
   %rcSet(&syserr); 
   
   proc datasets lib = work nolist nowarn memtype = (data view);
      delete WJ2Y3V8;
   quit;
   
%mend etls_loader;
%etls_loader;

%let etls_recnt = 0;
%macro etls_recordCheck; 
   %let etls_recCheckExist = %eval(%sysfunc(exist(dm_dq.DQ_DRVT_REPORT_PRC, DATA)) or 
         %sysfunc(exist(dm_dq.DQ_DRVT_REPORT_PRC, VIEW))); 
   
   %if (&etls_recCheckExist) %then
   %do;
      proc sql noprint;
         select count(*) into :etls_recnt from dm_dq.DQ_DRVT_REPORT_PRC;
      quit;
   %end;
%mend etls_recordCheck;
%etls_recordCheck;



/**  Step end Table Loader **/

/*==========================================================================* 
 * Step:            Завершить модуль                      A5ELGGF9.AK0000XY * 
 * Transform:       Завершить модуль                                        * 
 * Description:                                                             * 
 *==========================================================================*/ 

%let transformID = %quote(A5ELGGF9.AK0000XY);
%let trans_rc = 0;
%let etls_stepStartTime = %sysfunc(datetime(), datetime20.); 

%let _INPUT_count = 0; 
%let _OUTPUT_count = 0; 


/*****************************************************************
* ВЕРСИЯ:
*   $Id: transform_job_finish.sas 247 2012-04-03 07:31:10Z nesterenok $
*
******************************************************************
* НАЗНАЧЕНИЕ:
*   Регистрирует конец модуля ETL.
*
* ПАРАМЕТРЫ:
*   нет
*
******************************************************************/

%macro transform_job_finish;

   /* Продолжаем модуль */
   %job_continue_reg(mpJobType=JOB, mpJobName=&ETLS_JobName., mpPostEvent=N);

   /* Завершаем модуль */
   %job_finish_reg(mpJobType=JOB);

%mend transform_job_finish;

%transform_job_finish;


%rcSet(&syserr); 
%rcSet(&sysrc); 
%rcSet(&sqlrc); 



/**  Step end Завершить модуль **/

%let etls_endTime = %sysfunc(datetime(),datetime.);



/**  Job end 202_040_Mart_DQ_DRVT_REP04 **/

/* Reset jobid and name */
%let jobID = %quote(A5ELGGF9.AH00003N);
%let etls_jobName = %nrquote(202_002_Stream_DQ_DRVT);

/**************************************************************************** 
 * Job:             202_050_Mart_DQ_DRVT_REP05            A5ELGGF9.AH00002B * 
 * Description:     Наличие теущей справедливой стоимости по сделке за      * 
 *                   дату отчета.                                           * 
 *                                                                          * 
 * Metadata Server: bravo14                                                 * 
 * Port:            8561                                                    * 
 * Location:        /DWH_DMDQ_REP/Jobs/Includes/DQ_DRVT                     * 
 *                                                                          * 
 * Server:          SASApp                                A5C46MZY.AQ000002 * 
 *                                                                          * 
 * Source Tables:   FINANCIAL_ACCOUNT -                   A569C89V.AE0000FK * 
 *                   dwh_dds.FINANCIAL_ACCOUNT                              * 
 *                  FINANCIAL_INSTRUMENT_ASSOC -          A569C89V.AE0000FW * 
 *                   dwh_dds.FINANCIAL_INSTRUMENT_ASSOC                     * 
 *                  FINANCIAL_INSTRUMENT -                A569C89V.AE0000FV * 
 *                   dwh_dds.FINANCIAL_INSTRUMENT                           * 
 *                  FINANCIAL_ACCOUNT -                   A569C89V.AE0000FK * 
 *                   dwh_dds.FINANCIAL_ACCOUNT                              * 
 *                  FINANCIAL_INSTRUMENT_ASSOC -          A569C89V.AE0000FW * 
 *                   dwh_dds.FINANCIAL_INSTRUMENT_ASSOC                     * 
 *                  FINANCIAL_INSTRUMENT -                A569C89V.AE0000FV * 
 *                   dwh_dds.FINANCIAL_INSTRUMENT                           * 
 *                  FINANCIAL_ACCOUNT_CHNG -              A569C89V.AE0000FM * 
 *                   dwh_dds.FINANCIAL_ACCOUNT_CHNG                         * 
 *                  FINANCIAL_ACCOUNT_CHNG -              A569C89V.AE0000FM * 
 *                   dwh_dds.FINANCIAL_ACCOUNT_CHNG                         * 
 *                  FINANCIAL_CAL_DATE -                  A569C89V.AE0000FS * 
 *                   dwh_dds.FINANCIAL_CAL_DATE                             * 
 *                  FINANCIAL_CALENDAR -                  A569C89V.AE0000FT * 
 *                   dwh_dds.FINANCIAL_CALENDAR                             * 
 *                  FINANCIAL_INSTRUMENT_TYPE -           A569C89V.AE0000FZ * 
 *                   dwh_dds.FINANCIAL_INSTRUMENT_TYPE                      * 
 *                  ETL_JOB - etl_sys.ETL_JOB             A59S11RW.AE00001A * 
 * Target Tables:   DQ_DRVT_DWH_DM - dm_dq.DQ_DRVT_DWH_DM A5ELGGF9.AE000049 * 
 *                  DQ_DRVT_INSTRUMENTTYPE -              A5ELGGF9.AE00004A * 
 *                   dm_dq.DQ_DRVT_INSTRUMENTTYPE                           * 
 *                  DQ_DRVT_REPORT_PRC -                  A5ELGGF9.AE00004E * 
 *                   dm_dq.DQ_DRVT_REPORT_PRC                               * 
 *                  DQ_DRVT_DWH_DM - dm_dq.DQ_DRVT_DWH_DM A5ELGGF9.AE000049 * 
 *                  DQ_DRVT_REPORT_PRC -                  A5ELGGF9.AE00004E * 
 *                   dm_dq.DQ_DRVT_REPORT_PRC                               * 
 *                                                                          * 
 * Generated on:    16 Июль 2013 г. 17:46:18 MSD                            * 
 * Generated by:    sasdwh                                                  * 
 * Version:         SAS Data Integration Studio 4.5                         * 
 ****************************************************************************/ 

/* General macro variables  */ 
%let jobID = %quote(A5ELGGF9.AH00002B);
%let etls_jobName = %nrquote(202_050_Mart_DQ_DRVT_REP05);
%let etls_userID = %nrquote(sasdwh);


/* Create metadata macro variables */
%let IOMServer      = %nrquote(SASApp);
%let metaPort       = %nrquote(8561);
%let metaServer     = %nrquote(bravo14);

/* Set metadata options */
options metaport       = &metaPort 
        metaserver     = "&metaServer"; 

/* Setup for capturing job status  */ 
%let etls_startTime = %sysfunc(datetime(),datetime.);
%let etls_recordsBefore = 0;
%let etls_recordsAfter = 0;
%let etls_lib = 0;
%let etls_table = 0;

%global etls_debug; 
%macro etls_setDebug; 
   %if %str(&etls_debug) ne 0 %then 
      OPTIONS MPRINT%str(;); 
%mend; 
%etls_setDebug; 

/*---- Start of Pre-Process Code  ----*/ 

%LET REPDT=&DMDQ_REPORT_START_DTTM;
/*---- End of Pre-Process Code  ----*/ 

%rcSet(&syserr); 
%rcSet(&sqlrc); 

/*==========================================================================* 
 * Step:            Начать модуль                         A5ELGGF9.AK0000XZ * 
 * Transform:       Начать модуль                                           * 
 * Description:                                                             * 
 *==========================================================================*/ 

%let transformID = %quote(A5ELGGF9.AK0000XZ);
%let trans_rc = 0;
%let etls_stepStartTime = %sysfunc(datetime(), datetime20.); 

%let _INPUT_count = 0; 
%let _OUTPUT_count = 0; 


/*****************************************************************
* ВЕРСИЯ:
*   $Id: transform_job_start.sas 1747 2012-08-01 11:26:13Z nesterenok $
*
******************************************************************
* НАЗНАЧЕНИЕ:
*   Регистрирует начало модуля ETL.
*
* ПАРАМЕТРЫ:
*   нет
*
******************************************************************/

%macro transform_job_start;

   /* Продолжаем поток (или создаем новый) */
   %local lmvStreamName;
   %if %sysfunc(sysexist(LSB_JOBNAME)) %then
      %let lmvStreamName = %scan(%sysfunc(sysget(LSB_JOBNAME)), 3, :);
   %else
      %let lmvStreamName = ;

   %job_continue_reg(mpJobType=STREAM, mpJobName=&lmvStreamName, mpPostEvent=N, mpForcedStart=Y);

   /* Для DI, начинаем поток заново, если старый был начат не сегодня */
   %if %length(&lmvStreamName) eq 0 and &STREAM_START_DT ne %sysfunc(today()) %then %do;
      %job_start_reg(mpJobType=STREAM, mpParentJobId=, mpJobName=&lmvStreamName.);
   %end;

   /* Начинаем модуль */
   %job_start_reg(mpJobType=JOB, mpParentJobId=&STREAM_ID, mpJobName=&ETLS_JobName.);

%mend transform_job_start;

%transform_job_start;


%rcSet(&syserr); 
%rcSet(&sysrc); 
%rcSet(&sqlrc); 



/**  Step end Начать модуль **/

/*==========================================================================* 
 * Step:            Очистить таблицу                      A5ELGGF9.AK0000Y0 * 
 * Transform:       Очистить таблицу                                        * 
 * Description:                                                             * 
 *                                                                          * 
 * Target Table:    DQ_DRVT_DWH_DM - dm_dq.DQ_DRVT_DWH_DM A5ELGGF9.AE000049 * 
 *==========================================================================*/ 

%let transformID = %quote(A5ELGGF9.AK0000Y0);
%let trans_rc = 0;
%let etls_stepStartTime = %sysfunc(datetime(), datetime20.); 

%let _INPUT_count = 0; 
%let _OUTPUT_count = 1; 
%let _OUTPUT = dm_dq.DQ_DRVT_DWH_DM;
%let _OUTPUT_connect =  DEFER=YES PATH=DWH.IMB.RU AUTHDOMAIN="OraAuth_DM_DQ" 
;
%let _OUTPUT_engine = ORACLE;
%let _OUTPUT_memtype = DATA;
%let _OUTPUT_options = %nrquote();
%let _OUTPUT_alter = %nrquote();
%let _OUTPUT_path = %nrquote(/DWH_DMDQ_REP/Marts/DQ_DRVT/DQ_DRVT_DWH_DM%(Table%));
%let _OUTPUT_type = 1;
%let _OUTPUT_label = %nrquote();
/* List of target columns to keep  */ 
%let _OUTPUT_keep = REPORTCODE REPORTDATE FRONTKDEALID FRONTFDEALID DEALID 
        INSTRUMENTTYPECD DEALDATE ADDITIONALINFORMATION STARTDATE NEXTDATE 
        ENDDATE LEGNUMBER VALUEFRS VALUESEC;

%let tpOut = dm_dq.DQ_DRVT_DWH_DM;
%let tpOut_connect =  DEFER=YES PATH=DWH.IMB.RU AUTHDOMAIN="OraAuth_DM_DQ" 
;
%let tpOut_engine = ORACLE;
%let tpOut_memtype = DATA;
%let tpOut_options = %nrquote();
%let tpOut_alter = %nrquote();
%let tpOut_path = %nrquote(/DWH_DMDQ_REP/Marts/DQ_DRVT/DQ_DRVT_DWH_DM%(Table%));
%let tpOut_type = 1;
%let tpOut_label = %nrquote();
/* List of target columns to keep  */ 
%let tpOut_keep = REPORTCODE REPORTDATE FRONTKDEALID FRONTFDEALID DEALID 
        INSTRUMENTTYPECD DEALDATE ADDITIONALINFORMATION STARTDATE NEXTDATE 
        ENDDATE LEGNUMBER VALUEFRS VALUESEC;


%let tpWhere = %nrquote(REPORTCODE = %'П-05%' AND REPORTDATE = &DMDQ_REPORT_START_DTTM);

/* List of target columns to keep  */ 
%let _keep = REPORTCODE REPORTDATE FRONTKDEALID FRONTFDEALID DEALID 
        INSTRUMENTTYPECD DEALDATE ADDITIONALINFORMATION STARTDATE NEXTDATE 
        ENDDATE LEGNUMBER VALUEFRS VALUESEC;
/* List of target columns to keep  */ 
%let keep = REPORTCODE REPORTDATE FRONTKDEALID FRONTFDEALID DEALID 
        INSTRUMENTTYPECD DEALDATE ADDITIONALINFORMATION STARTDATE NEXTDATE 
        ENDDATE LEGNUMBER VALUEFRS VALUESEC;
/*****************************************************************
* ВЕРСИЯ:
*   $Id: transform_table_delete.sas 2142 2012-08-17 14:15:09Z nesterenok $
*
******************************************************************
* НАЗНАЧЕНИЕ:
*   Удаляет из указанной таблицы записи.
*
* ПАРАМЕТРЫ:
*   tpOut                  + имя целевой таблицы, которая будет очищена
*   tpWhere                - условие отбора записей под удаление
*                            по умолчанию отсутствует, т.е. удаляются все записи
*
******************************************************************/

%macro transform_table_delete;

   /* Удаляем записи */
   /* TODO: truncate */
   proc sql;
      delete from &tpOut
      %if %length(&tpWhere) gt 0 %then %do;
         where (%unquote(&tpWhere))
      %end;
      ;
   quit;
   %error_check (mpStepType=SQL);

%mend transform_table_delete;

%transform_table_delete;


%rcSet(&syserr); 
%rcSet(&sysrc); 
%rcSet(&sqlrc); 



/**  Step end Очистить таблицу **/

/*==========================================================================* 
 * Step:            Очистить таблицу                      A5ELGGF9.AK0000Y1 * 
 * Transform:       Очистить таблицу                                        * 
 * Description:                                                             * 
 *                                                                          * 
 * Target Table:    DQ_DRVT_REPORT_PRC -                  A5ELGGF9.AE00004E * 
 *                   dm_dq.DQ_DRVT_REPORT_PRC                               * 
 *==========================================================================*/ 

%let transformID = %quote(A5ELGGF9.AK0000Y1);
%let trans_rc = 0;
%let etls_stepStartTime = %sysfunc(datetime(), datetime20.); 

%let _INPUT_count = 0; 
%let _OUTPUT_count = 1; 
%let _OUTPUT = dm_dq.DQ_DRVT_REPORT_PRC;
%let _OUTPUT_connect =  DEFER=YES PATH=DWH.IMB.RU AUTHDOMAIN="OraAuth_DM_DQ" 
;
%let _OUTPUT_engine = ORACLE;
%let _OUTPUT_memtype = DATA;
%let _OUTPUT_options = %nrquote();
%let _OUTPUT_alter = %nrquote();
%let _OUTPUT_path = %nrquote(/DWH_DMDQ_REP/Marts/DQ_DRVT/DQ_DRVT_REPORT_PRC%(Table%));
%let _OUTPUT_type = 1;
%let _OUTPUT_label = %nrquote();
/* List of target columns to keep  */ 
%let _OUTPUT_keep = REP_DT REP_ID PRC CNT_ALL CNT_ERR DWH_DT;

%let tpOut = dm_dq.DQ_DRVT_REPORT_PRC;
%let tpOut_connect =  DEFER=YES PATH=DWH.IMB.RU AUTHDOMAIN="OraAuth_DM_DQ" 
;
%let tpOut_engine = ORACLE;
%let tpOut_memtype = DATA;
%let tpOut_options = %nrquote();
%let tpOut_alter = %nrquote();
%let tpOut_path = %nrquote(/DWH_DMDQ_REP/Marts/DQ_DRVT/DQ_DRVT_REPORT_PRC%(Table%));
%let tpOut_type = 1;
%let tpOut_label = %nrquote();
/* List of target columns to keep  */ 
%let tpOut_keep = REP_DT REP_ID PRC CNT_ALL CNT_ERR DWH_DT;


%let tpWhere = %nrquote(REP_ID = 5 AND REP_DT = &DMDQ_REPORT_START_DTTM);

/* List of target columns to keep  */ 
%let _keep = REP_DT REP_ID PRC CNT_ALL CNT_ERR DWH_DT;
/* List of target columns to keep  */ 
%let keep = REP_DT REP_ID PRC CNT_ALL CNT_ERR DWH_DT;
/*****************************************************************
* ВЕРСИЯ:
*   $Id: transform_table_delete.sas 2142 2012-08-17 14:15:09Z nesterenok $
*
******************************************************************
* НАЗНАЧЕНИЕ:
*   Удаляет из указанной таблицы записи.
*
* ПАРАМЕТРЫ:
*   tpOut                  + имя целевой таблицы, которая будет очищена
*   tpWhere                - условие отбора записей под удаление
*                            по умолчанию отсутствует, т.е. удаляются все записи
*
******************************************************************/

%macro transform_table_delete;

   /* Удаляем записи */
   /* TODO: truncate */
   proc sql;
      delete from &tpOut
      %if %length(&tpWhere) gt 0 %then %do;
         where (%unquote(&tpWhere))
      %end;
      ;
   quit;
   %error_check (mpStepType=SQL);

%mend transform_table_delete;

%transform_table_delete;


%rcSet(&syserr); 
%rcSet(&sysrc); 
%rcSet(&sqlrc); 



/**  Step end Очистить таблицу **/

/*==========================================================================* 
 * Step:            SQL Join                              A5ELGGF9.AK0000Y2 * 
 * Transform:       Join                                                    * 
 * Description:     Определение рабочего дня.                               * 
 *                                                                          * 
 * Source Tables:   FINANCIAL_CAL_DATE -                  A569C89V.AE0000FS * 
 *                   dwh_dds.FINANCIAL_CAL_DATE                             * 
 *                  FINANCIAL_CALENDAR -                  A569C89V.AE0000FT * 
 *                   dwh_dds.FINANCIAL_CALENDAR                             * 
 * Target Table:    SQL Join - work.W1LZH028H             A5ELGGF9.AF0000DA * 
 *==========================================================================*/ 

%let transformID = %quote(A5ELGGF9.AK0000Y2);
%let trans_rc = 0;
%let etls_stepStartTime = %sysfunc(datetime(), datetime20.); 

%let etls_recnt = 0;
%macro etls_recordCheck; 
   %let etls_recCheckExist = %eval(%sysfunc(exist(dwh_dds.FINANCIAL_CAL_DATE, DATA)) or 
         %sysfunc(exist(dwh_dds.FINANCIAL_CAL_DATE, VIEW))); 
   
   %if (&etls_recCheckExist) %then
   %do;
      proc sql noprint;
         select count(*) into :etls_recnt from dwh_dds.FINANCIAL_CAL_DATE;
      quit;
   %end;
%mend etls_recordCheck;
%etls_recordCheck;

%let SYS_SQL_IP_SPEEDO = Y;
%let SYS_SQL_MAPPUTTO = sas_put;
%let SYS_SQLREDUCEPUT = DBMS;
%global etls_sql_pushDown;
%let etls_sql_pushDown = -1;
option DBIDIRECTEXEC;

proc datasets lib = work nolist nowarn memtype = (data view);
   delete W1LZH028H;
quit;

proc sql;
   create view work.W1LZH028H as
   select
      FINANCIAL_CAL_DATE.CALENDAR_DT length = 8   
         format = DATETIME20.
         informat = DATETIME20.
         label = 'CALENDAR_DT',
      FINANCIAL_CAL_DATE.HOLIDAY_FLG length = 1   
         format = $1.
         informat = $1.
         label = 'HOLIDAY_FLG',
      FINANCIAL_CALENDAR.FINANCIAL_CALENDAR_RK length = 8   
         format = 11.
         informat = 11.
         label = 'FINANCIAL_CALENDAR_RK',
      FINANCIAL_CALENDAR.IRB_CURRENCY_CD length = 3   
         format = $3.
         informat = $3.
         label = 'IRB_CURRENCY_CD'
   from
      dwh_dds.FINANCIAL_CAL_DATE inner join 
      dwh_dds.FINANCIAL_CALENDAR
         on
         (
            FINANCIAL_CAL_DATE.FINANCIAL_CALENDAR_RK = FINANCIAL_CALENDAR.FINANCIAL_CALENDAR_RK
            and FINANCIAL_CALENDAR.VALID_TO_DTTM = &ETL_SCD_FUTURE_DTTM
         )
   where
      FINANCIAL_CALENDAR.IRB_CURRENCY_CD = 'RUR'
   ;
quit;

%global etls_sql_pushDown;
%let etls_sql_pushDown = &sys_sql_ip_all;

%rcSet(&sqlrc); 



/**  Step end SQL Join **/

/*==========================================================================* 
 * Step:            SQL Join                              A5ELGGF9.AK0000Y3 * 
 * Transform:       Join                                                    * 
 * Description:     FA.A_ST_CD=AUT                                          * 
 *                                                                          * 
 * Source Tables:   FINANCIAL_ACCOUNT -                   A569C89V.AE0000FK * 
 *                   dwh_dds.FINANCIAL_ACCOUNT                              * 
 *                  FINANCIAL_INSTRUMENT_ASSOC -          A569C89V.AE0000FW * 
 *                   dwh_dds.FINANCIAL_INSTRUMENT_ASSOC                     * 
 *                  FINANCIAL_INSTRUMENT -                A569C89V.AE0000FV * 
 *                   dwh_dds.FINANCIAL_INSTRUMENT                           * 
 * Target Table:    SQL Join - work.W1LKSFKRU             A5ELGGF9.AF0000DB * 
 *==========================================================================*/ 

%let transformID = %quote(A5ELGGF9.AK0000Y3);
%let trans_rc = 0;
%let etls_stepStartTime = %sysfunc(datetime(), datetime20.); 

%let etls_recnt = 0;
%macro etls_recordCheck; 
   %let etls_recCheckExist = %eval(%sysfunc(exist(dwh_dds.FINANCIAL_ACCOUNT, DATA)) or 
         %sysfunc(exist(dwh_dds.FINANCIAL_ACCOUNT, VIEW))); 
   
   %if (&etls_recCheckExist) %then
   %do;
      proc sql noprint;
         select count(*) into :etls_recnt from dwh_dds.FINANCIAL_ACCOUNT;
      quit;
   %end;
%mend etls_recordCheck;
%etls_recordCheck;

%let SYS_SQL_IP_SPEEDO = Y;
%let SYS_SQL_MAPPUTTO = sas_put;
%let SYS_SQLREDUCEPUT = DBMS;
%global etls_sql_pushDown;
%let etls_sql_pushDown = -1;
option DBIDIRECTEXEC;

proc datasets lib = work nolist nowarn memtype = (data view);
   delete W1LKSFKRU;
quit;

proc sql;
   create table work.W1LKSFKRU as
   select
      FINANCIAL_ACCOUNT.ACCOUNT_RK length = 8   
         format = 11.
         informat = 11.
         label = 'ACCOUNT_RK',
      'П-05' as REPORTCODE length = 5   
         format = $5.
         informat = $5.
         label = 'REPORTCODE',
      &REPDT as REPORTDATE length = 8   
         format = DATETIME20.
         informat = DATETIME20.
         label = 'REPORTDATE',
      strip(FINANCIAL_ACCOUNT.ACCOUNT_REGISTRATION_NM) as FRONTKDEALID length = 10   
         format = $10.
         informat = $10.
         label = 'ACCOUNT_REGISTRATION_NM',
      substr(FINANCIAL_ACCOUNT.ALTERNATE_ACCOUNT_NM, findc(FINANCIAL_ACCOUNT.ALTERNATE_ACCOUNT_NM, '_')+1) as FRONTFDEALID length = 10   
         format = $10.
         informat = $10.
         label = 'ALTERNATE_ACCOUNT_NM',
      FINANCIAL_INSTRUMENT.IRB_SRC_INSTRUMENT_ID as DEALID length = 100   
         format = $100.
         informat = $100.
         label = 'IRB_SRC_INSTRUMENT_ID',
      FINANCIAL_INSTRUMENT.FINANCIAL_INSTRUMENT_TYPE_CD as INSTRUMENTTYPECD length = 3   
         format = $3.
         informat = $3.
         label = 'FINANCIAL_INSTRUMENT_TYPE_CD',
      FINANCIAL_ACCOUNT.OPEN_DT as DEALDATE length = 8   
         format = DATETIME20.
         informat = DATETIME20.
         label = 'OPEN_DT'
   from
      dwh_dds.FINANCIAL_ACCOUNT left join 
      dwh_dds.FINANCIAL_INSTRUMENT_ASSOC
         on
         (
            FINANCIAL_ACCOUNT.ACCOUNT_RK = FINANCIAL_INSTRUMENT_ASSOC.REFERENCE_ACCOUNT_RK
            and FINANCIAL_ACCOUNT.VALID_FROM_DTTM <= &REPDT <  FINANCIAL_ACCOUNT.VALID_TO_DTTM
            and FINANCIAL_INSTRUMENT_ASSOC.VALID_FROM_DTTM <= &REPDT <  FINANCIAL_INSTRUMENT_ASSOC.VALID_TO_DTTM
         ) left join 
      dwh_dds.FINANCIAL_INSTRUMENT
         on
         (
            FINANCIAL_INSTRUMENT_ASSOC.FINANCIAL_INSTRUMENT_RK = FINANCIAL_INSTRUMENT.FINANCIAL_INSTRUMENT_RK
            and FINANCIAL_INSTRUMENT_ASSOC.VALID_FROM_DTTM <= &REPDT <  FINANCIAL_INSTRUMENT_ASSOC.VALID_TO_DTTM
            and FINANCIAL_INSTRUMENT.VALID_FROM_DTTM <= &REPDT <  FINANCIAL_INSTRUMENT.VALID_TO_DTTM
         )
   where
      FINANCIAL_ACCOUNT.FINANCIAL_ACCOUNT_TYPE_CD = 'DRV'
      and FINANCIAL_ACCOUNT.ACCOUNT_STATUS_CD = 'AUT'
      and FINANCIAL_INSTRUMENT.FINANCIAL_INSTRUMENT_TYPE_CD NOT IN ('SPT', 'FUT')
   order by
      FINANCIAL_ACCOUNT.ACCOUNT_RK
   ;
quit;

%global etls_sql_pushDown;
%let etls_sql_pushDown = &sys_sql_ip_all;

%rcSet(&sqlrc); 



/**  Step end SQL Join **/

/*==========================================================================* 
 * Step:            User Written                          A5ELGGF9.AK0000Y4 * 
 * Transform:       User Written                                            * 
 * Description:     Формирование списка DEALID с разделителем ",".          * 
 *                                                                          * 
 * Source Table:    SQL Join - work.W1LKSFKRU             A5ELGGF9.AF0000DB * 
 * Target Table:    User Written - work.W1LNHJ882         A5ELGGF9.AF0000DC * 
 *                                                                          * 
 * User Written:    SourceCode                                              * 
 *==========================================================================*/ 

%let transformID = %quote(A5ELGGF9.AK0000Y4);
%let trans_rc = 0;
%let etls_stepStartTime = %sysfunc(datetime(), datetime20.); 

%let etls_recCheckExist = 0; 
%let etls_recnt = 0; 
%macro etls_recordCheck; 
   %let etls_recCheckExist = %eval(%sysfunc(exist(work.W1LKSFKRU, DATA)) or 
         %sysfunc(exist(work.W1LKSFKRU, VIEW))); 
   
   %if (&etls_recCheckExist) %then
   %do;
      %local etls_syntaxcheck; 
      %let etls_syntaxcheck = %sysfunc(getoption(syntaxcheck)); 
      /* Turn off syntaxcheck option to perform following steps  */ 
      options nosyntaxcheck;
      
      proc contents data = work.W1LKSFKRU out = work.etls_contents(keep = nobs) noprint; 
      run; 
      
      data _null_; 
         set work.etls_contents (obs = 1); 
         call symput("etls_recnt", left(put(nobs,32.))); 
      run;
      
      proc datasets lib = work nolist nowarn memtype = (data view);
         delete etls_contents;
      quit;
      
      /* Reset syntaxcheck option to previous setting  */ 
      options &etls_syntaxcheck; 
   %end;
%mend etls_recordCheck;
%etls_recordCheck;

%let SYSLAST = %nrquote(work.W1LKSFKRU); 

%let _INPUT_count = 1;
%let _INPUT = work.W1LKSFKRU;
%let _INPUT_connect = ;
%let _INPUT_engine = ;
%let _INPUT_memtype = DATA;
%let _INPUT_options = %nrquote();
%let _INPUT_alter = %nrquote();
%let _INPUT_path = %nrquote(/SQL Join_A5ELGGF9.AF0000DB%(WorkTable%));
%let _INPUT_type = 1;
%let _INPUT_label = %nrquote();

%let _INPUT1 = work.W1LKSFKRU;
%let _INPUT1_connect = ;
%let _INPUT1_engine = ;
%let _INPUT1_memtype = DATA;
%let _INPUT1_options = %nrquote();
%let _INPUT1_alter = %nrquote();
%let _INPUT1_path = %nrquote(/SQL Join_A5ELGGF9.AF0000DB%(WorkTable%));
%let _INPUT1_type = 1;
%let _INPUT1_label = %nrquote();

%let _OUTPUT_count = 1;
%let _OUTPUT = work.W1LNHJ882;
%let _OUTPUT_connect = ;
%let _OUTPUT_engine = ;
%let _OUTPUT_memtype = DATA;
%let _OUTPUT_options = %nrquote();
%let _OUTPUT_alter = %nrquote();
%let _OUTPUT_path = %nrquote(/User Written_A5ELGGF9.AF0000DC%(WorkTable%));
%let _OUTPUT_type = 1;
%let _OUTPUT_label = %nrquote();
/* List of target columns to keep  */ 
%let _OUTPUT_keep = ACCOUNT_RK REPORTCODE REPORTDATE FRONTKDEALID FRONTFDEALID DEALID 
        INSTRUMENTTYPECD DEALDATE;
%let _OUTPUT_col_count = 8;
%let _OUTPUT_col0_name = ACCOUNT_RK;
%let _OUTPUT_col0_table = work.W1LNHJ882;
%let _OUTPUT_col0_length = 8;
%let _OUTPUT_col0_type = ;
%let _OUTPUT_col0_format = 11.;
%let _OUTPUT_col0_informat = 11.;
%let _OUTPUT_col0_label = %nrquote(ACCOUNT_RK);
%let _OUTPUT_col0_input0 = ACCOUNT_RK;
%let _OUTPUT_col0_exp = ;
%let _OUTPUT_col0_input = ACCOUNT_RK;
%let _OUTPUT_col0_input_count = 1;
%let _OUTPUT_col1_name = REPORTCODE;
%let _OUTPUT_col1_table = work.W1LNHJ882;
%let _OUTPUT_col1_length = 5;
%let _OUTPUT_col1_type = $;
%let _OUTPUT_col1_format = $5.;
%let _OUTPUT_col1_informat = $5.;
%let _OUTPUT_col1_label = %nrquote(REPORTCODE);
%let _OUTPUT_col1_input0 = REPORTCODE;
%let _OUTPUT_col1_exp = ;
%let _OUTPUT_col1_input = REPORTCODE;
%let _OUTPUT_col1_input_count = 1;
%let _OUTPUT_col2_name = REPORTDATE;
%let _OUTPUT_col2_table = work.W1LNHJ882;
%let _OUTPUT_col2_length = 8;
%let _OUTPUT_col2_type = ;
%let _OUTPUT_col2_format = DATETIME20.;
%let _OUTPUT_col2_informat = DATETIME20.;
%let _OUTPUT_col2_label = %nrquote(REPORTDATE);
%let _OUTPUT_col2_input0 = REPORTDATE;
%let _OUTPUT_col2_exp = ;
%let _OUTPUT_col2_input = REPORTDATE;
%let _OUTPUT_col2_input_count = 1;
%let _OUTPUT_col3_name = FRONTKDEALID;
%let _OUTPUT_col3_table = work.W1LNHJ882;
%let _OUTPUT_col3_length = 10;
%let _OUTPUT_col3_type = $;
%let _OUTPUT_col3_format = $10.;
%let _OUTPUT_col3_informat = $10.;
%let _OUTPUT_col3_label = %nrquote(ACCOUNT_REGISTRATION_NM);
%let _OUTPUT_col3_input0 = FRONTKDEALID;
%let _OUTPUT_col3_exp = ;
%let _OUTPUT_col3_input = FRONTKDEALID;
%let _OUTPUT_col3_input_count = 1;
%let _OUTPUT_col4_name = FRONTFDEALID;
%let _OUTPUT_col4_table = work.W1LNHJ882;
%let _OUTPUT_col4_length = 10;
%let _OUTPUT_col4_type = $;
%let _OUTPUT_col4_format = $10.;
%let _OUTPUT_col4_informat = $10.;
%let _OUTPUT_col4_label = %nrquote(ALTERNATE_ACCOUNT_NM);
%let _OUTPUT_col4_input0 = FRONTFDEALID;
%let _OUTPUT_col4_exp = ;
%let _OUTPUT_col4_input = FRONTFDEALID;
%let _OUTPUT_col4_input_count = 1;
%let _OUTPUT_col5_name = DEALID;
%let _OUTPUT_col5_table = work.W1LNHJ882;
%let _OUTPUT_col5_length = 100;
%let _OUTPUT_col5_type = $;
%let _OUTPUT_col5_format = $100.;
%let _OUTPUT_col5_informat = $100.;
%let _OUTPUT_col5_label = %nrquote(IRB_SRC_INSTRUMENT_ID);
%let _OUTPUT_col5_input0 = DEALID;
%let _OUTPUT_col5_exp = ;
%let _OUTPUT_col5_input = DEALID;
%let _OUTPUT_col5_input_count = 1;
%let _OUTPUT_col6_name = INSTRUMENTTYPECD;
%let _OUTPUT_col6_table = work.W1LNHJ882;
%let _OUTPUT_col6_length = 3;
%let _OUTPUT_col6_type = $;
%let _OUTPUT_col6_format = $3.;
%let _OUTPUT_col6_informat = $3.;
%let _OUTPUT_col6_label = %nrquote(FINANCIAL_INSTRUMENT_TYPE_CD);
%let _OUTPUT_col6_input0 = INSTRUMENTTYPECD;
%let _OUTPUT_col6_exp = ;
%let _OUTPUT_col6_input = INSTRUMENTTYPECD;
%let _OUTPUT_col6_input_count = 1;
%let _OUTPUT_col7_name = DEALDATE;
%let _OUTPUT_col7_table = work.W1LNHJ882;
%let _OUTPUT_col7_length = 8;
%let _OUTPUT_col7_type = ;
%let _OUTPUT_col7_format = DATETIME20.;
%let _OUTPUT_col7_informat = DATETIME20.;
%let _OUTPUT_col7_label = %nrquote(OPEN_DT);
%let _OUTPUT_col7_input0 = DEALDATE;
%let _OUTPUT_col7_exp = ;
%let _OUTPUT_col7_input = DEALDATE;
%let _OUTPUT_col7_input_count = 1;

%let _OUTPUT1 = work.W1LNHJ882;
%let _OUTPUT1_connect = ;
%let _OUTPUT1_engine = ;
%let _OUTPUT1_memtype = DATA;
%let _OUTPUT1_options = %nrquote();
%let _OUTPUT1_alter = %nrquote();
%let _OUTPUT1_path = %nrquote(/User Written_A5ELGGF9.AF0000DC%(WorkTable%));
%let _OUTPUT1_type = 1;
%let _OUTPUT1_label = %nrquote();
/* List of target columns to keep  */ 
%let _OUTPUT1_keep = ACCOUNT_RK REPORTCODE REPORTDATE FRONTKDEALID FRONTFDEALID DEALID 
        INSTRUMENTTYPECD DEALDATE;
%let _OUTPUT1_col_count = 8;
%let _OUTPUT1_col0_name = ACCOUNT_RK;
%let _OUTPUT1_col0_table = work.W1LNHJ882;
%let _OUTPUT1_col0_length = 8;
%let _OUTPUT1_col0_type = ;
%let _OUTPUT1_col0_format = 11.;
%let _OUTPUT1_col0_informat = 11.;
%let _OUTPUT1_col0_label = %nrquote(ACCOUNT_RK);
%let _OUTPUT1_col0_input0 = ACCOUNT_RK;
%let _OUTPUT1_col0_exp = ;
%let _OUTPUT1_col0_input = ACCOUNT_RK;
%let _OUTPUT1_col0_input_count = 1;
%let _OUTPUT1_col1_name = REPORTCODE;
%let _OUTPUT1_col1_table = work.W1LNHJ882;
%let _OUTPUT1_col1_length = 5;
%let _OUTPUT1_col1_type = $;
%let _OUTPUT1_col1_format = $5.;
%let _OUTPUT1_col1_informat = $5.;
%let _OUTPUT1_col1_label = %nrquote(REPORTCODE);
%let _OUTPUT1_col1_input0 = REPORTCODE;
%let _OUTPUT1_col1_exp = ;
%let _OUTPUT1_col1_input = REPORTCODE;
%let _OUTPUT1_col1_input_count = 1;
%let _OUTPUT1_col2_name = REPORTDATE;
%let _OUTPUT1_col2_table = work.W1LNHJ882;
%let _OUTPUT1_col2_length = 8;
%let _OUTPUT1_col2_type = ;
%let _OUTPUT1_col2_format = DATETIME20.;
%let _OUTPUT1_col2_informat = DATETIME20.;
%let _OUTPUT1_col2_label = %nrquote(REPORTDATE);
%let _OUTPUT1_col2_input0 = REPORTDATE;
%let _OUTPUT1_col2_exp = ;
%let _OUTPUT1_col2_input = REPORTDATE;
%let _OUTPUT1_col2_input_count = 1;
%let _OUTPUT1_col3_name = FRONTKDEALID;
%let _OUTPUT1_col3_table = work.W1LNHJ882;
%let _OUTPUT1_col3_length = 10;
%let _OUTPUT1_col3_type = $;
%let _OUTPUT1_col3_format = $10.;
%let _OUTPUT1_col3_informat = $10.;
%let _OUTPUT1_col3_label = %nrquote(ACCOUNT_REGISTRATION_NM);
%let _OUTPUT1_col3_input0 = FRONTKDEALID;
%let _OUTPUT1_col3_exp = ;
%let _OUTPUT1_col3_input = FRONTKDEALID;
%let _OUTPUT1_col3_input_count = 1;
%let _OUTPUT1_col4_name = FRONTFDEALID;
%let _OUTPUT1_col4_table = work.W1LNHJ882;
%let _OUTPUT1_col4_length = 10;
%let _OUTPUT1_col4_type = $;
%let _OUTPUT1_col4_format = $10.;
%let _OUTPUT1_col4_informat = $10.;
%let _OUTPUT1_col4_label = %nrquote(ALTERNATE_ACCOUNT_NM);
%let _OUTPUT1_col4_input0 = FRONTFDEALID;
%let _OUTPUT1_col4_exp = ;
%let _OUTPUT1_col4_input = FRONTFDEALID;
%let _OUTPUT1_col4_input_count = 1;
%let _OUTPUT1_col5_name = DEALID;
%let _OUTPUT1_col5_table = work.W1LNHJ882;
%let _OUTPUT1_col5_length = 100;
%let _OUTPUT1_col5_type = $;
%let _OUTPUT1_col5_format = $100.;
%let _OUTPUT1_col5_informat = $100.;
%let _OUTPUT1_col5_label = %nrquote(IRB_SRC_INSTRUMENT_ID);
%let _OUTPUT1_col5_input0 = DEALID;
%let _OUTPUT1_col5_exp = ;
%let _OUTPUT1_col5_input = DEALID;
%let _OUTPUT1_col5_input_count = 1;
%let _OUTPUT1_col6_name = INSTRUMENTTYPECD;
%let _OUTPUT1_col6_table = work.W1LNHJ882;
%let _OUTPUT1_col6_length = 3;
%let _OUTPUT1_col6_type = $;
%let _OUTPUT1_col6_format = $3.;
%let _OUTPUT1_col6_informat = $3.;
%let _OUTPUT1_col6_label = %nrquote(FINANCIAL_INSTRUMENT_TYPE_CD);
%let _OUTPUT1_col6_input0 = INSTRUMENTTYPECD;
%let _OUTPUT1_col6_exp = ;
%let _OUTPUT1_col6_input = INSTRUMENTTYPECD;
%let _OUTPUT1_col6_input_count = 1;
%let _OUTPUT1_col7_name = DEALDATE;
%let _OUTPUT1_col7_table = work.W1LNHJ882;
%let _OUTPUT1_col7_length = 8;
%let _OUTPUT1_col7_type = ;
%let _OUTPUT1_col7_format = DATETIME20.;
%let _OUTPUT1_col7_informat = DATETIME20.;
%let _OUTPUT1_col7_label = %nrquote(OPEN_DT);
%let _OUTPUT1_col7_input0 = DEALDATE;
%let _OUTPUT1_col7_exp = ;
%let _OUTPUT1_col7_input = DEALDATE;
%let _OUTPUT1_col7_input_count = 1;

/*---- Start of User Written Code  ----*/ 

/*====================================================================*/
/* Трансформация для записи неуникальных DEALID в строку с 				 */
/* разделителем ",".											        				 */
/*																							 */
/*																							 */
/* 2012-08-30 - Chepigin Alexander - Initial Coding						 */
/*====================================================================*/

data &_OUTPUT1 (drop = DEALID_NEW);
	set &_INPUT1 (where=(INSTRUMENTTYPECD ^= 'CSG'));
	by ACCOUNT_RK;

	retain DEALID_NEW;

/*	x = first.ACCOUNT_RK;*/
/*	y = last.ACCOUNT_RK;*/

if not missing(DEALID) then
do;
/*1 0*/
	if first.ACCOUNT_RK and not last.ACCOUNT_RK then DEALID_NEW = strip(DEALID);

/*0 0*/
	if not first.ACCOUNT_RK and not last.ACCOUNT_RK then DEALID_NEW = cats(DEALID_NEW, ',', DEALID);

/*1 1*/
	if first.ACCOUNT_RK and last.ACCOUNT_RK then
	do;
		DEALID_NEW = "";
		output;
	end;

/*0 1*/
	if not first.ACCOUNT_RK and last.ACCOUNT_RK then
	do;
		DEALID_NEW = cats(DEALID_NEW, ',', DEALID);
		DEALID=DEALID_NEW;
		DEALID_NEW = "";
		output;
	end;
end;
else output;
run;
%error_check(mpStepType=DATA);
/*---- End of User Written Code  ----*/ 

%rcSet(&syserr); 
%rcSet(&sqlrc); 


/**  Step end User Written **/

/*==========================================================================* 
 * Step:            SQL Join                              A5ELGGF9.AK0000Y5 * 
 * Transform:       Join                                                    * 
 * Description:     Проверка условий DQ                                     * 
 *                                                                          * 
 * Source Tables:   User Written - work.W1LNHJ882         A5ELGGF9.AF0000DC * 
 *                  FINANCIAL_ACCOUNT_CHNG -              A569C89V.AE0000FM * 
 *                   dwh_dds.FINANCIAL_ACCOUNT_CHNG                         * 
 *                  SQL Join - work.W1LZH028H             A5ELGGF9.AF0000DA * 
 * Target Table:    SQL Join - work.W1LY53U7E             A5ELGGF9.AF0000DD * 
 *==========================================================================*/ 

%let transformID = %quote(A5ELGGF9.AK0000Y5);
%let trans_rc = 0;
%let etls_stepStartTime = %sysfunc(datetime(), datetime20.); 

%let etls_recCheckExist = 0; 
%let etls_recnt = 0; 
%macro etls_recordCheck; 
   %let etls_recCheckExist = %eval(%sysfunc(exist(work.W1LNHJ882, DATA)) or 
         %sysfunc(exist(work.W1LNHJ882, VIEW))); 
   
   %if (&etls_recCheckExist) %then
   %do;
      %local etls_syntaxcheck; 
      %let etls_syntaxcheck = %sysfunc(getoption(syntaxcheck)); 
      /* Turn off syntaxcheck option to perform following steps  */ 
      options nosyntaxcheck;
      
      proc contents data = work.W1LNHJ882 out = work.etls_contents(keep = nobs) noprint; 
      run; 
      
      data _null_; 
         set work.etls_contents (obs = 1); 
         call symput("etls_recnt", left(put(nobs,32.))); 
      run;
      
      proc datasets lib = work nolist nowarn memtype = (data view);
         delete etls_contents;
      quit;
      
      /* Reset syntaxcheck option to previous setting  */ 
      options &etls_syntaxcheck; 
   %end;
%mend etls_recordCheck;
%etls_recordCheck;

%let SYS_SQL_IP_SPEEDO = Y;
%let SYS_SQL_MAPPUTTO = sas_put;
%let SYS_SQLREDUCEPUT = DBMS;
%global etls_sql_pushDown;
%let etls_sql_pushDown = -1;
option DBIDIRECTEXEC;

proc datasets lib = work nolist nowarn memtype = (data view);
   delete W1LY53U7E;
quit;

proc sql;
   create table work.W1LY53U7E as
   select
      W1LNHJ882.ACCOUNT_RK length = 8   
         format = 11.
         informat = 11.
         label = 'ACCOUNT_RK',
      W1LNHJ882.REPORTCODE length = 5   
         format = $5.
         informat = $5.
         label = 'REPORTCODE',
      W1LNHJ882.REPORTDATE length = 8   
         format = DATETIME20.
         informat = DATETIME20.
         label = 'REPORTDATE',
      W1LNHJ882.FRONTKDEALID length = 10   
         format = $10.
         informat = $10.
         label = 'FRONTKDEALID',
      W1LNHJ882.FRONTFDEALID length = 10   
         format = $10.
         informat = $10.
         label = 'FRONTFDEALID',
      W1LNHJ882.DEALID length = 100   
         format = $100.
         informat = $100.
         label = 'DEALID',
      W1LNHJ882.INSTRUMENTTYPECD length = 3   
         format = $3.
         informat = $3.
         label = 'INSTRUMENTTYPECD',
      W1LNHJ882.DEALDATE length = 8   
         format = DATETIME20.
         informat = DATETIME20.
         label = 'DEALDATE',
      count(FINANCIAL_ACCOUNT_CHNG.ACCOUNT_RK) as CNT length = 8
   from
      work.W1LNHJ882 left join 
      dwh_dds.FINANCIAL_ACCOUNT_CHNG
         on
         (
            W1LNHJ882.ACCOUNT_RK = FINANCIAL_ACCOUNT_CHNG.ACCOUNT_RK
            and FINANCIAL_ACCOUNT_CHNG.VALID_FROM_DTTM <= &REPDT < FINANCIAL_ACCOUNT_CHNG.VALID_TO_DTTM
         ) left join 
      work.W1LZH028H
         on
         (
            FINANCIAL_ACCOUNT_CHNG.STATEMENT_DT = W1LZH028H.CALENDAR_DT
            and W1LZH028H.HOLIDAY_FLG = 'N'
         )
   group by
      W1LNHJ882.ACCOUNT_RK
   having
      CNT <> 1
   ;
quit;

%global etls_sql_pushDown;
%let etls_sql_pushDown = &sys_sql_ip_all;

%rcSet(&sqlrc); 



/**  Step end SQL Join **/

/*==========================================================================* 
 * Step:            SQL Join                              A5ELGGF9.AK0000Y6 * 
 * Transform:       Join                                                    * 
 * Description:     FA.A_ST_CD<>AUT                                         * 
 *                                                                          * 
 * Source Tables:   FINANCIAL_ACCOUNT -                   A569C89V.AE0000FK * 
 *                   dwh_dds.FINANCIAL_ACCOUNT                              * 
 *                  FINANCIAL_INSTRUMENT_ASSOC -          A569C89V.AE0000FW * 
 *                   dwh_dds.FINANCIAL_INSTRUMENT_ASSOC                     * 
 *                  FINANCIAL_INSTRUMENT -                A569C89V.AE0000FV * 
 *                   dwh_dds.FINANCIAL_INSTRUMENT                           * 
 * Target Table:    SQL Join - work.W1LL977O3             A5ELGGF9.AF0000DE * 
 *==========================================================================*/ 

%let transformID = %quote(A5ELGGF9.AK0000Y6);
%let trans_rc = 0;
%let etls_stepStartTime = %sysfunc(datetime(), datetime20.); 

%let etls_recnt = 0;
%macro etls_recordCheck; 
   %let etls_recCheckExist = %eval(%sysfunc(exist(dwh_dds.FINANCIAL_ACCOUNT, DATA)) or 
         %sysfunc(exist(dwh_dds.FINANCIAL_ACCOUNT, VIEW))); 
   
   %if (&etls_recCheckExist) %then
   %do;
      proc sql noprint;
         select count(*) into :etls_recnt from dwh_dds.FINANCIAL_ACCOUNT;
      quit;
   %end;
%mend etls_recordCheck;
%etls_recordCheck;

%let SYS_SQL_IP_SPEEDO = Y;
%let SYS_SQL_MAPPUTTO = sas_put;
%let SYS_SQLREDUCEPUT = DBMS;
%global etls_sql_pushDown;
%let etls_sql_pushDown = -1;
option DBIDIRECTEXEC;

proc datasets lib = work nolist nowarn memtype = (data view);
   delete W1LL977O3;
quit;

proc sql;
   create table work.W1LL977O3 as
   select
      FINANCIAL_ACCOUNT.ACCOUNT_RK length = 8   
         format = 11.
         informat = 11.
         label = 'ACCOUNT_RK',
      'П-05' as REPORTCODE length = 5   
         format = $5.
         informat = $5.
         label = 'REPORTCODE',
      &REPDT as REPORTDATE length = 8   
         format = DATETIME20.
         informat = DATETIME20.
         label = 'REPORTDATE',
      strip(FINANCIAL_ACCOUNT.ACCOUNT_REGISTRATION_NM) as FRONTKDEALID length = 10   
         format = $10.
         informat = $10.
         label = 'ACCOUNT_REGISTRATION_NM',
      substr(FINANCIAL_ACCOUNT.ALTERNATE_ACCOUNT_NM, findc(FINANCIAL_ACCOUNT.ALTERNATE_ACCOUNT_NM, '_')+1) as FRONTFDEALID length = 10   
         format = $10.
         informat = $10.
         label = 'ALTERNATE_ACCOUNT_NM',
      FINANCIAL_INSTRUMENT.IRB_SRC_INSTRUMENT_ID as DEALID length = 100   
         format = $100.
         informat = $100.
         label = 'IRB_SRC_INSTRUMENT_ID',
      FINANCIAL_INSTRUMENT.FINANCIAL_INSTRUMENT_TYPE_CD as INSTRUMENTTYPECD length = 3   
         format = $3.
         informat = $3.
         label = 'FINANCIAL_INSTRUMENT_TYPE_CD',
      FINANCIAL_ACCOUNT.OPEN_DT as DEALDATE length = 8   
         format = DATETIME20.
         informat = DATETIME20.
         label = 'OPEN_DT'
   from
      dwh_dds.FINANCIAL_ACCOUNT left join 
      dwh_dds.FINANCIAL_INSTRUMENT_ASSOC
         on
         (
            FINANCIAL_ACCOUNT.ACCOUNT_RK = FINANCIAL_INSTRUMENT_ASSOC.REFERENCE_ACCOUNT_RK
            and FINANCIAL_ACCOUNT.VALID_FROM_DTTM <= &REPDT <  FINANCIAL_ACCOUNT.VALID_TO_DTTM
            and FINANCIAL_INSTRUMENT_ASSOC.VALID_FROM_DTTM <= &REPDT <  FINANCIAL_INSTRUMENT_ASSOC.VALID_TO_DTTM
         ) left join 
      dwh_dds.FINANCIAL_INSTRUMENT
         on
         (
            FINANCIAL_INSTRUMENT_ASSOC.FINANCIAL_INSTRUMENT_RK = FINANCIAL_INSTRUMENT.FINANCIAL_INSTRUMENT_RK
            and FINANCIAL_INSTRUMENT_ASSOC.VALID_FROM_DTTM <= &REPDT <  FINANCIAL_INSTRUMENT_ASSOC.VALID_TO_DTTM
            and FINANCIAL_INSTRUMENT.VALID_FROM_DTTM <= &REPDT <  FINANCIAL_INSTRUMENT.VALID_TO_DTTM
         )
   where
      FINANCIAL_ACCOUNT.FINANCIAL_ACCOUNT_TYPE_CD = 'DRV'
      and FINANCIAL_ACCOUNT.ACCOUNT_STATUS_CD <> 'AUT'
      and FINANCIAL_ACCOUNT.CLOSE_DT = &REPDT
      and FINANCIAL_INSTRUMENT.FINANCIAL_INSTRUMENT_TYPE_CD NOT IN ('SPT', 'FUT')
   order by
      ACCOUNT_RK
   ;
quit;

%global etls_sql_pushDown;
%let etls_sql_pushDown = &sys_sql_ip_all;

%rcSet(&sqlrc); 



/**  Step end SQL Join **/

/*==========================================================================* 
 * Step:            User Written                          A5ELGGF9.AK0000Y7 * 
 * Transform:       User Written                                            * 
 * Description:     Формирование списка DEALID с разделителем ",".          * 
 *                                                                          * 
 * Source Table:    SQL Join - work.W1LL977O3             A5ELGGF9.AF0000DE * 
 * Target Table:    User Written - work.W1LZEEJIE         A5ELGGF9.AF0000DF * 
 *                                                                          * 
 * User Written:    SourceCode                                              * 
 *==========================================================================*/ 

%let transformID = %quote(A5ELGGF9.AK0000Y7);
%let trans_rc = 0;
%let etls_stepStartTime = %sysfunc(datetime(), datetime20.); 

%let etls_recCheckExist = 0; 
%let etls_recnt = 0; 
%macro etls_recordCheck; 
   %let etls_recCheckExist = %eval(%sysfunc(exist(work.W1LL977O3, DATA)) or 
         %sysfunc(exist(work.W1LL977O3, VIEW))); 
   
   %if (&etls_recCheckExist) %then
   %do;
      %local etls_syntaxcheck; 
      %let etls_syntaxcheck = %sysfunc(getoption(syntaxcheck)); 
      /* Turn off syntaxcheck option to perform following steps  */ 
      options nosyntaxcheck;
      
      proc contents data = work.W1LL977O3 out = work.etls_contents(keep = nobs) noprint; 
      run; 
      
      data _null_; 
         set work.etls_contents (obs = 1); 
         call symput("etls_recnt", left(put(nobs,32.))); 
      run;
      
      proc datasets lib = work nolist nowarn memtype = (data view);
         delete etls_contents;
      quit;
      
      /* Reset syntaxcheck option to previous setting  */ 
      options &etls_syntaxcheck; 
   %end;
%mend etls_recordCheck;
%etls_recordCheck;

%let SYSLAST = %nrquote(work.W1LL977O3); 

%let _INPUT_count = 1;
%let _INPUT = work.W1LL977O3;
%let _INPUT_connect = ;
%let _INPUT_engine = ;
%let _INPUT_memtype = DATA;
%let _INPUT_options = %nrquote();
%let _INPUT_alter = %nrquote();
%let _INPUT_path = %nrquote(/SQL Join_A5ELGGF9.AF0000DE%(WorkTable%));
%let _INPUT_type = 1;
%let _INPUT_label = %nrquote();

%let _INPUT1 = work.W1LL977O3;
%let _INPUT1_connect = ;
%let _INPUT1_engine = ;
%let _INPUT1_memtype = DATA;
%let _INPUT1_options = %nrquote();
%let _INPUT1_alter = %nrquote();
%let _INPUT1_path = %nrquote(/SQL Join_A5ELGGF9.AF0000DE%(WorkTable%));
%let _INPUT1_type = 1;
%let _INPUT1_label = %nrquote();

%let _OUTPUT_count = 1;
%let _OUTPUT = work.W1LZEEJIE;
%let _OUTPUT_connect = ;
%let _OUTPUT_engine = ;
%let _OUTPUT_memtype = DATA;
%let _OUTPUT_options = %nrquote();
%let _OUTPUT_alter = %nrquote();
%let _OUTPUT_path = %nrquote(/User Written_A5ELGGF9.AF0000DF%(WorkTable%));
%let _OUTPUT_type = 1;
%let _OUTPUT_label = %nrquote();
/* List of target columns to keep  */ 
%let _OUTPUT_keep = ACCOUNT_RK REPORTCODE REPORTDATE FRONTKDEALID FRONTFDEALID DEALID 
        INSTRUMENTTYPECD DEALDATE;
%let _OUTPUT_col_count = 8;
%let _OUTPUT_col0_name = ACCOUNT_RK;
%let _OUTPUT_col0_table = work.W1LZEEJIE;
%let _OUTPUT_col0_length = 8;
%let _OUTPUT_col0_type = ;
%let _OUTPUT_col0_format = 11.;
%let _OUTPUT_col0_informat = 11.;
%let _OUTPUT_col0_label = %nrquote(ACCOUNT_RK);
%let _OUTPUT_col0_input0 = ACCOUNT_RK;
%let _OUTPUT_col0_exp = ;
%let _OUTPUT_col0_input = ACCOUNT_RK;
%let _OUTPUT_col0_input_count = 1;
%let _OUTPUT_col1_name = REPORTCODE;
%let _OUTPUT_col1_table = work.W1LZEEJIE;
%let _OUTPUT_col1_length = 5;
%let _OUTPUT_col1_type = $;
%let _OUTPUT_col1_format = $5.;
%let _OUTPUT_col1_informat = $5.;
%let _OUTPUT_col1_label = %nrquote(REPORTCODE);
%let _OUTPUT_col1_input0 = REPORTCODE;
%let _OUTPUT_col1_exp = ;
%let _OUTPUT_col1_input = REPORTCODE;
%let _OUTPUT_col1_input_count = 1;
%let _OUTPUT_col2_name = REPORTDATE;
%let _OUTPUT_col2_table = work.W1LZEEJIE;
%let _OUTPUT_col2_length = 8;
%let _OUTPUT_col2_type = ;
%let _OUTPUT_col2_format = DATETIME20.;
%let _OUTPUT_col2_informat = DATETIME20.;
%let _OUTPUT_col2_label = %nrquote(REPORTDATE);
%let _OUTPUT_col2_input0 = REPORTDATE;
%let _OUTPUT_col2_exp = ;
%let _OUTPUT_col2_input = REPORTDATE;
%let _OUTPUT_col2_input_count = 1;
%let _OUTPUT_col3_name = FRONTKDEALID;
%let _OUTPUT_col3_table = work.W1LZEEJIE;
%let _OUTPUT_col3_length = 10;
%let _OUTPUT_col3_type = $;
%let _OUTPUT_col3_format = $10.;
%let _OUTPUT_col3_informat = $10.;
%let _OUTPUT_col3_label = %nrquote(ACCOUNT_REGISTRATION_NM);
%let _OUTPUT_col3_input0 = FRONTKDEALID;
%let _OUTPUT_col3_exp = ;
%let _OUTPUT_col3_input = FRONTKDEALID;
%let _OUTPUT_col3_input_count = 1;
%let _OUTPUT_col4_name = FRONTFDEALID;
%let _OUTPUT_col4_table = work.W1LZEEJIE;
%let _OUTPUT_col4_length = 10;
%let _OUTPUT_col4_type = $;
%let _OUTPUT_col4_format = $10.;
%let _OUTPUT_col4_informat = $10.;
%let _OUTPUT_col4_label = %nrquote(ALTERNATE_ACCOUNT_NM);
%let _OUTPUT_col4_input0 = FRONTFDEALID;
%let _OUTPUT_col4_exp = ;
%let _OUTPUT_col4_input = FRONTFDEALID;
%let _OUTPUT_col4_input_count = 1;
%let _OUTPUT_col5_name = DEALID;
%let _OUTPUT_col5_table = work.W1LZEEJIE;
%let _OUTPUT_col5_length = 100;
%let _OUTPUT_col5_type = $;
%let _OUTPUT_col5_format = $100.;
%let _OUTPUT_col5_informat = $100.;
%let _OUTPUT_col5_label = %nrquote(IRB_SRC_INSTRUMENT_ID);
%let _OUTPUT_col5_input0 = DEALID;
%let _OUTPUT_col5_exp = ;
%let _OUTPUT_col5_input = DEALID;
%let _OUTPUT_col5_input_count = 1;
%let _OUTPUT_col6_name = INSTRUMENTTYPECD;
%let _OUTPUT_col6_table = work.W1LZEEJIE;
%let _OUTPUT_col6_length = 3;
%let _OUTPUT_col6_type = $;
%let _OUTPUT_col6_format = $3.;
%let _OUTPUT_col6_informat = $3.;
%let _OUTPUT_col6_label = %nrquote(FINANCIAL_INSTRUMENT_TYPE_CD);
%let _OUTPUT_col6_input0 = INSTRUMENTTYPECD;
%let _OUTPUT_col6_exp = ;
%let _OUTPUT_col6_input = INSTRUMENTTYPECD;
%let _OUTPUT_col6_input_count = 1;
%let _OUTPUT_col7_name = DEALDATE;
%let _OUTPUT_col7_table = work.W1LZEEJIE;
%let _OUTPUT_col7_length = 8;
%let _OUTPUT_col7_type = ;
%let _OUTPUT_col7_format = DATETIME20.;
%let _OUTPUT_col7_informat = DATETIME20.;
%let _OUTPUT_col7_label = %nrquote(OPEN_DT);
%let _OUTPUT_col7_input0 = DEALDATE;
%let _OUTPUT_col7_exp = ;
%let _OUTPUT_col7_input = DEALDATE;
%let _OUTPUT_col7_input_count = 1;

%let _OUTPUT1 = work.W1LZEEJIE;
%let _OUTPUT1_connect = ;
%let _OUTPUT1_engine = ;
%let _OUTPUT1_memtype = DATA;
%let _OUTPUT1_options = %nrquote();
%let _OUTPUT1_alter = %nrquote();
%let _OUTPUT1_path = %nrquote(/User Written_A5ELGGF9.AF0000DF%(WorkTable%));
%let _OUTPUT1_type = 1;
%let _OUTPUT1_label = %nrquote();
/* List of target columns to keep  */ 
%let _OUTPUT1_keep = ACCOUNT_RK REPORTCODE REPORTDATE FRONTKDEALID FRONTFDEALID DEALID 
        INSTRUMENTTYPECD DEALDATE;
%let _OUTPUT1_col_count = 8;
%let _OUTPUT1_col0_name = ACCOUNT_RK;
%let _OUTPUT1_col0_table = work.W1LZEEJIE;
%let _OUTPUT1_col0_length = 8;
%let _OUTPUT1_col0_type = ;
%let _OUTPUT1_col0_format = 11.;
%let _OUTPUT1_col0_informat = 11.;
%let _OUTPUT1_col0_label = %nrquote(ACCOUNT_RK);
%let _OUTPUT1_col0_input0 = ACCOUNT_RK;
%let _OUTPUT1_col0_exp = ;
%let _OUTPUT1_col0_input = ACCOUNT_RK;
%let _OUTPUT1_col0_input_count = 1;
%let _OUTPUT1_col1_name = REPORTCODE;
%let _OUTPUT1_col1_table = work.W1LZEEJIE;
%let _OUTPUT1_col1_length = 5;
%let _OUTPUT1_col1_type = $;
%let _OUTPUT1_col1_format = $5.;
%let _OUTPUT1_col1_informat = $5.;
%let _OUTPUT1_col1_label = %nrquote(REPORTCODE);
%let _OUTPUT1_col1_input0 = REPORTCODE;
%let _OUTPUT1_col1_exp = ;
%let _OUTPUT1_col1_input = REPORTCODE;
%let _OUTPUT1_col1_input_count = 1;
%let _OUTPUT1_col2_name = REPORTDATE;
%let _OUTPUT1_col2_table = work.W1LZEEJIE;
%let _OUTPUT1_col2_length = 8;
%let _OUTPUT1_col2_type = ;
%let _OUTPUT1_col2_format = DATETIME20.;
%let _OUTPUT1_col2_informat = DATETIME20.;
%let _OUTPUT1_col2_label = %nrquote(REPORTDATE);
%let _OUTPUT1_col2_input0 = REPORTDATE;
%let _OUTPUT1_col2_exp = ;
%let _OUTPUT1_col2_input = REPORTDATE;
%let _OUTPUT1_col2_input_count = 1;
%let _OUTPUT1_col3_name = FRONTKDEALID;
%let _OUTPUT1_col3_table = work.W1LZEEJIE;
%let _OUTPUT1_col3_length = 10;
%let _OUTPUT1_col3_type = $;
%let _OUTPUT1_col3_format = $10.;
%let _OUTPUT1_col3_informat = $10.;
%let _OUTPUT1_col3_label = %nrquote(ACCOUNT_REGISTRATION_NM);
%let _OUTPUT1_col3_input0 = FRONTKDEALID;
%let _OUTPUT1_col3_exp = ;
%let _OUTPUT1_col3_input = FRONTKDEALID;
%let _OUTPUT1_col3_input_count = 1;
%let _OUTPUT1_col4_name = FRONTFDEALID;
%let _OUTPUT1_col4_table = work.W1LZEEJIE;
%let _OUTPUT1_col4_length = 10;
%let _OUTPUT1_col4_type = $;
%let _OUTPUT1_col4_format = $10.;
%let _OUTPUT1_col4_informat = $10.;
%let _OUTPUT1_col4_label = %nrquote(ALTERNATE_ACCOUNT_NM);
%let _OUTPUT1_col4_input0 = FRONTFDEALID;
%let _OUTPUT1_col4_exp = ;
%let _OUTPUT1_col4_input = FRONTFDEALID;
%let _OUTPUT1_col4_input_count = 1;
%let _OUTPUT1_col5_name = DEALID;
%let _OUTPUT1_col5_table = work.W1LZEEJIE;
%let _OUTPUT1_col5_length = 100;
%let _OUTPUT1_col5_type = $;
%let _OUTPUT1_col5_format = $100.;
%let _OUTPUT1_col5_informat = $100.;
%let _OUTPUT1_col5_label = %nrquote(IRB_SRC_INSTRUMENT_ID);
%let _OUTPUT1_col5_input0 = DEALID;
%let _OUTPUT1_col5_exp = ;
%let _OUTPUT1_col5_input = DEALID;
%let _OUTPUT1_col5_input_count = 1;
%let _OUTPUT1_col6_name = INSTRUMENTTYPECD;
%let _OUTPUT1_col6_table = work.W1LZEEJIE;
%let _OUTPUT1_col6_length = 3;
%let _OUTPUT1_col6_type = $;
%let _OUTPUT1_col6_format = $3.;
%let _OUTPUT1_col6_informat = $3.;
%let _OUTPUT1_col6_label = %nrquote(FINANCIAL_INSTRUMENT_TYPE_CD);
%let _OUTPUT1_col6_input0 = INSTRUMENTTYPECD;
%let _OUTPUT1_col6_exp = ;
%let _OUTPUT1_col6_input = INSTRUMENTTYPECD;
%let _OUTPUT1_col6_input_count = 1;
%let _OUTPUT1_col7_name = DEALDATE;
%let _OUTPUT1_col7_table = work.W1LZEEJIE;
%let _OUTPUT1_col7_length = 8;
%let _OUTPUT1_col7_type = ;
%let _OUTPUT1_col7_format = DATETIME20.;
%let _OUTPUT1_col7_informat = DATETIME20.;
%let _OUTPUT1_col7_label = %nrquote(OPEN_DT);
%let _OUTPUT1_col7_input0 = DEALDATE;
%let _OUTPUT1_col7_exp = ;
%let _OUTPUT1_col7_input = DEALDATE;
%let _OUTPUT1_col7_input_count = 1;

/*---- Start of User Written Code  ----*/ 

/*====================================================================*/
/* Трансформация для записи неуникальных DEALID в строку с 				 */
/* разделителем ",".											        				 */
/*																							 */
/*																							 */
/* 2012-08-30 - Chepigin Alexander - Initial Coding						 */
/*====================================================================*/

data &_OUTPUT1 (drop = DEALID_NEW);
	set &_INPUT1 (where=(INSTRUMENTTYPECD ^= 'CSG'));
	by ACCOUNT_RK;

	retain DEALID_NEW;

/*	x = first.ACCOUNT_RK;*/
/*	y = last.ACCOUNT_RK;*/

if not missing(DEALID) then
do;
/*1 0*/
	if first.ACCOUNT_RK and not last.ACCOUNT_RK then DEALID_NEW = strip(DEALID);

/*0 0*/
	if not first.ACCOUNT_RK and not last.ACCOUNT_RK then DEALID_NEW = cats(DEALID_NEW, ',', DEALID);

/*1 1*/
	if first.ACCOUNT_RK and last.ACCOUNT_RK then
	do;
		DEALID_NEW = "";
		output;
	end;

/*0 1*/
	if not first.ACCOUNT_RK and last.ACCOUNT_RK then
	do;
		DEALID_NEW = cats(DEALID_NEW, ',', DEALID);
		DEALID=DEALID_NEW;
		DEALID_NEW = "";
		output;
	end;
end;
else output;
run;
%error_check(mpStepType=DATA);
/*---- End of User Written Code  ----*/ 

%rcSet(&syserr); 
%rcSet(&sqlrc); 


/**  Step end User Written **/

/*==========================================================================* 
 * Step:            SQL Join                              A5ELGGF9.AK0000Y8 * 
 * Transform:       Join                                                    * 
 * Description:     Проверка условий DQ                                     * 
 *                                                                          * 
 * Source Tables:   User Written - work.W1LZEEJIE         A5ELGGF9.AF0000DF * 
 *                  FINANCIAL_ACCOUNT_CHNG -              A569C89V.AE0000FM * 
 *                   dwh_dds.FINANCIAL_ACCOUNT_CHNG                         * 
 *                  SQL Join - work.W1LZH028H             A5ELGGF9.AF0000DA * 
 * Target Table:    SQL Join - work.W1LZER30P             A5ELGGF9.AF0000DG * 
 *==========================================================================*/ 

%let transformID = %quote(A5ELGGF9.AK0000Y8);
%let trans_rc = 0;
%let etls_stepStartTime = %sysfunc(datetime(), datetime20.); 

%let etls_recCheckExist = 0; 
%let etls_recnt = 0; 
%macro etls_recordCheck; 
   %let etls_recCheckExist = %eval(%sysfunc(exist(work.W1LZEEJIE, DATA)) or 
         %sysfunc(exist(work.W1LZEEJIE, VIEW))); 
   
   %if (&etls_recCheckExist) %then
   %do;
      %local etls_syntaxcheck; 
      %let etls_syntaxcheck = %sysfunc(getoption(syntaxcheck)); 
      /* Turn off syntaxcheck option to perform following steps  */ 
      options nosyntaxcheck;
      
      proc contents data = work.W1LZEEJIE out = work.etls_contents(keep = nobs) noprint; 
      run; 
      
      data _null_; 
         set work.etls_contents (obs = 1); 
         call symput("etls_recnt", left(put(nobs,32.))); 
      run;
      
      proc datasets lib = work nolist nowarn memtype = (data view);
         delete etls_contents;
      quit;
      
      /* Reset syntaxcheck option to previous setting  */ 
      options &etls_syntaxcheck; 
   %end;
%mend etls_recordCheck;
%etls_recordCheck;

%let SYS_SQL_IP_SPEEDO = Y;
%let SYS_SQL_MAPPUTTO = sas_put;
%let SYS_SQLREDUCEPUT = DBMS;
%global etls_sql_pushDown;
%let etls_sql_pushDown = -1;
option DBIDIRECTEXEC;

proc datasets lib = work nolist nowarn memtype = (data view);
   delete W1LZER30P;
quit;

proc sql;
   create table work.W1LZER30P as
   select
      W1LZEEJIE.ACCOUNT_RK length = 8   
         format = 11.
         informat = 11.
         label = 'ACCOUNT_RK',
      W1LZEEJIE.REPORTCODE length = 5   
         format = $5.
         informat = $5.
         label = 'REPORTCODE',
      W1LZEEJIE.REPORTDATE length = 8   
         format = DATETIME20.
         informat = DATETIME20.
         label = 'REPORTDATE',
      W1LZEEJIE.FRONTKDEALID length = 10   
         format = $10.
         informat = $10.
         label = 'ACCOUNT_REGISTRATION_NM',
      W1LZEEJIE.FRONTFDEALID length = 10   
         format = $10.
         informat = $10.
         label = 'ALTERNATE_ACCOUNT_NM',
      W1LZEEJIE.DEALID length = 100   
         format = $100.
         informat = $100.
         label = 'IRB_SRC_INSTRUMENT_ID',
      W1LZEEJIE.INSTRUMENTTYPECD length = 3   
         format = $3.
         informat = $3.
         label = 'FINANCIAL_INSTRUMENT_TYPE_CD',
      W1LZEEJIE.DEALDATE length = 8   
         format = DATETIME20.
         informat = DATETIME20.
         label = 'OPEN_DT',
      count(FINANCIAL_ACCOUNT_CHNG.ACCOUNT_RK) as CNT length = 8
   from
      work.W1LZEEJIE left join 
      dwh_dds.FINANCIAL_ACCOUNT_CHNG
         on
         (
            W1LZEEJIE.ACCOUNT_RK = FINANCIAL_ACCOUNT_CHNG.ACCOUNT_RK
            and FINANCIAL_ACCOUNT_CHNG.VALID_FROM_DTTM <= &REPDT < FINANCIAL_ACCOUNT_CHNG.VALID_TO_DTTM
         ) left join 
      work.W1LZH028H
         on
         (
            FINANCIAL_ACCOUNT_CHNG.STATEMENT_DT = W1LZH028H.CALENDAR_DT
            and W1LZH028H.HOLIDAY_FLG = 'N'
         )
   group by
      W1LZEEJIE.ACCOUNT_RK
   having
      CNT <> 1
   ;
quit;

%global etls_sql_pushDown;
%let etls_sql_pushDown = &sys_sql_ip_all;

%rcSet(&sqlrc); 



/**  Step end SQL Join **/

/*==========================================================================* 
 * Step:            Append                                A5ELGGF9.AK0000Y9 * 
 * Transform:       Append                                                  * 
 * Description:                                                             * 
 *                                                                          * 
 * Source Tables:   SQL Join - work.W1LY53U7E             A5ELGGF9.AF0000DD * 
 *                  SQL Join - work.W1LZER30P             A5ELGGF9.AF0000DG * 
 * Target Table:    Append - work.W1LZQEAMK               A5ELGGF9.AF0000DH * 
 *==========================================================================*/ 

%let transformID = %quote(A5ELGGF9.AK0000Y9);
%let trans_rc = 0;
%let etls_stepStartTime = %sysfunc(datetime(), datetime20.); 

%let etls_recCheckExist = 0; 
%let etls_recnt = 0; 
%macro etls_recordCheck; 
   %let etls_recCheckExist = %eval(%sysfunc(exist(work.W1LY53U7E, DATA)) or 
         %sysfunc(exist(work.W1LY53U7E, VIEW))); 
   
   %if (&etls_recCheckExist) %then
   %do;
      %local etls_syntaxcheck; 
      %let etls_syntaxcheck = %sysfunc(getoption(syntaxcheck)); 
      /* Turn off syntaxcheck option to perform following steps  */ 
      options nosyntaxcheck;
      
      proc contents data = work.W1LY53U7E out = work.etls_contents(keep = nobs) noprint; 
      run; 
      
      data _null_; 
         set work.etls_contents (obs = 1); 
         call symput("etls_recnt", left(put(nobs,32.))); 
      run;
      
      proc datasets lib = work nolist nowarn memtype = (data view);
         delete etls_contents;
      quit;
      
      /* Reset syntaxcheck option to previous setting  */ 
      options &etls_syntaxcheck; 
   %end;
%mend etls_recordCheck;
%etls_recordCheck;

%let dbxrc = %eval(%sysfunc(exist(work.W1LY53U7E, DATA)) or 
      %sysfunc(exist(work.W1LY53U7E, VIEW))); 

%let dbxrc = %eval(%sysfunc(exist(work.W1LZER30P, DATA)) or 
      %sysfunc(exist(work.W1LZER30P, VIEW))); 

/*---- Map the columns  ----*/ 
proc datasets lib = work nolist nowarn memtype = (data view);
   delete WJ2Y6KN;
quit;

%put %str(NOTE: Mapping columns ...);
proc sql;
   create view work.WJ2Y6KN as
      select
         ACCOUNT_RK,
         REPORTCODE,
         REPORTDATE,
         FRONTKDEALID   
            label = 'FRONTKDEALID',
         FRONTFDEALID   
            label = 'FRONTFDEALID',
         DEALID   
            label = 'DEALID',
         INSTRUMENTTYPECD   
            label = 'INSTRUMENTTYPECD',
         DEALDATE   
            label = 'DEALDATE',
         CNT
   from work.W1LZER30P
   ;
quit;

%let SYSLAST = work.WJ2Y6KN;

proc datasets lib = work nolist nowarn memtype = (data view);
   delete W1LZQEAMK;
quit;

data work.W1LZQEAMK / view=work.W1LZQEAMK;
   set work.W1LY53U7E
       work.WJ2Y6KN;
   keep ACCOUNT_RK REPORTCODE REPORTDATE FRONTKDEALID FRONTFDEALID DEALID 
    INSTRUMENTTYPECD DEALDATE CNT; 
run;

%rcSet(&syserr); 



/**  Step end Append **/

/*==========================================================================* 
 * Step:            SQL Join                              A5ELGGF9.AK0000YA * 
 * Transform:       Join                                                    * 
 * Description:                                                             * 
 *                                                                          * 
 * Source Tables:   Append - work.W1LZQEAMK               A5ELGGF9.AF0000DH * 
 *                  FINANCIAL_INSTRUMENT_TYPE -           A569C89V.AE0000FZ * 
 *                   dwh_dds.FINANCIAL_INSTRUMENT_TYPE                      * 
 * Target Table:    SQL Join - work.W1LZS3VWH             A5ELGGF9.AF0000DI * 
 *==========================================================================*/ 

%let transformID = %quote(A5ELGGF9.AK0000YA);
%let trans_rc = 0;
%let etls_stepStartTime = %sysfunc(datetime(), datetime20.); 

%let etls_recnt = -1;
%let SYS_SQL_IP_SPEEDO = Y;
%let SYS_SQL_MAPPUTTO = sas_put;
%let SYS_SQLREDUCEPUT = DBMS;
%global etls_sql_pushDown;
%let etls_sql_pushDown = -1;
option DBIDIRECTEXEC;

proc datasets lib = work nolist nowarn memtype = (data view);
   delete W1LZS3VWH;
quit;

proc sql;
   create table work.W1LZS3VWH as
   select distinct
      W1LZQEAMK.INSTRUMENTTYPECD length = 3   
         format = $3.
         informat = $3.
         label = 'INSTRUMENTTYPECD',
      FINANCIAL_INSTRUMENT_TYPE.FINANCIAL_INSTRUMENT_TYPE_DESC as INSTRUMENTTYPE length = 100   
         format = $100.
         informat = $100.
         label = 'FINANCIAL_INSTRUMENT_TYPE_DESC'
   from
      work.W1LZQEAMK left join 
      dwh_dds.FINANCIAL_INSTRUMENT_TYPE
         on
         (
            W1LZQEAMK.INSTRUMENTTYPECD = FINANCIAL_INSTRUMENT_TYPE.FINANCIAL_INSTRUMENT_TYPE_CD
            and FINANCIAL_INSTRUMENT_TYPE.VALID_TO_DTTM = &ETL_SCD_FUTURE_DTTM
         )
   where
      W1LZQEAMK.INSTRUMENTTYPECD NOT IS MISSING 
   ;
quit;

%global etls_sql_pushDown;
%let etls_sql_pushDown = &sys_sql_ip_all;

%rcSet(&sqlrc); 



/**  Step end SQL Join **/

/*==========================================================================* 
 * Step:            Table Loader                          A5ELGGF9.AK0000YB * 
 * Transform:       Table Loader (Version 2.1)                              * 
 * Description:                                                             * 
 *                                                                          * 
 * Source Table:    SQL Join - work.W1LZS3VWH             A5ELGGF9.AF0000DI * 
 * Target Table:    DQ_DRVT_INSTRUMENTTYPE -              A5ELGGF9.AE00004A * 
 *                   dm_dq.DQ_DRVT_INSTRUMENTTYPE                           * 
 *==========================================================================*/ 

%let transformID = %quote(A5ELGGF9.AK0000YB);
%let trans_rc = 0;
%let etls_stepStartTime = %sysfunc(datetime(), datetime20.); 

%let SYSLAST = %nrquote(work.W1LZS3VWH); 

%let SYS_SQL_IP_SPEEDO = Y;
%let SYS_SQL_MAPPUTTO = sas_put;
%let SYS_SQLREDUCEPUT = DBMS;
%global etls_sql_pushDown;
%let etls_sql_pushDown = -1;
option DBIDIRECTEXEC;

%global etls_tableExist;
%global etls_numIndex;
%global etls_lastTable;
%let etls_tableExist = -1; 
%let etls_numIndex = -1; 
%let etls_lastTable = &SYSLAST; 

/*---- Define load data macro  ----*/ 

/* --------------------------------------------------------------
   Load Technique Selection: Update - Matching=SQLSet, New=AppendProc
   Blanks may replace non-blanks: false
   Constraint and index action selections: 'ASIS','ASIS','ASIS','ASIS'
   Additional options selections... 
      Set unmapped to missing on updates: false 
   -------------------------------------------------------------- */
%macro etls_loader;

   %let etls_tableOptions = ;
   
   /*---- Map the columns  ----*/ 
   proc datasets lib = work nolist nowarn memtype = (data view);
      delete WJ2Y6LF;
   quit;
   
   %put %str(NOTE: Mapping columns ...);
   proc sql;
      create view work.WJ2Y6LF as
         select
            INSTRUMENTTYPECD,
            INSTRUMENTTYPE
      from &etls_lastTable
      ;
   quit;
   
   %let SYSLAST = work.WJ2Y6LF;
   
   %let etls_lastTable = &SYSLAST; 
   %let etls_tableOptions = ; 
   
   /* Determine if the target table exists  */ 
   %let etls_tableExist = %eval(%sysfunc(exist(dm_dq.DQ_DRVT_INSTRUMENTTYPE, DATA)) or 
         %sysfunc(exist(dm_dq.DQ_DRVT_INSTRUMENTTYPE, VIEW))); 
   
   %let etls_hasUpdateIndex=0; 
   
   /*---- Create a new table  ----*/ 
   %if (&etls_tableExist eq 0) %then 
   %do;  /* if table does not exist  */ 
   
      %put %str(NOTE: Creating table ...);
      
      data dm_dq.DQ_DRVT_INSTRUMENTTYPE
              (dbnull = (
                         INSTRUMENTTYPECD = YES
                         INSTRUMENTTYPE = YES));
         attrib INSTRUMENTTYPECD length = $3
            format = $3.
            informat = $3.
            label = 'INSTRUMENTTYPECD'; 
         attrib INSTRUMENTTYPE length = $100
            format = $100.
            informat = $100.
            label = 'INSTRUMENTTYPE'; 
         call missing(of _all_);
         stop;
      run;
      
      %rcSet(&syserr); 
      
   %end;  /* if table does not exist  */ 
   
   %let etls_recCheckExist = 0; 
   %let etls_targetHasRows = 0; 
   %macro etls_recordCheck; 
      %let etls_recCheckExist = %eval(%sysfunc(exist(dm_dq.DQ_DRVT_INSTRUMENTTYPE, DATA)) or 
            %sysfunc(exist(dm_dq.DQ_DRVT_INSTRUMENTTYPE, VIEW))); 
      
      %if (&etls_recCheckExist) %then
      %do;
         %local etls_syntaxcheck; 
         %let etls_syntaxcheck = %sysfunc(getoption(syntaxcheck)); 
         /* Turn off syntaxcheck option to perform following steps  */ 
         options nosyntaxcheck;
         
         data _null_; 
            set dm_dq.DQ_DRVT_INSTRUMENTTYPE( obs=1 ); 
            call symput("etls_targetHasRows",'1'); 
         run; 
         /* Reset syntaxcheck option to previous setting  */ 
         options &etls_syntaxcheck; 
      %end;
   %mend etls_recordCheck;
   %etls_recordCheck;
   
   
   %if (&etls_targetHasRows) %then 
   %do;  /* if has rows */ 
      proc sql ; 
         /* update existing records in the master table  */ 
         update dm_dq.DQ_DRVT_INSTRUMENTTYPE as m
            set INSTRUMENTTYPE = (select case when t.INSTRUMENTTYPE="" then m.INSTRUMENTTYPE else t.INSTRUMENTTYPE end from &etls_lastTable as t 
                                where m.INSTRUMENTTYPECD = t.INSTRUMENTTYPECD)
               where exists (select * from &etls_lastTable as t
                                   where m.INSTRUMENTTYPECD = t.INSTRUMENTTYPECD);
         
         /* create a temporary table of new records from the transaction table  */ 
         create table etls_newrecords as 
            select * 
               from &etls_lastTable as t 
                  where not exists 
                     (select * from dm_dq.DQ_DRVT_INSTRUMENTTYPE
                   as m 
                                      where m.INSTRUMENTTYPECD = t.INSTRUMENTTYPECD)
         ; 
         
      quit;
      
      %let etls_lastTable = &SYSLAST;
      
      %let etls_tableOptions = ; 
      
      %global etls_sql_pushDown;
      %let etls_sql_pushDown = &sys_sql_ip_all;
      
      %rcSet(&sqlrc); 
      
   %end; /* if has rows */ 
   
   /*---- Append  ----*/ 
   %put %str(NOTE: Appending data ...);
   
   proc append base = dm_dq.DQ_DRVT_INSTRUMENTTYPE 
      data = &etls_lastTable (&etls_tableOptions)  force ; 
    run; 
   
   %rcSet(&syserr); 
   
   proc datasets lib = work nolist nowarn memtype = (data view);
      delete etls_newrecords;
   quit;
   
   proc datasets lib = work nolist nowarn memtype = (data view);
      delete WJ2Y6LF;
   quit;
   
%mend etls_loader;
%etls_loader;

%let etls_recnt = 0;
%macro etls_recordCheck; 
   %let etls_recCheckExist = %eval(%sysfunc(exist(dm_dq.DQ_DRVT_INSTRUMENTTYPE, DATA)) or 
         %sysfunc(exist(dm_dq.DQ_DRVT_INSTRUMENTTYPE, VIEW))); 
   
   %if (&etls_recCheckExist) %then
   %do;
      proc sql noprint;
         select count(*) into :etls_recnt from dm_dq.DQ_DRVT_INSTRUMENTTYPE;
      quit;
   %end;
%mend etls_recordCheck;
%etls_recordCheck;



/**  Step end Table Loader **/

/*==========================================================================* 
 * Step:            Table Loader                          A5ELGGF9.AK0000YC * 
 * Transform:       Table Loader (Version 2.1)                              * 
 * Description:                                                             * 
 *                                                                          * 
 * Source Table:    Append - work.W1LZQEAMK               A5ELGGF9.AF0000DH * 
 * Target Table:    DQ_DRVT_DWH_DM - dm_dq.DQ_DRVT_DWH_DM A5ELGGF9.AE000049 * 
 *==========================================================================*/ 

%let transformID = %quote(A5ELGGF9.AK0000YC);
%let trans_rc = 0;
%let etls_stepStartTime = %sysfunc(datetime(), datetime20.); 

%let SYSLAST = %nrquote(work.W1LZQEAMK); 

%let SYS_SQL_IP_SPEEDO = Y;
%let SYS_SQL_MAPPUTTO = sas_put;
%let SYS_SQLREDUCEPUT = DBMS;
%global etls_sql_pushDown;
%let etls_sql_pushDown = -1;
option DBIDIRECTEXEC;

%global etls_tableExist;
%global etls_numIndex;
%global etls_lastTable;
%let etls_tableExist = -1; 
%let etls_numIndex = -1; 
%let etls_lastTable = &SYSLAST; 

/*---- Define load data macro  ----*/ 

/* --------------------------------------------------------------
   Load Technique Selection: AppendToExisting - AppendProc
   Constraint and index action selections: 'ASIS','ASIS','ASIS','ASIS'
   Additional options selections... 
      Set unmapped to missing on updates: false 
   -------------------------------------------------------------- */
%macro etls_loader;

   %let etls_tableOptions = ;
   
   /*---- Map the columns  ----*/ 
   proc datasets lib = work nolist nowarn memtype = (data view);
      delete WJ2Y6M5;
   quit;
   
   data _null_;
      put "NOTE: The following column(s) do not have a column mapping, so the"
           " value(s) will be set to missing: STARTDATE, NEXTDATE, ENDDATE,"
           " LEGNUMBER, VALUEFRS, VALUESEC";
   run;
   
   %put %str(NOTE: Mapping columns ...);
   proc sql;
      create view work.WJ2Y6M5 as
         select
            REPORTCODE,
            REPORTDATE,
            FRONTKDEALID,
            FRONTFDEALID,
            DEALID,
            INSTRUMENTTYPECD,
            DEALDATE,
            (strip(put(CNT, best12.))) as ADDITIONALINFORMATION length = 255
               format = $255.
               informat = $255.,
            . as STARTDATE length = 8
               format = DATETIME20.
               informat = DATETIME20.,
            . as NEXTDATE length = 8
               format = DATETIME20.
               informat = DATETIME20.,
            . as ENDDATE length = 8
               format = DATETIME20.
               informat = DATETIME20.,
            "" as LEGNUMBER length = 1
               format = $1.
               informat = $1.,
            "" as VALUEFRS length = 20
               format = $20.
               informat = $20.,
            "" as VALUESEC length = 20
               format = $20.
               informat = $20.
      from &etls_lastTable
      ;
   quit;
   
   %let SYSLAST = work.WJ2Y6M5;
   
   %let etls_lastTable = &SYSLAST; 
   %let etls_tableOptions = ; 
   
   /* Determine if the target table exists  */ 
   %let etls_tableExist = %eval(%sysfunc(exist(dm_dq.DQ_DRVT_DWH_DM, DATA)) or 
         %sysfunc(exist(dm_dq.DQ_DRVT_DWH_DM, VIEW))); 
   
   /*---- Create a new table  ----*/ 
   %if (&etls_tableExist eq 0) %then 
   %do;  /* if table does not exist  */ 
   
      %put %str(NOTE: Creating table ...);
      
      data dm_dq.DQ_DRVT_DWH_DM
              (dbnull = (
                         REPORTCODE = YES
                         REPORTDATE = YES
                         FRONTKDEALID = YES
                         FRONTFDEALID = YES
                         DEALID = YES
                         INSTRUMENTTYPECD = YES
                         DEALDATE = YES
                         ADDITIONALINFORMATION = YES
                         STARTDATE = YES
                         NEXTDATE = YES
                         ENDDATE = YES
                         LEGNUMBER = YES
                         VALUEFRS = YES
                         VALUESEC = YES));
         attrib REPORTCODE length = $5
            format = $5.
            informat = $5.
            label = 'REPORTCODE'; 
         attrib REPORTDATE length = 8
            format = DATETIME20.
            informat = DATETIME20.
            label = 'REPORTDATE'; 
         attrib FRONTKDEALID length = $10
            format = $10.
            informat = $10.
            label = 'FRONTKDEALID'; 
         attrib FRONTFDEALID length = $10
            format = $10.
            informat = $10.
            label = 'FRONTFDEALID'; 
         attrib DEALID length = $100
            format = $100.
            informat = $100.
            label = 'DEALID'; 
         attrib INSTRUMENTTYPECD length = $3
            format = $3.
            informat = $3.
            label = 'INSTRUMENTTYPECD'; 
         attrib DEALDATE length = 8
            format = DATETIME20.
            informat = DATETIME20.
            label = 'DEALDATE'; 
         attrib ADDITIONALINFORMATION length = $255
            format = $255.
            informat = $255.
            label = 'ADDITIONALINFORMATION'; 
         attrib STARTDATE length = 8
            format = DATETIME20.
            informat = DATETIME20.
            label = 'STARTDATE'; 
         attrib NEXTDATE length = 8
            format = DATETIME20.
            informat = DATETIME20.
            label = 'NEXTDATE'; 
         attrib ENDDATE length = 8
            format = DATETIME20.
            informat = DATETIME20.
            label = 'ENDDATE'; 
         attrib LEGNUMBER length = $1
            format = $1.
            informat = $1.
            label = 'LEGNUMBER'; 
         attrib VALUEFRS length = $20
            format = $20.
            informat = $20.
            label = 'VALUEFRS'; 
         attrib VALUESEC length = $20
            format = $20.
            informat = $20.
            label = 'VALUESEC'; 
         call missing(of _all_);
         stop;
      run;
      
      %rcSet(&syserr); 
      
   %end;  /* if table does not exist  */ 
   
   /*---- Append  ----*/ 
   %put %str(NOTE: Appending data ...);
   
   proc append base = dm_dq.DQ_DRVT_DWH_DM 
      data = &etls_lastTable (&etls_tableOptions)  force ; 
    run; 
   
   %rcSet(&syserr); 
   
   proc datasets lib = work nolist nowarn memtype = (data view);
      delete WJ2Y6M5;
   quit;
   
%mend etls_loader;
%etls_loader;

%let etls_recnt = 0;
%macro etls_recordCheck; 
   %let etls_recCheckExist = %eval(%sysfunc(exist(dm_dq.DQ_DRVT_DWH_DM, DATA)) or 
         %sysfunc(exist(dm_dq.DQ_DRVT_DWH_DM, VIEW))); 
   
   %if (&etls_recCheckExist) %then
   %do;
      proc sql noprint;
         select count(*) into :etls_recnt from dm_dq.DQ_DRVT_DWH_DM;
      quit;
   %end;
%mend etls_recordCheck;
%etls_recordCheck;



/**  Step end Table Loader **/

/*==========================================================================* 
 * Step:            Append                                A5ELGGF9.AK0000YD * 
 * Transform:       Append                                                  * 
 * Description:                                                             * 
 *                                                                          * 
 * Source Tables:   SQL Join - work.W1LL977O3             A5ELGGF9.AF0000DE * 
 *                  SQL Join - work.W1LKSFKRU             A5ELGGF9.AF0000DB * 
 * Target Table:    Append - work.W9KDMGZ1                A5ELGGF9.AF0000DJ * 
 *==========================================================================*/ 

%let transformID = %quote(A5ELGGF9.AK0000YD);
%let trans_rc = 0;
%let etls_stepStartTime = %sysfunc(datetime(), datetime20.); 

%let etls_recCheckExist = 0; 
%let etls_recnt = 0; 
%macro etls_recordCheck; 
   %let etls_recCheckExist = %eval(%sysfunc(exist(work.W1LL977O3, DATA)) or 
         %sysfunc(exist(work.W1LL977O3, VIEW))); 
   
   %if (&etls_recCheckExist) %then
   %do;
      %local etls_syntaxcheck; 
      %let etls_syntaxcheck = %sysfunc(getoption(syntaxcheck)); 
      /* Turn off syntaxcheck option to perform following steps  */ 
      options nosyntaxcheck;
      
      proc contents data = work.W1LL977O3 out = work.etls_contents(keep = nobs) noprint; 
      run; 
      
      data _null_; 
         set work.etls_contents (obs = 1); 
         call symput("etls_recnt", left(put(nobs,32.))); 
      run;
      
      proc datasets lib = work nolist nowarn memtype = (data view);
         delete etls_contents;
      quit;
      
      /* Reset syntaxcheck option to previous setting  */ 
      options &etls_syntaxcheck; 
   %end;
%mend etls_recordCheck;
%etls_recordCheck;

%let dbxrc = %eval(%sysfunc(exist(work.W1LL977O3, DATA)) or 
      %sysfunc(exist(work.W1LL977O3, VIEW))); 

/*---- Map the columns  ----*/ 
proc datasets lib = work nolist nowarn memtype = (data view);
   delete WJ2Y6MS;
quit;

%put %str(NOTE: Mapping columns ...);
proc sql;
   create view work.WJ2Y6MS as
      select
         ACCOUNT_RK
   from work.W1LL977O3
   ;
quit;

%let SYSLAST = work.WJ2Y6MS;

%let dbxrc = %eval(%sysfunc(exist(work.W1LKSFKRU, DATA)) or 
      %sysfunc(exist(work.W1LKSFKRU, VIEW))); 

/*---- Map the columns  ----*/ 
proc datasets lib = work nolist nowarn memtype = (data view);
   delete WJ2Y6MU;
quit;

%put %str(NOTE: Mapping columns ...);
proc sql;
   create view work.WJ2Y6MU as
      select
         ACCOUNT_RK
   from work.W1LKSFKRU
   ;
quit;

%let SYSLAST = work.WJ2Y6MU;

proc datasets lib = work nolist nowarn memtype = (data view);
   delete W9KDMGZ1;
quit;

data work.W9KDMGZ1 / view=work.W9KDMGZ1;
   set work.WJ2Y6MS
       work.WJ2Y6MU;
   keep ACCOUNT_RK; 
run;

%rcSet(&syserr); 



/**  Step end Append **/

/*==========================================================================* 
 * Step:            Sort                                  A5ELGGF9.AK0000YE * 
 * Transform:       Sort                                                    * 
 * Description:                                                             * 
 *                                                                          * 
 * Source Table:    Append - work.W9KDMGZ1                A5ELGGF9.AF0000DJ * 
 * Target Table:    Sort - work.W9KGFNG0                  A5ELGGF9.AF0000DK * 
 *==========================================================================*/ 

%let transformID = %quote(A5ELGGF9.AK0000YE);
%let trans_rc = 0;
%let etls_stepStartTime = %sysfunc(datetime(), datetime20.); 

%let etls_recnt = -1;
%let SYSLAST = %nrquote(work.W9KDMGZ1); 

proc datasets lib = work nolist nowarn memtype = (data view);
   delete W9KGFNG0;
quit;

proc sort data = &SYSLAST 
   out = work.W9KGFNG0
      NODUPKEY ; 
   by
      ACCOUNT_RK
   ;
run; 

%rcSet(&syserr); 



/**  Step end Sort **/

/*==========================================================================* 
 * Step:            User Written                          A5ELGGF9.AK0000YF * 
 * Transform:       User Written                                            * 
 * Description:     Сбор статистики                                         * 
 *                                                                          * 
 * Source Tables:   Sort - work.W9KGFNG0                  A5ELGGF9.AF0000DK * 
 *                  Append - work.W1LZQEAMK               A5ELGGF9.AF0000DH * 
 *                  ETL_JOB - etl_sys.ETL_JOB             A59S11RW.AE00001A * 
 * Target Table:    User Written - work.W1N6X2NCE         A5ELGGF9.AF0000DL * 
 *                                                                          * 
 * User Written:    SourceCode                                              * 
 *==========================================================================*/ 

%let transformID = %quote(A5ELGGF9.AK0000YF);
%let trans_rc = 0;
%let etls_stepStartTime = %sysfunc(datetime(), datetime20.); 

%let etls_recCheckExist = 0; 
%let etls_recnt = 0; 
%macro etls_recordCheck; 
   %let etls_recCheckExist = %eval(%sysfunc(exist(work.W9KGFNG0, DATA)) or 
         %sysfunc(exist(work.W9KGFNG0, VIEW))); 
   
   %if (&etls_recCheckExist) %then
   %do;
      %local etls_syntaxcheck; 
      %let etls_syntaxcheck = %sysfunc(getoption(syntaxcheck)); 
      /* Turn off syntaxcheck option to perform following steps  */ 
      options nosyntaxcheck;
      
      proc contents data = work.W9KGFNG0 out = work.etls_contents(keep = nobs) noprint; 
      run; 
      
      data _null_; 
         set work.etls_contents (obs = 1); 
         call symput("etls_recnt", left(put(nobs,32.))); 
      run;
      
      proc datasets lib = work nolist nowarn memtype = (data view);
         delete etls_contents;
      quit;
      
      /* Reset syntaxcheck option to previous setting  */ 
      options &etls_syntaxcheck; 
   %end;
%mend etls_recordCheck;
%etls_recordCheck;

%let _INPUT_count = 3;
%let _INPUT = work.W9KGFNG0;
%let _INPUT_connect = ;
%let _INPUT_engine = ;
%let _INPUT_memtype = DATA;
%let _INPUT_options = %nrquote();
%let _INPUT_alter = %nrquote();
%let _INPUT_path = %nrquote(/Sort_A5ELGGF9.AF0000DK%(WorkTable%));
%let _INPUT_type = 1;
%let _INPUT_label = %nrquote();

%let _INPUT1 = work.W9KGFNG0;
%let _INPUT1_connect = ;
%let _INPUT1_engine = ;
%let _INPUT1_memtype = DATA;
%let _INPUT1_options = %nrquote();
%let _INPUT1_alter = %nrquote();
%let _INPUT1_path = %nrquote(/Sort_A5ELGGF9.AF0000DK%(WorkTable%));
%let _INPUT1_type = 1;
%let _INPUT1_label = %nrquote();

%let _INPUT2 = work.W1LZQEAMK;
%let _INPUT2_connect = ;
%let _INPUT2_engine = ;
%let _INPUT2_memtype = VIEW;
%let _INPUT2_options = %nrquote();
%let _INPUT2_alter = %nrquote();
%let _INPUT2_path = %nrquote(/Append_A5ELGGF9.AF0000DH%(WorkTable%));
%let _INPUT2_type = 1;
%let _INPUT2_label = %nrquote();

%let _INPUT3 = etl_sys.ETL_JOB;
%let _INPUT3_connect =  PATH=DWH.IMB.RU AUTHDOMAIN="OraAuth_ETL_SYS" 
;
%let _INPUT3_engine = ORACLE;
%let _INPUT3_memtype = DATA;
%let _INPUT3_options = %nrquote();
%let _INPUT3_alter = %nrquote();
%let _INPUT3_path = %nrquote(/DWH_DWHDDS_SYS/Tables/ETL_SYS/ETL_JOB%(Table%));
%let _INPUT3_type = 1;
%let _INPUT3_label = %nrquote();

%let _OUTPUT_count = 1;
%let _OUTPUT = work.W1N6X2NCE;
%let _OUTPUT_connect = ;
%let _OUTPUT_engine = ;
%let _OUTPUT_memtype = DATA;
%let _OUTPUT_options = %nrquote();
%let _OUTPUT_alter = %nrquote();
%let _OUTPUT_path = %nrquote(/User Written_A5ELGGF9.AF0000DL%(WorkTable%));
%let _OUTPUT_type = 1;
%let _OUTPUT_label = %nrquote();
/* List of target columns to keep  */ 
%let _OUTPUT_keep = REP_DT REP_ID PRC CNT_ALL CNT_ERR DWH_DT;
%let _OUTPUT_col_count = 6;
%let _OUTPUT_col0_name = REP_DT;
%let _OUTPUT_col0_table = work.W1N6X2NCE;
%let _OUTPUT_col0_length = 8;
%let _OUTPUT_col0_type = ;
%let _OUTPUT_col0_format = DATETIME20.;
%let _OUTPUT_col0_informat = ;
%let _OUTPUT_col0_label = %nrquote();
%let _OUTPUT_col0_exp = ;
%let _OUTPUT_col0_input_count = 0;
%let _OUTPUT_col1_name = REP_ID;
%let _OUTPUT_col1_table = work.W1N6X2NCE;
%let _OUTPUT_col1_length = 8;
%let _OUTPUT_col1_type = ;
%let _OUTPUT_col1_format = ;
%let _OUTPUT_col1_informat = ;
%let _OUTPUT_col1_label = %nrquote();
%let _OUTPUT_col1_exp = ;
%let _OUTPUT_col1_input_count = 0;
%let _OUTPUT_col2_name = PRC;
%let _OUTPUT_col2_table = work.W1N6X2NCE;
%let _OUTPUT_col2_length = 8;
%let _OUTPUT_col2_type = ;
%let _OUTPUT_col2_format = ;
%let _OUTPUT_col2_informat = ;
%let _OUTPUT_col2_label = %nrquote();
%let _OUTPUT_col2_exp = ;
%let _OUTPUT_col2_input_count = 0;
%let _OUTPUT_col3_name = CNT_ALL;
%let _OUTPUT_col3_table = work.W1N6X2NCE;
%let _OUTPUT_col3_length = 8;
%let _OUTPUT_col3_type = ;
%let _OUTPUT_col3_format = ;
%let _OUTPUT_col3_informat = ;
%let _OUTPUT_col3_label = %nrquote();
%let _OUTPUT_col3_exp = ;
%let _OUTPUT_col3_input_count = 0;
%let _OUTPUT_col4_name = CNT_ERR;
%let _OUTPUT_col4_table = work.W1N6X2NCE;
%let _OUTPUT_col4_length = 8;
%let _OUTPUT_col4_type = ;
%let _OUTPUT_col4_format = ;
%let _OUTPUT_col4_informat = ;
%let _OUTPUT_col4_label = %nrquote();
%let _OUTPUT_col4_exp = ;
%let _OUTPUT_col4_input_count = 0;
%let _OUTPUT_col5_name = DWH_DT;
%let _OUTPUT_col5_table = work.W1N6X2NCE;
%let _OUTPUT_col5_length = 8;
%let _OUTPUT_col5_type = ;
%let _OUTPUT_col5_format = DATETIME20.;
%let _OUTPUT_col5_informat = ;
%let _OUTPUT_col5_label = %nrquote();
%let _OUTPUT_col5_exp = ;
%let _OUTPUT_col5_input_count = 0;

%let _OUTPUT1 = work.W1N6X2NCE;
%let _OUTPUT1_connect = ;
%let _OUTPUT1_engine = ;
%let _OUTPUT1_memtype = DATA;
%let _OUTPUT1_options = %nrquote();
%let _OUTPUT1_alter = %nrquote();
%let _OUTPUT1_path = %nrquote(/User Written_A5ELGGF9.AF0000DL%(WorkTable%));
%let _OUTPUT1_type = 1;
%let _OUTPUT1_label = %nrquote();
/* List of target columns to keep  */ 
%let _OUTPUT1_keep = REP_DT REP_ID PRC CNT_ALL CNT_ERR DWH_DT;
%let _OUTPUT1_col_count = 6;
%let _OUTPUT1_col0_name = REP_DT;
%let _OUTPUT1_col0_table = work.W1N6X2NCE;
%let _OUTPUT1_col0_length = 8;
%let _OUTPUT1_col0_type = ;
%let _OUTPUT1_col0_format = DATETIME20.;
%let _OUTPUT1_col0_informat = ;
%let _OUTPUT1_col0_label = %nrquote();
%let _OUTPUT1_col0_exp = ;
%let _OUTPUT1_col0_input_count = 0;
%let _OUTPUT1_col1_name = REP_ID;
%let _OUTPUT1_col1_table = work.W1N6X2NCE;
%let _OUTPUT1_col1_length = 8;
%let _OUTPUT1_col1_type = ;
%let _OUTPUT1_col1_format = ;
%let _OUTPUT1_col1_informat = ;
%let _OUTPUT1_col1_label = %nrquote();
%let _OUTPUT1_col1_exp = ;
%let _OUTPUT1_col1_input_count = 0;
%let _OUTPUT1_col2_name = PRC;
%let _OUTPUT1_col2_table = work.W1N6X2NCE;
%let _OUTPUT1_col2_length = 8;
%let _OUTPUT1_col2_type = ;
%let _OUTPUT1_col2_format = ;
%let _OUTPUT1_col2_informat = ;
%let _OUTPUT1_col2_label = %nrquote();
%let _OUTPUT1_col2_exp = ;
%let _OUTPUT1_col2_input_count = 0;
%let _OUTPUT1_col3_name = CNT_ALL;
%let _OUTPUT1_col3_table = work.W1N6X2NCE;
%let _OUTPUT1_col3_length = 8;
%let _OUTPUT1_col3_type = ;
%let _OUTPUT1_col3_format = ;
%let _OUTPUT1_col3_informat = ;
%let _OUTPUT1_col3_label = %nrquote();
%let _OUTPUT1_col3_exp = ;
%let _OUTPUT1_col3_input_count = 0;
%let _OUTPUT1_col4_name = CNT_ERR;
%let _OUTPUT1_col4_table = work.W1N6X2NCE;
%let _OUTPUT1_col4_length = 8;
%let _OUTPUT1_col4_type = ;
%let _OUTPUT1_col4_format = ;
%let _OUTPUT1_col4_informat = ;
%let _OUTPUT1_col4_label = %nrquote();
%let _OUTPUT1_col4_exp = ;
%let _OUTPUT1_col4_input_count = 0;
%let _OUTPUT1_col5_name = DWH_DT;
%let _OUTPUT1_col5_table = work.W1N6X2NCE;
%let _OUTPUT1_col5_length = 8;
%let _OUTPUT1_col5_type = ;
%let _OUTPUT1_col5_format = DATETIME20.;
%let _OUTPUT1_col5_informat = ;
%let _OUTPUT1_col5_label = %nrquote();
%let _OUTPUT1_col5_exp = ;
%let _OUTPUT1_col5_input_count = 0;

/*---- Start of User Written Code  ----*/ 

proc sql;
/*Кол-во всех уникальных деривативных сделок*/
	select count(distinct ACCOUNT_RK) into :CNT_ALL from &_INPUT1;
/*Кол-во ошибочных сделок*/
	select count(distinct ACCOUNT_RK) into :CNT_ERR from &_INPUT2;
/*Дата успешного выполнения процесса в DWH*/
	select end_dttm into :DWH_DT from &_INPUT3 where JOB_ID = (
  select MAX(job_id) 
  from &_INPUT3 
  where upper(job_nm) = '081_360_COMMIT_MIDAS_FIN_INSTR_FULL' and success_flg = 'Y'
  );
quit;
%error_check(mpStepType=SQL);

data &_OUTPUT1;
	attrib
		REP_DT length = 8 format = DATETIME20.
		REP_ID length = 8
		PRC length =8
		CNT_ALL length=8
		CNT_ERR length = 8
		DWH_DT length = 8 format = DATETIME20.
	;

	REP_DT = &REPDT.;
	REP_ID = 5;
	PRC = DIVIDE(&CNT_ERR. , &CNT_ALL.) * 100;
	if missing(PRC) then PRC=0;
	CNT_ALL = &CNT_ALL.;
	CNT_ERR = &CNT_ERR.;
	DWH_DT = "&DWH_DT."dt;
run;
%error_check(mpStepType=DATA);
/*---- End of User Written Code  ----*/ 

%rcSet(&syserr); 
%rcSet(&sqlrc); 


/**  Step end User Written **/

/*==========================================================================* 
 * Step:            Table Loader                          A5ELGGF9.AK0000YG * 
 * Transform:       Table Loader (Version 2.1)                              * 
 * Description:                                                             * 
 *                                                                          * 
 * Source Table:    User Written - work.W1N6X2NCE         A5ELGGF9.AF0000DL * 
 * Target Table:    DQ_DRVT_REPORT_PRC -                  A5ELGGF9.AE00004E * 
 *                   dm_dq.DQ_DRVT_REPORT_PRC                               * 
 *==========================================================================*/ 

%let transformID = %quote(A5ELGGF9.AK0000YG);
%let trans_rc = 0;
%let etls_stepStartTime = %sysfunc(datetime(), datetime20.); 

%let SYSLAST = %nrquote(work.W1N6X2NCE); 

%let SYS_SQL_IP_SPEEDO = Y;
%let SYS_SQL_MAPPUTTO = sas_put;
%let SYS_SQLREDUCEPUT = DBMS;
%global etls_sql_pushDown;
%let etls_sql_pushDown = -1;
option DBIDIRECTEXEC;

%global etls_tableExist;
%global etls_numIndex;
%global etls_lastTable;
%let etls_tableExist = -1; 
%let etls_numIndex = -1; 
%let etls_lastTable = &SYSLAST; 

/*---- Define load data macro  ----*/ 

/* --------------------------------------------------------------
   Load Technique Selection: AppendToExisting - AppendProc
   Constraint and index action selections: 'ASIS','ASIS','ASIS','ASIS'
   Additional options selections... 
      Set unmapped to missing on updates: false 
   -------------------------------------------------------------- */
%macro etls_loader;

   %let etls_tableOptions = ;
   
   /*---- Map the columns  ----*/ 
   proc datasets lib = work nolist nowarn memtype = (data view);
      delete WJ2Y700;
   quit;
   
   %put %str(NOTE: Mapping columns ...);
   proc sql;
      create view work.WJ2Y700 as
         select
            REP_DT   
               informat = DATETIME20.,
            REP_ID   
               format = 7.
               informat = 7.,
            PRC   
               format = 19.8
               informat = 19.8,
            CNT_ALL   
               format = 13.
               informat = 13.,
            CNT_ERR   
               format = 13.
               informat = 13.,
            DWH_DT   
               informat = DATETIME20.
      from &etls_lastTable
      ;
   quit;
   
   %let SYSLAST = work.WJ2Y700;
   
   %let etls_lastTable = &SYSLAST; 
   %let etls_tableOptions = ; 
   
   /* Determine if the target table exists  */ 
   %let etls_tableExist = %eval(%sysfunc(exist(dm_dq.DQ_DRVT_REPORT_PRC, DATA)) or 
         %sysfunc(exist(dm_dq.DQ_DRVT_REPORT_PRC, VIEW))); 
   
   /*---- Create a new table  ----*/ 
   %if (&etls_tableExist eq 0) %then 
   %do;  /* if table does not exist  */ 
   
      %put %str(NOTE: Creating table ...);
      
      data dm_dq.DQ_DRVT_REPORT_PRC
              (dbnull = (
                         REP_DT = NO
                         REP_ID = NO
                         PRC = YES
                         CNT_ALL = YES
                         CNT_ERR = YES
                         DWH_DT = YES));
         attrib REP_DT length = 8
            format = DATETIME20.
            informat = DATETIME20.
            label = 'REP_DT'; 
         attrib REP_ID length = 8
            format = 7.
            informat = 7.
            label = 'REP_ID'; 
         attrib PRC length = 8
            format = 19.8
            informat = 19.8
            label = 'PRC'; 
         attrib CNT_ALL length = 8
            format = 13.
            informat = 13.
            label = 'CNT_ALL'; 
         attrib CNT_ERR length = 8
            format = 13.
            informat = 13.
            label = 'CNT_ERR'; 
         attrib DWH_DT length = 8
            format = DATETIME20.
            informat = DATETIME20.
            label = 'DWH_DT'; 
         call missing(of _all_);
         stop;
      run;
      
      %rcSet(&syserr); 
      
   %end;  /* if table does not exist  */ 
   
   /*---- Append  ----*/ 
   %put %str(NOTE: Appending data ...);
   
   proc append base = dm_dq.DQ_DRVT_REPORT_PRC 
      data = &etls_lastTable (&etls_tableOptions)  force ; 
    run; 
   
   %rcSet(&syserr); 
   
   proc datasets lib = work nolist nowarn memtype = (data view);
      delete WJ2Y700;
   quit;
   
%mend etls_loader;
%etls_loader;

%let etls_recnt = 0;
%macro etls_recordCheck; 
   %let etls_recCheckExist = %eval(%sysfunc(exist(dm_dq.DQ_DRVT_REPORT_PRC, DATA)) or 
         %sysfunc(exist(dm_dq.DQ_DRVT_REPORT_PRC, VIEW))); 
   
   %if (&etls_recCheckExist) %then
   %do;
      proc sql noprint;
         select count(*) into :etls_recnt from dm_dq.DQ_DRVT_REPORT_PRC;
      quit;
   %end;
%mend etls_recordCheck;
%etls_recordCheck;



/**  Step end Table Loader **/

/*==========================================================================* 
 * Step:            Завершить модуль                      A5ELGGF9.AK0000YH * 
 * Transform:       Завершить модуль                                        * 
 * Description:                                                             * 
 *==========================================================================*/ 

%let transformID = %quote(A5ELGGF9.AK0000YH);
%let trans_rc = 0;
%let etls_stepStartTime = %sysfunc(datetime(), datetime20.); 

%let _INPUT_count = 0; 
%let _OUTPUT_count = 0; 


/*****************************************************************
* ВЕРСИЯ:
*   $Id: transform_job_finish.sas 247 2012-04-03 07:31:10Z nesterenok $
*
******************************************************************
* НАЗНАЧЕНИЕ:
*   Регистрирует конец модуля ETL.
*
* ПАРАМЕТРЫ:
*   нет
*
******************************************************************/

%macro transform_job_finish;

   /* Продолжаем модуль */
   %job_continue_reg(mpJobType=JOB, mpJobName=&ETLS_JobName., mpPostEvent=N);

   /* Завершаем модуль */
   %job_finish_reg(mpJobType=JOB);

%mend transform_job_finish;

%transform_job_finish;


%rcSet(&syserr); 
%rcSet(&sysrc); 
%rcSet(&sqlrc); 



/**  Step end Завершить модуль **/

%let etls_endTime = %sysfunc(datetime(),datetime.);



/**  Job end 202_050_Mart_DQ_DRVT_REP05 **/

/* Reset jobid and name */
%let jobID = %quote(A5ELGGF9.AH00003N);
%let etls_jobName = %nrquote(202_002_Stream_DQ_DRVT);

/**************************************************************************** 
 * Job:             202_060_Mart_DQ_DRVT_REP06            A5ELGGF9.AH00002C * 
 * Description:     Совпадение основных параметров сделки за дату отчета и  * 
 *                   (дата отчета-1).                                       * 
 *                                                                          * 
 * Metadata Server: bravo14                                                 * 
 * Port:            8561                                                    * 
 * Location:        /DWH_DMDQ_REP/Jobs/Includes/DQ_DRVT                     * 
 *                                                                          * 
 * Server:          SASApp                                A5C46MZY.AQ000002 * 
 *                                                                          * 
 * Source Tables:   FINANCIAL_ACCOUNT -                   A569C89V.AE0000FK * 
 *                   dwh_dds.FINANCIAL_ACCOUNT                              * 
 *                  FINANCIAL_ACCOUNT -                   A569C89V.AE0000FK * 
 *                   dwh_dds.FINANCIAL_ACCOUNT                              * 
 *                  CUSTOMER_X_FINANCIAL_ACCOUNT -        A569C89V.AE0000F2 * 
 *                   dwh_dds.CUSTOMER_X_FINANCIAL_ACCOUNT                   * 
 *                  COUNTERPARTY - dwh_dds.COUNTERPARTY   A569C89V.AE0000EQ * 
 *                  CUSTOMER_X_FINANCIAL_ACCOUNT -        A569C89V.AE0000F2 * 
 *                   dwh_dds.CUSTOMER_X_FINANCIAL_ACCOUNT                   * 
 *                  COUNTERPARTY - dwh_dds.COUNTERPARTY   A569C89V.AE0000EQ * 
 *                  FINANCIAL_ACCOUNT_ASSOC -             A569C89V.AE0000FL * 
 *                   dwh_dds.FINANCIAL_ACCOUNT_ASSOC                        * 
 *                  CORE_BANKING_ACCOUNT -                A569C89V.AE0000EN * 
 *                   dwh_dds.CORE_BANKING_ACCOUNT                           * 
 *                  IRB_FIN_INSTR_TYPE -                  A569C89V.AE0000I3 * 
 *                   dwh_dds.IRB_FIN_INSTR_TYPE                             * 
 *                  FINANCIAL_ACCOUNT_ASSOC -             A569C89V.AE0000FL * 
 *                   dwh_dds.FINANCIAL_ACCOUNT_ASSOC                        * 
 *                  CORE_BANKING_ACCOUNT -                A569C89V.AE0000EN * 
 *                   dwh_dds.CORE_BANKING_ACCOUNT                           * 
 *                  IRB_FIN_INSTR_TYPE -                  A569C89V.AE0000I3 * 
 *                   dwh_dds.IRB_FIN_INSTR_TYPE                             * 
 *                  FINANCIAL_INSTRUMENT_ASSOC -          A569C89V.AE0000FW * 
 *                   dwh_dds.FINANCIAL_INSTRUMENT_ASSOC                     * 
 *                  FINANCIAL_INSTRUMENT -                A569C89V.AE0000FV * 
 *                   dwh_dds.FINANCIAL_INSTRUMENT                           * 
 *                  FINANCIAL_INSTRUMENT_ASSOC -          A569C89V.AE0000FW * 
 *                   dwh_dds.FINANCIAL_INSTRUMENT_ASSOC                     * 
 *                  FINANCIAL_INSTRUMENT -                A569C89V.AE0000FV * 
 *                   dwh_dds.FINANCIAL_INSTRUMENT                           * 
 *                  FINANCIAL_INSTRUMENT_ASSOC -          A569C89V.AE0000FW * 
 *                   dwh_dds.FINANCIAL_INSTRUMENT_ASSOC                     * 
 *                  FINANCIAL_INSTRUMENT -                A569C89V.AE0000FV * 
 *                   dwh_dds.FINANCIAL_INSTRUMENT                           * 
 *                  IRB_FIN_INSTR_TYPE -                  A569C89V.AE0000I3 * 
 *                   dwh_dds.IRB_FIN_INSTR_TYPE                             * 
 *                  FINANCIAL_INSTRUMENT_ASSOC -          A569C89V.AE0000FW * 
 *                   dwh_dds.FINANCIAL_INSTRUMENT_ASSOC                     * 
 *                  FINANCIAL_INSTRUMENT -                A569C89V.AE0000FV * 
 *                   dwh_dds.FINANCIAL_INSTRUMENT                           * 
 *                  IRB_FIN_INSTR_TYPE -                  A569C89V.AE0000I3 * 
 *                   dwh_dds.IRB_FIN_INSTR_TYPE                             * 
 *                  FINANCIAL_INSTRUMENT_ASSOC -          A569C89V.AE0000FW * 
 *                   dwh_dds.FINANCIAL_INSTRUMENT_ASSOC                     * 
 *                  FINANCIAL_INSTRUMENT -                A569C89V.AE0000FV * 
 *                   dwh_dds.FINANCIAL_INSTRUMENT                           * 
 *                  FRA_INSTRUMENT -                      A569C89V.AE0000G5 * 
 *                   dwh_dds.FRA_INSTRUMENT                                 * 
 *                  OPTION_INSTRUMENT -                   A569C89V.AE0000IV * 
 *                   dwh_dds.OPTION_INSTRUMENT                              * 
 *                  SWAP_INSTRUMENT_LEG -                 A569C89V.AE0000JF * 
 *                   dwh_dds.SWAP_INSTRUMENT_LEG                            * 
 *                  FINANCIAL_INSTRUMENT_ASSOC -          A569C89V.AE0000FW * 
 *                   dwh_dds.FINANCIAL_INSTRUMENT_ASSOC                     * 
 *                  FINANCIAL_INSTRUMENT -                A569C89V.AE0000FV * 
 *                   dwh_dds.FINANCIAL_INSTRUMENT                           * 
 *                  FRA_INSTRUMENT -                      A569C89V.AE0000G5 * 
 *                   dwh_dds.FRA_INSTRUMENT                                 * 
 *                  OPTION_INSTRUMENT -                   A569C89V.AE0000IV * 
 *                   dwh_dds.OPTION_INSTRUMENT                              * 
 *                  SWAP_INSTRUMENT_LEG -                 A569C89V.AE0000JF * 
 *                   dwh_dds.SWAP_INSTRUMENT_LEG                            * 
 *                  FINANCIAL_INSTRUMENT_ASSOC -          A569C89V.AE0000FW * 
 *                   dwh_dds.FINANCIAL_INSTRUMENT_ASSOC                     * 
 *                  FINANCIAL_INSTRUMENT -                A569C89V.AE0000FV * 
 *                   dwh_dds.FINANCIAL_INSTRUMENT                           * 
 *                  FINANCIAL_INSTRUMENT_ASSOC -          A569C89V.AE0000FW * 
 *                   dwh_dds.FINANCIAL_INSTRUMENT_ASSOC                     * 
 *                  FINANCIAL_INSTRUMENT -                A569C89V.AE0000FV * 
 *                   dwh_dds.FINANCIAL_INSTRUMENT                           * 
 *                  FINANCIAL_INSTRUMENT_ASSOC -          A569C89V.AE0000FW * 
 *                   dwh_dds.FINANCIAL_INSTRUMENT_ASSOC                     * 
 *                  FINANCIAL_INSTRUMENT -                A569C89V.AE0000FV * 
 *                   dwh_dds.FINANCIAL_INSTRUMENT                           * 
 *                  SWAP_INSTRUMENT_LEG -                 A569C89V.AE0000JF * 
 *                   dwh_dds.SWAP_INSTRUMENT_LEG                            * 
 *                  SWAP_INSTRUMENT_LEG -                 A569C89V.AE0000JF * 
 *                   dwh_dds.SWAP_INSTRUMENT_LEG                            * 
 *                  FINANCIAL_INSTRUMENT_ASSOC -          A569C89V.AE0000FW * 
 *                   dwh_dds.FINANCIAL_INSTRUMENT_ASSOC                     * 
 *                  FINANCIAL_INSTRUMENT -                A569C89V.AE0000FV * 
 *                   dwh_dds.FINANCIAL_INSTRUMENT                           * 
 *                  SWAP_INSTRUMENT_LEG -                 A569C89V.AE0000JF * 
 *                   dwh_dds.SWAP_INSTRUMENT_LEG                            * 
 *                  INTEREST_PAYMENT_TYPE -               A569C89V.AE0000GI * 
 *                   dwh_dds.INTEREST_PAYMENT_TYPE                          * 
 *                  SWAP_INSTRUMENT_LEG -                 A569C89V.AE0000JF * 
 *                   dwh_dds.SWAP_INSTRUMENT_LEG                            * 
 *                  INTEREST_PAYMENT_TYPE -               A569C89V.AE0000GI * 
 *                   dwh_dds.INTEREST_PAYMENT_TYPE                          * 
 *                  FINANCIAL_INSTRUMENT_ASSOC -          A569C89V.AE0000FW * 
 *                   dwh_dds.FINANCIAL_INSTRUMENT_ASSOC                     * 
 *                  FINANCIAL_INSTRUMENT -                A569C89V.AE0000FV * 
 *                   dwh_dds.FINANCIAL_INSTRUMENT                           * 
 *                  SWAP_INSTRUMENT_LEG -                 A569C89V.AE0000JF * 
 *                   dwh_dds.SWAP_INSTRUMENT_LEG                            * 
 *                  SWAP_INSTRUMENT_LEG -                 A569C89V.AE0000JF * 
 *                   dwh_dds.SWAP_INSTRUMENT_LEG                            * 
 *                  SWAP_INSTRUMENT_LEG -                 A569C89V.AE0000JF * 
 *                   dwh_dds.SWAP_INSTRUMENT_LEG                            * 
 *                  FINANCIAL_INSTRUMENT_TYPE -           A569C89V.AE0000FZ * 
 *                   dwh_dds.FINANCIAL_INSTRUMENT_TYPE                      * 
 *                  ETL_JOB - etl_sys.ETL_JOB             A59S11RW.AE00001A * 
 *                  IRB_CUST_X_FIN_ACCOUNT_JRNL -         A569C89V.AE0000HM * 
 *                   dwh_dds.IRB_CUST_X_FIN_ACCOUNT_JRNL                    * 
 *                  COUNTERPARTY - dwh_dds.COUNTERPARTY   A569C89V.AE0000EQ * 
 *                  FINANCIAL_ACCOUNT_ASSOC -             A569C89V.AE0000FL * 
 *                   dwh_dds.FINANCIAL_ACCOUNT_ASSOC                        * 
 *                  IRB_CORE_BANKING_ACCOUNT_JRNL -       A569C89V.AE0000H4 * 
 *                  dwh_dds.IRB_CORE_BANKING_ACCOUNT_JR                     * 
 *                  NL                                                      * 
 *                  IRB_FIN_INSTR_TYPE -                  A569C89V.AE0000I3 * 
 *                   dwh_dds.IRB_FIN_INSTR_TYPE                             * 
 *                  FINANCIAL_INSTRUMENT_ASSOC -          A569C89V.AE0000FW * 
 *                   dwh_dds.FINANCIAL_INSTRUMENT_ASSOC                     * 
 *                  IRB_FINANCIAL_INSTRUMENT_JRNL -       A569C89V.AE0000I7 * 
 *                  dwh_dds.IRB_FINANCIAL_INSTRUMENT_JR                     * 
 *                  NL                                                      * 
 *                  FINANCIAL_INSTRUMENT_ASSOC -          A569C89V.AE0000FW * 
 *                   dwh_dds.FINANCIAL_INSTRUMENT_ASSOC                     * 
 *                  IRB_FINANCIAL_INSTRUMENT_JRNL -       A569C89V.AE0000I7 * 
 *                  dwh_dds.IRB_FINANCIAL_INSTRUMENT_JR                     * 
 *                  NL                                                      * 
 *                  IRB_FIN_INSTR_TYPE -                  A569C89V.AE0000I3 * 
 *                   dwh_dds.IRB_FIN_INSTR_TYPE                             * 
 *                  FINANCIAL_INSTRUMENT_ASSOC -          A569C89V.AE0000FW * 
 *                   dwh_dds.FINANCIAL_INSTRUMENT_ASSOC                     * 
 *                  IRB_FINANCIAL_INSTRUMENT_JRNL -       A569C89V.AE0000I7 * 
 *                  dwh_dds.IRB_FINANCIAL_INSTRUMENT_JR                     * 
 *                  NL                                                      * 
 *                  FRA_INSTRUMENT -                      A569C89V.AE0000G5 * 
 *                   dwh_dds.FRA_INSTRUMENT                                 * 
 *                  OPTION_INSTRUMENT -                   A569C89V.AE0000IV * 
 *                   dwh_dds.OPTION_INSTRUMENT                              * 
 *                  SWAP_INSTRUMENT_LEG -                 A569C89V.AE0000JF * 
 *                   dwh_dds.SWAP_INSTRUMENT_LEG                            * 
 *                  FINANCIAL_ACCOUNT_ASSOC -             A569C89V.AE0000FL * 
 *                   dwh_dds.FINANCIAL_ACCOUNT_ASSOC                        * 
 *                  IRB_FINANCIAL_ACCOUNT_JRNL -          A569C89V.AE0000I5 * 
 *                   dwh_dds.IRB_FINANCIAL_ACCOUNT_JRNL                     * 
 *                  IRB_FINANCIAL_ACCOUNT_JRNL -          A569C89V.AE0000I5 * 
 *                   dwh_dds.IRB_FINANCIAL_ACCOUNT_JRNL                     * 
 *                  FINANCIAL_INSTRUMENT_ASSOC -          A569C89V.AE0000FW * 
 *                   dwh_dds.FINANCIAL_INSTRUMENT_ASSOC                     * 
 *                  FINANCIAL_INSTRUMENT -                A569C89V.AE0000FV * 
 *                   dwh_dds.FINANCIAL_INSTRUMENT                           * 
 *                  IRB_FINANCIAL_ACCOUNT_JRNL -          A569C89V.AE0000I5 * 
 *                   dwh_dds.IRB_FINANCIAL_ACCOUNT_JRNL                     * 
 *                  FINANCIAL_INSTRUMENT_ASSOC -          A569C89V.AE0000FW * 
 *                   dwh_dds.FINANCIAL_INSTRUMENT_ASSOC                     * 
 *                  FINANCIAL_INSTRUMENT -                A569C89V.AE0000FV * 
 *                   dwh_dds.FINANCIAL_INSTRUMENT                           * 
 * Target Tables:   DQ_DRVT_DWH_DM - dm_dq.DQ_DRVT_DWH_DM A5ELGGF9.AE000049 * 
 *                  DQ_DRVT_INSTRUMENTTYPE -              A5ELGGF9.AE00004A * 
 *                   dm_dq.DQ_DRVT_INSTRUMENTTYPE                           * 
 *                  DQ_DRVT_REPORT_PRC -                  A5ELGGF9.AE00004E * 
 *                   dm_dq.DQ_DRVT_REPORT_PRC                               * 
 *                  DQ_DRVT_DWH_DM - dm_dq.DQ_DRVT_DWH_DM A5ELGGF9.AE000049 * 
 *                  DQ_DRVT_REPORT_PRC -                  A5ELGGF9.AE00004E * 
 *                   dm_dq.DQ_DRVT_REPORT_PRC                               * 
 *                                                                          * 
 * Generated on:    16 Июль 2013 г. 17:46:18 MSD                            * 
 * Generated by:    sasdwh                                                  * 
 * Version:         SAS Data Integration Studio 4.5                         * 
 ****************************************************************************/ 

/* General macro variables  */ 
%let jobID = %quote(A5ELGGF9.AH00002C);
%let etls_jobName = %nrquote(202_060_Mart_DQ_DRVT_REP06);
%let etls_userID = %nrquote(sasdwh);


/* Create metadata macro variables */
%let IOMServer      = %nrquote(SASApp);
%let metaPort       = %nrquote(8561);
%let metaServer     = %nrquote(bravo14);

/* Set metadata options */
options metaport       = &metaPort 
        metaserver     = "&metaServer"; 

/* Setup for capturing job status  */ 
%let etls_startTime = %sysfunc(datetime(),datetime.);
%let etls_recordsBefore = 0;
%let etls_recordsAfter = 0;
%let etls_lib = 0;
%let etls_table = 0;

%global etls_debug; 
%macro etls_setDebug; 
   %if %str(&etls_debug) ne 0 %then 
      OPTIONS MPRINT%str(;); 
%mend; 
%etls_setDebug; 

/*---- Start of Pre-Process Code  ----*/ 

%LET REPDT=&DMDQ_REPORT_START_DTTM;
/* test 
%LET REPDT=%sysfunc(dhms(%sysfunc(putn('14Nov2012'd, best.)), 0, 0, 0)); 
*/
/* previous day to match data */
%LET REPDT1=%sysfunc(intnx(dtday, &REPDT, -1, same)); 
/* journal day to match data */
%LET REPDT2=%sysfunc(intnx(dtday, &REPDT, +1, same)); 



/*---- End of Pre-Process Code  ----*/ 

%rcSet(&syserr); 
%rcSet(&sqlrc); 

/*==========================================================================* 
 * Step:            Начать модуль                         A5ELGGF9.AK0000YI * 
 * Transform:       Начать модуль                                           * 
 * Description:                                                             * 
 *==========================================================================*/ 

%let transformID = %quote(A5ELGGF9.AK0000YI);
%let trans_rc = 0;
%let etls_stepStartTime = %sysfunc(datetime(), datetime20.); 

%let _INPUT_count = 0; 
%let _OUTPUT_count = 0; 


/*****************************************************************
* ВЕРСИЯ:
*   $Id: transform_job_start.sas 1747 2012-08-01 11:26:13Z nesterenok $
*
******************************************************************
* НАЗНАЧЕНИЕ:
*   Регистрирует начало модуля ETL.
*
* ПАРАМЕТРЫ:
*   нет
*
******************************************************************/

%macro transform_job_start;

   /* Продолжаем поток (или создаем новый) */
   %local lmvStreamName;
   %if %sysfunc(sysexist(LSB_JOBNAME)) %then
      %let lmvStreamName = %scan(%sysfunc(sysget(LSB_JOBNAME)), 3, :);
   %else
      %let lmvStreamName = ;

   %job_continue_reg(mpJobType=STREAM, mpJobName=&lmvStreamName, mpPostEvent=N, mpForcedStart=Y);

   /* Для DI, начинаем поток заново, если старый был начат не сегодня */
   %if %length(&lmvStreamName) eq 0 and &STREAM_START_DT ne %sysfunc(today()) %then %do;
      %job_start_reg(mpJobType=STREAM, mpParentJobId=, mpJobName=&lmvStreamName.);
   %end;

   /* Начинаем модуль */
   %job_start_reg(mpJobType=JOB, mpParentJobId=&STREAM_ID, mpJobName=&ETLS_JobName.);

%mend transform_job_start;

%transform_job_start;


%rcSet(&syserr); 
%rcSet(&sysrc); 
%rcSet(&sqlrc); 



/**  Step end Начать модуль **/

/*==========================================================================* 
 * Step:            Очистить таблицу                      A5ELGGF9.AK0000YJ * 
 * Transform:       Очистить таблицу                                        * 
 * Description:                                                             * 
 *                                                                          * 
 * Target Table:    DQ_DRVT_DWH_DM - dm_dq.DQ_DRVT_DWH_DM A5ELGGF9.AE000049 * 
 *==========================================================================*/ 

%let transformID = %quote(A5ELGGF9.AK0000YJ);
%let trans_rc = 0;
%let etls_stepStartTime = %sysfunc(datetime(), datetime20.); 

%let _INPUT_count = 0; 
%let _OUTPUT_count = 1; 
%let _OUTPUT = dm_dq.DQ_DRVT_DWH_DM;
%let _OUTPUT_connect =  DEFER=YES PATH=DWH.IMB.RU AUTHDOMAIN="OraAuth_DM_DQ" 
;
%let _OUTPUT_engine = ORACLE;
%let _OUTPUT_memtype = DATA;
%let _OUTPUT_options = %nrquote();
%let _OUTPUT_alter = %nrquote();
%let _OUTPUT_path = %nrquote(/DWH_DMDQ_REP/Marts/DQ_DRVT/DQ_DRVT_DWH_DM%(Table%));
%let _OUTPUT_type = 1;
%let _OUTPUT_label = %nrquote();
/* List of target columns to keep  */ 
%let _OUTPUT_keep = REPORTCODE REPORTDATE FRONTKDEALID FRONTFDEALID DEALID 
        INSTRUMENTTYPECD DEALDATE ADDITIONALINFORMATION STARTDATE NEXTDATE 
        ENDDATE LEGNUMBER VALUEFRS VALUESEC;

%let tpOut = dm_dq.DQ_DRVT_DWH_DM;
%let tpOut_connect =  DEFER=YES PATH=DWH.IMB.RU AUTHDOMAIN="OraAuth_DM_DQ" 
;
%let tpOut_engine = ORACLE;
%let tpOut_memtype = DATA;
%let tpOut_options = %nrquote();
%let tpOut_alter = %nrquote();
%let tpOut_path = %nrquote(/DWH_DMDQ_REP/Marts/DQ_DRVT/DQ_DRVT_DWH_DM%(Table%));
%let tpOut_type = 1;
%let tpOut_label = %nrquote();
/* List of target columns to keep  */ 
%let tpOut_keep = REPORTCODE REPORTDATE FRONTKDEALID FRONTFDEALID DEALID 
        INSTRUMENTTYPECD DEALDATE ADDITIONALINFORMATION STARTDATE NEXTDATE 
        ENDDATE LEGNUMBER VALUEFRS VALUESEC;


%let tpWhere = %nrquote(REPORTCODE = %'П-06%' AND REPORTDATE = &DMDQ_REPORT_START_DTTM);

/* List of target columns to keep  */ 
%let _keep = REPORTCODE REPORTDATE FRONTKDEALID FRONTFDEALID DEALID 
        INSTRUMENTTYPECD DEALDATE ADDITIONALINFORMATION STARTDATE NEXTDATE 
        ENDDATE LEGNUMBER VALUEFRS VALUESEC;
/* List of target columns to keep  */ 
%let keep = REPORTCODE REPORTDATE FRONTKDEALID FRONTFDEALID DEALID 
        INSTRUMENTTYPECD DEALDATE ADDITIONALINFORMATION STARTDATE NEXTDATE 
        ENDDATE LEGNUMBER VALUEFRS VALUESEC;
/*****************************************************************
* ВЕРСИЯ:
*   $Id: transform_table_delete.sas 2142 2012-08-17 14:15:09Z nesterenok $
*
******************************************************************
* НАЗНАЧЕНИЕ:
*   Удаляет из указанной таблицы записи.
*
* ПАРАМЕТРЫ:
*   tpOut                  + имя целевой таблицы, которая будет очищена
*   tpWhere                - условие отбора записей под удаление
*                            по умолчанию отсутствует, т.е. удаляются все записи
*
******************************************************************/

%macro transform_table_delete;

   /* Удаляем записи */
   /* TODO: truncate */
   proc sql;
      delete from &tpOut
      %if %length(&tpWhere) gt 0 %then %do;
         where (%unquote(&tpWhere))
      %end;
      ;
   quit;
   %error_check (mpStepType=SQL);

%mend transform_table_delete;

%transform_table_delete;


%rcSet(&syserr); 
%rcSet(&sysrc); 
%rcSet(&sqlrc); 



/**  Step end Очистить таблицу **/

/*==========================================================================* 
 * Step:            Очистить таблицу                      A5ELGGF9.AK0000YK * 
 * Transform:       Очистить таблицу                                        * 
 * Description:                                                             * 
 *                                                                          * 
 * Target Table:    DQ_DRVT_REPORT_PRC -                  A5ELGGF9.AE00004E * 
 *                   dm_dq.DQ_DRVT_REPORT_PRC                               * 
 *==========================================================================*/ 

%let transformID = %quote(A5ELGGF9.AK0000YK);
%let trans_rc = 0;
%let etls_stepStartTime = %sysfunc(datetime(), datetime20.); 

%let _INPUT_count = 0; 
%let _OUTPUT_count = 1; 
%let _OUTPUT = dm_dq.DQ_DRVT_REPORT_PRC;
%let _OUTPUT_connect =  DEFER=YES PATH=DWH.IMB.RU AUTHDOMAIN="OraAuth_DM_DQ" 
;
%let _OUTPUT_engine = ORACLE;
%let _OUTPUT_memtype = DATA;
%let _OUTPUT_options = %nrquote();
%let _OUTPUT_alter = %nrquote();
%let _OUTPUT_path = %nrquote(/DWH_DMDQ_REP/Marts/DQ_DRVT/DQ_DRVT_REPORT_PRC%(Table%));
%let _OUTPUT_type = 1;
%let _OUTPUT_label = %nrquote();
/* List of target columns to keep  */ 
%let _OUTPUT_keep = REP_DT REP_ID PRC CNT_ALL CNT_ERR DWH_DT;

%let tpOut = dm_dq.DQ_DRVT_REPORT_PRC;
%let tpOut_connect =  DEFER=YES PATH=DWH.IMB.RU AUTHDOMAIN="OraAuth_DM_DQ" 
;
%let tpOut_engine = ORACLE;
%let tpOut_memtype = DATA;
%let tpOut_options = %nrquote();
%let tpOut_alter = %nrquote();
%let tpOut_path = %nrquote(/DWH_DMDQ_REP/Marts/DQ_DRVT/DQ_DRVT_REPORT_PRC%(Table%));
%let tpOut_type = 1;
%let tpOut_label = %nrquote();
/* List of target columns to keep  */ 
%let tpOut_keep = REP_DT REP_ID PRC CNT_ALL CNT_ERR DWH_DT;


%let tpWhere = %nrquote(REP_ID = 6 AND REP_DT = &DMDQ_REPORT_START_DTTM);

/* List of target columns to keep  */ 
%let _keep = REP_DT REP_ID PRC CNT_ALL CNT_ERR DWH_DT;
/* List of target columns to keep  */ 
%let keep = REP_DT REP_ID PRC CNT_ALL CNT_ERR DWH_DT;
/*****************************************************************
* ВЕРСИЯ:
*   $Id: transform_table_delete.sas 2142 2012-08-17 14:15:09Z nesterenok $
*
******************************************************************
* НАЗНАЧЕНИЕ:
*   Удаляет из указанной таблицы записи.
*
* ПАРАМЕТРЫ:
*   tpOut                  + имя целевой таблицы, которая будет очищена
*   tpWhere                - условие отбора записей под удаление
*                            по умолчанию отсутствует, т.е. удаляются все записи
*
******************************************************************/

%macro transform_table_delete;

   /* Удаляем записи */
   /* TODO: truncate */
   proc sql;
      delete from &tpOut
      %if %length(&tpWhere) gt 0 %then %do;
         where (%unquote(&tpWhere))
      %end;
      ;
   quit;
   %error_check (mpStepType=SQL);

%mend transform_table_delete;

%transform_table_delete;


%rcSet(&syserr); 
%rcSet(&sysrc); 
%rcSet(&sqlrc); 



/**  Step end Очистить таблицу **/

/*==========================================================================* 
 * Step:            Extract                               A5ELGGF9.AK0000YL * 
 * Transform:       Extract                                                 * 
 * Description:     DRV, DCDREPDT                                           * 
 *                                                                          * 
 * Source Table:    FINANCIAL_ACCOUNT -                   A569C89V.AE0000FK * 
 *                   dwh_dds.FINANCIAL_ACCOUNT                              * 
 * Target Table:    FINANCIAL_ACCOUNT - work.W1OAQKQTH    A5ELGGF9.AF0000DM * 
 *==========================================================================*/ 

%let transformID = %quote(A5ELGGF9.AK0000YL);
%let trans_rc = 0;
%let etls_stepStartTime = %sysfunc(datetime(), datetime20.); 

%let etls_recnt = 0;
%macro etls_recordCheck; 
   %let etls_recCheckExist = %eval(%sysfunc(exist(dwh_dds.FINANCIAL_ACCOUNT, DATA)) or 
         %sysfunc(exist(dwh_dds.FINANCIAL_ACCOUNT, VIEW))); 
   
   %if (&etls_recCheckExist) %then
   %do;
      proc sql noprint;
         select count(*) into :etls_recnt from dwh_dds.FINANCIAL_ACCOUNT;
      quit;
   %end;
%mend etls_recordCheck;
%etls_recordCheck;

%let SYSLAST = %nrquote(dwh_dds.FINANCIAL_ACCOUNT); 

%let SYS_SQL_IP_SPEEDO = Y;
%let SYS_SQL_MAPPUTTO = sas_put;
%let SYS_SQLREDUCEPUT = DBMS;
%global etls_sql_pushDown;
%let etls_sql_pushDown = -1;
option DBIDIRECTEXEC;

/*---- Map the columns  ----*/ 
proc datasets lib = work nolist nowarn memtype = (data view);
   delete W1OAQKQTH;
quit;

%put %str(NOTE: Mapping columns ...);
proc sql;
   create view work.W1OAQKQTH as
      select
         ACCOUNT_RK,
         VALID_FROM_DTTM,
         VALID_TO_DTTM,
         ACCOUNT_ID,
         SOURCE_SYSTEM_CD,
         ACCOUNT_REGISTRATION_NM,
         ALTERNATE_ACCOUNT_NM,
         FINANCIAL_ACCOUNT_TYPE_CD,
         AUTO_DEBIT_ACCOUNT_TYPE_CD,
         ACCOUNT_REGISTRATION_TYPE_CD,
         ACCOUNT_STATUS_CD,
         OPEN_DT,
         CLOSE_DT,
         CLOSE_REASON_CD,
         ACCOUNT_TAX_ID,
         EXPECTED_LOSS_PCT,
         INDIVIDUAL_ORGANIZATION_CD,
         SOURCE_CD,
         OPENING_CHANNEL_CD,
         PREFERRED_CHANNEL_CD,
         CURRENCY_CD,
         PRIMARY_PHONE_NO,
         PRIMARY_PHONE_TYPE_CD,
         SECONDARY_PHONE_NO,
         SECONDARY_PHONE_TYPE_CD,
         MAILABLE_FLG,
         TELEPHONABLE_FLG,
         EMAIL_FLG,
         SMS_FLG,
         DO_NOT_CONTACT_FLG,
         EMPLOYEE_RK,
         CURRENCY_BASED_ACCOUNT_FLG,
         FEE_BASED_FLG,
         ANNUAL_FEES_AMT,
         MONTHLY_FEES_AMT,
         CAMPAIGN_CD,
         COMMUNICATION_CD,
         REGISTERED_ONLINE_DT,
         FIRST_LOGIN_DT,
         ONLINE_BILL_PAYMENT_FLG,
         ID_VERIFICATION_TYPE_CD,
         PREVIOUS_ACCOUNT_ID,
         OPEN_BRANCH_FINANCIAL_UNIT_RK,
         PRIM_BRANCH_FINANCIAL_UNIT_RK,
         FINANCIAL_APPLICATION_RK,
         CREDIT_FACILITY_RK,
         FUTURE_MARGIN_INCOME_AMT,
         IN_DEFAULT_FLG,
         FINANCIAL_BOOK_RK,
         IRRECOVERABLE_FLG,
         OWNED_BY_INTERNAL_ORG_RK,
         PREVIOUS_BANK_EXTERNAL_ORG_RK,
         NETTING_SET_RK,
         REVOLVING_FLG,
         SOURCE_CHANNEL_CD,
         GRACE_PERIOD_DAYS_CNT,
         REMARGINING_DAYS_CNT,
         FINANCIAL_CALENDAR_RK,
         DAY_BASIS_CD,
         PORTFOLIO_ID,
         SECURITIZATION_POOL_RK,
         RECEIVABLES_POOL_RK,
         ACCOUNT_USAGE_TYPE_CD,
         RISK_ALARM_FLG,
         LOW_PROFITABILITY_FLG,
         ACCOUNT_LIFECYCLE_STG_CD,
         ATTRITION_ALARM_FLG,
         BALANCE_FROZEN_FLG,
         BALANCE_FROZEN_DT,
         ACCOUNT_BLOCK_REASON_CD,
         TAXATION_STATE_CD,
         EFFECTIVE_MATURITY_YEAR_NO,
         GL_ACCOUNT_RK,
         FROM_OTHER_INSTITUTION_FLG,
         ACCOUNT_RENEWAL_CNT,
         BALANCE_TRANSFER_DT,
         BALANCE_TRANSFER_AMT,
         BALANCE_TRANSFER_CNT,
         BASE_LONG_TERM_APR_RT,
         BROKER_FLG,
         MULT_RATE_FLG,
         AUTO_DEBIT_ACCOUNT_NO,
         WORST_STATUS_LAST_12_MTH_CD,
         WORST_STATUS_LAST_12_MTH_DT,
         BALANCE_TRNSF_OTHER_ACCT_CNT,
         EFFECTIVE_FROM_DTTM,
         EFFECTIVE_TO_DTTM,
         COUNTERPARTY_RK,
         INSURED_BY_COUNTERPARTY_RK,
         STATEMENT_FREQUENCY_CD,
         SECURITY_DEPOSIT_AMT,
         SECURITY_DEPOSIT_REFUND_AMT,
         FIRST_PAYMENT_DT,
         LAST_PAYMENT_DT,
         FIRST_RESET_DT,
         LAST_RESET_DT,
         RESETS_PER_ANNUM_NO,
         PRINCIPAL_PAYMENT_TYPE_CD,
         PRINCIPAL_PAYMENT_AMT,
         RATE_POLICY_RK,
         SPREAD_RT,
         DISCOUNT_SPREAD_RT,
         INITIAL_CONTRACT_RT,
         FIXED_MONTHLY_PREPAYMENT_RT,
         CAPITAL_ALLOCATION_RK,
         CAPITAL_COST_RK,
         SEGMENT_RK,
         NEAR_BRANCH_FINANCIAL_UNIT_RK,
         STATEMENT_OPT_FLG,
         VALUE_SCALING_FACTOR_RT,
         INTERNAL_REPORTING_CATEGORY_CD,
         CONVEXITY_ADJUSTMENT_FLG,
         ARREARS_PAYMENT_CD,
         QUANTO_FEATURE_RK,
         CASH_INTENSIVE_BUSINESS_FLG,
         LETTER_OF_CREDIT_ONFILE_FLG,
         TRADE_FINANCE_FLG,
         ANNUITY_PAYMENT_TYPE_CD,
         INTEREST_PAYMENT_TYPE_CD,
         INTEREST_PAYMENT_TIME_FREQ_CD,
         LIQUIDITY_CATEGORY_TYPE_CD,
         HOLIDAY_DATE_ROLL_CONV_CD,
         WEEKEND_DATE_ROLL_CONV_CD,
         EXPENSE_ALLOCATION_RK,
         FIRST_INTEREST_PAYMENT_DT,
         LAST_INTEREST_PAYMENT_DT,
         PROCESSED_DTTM,
         IRB_DUMMY_TYPE_CD,
         IRB_SRC_ACCOUNT_ID
   from &SYSLAST
      where FINANCIAL_ACCOUNT_TYPE_CD in ('DRV', 'DCD', 'DEP')
         AND
         VALID_FROM_DTTM <= &REPDT < VALID_TO_DTTM
   ;
quit;

%let SYSLAST = work.W1OAQKQTH;

%global etls_sql_pushDown;
%let etls_sql_pushDown = &sys_sql_ip_all;

%rcSet(&sqlrc); 



/**  Step end Extract **/

/*==========================================================================* 
 * Step:            Extract                               A5ELGGF9.AK0000YM * 
 * Transform:       Extract                                                 * 
 * Description:     DRV, DCDREPDT-1                                         * 
 *                                                                          * 
 * Source Table:    FINANCIAL_ACCOUNT -                   A569C89V.AE0000FK * 
 *                   dwh_dds.FINANCIAL_ACCOUNT                              * 
 * Target Table:    FINANCIAL_ACCOUNT - work.W1OAWZ5SU    A5ELGGF9.AF0000DN * 
 *==========================================================================*/ 

%let transformID = %quote(A5ELGGF9.AK0000YM);
%let trans_rc = 0;
%let etls_stepStartTime = %sysfunc(datetime(), datetime20.); 

%let etls_recnt = 0;
%macro etls_recordCheck; 
   %let etls_recCheckExist = %eval(%sysfunc(exist(dwh_dds.FINANCIAL_ACCOUNT, DATA)) or 
         %sysfunc(exist(dwh_dds.FINANCIAL_ACCOUNT, VIEW))); 
   
   %if (&etls_recCheckExist) %then
   %do;
      proc sql noprint;
         select count(*) into :etls_recnt from dwh_dds.FINANCIAL_ACCOUNT;
      quit;
   %end;
%mend etls_recordCheck;
%etls_recordCheck;

%let SYSLAST = %nrquote(dwh_dds.FINANCIAL_ACCOUNT); 

%let SYS_SQL_IP_SPEEDO = Y;
%let SYS_SQL_MAPPUTTO = sas_put;
%let SYS_SQLREDUCEPUT = DBMS;
%global etls_sql_pushDown;
%let etls_sql_pushDown = -1;
option DBIDIRECTEXEC;

/*---- Map the columns  ----*/ 
proc datasets lib = work nolist nowarn memtype = (data view);
   delete W1OAWZ5SU;
quit;

%put %str(NOTE: Mapping columns ...);
proc sql;
   create view work.W1OAWZ5SU as
      select
         ACCOUNT_RK,
         VALID_FROM_DTTM,
         VALID_TO_DTTM,
         ACCOUNT_ID,
         SOURCE_SYSTEM_CD,
         ACCOUNT_REGISTRATION_NM,
         ALTERNATE_ACCOUNT_NM,
         FINANCIAL_ACCOUNT_TYPE_CD,
         AUTO_DEBIT_ACCOUNT_TYPE_CD,
         ACCOUNT_REGISTRATION_TYPE_CD,
         ACCOUNT_STATUS_CD,
         OPEN_DT,
         CLOSE_DT,
         CLOSE_REASON_CD,
         ACCOUNT_TAX_ID,
         EXPECTED_LOSS_PCT,
         INDIVIDUAL_ORGANIZATION_CD,
         SOURCE_CD,
         OPENING_CHANNEL_CD,
         PREFERRED_CHANNEL_CD,
         CURRENCY_CD,
         PRIMARY_PHONE_NO,
         PRIMARY_PHONE_TYPE_CD,
         SECONDARY_PHONE_NO,
         SECONDARY_PHONE_TYPE_CD,
         MAILABLE_FLG,
         TELEPHONABLE_FLG,
         EMAIL_FLG,
         SMS_FLG,
         DO_NOT_CONTACT_FLG,
         EMPLOYEE_RK,
         CURRENCY_BASED_ACCOUNT_FLG,
         FEE_BASED_FLG,
         ANNUAL_FEES_AMT,
         MONTHLY_FEES_AMT,
         CAMPAIGN_CD,
         COMMUNICATION_CD,
         REGISTERED_ONLINE_DT,
         FIRST_LOGIN_DT,
         ONLINE_BILL_PAYMENT_FLG,
         ID_VERIFICATION_TYPE_CD,
         PREVIOUS_ACCOUNT_ID,
         OPEN_BRANCH_FINANCIAL_UNIT_RK,
         PRIM_BRANCH_FINANCIAL_UNIT_RK,
         FINANCIAL_APPLICATION_RK,
         CREDIT_FACILITY_RK,
         FUTURE_MARGIN_INCOME_AMT,
         IN_DEFAULT_FLG,
         FINANCIAL_BOOK_RK,
         IRRECOVERABLE_FLG,
         OWNED_BY_INTERNAL_ORG_RK,
         PREVIOUS_BANK_EXTERNAL_ORG_RK,
         NETTING_SET_RK,
         REVOLVING_FLG,
         SOURCE_CHANNEL_CD,
         GRACE_PERIOD_DAYS_CNT,
         REMARGINING_DAYS_CNT,
         FINANCIAL_CALENDAR_RK,
         DAY_BASIS_CD,
         PORTFOLIO_ID,
         SECURITIZATION_POOL_RK,
         RECEIVABLES_POOL_RK,
         ACCOUNT_USAGE_TYPE_CD,
         RISK_ALARM_FLG,
         LOW_PROFITABILITY_FLG,
         ACCOUNT_LIFECYCLE_STG_CD,
         ATTRITION_ALARM_FLG,
         BALANCE_FROZEN_FLG,
         BALANCE_FROZEN_DT,
         ACCOUNT_BLOCK_REASON_CD,
         TAXATION_STATE_CD,
         EFFECTIVE_MATURITY_YEAR_NO,
         GL_ACCOUNT_RK,
         FROM_OTHER_INSTITUTION_FLG,
         ACCOUNT_RENEWAL_CNT,
         BALANCE_TRANSFER_DT,
         BALANCE_TRANSFER_AMT,
         BALANCE_TRANSFER_CNT,
         BASE_LONG_TERM_APR_RT,
         BROKER_FLG,
         MULT_RATE_FLG,
         AUTO_DEBIT_ACCOUNT_NO,
         WORST_STATUS_LAST_12_MTH_CD,
         WORST_STATUS_LAST_12_MTH_DT,
         BALANCE_TRNSF_OTHER_ACCT_CNT,
         EFFECTIVE_FROM_DTTM,
         EFFECTIVE_TO_DTTM,
         COUNTERPARTY_RK,
         INSURED_BY_COUNTERPARTY_RK,
         STATEMENT_FREQUENCY_CD,
         SECURITY_DEPOSIT_AMT,
         SECURITY_DEPOSIT_REFUND_AMT,
         FIRST_PAYMENT_DT,
         LAST_PAYMENT_DT,
         FIRST_RESET_DT,
         LAST_RESET_DT,
         RESETS_PER_ANNUM_NO,
         PRINCIPAL_PAYMENT_TYPE_CD,
         PRINCIPAL_PAYMENT_AMT,
         RATE_POLICY_RK,
         SPREAD_RT,
         DISCOUNT_SPREAD_RT,
         INITIAL_CONTRACT_RT,
         FIXED_MONTHLY_PREPAYMENT_RT,
         CAPITAL_ALLOCATION_RK,
         CAPITAL_COST_RK,
         SEGMENT_RK,
         NEAR_BRANCH_FINANCIAL_UNIT_RK,
         STATEMENT_OPT_FLG,
         VALUE_SCALING_FACTOR_RT,
         INTERNAL_REPORTING_CATEGORY_CD,
         CONVEXITY_ADJUSTMENT_FLG,
         ARREARS_PAYMENT_CD,
         QUANTO_FEATURE_RK,
         CASH_INTENSIVE_BUSINESS_FLG,
         LETTER_OF_CREDIT_ONFILE_FLG,
         TRADE_FINANCE_FLG,
         ANNUITY_PAYMENT_TYPE_CD,
         INTEREST_PAYMENT_TYPE_CD,
         INTEREST_PAYMENT_TIME_FREQ_CD,
         LIQUIDITY_CATEGORY_TYPE_CD,
         HOLIDAY_DATE_ROLL_CONV_CD,
         WEEKEND_DATE_ROLL_CONV_CD,
         EXPENSE_ALLOCATION_RK,
         FIRST_INTEREST_PAYMENT_DT,
         LAST_INTEREST_PAYMENT_DT,
         PROCESSED_DTTM,
         IRB_DUMMY_TYPE_CD,
         IRB_SRC_ACCOUNT_ID
   from &SYSLAST
      where FINANCIAL_ACCOUNT_TYPE_CD in ('DRV', 'DCD', 'DEP')
         AND 
         VALID_FROM_DTTM <= &REPDT1 < VALID_TO_DTTM
   ;
quit;

%let SYSLAST = work.W1OAWZ5SU;

%global etls_sql_pushDown;
%let etls_sql_pushDown = &sys_sql_ip_all;

%rcSet(&sqlrc); 



/**  Step end Extract **/

/*==========================================================================* 
 * Step:            SQL Join                              A5ELGGF9.AK0000YN * 
 * Transform:       Join                                                    * 
 * Description:                                                             * 
 *                                                                          * 
 * Source Tables:   FINANCIAL_ACCOUNT - work.W1OAQKQTH    A5ELGGF9.AF0000DM * 
 *                  CUSTOMER_X_FINANCIAL_ACCOUNT -        A569C89V.AE0000F2 * 
 *                   dwh_dds.CUSTOMER_X_FINANCIAL_ACCOUNT                   * 
 *                  COUNTERPARTY - dwh_dds.COUNTERPARTY   A569C89V.AE0000EQ * 
 * Target Table:    SQL Join - work.W1OAYDE8W             A5ELGGF9.AF0000DO * 
 *==========================================================================*/ 

%let transformID = %quote(A5ELGGF9.AK0000YN);
%let trans_rc = 0;
%let etls_stepStartTime = %sysfunc(datetime(), datetime20.); 

%let etls_recnt = -1;
%let SYS_SQL_IP_SPEEDO = Y;
%let SYS_SQL_MAPPUTTO = sas_put;
%let SYS_SQLREDUCEPUT = DBMS;
%global etls_sql_pushDown;
%let etls_sql_pushDown = -1;
option DBIDIRECTEXEC;

proc datasets lib = work nolist nowarn memtype = (data view);
   delete W1OAYDE8W;
quit;

proc sql;
   create view work.W1OAYDE8W as
   select
      W1OAQKQTH.ACCOUNT_RK length = 8   
         format = 11.
         informat = 11.
         label = 'ACCOUNT_RK',
      W1OAQKQTH.ACCOUNT_REGISTRATION_NM length = 100   
         format = $100.
         informat = $100.
         label = 'ACCOUNT_REGISTRATION_NM',
      W1OAQKQTH.ALTERNATE_ACCOUNT_NM length = 40   
         format = $40.
         informat = $40.
         label = 'ALTERNATE_ACCOUNT_NM',
      W1OAQKQTH.FINANCIAL_ACCOUNT_TYPE_CD length = 3   
         format = $3.
         informat = $3.
         label = 'FINANCIAL_ACCOUNT_TYPE_CD',
      W1OAQKQTH.OPEN_DT length = 8   
         format = DATETIME20.
         informat = DATETIME20.
         label = 'OPEN_DT',
      CUSTOMER_X_FINANCIAL_ACCOUNT.CUSTOMER_RK length = 8   
         format = 11.
         informat = 11.
         label = 'CUSTOMER_RK',
      CUSTOMER_X_FINANCIAL_ACCOUNT.RELATIONSHIP_TO_ACCOUNT_CD length = 3   
         format = $3.
         informat = $3.
         label = 'RELATIONSHIP_TO_ACCOUNT_CD',
      COUNTERPARTY.IRB_SRC_ID length = 20   
         format = $20.
         informat = $20.
         label = 'IRB_SRC_ID'
   from
      work.W1OAQKQTH left join 
      dwh_dds.CUSTOMER_X_FINANCIAL_ACCOUNT
         on
         (
            W1OAQKQTH.ACCOUNT_RK = CUSTOMER_X_FINANCIAL_ACCOUNT.ACCOUNT_RK
            and CUSTOMER_X_FINANCIAL_ACCOUNT.VALID_FROM_DTTM <= &REPDT < CUSTOMER_X_FINANCIAL_ACCOUNT.VALID_TO_DTTM
            and CUSTOMER_X_FINANCIAL_ACCOUNT.RELATIONSHIP_TO_ACCOUNT_CD = 'DDC'
         ) left join 
      dwh_dds.COUNTERPARTY
         on
         (
            CUSTOMER_X_FINANCIAL_ACCOUNT.CUSTOMER_RK = COUNTERPARTY.COUNTERPARTY_RK
            and COUNTERPARTY.VALID_TO_DTTM = &ETL_SCD_FUTURE_DTTM
         )
   ;
quit;

%global etls_sql_pushDown;
%let etls_sql_pushDown = &sys_sql_ip_all;

%rcSet(&sqlrc); 



/**  Step end SQL Join **/

/*==========================================================================* 
 * Step:            SQL Join                              A5ELGGF9.AK0000YO * 
 * Transform:       Join                                                    * 
 * Description:                                                             * 
 *                                                                          * 
 * Source Tables:   FINANCIAL_ACCOUNT - work.W1OAWZ5SU    A5ELGGF9.AF0000DN * 
 *                  CUSTOMER_X_FINANCIAL_ACCOUNT -        A569C89V.AE0000F2 * 
 *                   dwh_dds.CUSTOMER_X_FINANCIAL_ACCOUNT                   * 
 *                  COUNTERPARTY - dwh_dds.COUNTERPARTY   A569C89V.AE0000EQ * 
 * Target Table:    SQL Join1 - work.W1OAYE2YO            A5ELGGF9.AF0000DP * 
 *==========================================================================*/ 

%let transformID = %quote(A5ELGGF9.AK0000YO);
%let trans_rc = 0;
%let etls_stepStartTime = %sysfunc(datetime(), datetime20.); 

%let etls_recnt = -1;
%let SYS_SQL_IP_SPEEDO = Y;
%let SYS_SQL_MAPPUTTO = sas_put;
%let SYS_SQLREDUCEPUT = DBMS;
%global etls_sql_pushDown;
%let etls_sql_pushDown = -1;
option DBIDIRECTEXEC;

proc datasets lib = work nolist nowarn memtype = (data view);
   delete W1OAYE2YO;
quit;

proc sql;
   create view work.W1OAYE2YO as
   select
      W1OAWZ5SU.ACCOUNT_RK length = 8   
         format = 11.
         informat = 11.
         label = 'ACCOUNT_RK',
      W1OAWZ5SU.ACCOUNT_REGISTRATION_NM length = 100   
         format = $100.
         informat = $100.
         label = 'ACCOUNT_REGISTRATION_NM',
      W1OAWZ5SU.ALTERNATE_ACCOUNT_NM length = 40   
         format = $40.
         informat = $40.
         label = 'ALTERNATE_ACCOUNT_NM',
      W1OAWZ5SU.FINANCIAL_ACCOUNT_TYPE_CD length = 3   
         format = $3.
         informat = $3.
         label = 'FINANCIAL_ACCOUNT_TYPE_CD',
      W1OAWZ5SU.OPEN_DT length = 8   
         format = DATETIME20.
         informat = DATETIME20.
         label = 'OPEN_DT',
      CUSTOMER_X_FINANCIAL_ACCOUNT.CUSTOMER_RK length = 8   
         format = 11.
         informat = 11.
         label = 'CUSTOMER_RK',
      CUSTOMER_X_FINANCIAL_ACCOUNT.RELATIONSHIP_TO_ACCOUNT_CD length = 3   
         format = $3.
         informat = $3.
         label = 'RELATIONSHIP_TO_ACCOUNT_CD',
      COUNTERPARTY.IRB_SRC_ID as IRB_SRC_ID1 length = 20   
         format = $20.
         informat = $20.
         label = 'IRB_SRC_ID',
      W1OAWZ5SU.IRB_DUMMY_TYPE_CD length = 3   
         format = $3.
         informat = $3.
         label = 'IRB_DUMMY_TYPE_CD'
   from
      work.W1OAWZ5SU left join 
      dwh_dds.CUSTOMER_X_FINANCIAL_ACCOUNT
         on
         (
            W1OAWZ5SU.ACCOUNT_RK = CUSTOMER_X_FINANCIAL_ACCOUNT.ACCOUNT_RK
            and CUSTOMER_X_FINANCIAL_ACCOUNT.VALID_FROM_DTTM <= &REPDT1 < CUSTOMER_X_FINANCIAL_ACCOUNT.VALID_TO_DTTM
            and CUSTOMER_X_FINANCIAL_ACCOUNT.RELATIONSHIP_TO_ACCOUNT_CD = 'DDC'
         ) left join 
      dwh_dds.COUNTERPARTY
         on
         (
            CUSTOMER_X_FINANCIAL_ACCOUNT.CUSTOMER_RK = COUNTERPARTY.COUNTERPARTY_RK
            and COUNTERPARTY.VALID_TO_DTTM = &ETL_SCD_FUTURE_DTTM
         )
   ;
quit;

%global etls_sql_pushDown;
%let etls_sql_pushDown = &sys_sql_ip_all;

%rcSet(&sqlrc); 



/**  Step end SQL Join **/

/*==========================================================================* 
 * Step:            SQL Join                              A5ELGGF9.AK0000YP * 
 * Transform:       Join                                                    * 
 * Description:     jrnlREPDT2                                              * 
 *                                                                          * 
 * Source Tables:   FINANCIAL_ACCOUNT - work.W1OAQKQTH    A5ELGGF9.AF0000DM * 
 *                  IRB_CUST_X_FIN_ACCOUNT_JRNL -         A569C89V.AE0000HM * 
 *                   dwh_dds.IRB_CUST_X_FIN_ACCOUNT_JRNL                    * 
 *                  COUNTERPARTY - dwh_dds.COUNTERPARTY   A569C89V.AE0000EQ * 
 * Target Table:    SQL Join2 - work.W1WUHJ4              A5ELGGF9.AF0000DQ * 
 *==========================================================================*/ 

%let transformID = %quote(A5ELGGF9.AK0000YP);
%let trans_rc = 0;
%let etls_stepStartTime = %sysfunc(datetime(), datetime20.); 

%let etls_recnt = -1;
%let SYS_SQL_IP_SPEEDO = Y;
%let SYS_SQL_MAPPUTTO = sas_put;
%let SYS_SQLREDUCEPUT = DBMS;
%global etls_sql_pushDown;
%let etls_sql_pushDown = -1;
option DBIDIRECTEXEC;

proc datasets lib = work nolist nowarn memtype = (data view);
   delete W1WUHJ4;
quit;

proc sql;
   create view work.W1WUHJ4 as
   select
      W1OAQKQTH.ACCOUNT_RK length = 8   
         format = 11.
         informat = 11.
         label = 'ACCOUNT_RK',
      W1OAQKQTH.ACCOUNT_REGISTRATION_NM length = 100   
         format = $100.
         informat = $100.
         label = 'ACCOUNT_REGISTRATION_NM',
      W1OAQKQTH.ALTERNATE_ACCOUNT_NM length = 40   
         format = $40.
         informat = $40.
         label = 'ALTERNATE_ACCOUNT_NM',
      W1OAQKQTH.FINANCIAL_ACCOUNT_TYPE_CD length = 3   
         format = $3.
         informat = $3.
         label = 'FINANCIAL_ACCOUNT_TYPE_CD',
      IRB_CUST_X_FIN_ACCOUNT_JRNL.CUSTOMER_RK length = 8   
         format = 11.
         informat = 11.
         label = 'CUSTOMER_RK',
      IRB_CUST_X_FIN_ACCOUNT_JRNL.RELATIONSHIP_TO_ACCOUNT_CD length = 3   
         format = $3.
         informat = $3.
         label = 'RELATIONSHIP_TO_ACCOUNT_CD',
      COUNTERPARTY.IRB_SRC_ID as IRB_SRC_ID1 length = 20   
         format = $20.
         informat = $20.
         label = 'IRB_SRC_ID'
   from
      work.W1OAQKQTH left join 
      dwh_dds.IRB_CUST_X_FIN_ACCOUNT_JRNL
         on
         (
            W1OAQKQTH.ACCOUNT_RK = IRB_CUST_X_FIN_ACCOUNT_JRNL.ACCOUNT_RK
            and datepart(IRB_CUST_X_FIN_ACCOUNT_JRNL.JRNL_TO_DTTM) = datepart(&REPDT2)
            and IRB_CUST_X_FIN_ACCOUNT_JRNL.VALID_FROM_DTTM <= &REPDT1 < IRB_CUST_X_FIN_ACCOUNT_JRNL.VALID_TO_DTTM
            and IRB_CUST_X_FIN_ACCOUNT_JRNL.RELATIONSHIP_TO_ACCOUNT_CD = 'DDC'
         ) left join 
      dwh_dds.COUNTERPARTY
         on
         (
            IRB_CUST_X_FIN_ACCOUNT_JRNL.CUSTOMER_RK = COUNTERPARTY.COUNTERPARTY_RK
            and COUNTERPARTY.VALID_TO_DTTM = &ETL_SCD_FUTURE_DTTM
         )
   ;
quit;

%global etls_sql_pushDown;
%let etls_sql_pushDown = &sys_sql_ip_all;

%rcSet(&sqlrc); 



/**  Step end SQL Join **/

/*==========================================================================* 
 * Step:            SQL Join                              A5ELGGF9.AK0000YQ * 
 * Transform:       Join                                                    * 
 * Description:     1. Проверка условий DQ.                                 * 
 *                                                                          * 
 * Source Tables:   SQL Join - work.W1OAYDE8W             A5ELGGF9.AF0000DO * 
 *                  SQL Join1 - work.W1OAYE2YO            A5ELGGF9.AF0000DP * 
 * Target Table:    SQL Join - work.W1OB1P9OL             A5ELGGF9.AF0000DR * 
 *==========================================================================*/ 

%let transformID = %quote(A5ELGGF9.AK0000YQ);
%let trans_rc = 0;
%let etls_stepStartTime = %sysfunc(datetime(), datetime20.); 

%let etls_recnt = -1;
%let SYS_SQL_IP_SPEEDO = Y;
%let SYS_SQL_MAPPUTTO = sas_put;
%let SYS_SQLREDUCEPUT = DBMS;
%global etls_sql_pushDown;
%let etls_sql_pushDown = -1;
option DBIDIRECTEXEC;

proc datasets lib = work nolist nowarn memtype = (data view);
   delete W1OB1P9OL;
quit;

proc sql;
   create table work.W1OB1P9OL as
   select
      W1OAYDE8W.ACCOUNT_RK length = 8   
         format = 11.
         informat = 11.
         label = 'ACCOUNT_RK',
      W1OAYDE8W.ACCOUNT_REGISTRATION_NM length = 100   
         format = $100.
         informat = $100.
         label = 'ACCOUNT_REGISTRATION_NM',
      W1OAYDE8W.ALTERNATE_ACCOUNT_NM length = 40   
         format = $40.
         informat = $40.
         label = 'ALTERNATE_ACCOUNT_NM',
      W1OAYDE8W.FINANCIAL_ACCOUNT_TYPE_CD length = 3   
         format = $3.
         informat = $3.
         label = 'FINANCIAL_ACCOUNT_TYPE_CD',
      W1OAYDE8W.OPEN_DT length = 8   
         format = DATETIME20.
         informat = DATETIME20.
         label = 'OPEN_DT',
      W1OAYDE8W.RELATIONSHIP_TO_ACCOUNT_CD length = 3   
         format = $3.
         informat = $3.
         label = 'RELATIONSHIP_TO_ACCOUNT_CD',
      W1OAYDE8W.IRB_SRC_ID length = 20   
         format = $20.
         informat = $20.
         label = 'IRB_SRC_ID',
      W1OAYE2YO.IRB_SRC_ID1 length = 20   
         format = $20.
         informat = $20.
         label = 'IRB_SRC_ID'
   from
      work.W1OAYDE8W inner join 
      work.W1OAYE2YO
         on
         (
            W1OAYDE8W.ACCOUNT_RK = W1OAYE2YO.ACCOUNT_RK
         )
   where
      W1OAYDE8W.CUSTOMER_RK <> W1OAYE2YO.CUSTOMER_RK
      and W1OAYE2YO.IRB_DUMMY_TYPE_CD IS MISSING 
   ;
quit;

%global etls_sql_pushDown;
%let etls_sql_pushDown = &sys_sql_ip_all;

%rcSet(&sqlrc); 



/**  Step end SQL Join **/

/*==========================================================================* 
 * Step:            SQL Join                              A5ELGGF9.AK0000YR * 
 * Transform:       Join                                                    * 
 * Description:     1. Доп.проверка условий DQ.                             * 
 *                                                                          * 
 * Source Tables:   SQL Join - work.W1OAYDE8W             A5ELGGF9.AF0000DO * 
 *                  SQL Join2 - work.W1WUHJ4              A5ELGGF9.AF0000DQ * 
 * Target Table:    SQL Join - work.W2BNTBC               A5ELGGF9.AF0000DS * 
 *==========================================================================*/ 

%let transformID = %quote(A5ELGGF9.AK0000YR);
%let trans_rc = 0;
%let etls_stepStartTime = %sysfunc(datetime(), datetime20.); 

%let etls_recnt = -1;
%let SYS_SQL_IP_SPEEDO = Y;
%let SYS_SQL_MAPPUTTO = sas_put;
%let SYS_SQLREDUCEPUT = DBMS;
%global etls_sql_pushDown;
%let etls_sql_pushDown = -1;
option DBIDIRECTEXEC;

proc datasets lib = work nolist nowarn memtype = (data view);
   delete W2BNTBC;
quit;

proc sql;
   create view work.W2BNTBC as
   select
      W1OAYDE8W.ACCOUNT_RK length = 8   
         format = 11.
         informat = 11.
         label = 'ACCOUNT_RK',
      W1OAYDE8W.ACCOUNT_REGISTRATION_NM length = 100   
         format = $100.
         informat = $100.
         label = 'ACCOUNT_REGISTRATION_NM',
      W1OAYDE8W.ALTERNATE_ACCOUNT_NM length = 40   
         format = $40.
         informat = $40.
         label = 'ALTERNATE_ACCOUNT_NM',
      W1OAYDE8W.FINANCIAL_ACCOUNT_TYPE_CD length = 3   
         format = $3.
         informat = $3.
         label = 'FINANCIAL_ACCOUNT_TYPE_CD',
      W1OAYDE8W.OPEN_DT length = 8   
         format = DATETIME20.
         informat = DATETIME20.
         label = 'OPEN_DT',
      W1OAYDE8W.RELATIONSHIP_TO_ACCOUNT_CD length = 3   
         format = $3.
         informat = $3.
         label = 'RELATIONSHIP_TO_ACCOUNT_CD',
      W1OAYDE8W.IRB_SRC_ID length = 20   
         format = $20.
         informat = $20.
         label = 'IRB_SRC_ID',
      W1WUHJ4.IRB_SRC_ID1 length = 20   
         format = $20.
         informat = $20.
         label = 'IRB_SRC_ID'
   from
      work.W1OAYDE8W inner join 
      work.W1WUHJ4
         on
         (
            W1OAYDE8W.ACCOUNT_RK = W1WUHJ4.ACCOUNT_RK
         )
   where
      W1OAYDE8W.CUSTOMER_RK <> W1WUHJ4.CUSTOMER_RK
      and W1WUHJ4.CUSTOMER_RK NOT IS MISSING 
   ;
quit;

%global etls_sql_pushDown;
%let etls_sql_pushDown = &sys_sql_ip_all;

%rcSet(&sqlrc); 



/**  Step end SQL Join **/

/*==========================================================================* 
 * Step:            Append                                A5ELGGF9.AK0000YS * 
 * Transform:       Append                                                  * 
 * Description:                                                             * 
 *                                                                          * 
 * Source Tables:   SQL Join - work.W1OB1P9OL             A5ELGGF9.AF0000DR * 
 *                  SQL Join - work.W2BNTBC               A5ELGGF9.AF0000DS * 
 * Target Table:    Append - work.W2EQOE2                 A5ELGGF9.AF0000DT * 
 *==========================================================================*/ 

%let transformID = %quote(A5ELGGF9.AK0000YS);
%let trans_rc = 0;
%let etls_stepStartTime = %sysfunc(datetime(), datetime20.); 

%let etls_recCheckExist = 0; 
%let etls_recnt = 0; 
%macro etls_recordCheck; 
   %let etls_recCheckExist = %eval(%sysfunc(exist(work.W1OB1P9OL, DATA)) or 
         %sysfunc(exist(work.W1OB1P9OL, VIEW))); 
   
   %if (&etls_recCheckExist) %then
   %do;
      %local etls_syntaxcheck; 
      %let etls_syntaxcheck = %sysfunc(getoption(syntaxcheck)); 
      /* Turn off syntaxcheck option to perform following steps  */ 
      options nosyntaxcheck;
      
      proc contents data = work.W1OB1P9OL out = work.etls_contents(keep = nobs) noprint; 
      run; 
      
      data _null_; 
         set work.etls_contents (obs = 1); 
         call symput("etls_recnt", left(put(nobs,32.))); 
      run;
      
      proc datasets lib = work nolist nowarn memtype = (data view);
         delete etls_contents;
      quit;
      
      /* Reset syntaxcheck option to previous setting  */ 
      options &etls_syntaxcheck; 
   %end;
%mend etls_recordCheck;
%etls_recordCheck;

%let dbxrc = %eval(%sysfunc(exist(work.W1OB1P9OL, DATA)) or 
      %sysfunc(exist(work.W1OB1P9OL, VIEW))); 

%let dbxrc = %eval(%sysfunc(exist(work.W2BNTBC, DATA)) or 
      %sysfunc(exist(work.W2BNTBC, VIEW))); 

proc datasets lib = work nolist nowarn memtype = (data view);
   delete W2EQOE2;
quit;

data work.W2EQOE2 / view=work.W2EQOE2;
   set work.W1OB1P9OL
       work.W2BNTBC;
   keep ACCOUNT_RK ACCOUNT_REGISTRATION_NM ALTERNATE_ACCOUNT_NM 
    FINANCIAL_ACCOUNT_TYPE_CD OPEN_DT RELATIONSHIP_TO_ACCOUNT_CD IRB_SRC_ID 
    IRB_SRC_ID1; 
run;

%rcSet(&syserr); 



/**  Step end Append **/

/*==========================================================================* 
 * Step:            SQL Join                              A5ELGGF9.AK0000YT * 
 * Transform:       Join                                                    * 
 * Description:     DCDREPDT                                                * 
 *                                                                          * 
 * Source Tables:   FINANCIAL_ACCOUNT - work.W1OAQKQTH    A5ELGGF9.AF0000DM * 
 *                  FINANCIAL_ACCOUNT_ASSOC -             A569C89V.AE0000FL * 
 *                   dwh_dds.FINANCIAL_ACCOUNT_ASSOC                        * 
 *                  CORE_BANKING_ACCOUNT -                A569C89V.AE0000EN * 
 *                   dwh_dds.CORE_BANKING_ACCOUNT                           * 
 *                  IRB_FIN_INSTR_TYPE -                  A569C89V.AE0000I3 * 
 *                   dwh_dds.IRB_FIN_INSTR_TYPE                             * 
 * Target Table:    SQL Join - work.W1OBBYRRU             A5ELGGF9.AF0000DU * 
 *==========================================================================*/ 

%let transformID = %quote(A5ELGGF9.AK0000YT);
%let trans_rc = 0;
%let etls_stepStartTime = %sysfunc(datetime(), datetime20.); 

%let etls_recnt = -1;
%let SYS_SQL_IP_SPEEDO = Y;
%let SYS_SQL_MAPPUTTO = sas_put;
%let SYS_SQLREDUCEPUT = DBMS;
%global etls_sql_pushDown;
%let etls_sql_pushDown = -1;
option DBIDIRECTEXEC;

proc datasets lib = work nolist nowarn memtype = (data view);
   delete W1OBBYRRU;
quit;

proc sql;
   create table work.W1OBBYRRU as
   select
      W1OAQKQTH.ACCOUNT_RK length = 8   
         format = 11.
         informat = 11.
         label = 'ACCOUNT_RK',
      W1OAQKQTH.ACCOUNT_REGISTRATION_NM length = 100   
         format = $100.
         informat = $100.
         label = 'ACCOUNT_REGISTRATION_NM',
      W1OAQKQTH.ALTERNATE_ACCOUNT_NM length = 40   
         format = $40.
         informat = $40.
         label = 'ALTERNATE_ACCOUNT_NM',
      W1OAQKQTH.FINANCIAL_ACCOUNT_TYPE_CD length = 3   
         format = $3.
         informat = $3.
         label = 'FINANCIAL_ACCOUNT_TYPE_CD',
      W1OAQKQTH.OPEN_DT length = 8   
         format = DATETIME20.
         informat = DATETIME20.
         label = 'OPEN_DT',
      FINANCIAL_ACCOUNT_ASSOC.REFERENCE_FINANCIAL_ACCOUNT_RK length = 8   
         format = 11.
         informat = 11.
         label = 'REFERENCE_FINANCIAL_ACCOUNT_RK',
      FINANCIAL_ACCOUNT_ASSOC.FINANCIAL_ACCT_ASSOC_TYPE_CD length = 3   
         format = $3.
         informat = $3.
         label = 'FINANCIAL_ACCT_ASSOC_TYPE_CD',
      W1OAQKQTH_REF.ACCOUNT_RK as ACCOUNT_RK1 length = 8   
         format = 11.
         informat = 11.
         label = 'ACCOUNT_RK',
      W1OAQKQTH_REF.FINANCIAL_ACCOUNT_TYPE_CD as FINANCIAL_ACCOUNT_TYPE_CD1 length = 3   
         format = $3.
         informat = $3.
         label = 'FINANCIAL_ACCOUNT_TYPE_CD',
      CORE_BANKING_ACCOUNT.IRB_HEDGE_INDICATOR length = 10   
         format = $10.
         informat = $10.
         label = 'IRB_HEDGE_INDICATOR',
      W1OAQKQTH_REF.IRB_SRC_ACCOUNT_ID length = 32   
         format = $32.
         informat = $32.
         label = 'IRB_SRC_ACCOUNT_ID',
      CORE_BANKING_ACCOUNT.MATURITY_DT length = 8   
         format = DATETIME20.
         informat = DATETIME20.
         label = 'MATURITY_DT',
      W1OAQKQTH_REF.INTEREST_PAYMENT_TYPE_CD length = 3   
         format = $3.
         informat = $3.
         label = 'INTEREST_PAYMENT_TYPE_CD',
      IRB_FIN_INSTR_TYPE.IRB_TYPE length = 2   
         format = $2.
         informat = $2.
         label = 'IRB_TYPE',
      W1OAQKQTH_REF.ACCOUNT_ID length = 32   
         format = $32.
         informat = $32.
         label = 'ACCOUNT_ID'
   from
      work.W1OAQKQTH left join 
      dwh_dds.FINANCIAL_ACCOUNT_ASSOC
         on
         (
            W1OAQKQTH.ACCOUNT_RK = FINANCIAL_ACCOUNT_ASSOC.ACCOUNT_RK
            and FINANCIAL_ACCOUNT_ASSOC.VALID_FROM_DTTM <= &REPDT < FINANCIAL_ACCOUNT_ASSOC.VALID_TO_DTTM
            and FINANCIAL_ACCOUNT_ASSOC.FINANCIAL_ACCT_ASSOC_TYPE_CD = 'DCD'
         ) left join 
      work.W1OAQKQTH as W1OAQKQTH_REF
         on
         (
            FINANCIAL_ACCOUNT_ASSOC.REFERENCE_FINANCIAL_ACCOUNT_RK = W1OAQKQTH_REF.ACCOUNT_RK
            and W1OAQKQTH_REF.FINANCIAL_ACCOUNT_TYPE_CD = 'DEP'
         ) left join 
      dwh_dds.CORE_BANKING_ACCOUNT
         on
         (
            W1OAQKQTH_REF.ACCOUNT_RK = CORE_BANKING_ACCOUNT.ACCOUNT_RK
            and CORE_BANKING_ACCOUNT.VALID_FROM_DTTM <= &REPDT < CORE_BANKING_ACCOUNT.VALID_TO_DTTM
         ) left join 
      dwh_dds.IRB_FIN_INSTR_TYPE
         on
         (
            CORE_BANKING_ACCOUNT.IRB_FIN_INSTR_TYPE_RK = IRB_FIN_INSTR_TYPE.IRB_FIN_INSTR_TYPE_RK
            and IRB_FIN_INSTR_TYPE.VALID_TO_DTTM = &ETL_SCD_FUTURE_DTTM
         )
   where
      W1OAQKQTH.FINANCIAL_ACCOUNT_TYPE_CD = 'DCD'
   ;
quit;

%global etls_sql_pushDown;
%let etls_sql_pushDown = &sys_sql_ip_all;

%rcSet(&sqlrc); 



/**  Step end SQL Join **/

/*==========================================================================* 
 * Step:            SQL Join                              A5ELGGF9.AK0000YU * 
 * Transform:       Join                                                    * 
 * Description:     DCDREPDT1                                               * 
 *                                                                          * 
 * Source Tables:   FINANCIAL_ACCOUNT - work.W1OAWZ5SU    A5ELGGF9.AF0000DN * 
 *                  FINANCIAL_ACCOUNT_ASSOC -             A569C89V.AE0000FL * 
 *                   dwh_dds.FINANCIAL_ACCOUNT_ASSOC                        * 
 *                  CORE_BANKING_ACCOUNT -                A569C89V.AE0000EN * 
 *                   dwh_dds.CORE_BANKING_ACCOUNT                           * 
 *                  IRB_FIN_INSTR_TYPE -                  A569C89V.AE0000I3 * 
 *                   dwh_dds.IRB_FIN_INSTR_TYPE                             * 
 * Target Table:    SQL Join1 - work.W1OBC7H8H            A5ELGGF9.AF0000DV * 
 *==========================================================================*/ 

%let transformID = %quote(A5ELGGF9.AK0000YU);
%let trans_rc = 0;
%let etls_stepStartTime = %sysfunc(datetime(), datetime20.); 

%let etls_recnt = -1;
%let SYS_SQL_IP_SPEEDO = Y;
%let SYS_SQL_MAPPUTTO = sas_put;
%let SYS_SQLREDUCEPUT = DBMS;
%global etls_sql_pushDown;
%let etls_sql_pushDown = -1;
option DBIDIRECTEXEC;

proc datasets lib = work nolist nowarn memtype = (data view);
   delete W1OBC7H8H;
quit;

proc sql;
   create table work.W1OBC7H8H as
   select
      W1OAWZ5SU.ACCOUNT_RK length = 8   
         format = 11.
         informat = 11.
         label = 'ACCOUNT_RK',
      W1OAWZ5SU.ACCOUNT_REGISTRATION_NM length = 100   
         format = $100.
         informat = $100.
         label = 'ACCOUNT_REGISTRATION_NM',
      W1OAWZ5SU.ALTERNATE_ACCOUNT_NM length = 40   
         format = $40.
         informat = $40.
         label = 'ALTERNATE_ACCOUNT_NM',
      W1OAWZ5SU.OPEN_DT as OPEN_DT1 length = 8   
         format = DATETIME20.
         informat = DATETIME20.
         label = 'OPEN_DT',
      W1OAWZ5SU.FINANCIAL_ACCOUNT_TYPE_CD length = 3   
         format = $3.
         informat = $3.
         label = 'FINANCIAL_ACCOUNT_TYPE_CD',
      FINANCIAL_ACCOUNT_ASSOC.REFERENCE_FINANCIAL_ACCOUNT_RK length = 8   
         format = 11.
         informat = 11.
         label = 'REFERENCE_FINANCIAL_ACCOUNT_RK',
      FINANCIAL_ACCOUNT_ASSOC.FINANCIAL_ACCT_ASSOC_TYPE_CD length = 3   
         format = $3.
         informat = $3.
         label = 'FINANCIAL_ACCT_ASSOC_TYPE_CD',
      W1OAWZ5SU_REF.ACCOUNT_RK as ACCOUNT_RK1 length = 8   
         format = 11.
         informat = 11.
         label = 'ACCOUNT_RK',
      W1OAWZ5SU_REF.FINANCIAL_ACCOUNT_TYPE_CD as FINANCIAL_ACCOUNT_TYPE_CD1 length = 3   
         format = $3.
         informat = $3.
         label = 'FINANCIAL_ACCOUNT_TYPE_CD',
      CORE_BANKING_ACCOUNT.IRB_HEDGE_INDICATOR as IRB_HEDGE_INDICATOR1 length = 10   
         format = $10.
         informat = $10.
         label = 'IRB_HEDGE_INDICATOR',
      CORE_BANKING_ACCOUNT.MATURITY_DT as MATURITY_DT1 length = 8   
         format = DATETIME20.
         informat = DATETIME20.
         label = 'MATURITY_DT',
      W1OAWZ5SU_REF.INTEREST_PAYMENT_TYPE_CD as INTEREST_PAYMENT_TYPE_CD1 length = 3   
         format = $3.
         informat = $3.
         label = 'INTEREST_PAYMENT_TYPE_CD',
      IRB_FIN_INSTR_TYPE.IRB_TYPE as IRB_TYPE1 length = 2   
         format = $2.
         informat = $2.
         label = 'IRB_TYPE',
      W1OAWZ5SU.IRB_DUMMY_TYPE_CD length = 3   
         format = $3.
         informat = $3.
         label = 'IRB_DUMMY_TYPE_CD'
   from
      work.W1OAWZ5SU left join 
      dwh_dds.FINANCIAL_ACCOUNT_ASSOC
         on
         (
            W1OAWZ5SU.ACCOUNT_RK = FINANCIAL_ACCOUNT_ASSOC.ACCOUNT_RK
            and FINANCIAL_ACCOUNT_ASSOC.VALID_FROM_DTTM <= &REPDT1 < FINANCIAL_ACCOUNT_ASSOC.VALID_TO_DTTM
            and FINANCIAL_ACCOUNT_ASSOC.FINANCIAL_ACCT_ASSOC_TYPE_CD = 'DCD'
         ) left join 
      work.W1OAWZ5SU as W1OAWZ5SU_REF
         on
         (
            FINANCIAL_ACCOUNT_ASSOC.REFERENCE_FINANCIAL_ACCOUNT_RK = W1OAWZ5SU_REF.ACCOUNT_RK
            and W1OAWZ5SU_REF.FINANCIAL_ACCOUNT_TYPE_CD = 'DEP'
         ) left join 
      dwh_dds.CORE_BANKING_ACCOUNT
         on
         (
            W1OAWZ5SU_REF.ACCOUNT_RK = CORE_BANKING_ACCOUNT.ACCOUNT_RK
            and CORE_BANKING_ACCOUNT.VALID_FROM_DTTM <= &REPDT1 < CORE_BANKING_ACCOUNT.VALID_TO_DTTM
         ) left join 
      dwh_dds.IRB_FIN_INSTR_TYPE
         on
         (
            CORE_BANKING_ACCOUNT.IRB_FIN_INSTR_TYPE_RK = IRB_FIN_INSTR_TYPE.IRB_FIN_INSTR_TYPE_RK
            and IRB_FIN_INSTR_TYPE.VALID_TO_DTTM = &ETL_SCD_FUTURE_DTTM
         )
   where
      W1OAWZ5SU.FINANCIAL_ACCOUNT_TYPE_CD = 'DCD'
   ;
quit;

%global etls_sql_pushDown;
%let etls_sql_pushDown = &sys_sql_ip_all;

%rcSet(&sqlrc); 



/**  Step end SQL Join **/

/*==========================================================================* 
 * Step:            SQL Join                              A5ELGGF9.AK0000YV * 
 * Transform:       Join                                                    * 
 * Description:     DCD CBA-jrnlREPDT2                                      * 
 *                                                                          * 
 * Source Tables:   FINANCIAL_ACCOUNT_ASSOC -             A569C89V.AE0000FL * 
 *                   dwh_dds.FINANCIAL_ACCOUNT_ASSOC                        * 
 *                  IRB_CORE_BANKING_ACCOUNT_JRNL -       A569C89V.AE0000H4 * 
 *                  dwh_dds.IRB_CORE_BANKING_ACCOUNT_JR                     * 
 *                  NL                                                      * 
 *                  IRB_FIN_INSTR_TYPE -                  A569C89V.AE0000I3 * 
 *                   dwh_dds.IRB_FIN_INSTR_TYPE                             * 
 *                  FINANCIAL_ACCOUNT - work.W1OAWZ5SU    A5ELGGF9.AF0000DN * 
 * Target Table:    SQL Join2 - work.W2WWN4H              A5ELGGF9.AF0000DW * 
 *==========================================================================*/ 

%let transformID = %quote(A5ELGGF9.AK0000YV);
%let trans_rc = 0;
%let etls_stepStartTime = %sysfunc(datetime(), datetime20.); 

%let etls_recnt = 0;
%macro etls_recordCheck; 
   %let etls_recCheckExist = %eval(%sysfunc(exist(dwh_dds.FINANCIAL_ACCOUNT_ASSOC, DATA)) or 
         %sysfunc(exist(dwh_dds.FINANCIAL_ACCOUNT_ASSOC, VIEW))); 
   
   %if (&etls_recCheckExist) %then
   %do;
      proc sql noprint;
         select count(*) into :etls_recnt from dwh_dds.FINANCIAL_ACCOUNT_ASSOC;
      quit;
   %end;
%mend etls_recordCheck;
%etls_recordCheck;

%let SYS_SQL_IP_SPEEDO = Y;
%let SYS_SQL_MAPPUTTO = sas_put;
%let SYS_SQLREDUCEPUT = DBMS;
%global etls_sql_pushDown;
%let etls_sql_pushDown = -1;
option DBIDIRECTEXEC;

proc datasets lib = work nolist nowarn memtype = (data view);
   delete W2WWN4H;
quit;

proc sql;
   create view work.W2WWN4H as
   select
      W1OAWZ5SU_DCD.ACCOUNT_RK length = 8   
         format = 11.
         informat = 11.
         label = 'ACCOUNT_RK',
      W1OAWZ5SU_DCD.ACCOUNT_REGISTRATION_NM length = 100   
         format = $100.
         informat = $100.
         label = 'ACCOUNT_REGISTRATION_NM',
      W1OAWZ5SU_DCD.ALTERNATE_ACCOUNT_NM length = 40   
         format = $40.
         informat = $40.
         label = 'ALTERNATE_ACCOUNT_NM',
      W1OAWZ5SU_DCD.FINANCIAL_ACCOUNT_TYPE_CD length = 3   
         format = $3.
         informat = $3.
         label = 'FINANCIAL_ACCOUNT_TYPE_CD',
      W1OAWZ5SU_DCD.OPEN_DT length = 8   
         format = DATETIME20.
         informat = DATETIME20.
         label = 'OPEN_DT',
      FINANCIAL_ACCOUNT_ASSOC.REFERENCE_FINANCIAL_ACCOUNT_RK length = 8   
         format = 11.
         informat = 11.
         label = 'REFERENCE_FINANCIAL_ACCOUNT_RK',
      FINANCIAL_ACCOUNT_ASSOC.FINANCIAL_ACCT_ASSOC_TYPE_CD length = 3   
         format = $3.
         informat = $3.
         label = 'FINANCIAL_ACCT_ASSOC_TYPE_CD',
      W1OAWZ5SU.ACCOUNT_RK as ACCOUNT_RK1 length = 8   
         format = 11.
         informat = 11.
         label = 'ACCOUNT_RK',
      W1OAWZ5SU.FINANCIAL_ACCOUNT_TYPE_CD as FINANCIAL_ACCOUNT_TYPE_CD1 length = 3   
         format = $3.
         informat = $3.
         label = 'FINANCIAL_ACCOUNT_TYPE_CD',
      IRB_CORE_BANKING_ACCOUNT_JRNL.IRB_HEDGE_INDICATOR as IRB_HEDGE_INDICATOR1 length = 10   
         format = $10.
         informat = $10.
         label = 'IRB_HEDGE_INDICATOR',
      IRB_CORE_BANKING_ACCOUNT_JRNL.MATURITY_DT as MATURITY_DT1 length = 8   
         format = DATETIME20.
         informat = DATETIME20.
         label = 'MATURITY_DT',
      W1OAWZ5SU.INTEREST_PAYMENT_TYPE_CD as INTEREST_PAYMENT_TYPE_CD1 length = 3   
         format = $3.
         informat = $3.
         label = 'INTEREST_PAYMENT_TYPE_CD',
      IRB_FIN_INSTR_TYPE.IRB_TYPE as IRB_TYPE1 length = 2   
         format = $2.
         informat = $2.
         label = 'IRB_TYPE'
   from
      work.W1OAWZ5SU as W1OAWZ5SU_DCD left join 
      dwh_dds.FINANCIAL_ACCOUNT_ASSOC
         on
         (
            W1OAWZ5SU_DCD.ACCOUNT_RK = FINANCIAL_ACCOUNT_ASSOC.ACCOUNT_RK
            and FINANCIAL_ACCOUNT_ASSOC.VALID_FROM_DTTM <= &REPDT1 < FINANCIAL_ACCOUNT_ASSOC.VALID_TO_DTTM
            and FINANCIAL_ACCOUNT_ASSOC.FINANCIAL_ACCT_ASSOC_TYPE_CD = 'DCD'
         ) left join 
      work.W1OAWZ5SU
         on
         (
            FINANCIAL_ACCOUNT_ASSOC.REFERENCE_FINANCIAL_ACCOUNT_RK = W1OAWZ5SU.ACCOUNT_RK
            and W1OAWZ5SU.FINANCIAL_ACCOUNT_TYPE_CD = 'DEP'
         ) left join 
      dwh_dds.IRB_CORE_BANKING_ACCOUNT_JRNL
         on
         (
            W1OAWZ5SU.ACCOUNT_RK = IRB_CORE_BANKING_ACCOUNT_JRNL.ACCOUNT_RK
            and datepart(IRB_CORE_BANKING_ACCOUNT_JRNL.JRNL_TO_DTTM) = datepart(&REPDT2)
            and IRB_CORE_BANKING_ACCOUNT_JRNL.VALID_FROM_DTTM <= &REPDT1 < IRB_CORE_BANKING_ACCOUNT_JRNL.VALID_TO_DTTM
         ) left join 
      dwh_dds.IRB_FIN_INSTR_TYPE
         on
         (
            IRB_CORE_BANKING_ACCOUNT_JRNL.IRB_FIN_INSTR_TYPE_RK = IRB_FIN_INSTR_TYPE.IRB_FIN_INSTR_TYPE_RK
            and IRB_FIN_INSTR_TYPE.VALID_TO_DTTM = &ETL_SCD_FUTURE_DTTM
         )
   where
      W1OAWZ5SU_DCD.FINANCIAL_ACCOUNT_TYPE_CD = 'DCD'
   ;
quit;

%global etls_sql_pushDown;
%let etls_sql_pushDown = &sys_sql_ip_all;

%rcSet(&sqlrc); 



/**  Step end SQL Join **/

/*==========================================================================* 
 * Step:            SQL Join                              A5ELGGF9.AK0000YW * 
 * Transform:       Join                                                    * 
 * Description:     DCD FA-jrnlREPDT2                                       * 
 *                                                                          * 
 * Source Tables:   FINANCIAL_ACCOUNT - work.W1OAWZ5SU    A5ELGGF9.AF0000DN * 
 *                  FINANCIAL_ACCOUNT_ASSOC -             A569C89V.AE0000FL * 
 *                   dwh_dds.FINANCIAL_ACCOUNT_ASSOC                        * 
 *                  IRB_FINANCIAL_ACCOUNT_JRNL -          A569C89V.AE0000I5 * 
 *                   dwh_dds.IRB_FINANCIAL_ACCOUNT_JRNL                     * 
 * Target Table:    SQL Join - work.WWA8Y5G               A5ELGGF9.AF0000DX * 
 *==========================================================================*/ 

%let transformID = %quote(A5ELGGF9.AK0000YW);
%let trans_rc = 0;
%let etls_stepStartTime = %sysfunc(datetime(), datetime20.); 

%let etls_recnt = -1;
%let SYS_SQL_IP_SPEEDO = Y;
%let SYS_SQL_MAPPUTTO = sas_put;
%let SYS_SQLREDUCEPUT = DBMS;
%global etls_sql_pushDown;
%let etls_sql_pushDown = -1;
option DBIDIRECTEXEC;

proc datasets lib = work nolist nowarn memtype = (data view);
   delete WWA8Y5G;
quit;

proc sql;
   create view work.WWA8Y5G as
   select
      W1OAWZ5SU.ACCOUNT_RK length = 8   
         format = 11.
         informat = 11.
         label = 'ACCOUNT_RK',
      W1OAWZ5SU.ACCOUNT_REGISTRATION_NM length = 100   
         format = $100.
         informat = $100.
         label = 'ACCOUNT_REGISTRATION_NM',
      W1OAWZ5SU.ALTERNATE_ACCOUNT_NM length = 40   
         format = $40.
         informat = $40.
         label = 'ALTERNATE_ACCOUNT_NM',
      W1OAWZ5SU.OPEN_DT length = 8   
         format = DATETIME20.
         informat = DATETIME20.
         label = 'OPEN_DT',
      IRB_FINANCIAL_ACCOUNT_JRNL.INTEREST_PAYMENT_TYPE_CD as INTEREST_PAYMENT_TYPE_CD1 length = 3   
         format = $3.
         informat = $3.
         label = 'INTEREST_PAYMENT_TYPE_CD'
   from
      work.W1OAWZ5SU left join 
      dwh_dds.FINANCIAL_ACCOUNT_ASSOC
         on
         (
            W1OAWZ5SU.ACCOUNT_RK = FINANCIAL_ACCOUNT_ASSOC.ACCOUNT_RK
            and FINANCIAL_ACCOUNT_ASSOC.FINANCIAL_ACCT_ASSOC_TYPE_CD = 'DCD'
            and FINANCIAL_ACCOUNT_ASSOC.VALID_FROM_DTTM <= &REPDT1 < FINANCIAL_ACCOUNT_ASSOC.VALID_TO_DTTM
         ) left join 
      dwh_dds.IRB_FINANCIAL_ACCOUNT_JRNL
         on
         (
            FINANCIAL_ACCOUNT_ASSOC.REFERENCE_FINANCIAL_ACCOUNT_RK = IRB_FINANCIAL_ACCOUNT_JRNL.ACCOUNT_RK
            and IRB_FINANCIAL_ACCOUNT_JRNL.FINANCIAL_ACCOUNT_TYPE_CD = 'DEP'
            and datepart(IRB_FINANCIAL_ACCOUNT_JRNL.JRNL_TO_DTTM) = datepart(&REPDT2)
            and IRB_FINANCIAL_ACCOUNT_JRNL.VALID_FROM_DTTM <= &REPDT1 <  IRB_FINANCIAL_ACCOUNT_JRNL.VALID_TO_DTTM
         )
   ;
quit;

%global etls_sql_pushDown;
%let etls_sql_pushDown = &sys_sql_ip_all;

%rcSet(&sqlrc); 



/**  Step end SQL Join **/

/*==========================================================================* 
 * Step:            SQL Join                              A5ELGGF9.AK0000YX * 
 * Transform:       Join                                                    * 
 * Description:     DRV-CREPDT                                              * 
 *                                                                          * 
 * Source Tables:   FINANCIAL_ACCOUNT - work.W1OAQKQTH    A5ELGGF9.AF0000DM * 
 *                  FINANCIAL_INSTRUMENT_ASSOC -          A569C89V.AE0000FW * 
 *                   dwh_dds.FINANCIAL_INSTRUMENT_ASSOC                     * 
 *                  FINANCIAL_INSTRUMENT -                A569C89V.AE0000FV * 
 *                   dwh_dds.FINANCIAL_INSTRUMENT                           * 
 * Target Table:    SQL Join - work.W1OBTGQ5O             A5ELGGF9.AF0000DY * 
 *==========================================================================*/ 

%let transformID = %quote(A5ELGGF9.AK0000YX);
%let trans_rc = 0;
%let etls_stepStartTime = %sysfunc(datetime(), datetime20.); 

%let etls_recnt = -1;
%let SYS_SQL_IP_SPEEDO = Y;
%let SYS_SQL_MAPPUTTO = sas_put;
%let SYS_SQLREDUCEPUT = DBMS;
%global etls_sql_pushDown;
%let etls_sql_pushDown = -1;
option DBIDIRECTEXEC;

proc datasets lib = work nolist nowarn memtype = (data view);
   delete W1OBTGQ5O;
quit;

proc sql;
   create table work.W1OBTGQ5O as
   select
      W1OAQKQTH.ACCOUNT_RK length = 8   
         format = 11.
         informat = 11.
         label = 'ACCOUNT_RK',
      W1OAQKQTH.ACCOUNT_REGISTRATION_NM length = 100   
         format = $100.
         informat = $100.
         label = 'ACCOUNT_REGISTRATION_NM',
      W1OAQKQTH.ALTERNATE_ACCOUNT_NM length = 40   
         format = $40.
         informat = $40.
         label = 'ALTERNATE_ACCOUNT_NM',
      W1OAQKQTH.OPEN_DT length = 8   
         format = DATETIME20.
         informat = DATETIME20.
         label = 'OPEN_DT',
      FINANCIAL_INSTRUMENT.FINANCIAL_INSTRUMENT_RK length = 8   
         format = 11.
         informat = 11.
         label = 'FINANCIAL_INSTRUMENT_RK',
      FINANCIAL_INSTRUMENT.FINANCIAL_INSTRUMENT_TYPE_CD length = 3   
         format = $3.
         informat = $3.
         label = 'FINANCIAL_INSTRUMENT_TYPE_CD',
      FINANCIAL_INSTRUMENT.INTEREST_PAYMENT_TYPE_CD length = 3   
         format = $3.
         informat = $3.
         label = 'INTEREST_PAYMENT_TYPE_CD',
      FINANCIAL_INSTRUMENT.IRB_HEDGE_INDICATOR length = 10   
         format = $10.
         informat = $10.
         label = 'IRB_HEDGE_INDICATOR',
      FINANCIAL_INSTRUMENT.IRB_SRC_INSTRUMENT_ID length = 32   
         format = $32.
         informat = $32.
         label = 'IRB_SRC_INSTRUMENT_ID'
   from
      work.W1OAQKQTH left join 
      dwh_dds.FINANCIAL_INSTRUMENT_ASSOC
         on
         (
            W1OAQKQTH.ACCOUNT_RK = FINANCIAL_INSTRUMENT_ASSOC.REFERENCE_ACCOUNT_RK
            and FINANCIAL_INSTRUMENT_ASSOC.FINANCIAL_INSTR_ASSOC_TYPE_CD = 'DRV'
            and FINANCIAL_INSTRUMENT_ASSOC.VALID_FROM_DTTM <= &REPDT < FINANCIAL_INSTRUMENT_ASSOC.VALID_TO_DTTM
         ) left join 
      dwh_dds.FINANCIAL_INSTRUMENT
         on
         (
            FINANCIAL_INSTRUMENT_ASSOC.FINANCIAL_INSTRUMENT_RK = FINANCIAL_INSTRUMENT.FINANCIAL_INSTRUMENT_RK
            and FINANCIAL_INSTRUMENT.VALID_FROM_DTTM <= &REPDT < FINANCIAL_INSTRUMENT.VALID_TO_DTTM
            and FINANCIAL_INSTRUMENT.FINANCIAL_INSTRUMENT_TYPE_CD IN ('IRS','CIS','CAP','FLR','FRA')
         )
   where
      W1OAQKQTH.FINANCIAL_ACCOUNT_TYPE_CD = 'DRV'
   ;
quit;

%global etls_sql_pushDown;
%let etls_sql_pushDown = &sys_sql_ip_all;

%rcSet(&sqlrc); 



/**  Step end SQL Join **/

/*==========================================================================* 
 * Step:            SQL Join                              A5ELGGF9.AK0000YY * 
 * Transform:       Join                                                    * 
 * Description:     DRV-CREPDT1                                             * 
 *                                                                          * 
 * Source Tables:   FINANCIAL_ACCOUNT - work.W1OAWZ5SU    A5ELGGF9.AF0000DN * 
 *                  FINANCIAL_INSTRUMENT_ASSOC -          A569C89V.AE0000FW * 
 *                   dwh_dds.FINANCIAL_INSTRUMENT_ASSOC                     * 
 *                  FINANCIAL_INSTRUMENT -                A569C89V.AE0000FV * 
 *                   dwh_dds.FINANCIAL_INSTRUMENT                           * 
 * Target Table:    SQL Join1 - work.W1OBTS2DU            A5ELGGF9.AF0000DZ * 
 *==========================================================================*/ 

%let transformID = %quote(A5ELGGF9.AK0000YY);
%let trans_rc = 0;
%let etls_stepStartTime = %sysfunc(datetime(), datetime20.); 

%let etls_recnt = -1;
%let SYS_SQL_IP_SPEEDO = Y;
%let SYS_SQL_MAPPUTTO = sas_put;
%let SYS_SQLREDUCEPUT = DBMS;
%global etls_sql_pushDown;
%let etls_sql_pushDown = -1;
option DBIDIRECTEXEC;

proc datasets lib = work nolist nowarn memtype = (data view);
   delete W1OBTS2DU;
quit;

proc sql;
   create table work.W1OBTS2DU as
   select
      W1OAWZ5SU.ACCOUNT_RK length = 8   
         format = 11.
         informat = 11.
         label = 'ACCOUNT_RK',
      W1OAWZ5SU.ACCOUNT_REGISTRATION_NM length = 100   
         format = $100.
         informat = $100.
         label = 'ACCOUNT_REGISTRATION_NM',
      W1OAWZ5SU.ALTERNATE_ACCOUNT_NM length = 40   
         format = $40.
         informat = $40.
         label = 'ALTERNATE_ACCOUNT_NM',
      W1OAWZ5SU.OPEN_DT length = 8   
         format = DATETIME20.
         informat = DATETIME20.
         label = 'OPEN_DT',
      FINANCIAL_INSTRUMENT.FINANCIAL_INSTRUMENT_RK length = 8   
         format = 11.
         informat = 11.
         label = 'FINANCIAL_INSTRUMENT_RK',
      FINANCIAL_INSTRUMENT.FINANCIAL_INSTRUMENT_TYPE_CD length = 3   
         format = $3.
         informat = $3.
         label = 'FINANCIAL_INSTRUMENT_TYPE_CD',
      FINANCIAL_INSTRUMENT.INTEREST_PAYMENT_TYPE_CD as INTEREST_PAYMENT_TYPE_CD1 length = 3   
         format = $3.
         informat = $3.
         label = 'INTEREST_PAYMENT_TYPE_CD',
      FINANCIAL_INSTRUMENT.IRB_HEDGE_INDICATOR length = 10   
         format = $10.
         informat = $10.
         label = 'IRB_HEDGE_INDICATOR',
      FINANCIAL_INSTRUMENT.IRB_SRC_INSTRUMENT_ID length = 32   
         format = $32.
         informat = $32.
         label = 'IRB_SRC_INSTRUMENT_ID'
   from
      work.W1OAWZ5SU left join 
      dwh_dds.FINANCIAL_INSTRUMENT_ASSOC
         on
         (
            W1OAWZ5SU.ACCOUNT_RK = FINANCIAL_INSTRUMENT_ASSOC.REFERENCE_ACCOUNT_RK
            and FINANCIAL_INSTRUMENT_ASSOC.FINANCIAL_INSTR_ASSOC_TYPE_CD = 'DRV'
            and FINANCIAL_INSTRUMENT_ASSOC.VALID_FROM_DTTM <= &REPDT1 < FINANCIAL_INSTRUMENT_ASSOC.VALID_TO_DTTM
         ) left join 
      dwh_dds.FINANCIAL_INSTRUMENT
         on
         (
            FINANCIAL_INSTRUMENT_ASSOC.FINANCIAL_INSTRUMENT_RK = FINANCIAL_INSTRUMENT.FINANCIAL_INSTRUMENT_RK
            and FINANCIAL_INSTRUMENT.VALID_FROM_DTTM <= &REPDT1 < FINANCIAL_INSTRUMENT.VALID_TO_DTTM
            and FINANCIAL_INSTRUMENT.FINANCIAL_INSTRUMENT_TYPE_CD IN ('IRS','CIS','CAP','FLR','FRA')
         )
   where
      W1OAWZ5SU.FINANCIAL_ACCOUNT_TYPE_CD = 'DRV'
   ;
quit;

%global etls_sql_pushDown;
%let etls_sql_pushDown = &sys_sql_ip_all;

%rcSet(&sqlrc); 



/**  Step end SQL Join **/

/*==========================================================================* 
 * Step:            SQL Join                              A5ELGGF9.AK0000YZ * 
 * Transform:       Join                                                    * 
 * Description:     DRV-C-jrnlREPDT2                                        * 
 *                                                                          * 
 * Source Tables:   FINANCIAL_ACCOUNT - work.W1OAWZ5SU    A5ELGGF9.AF0000DN * 
 *                  FINANCIAL_INSTRUMENT_ASSOC -          A569C89V.AE0000FW * 
 *                   dwh_dds.FINANCIAL_INSTRUMENT_ASSOC                     * 
 *                  IRB_FINANCIAL_INSTRUMENT_JRNL -       A569C89V.AE0000I7 * 
 *                  dwh_dds.IRB_FINANCIAL_INSTRUMENT_JR                     * 
 *                  NL                                                      * 
 * Target Table:    SQL Join - work.W3VG919               A5ELGGF9.AF0000E0 * 
 *==========================================================================*/ 

%let transformID = %quote(A5ELGGF9.AK0000YZ);
%let trans_rc = 0;
%let etls_stepStartTime = %sysfunc(datetime(), datetime20.); 

%let etls_recnt = -1;
%let SYS_SQL_IP_SPEEDO = Y;
%let SYS_SQL_MAPPUTTO = sas_put;
%let SYS_SQLREDUCEPUT = DBMS;
%global etls_sql_pushDown;
%let etls_sql_pushDown = -1;
option DBIDIRECTEXEC;

proc datasets lib = work nolist nowarn memtype = (data view);
   delete W3VG919;
quit;

proc sql;
   create view work.W3VG919 as
   select
      W1OAWZ5SU.ACCOUNT_RK length = 8   
         format = 11.
         informat = 11.
         label = 'ACCOUNT_RK',
      W1OAWZ5SU.ACCOUNT_REGISTRATION_NM length = 100   
         format = $100.
         informat = $100.
         label = 'ACCOUNT_REGISTRATION_NM',
      W1OAWZ5SU.ALTERNATE_ACCOUNT_NM length = 40   
         format = $40.
         informat = $40.
         label = 'ALTERNATE_ACCOUNT_NM',
      W1OAWZ5SU.OPEN_DT length = 8   
         format = DATETIME20.
         informat = DATETIME20.
         label = 'OPEN_DT',
      IRB_FINANCIAL_INSTRUMENT_JRNL.FINANCIAL_INSTRUMENT_RK length = 8   
         format = 11.
         informat = 11.
         label = 'FINANCIAL_INSTRUMENT_RK',
      IRB_FINANCIAL_INSTRUMENT_JRNL.FINANCIAL_INSTRUMENT_TYPE_CD length = 3   
         format = $3.
         informat = $3.
         label = 'FINANCIAL_INSTRUMENT_TYPE_CD',
      IRB_FINANCIAL_INSTRUMENT_JRNL.INTEREST_PAYMENT_TYPE_CD as INTEREST_PAYMENT_TYPE_CD1 length = 3   
         format = $3.
         informat = $3.
         label = 'INTEREST_PAYMENT_TYPE_CD',
      IRB_FINANCIAL_INSTRUMENT_JRNL.IRB_HEDGE_INDICATOR as IRB_HEDGE_INDICATOR1 length = 10   
         format = $10.
         informat = $10.
         label = 'IRB_HEDGE_INDICATOR',
      IRB_FINANCIAL_INSTRUMENT_JRNL.IRB_SRC_INSTRUMENT_ID length = 32   
         format = $32.
         informat = $32.
         label = 'IRB_SRC_INSTRUMENT_ID'
   from
      work.W1OAWZ5SU left join 
      dwh_dds.FINANCIAL_INSTRUMENT_ASSOC
         on
         (
            W1OAWZ5SU.ACCOUNT_RK = FINANCIAL_INSTRUMENT_ASSOC.REFERENCE_ACCOUNT_RK
            and FINANCIAL_INSTRUMENT_ASSOC.FINANCIAL_INSTR_ASSOC_TYPE_CD = 'DRV'
            and FINANCIAL_INSTRUMENT_ASSOC.VALID_FROM_DTTM <= &REPDT1 < FINANCIAL_INSTRUMENT_ASSOC.VALID_TO_DTTM
         ) left join 
      dwh_dds.IRB_FINANCIAL_INSTRUMENT_JRNL
         on
         (
            FINANCIAL_INSTRUMENT_ASSOC.FINANCIAL_INSTRUMENT_RK = IRB_FINANCIAL_INSTRUMENT_JRNL.FINANCIAL_INSTRUMENT_RK
            and datepart(IRB_FINANCIAL_INSTRUMENT_JRNL.JRNL_TO_DTTM) = datepart(&REPDT2)
            and IRB_FINANCIAL_INSTRUMENT_JRNL.VALID_FROM_DTTM <= &REPDT1 < IRB_FINANCIAL_INSTRUMENT_JRNL.VALID_TO_DTTM
            and IRB_FINANCIAL_INSTRUMENT_JRNL.FINANCIAL_INSTRUMENT_TYPE_CD IN ('IRS','CIS','CAP','FLR','FRA')
         )
   where
      W1OAWZ5SU.FINANCIAL_ACCOUNT_TYPE_CD = 'DRV'
   ;
quit;

%global etls_sql_pushDown;
%let etls_sql_pushDown = &sys_sql_ip_all;

%rcSet(&sqlrc); 



/**  Step end SQL Join **/

/*==========================================================================* 
 * Step:            SQL Join                              A5ELGGF9.AK0000Z0 * 
 * Transform:       Join                                                    * 
 * Description:     DRVREPDT                                                * 
 *                                                                          * 
 * Source Tables:   FINANCIAL_ACCOUNT - work.W1OAQKQTH    A5ELGGF9.AF0000DM * 
 *                  FINANCIAL_INSTRUMENT_ASSOC -          A569C89V.AE0000FW * 
 *                   dwh_dds.FINANCIAL_INSTRUMENT_ASSOC                     * 
 *                  FINANCIAL_INSTRUMENT -                A569C89V.AE0000FV * 
 *                   dwh_dds.FINANCIAL_INSTRUMENT                           * 
 *                  IRB_FIN_INSTR_TYPE -                  A569C89V.AE0000I3 * 
 *                   dwh_dds.IRB_FIN_INSTR_TYPE                             * 
 * Target Table:    SQL Join - work.W1OE4AV4X             A5ELGGF9.AF0000E1 * 
 *==========================================================================*/ 

%let transformID = %quote(A5ELGGF9.AK0000Z0);
%let trans_rc = 0;
%let etls_stepStartTime = %sysfunc(datetime(), datetime20.); 

%let etls_recnt = -1;
%let SYS_SQL_IP_SPEEDO = Y;
%let SYS_SQL_MAPPUTTO = sas_put;
%let SYS_SQLREDUCEPUT = DBMS;
%global etls_sql_pushDown;
%let etls_sql_pushDown = -1;
option DBIDIRECTEXEC;

proc datasets lib = work nolist nowarn memtype = (data view);
   delete W1OE4AV4X;
quit;

proc sql;
   create table work.W1OE4AV4X as
   select
      W1OAQKQTH.ACCOUNT_RK length = 8   
         format = 11.
         informat = 11.
         label = 'ACCOUNT_RK',
      FINANCIAL_INSTRUMENT.FINANCIAL_INSTRUMENT_RK length = 8   
         format = 11.
         informat = 11.
         label = 'FINANCIAL_INSTRUMENT_RK',
      W1OAQKQTH.ACCOUNT_REGISTRATION_NM length = 100   
         format = $100.
         informat = $100.
         label = 'ACCOUNT_REGISTRATION_NM',
      W1OAQKQTH.ALTERNATE_ACCOUNT_NM length = 40   
         format = $40.
         informat = $40.
         label = 'ALTERNATE_ACCOUNT_NM',
      W1OAQKQTH.OPEN_DT length = 8   
         format = DATETIME20.
         informat = DATETIME20.
         label = 'OPEN_DT',
      FINANCIAL_INSTRUMENT.MATURITY_DT length = 8   
         format = DATETIME20.
         informat = DATETIME20.
         label = 'MATURITY_DT',
      FINANCIAL_INSTRUMENT.FINANCIAL_INSTRUMENT_TYPE_CD length = 3   
         format = $3.
         informat = $3.
         label = 'FINANCIAL_INSTRUMENT_TYPE_CD',
      FINANCIAL_INSTRUMENT.IRB_SRC_INSTRUMENT_ID length = 32   
         format = $32.
         informat = $32.
         label = 'IRB_SRC_INSTRUMENT_ID',
      IRB_FIN_INSTR_TYPE.IRB_TYPE length = 2   
         format = $2.
         informat = $2.
         label = 'IRB_TYPE'
   from
      work.W1OAQKQTH left join 
      dwh_dds.FINANCIAL_INSTRUMENT_ASSOC
         on
         (
            W1OAQKQTH.ACCOUNT_RK = FINANCIAL_INSTRUMENT_ASSOC.REFERENCE_ACCOUNT_RK
            and FINANCIAL_INSTRUMENT_ASSOC.FINANCIAL_INSTR_ASSOC_TYPE_CD = 'DRV'
            and FINANCIAL_INSTRUMENT_ASSOC.VALID_FROM_DTTM <= &REPDT < FINANCIAL_INSTRUMENT_ASSOC.VALID_TO_DTTM
         ) left join 
      dwh_dds.FINANCIAL_INSTRUMENT
         on
         (
            FINANCIAL_INSTRUMENT_ASSOC.FINANCIAL_INSTRUMENT_RK = FINANCIAL_INSTRUMENT.FINANCIAL_INSTRUMENT_RK
            and FINANCIAL_INSTRUMENT.VALID_FROM_DTTM <= &REPDT < FINANCIAL_INSTRUMENT.VALID_TO_DTTM
            and FINANCIAL_INSTRUMENT.FINANCIAL_INSTRUMENT_TYPE_CD NOT IN ('CSG','DCD')
         ) left join 
      dwh_dds.IRB_FIN_INSTR_TYPE
         on
         (
            FINANCIAL_INSTRUMENT.IRB_FIN_INSTR_TYPE_RK = IRB_FIN_INSTR_TYPE.IRB_FIN_INSTR_TYPE_RK
            and IRB_FIN_INSTR_TYPE.VALID_TO_DTTM = &ETL_SCD_FUTURE_DTTM
         )
   where
      W1OAQKQTH.FINANCIAL_ACCOUNT_TYPE_CD = 'DRV'
   ;
quit;

%global etls_sql_pushDown;
%let etls_sql_pushDown = &sys_sql_ip_all;

%rcSet(&sqlrc); 



/**  Step end SQL Join **/

/*==========================================================================* 
 * Step:            SQL Join                              A5ELGGF9.AK0000Z1 * 
 * Transform:       Join                                                    * 
 * Description:     DRVREPDT1                                               * 
 *                                                                          * 
 * Source Tables:   FINANCIAL_ACCOUNT - work.W1OAWZ5SU    A5ELGGF9.AF0000DN * 
 *                  FINANCIAL_INSTRUMENT_ASSOC -          A569C89V.AE0000FW * 
 *                   dwh_dds.FINANCIAL_INSTRUMENT_ASSOC                     * 
 *                  FINANCIAL_INSTRUMENT -                A569C89V.AE0000FV * 
 *                   dwh_dds.FINANCIAL_INSTRUMENT                           * 
 *                  IRB_FIN_INSTR_TYPE -                  A569C89V.AE0000I3 * 
 *                   dwh_dds.IRB_FIN_INSTR_TYPE                             * 
 * Target Table:    SQL Join1 - work.W1OE4C4CJ            A5ELGGF9.AF0000E2 * 
 *==========================================================================*/ 

%let transformID = %quote(A5ELGGF9.AK0000Z1);
%let trans_rc = 0;
%let etls_stepStartTime = %sysfunc(datetime(), datetime20.); 

%let etls_recnt = -1;
%let SYS_SQL_IP_SPEEDO = Y;
%let SYS_SQL_MAPPUTTO = sas_put;
%let SYS_SQLREDUCEPUT = DBMS;
%global etls_sql_pushDown;
%let etls_sql_pushDown = -1;
option DBIDIRECTEXEC;

proc datasets lib = work nolist nowarn memtype = (data view);
   delete W1OE4C4CJ;
quit;

proc sql;
   create table work.W1OE4C4CJ as
   select
      W1OAWZ5SU.ACCOUNT_RK length = 8   
         format = 11.
         informat = 11.
         label = 'ACCOUNT_RK',
      W1OAWZ5SU.ACCOUNT_REGISTRATION_NM length = 100   
         format = $100.
         informat = $100.
         label = 'ACCOUNT_REGISTRATION_NM',
      W1OAWZ5SU.ALTERNATE_ACCOUNT_NM length = 40   
         format = $40.
         informat = $40.
         label = 'ALTERNATE_ACCOUNT_NM',
      W1OAWZ5SU.OPEN_DT length = 8   
         format = DATETIME20.
         informat = DATETIME20.
         label = 'OPEN_DT',
      FINANCIAL_INSTRUMENT.MATURITY_DT length = 8   
         format = DATETIME20.
         informat = DATETIME20.
         label = 'MATURITY_DT',
      FINANCIAL_INSTRUMENT.FINANCIAL_INSTRUMENT_RK length = 8   
         format = 11.
         informat = 11.
         label = 'FINANCIAL_INSTRUMENT_RK',
      IRB_FIN_INSTR_TYPE.IRB_TYPE as IRB_TYPE1 length = 2   
         format = $2.
         informat = $2.
         label = 'IRB_TYPE'
   from
      work.W1OAWZ5SU left join 
      dwh_dds.FINANCIAL_INSTRUMENT_ASSOC
         on
         (
            W1OAWZ5SU.ACCOUNT_RK = FINANCIAL_INSTRUMENT_ASSOC.REFERENCE_ACCOUNT_RK
            and FINANCIAL_INSTRUMENT_ASSOC.FINANCIAL_INSTR_ASSOC_TYPE_CD = 'DRV'
            and FINANCIAL_INSTRUMENT_ASSOC.VALID_FROM_DTTM <= &REPDT1 < FINANCIAL_INSTRUMENT_ASSOC.VALID_TO_DTTM
         ) left join 
      dwh_dds.FINANCIAL_INSTRUMENT
         on
         (
            FINANCIAL_INSTRUMENT_ASSOC.FINANCIAL_INSTRUMENT_RK = FINANCIAL_INSTRUMENT.FINANCIAL_INSTRUMENT_RK
            and FINANCIAL_INSTRUMENT.VALID_FROM_DTTM <= &REPDT1 < FINANCIAL_INSTRUMENT.VALID_TO_DTTM
            and FINANCIAL_INSTRUMENT.FINANCIAL_INSTRUMENT_TYPE_CD NOT IN ('CSG','DCD')
         ) left join 
      dwh_dds.IRB_FIN_INSTR_TYPE
         on
         (
            FINANCIAL_INSTRUMENT.IRB_FIN_INSTR_TYPE_RK = IRB_FIN_INSTR_TYPE.IRB_FIN_INSTR_TYPE_RK
            and IRB_FIN_INSTR_TYPE.VALID_TO_DTTM = &ETL_SCD_FUTURE_DTTM
         )
   where
      W1OAWZ5SU.FINANCIAL_ACCOUNT_TYPE_CD = 'DRV'
   ;
quit;

%global etls_sql_pushDown;
%let etls_sql_pushDown = &sys_sql_ip_all;

%rcSet(&sqlrc); 



/**  Step end SQL Join **/

/*==========================================================================* 
 * Step:            SQL Join                              A5ELGGF9.AK0000Z2 * 
 * Transform:       Join                                                    * 
 * Description:     DRV-jrnlREPDT2                                          * 
 *                                                                          * 
 * Source Tables:   FINANCIAL_ACCOUNT - work.W1OAWZ5SU    A5ELGGF9.AF0000DN * 
 *                  FINANCIAL_INSTRUMENT_ASSOC -          A569C89V.AE0000FW * 
 *                   dwh_dds.FINANCIAL_INSTRUMENT_ASSOC                     * 
 *                  IRB_FINANCIAL_INSTRUMENT_JRNL -       A569C89V.AE0000I7 * 
 *                  dwh_dds.IRB_FINANCIAL_INSTRUMENT_JR                     * 
 *                  NL                                                      * 
 *                  IRB_FIN_INSTR_TYPE -                  A569C89V.AE0000I3 * 
 *                   dwh_dds.IRB_FIN_INSTR_TYPE                             * 
 * Target Table:    SQL Join - work.WGJE1WQ               A5ELGGF9.AF0000E3 * 
 *==========================================================================*/ 

%let transformID = %quote(A5ELGGF9.AK0000Z2);
%let trans_rc = 0;
%let etls_stepStartTime = %sysfunc(datetime(), datetime20.); 

%let etls_recnt = -1;
%let SYS_SQL_IP_SPEEDO = Y;
%let SYS_SQL_MAPPUTTO = sas_put;
%let SYS_SQLREDUCEPUT = DBMS;
%global etls_sql_pushDown;
%let etls_sql_pushDown = -1;
option DBIDIRECTEXEC;

proc datasets lib = work nolist nowarn memtype = (data view);
   delete WGJE1WQ;
quit;

proc sql;
   create view work.WGJE1WQ as
   select
      W1OAWZ5SU.ACCOUNT_RK length = 8   
         format = 11.
         informat = 11.
         label = 'ACCOUNT_RK',
      W1OAWZ5SU.ACCOUNT_REGISTRATION_NM length = 100   
         format = $100.
         informat = $100.
         label = 'ACCOUNT_REGISTRATION_NM',
      W1OAWZ5SU.ALTERNATE_ACCOUNT_NM length = 40   
         format = $40.
         informat = $40.
         label = 'ALTERNATE_ACCOUNT_NM',
      W1OAWZ5SU.OPEN_DT length = 8   
         format = DATETIME20.
         informat = DATETIME20.
         label = 'OPEN_DT',
      IRB_FINANCIAL_INSTRUMENT_JRNL.FINANCIAL_INSTRUMENT_RK length = 8   
         format = 11.
         informat = 11.
         label = 'FINANCIAL_INSTRUMENT_RK',
      IRB_FINANCIAL_INSTRUMENT_JRNL.MATURITY_DT as MATURITY_DT1 length = 8   
         format = DATETIME20.
         informat = DATETIME20.
         label = 'MATURITY_DT',
      IRB_FIN_INSTR_TYPE.IRB_TYPE as IRB_TYPE1 length = 2   
         format = $2.
         informat = $2.
         label = 'IRB_TYPE'
   from
      work.W1OAWZ5SU left join 
      dwh_dds.FINANCIAL_INSTRUMENT_ASSOC
         on
         (
            W1OAWZ5SU.ACCOUNT_RK = FINANCIAL_INSTRUMENT_ASSOC.REFERENCE_ACCOUNT_RK
            and FINANCIAL_INSTRUMENT_ASSOC.FINANCIAL_INSTR_ASSOC_TYPE_CD = 'DRV'
            and FINANCIAL_INSTRUMENT_ASSOC.VALID_FROM_DTTM <= &REPDT1 < FINANCIAL_INSTRUMENT_ASSOC.VALID_TO_DTTM
         ) left join 
      dwh_dds.IRB_FINANCIAL_INSTRUMENT_JRNL
         on
         (
            FINANCIAL_INSTRUMENT_ASSOC.FINANCIAL_INSTRUMENT_RK = IRB_FINANCIAL_INSTRUMENT_JRNL.FINANCIAL_INSTRUMENT_RK
            and datepart(IRB_FINANCIAL_INSTRUMENT_JRNL.JRNL_TO_DTTM) = datepart(&REPDT2)
            and IRB_FINANCIAL_INSTRUMENT_JRNL.VALID_FROM_DTTM <= &REPDT1 < IRB_FINANCIAL_INSTRUMENT_JRNL.VALID_TO_DTTM
            and IRB_FINANCIAL_INSTRUMENT_JRNL.INTEREST_PAYMENT_TYPE_CD NOT IN ('CSG','DCD')
         ) left join 
      dwh_dds.IRB_FIN_INSTR_TYPE
         on
         (
            IRB_FINANCIAL_INSTRUMENT_JRNL.IRB_FIN_INSTR_TYPE_RK = IRB_FIN_INSTR_TYPE.IRB_FIN_INSTR_TYPE_RK
            and IRB_FIN_INSTR_TYPE.VALID_TO_DTTM = &ETL_SCD_FUTURE_DTTM
         )
   where
      W1OAWZ5SU.FINANCIAL_ACCOUNT_TYPE_CD = 'DRV'
   ;
quit;

%global etls_sql_pushDown;
%let etls_sql_pushDown = &sys_sql_ip_all;

%rcSet(&sqlrc); 



/**  Step end SQL Join **/

/*==========================================================================* 
 * Step:            SQL Join                              A5ELGGF9.AK0000Z3 * 
 * Transform:       Join                                                    * 
 * Description:     2.1 Проверка условий DQ                                 * 
 *                                                                          * 
 * Source Tables:   SQL Join - work.W1OBBYRRU             A5ELGGF9.AF0000DU * 
 *                  SQL Join1 - work.W1OBC7H8H            A5ELGGF9.AF0000DV * 
 * Target Table:    SQL Join - work.W1OBRJLZ5             A5ELGGF9.AF0000E4 * 
 *==========================================================================*/ 

%let transformID = %quote(A5ELGGF9.AK0000Z3);
%let trans_rc = 0;
%let etls_stepStartTime = %sysfunc(datetime(), datetime20.); 

%let etls_recCheckExist = 0; 
%let etls_recnt = 0; 
%macro etls_recordCheck; 
   %let etls_recCheckExist = %eval(%sysfunc(exist(work.W1OBBYRRU, DATA)) or 
         %sysfunc(exist(work.W1OBBYRRU, VIEW))); 
   
   %if (&etls_recCheckExist) %then
   %do;
      %local etls_syntaxcheck; 
      %let etls_syntaxcheck = %sysfunc(getoption(syntaxcheck)); 
      /* Turn off syntaxcheck option to perform following steps  */ 
      options nosyntaxcheck;
      
      proc contents data = work.W1OBBYRRU out = work.etls_contents(keep = nobs) noprint; 
      run; 
      
      data _null_; 
         set work.etls_contents (obs = 1); 
         call symput("etls_recnt", left(put(nobs,32.))); 
      run;
      
      proc datasets lib = work nolist nowarn memtype = (data view);
         delete etls_contents;
      quit;
      
      /* Reset syntaxcheck option to previous setting  */ 
      options &etls_syntaxcheck; 
   %end;
%mend etls_recordCheck;
%etls_recordCheck;

%let SYS_SQL_IP_SPEEDO = Y;
%let SYS_SQL_MAPPUTTO = sas_put;
%let SYS_SQLREDUCEPUT = DBMS;
%global etls_sql_pushDown;
%let etls_sql_pushDown = -1;
option DBIDIRECTEXEC;

proc datasets lib = work nolist nowarn memtype = (data view);
   delete W1OBRJLZ5;
quit;

proc sql;
   create view work.W1OBRJLZ5 as
   select
      W1OBBYRRU.ACCOUNT_RK length = 8   
         format = 11.
         informat = 11.
         label = 'ACCOUNT_RK',
      W1OBBYRRU.ACCOUNT_REGISTRATION_NM length = 100   
         format = $100.
         informat = $100.
         label = 'ACCOUNT_REGISTRATION_NM',
      W1OBBYRRU.ALTERNATE_ACCOUNT_NM length = 40   
         format = $40.
         informat = $40.
         label = 'ALTERNATE_ACCOUNT_NM',
      W1OBBYRRU.OPEN_DT length = 8   
         format = DATETIME20.
         informat = DATETIME20.
         label = 'OPEN_DT',
      W1OBBYRRU.IRB_HEDGE_INDICATOR length = 10   
         format = $10.
         informat = $10.
         label = 'IRB_HEDGE_INDICATOR',
      W1OBC7H8H.IRB_HEDGE_INDICATOR1 length = 10   
         format = $10.
         informat = $10.
         label = 'IRB_HEDGE_INDICATOR',
      W1OBBYRRU.IRB_SRC_ACCOUNT_ID length = 32   
         format = $32.
         informat = $32.
         label = 'IRB_SRC_ACCOUNT_ID'
   from
      work.W1OBBYRRU inner join 
      work.W1OBC7H8H
         on
         (
            W1OBBYRRU.ACCOUNT_RK = W1OBC7H8H.ACCOUNT_RK
         )
   where
      W1OBBYRRU.IRB_HEDGE_INDICATOR <> W1OBC7H8H.IRB_HEDGE_INDICATOR1
   ;
quit;

%global etls_sql_pushDown;
%let etls_sql_pushDown = &sys_sql_ip_all;

%rcSet(&sqlrc); 



/**  Step end SQL Join **/

/*==========================================================================* 
 * Step:            SQL Join                              A5ELGGF9.AK0000Z4 * 
 * Transform:       Join                                                    * 
 * Description:     2.1 Доп.проверка условий DQ                             * 
 *                                                                          * 
 * Source Tables:   SQL Join - work.W1OBBYRRU             A5ELGGF9.AF0000DU * 
 *                  SQL Join2 - work.W2WWN4H              A5ELGGF9.AF0000DW * 
 * Target Table:    SQL Join - work.W3HF8FP               A5ELGGF9.AF0000E5 * 
 *==========================================================================*/ 

%let transformID = %quote(A5ELGGF9.AK0000Z4);
%let trans_rc = 0;
%let etls_stepStartTime = %sysfunc(datetime(), datetime20.); 

%let etls_recCheckExist = 0; 
%let etls_recnt = 0; 
%macro etls_recordCheck; 
   %let etls_recCheckExist = %eval(%sysfunc(exist(work.W1OBBYRRU, DATA)) or 
         %sysfunc(exist(work.W1OBBYRRU, VIEW))); 
   
   %if (&etls_recCheckExist) %then
   %do;
      %local etls_syntaxcheck; 
      %let etls_syntaxcheck = %sysfunc(getoption(syntaxcheck)); 
      /* Turn off syntaxcheck option to perform following steps  */ 
      options nosyntaxcheck;
      
      proc contents data = work.W1OBBYRRU out = work.etls_contents(keep = nobs) noprint; 
      run; 
      
      data _null_; 
         set work.etls_contents (obs = 1); 
         call symput("etls_recnt", left(put(nobs,32.))); 
      run;
      
      proc datasets lib = work nolist nowarn memtype = (data view);
         delete etls_contents;
      quit;
      
      /* Reset syntaxcheck option to previous setting  */ 
      options &etls_syntaxcheck; 
   %end;
%mend etls_recordCheck;
%etls_recordCheck;

%let SYS_SQL_IP_SPEEDO = Y;
%let SYS_SQL_MAPPUTTO = sas_put;
%let SYS_SQLREDUCEPUT = DBMS;
%global etls_sql_pushDown;
%let etls_sql_pushDown = -1;
option DBIDIRECTEXEC;

proc datasets lib = work nolist nowarn memtype = (data view);
   delete W3HF8FP;
quit;

proc sql;
   create view work.W3HF8FP as
   select
      W1OBBYRRU.ACCOUNT_RK length = 8   
         format = 11.
         informat = 11.
         label = 'ACCOUNT_RK',
      W1OBBYRRU.ACCOUNT_REGISTRATION_NM length = 100   
         format = $100.
         informat = $100.
         label = 'ACCOUNT_REGISTRATION_NM',
      W1OBBYRRU.ALTERNATE_ACCOUNT_NM length = 40   
         format = $40.
         informat = $40.
         label = 'ALTERNATE_ACCOUNT_NM',
      W1OBBYRRU.OPEN_DT length = 8   
         format = DATETIME20.
         informat = DATETIME20.
         label = 'OPEN_DT',
      W1OBBYRRU.IRB_HEDGE_INDICATOR length = 10   
         format = $10.
         informat = $10.
         label = 'IRB_HEDGE_INDICATOR',
      W2WWN4H.IRB_HEDGE_INDICATOR1 length = 10   
         format = $10.
         informat = $10.
         label = 'IRB_HEDGE_INDICATOR',
      W1OBBYRRU.IRB_SRC_ACCOUNT_ID length = 32   
         format = $32.
         informat = $32.
         label = 'IRB_SRC_ACCOUNT_ID'
   from
      work.W1OBBYRRU inner join 
      work.W2WWN4H
         on
         (
            W1OBBYRRU.ACCOUNT_RK = W2WWN4H.ACCOUNT_RK
         )
   where
      W1OBBYRRU.IRB_HEDGE_INDICATOR <> W2WWN4H.IRB_HEDGE_INDICATOR1
      and W2WWN4H.IRB_HEDGE_INDICATOR1 NOT IS MISSING 
   ;
quit;

%global etls_sql_pushDown;
%let etls_sql_pushDown = &sys_sql_ip_all;

%rcSet(&sqlrc); 



/**  Step end SQL Join **/

/*==========================================================================* 
 * Step:            Append                                A5ELGGF9.AK0000Z5 * 
 * Transform:       Append                                                  * 
 * Description:                                                             * 
 *                                                                          * 
 * Source Tables:   SQL Join - work.W1OBRJLZ5             A5ELGGF9.AF0000E4 * 
 *                  SQL Join - work.W3HF8FP               A5ELGGF9.AF0000E5 * 
 * Target Table:    Append - work.W3KAMJF                 A5ELGGF9.AF0000E6 * 
 *==========================================================================*/ 

%let transformID = %quote(A5ELGGF9.AK0000Z5);
%let trans_rc = 0;
%let etls_stepStartTime = %sysfunc(datetime(), datetime20.); 

%let etls_recnt = -1;
%let dbxrc = %eval(%sysfunc(exist(work.W1OBRJLZ5, DATA)) or 
      %sysfunc(exist(work.W1OBRJLZ5, VIEW))); 

%let dbxrc = %eval(%sysfunc(exist(work.W3HF8FP, DATA)) or 
      %sysfunc(exist(work.W3HF8FP, VIEW))); 

proc datasets lib = work nolist nowarn memtype = (data view);
   delete W3KAMJF;
quit;

data work.W3KAMJF / view=work.W3KAMJF;
   set work.W1OBRJLZ5
       work.W3HF8FP;
   keep ACCOUNT_RK ACCOUNT_REGISTRATION_NM ALTERNATE_ACCOUNT_NM OPEN_DT 
    IRB_HEDGE_INDICATOR IRB_HEDGE_INDICATOR1 IRB_SRC_ACCOUNT_ID; 
run;

%rcSet(&syserr); 



/**  Step end Append **/

/*==========================================================================* 
 * Step:            SQL Join                              A5ELGGF9.AK0000Z6 * 
 * Transform:       Join                                                    * 
 * Description:     2.2 Проверка условий DQ                                 * 
 *                                                                          * 
 * Source Tables:   SQL Join - work.W1OBTGQ5O             A5ELGGF9.AF0000DY * 
 *                  SQL Join1 - work.W1OBTS2DU            A5ELGGF9.AF0000DZ * 
 * Target Table:    SQL Join - work.W1OCKPP9R             A5ELGGF9.AF0000E7 * 
 *==========================================================================*/ 

%let transformID = %quote(A5ELGGF9.AK0000Z6);
%let trans_rc = 0;
%let etls_stepStartTime = %sysfunc(datetime(), datetime20.); 

%let etls_recCheckExist = 0; 
%let etls_recnt = 0; 
%macro etls_recordCheck; 
   %let etls_recCheckExist = %eval(%sysfunc(exist(work.W1OBTGQ5O, DATA)) or 
         %sysfunc(exist(work.W1OBTGQ5O, VIEW))); 
   
   %if (&etls_recCheckExist) %then
   %do;
      %local etls_syntaxcheck; 
      %let etls_syntaxcheck = %sysfunc(getoption(syntaxcheck)); 
      /* Turn off syntaxcheck option to perform following steps  */ 
      options nosyntaxcheck;
      
      proc contents data = work.W1OBTGQ5O out = work.etls_contents(keep = nobs) noprint; 
      run; 
      
      data _null_; 
         set work.etls_contents (obs = 1); 
         call symput("etls_recnt", left(put(nobs,32.))); 
      run;
      
      proc datasets lib = work nolist nowarn memtype = (data view);
         delete etls_contents;
      quit;
      
      /* Reset syntaxcheck option to previous setting  */ 
      options &etls_syntaxcheck; 
   %end;
%mend etls_recordCheck;
%etls_recordCheck;

%let SYS_SQL_IP_SPEEDO = Y;
%let SYS_SQL_MAPPUTTO = sas_put;
%let SYS_SQLREDUCEPUT = DBMS;
%global etls_sql_pushDown;
%let etls_sql_pushDown = -1;
option DBIDIRECTEXEC;

proc datasets lib = work nolist nowarn memtype = (data view);
   delete W1OCKPP9R;
quit;

proc sql;
   create view work.W1OCKPP9R as
   select
      W1OBTGQ5O.ACCOUNT_RK length = 8   
         format = 11.
         informat = 11.
         label = 'ACCOUNT_RK',
      W1OBTGQ5O.ACCOUNT_REGISTRATION_NM length = 100   
         format = $100.
         informat = $100.
         label = 'ACCOUNT_REGISTRATION_NM',
      W1OBTGQ5O.ALTERNATE_ACCOUNT_NM length = 40   
         format = $40.
         informat = $40.
         label = 'ALTERNATE_ACCOUNT_NM',
      W1OBTGQ5O.OPEN_DT length = 8   
         format = DATETIME20.
         informat = DATETIME20.
         label = 'OPEN_DT',
      W1OBTGQ5O.IRB_SRC_INSTRUMENT_ID length = 32   
         format = $32.
         informat = $32.
         label = 'IRB_SRC_INSTRUMENT_ID',
      W1OBTGQ5O.IRB_HEDGE_INDICATOR length = 10   
         format = $10.
         informat = $10.
         label = 'IRB_HEDGE_INDICATOR',
      W1OBTGQ5O.FINANCIAL_INSTRUMENT_TYPE_CD length = 3   
         format = $3.
         informat = $3.
         label = 'FINANCIAL_INSTRUMENT_TYPE_CD',
      W1OBTS2DU.IRB_HEDGE_INDICATOR as IRB_HEDGE_INDICATOR1 length = 10   
         format = $10.
         informat = $10.
         label = 'IRB_HEDGE_INDICATOR'
   from
      work.W1OBTGQ5O full join 
      work.W1OBTS2DU
         on
         (
            W1OBTGQ5O.ACCOUNT_RK = W1OBTS2DU.ACCOUNT_RK
         )
   where
      W1OBTGQ5O.IRB_HEDGE_INDICATOR <> W1OBTS2DU.IRB_HEDGE_INDICATOR
      and W1OBTGQ5O.IRB_HEDGE_INDICATOR NOT IS MISSING 
      and W1OBTS2DU.IRB_HEDGE_INDICATOR NOT IS MISSING 
   ;
quit;

%global etls_sql_pushDown;
%let etls_sql_pushDown = &sys_sql_ip_all;

%rcSet(&sqlrc); 



/**  Step end SQL Join **/

/*==========================================================================* 
 * Step:            SQL Join                              A5ELGGF9.AK0000Z7 * 
 * Transform:       Join                                                    * 
 * Description:     2.2 Доп.проверка условий DQ                             * 
 *                                                                          * 
 * Source Tables:   SQL Join - work.W1OBTGQ5O             A5ELGGF9.AF0000DY * 
 *                  SQL Join - work.W3VG919               A5ELGGF9.AF0000E0 * 
 * Target Table:    SQL Join - work.WDXYK2M               A5ELGGF9.AF0000E8 * 
 *==========================================================================*/ 

%let transformID = %quote(A5ELGGF9.AK0000Z7);
%let trans_rc = 0;
%let etls_stepStartTime = %sysfunc(datetime(), datetime20.); 

%let etls_recCheckExist = 0; 
%let etls_recnt = 0; 
%macro etls_recordCheck; 
   %let etls_recCheckExist = %eval(%sysfunc(exist(work.W1OBTGQ5O, DATA)) or 
         %sysfunc(exist(work.W1OBTGQ5O, VIEW))); 
   
   %if (&etls_recCheckExist) %then
   %do;
      %local etls_syntaxcheck; 
      %let etls_syntaxcheck = %sysfunc(getoption(syntaxcheck)); 
      /* Turn off syntaxcheck option to perform following steps  */ 
      options nosyntaxcheck;
      
      proc contents data = work.W1OBTGQ5O out = work.etls_contents(keep = nobs) noprint; 
      run; 
      
      data _null_; 
         set work.etls_contents (obs = 1); 
         call symput("etls_recnt", left(put(nobs,32.))); 
      run;
      
      proc datasets lib = work nolist nowarn memtype = (data view);
         delete etls_contents;
      quit;
      
      /* Reset syntaxcheck option to previous setting  */ 
      options &etls_syntaxcheck; 
   %end;
%mend etls_recordCheck;
%etls_recordCheck;

%let SYS_SQL_IP_SPEEDO = Y;
%let SYS_SQL_MAPPUTTO = sas_put;
%let SYS_SQLREDUCEPUT = DBMS;
%global etls_sql_pushDown;
%let etls_sql_pushDown = -1;
option DBIDIRECTEXEC;

proc datasets lib = work nolist nowarn memtype = (data view);
   delete WDXYK2M;
quit;

proc sql;
   create view work.WDXYK2M as
   select
      W1OBTGQ5O.ACCOUNT_RK length = 8   
         format = 11.
         informat = 11.
         label = 'ACCOUNT_RK',
      W1OBTGQ5O.ACCOUNT_REGISTRATION_NM length = 100   
         format = $100.
         informat = $100.
         label = 'ACCOUNT_REGISTRATION_NM',
      W1OBTGQ5O.ALTERNATE_ACCOUNT_NM length = 40   
         format = $40.
         informat = $40.
         label = 'ALTERNATE_ACCOUNT_NM',
      W1OBTGQ5O.OPEN_DT length = 8   
         format = DATETIME20.
         informat = DATETIME20.
         label = 'OPEN_DT',
      W1OBTGQ5O.IRB_SRC_INSTRUMENT_ID length = 32   
         format = $32.
         informat = $32.
         label = 'IRB_SRC_INSTRUMENT_ID',
      W1OBTGQ5O.IRB_HEDGE_INDICATOR length = 10   
         format = $10.
         informat = $10.
         label = 'IRB_HEDGE_INDICATOR',
      W1OBTGQ5O.FINANCIAL_INSTRUMENT_TYPE_CD length = 3   
         format = $3.
         informat = $3.
         label = 'FINANCIAL_INSTRUMENT_TYPE_CD',
      W3VG919.IRB_HEDGE_INDICATOR1 length = 10   
         format = $10.
         informat = $10.
         label = 'IRB_HEDGE_INDICATOR'
   from
      work.W1OBTGQ5O inner join 
      work.W3VG919
         on
         (
            W1OBTGQ5O.ACCOUNT_RK = W3VG919.ACCOUNT_RK
         )
   where
      W1OBTGQ5O.IRB_HEDGE_INDICATOR <> W3VG919.IRB_HEDGE_INDICATOR1
      and W1OBTGQ5O.IRB_HEDGE_INDICATOR NOT IS MISSING 
      and W3VG919.IRB_HEDGE_INDICATOR1 NOT IS MISSING 
   ;
quit;

%global etls_sql_pushDown;
%let etls_sql_pushDown = &sys_sql_ip_all;

%rcSet(&sqlrc); 



/**  Step end SQL Join **/

/*==========================================================================* 
 * Step:            Append                                A5ELGGF9.AK0000Z8 * 
 * Transform:       Append                                                  * 
 * Description:                                                             * 
 *                                                                          * 
 * Source Tables:   SQL Join - work.W1OCKPP9R             A5ELGGF9.AF0000E7 * 
 *                  SQL Join - work.WDXYK2M               A5ELGGF9.AF0000E8 * 
 * Target Table:    Append - work.WELRGVQ                 A5ELGGF9.AF0000E9 * 
 *==========================================================================*/ 

%let transformID = %quote(A5ELGGF9.AK0000Z8);
%let trans_rc = 0;
%let etls_stepStartTime = %sysfunc(datetime(), datetime20.); 

%let etls_recnt = -1;
%let dbxrc = %eval(%sysfunc(exist(work.W1OCKPP9R, DATA)) or 
      %sysfunc(exist(work.W1OCKPP9R, VIEW))); 

%let dbxrc = %eval(%sysfunc(exist(work.WDXYK2M, DATA)) or 
      %sysfunc(exist(work.WDXYK2M, VIEW))); 

proc datasets lib = work nolist nowarn memtype = (data view);
   delete WELRGVQ;
quit;

data work.WELRGVQ / view=work.WELRGVQ;
   set work.W1OCKPP9R
       work.WDXYK2M;
   keep ACCOUNT_RK ACCOUNT_REGISTRATION_NM ALTERNATE_ACCOUNT_NM OPEN_DT 
    IRB_SRC_INSTRUMENT_ID IRB_HEDGE_INDICATOR FINANCIAL_INSTRUMENT_TYPE_CD 
    IRB_HEDGE_INDICATOR1; 
run;

%rcSet(&syserr); 



/**  Step end Append **/

/*==========================================================================* 
 * Step:            SQL Join                              A5ELGGF9.AK0000Z9 * 
 * Transform:       Join                                                    * 
 * Description:     3.1 Проверка условий DQ                                 * 
 *                                                                          * 
 * Source Tables:   SQL Join - work.W1OBBYRRU             A5ELGGF9.AF0000DU * 
 *                  SQL Join1 - work.W1OBC7H8H            A5ELGGF9.AF0000DV * 
 * Target Table:    SQL Join - work.W1OE4DEVV             A5ELGGF9.AF0000EA * 
 *==========================================================================*/ 

%let transformID = %quote(A5ELGGF9.AK0000Z9);
%let trans_rc = 0;
%let etls_stepStartTime = %sysfunc(datetime(), datetime20.); 

%let etls_recCheckExist = 0; 
%let etls_recnt = 0; 
%macro etls_recordCheck; 
   %let etls_recCheckExist = %eval(%sysfunc(exist(work.W1OBBYRRU, DATA)) or 
         %sysfunc(exist(work.W1OBBYRRU, VIEW))); 
   
   %if (&etls_recCheckExist) %then
   %do;
      %local etls_syntaxcheck; 
      %let etls_syntaxcheck = %sysfunc(getoption(syntaxcheck)); 
      /* Turn off syntaxcheck option to perform following steps  */ 
      options nosyntaxcheck;
      
      proc contents data = work.W1OBBYRRU out = work.etls_contents(keep = nobs) noprint; 
      run; 
      
      data _null_; 
         set work.etls_contents (obs = 1); 
         call symput("etls_recnt", left(put(nobs,32.))); 
      run;
      
      proc datasets lib = work nolist nowarn memtype = (data view);
         delete etls_contents;
      quit;
      
      /* Reset syntaxcheck option to previous setting  */ 
      options &etls_syntaxcheck; 
   %end;
%mend etls_recordCheck;
%etls_recordCheck;

%let SYS_SQL_IP_SPEEDO = Y;
%let SYS_SQL_MAPPUTTO = sas_put;
%let SYS_SQLREDUCEPUT = DBMS;
%global etls_sql_pushDown;
%let etls_sql_pushDown = -1;
option DBIDIRECTEXEC;

proc datasets lib = work nolist nowarn memtype = (data view);
   delete W1OE4DEVV;
quit;

proc sql;
   create view work.W1OE4DEVV as
   select
      W1OBBYRRU.ACCOUNT_RK length = 8   
         format = 11.
         informat = 11.
         label = 'ACCOUNT_RK',
      W1OBBYRRU.ACCOUNT_REGISTRATION_NM length = 100   
         format = $100.
         informat = $100.
         label = 'ACCOUNT_REGISTRATION_NM',
      W1OBBYRRU.ALTERNATE_ACCOUNT_NM length = 40   
         format = $40.
         informat = $40.
         label = 'ALTERNATE_ACCOUNT_NM',
      W1OBBYRRU.OPEN_DT length = 8   
         format = DATETIME20.
         informat = DATETIME20.
         label = 'OPEN_DT',
      W1OBBYRRU.MATURITY_DT length = 8   
         format = DATETIME20.
         informat = DATETIME20.
         label = 'MATURITY_DT',
      W1OBC7H8H.MATURITY_DT1 length = 8   
         format = DATETIME20.
         informat = DATETIME20.
         label = 'MATURITY_DT',
      W1OBBYRRU.IRB_SRC_ACCOUNT_ID length = 32   
         format = $32.
         informat = $32.
         label = 'IRB_SRC_ACCOUNT_ID'
   from
      work.W1OBBYRRU inner join 
      work.W1OBC7H8H
         on
         (
            W1OBBYRRU.ACCOUNT_RK = W1OBC7H8H.ACCOUNT_RK
         )
   where
      W1OBBYRRU.MATURITY_DT <> W1OBC7H8H.MATURITY_DT1
   ;
quit;

%global etls_sql_pushDown;
%let etls_sql_pushDown = &sys_sql_ip_all;

%rcSet(&sqlrc); 



/**  Step end SQL Join **/

/*==========================================================================* 
 * Step:            SQL Join                              A5ELGGF9.AK0000ZA * 
 * Transform:       Join                                                    * 
 * Description:     3.1 Доп.проверка условий DQ                             * 
 *                                                                          * 
 * Source Tables:   SQL Join - work.W1OBBYRRU             A5ELGGF9.AF0000DU * 
 *                  SQL Join2 - work.W2WWN4H              A5ELGGF9.AF0000DW * 
 * Target Table:    SQL Join - work.WGBAEOW               A5ELGGF9.AF0000EB * 
 *==========================================================================*/ 

%let transformID = %quote(A5ELGGF9.AK0000ZA);
%let trans_rc = 0;
%let etls_stepStartTime = %sysfunc(datetime(), datetime20.); 

%let etls_recCheckExist = 0; 
%let etls_recnt = 0; 
%macro etls_recordCheck; 
   %let etls_recCheckExist = %eval(%sysfunc(exist(work.W1OBBYRRU, DATA)) or 
         %sysfunc(exist(work.W1OBBYRRU, VIEW))); 
   
   %if (&etls_recCheckExist) %then
   %do;
      %local etls_syntaxcheck; 
      %let etls_syntaxcheck = %sysfunc(getoption(syntaxcheck)); 
      /* Turn off syntaxcheck option to perform following steps  */ 
      options nosyntaxcheck;
      
      proc contents data = work.W1OBBYRRU out = work.etls_contents(keep = nobs) noprint; 
      run; 
      
      data _null_; 
         set work.etls_contents (obs = 1); 
         call symput("etls_recnt", left(put(nobs,32.))); 
      run;
      
      proc datasets lib = work nolist nowarn memtype = (data view);
         delete etls_contents;
      quit;
      
      /* Reset syntaxcheck option to previous setting  */ 
      options &etls_syntaxcheck; 
   %end;
%mend etls_recordCheck;
%etls_recordCheck;

%let SYS_SQL_IP_SPEEDO = Y;
%let SYS_SQL_MAPPUTTO = sas_put;
%let SYS_SQLREDUCEPUT = DBMS;
%global etls_sql_pushDown;
%let etls_sql_pushDown = -1;
option DBIDIRECTEXEC;

proc datasets lib = work nolist nowarn memtype = (data view);
   delete WGBAEOW;
quit;

proc sql;
   create view work.WGBAEOW as
   select
      W1OBBYRRU.ACCOUNT_RK length = 8   
         format = 11.
         informat = 11.
         label = 'ACCOUNT_RK',
      W1OBBYRRU.ACCOUNT_REGISTRATION_NM length = 100   
         format = $100.
         informat = $100.
         label = 'ACCOUNT_REGISTRATION_NM',
      W1OBBYRRU.ALTERNATE_ACCOUNT_NM length = 40   
         format = $40.
         informat = $40.
         label = 'ALTERNATE_ACCOUNT_NM',
      W1OBBYRRU.OPEN_DT length = 8   
         format = DATETIME20.
         informat = DATETIME20.
         label = 'OPEN_DT',
      W1OBBYRRU.IRB_SRC_ACCOUNT_ID length = 32   
         format = $32.
         informat = $32.
         label = 'IRB_SRC_ACCOUNT_ID',
      W1OBBYRRU.MATURITY_DT length = 8   
         format = DATETIME20.
         informat = DATETIME20.
         label = 'MATURITY_DT',
      W2WWN4H.MATURITY_DT1 length = 8   
         format = DATETIME20.
         informat = DATETIME20.
         label = 'MATURITY_DT'
   from
      work.W1OBBYRRU inner join 
      work.W2WWN4H
         on
         (
            W1OBBYRRU.ACCOUNT_RK = W2WWN4H.ACCOUNT_RK
         )
   where
      W1OBBYRRU.MATURITY_DT <> W2WWN4H.MATURITY_DT1
      and W2WWN4H.MATURITY_DT1 NOT IS MISSING 
   ;
quit;

%global etls_sql_pushDown;
%let etls_sql_pushDown = &sys_sql_ip_all;

%rcSet(&sqlrc); 



/**  Step end SQL Join **/

/*==========================================================================* 
 * Step:            Append                                A5ELGGF9.AK0000ZB * 
 * Transform:       Append                                                  * 
 * Description:                                                             * 
 *                                                                          * 
 * Source Tables:   SQL Join - work.W1OE4DEVV             A5ELGGF9.AF0000EA * 
 *                  SQL Join - work.WGBAEOW               A5ELGGF9.AF0000EB * 
 * Target Table:    Append - work.WGDU8GB                 A5ELGGF9.AF0000EC * 
 *==========================================================================*/ 

%let transformID = %quote(A5ELGGF9.AK0000ZB);
%let trans_rc = 0;
%let etls_stepStartTime = %sysfunc(datetime(), datetime20.); 

%let etls_recnt = -1;
%let dbxrc = %eval(%sysfunc(exist(work.W1OE4DEVV, DATA)) or 
      %sysfunc(exist(work.W1OE4DEVV, VIEW))); 

%let dbxrc = %eval(%sysfunc(exist(work.WGBAEOW, DATA)) or 
      %sysfunc(exist(work.WGBAEOW, VIEW))); 

proc datasets lib = work nolist nowarn memtype = (data view);
   delete WGDU8GB;
quit;

data work.WGDU8GB / view=work.WGDU8GB;
   set work.W1OE4DEVV
       work.WGBAEOW;
   keep ACCOUNT_RK ACCOUNT_REGISTRATION_NM ALTERNATE_ACCOUNT_NM OPEN_DT MATURITY_DT 
    MATURITY_DT1 IRB_SRC_ACCOUNT_ID; 
run;

%rcSet(&syserr); 



/**  Step end Append **/

/*==========================================================================* 
 * Step:            SQL Join                              A5ELGGF9.AK0000ZC * 
 * Transform:       Join                                                    * 
 * Description:     3.2 Проверка условий DQ                                 * 
 *                                                                          * 
 * Source Tables:   SQL Join - work.W1OE4AV4X             A5ELGGF9.AF0000E1 * 
 *                  SQL Join1 - work.W1OE4C4CJ            A5ELGGF9.AF0000E2 * 
 * Target Table:    SQL Join - work.W1OE4FICV             A5ELGGF9.AF0000ED * 
 *==========================================================================*/ 

%let transformID = %quote(A5ELGGF9.AK0000ZC);
%let trans_rc = 0;
%let etls_stepStartTime = %sysfunc(datetime(), datetime20.); 

%let etls_recCheckExist = 0; 
%let etls_recnt = 0; 
%macro etls_recordCheck; 
   %let etls_recCheckExist = %eval(%sysfunc(exist(work.W1OE4AV4X, DATA)) or 
         %sysfunc(exist(work.W1OE4AV4X, VIEW))); 
   
   %if (&etls_recCheckExist) %then
   %do;
      %local etls_syntaxcheck; 
      %let etls_syntaxcheck = %sysfunc(getoption(syntaxcheck)); 
      /* Turn off syntaxcheck option to perform following steps  */ 
      options nosyntaxcheck;
      
      proc contents data = work.W1OE4AV4X out = work.etls_contents(keep = nobs) noprint; 
      run; 
      
      data _null_; 
         set work.etls_contents (obs = 1); 
         call symput("etls_recnt", left(put(nobs,32.))); 
      run;
      
      proc datasets lib = work nolist nowarn memtype = (data view);
         delete etls_contents;
      quit;
      
      /* Reset syntaxcheck option to previous setting  */ 
      options &etls_syntaxcheck; 
   %end;
%mend etls_recordCheck;
%etls_recordCheck;

%let SYS_SQL_IP_SPEEDO = Y;
%let SYS_SQL_MAPPUTTO = sas_put;
%let SYS_SQLREDUCEPUT = DBMS;
%global etls_sql_pushDown;
%let etls_sql_pushDown = -1;
option DBIDIRECTEXEC;

proc datasets lib = work nolist nowarn memtype = (data view);
   delete W1OE4FICV;
quit;

proc sql;
   create table work.W1OE4FICV as
   select
      W1OE4AV4X.ACCOUNT_RK length = 8   
         format = 11.
         informat = 11.
         label = 'ACCOUNT_RK',
      W1OE4AV4X.ACCOUNT_REGISTRATION_NM length = 100   
         format = $100.
         informat = $100.
         label = 'ACCOUNT_REGISTRATION_NM',
      W1OE4AV4X.ALTERNATE_ACCOUNT_NM length = 40   
         format = $40.
         informat = $40.
         label = 'ALTERNATE_ACCOUNT_NM',
      W1OE4AV4X.OPEN_DT length = 8   
         format = DATETIME20.
         informat = DATETIME20.
         label = 'OPEN_DT',
      W1OE4AV4X.MATURITY_DT length = 8   
         format = DATETIME20.
         informat = DATETIME20.
         label = 'MATURITY_DT',
      W1OE4AV4X.FINANCIAL_INSTRUMENT_TYPE_CD length = 3   
         format = $3.
         informat = $3.
         label = 'FINANCIAL_INSTRUMENT_TYPE_CD',
      W1OE4C4CJ.MATURITY_DT as MATURITY_DT1 length = 8   
         format = DATETIME20.
         informat = DATETIME20.
         label = 'MATURITY_DT',
      W1OE4AV4X.FINANCIAL_INSTRUMENT_RK length = 8   
         format = 11.
         informat = 11.
         label = 'FINANCIAL_INSTRUMENT_RK',
      W1OE4AV4X.IRB_SRC_INSTRUMENT_ID length = 32   
         format = $32.
         informat = $32.
         label = 'IRB_SRC_INSTRUMENT_ID'
   from
      work.W1OE4AV4X inner join 
      work.W1OE4C4CJ
         on
         (
            W1OE4AV4X.ACCOUNT_RK = W1OE4C4CJ.ACCOUNT_RK
            and W1OE4AV4X.FINANCIAL_INSTRUMENT_RK = W1OE4C4CJ.FINANCIAL_INSTRUMENT_RK
         )
   where
      W1OE4AV4X.MATURITY_DT <> W1OE4C4CJ.MATURITY_DT
      and W1OE4AV4X.MATURITY_DT NOT IS MISSING 
      and W1OE4C4CJ.MATURITY_DT NOT IS MISSING 
   ;
quit;

%global etls_sql_pushDown;
%let etls_sql_pushDown = &sys_sql_ip_all;

%rcSet(&sqlrc); 



/**  Step end SQL Join **/

/*==========================================================================* 
 * Step:            SQL Join                              A5ELGGF9.AK0000ZD * 
 * Transform:       Join                                                    * 
 * Description:     3.2 Доп.проверка условий DQ                             * 
 *                                                                          * 
 * Source Tables:   SQL Join - work.W1OE4AV4X             A5ELGGF9.AF0000E1 * 
 *                  SQL Join - work.WGJE1WQ               A5ELGGF9.AF0000E3 * 
 * Target Table:    SQL Join - work.WH0YTJK               A5ELGGF9.AF0000EE * 
 *==========================================================================*/ 

%let transformID = %quote(A5ELGGF9.AK0000ZD);
%let trans_rc = 0;
%let etls_stepStartTime = %sysfunc(datetime(), datetime20.); 

%let etls_recCheckExist = 0; 
%let etls_recnt = 0; 
%macro etls_recordCheck; 
   %let etls_recCheckExist = %eval(%sysfunc(exist(work.W1OE4AV4X, DATA)) or 
         %sysfunc(exist(work.W1OE4AV4X, VIEW))); 
   
   %if (&etls_recCheckExist) %then
   %do;
      %local etls_syntaxcheck; 
      %let etls_syntaxcheck = %sysfunc(getoption(syntaxcheck)); 
      /* Turn off syntaxcheck option to perform following steps  */ 
      options nosyntaxcheck;
      
      proc contents data = work.W1OE4AV4X out = work.etls_contents(keep = nobs) noprint; 
      run; 
      
      data _null_; 
         set work.etls_contents (obs = 1); 
         call symput("etls_recnt", left(put(nobs,32.))); 
      run;
      
      proc datasets lib = work nolist nowarn memtype = (data view);
         delete etls_contents;
      quit;
      
      /* Reset syntaxcheck option to previous setting  */ 
      options &etls_syntaxcheck; 
   %end;
%mend etls_recordCheck;
%etls_recordCheck;

%let SYS_SQL_IP_SPEEDO = Y;
%let SYS_SQL_MAPPUTTO = sas_put;
%let SYS_SQLREDUCEPUT = DBMS;
%global etls_sql_pushDown;
%let etls_sql_pushDown = -1;
option DBIDIRECTEXEC;

proc datasets lib = work nolist nowarn memtype = (data view);
   delete WH0YTJK;
quit;

proc sql;
   create view work.WH0YTJK as
   select
      W1OE4AV4X.ACCOUNT_RK length = 8   
         format = 11.
         informat = 11.
         label = 'ACCOUNT_RK',
      W1OE4AV4X.FINANCIAL_INSTRUMENT_RK length = 8   
         format = 11.
         informat = 11.
         label = 'FINANCIAL_INSTRUMENT_RK',
      W1OE4AV4X.ACCOUNT_REGISTRATION_NM length = 100   
         format = $100.
         informat = $100.
         label = 'ACCOUNT_REGISTRATION_NM',
      W1OE4AV4X.ALTERNATE_ACCOUNT_NM length = 40   
         format = $40.
         informat = $40.
         label = 'ALTERNATE_ACCOUNT_NM',
      W1OE4AV4X.OPEN_DT length = 8   
         format = DATETIME20.
         informat = DATETIME20.
         label = 'OPEN_DT',
      W1OE4AV4X.MATURITY_DT length = 8   
         format = DATETIME20.
         informat = DATETIME20.
         label = 'MATURITY_DT',
      W1OE4AV4X.FINANCIAL_INSTRUMENT_TYPE_CD length = 3   
         format = $3.
         informat = $3.
         label = 'FINANCIAL_INSTRUMENT_TYPE_CD',
      W1OE4AV4X.IRB_SRC_INSTRUMENT_ID length = 32   
         format = $32.
         informat = $32.
         label = 'IRB_SRC_INSTRUMENT_ID',
      WGJE1WQ.MATURITY_DT1 length = 8   
         format = DATETIME20.
         informat = DATETIME20.
         label = 'MATURITY_DT'
   from
      work.W1OE4AV4X inner join 
      work.WGJE1WQ
         on
         (
            W1OE4AV4X.ACCOUNT_RK = WGJE1WQ.ACCOUNT_RK
            and W1OE4AV4X.FINANCIAL_INSTRUMENT_RK = WGJE1WQ.FINANCIAL_INSTRUMENT_RK
         )
   where
      W1OE4AV4X.MATURITY_DT <> WGJE1WQ.MATURITY_DT1
      and W1OE4AV4X.MATURITY_DT NOT IS MISSING 
      and WGJE1WQ.MATURITY_DT1 NOT IS MISSING 
   ;
quit;

%global etls_sql_pushDown;
%let etls_sql_pushDown = &sys_sql_ip_all;

%rcSet(&sqlrc); 



/**  Step end SQL Join **/

/*==========================================================================* 
 * Step:            Append                                A5ELGGF9.AK0000ZE * 
 * Transform:       Append                                                  * 
 * Description:                                                             * 
 *                                                                          * 
 * Source Tables:   SQL Join - work.W1OE4FICV             A5ELGGF9.AF0000ED * 
 *                  SQL Join - work.WH0YTJK               A5ELGGF9.AF0000EE * 
 * Target Table:    Append - work.WH61BHJ                 A5ELGGF9.AF0000EF * 
 *==========================================================================*/ 

%let transformID = %quote(A5ELGGF9.AK0000ZE);
%let trans_rc = 0;
%let etls_stepStartTime = %sysfunc(datetime(), datetime20.); 

%let etls_recCheckExist = 0; 
%let etls_recnt = 0; 
%macro etls_recordCheck; 
   %let etls_recCheckExist = %eval(%sysfunc(exist(work.W1OE4FICV, DATA)) or 
         %sysfunc(exist(work.W1OE4FICV, VIEW))); 
   
   %if (&etls_recCheckExist) %then
   %do;
      %local etls_syntaxcheck; 
      %let etls_syntaxcheck = %sysfunc(getoption(syntaxcheck)); 
      /* Turn off syntaxcheck option to perform following steps  */ 
      options nosyntaxcheck;
      
      proc contents data = work.W1OE4FICV out = work.etls_contents(keep = nobs) noprint; 
      run; 
      
      data _null_; 
         set work.etls_contents (obs = 1); 
         call symput("etls_recnt", left(put(nobs,32.))); 
      run;
      
      proc datasets lib = work nolist nowarn memtype = (data view);
         delete etls_contents;
      quit;
      
      /* Reset syntaxcheck option to previous setting  */ 
      options &etls_syntaxcheck; 
   %end;
%mend etls_recordCheck;
%etls_recordCheck;

%let dbxrc = %eval(%sysfunc(exist(work.W1OE4FICV, DATA)) or 
      %sysfunc(exist(work.W1OE4FICV, VIEW))); 

%let dbxrc = %eval(%sysfunc(exist(work.WH0YTJK, DATA)) or 
      %sysfunc(exist(work.WH0YTJK, VIEW))); 

proc datasets lib = work nolist nowarn memtype = (data view);
   delete WH61BHJ;
quit;

data work.WH61BHJ / view=work.WH61BHJ;
   set work.W1OE4FICV
       work.WH0YTJK;
   keep ACCOUNT_RK ACCOUNT_REGISTRATION_NM ALTERNATE_ACCOUNT_NM OPEN_DT MATURITY_DT 
    FINANCIAL_INSTRUMENT_TYPE_CD MATURITY_DT1 FINANCIAL_INSTRUMENT_RK 
    IRB_SRC_INSTRUMENT_ID; 
run;

%rcSet(&syserr); 



/**  Step end Append **/

/*==========================================================================* 
 * Step:            SQL Join                              A5ELGGF9.AK0000ZF * 
 * Transform:       Join                                                    * 
 * Description:     4.1 Проверка условий DQ                                 * 
 *                                                                          * 
 * Source Tables:   SQL Join - work.W1OBBYRRU             A5ELGGF9.AF0000DU * 
 *                  SQL Join1 - work.W1OBC7H8H            A5ELGGF9.AF0000DV * 
 * Target Table:    SQL Join - work.W1OFJO5AE             A5ELGGF9.AF0000EG * 
 *==========================================================================*/ 

%let transformID = %quote(A5ELGGF9.AK0000ZF);
%let trans_rc = 0;
%let etls_stepStartTime = %sysfunc(datetime(), datetime20.); 

%let etls_recCheckExist = 0; 
%let etls_recnt = 0; 
%macro etls_recordCheck; 
   %let etls_recCheckExist = %eval(%sysfunc(exist(work.W1OBBYRRU, DATA)) or 
         %sysfunc(exist(work.W1OBBYRRU, VIEW))); 
   
   %if (&etls_recCheckExist) %then
   %do;
      %local etls_syntaxcheck; 
      %let etls_syntaxcheck = %sysfunc(getoption(syntaxcheck)); 
      /* Turn off syntaxcheck option to perform following steps  */ 
      options nosyntaxcheck;
      
      proc contents data = work.W1OBBYRRU out = work.etls_contents(keep = nobs) noprint; 
      run; 
      
      data _null_; 
         set work.etls_contents (obs = 1); 
         call symput("etls_recnt", left(put(nobs,32.))); 
      run;
      
      proc datasets lib = work nolist nowarn memtype = (data view);
         delete etls_contents;
      quit;
      
      /* Reset syntaxcheck option to previous setting  */ 
      options &etls_syntaxcheck; 
   %end;
%mend etls_recordCheck;
%etls_recordCheck;

%let SYS_SQL_IP_SPEEDO = Y;
%let SYS_SQL_MAPPUTTO = sas_put;
%let SYS_SQLREDUCEPUT = DBMS;
%global etls_sql_pushDown;
%let etls_sql_pushDown = -1;
option DBIDIRECTEXEC;

proc datasets lib = work nolist nowarn memtype = (data view);
   delete W1OFJO5AE;
quit;

proc sql;
   create table work.W1OFJO5AE as
   select
      W1OBBYRRU.ACCOUNT_RK length = 8   
         format = 11.
         informat = 11.
         label = 'ACCOUNT_RK',
      W1OBBYRRU.ACCOUNT_REGISTRATION_NM length = 100   
         format = $100.
         informat = $100.
         label = 'ACCOUNT_REGISTRATION_NM',
      W1OBBYRRU.ALTERNATE_ACCOUNT_NM length = 40   
         format = $40.
         informat = $40.
         label = 'ALTERNATE_ACCOUNT_NM',
      W1OBBYRRU.OPEN_DT length = 8   
         format = DATETIME20.
         informat = DATETIME20.
         label = 'OPEN_DT',
      W1OBBYRRU.INTEREST_PAYMENT_TYPE_CD length = 3   
         format = $3.
         informat = $3.
         label = 'INTEREST_PAYMENT_TYPE_CD',
      W1OBBYRRU.IRB_SRC_ACCOUNT_ID length = 32   
         format = $32.
         informat = $32.
         label = 'IRB_SRC_ACCOUNT_ID',
      W1OBC7H8H.INTEREST_PAYMENT_TYPE_CD1 length = 3   
         format = $3.
         informat = $3.
         label = 'INTEREST_PAYMENT_TYPE_CD'
   from
      work.W1OBBYRRU inner join 
      work.W1OBC7H8H
         on
         (
            W1OBBYRRU.ACCOUNT_RK = W1OBC7H8H.ACCOUNT_RK
         )
   where
      W1OBBYRRU.INTEREST_PAYMENT_TYPE_CD <> W1OBC7H8H.INTEREST_PAYMENT_TYPE_CD1
   ;
quit;

%global etls_sql_pushDown;
%let etls_sql_pushDown = &sys_sql_ip_all;

%rcSet(&sqlrc); 



/**  Step end SQL Join **/

/*==========================================================================* 
 * Step:            SQL Join                              A5ELGGF9.AK0000ZG * 
 * Transform:       Join                                                    * 
 * Description:     4.1 Доп.проверка условий DQ                             * 
 *                                                                          * 
 * Source Tables:   SQL Join - work.W1OBBYRRU             A5ELGGF9.AF0000DU * 
 *                  SQL Join - work.WWA8Y5G               A5ELGGF9.AF0000DX * 
 * Target Table:    SQL Join - work.WHRHENJ               A5ELGGF9.AF0000EH * 
 *==========================================================================*/ 

%let transformID = %quote(A5ELGGF9.AK0000ZG);
%let trans_rc = 0;
%let etls_stepStartTime = %sysfunc(datetime(), datetime20.); 

%let etls_recCheckExist = 0; 
%let etls_recnt = 0; 
%macro etls_recordCheck; 
   %let etls_recCheckExist = %eval(%sysfunc(exist(work.W1OBBYRRU, DATA)) or 
         %sysfunc(exist(work.W1OBBYRRU, VIEW))); 
   
   %if (&etls_recCheckExist) %then
   %do;
      %local etls_syntaxcheck; 
      %let etls_syntaxcheck = %sysfunc(getoption(syntaxcheck)); 
      /* Turn off syntaxcheck option to perform following steps  */ 
      options nosyntaxcheck;
      
      proc contents data = work.W1OBBYRRU out = work.etls_contents(keep = nobs) noprint; 
      run; 
      
      data _null_; 
         set work.etls_contents (obs = 1); 
         call symput("etls_recnt", left(put(nobs,32.))); 
      run;
      
      proc datasets lib = work nolist nowarn memtype = (data view);
         delete etls_contents;
      quit;
      
      /* Reset syntaxcheck option to previous setting  */ 
      options &etls_syntaxcheck; 
   %end;
%mend etls_recordCheck;
%etls_recordCheck;

%let SYS_SQL_IP_SPEEDO = Y;
%let SYS_SQL_MAPPUTTO = sas_put;
%let SYS_SQLREDUCEPUT = DBMS;
%global etls_sql_pushDown;
%let etls_sql_pushDown = -1;
option DBIDIRECTEXEC;

proc datasets lib = work nolist nowarn memtype = (data view);
   delete WHRHENJ;
quit;

proc sql;
   create view work.WHRHENJ as
   select
      W1OBBYRRU.ACCOUNT_RK length = 8   
         format = 11.
         informat = 11.
         label = 'ACCOUNT_RK',
      W1OBBYRRU.ACCOUNT_REGISTRATION_NM length = 100   
         format = $100.
         informat = $100.
         label = 'ACCOUNT_REGISTRATION_NM',
      W1OBBYRRU.ALTERNATE_ACCOUNT_NM length = 40   
         format = $40.
         informat = $40.
         label = 'ALTERNATE_ACCOUNT_NM',
      W1OBBYRRU.OPEN_DT length = 8   
         format = DATETIME20.
         informat = DATETIME20.
         label = 'OPEN_DT',
      W1OBBYRRU.IRB_SRC_ACCOUNT_ID length = 32   
         format = $32.
         informat = $32.
         label = 'IRB_SRC_ACCOUNT_ID',
      W1OBBYRRU.INTEREST_PAYMENT_TYPE_CD length = 3   
         format = $3.
         informat = $3.
         label = 'INTEREST_PAYMENT_TYPE_CD',
      WWA8Y5G.INTEREST_PAYMENT_TYPE_CD1 length = 3   
         format = $3.
         informat = $3.
         label = 'INTEREST_PAYMENT_TYPE_CD'
   from
      work.W1OBBYRRU inner join 
      work.WWA8Y5G
         on
         (
            W1OBBYRRU.ACCOUNT_RK = WWA8Y5G.ACCOUNT_RK
         )
   where
      W1OBBYRRU.INTEREST_PAYMENT_TYPE_CD <> WWA8Y5G.INTEREST_PAYMENT_TYPE_CD1
      and WWA8Y5G.INTEREST_PAYMENT_TYPE_CD1 NOT IS MISSING 
   ;
quit;

%global etls_sql_pushDown;
%let etls_sql_pushDown = &sys_sql_ip_all;

%rcSet(&sqlrc); 



/**  Step end SQL Join **/

/*==========================================================================* 
 * Step:            Append                                A5ELGGF9.AK0000ZH * 
 * Transform:       Append                                                  * 
 * Description:                                                             * 
 *                                                                          * 
 * Source Tables:   SQL Join - work.W1OFJO5AE             A5ELGGF9.AF0000EG * 
 *                  SQL Join - work.WHRHENJ               A5ELGGF9.AF0000EH * 
 * Target Table:    Append - work.WHRXIBC                 A5ELGGF9.AF0000EI * 
 *==========================================================================*/ 

%let transformID = %quote(A5ELGGF9.AK0000ZH);
%let trans_rc = 0;
%let etls_stepStartTime = %sysfunc(datetime(), datetime20.); 

%let etls_recCheckExist = 0; 
%let etls_recnt = 0; 
%macro etls_recordCheck; 
   %let etls_recCheckExist = %eval(%sysfunc(exist(work.W1OFJO5AE, DATA)) or 
         %sysfunc(exist(work.W1OFJO5AE, VIEW))); 
   
   %if (&etls_recCheckExist) %then
   %do;
      %local etls_syntaxcheck; 
      %let etls_syntaxcheck = %sysfunc(getoption(syntaxcheck)); 
      /* Turn off syntaxcheck option to perform following steps  */ 
      options nosyntaxcheck;
      
      proc contents data = work.W1OFJO5AE out = work.etls_contents(keep = nobs) noprint; 
      run; 
      
      data _null_; 
         set work.etls_contents (obs = 1); 
         call symput("etls_recnt", left(put(nobs,32.))); 
      run;
      
      proc datasets lib = work nolist nowarn memtype = (data view);
         delete etls_contents;
      quit;
      
      /* Reset syntaxcheck option to previous setting  */ 
      options &etls_syntaxcheck; 
   %end;
%mend etls_recordCheck;
%etls_recordCheck;

%let dbxrc = %eval(%sysfunc(exist(work.W1OFJO5AE, DATA)) or 
      %sysfunc(exist(work.W1OFJO5AE, VIEW))); 

%let dbxrc = %eval(%sysfunc(exist(work.WHRHENJ, DATA)) or 
      %sysfunc(exist(work.WHRHENJ, VIEW))); 

proc datasets lib = work nolist nowarn memtype = (data view);
   delete WHRXIBC;
quit;

data work.WHRXIBC / view=work.WHRXIBC;
   set work.W1OFJO5AE
       work.WHRHENJ;
   keep ACCOUNT_RK ACCOUNT_REGISTRATION_NM ALTERNATE_ACCOUNT_NM OPEN_DT 
    INTEREST_PAYMENT_TYPE_CD IRB_SRC_ACCOUNT_ID INTEREST_PAYMENT_TYPE_CD1; 
run;

%rcSet(&syserr); 



/**  Step end Append **/

/*==========================================================================* 
 * Step:            SQL Join                              A5ELGGF9.AK0000ZI * 
 * Transform:       Join                                                    * 
 * Description:     4.2 Проверка условий DQ                                 * 
 *                                                                          * 
 * Source Tables:   SQL Join - work.W1OBTGQ5O             A5ELGGF9.AF0000DY * 
 *                  SQL Join1 - work.W1OBTS2DU            A5ELGGF9.AF0000DZ * 
 * Target Table:    SQL Join - work.W1OFJQEJQ             A5ELGGF9.AF0000EJ * 
 *==========================================================================*/ 

%let transformID = %quote(A5ELGGF9.AK0000ZI);
%let trans_rc = 0;
%let etls_stepStartTime = %sysfunc(datetime(), datetime20.); 

%let etls_recCheckExist = 0; 
%let etls_recnt = 0; 
%macro etls_recordCheck; 
   %let etls_recCheckExist = %eval(%sysfunc(exist(work.W1OBTGQ5O, DATA)) or 
         %sysfunc(exist(work.W1OBTGQ5O, VIEW))); 
   
   %if (&etls_recCheckExist) %then
   %do;
      %local etls_syntaxcheck; 
      %let etls_syntaxcheck = %sysfunc(getoption(syntaxcheck)); 
      /* Turn off syntaxcheck option to perform following steps  */ 
      options nosyntaxcheck;
      
      proc contents data = work.W1OBTGQ5O out = work.etls_contents(keep = nobs) noprint; 
      run; 
      
      data _null_; 
         set work.etls_contents (obs = 1); 
         call symput("etls_recnt", left(put(nobs,32.))); 
      run;
      
      proc datasets lib = work nolist nowarn memtype = (data view);
         delete etls_contents;
      quit;
      
      /* Reset syntaxcheck option to previous setting  */ 
      options &etls_syntaxcheck; 
   %end;
%mend etls_recordCheck;
%etls_recordCheck;

%let SYS_SQL_IP_SPEEDO = Y;
%let SYS_SQL_MAPPUTTO = sas_put;
%let SYS_SQLREDUCEPUT = DBMS;
%global etls_sql_pushDown;
%let etls_sql_pushDown = -1;
option DBIDIRECTEXEC;

proc datasets lib = work nolist nowarn memtype = (data view);
   delete W1OFJQEJQ;
quit;

proc sql;
   create table work.W1OFJQEJQ as
   select
      W1OBTGQ5O.ACCOUNT_RK length = 8   
         format = 11.
         informat = 11.
         label = 'ACCOUNT_RK',
      W1OBTGQ5O.ACCOUNT_REGISTRATION_NM length = 100   
         format = $100.
         informat = $100.
         label = 'ACCOUNT_REGISTRATION_NM',
      W1OBTGQ5O.ALTERNATE_ACCOUNT_NM length = 40   
         format = $40.
         informat = $40.
         label = 'ALTERNATE_ACCOUNT_NM',
      W1OBTGQ5O.OPEN_DT length = 8   
         format = DATETIME20.
         informat = DATETIME20.
         label = 'OPEN_DT',
      W1OBTGQ5O.INTEREST_PAYMENT_TYPE_CD length = 3   
         format = $3.
         informat = $3.
         label = 'INTEREST_PAYMENT_TYPE_CD',
      W1OBTGQ5O.FINANCIAL_INSTRUMENT_RK length = 8   
         format = 11.
         informat = 11.
         label = 'FINANCIAL_INSTRUMENT_RK',
      W1OBTS2DU.INTEREST_PAYMENT_TYPE_CD1 length = 3   
         format = $3.
         informat = $3.
         label = 'INTEREST_PAYMENT_TYPE_CD',
      W1OBTGQ5O.IRB_SRC_INSTRUMENT_ID length = 32   
         format = $32.
         informat = $32.
         label = 'IRB_SRC_INSTRUMENT_ID',
      W1OBTGQ5O.FINANCIAL_INSTRUMENT_TYPE_CD length = 3   
         format = $3.
         informat = $3.
         label = 'FINANCIAL_INSTRUMENT_TYPE_CD'
   from
      work.W1OBTGQ5O inner join 
      work.W1OBTS2DU
         on
         (
            W1OBTGQ5O.ACCOUNT_RK = W1OBTS2DU.ACCOUNT_RK
            and W1OBTGQ5O.FINANCIAL_INSTRUMENT_RK = W1OBTS2DU.FINANCIAL_INSTRUMENT_RK
         )
   where
      W1OBTGQ5O.INTEREST_PAYMENT_TYPE_CD <> W1OBTS2DU.INTEREST_PAYMENT_TYPE_CD1
   ;
quit;

%global etls_sql_pushDown;
%let etls_sql_pushDown = &sys_sql_ip_all;

%rcSet(&sqlrc); 



/**  Step end SQL Join **/

/*==========================================================================* 
 * Step:            SQL Join                              A5ELGGF9.AK0000ZJ * 
 * Transform:       Join                                                    * 
 * Description:     4.2 Доп.проверка условий DQ                             * 
 *                                                                          * 
 * Source Tables:   SQL Join - work.W1OBTGQ5O             A5ELGGF9.AF0000DY * 
 *                  SQL Join - work.W3VG919               A5ELGGF9.AF0000E0 * 
 * Target Table:    SQL Join - work.WSLWCPV               A5ELGGF9.AF0000EK * 
 *==========================================================================*/ 

%let transformID = %quote(A5ELGGF9.AK0000ZJ);
%let trans_rc = 0;
%let etls_stepStartTime = %sysfunc(datetime(), datetime20.); 

%let etls_recCheckExist = 0; 
%let etls_recnt = 0; 
%macro etls_recordCheck; 
   %let etls_recCheckExist = %eval(%sysfunc(exist(work.W1OBTGQ5O, DATA)) or 
         %sysfunc(exist(work.W1OBTGQ5O, VIEW))); 
   
   %if (&etls_recCheckExist) %then
   %do;
      %local etls_syntaxcheck; 
      %let etls_syntaxcheck = %sysfunc(getoption(syntaxcheck)); 
      /* Turn off syntaxcheck option to perform following steps  */ 
      options nosyntaxcheck;
      
      proc contents data = work.W1OBTGQ5O out = work.etls_contents(keep = nobs) noprint; 
      run; 
      
      data _null_; 
         set work.etls_contents (obs = 1); 
         call symput("etls_recnt", left(put(nobs,32.))); 
      run;
      
      proc datasets lib = work nolist nowarn memtype = (data view);
         delete etls_contents;
      quit;
      
      /* Reset syntaxcheck option to previous setting  */ 
      options &etls_syntaxcheck; 
   %end;
%mend etls_recordCheck;
%etls_recordCheck;

%let SYS_SQL_IP_SPEEDO = Y;
%let SYS_SQL_MAPPUTTO = sas_put;
%let SYS_SQLREDUCEPUT = DBMS;
%global etls_sql_pushDown;
%let etls_sql_pushDown = -1;
option DBIDIRECTEXEC;

proc datasets lib = work nolist nowarn memtype = (data view);
   delete WSLWCPV;
quit;

proc sql;
   create view work.WSLWCPV as
   select
      W1OBTGQ5O.ACCOUNT_RK length = 8   
         format = 11.
         informat = 11.
         label = 'ACCOUNT_RK',
      W1OBTGQ5O.ACCOUNT_REGISTRATION_NM length = 100   
         format = $100.
         informat = $100.
         label = 'ACCOUNT_REGISTRATION_NM',
      W1OBTGQ5O.ALTERNATE_ACCOUNT_NM length = 40   
         format = $40.
         informat = $40.
         label = 'ALTERNATE_ACCOUNT_NM',
      W1OBTGQ5O.OPEN_DT length = 8   
         format = DATETIME20.
         informat = DATETIME20.
         label = 'OPEN_DT',
      W1OBTGQ5O.FINANCIAL_INSTRUMENT_RK length = 8   
         format = 11.
         informat = 11.
         label = 'FINANCIAL_INSTRUMENT_RK',
      W1OBTGQ5O.FINANCIAL_INSTRUMENT_TYPE_CD length = 3   
         format = $3.
         informat = $3.
         label = 'FINANCIAL_INSTRUMENT_TYPE_CD',
      W1OBTGQ5O.INTEREST_PAYMENT_TYPE_CD length = 3   
         format = $3.
         informat = $3.
         label = 'INTEREST_PAYMENT_TYPE_CD',
      W1OBTGQ5O.IRB_SRC_INSTRUMENT_ID length = 32   
         format = $32.
         informat = $32.
         label = 'IRB_SRC_INSTRUMENT_ID',
      W3VG919.INTEREST_PAYMENT_TYPE_CD1 length = 3   
         format = $3.
         informat = $3.
         label = 'INTEREST_PAYMENT_TYPE_CD'
   from
      work.W1OBTGQ5O inner join 
      work.W3VG919
         on
         (
            W1OBTGQ5O.ACCOUNT_RK = W3VG919.ACCOUNT_RK
            and W1OBTGQ5O.FINANCIAL_INSTRUMENT_RK = W3VG919.FINANCIAL_INSTRUMENT_RK
         )
   where
      W1OBTGQ5O.INTEREST_PAYMENT_TYPE_CD <> W3VG919.INTEREST_PAYMENT_TYPE_CD1
      and W3VG919.INTEREST_PAYMENT_TYPE_CD1 NOT IS MISSING 
   ;
quit;

%global etls_sql_pushDown;
%let etls_sql_pushDown = &sys_sql_ip_all;

%rcSet(&sqlrc); 



/**  Step end SQL Join **/

/*==========================================================================* 
 * Step:            Append                                A5ELGGF9.AK0000ZK * 
 * Transform:       Append                                                  * 
 * Description:                                                             * 
 *                                                                          * 
 * Source Tables:   SQL Join - work.W1OFJQEJQ             A5ELGGF9.AF0000EJ * 
 *                  SQL Join - work.WSLWCPV               A5ELGGF9.AF0000EK * 
 * Target Table:    Append - work.WSO9IL2                 A5ELGGF9.AF0000EL * 
 *==========================================================================*/ 

%let transformID = %quote(A5ELGGF9.AK0000ZK);
%let trans_rc = 0;
%let etls_stepStartTime = %sysfunc(datetime(), datetime20.); 

%let etls_recCheckExist = 0; 
%let etls_recnt = 0; 
%macro etls_recordCheck; 
   %let etls_recCheckExist = %eval(%sysfunc(exist(work.W1OFJQEJQ, DATA)) or 
         %sysfunc(exist(work.W1OFJQEJQ, VIEW))); 
   
   %if (&etls_recCheckExist) %then
   %do;
      %local etls_syntaxcheck; 
      %let etls_syntaxcheck = %sysfunc(getoption(syntaxcheck)); 
      /* Turn off syntaxcheck option to perform following steps  */ 
      options nosyntaxcheck;
      
      proc contents data = work.W1OFJQEJQ out = work.etls_contents(keep = nobs) noprint; 
      run; 
      
      data _null_; 
         set work.etls_contents (obs = 1); 
         call symput("etls_recnt", left(put(nobs,32.))); 
      run;
      
      proc datasets lib = work nolist nowarn memtype = (data view);
         delete etls_contents;
      quit;
      
      /* Reset syntaxcheck option to previous setting  */ 
      options &etls_syntaxcheck; 
   %end;
%mend etls_recordCheck;
%etls_recordCheck;

%let dbxrc = %eval(%sysfunc(exist(work.W1OFJQEJQ, DATA)) or 
      %sysfunc(exist(work.W1OFJQEJQ, VIEW))); 

%let dbxrc = %eval(%sysfunc(exist(work.WSLWCPV, DATA)) or 
      %sysfunc(exist(work.WSLWCPV, VIEW))); 

proc datasets lib = work nolist nowarn memtype = (data view);
   delete WSO9IL2;
quit;

data work.WSO9IL2 / view=work.WSO9IL2;
   set work.W1OFJQEJQ
       work.WSLWCPV;
   keep ACCOUNT_RK ACCOUNT_REGISTRATION_NM ALTERNATE_ACCOUNT_NM OPEN_DT 
    INTEREST_PAYMENT_TYPE_CD FINANCIAL_INSTRUMENT_RK INTEREST_PAYMENT_TYPE_CD1 
    IRB_SRC_INSTRUMENT_ID FINANCIAL_INSTRUMENT_TYPE_CD; 
run;

%rcSet(&syserr); 



/**  Step end Append **/

/*==========================================================================* 
 * Step:            SQL Join                              A5ELGGF9.AK0000ZL * 
 * Transform:       Join                                                    * 
 * Description:     5.1 Проверка условий DQ                                 * 
 *                                                                          * 
 * Source Tables:   SQL Join - work.W1OBBYRRU             A5ELGGF9.AF0000DU * 
 *                  SQL Join1 - work.W1OBC7H8H            A5ELGGF9.AF0000DV * 
 * Target Table:    SQL Join - work.W1OP0NMMP             A5ELGGF9.AF0000EM * 
 *==========================================================================*/ 

%let transformID = %quote(A5ELGGF9.AK0000ZL);
%let trans_rc = 0;
%let etls_stepStartTime = %sysfunc(datetime(), datetime20.); 

%let etls_recCheckExist = 0; 
%let etls_recnt = 0; 
%macro etls_recordCheck; 
   %let etls_recCheckExist = %eval(%sysfunc(exist(work.W1OBBYRRU, DATA)) or 
         %sysfunc(exist(work.W1OBBYRRU, VIEW))); 
   
   %if (&etls_recCheckExist) %then
   %do;
      %local etls_syntaxcheck; 
      %let etls_syntaxcheck = %sysfunc(getoption(syntaxcheck)); 
      /* Turn off syntaxcheck option to perform following steps  */ 
      options nosyntaxcheck;
      
      proc contents data = work.W1OBBYRRU out = work.etls_contents(keep = nobs) noprint; 
      run; 
      
      data _null_; 
         set work.etls_contents (obs = 1); 
         call symput("etls_recnt", left(put(nobs,32.))); 
      run;
      
      proc datasets lib = work nolist nowarn memtype = (data view);
         delete etls_contents;
      quit;
      
      /* Reset syntaxcheck option to previous setting  */ 
      options &etls_syntaxcheck; 
   %end;
%mend etls_recordCheck;
%etls_recordCheck;

%let SYS_SQL_IP_SPEEDO = Y;
%let SYS_SQL_MAPPUTTO = sas_put;
%let SYS_SQLREDUCEPUT = DBMS;
%global etls_sql_pushDown;
%let etls_sql_pushDown = -1;
option DBIDIRECTEXEC;

proc datasets lib = work nolist nowarn memtype = (data view);
   delete W1OP0NMMP;
quit;

proc sql;
   create table work.W1OP0NMMP as
   select
      W1OBBYRRU.ACCOUNT_RK length = 8   
         format = 11.
         informat = 11.
         label = 'ACCOUNT_RK',
      W1OBBYRRU.ACCOUNT_REGISTRATION_NM length = 100   
         format = $100.
         informat = $100.
         label = 'ACCOUNT_REGISTRATION_NM',
      W1OBBYRRU.ALTERNATE_ACCOUNT_NM length = 40   
         format = $40.
         informat = $40.
         label = 'ALTERNATE_ACCOUNT_NM',
      W1OBBYRRU.OPEN_DT length = 8   
         format = DATETIME20.
         informat = DATETIME20.
         label = 'OPEN_DT',
      W1OBBYRRU.IRB_TYPE length = 2   
         format = $2.
         informat = $2.
         label = 'IRB_TYPE',
      W1OBC7H8H.IRB_TYPE1 length = 2   
         format = $2.
         informat = $2.
         label = 'IRB_TYPE',
      W1OBBYRRU.IRB_SRC_ACCOUNT_ID length = 32   
         format = $32.
         informat = $32.
         label = 'IRB_SRC_ACCOUNT_ID'
   from
      work.W1OBBYRRU inner join 
      work.W1OBC7H8H
         on
         (
            W1OBBYRRU.ACCOUNT_RK = W1OBC7H8H.ACCOUNT_RK
         )
   where
      W1OBBYRRU.IRB_TYPE <> W1OBC7H8H.IRB_TYPE1
   ;
quit;

%global etls_sql_pushDown;
%let etls_sql_pushDown = &sys_sql_ip_all;

%rcSet(&sqlrc); 



/**  Step end SQL Join **/

/*==========================================================================* 
 * Step:            SQL Join                              A5ELGGF9.AK0000ZM * 
 * Transform:       Join                                                    * 
 * Description:     5.1 Доп.проверка условий DQ                             * 
 *                                                                          * 
 * Source Tables:   SQL Join - work.W1OBBYRRU             A5ELGGF9.AF0000DU * 
 *                  SQL Join2 - work.W2WWN4H              A5ELGGF9.AF0000DW * 
 * Target Table:    SQL Join - work.WUDV0NR               A5ELGGF9.AF0000EN * 
 *==========================================================================*/ 

%let transformID = %quote(A5ELGGF9.AK0000ZM);
%let trans_rc = 0;
%let etls_stepStartTime = %sysfunc(datetime(), datetime20.); 

%let etls_recCheckExist = 0; 
%let etls_recnt = 0; 
%macro etls_recordCheck; 
   %let etls_recCheckExist = %eval(%sysfunc(exist(work.W1OBBYRRU, DATA)) or 
         %sysfunc(exist(work.W1OBBYRRU, VIEW))); 
   
   %if (&etls_recCheckExist) %then
   %do;
      %local etls_syntaxcheck; 
      %let etls_syntaxcheck = %sysfunc(getoption(syntaxcheck)); 
      /* Turn off syntaxcheck option to perform following steps  */ 
      options nosyntaxcheck;
      
      proc contents data = work.W1OBBYRRU out = work.etls_contents(keep = nobs) noprint; 
      run; 
      
      data _null_; 
         set work.etls_contents (obs = 1); 
         call symput("etls_recnt", left(put(nobs,32.))); 
      run;
      
      proc datasets lib = work nolist nowarn memtype = (data view);
         delete etls_contents;
      quit;
      
      /* Reset syntaxcheck option to previous setting  */ 
      options &etls_syntaxcheck; 
   %end;
%mend etls_recordCheck;
%etls_recordCheck;

%let SYS_SQL_IP_SPEEDO = Y;
%let SYS_SQL_MAPPUTTO = sas_put;
%let SYS_SQLREDUCEPUT = DBMS;
%global etls_sql_pushDown;
%let etls_sql_pushDown = -1;
option DBIDIRECTEXEC;

proc datasets lib = work nolist nowarn memtype = (data view);
   delete WUDV0NR;
quit;

proc sql;
   create view work.WUDV0NR as
   select
      W1OBBYRRU.ACCOUNT_RK length = 8   
         format = 11.
         informat = 11.
         label = 'ACCOUNT_RK',
      W1OBBYRRU.ACCOUNT_REGISTRATION_NM length = 100   
         format = $100.
         informat = $100.
         label = 'ACCOUNT_REGISTRATION_NM',
      W1OBBYRRU.ALTERNATE_ACCOUNT_NM length = 40   
         format = $40.
         informat = $40.
         label = 'ALTERNATE_ACCOUNT_NM',
      W1OBBYRRU.OPEN_DT length = 8   
         format = DATETIME20.
         informat = DATETIME20.
         label = 'OPEN_DT',
      W1OBBYRRU.IRB_SRC_ACCOUNT_ID length = 32   
         format = $32.
         informat = $32.
         label = 'IRB_SRC_ACCOUNT_ID',
      W1OBBYRRU.IRB_TYPE length = 2   
         format = $2.
         informat = $2.
         label = 'IRB_TYPE',
      W2WWN4H.IRB_TYPE1 length = 2   
         format = $2.
         informat = $2.
         label = 'IRB_TYPE'
   from
      work.W1OBBYRRU inner join 
      work.W2WWN4H
         on
         (
            W1OBBYRRU.ACCOUNT_RK = W2WWN4H.ACCOUNT_RK
         )
   where
      W1OBBYRRU.IRB_TYPE <> W2WWN4H.IRB_TYPE1
      and W2WWN4H.IRB_TYPE1 NOT IS MISSING 
   ;
quit;

%global etls_sql_pushDown;
%let etls_sql_pushDown = &sys_sql_ip_all;

%rcSet(&sqlrc); 



/**  Step end SQL Join **/

/*==========================================================================* 
 * Step:            Append                                A5ELGGF9.AK0000ZN * 
 * Transform:       Append                                                  * 
 * Description:                                                             * 
 *                                                                          * 
 * Source Tables:   SQL Join - work.W1OP0NMMP             A5ELGGF9.AF0000EM * 
 *                  SQL Join - work.WUDV0NR               A5ELGGF9.AF0000EN * 
 * Target Table:    Append - work.WUFQ8BJ                 A5ELGGF9.AF0000EO * 
 *==========================================================================*/ 

%let transformID = %quote(A5ELGGF9.AK0000ZN);
%let trans_rc = 0;
%let etls_stepStartTime = %sysfunc(datetime(), datetime20.); 

%let etls_recCheckExist = 0; 
%let etls_recnt = 0; 
%macro etls_recordCheck; 
   %let etls_recCheckExist = %eval(%sysfunc(exist(work.W1OP0NMMP, DATA)) or 
         %sysfunc(exist(work.W1OP0NMMP, VIEW))); 
   
   %if (&etls_recCheckExist) %then
   %do;
      %local etls_syntaxcheck; 
      %let etls_syntaxcheck = %sysfunc(getoption(syntaxcheck)); 
      /* Turn off syntaxcheck option to perform following steps  */ 
      options nosyntaxcheck;
      
      proc contents data = work.W1OP0NMMP out = work.etls_contents(keep = nobs) noprint; 
      run; 
      
      data _null_; 
         set work.etls_contents (obs = 1); 
         call symput("etls_recnt", left(put(nobs,32.))); 
      run;
      
      proc datasets lib = work nolist nowarn memtype = (data view);
         delete etls_contents;
      quit;
      
      /* Reset syntaxcheck option to previous setting  */ 
      options &etls_syntaxcheck; 
   %end;
%mend etls_recordCheck;
%etls_recordCheck;

%let dbxrc = %eval(%sysfunc(exist(work.W1OP0NMMP, DATA)) or 
      %sysfunc(exist(work.W1OP0NMMP, VIEW))); 

%let dbxrc = %eval(%sysfunc(exist(work.WUDV0NR, DATA)) or 
      %sysfunc(exist(work.WUDV0NR, VIEW))); 

proc datasets lib = work nolist nowarn memtype = (data view);
   delete WUFQ8BJ;
quit;

data work.WUFQ8BJ / view=work.WUFQ8BJ;
   set work.W1OP0NMMP
       work.WUDV0NR;
   keep ACCOUNT_RK ACCOUNT_REGISTRATION_NM ALTERNATE_ACCOUNT_NM OPEN_DT IRB_TYPE 
    IRB_TYPE1 IRB_SRC_ACCOUNT_ID; 
run;

%rcSet(&syserr); 



/**  Step end Append **/

/*==========================================================================* 
 * Step:            SQL Join                              A5ELGGF9.AK0000ZO * 
 * Transform:       Join                                                    * 
 * Description:     5.2 Проверка условий DQ                                 * 
 *                                                                          * 
 * Source Tables:   SQL Join - work.W1OE4AV4X             A5ELGGF9.AF0000E1 * 
 *                  SQL Join1 - work.W1OE4C4CJ            A5ELGGF9.AF0000E2 * 
 * Target Table:    SQL Join - work.W1OP58CA9             A5ELGGF9.AF0000EP * 
 *==========================================================================*/ 

%let transformID = %quote(A5ELGGF9.AK0000ZO);
%let trans_rc = 0;
%let etls_stepStartTime = %sysfunc(datetime(), datetime20.); 

%let etls_recCheckExist = 0; 
%let etls_recnt = 0; 
%macro etls_recordCheck; 
   %let etls_recCheckExist = %eval(%sysfunc(exist(work.W1OE4AV4X, DATA)) or 
         %sysfunc(exist(work.W1OE4AV4X, VIEW))); 
   
   %if (&etls_recCheckExist) %then
   %do;
      %local etls_syntaxcheck; 
      %let etls_syntaxcheck = %sysfunc(getoption(syntaxcheck)); 
      /* Turn off syntaxcheck option to perform following steps  */ 
      options nosyntaxcheck;
      
      proc contents data = work.W1OE4AV4X out = work.etls_contents(keep = nobs) noprint; 
      run; 
      
      data _null_; 
         set work.etls_contents (obs = 1); 
         call symput("etls_recnt", left(put(nobs,32.))); 
      run;
      
      proc datasets lib = work nolist nowarn memtype = (data view);
         delete etls_contents;
      quit;
      
      /* Reset syntaxcheck option to previous setting  */ 
      options &etls_syntaxcheck; 
   %end;
%mend etls_recordCheck;
%etls_recordCheck;

%let SYS_SQL_IP_SPEEDO = Y;
%let SYS_SQL_MAPPUTTO = sas_put;
%let SYS_SQLREDUCEPUT = DBMS;
%global etls_sql_pushDown;
%let etls_sql_pushDown = -1;
option DBIDIRECTEXEC;

proc datasets lib = work nolist nowarn memtype = (data view);
   delete W1OP58CA9;
quit;

proc sql;
   create table work.W1OP58CA9 as
   select
      W1OE4AV4X.ACCOUNT_RK length = 8   
         format = 11.
         informat = 11.
         label = 'ACCOUNT_RK',
      W1OE4AV4X.ACCOUNT_REGISTRATION_NM length = 100   
         format = $100.
         informat = $100.
         label = 'ACCOUNT_REGISTRATION_NM',
      W1OE4AV4X.ALTERNATE_ACCOUNT_NM length = 40   
         format = $40.
         informat = $40.
         label = 'ALTERNATE_ACCOUNT_NM',
      W1OE4AV4X.OPEN_DT length = 8   
         format = DATETIME20.
         informat = DATETIME20.
         label = 'OPEN_DT',
      W1OE4AV4X.IRB_TYPE length = 2   
         format = $2.
         informat = $2.
         label = 'IRB_TYPE',
      W1OE4C4CJ.IRB_TYPE1 length = 2   
         format = $2.
         informat = $2.
         label = 'IRB_TYPE',
      W1OE4AV4X.FINANCIAL_INSTRUMENT_TYPE_CD length = 3   
         format = $3.
         informat = $3.
         label = 'FINANCIAL_INSTRUMENT_TYPE_CD',
      W1OE4AV4X.IRB_SRC_INSTRUMENT_ID length = 32   
         format = $32.
         informat = $32.
         label = 'IRB_SRC_INSTRUMENT_ID',
      W1OE4AV4X.FINANCIAL_INSTRUMENT_RK length = 8   
         format = 11.
         informat = 11.
         label = 'FINANCIAL_INSTRUMENT_RK'
   from
      work.W1OE4AV4X inner join 
      work.W1OE4C4CJ
         on
         (
            W1OE4AV4X.ACCOUNT_RK = W1OE4C4CJ.ACCOUNT_RK
            and W1OE4AV4X.FINANCIAL_INSTRUMENT_RK = W1OE4C4CJ.FINANCIAL_INSTRUMENT_RK
         )
   where
      W1OE4AV4X.IRB_TYPE <> W1OE4C4CJ.IRB_TYPE1
   ;
quit;

%global etls_sql_pushDown;
%let etls_sql_pushDown = &sys_sql_ip_all;

%rcSet(&sqlrc); 



/**  Step end SQL Join **/

/*==========================================================================* 
 * Step:            SQL Join                              A5ELGGF9.AK0000ZP * 
 * Transform:       Join                                                    * 
 * Description:     5.2 Доп.проверка условий DQ                             * 
 *                                                                          * 
 * Source Tables:   SQL Join - work.WGJE1WQ               A5ELGGF9.AF0000E3 * 
 *                  SQL Join - work.W1OE4AV4X             A5ELGGF9.AF0000E1 * 
 * Target Table:    SQL Join - work.WUYPZE0               A5ELGGF9.AF0000EQ * 
 *==========================================================================*/ 

%let transformID = %quote(A5ELGGF9.AK0000ZP);
%let trans_rc = 0;
%let etls_stepStartTime = %sysfunc(datetime(), datetime20.); 

%let etls_recnt = -1;
%let SYS_SQL_IP_SPEEDO = Y;
%let SYS_SQL_MAPPUTTO = sas_put;
%let SYS_SQLREDUCEPUT = DBMS;
%global etls_sql_pushDown;
%let etls_sql_pushDown = -1;
option DBIDIRECTEXEC;

proc datasets lib = work nolist nowarn memtype = (data view);
   delete WUYPZE0;
quit;

proc sql;
   create view work.WUYPZE0 as
   select
      W1OE4AV4X.ACCOUNT_RK length = 8   
         format = 11.
         informat = 11.
         label = 'ACCOUNT_RK',
      W1OE4AV4X.FINANCIAL_INSTRUMENT_RK length = 8   
         format = 11.
         informat = 11.
         label = 'FINANCIAL_INSTRUMENT_RK',
      W1OE4AV4X.ACCOUNT_REGISTRATION_NM length = 100   
         format = $100.
         informat = $100.
         label = 'ACCOUNT_REGISTRATION_NM',
      W1OE4AV4X.ALTERNATE_ACCOUNT_NM length = 40   
         format = $40.
         informat = $40.
         label = 'ALTERNATE_ACCOUNT_NM',
      W1OE4AV4X.OPEN_DT length = 8   
         format = DATETIME20.
         informat = DATETIME20.
         label = 'OPEN_DT',
      W1OE4AV4X.FINANCIAL_INSTRUMENT_TYPE_CD length = 3   
         format = $3.
         informat = $3.
         label = 'FINANCIAL_INSTRUMENT_TYPE_CD',
      W1OE4AV4X.IRB_SRC_INSTRUMENT_ID length = 32   
         format = $32.
         informat = $32.
         label = 'IRB_SRC_INSTRUMENT_ID',
      W1OE4AV4X.IRB_TYPE length = 2   
         format = $2.
         informat = $2.
         label = 'IRB_TYPE',
      WGJE1WQ.IRB_TYPE1 length = 2   
         format = $2.
         informat = $2.
         label = 'IRB_TYPE'
   from
      work.W1OE4AV4X inner join 
      work.WGJE1WQ
         on
         (
            W1OE4AV4X.ACCOUNT_RK = WGJE1WQ.ACCOUNT_RK
            and W1OE4AV4X.FINANCIAL_INSTRUMENT_RK = WGJE1WQ.FINANCIAL_INSTRUMENT_RK
         )
   where
      W1OE4AV4X.IRB_TYPE <> WGJE1WQ.IRB_TYPE1
      and WGJE1WQ.IRB_TYPE1 NOT IS MISSING 
   ;
quit;

%global etls_sql_pushDown;
%let etls_sql_pushDown = &sys_sql_ip_all;

%rcSet(&sqlrc); 



/**  Step end SQL Join **/

/*==========================================================================* 
 * Step:            Append                                A5ELGGF9.AK0000ZQ * 
 * Transform:       Append                                                  * 
 * Description:                                                             * 
 *                                                                          * 
 * Source Tables:   SQL Join - work.W1OP58CA9             A5ELGGF9.AF0000EP * 
 *                  SQL Join - work.WUYPZE0               A5ELGGF9.AF0000EQ * 
 * Target Table:    Append - work.WV21AZA                 A5ELGGF9.AF0000ER * 
 *==========================================================================*/ 

%let transformID = %quote(A5ELGGF9.AK0000ZQ);
%let trans_rc = 0;
%let etls_stepStartTime = %sysfunc(datetime(), datetime20.); 

%let etls_recCheckExist = 0; 
%let etls_recnt = 0; 
%macro etls_recordCheck; 
   %let etls_recCheckExist = %eval(%sysfunc(exist(work.W1OP58CA9, DATA)) or 
         %sysfunc(exist(work.W1OP58CA9, VIEW))); 
   
   %if (&etls_recCheckExist) %then
   %do;
      %local etls_syntaxcheck; 
      %let etls_syntaxcheck = %sysfunc(getoption(syntaxcheck)); 
      /* Turn off syntaxcheck option to perform following steps  */ 
      options nosyntaxcheck;
      
      proc contents data = work.W1OP58CA9 out = work.etls_contents(keep = nobs) noprint; 
      run; 
      
      data _null_; 
         set work.etls_contents (obs = 1); 
         call symput("etls_recnt", left(put(nobs,32.))); 
      run;
      
      proc datasets lib = work nolist nowarn memtype = (data view);
         delete etls_contents;
      quit;
      
      /* Reset syntaxcheck option to previous setting  */ 
      options &etls_syntaxcheck; 
   %end;
%mend etls_recordCheck;
%etls_recordCheck;

%let dbxrc = %eval(%sysfunc(exist(work.W1OP58CA9, DATA)) or 
      %sysfunc(exist(work.W1OP58CA9, VIEW))); 

%let dbxrc = %eval(%sysfunc(exist(work.WUYPZE0, DATA)) or 
      %sysfunc(exist(work.WUYPZE0, VIEW))); 

proc datasets lib = work nolist nowarn memtype = (data view);
   delete WV21AZA;
quit;

data work.WV21AZA / view=work.WV21AZA;
   set work.W1OP58CA9
       work.WUYPZE0;
   keep ACCOUNT_RK ACCOUNT_REGISTRATION_NM ALTERNATE_ACCOUNT_NM OPEN_DT IRB_TYPE 
    IRB_TYPE1 FINANCIAL_INSTRUMENT_TYPE_CD IRB_SRC_INSTRUMENT_ID 
    FINANCIAL_INSTRUMENT_RK; 
run;

%rcSet(&syserr); 



/**  Step end Append **/

/*==========================================================================* 
 * Step:            SQL Join                              A5ELGGF9.AK0000ZR * 
 * Transform:       Join                                                    * 
 * Description:     DCD. Проверка open_dt                                   * 
 *                                                                          * 
 * Source Tables:   SQL Join - work.W1OBBYRRU             A5ELGGF9.AF0000DU * 
 *                  SQL Join1 - work.W1OBC7H8H            A5ELGGF9.AF0000DV * 
 * Target Table:    SQL Join - work.W1PBWOHK              A5ELGGF9.AF0000ES * 
 *==========================================================================*/ 

%let transformID = %quote(A5ELGGF9.AK0000ZR);
%let trans_rc = 0;
%let etls_stepStartTime = %sysfunc(datetime(), datetime20.); 

%let etls_recCheckExist = 0; 
%let etls_recnt = 0; 
%macro etls_recordCheck; 
   %let etls_recCheckExist = %eval(%sysfunc(exist(work.W1OBBYRRU, DATA)) or 
         %sysfunc(exist(work.W1OBBYRRU, VIEW))); 
   
   %if (&etls_recCheckExist) %then
   %do;
      %local etls_syntaxcheck; 
      %let etls_syntaxcheck = %sysfunc(getoption(syntaxcheck)); 
      /* Turn off syntaxcheck option to perform following steps  */ 
      options nosyntaxcheck;
      
      proc contents data = work.W1OBBYRRU out = work.etls_contents(keep = nobs) noprint; 
      run; 
      
      data _null_; 
         set work.etls_contents (obs = 1); 
         call symput("etls_recnt", left(put(nobs,32.))); 
      run;
      
      proc datasets lib = work nolist nowarn memtype = (data view);
         delete etls_contents;
      quit;
      
      /* Reset syntaxcheck option to previous setting  */ 
      options &etls_syntaxcheck; 
   %end;
%mend etls_recordCheck;
%etls_recordCheck;

%let SYS_SQL_IP_SPEEDO = Y;
%let SYS_SQL_MAPPUTTO = sas_put;
%let SYS_SQLREDUCEPUT = DBMS;
%global etls_sql_pushDown;
%let etls_sql_pushDown = -1;
option DBIDIRECTEXEC;

proc datasets lib = work nolist nowarn memtype = (data view);
   delete W1PBWOHK;
quit;

proc sql;
   create view work.W1PBWOHK as
   select
      W1OBBYRRU.ACCOUNT_RK length = 8   
         format = 11.
         informat = 11.
         label = 'ACCOUNT_RK',
      W1OBBYRRU.ACCOUNT_REGISTRATION_NM length = 100   
         format = $100.
         informat = $100.
         label = 'ACCOUNT_REGISTRATION_NM',
      W1OBBYRRU.ALTERNATE_ACCOUNT_NM length = 40   
         format = $40.
         informat = $40.
         label = 'ALTERNATE_ACCOUNT_NM',
      W1OBBYRRU.OPEN_DT length = 8   
         format = DATETIME20.
         informat = DATETIME20.
         label = 'OPEN_DT',
      W1OBC7H8H.OPEN_DT1 length = 8   
         format = DATETIME20.
         informat = DATETIME20.
         label = 'OPEN_DT',
      substr(W1OBBYRRU.ACCOUNT_ID, 13) as IRB_SRC_ACCOUNT_ID length = 32   
         format = $32.
         informat = $32.
         label = 'IRB_SRC_ACCOUNT_ID'
   from
      work.W1OBBYRRU inner join 
      work.W1OBC7H8H
         on
         (
            W1OBBYRRU.ACCOUNT_RK = W1OBC7H8H.ACCOUNT_RK
         )
   where
      W1OBBYRRU.OPEN_DT <> W1OBC7H8H.OPEN_DT1
      and W1OBC7H8H.IRB_DUMMY_TYPE_CD IS MISSING 
   ;
quit;

%global etls_sql_pushDown;
%let etls_sql_pushDown = &sys_sql_ip_all;

%rcSet(&sqlrc); 



/**  Step end SQL Join **/

/*==========================================================================* 
 * Step:            SQL Join                              A5ELGGF9.AK0000ZS * 
 * Transform:       Join                                                    * 
 * Description:     DCD. Доп.проверка open_dt                               * 
 *                                                                          * 
 * Source Tables:   SQL Join - work.W1OBBYRRU             A5ELGGF9.AF0000DU * 
 *                  IRB_FINANCIAL_ACCOUNT_JRNL -          A569C89V.AE0000I5 * 
 *                   dwh_dds.IRB_FINANCIAL_ACCOUNT_JRNL                     * 
 * Target Table:    SQL Join - work.W1PC8IN3              A5ELGGF9.AF0000ET * 
 *==========================================================================*/ 

%let transformID = %quote(A5ELGGF9.AK0000ZS);
%let trans_rc = 0;
%let etls_stepStartTime = %sysfunc(datetime(), datetime20.); 

%let etls_recCheckExist = 0; 
%let etls_recnt = 0; 
%macro etls_recordCheck; 
   %let etls_recCheckExist = %eval(%sysfunc(exist(work.W1OBBYRRU, DATA)) or 
         %sysfunc(exist(work.W1OBBYRRU, VIEW))); 
   
   %if (&etls_recCheckExist) %then
   %do;
      %local etls_syntaxcheck; 
      %let etls_syntaxcheck = %sysfunc(getoption(syntaxcheck)); 
      /* Turn off syntaxcheck option to perform following steps  */ 
      options nosyntaxcheck;
      
      proc contents data = work.W1OBBYRRU out = work.etls_contents(keep = nobs) noprint; 
      run; 
      
      data _null_; 
         set work.etls_contents (obs = 1); 
         call symput("etls_recnt", left(put(nobs,32.))); 
      run;
      
      proc datasets lib = work nolist nowarn memtype = (data view);
         delete etls_contents;
      quit;
      
      /* Reset syntaxcheck option to previous setting  */ 
      options &etls_syntaxcheck; 
   %end;
%mend etls_recordCheck;
%etls_recordCheck;

%let SYS_SQL_IP_SPEEDO = Y;
%let SYS_SQL_MAPPUTTO = sas_put;
%let SYS_SQLREDUCEPUT = DBMS;
%global etls_sql_pushDown;
%let etls_sql_pushDown = -1;
option DBIDIRECTEXEC;

proc datasets lib = work nolist nowarn memtype = (data view);
   delete W1PC8IN3;
quit;

proc sql;
   create view work.W1PC8IN3 as
   select
      W1OBBYRRU.ACCOUNT_RK length = 8   
         format = 11.
         informat = 11.
         label = 'ACCOUNT_RK',
      W1OBBYRRU.ACCOUNT_REGISTRATION_NM length = 100   
         format = $100.
         informat = $100.
         label = 'ACCOUNT_REGISTRATION_NM',
      W1OBBYRRU.ALTERNATE_ACCOUNT_NM length = 40   
         format = $40.
         informat = $40.
         label = 'ALTERNATE_ACCOUNT_NM',
      W1OBBYRRU.OPEN_DT length = 8   
         format = DATETIME20.
         informat = DATETIME20.
         label = 'OPEN_DT',
      IRB_FINANCIAL_ACCOUNT_JRNL.OPEN_DT as OPEN_DT1 length = 8   
         format = DATETIME20.
         informat = DATETIME20.
         label = 'OPEN_DT',
      substr(W1OBBYRRU.ACCOUNT_ID, 13) as IRB_SRC_ACCOUNT_ID length = 32   
         format = $32.
         informat = $32.
         label = 'IRB_SRC_ACCOUNT_ID'
   from
      work.W1OBBYRRU inner join 
      dwh_dds.IRB_FINANCIAL_ACCOUNT_JRNL
         on
         (
            W1OBBYRRU.ACCOUNT_RK = IRB_FINANCIAL_ACCOUNT_JRNL.ACCOUNT_RK
            and datepart(IRB_FINANCIAL_ACCOUNT_JRNL.JRNL_TO_DTTM) = datepart(&REPDT2)
            and IRB_FINANCIAL_ACCOUNT_JRNL.VALID_FROM_DTTM <= &REPDT1 < IRB_FINANCIAL_ACCOUNT_JRNL.VALID_TO_DTTM
         )
   where
      W1OBBYRRU.OPEN_DT <> IRB_FINANCIAL_ACCOUNT_JRNL.OPEN_DT
      and IRB_FINANCIAL_ACCOUNT_JRNL.IRB_DUMMY_TYPE_CD IS MISSING 
      and datepart(IRB_FINANCIAL_ACCOUNT_JRNL.JRNL_FROM_DTTM) <> datepart(IRB_FINANCIAL_ACCOUNT_JRNL.JRNL_TO_DTTM)
   ;
quit;

%global etls_sql_pushDown;
%let etls_sql_pushDown = &sys_sql_ip_all;

%rcSet(&sqlrc); 



/**  Step end SQL Join **/

/*==========================================================================* 
 * Step:            Append                                A5ELGGF9.AK0000ZT * 
 * Transform:       Append                                                  * 
 * Description:                                                             * 
 *                                                                          * 
 * Source Tables:   SQL Join - work.W1PBWOHK              A5ELGGF9.AF0000ES * 
 *                  SQL Join - work.W1PC8IN3              A5ELGGF9.AF0000ET * 
 * Target Table:    Append - work.WF1Q2F                  A5ELGGF9.AF0000EU * 
 *==========================================================================*/ 

%let transformID = %quote(A5ELGGF9.AK0000ZT);
%let trans_rc = 0;
%let etls_stepStartTime = %sysfunc(datetime(), datetime20.); 

%let etls_recnt = -1;
%let dbxrc = %eval(%sysfunc(exist(work.W1PBWOHK, DATA)) or 
      %sysfunc(exist(work.W1PBWOHK, VIEW))); 

%let dbxrc = %eval(%sysfunc(exist(work.W1PC8IN3, DATA)) or 
      %sysfunc(exist(work.W1PC8IN3, VIEW))); 

proc datasets lib = work nolist nowarn memtype = (data view);
   delete WF1Q2F;
quit;

data work.WF1Q2F / view=work.WF1Q2F;
   set work.W1PBWOHK
       work.W1PC8IN3;
   keep ACCOUNT_RK ACCOUNT_REGISTRATION_NM ALTERNATE_ACCOUNT_NM OPEN_DT OPEN_DT1 
    IRB_SRC_ACCOUNT_ID; 
run;

%rcSet(&syserr); 



/**  Step end Append **/

/*==========================================================================* 
 * Step:            SQL Join                              A5ELGGF9.AK0000ZU * 
 * Transform:       Join                                                    * 
 * Description:     DRV. Проверка open_dt                                   * 
 *                                                                          * 
 * Source Tables:   FINANCIAL_ACCOUNT - work.W1OAQKQTH    A5ELGGF9.AF0000DM * 
 *                  FINANCIAL_ACCOUNT - work.W1OAWZ5SU    A5ELGGF9.AF0000DN * 
 * Target Table:    SQL Join - work.W1ZNP5T               A5ELGGF9.AF0000EV * 
 *==========================================================================*/ 

%let transformID = %quote(A5ELGGF9.AK0000ZU);
%let trans_rc = 0;
%let etls_stepStartTime = %sysfunc(datetime(), datetime20.); 

%let etls_recnt = -1;
%let SYS_SQL_IP_SPEEDO = Y;
%let SYS_SQL_MAPPUTTO = sas_put;
%let SYS_SQLREDUCEPUT = DBMS;
%global etls_sql_pushDown;
%let etls_sql_pushDown = -1;
option DBIDIRECTEXEC;

proc datasets lib = work nolist nowarn memtype = (data view);
   delete W1ZNP5T;
quit;

proc sql;
   create view work.W1ZNP5T as
   select
      W1OAQKQTH.ACCOUNT_RK length = 8   
         format = 11.
         informat = 11.
         label = 'ACCOUNT_RK',
      W1OAQKQTH.ACCOUNT_REGISTRATION_NM length = 100   
         format = $100.
         informat = $100.
         label = 'ACCOUNT_REGISTRATION_NM',
      W1OAQKQTH.ALTERNATE_ACCOUNT_NM length = 40   
         format = $40.
         informat = $40.
         label = 'ALTERNATE_ACCOUNT_NM',
      W1OAQKQTH.OPEN_DT length = 8   
         format = DATETIME20.
         informat = DATETIME20.
         label = 'OPEN_DT',
      substr(W1OAQKQTH.ACCOUNT_ID, 13) as IRB_SRC_ACCOUNT_ID length = 32   
         format = $32.
         informat = $32.
         label = 'ACCOUNT_ID',
      W1OAWZ5SU.OPEN_DT as OPEN_DT1 length = 8   
         format = DATETIME20.
         informat = DATETIME20.
         label = 'OPEN_DT'
   from
      work.W1OAQKQTH inner join 
      work.W1OAWZ5SU
         on
         (
            W1OAQKQTH.ACCOUNT_RK = W1OAWZ5SU.ACCOUNT_RK
            and W1OAQKQTH.FINANCIAL_ACCOUNT_TYPE_CD = 'DRV'
         )
   where
      W1OAQKQTH.OPEN_DT <> W1OAWZ5SU.OPEN_DT
      and W1OAWZ5SU.IRB_DUMMY_TYPE_CD IS MISSING 
   ;
quit;

%global etls_sql_pushDown;
%let etls_sql_pushDown = &sys_sql_ip_all;

%rcSet(&sqlrc); 



/**  Step end SQL Join **/

/*==========================================================================* 
 * Step:            SQL Join                              A5ELGGF9.AK0000ZV * 
 * Transform:       Join                                                    * 
 * Description:     DRV. Доп.проверка open_dt                               * 
 *                                                                          * 
 * Source Tables:   FINANCIAL_ACCOUNT - work.W1OAQKQTH    A5ELGGF9.AF0000DM * 
 *                  IRB_FINANCIAL_ACCOUNT_JRNL -          A569C89V.AE0000I5 * 
 *                   dwh_dds.IRB_FINANCIAL_ACCOUNT_JRNL                     * 
 * Target Table:    SQL Join - work.W1ZQKK3               A5ELGGF9.AF0000EW * 
 *==========================================================================*/ 

%let transformID = %quote(A5ELGGF9.AK0000ZV);
%let trans_rc = 0;
%let etls_stepStartTime = %sysfunc(datetime(), datetime20.); 

%let etls_recnt = -1;
%let SYS_SQL_IP_SPEEDO = Y;
%let SYS_SQL_MAPPUTTO = sas_put;
%let SYS_SQLREDUCEPUT = DBMS;
%global etls_sql_pushDown;
%let etls_sql_pushDown = -1;
option DBIDIRECTEXEC;

proc datasets lib = work nolist nowarn memtype = (data view);
   delete W1ZQKK3;
quit;

proc sql;
   create view work.W1ZQKK3 as
   select
      W1OAQKQTH.ACCOUNT_RK length = 8   
         format = 11.
         informat = 11.
         label = 'ACCOUNT_RK',
      substr(W1OAQKQTH.ACCOUNT_ID, 13) as IRB_SRC_ACCOUNT_ID length = 32   
         format = $32.
         informat = $32.
         label = 'ACCOUNT_ID',
      W1OAQKQTH.ACCOUNT_REGISTRATION_NM length = 100   
         format = $100.
         informat = $100.
         label = 'ACCOUNT_REGISTRATION_NM',
      W1OAQKQTH.ALTERNATE_ACCOUNT_NM length = 40   
         format = $40.
         informat = $40.
         label = 'ALTERNATE_ACCOUNT_NM',
      W1OAQKQTH.OPEN_DT length = 8   
         format = DATETIME20.
         informat = DATETIME20.
         label = 'OPEN_DT',
      IRB_FINANCIAL_ACCOUNT_JRNL.OPEN_DT as OPEN_DT1 length = 8   
         format = DATETIME20.
         informat = DATETIME20.
         label = 'OPEN_DT'
   from
      work.W1OAQKQTH inner join 
      dwh_dds.IRB_FINANCIAL_ACCOUNT_JRNL
         on
         (
            W1OAQKQTH.ACCOUNT_RK = IRB_FINANCIAL_ACCOUNT_JRNL.ACCOUNT_RK
            and datepart(IRB_FINANCIAL_ACCOUNT_JRNL.JRNL_TO_DTTM) = datepart(&REPDT2)
            and IRB_FINANCIAL_ACCOUNT_JRNL.VALID_FROM_DTTM <= &REPDT1 < IRB_FINANCIAL_ACCOUNT_JRNL.VALID_TO_DTTM
            and W1OAQKQTH.FINANCIAL_ACCOUNT_TYPE_CD = 'DRV'
         )
   where
      W1OAQKQTH.OPEN_DT <> IRB_FINANCIAL_ACCOUNT_JRNL.OPEN_DT
      and IRB_FINANCIAL_ACCOUNT_JRNL.IRB_DUMMY_TYPE_CD IS MISSING 
      and datepart(IRB_FINANCIAL_ACCOUNT_JRNL.JRNL_FROM_DTTM) <> datepart(IRB_FINANCIAL_ACCOUNT_JRNL.JRNL_TO_DTTM)
   ;
quit;

%global etls_sql_pushDown;
%let etls_sql_pushDown = &sys_sql_ip_all;

%rcSet(&sqlrc); 



/**  Step end SQL Join **/

/*==========================================================================* 
 * Step:            Append                                A5ELGGF9.AK0000ZW * 
 * Transform:       Append                                                  * 
 * Description:                                                             * 
 *                                                                          * 
 * Source Tables:   SQL Join - work.W1ZNP5T               A5ELGGF9.AF0000EV * 
 *                  SQL Join - work.W1ZQKK3               A5ELGGF9.AF0000EW * 
 * Target Table:    Append - work.W2GQM08                 A5ELGGF9.AF0000EX * 
 *==========================================================================*/ 

%let transformID = %quote(A5ELGGF9.AK0000ZW);
%let trans_rc = 0;
%let etls_stepStartTime = %sysfunc(datetime(), datetime20.); 

%let etls_recnt = -1;
%let dbxrc = %eval(%sysfunc(exist(work.W1ZNP5T, DATA)) or 
      %sysfunc(exist(work.W1ZNP5T, VIEW))); 

%let dbxrc = %eval(%sysfunc(exist(work.W1ZQKK3, DATA)) or 
      %sysfunc(exist(work.W1ZQKK3, VIEW))); 

proc datasets lib = work nolist nowarn memtype = (data view);
   delete W2GQM08;
quit;

data work.W2GQM08 / view=work.W2GQM08;
   set work.W1ZNP5T
       work.W1ZQKK3;
   keep ACCOUNT_RK ACCOUNT_REGISTRATION_NM ALTERNATE_ACCOUNT_NM OPEN_DT 
    IRB_SRC_ACCOUNT_ID OPEN_DT1; 
run;

%rcSet(&syserr); 



/**  Step end Append **/

/*==========================================================================* 
 * Step:            SQL Join                              A5ELGGF9.AK0000ZX * 
 * Transform:       Join                                                    * 
 * Description:     Заполнение атрибутов                                    * 
 *                                                                          * 
 * Source Tables:   FINANCIAL_INSTRUMENT_ASSOC -          A569C89V.AE0000FW * 
 *                   dwh_dds.FINANCIAL_INSTRUMENT_ASSOC                     * 
 *                  FINANCIAL_INSTRUMENT -                A569C89V.AE0000FV * 
 *                   dwh_dds.FINANCIAL_INSTRUMENT                           * 
 *                  Append - work.W2EQOE2                 A5ELGGF9.AF0000DT * 
 * Target Table:    SQL Join - work.W1OS49XFW             A5ELGGF9.AF0000EY * 
 *==========================================================================*/ 

%let transformID = %quote(A5ELGGF9.AK0000ZX);
%let trans_rc = 0;
%let etls_stepStartTime = %sysfunc(datetime(), datetime20.); 

%let etls_recnt = 0;
%macro etls_recordCheck; 
   %let etls_recCheckExist = %eval(%sysfunc(exist(dwh_dds.FINANCIAL_INSTRUMENT_ASSOC, DATA)) or 
         %sysfunc(exist(dwh_dds.FINANCIAL_INSTRUMENT_ASSOC, VIEW))); 
   
   %if (&etls_recCheckExist) %then
   %do;
      proc sql noprint;
         select count(*) into :etls_recnt from dwh_dds.FINANCIAL_INSTRUMENT_ASSOC;
      quit;
   %end;
%mend etls_recordCheck;
%etls_recordCheck;

%let SYS_SQL_IP_SPEEDO = Y;
%let SYS_SQL_MAPPUTTO = sas_put;
%let SYS_SQLREDUCEPUT = DBMS;
%global etls_sql_pushDown;
%let etls_sql_pushDown = -1;
option DBIDIRECTEXEC;

proc datasets lib = work nolist nowarn memtype = (data view);
   delete W1OS49XFW;
quit;

proc sql;
   create table work.W1OS49XFW as
   select
      W2EQOE2.ACCOUNT_RK length = 8   
         format = 11.
         informat = 11.
         label = 'ACCOUNT_RK',
      'П-06' as REPORTCODE length = 5   
         format = $5.
         informat = $5.
         label = 'REPORTCODE',
      &REPDT as REPORTDATE length = 8   
         format = DATETIME20.
         informat = DATETIME20.
         label = 'REPORTDATE',
      strip(W2EQOE2.ACCOUNT_REGISTRATION_NM) as FRONTKDEALID length = 10   
         format = $10.
         informat = $10.
         label = 'FRONTKDEALID',
      put(input(substr(W2EQOE2.ALTERNATE_ACCOUNT_NM , 1, findc(W2EQOE2.ALTERNATE_ACCOUNT_NM , '_')-1), best.), best.) as FRONTFDEALID length = 10   
         format = $10.
         informat = $10.
         label = 'FRONTFDEALID',
      FINANCIAL_INSTRUMENT.IRB_SRC_INSTRUMENT_ID as DEALID length = 100   
         format = $100.
         informat = $100.
         label = 'DEALID',
      FINANCIAL_INSTRUMENT.FINANCIAL_INSTRUMENT_TYPE_CD as INSTRUMENTTYPECD length = 3   
         format = $3.
         informat = $3.
         label = 'INSTRUMENTTYPECD',
      W2EQOE2.OPEN_DT as DEALDATE length = 8   
         format = DATETIME20.
         informat = DATETIME20.
         label = 'DEALDATE',
      'CustomerNo' as ADDITIONALINFORMATION length = 255   
         format = $255.
         informat = $255.
         label = 'ADDITIONALINFORMATION',
      W2EQOE2.IRB_SRC_ID1 as VALUEFRS length = 20   
         format = $20.
         informat = $20.
         label = 'VALUEFRS',
      W2EQOE2.IRB_SRC_ID as VALUESEC length = 20   
         format = $20.
         informat = $20.
         label = 'VALUESEC'
   from
      work.W2EQOE2 left join 
      dwh_dds.FINANCIAL_INSTRUMENT_ASSOC
         on
         (
            W2EQOE2.ACCOUNT_RK = FINANCIAL_INSTRUMENT_ASSOC.REFERENCE_ACCOUNT_RK
            and FINANCIAL_INSTRUMENT_ASSOC.VALID_FROM_DTTM <= &REPDT < FINANCIAL_INSTRUMENT_ASSOC.VALID_TO_DTTM
         ) left join 
      dwh_dds.FINANCIAL_INSTRUMENT
         on
         (
            FINANCIAL_INSTRUMENT_ASSOC.FINANCIAL_INSTRUMENT_RK = FINANCIAL_INSTRUMENT.FINANCIAL_INSTRUMENT_RK
            and FINANCIAL_INSTRUMENT.VALID_FROM_DTTM <= &REPDT < FINANCIAL_INSTRUMENT.VALID_TO_DTTM
         )
   ;
quit;

%global etls_sql_pushDown;
%let etls_sql_pushDown = &sys_sql_ip_all;

%rcSet(&sqlrc); 



/**  Step end SQL Join **/

/*==========================================================================* 
 * Step:            SQL Join                              A5ELGGF9.AK0000ZY * 
 * Transform:       Join                                                    * 
 * Description:     Заполнение атрибутов                                    * 
 *                                                                          * 
 * Source Tables:   FINANCIAL_INSTRUMENT_ASSOC -          A569C89V.AE0000FW * 
 *                   dwh_dds.FINANCIAL_INSTRUMENT_ASSOC                     * 
 *                  FINANCIAL_INSTRUMENT -                A569C89V.AE0000FV * 
 *                   dwh_dds.FINANCIAL_INSTRUMENT                           * 
 *                  Append - work.W3KAMJF                 A5ELGGF9.AF0000E6 * 
 * Target Table:    SQL Join - work.W1OSH1MCP             A5ELGGF9.AF0000EZ * 
 *==========================================================================*/ 

%let transformID = %quote(A5ELGGF9.AK0000ZY);
%let trans_rc = 0;
%let etls_stepStartTime = %sysfunc(datetime(), datetime20.); 

%let etls_recnt = 0;
%macro etls_recordCheck; 
   %let etls_recCheckExist = %eval(%sysfunc(exist(dwh_dds.FINANCIAL_INSTRUMENT_ASSOC, DATA)) or 
         %sysfunc(exist(dwh_dds.FINANCIAL_INSTRUMENT_ASSOC, VIEW))); 
   
   %if (&etls_recCheckExist) %then
   %do;
      proc sql noprint;
         select count(*) into :etls_recnt from dwh_dds.FINANCIAL_INSTRUMENT_ASSOC;
      quit;
   %end;
%mend etls_recordCheck;
%etls_recordCheck;

%let SYS_SQL_IP_SPEEDO = Y;
%let SYS_SQL_MAPPUTTO = sas_put;
%let SYS_SQLREDUCEPUT = DBMS;
%global etls_sql_pushDown;
%let etls_sql_pushDown = -1;
option DBIDIRECTEXEC;

proc datasets lib = work nolist nowarn memtype = (data view);
   delete W1OSH1MCP;
quit;

proc sql;
   create table work.W1OSH1MCP as
   select
      W3KAMJF.ACCOUNT_RK length = 8   
         format = 11.
         informat = 11.
         label = 'ACCOUNT_RK',
      'П-06' as REPORTCODE length = 5   
         format = $5.
         informat = $5.
         label = 'REPORTCODE',
      &REPDT as REPORTDATE length = 8   
         format = DATETIME20.
         informat = DATETIME20.
         label = 'REPORTDATE',
      strip(W3KAMJF.ACCOUNT_REGISTRATION_NM ) as FRONTKDEALID length = 10   
         format = $10.
         informat = $10.
         label = 'FRONTKDEALID',
      put(input(substr(W3KAMJF.ALTERNATE_ACCOUNT_NM  , 1, findc(W3KAMJF.ALTERNATE_ACCOUNT_NM  , '_')-1), best.), best.) as FRONTFDEALID length = 10   
         format = $10.
         informat = $10.
         label = 'FRONTFDEALID',
      case 
         when missing(FINANCIAL_INSTRUMENT.IRB_SRC_INSTRUMENT_ID )
            then W3KAMJF.IRB_SRC_ACCOUNT_ID
         when missing(W3KAMJF.IRB_SRC_ACCOUNT_ID )
            then FINANCIAL_INSTRUMENT.IRB_SRC_INSTRUMENT_ID
         when not missing(FINANCIAL_INSTRUMENT.IRB_SRC_INSTRUMENT_ID ) AND not missing(W3KAMJF.IRB_SRC_ACCOUNT_ID )
            then cats(FINANCIAL_INSTRUMENT.IRB_SRC_INSTRUMENT_ID , ',',W3KAMJF.IRB_SRC_ACCOUNT_ID  )
      else " "
      end as DEALID length = 100   
         format = $100.
         informat = $100.
         label = 'DEALID',
      FINANCIAL_INSTRUMENT.FINANCIAL_INSTRUMENT_TYPE_CD as INSTRUMENTTYPECD length = 3   
         format = $3.
         informat = $3.
         label = 'INSTRUMENTTYPECD',
      W3KAMJF.OPEN_DT as DEALDATE length = 8   
         format = DATETIME20.
         informat = DATETIME20.
         label = 'DEALDATE',
      'HedgeIndicator' as ADDITIONALINFORMATION length = 255   
         format = $255.
         informat = $255.
         label = 'ADDITIONALINFORMATION',
      W3KAMJF.IRB_HEDGE_INDICATOR1 as VALUEFRS length = 20   
         format = $20.
         informat = $20.
         label = 'VALUEFRS',
      W3KAMJF.IRB_HEDGE_INDICATOR as VALUESEC length = 20   
         format = $20.
         informat = $20.
         label = 'VALUESEC'
   from
      work.W3KAMJF left join 
      dwh_dds.FINANCIAL_INSTRUMENT_ASSOC
         on
         (
            W3KAMJF.ACCOUNT_RK = FINANCIAL_INSTRUMENT_ASSOC.REFERENCE_ACCOUNT_RK
            and FINANCIAL_INSTRUMENT_ASSOC.VALID_FROM_DTTM <= &REPDT < FINANCIAL_INSTRUMENT_ASSOC.VALID_TO_DTTM
         ) left join 
      dwh_dds.FINANCIAL_INSTRUMENT
         on
         (
            FINANCIAL_INSTRUMENT_ASSOC.FINANCIAL_INSTRUMENT_RK = FINANCIAL_INSTRUMENT.FINANCIAL_INSTRUMENT_RK
            and FINANCIAL_INSTRUMENT.VALID_FROM_DTTM <= &REPDT < FINANCIAL_INSTRUMENT.VALID_TO_DTTM
         )
   ;
quit;

%global etls_sql_pushDown;
%let etls_sql_pushDown = &sys_sql_ip_all;

%rcSet(&sqlrc); 



/**  Step end SQL Join **/

/*==========================================================================* 
 * Step:            Extract                               A5ELGGF9.AK0000ZZ * 
 * Transform:       Extract                                                 * 
 * Description:     Заполнение атрибутов                                    * 
 *                                                                          * 
 * Source Table:    Append - work.WELRGVQ                 A5ELGGF9.AF0000E9 * 
 * Target Table:    Extract - work.W1OSM4NF5              A5ELGGF9.AF0000F0 * 
 *==========================================================================*/ 

%let transformID = %quote(A5ELGGF9.AK0000ZZ);
%let trans_rc = 0;
%let etls_stepStartTime = %sysfunc(datetime(), datetime20.); 

%let etls_recnt = -1;
%let SYSLAST = %nrquote(work.WELRGVQ); 

%let SYS_SQL_IP_SPEEDO = Y;
%let SYS_SQL_MAPPUTTO = sas_put;
%let SYS_SQLREDUCEPUT = DBMS;
%global etls_sql_pushDown;
%let etls_sql_pushDown = -1;
option DBIDIRECTEXEC;

/*---- Map the columns  ----*/ 
proc datasets lib = work nolist nowarn memtype = (data view);
   delete W1OSM4NF5;
quit;

%put %str(NOTE: Mapping columns ...);
proc sql;
   create table work.W1OSM4NF5 as
      select
         ACCOUNT_RK,
         ('П-06') as REPORTCODE length = 5
            format = $5.
            informat = $5.
            label = 'REPORTCODE',
         (&REPDT) as REPORTDATE length = 8
            format = DATETIME20.
            informat = DATETIME20.
            label = 'REPORTDATE',
         (strip(ACCOUNT_REGISTRATION_NM )) as FRONTKDEALID length = 10
            format = $10.
            informat = $10.
            label = 'FRONTKDEALID',
         (put(input(substr(ALTERNATE_ACCOUNT_NM  , 1, findc(ALTERNATE_ACCOUNT_NM  , '_')-1), best.), best.)) as FRONTFDEALID length = 10
            format = $10.
            informat = $10.
            label = 'FRONTFDEALID',
         IRB_SRC_INSTRUMENT_ID as DEALID length = 100   
            format = $100.
            informat = $100.
            label = 'DEALID',
         FINANCIAL_INSTRUMENT_TYPE_CD as INSTRUMENTTYPECD   
            label = 'INSTRUMENTTYPECD',
         OPEN_DT as DEALDATE   
            label = 'DEALDATE',
         ('HedgeIndicator') as ADDITIONALINFORMATION length = 255
            format = $255.
            informat = $255.
            label = 'ADDITIONALINFORMATION',
         IRB_HEDGE_INDICATOR1 as VALUEFRS length = 20   
            format = $20.
            informat = $20.
            label = 'VALUEFRS',
         IRB_HEDGE_INDICATOR as VALUESEC length = 20   
            format = $20.
            informat = $20.
            label = 'VALUESEC'
   from &SYSLAST
   ;
quit;

%let SYSLAST = work.W1OSM4NF5;

%global etls_sql_pushDown;
%let etls_sql_pushDown = &sys_sql_ip_all;

%rcSet(&sqlrc); 



/**  Step end Extract **/

/*==========================================================================* 
 * Step:            SQL Join                              A5ELGGF9.AK000100 * 
 * Transform:       Join                                                    * 
 * Description:     Заполнение атрибутов                                    * 
 *                                                                          * 
 * Source Tables:   FINANCIAL_INSTRUMENT_ASSOC -          A569C89V.AE0000FW * 
 *                   dwh_dds.FINANCIAL_INSTRUMENT_ASSOC                     * 
 *                  FINANCIAL_INSTRUMENT -                A569C89V.AE0000FV * 
 *                   dwh_dds.FINANCIAL_INSTRUMENT                           * 
 *                  SWAP_INSTRUMENT_LEG -                 A569C89V.AE0000JF * 
 *                   dwh_dds.SWAP_INSTRUMENT_LEG                            * 
 *                  Append - work.WGDU8GB                 A5ELGGF9.AF0000EC * 
 * Target Table:    SQL Join - work.W1OSQGJIG             A5ELGGF9.AF0000F1 * 
 *==========================================================================*/ 

%let transformID = %quote(A5ELGGF9.AK000100);
%let trans_rc = 0;
%let etls_stepStartTime = %sysfunc(datetime(), datetime20.); 

%let etls_recnt = 0;
%macro etls_recordCheck; 
   %let etls_recCheckExist = %eval(%sysfunc(exist(dwh_dds.FINANCIAL_INSTRUMENT_ASSOC, DATA)) or 
         %sysfunc(exist(dwh_dds.FINANCIAL_INSTRUMENT_ASSOC, VIEW))); 
   
   %if (&etls_recCheckExist) %then
   %do;
      proc sql noprint;
         select count(*) into :etls_recnt from dwh_dds.FINANCIAL_INSTRUMENT_ASSOC;
      quit;
   %end;
%mend etls_recordCheck;
%etls_recordCheck;

%let SYS_SQL_IP_SPEEDO = Y;
%let SYS_SQL_MAPPUTTO = sas_put;
%let SYS_SQLREDUCEPUT = DBMS;
%global etls_sql_pushDown;
%let etls_sql_pushDown = -1;
option DBIDIRECTEXEC;

proc datasets lib = work nolist nowarn memtype = (data view);
   delete W1OSQGJIG;
quit;

proc sql;
   create table work.W1OSQGJIG as
   select
      WGDU8GB.ACCOUNT_RK length = 8   
         format = 11.
         informat = 11.
         label = 'ACCOUNT_RK',
      'П-06' as REPORTCODE length = 5   
         format = $5.
         informat = $5.
         label = 'REPORTCODE',
      &REPDT as REPORTDATE length = 8   
         format = DATETIME20.
         informat = DATETIME20.
         label = 'REPORTDATE',
      strip(WGDU8GB.ACCOUNT_REGISTRATION_NM ) as FRONTKDEALID length = 10   
         format = $10.
         informat = $10.
         label = 'FRONTKDEALID',
      put(input(substr(WGDU8GB.ALTERNATE_ACCOUNT_NM  , 1, findc(WGDU8GB.ALTERNATE_ACCOUNT_NM  , '_')-1), best.), best.) as FRONTFDEALID length = 10   
         format = $10.
         informat = $10.
         label = 'FRONTFDEALID',
      case 
         when missing(FINANCIAL_INSTRUMENT.IRB_SRC_INSTRUMENT_ID )
            then WGDU8GB.IRB_SRC_ACCOUNT_ID
         when missing(WGDU8GB.IRB_SRC_ACCOUNT_ID )
            then FINANCIAL_INSTRUMENT.IRB_SRC_INSTRUMENT_ID
         when not missing(FINANCIAL_INSTRUMENT.IRB_SRC_INSTRUMENT_ID ) AND not missing(WGDU8GB.IRB_SRC_ACCOUNT_ID )
            then cats(FINANCIAL_INSTRUMENT.IRB_SRC_INSTRUMENT_ID , ',',WGDU8GB.IRB_SRC_ACCOUNT_ID )
      else " "
      end as DEALID length = 100   
         format = $100.
         informat = $100.
         label = 'DEALID',
      FINANCIAL_INSTRUMENT.FINANCIAL_INSTRUMENT_TYPE_CD as INSTRUMENTTYPECD length = 3   
         format = $3.
         informat = $3.
         label = 'INSTRUMENTTYPECD',
      WGDU8GB.OPEN_DT as DEALDATE length = 8   
         format = DATETIME20.
         informat = DATETIME20.
         label = 'DEALDATE',
      case 
         when FINANCIAL_INSTRUMENT.FINANCIAL_INSTRUMENT_TYPE_CD in ('SWP','SWS','IRS','CIS')
            then CASE
         when SWAP_INSTRUMENT_LEG.SWAP_LEG_TYPE_CD ='FRS' then 'MaturityDate1'
         when SWAP_INSTRUMENT_LEG.SWAP_LEG_TYPE_CD ='SEC' then 'MaturityDate2'
         else 'MaturityDate1'
      END
      else 'MaturityDate1'
      end as ADDITIONALINFORMATION length = 255   
         format = $255.
         informat = $255.
         label = 'ADDITIONALINFORMATION',
      put(WGDU8GB.MATURITY_DT1 , datetime20.) as VALUEFRS length = 20   
         format = $20.
         informat = $20.
         label = 'VALUEFRS',
      put(WGDU8GB.MATURITY_DT  , datetime20.) as VALUESEC length = 20   
         format = $20.
         informat = $20.
         label = 'VALUESEC'
   from
      work.WGDU8GB left join 
      dwh_dds.FINANCIAL_INSTRUMENT_ASSOC
         on
         (
            WGDU8GB.ACCOUNT_RK = FINANCIAL_INSTRUMENT_ASSOC.REFERENCE_ACCOUNT_RK
            and FINANCIAL_INSTRUMENT_ASSOC.VALID_FROM_DTTM <= &REPDT < FINANCIAL_INSTRUMENT_ASSOC.VALID_TO_DTTM
         ) left join 
      dwh_dds.FINANCIAL_INSTRUMENT
         on
         (
            FINANCIAL_INSTRUMENT_ASSOC.FINANCIAL_INSTRUMENT_RK = FINANCIAL_INSTRUMENT.FINANCIAL_INSTRUMENT_RK
            and FINANCIAL_INSTRUMENT.VALID_FROM_DTTM <= &REPDT < FINANCIAL_INSTRUMENT.VALID_TO_DTTM
         ) left join 
      dwh_dds.SWAP_INSTRUMENT_LEG
         on
         (
            FINANCIAL_INSTRUMENT.FINANCIAL_INSTRUMENT_RK = SWAP_INSTRUMENT_LEG.FINANCIAL_INSTRUMENT_RK
            and SWAP_INSTRUMENT_LEG.VALID_FROM_DTTM <= &REPDT < SWAP_INSTRUMENT_LEG.VALID_TO_DTTM
         )
   ;
quit;

%global etls_sql_pushDown;
%let etls_sql_pushDown = &sys_sql_ip_all;

%rcSet(&sqlrc); 



/**  Step end SQL Join **/

/*==========================================================================* 
 * Step:            SQL Join                              A5ELGGF9.AK000101 * 
 * Transform:       Join                                                    * 
 * Description:     Заполнение атрибутов                                    * 
 *                                                                          * 
 * Source Tables:   SWAP_INSTRUMENT_LEG -                 A569C89V.AE0000JF * 
 *                   dwh_dds.SWAP_INSTRUMENT_LEG                            * 
 *                  Append - work.WH61BHJ                 A5ELGGF9.AF0000EF * 
 * Target Table:    SQL Join - work.W1OTITK6R             A5ELGGF9.AF0000F2 * 
 *==========================================================================*/ 

%let transformID = %quote(A5ELGGF9.AK000101);
%let trans_rc = 0;
%let etls_stepStartTime = %sysfunc(datetime(), datetime20.); 

%let etls_recnt = 0;
%macro etls_recordCheck; 
   %let etls_recCheckExist = %eval(%sysfunc(exist(dwh_dds.SWAP_INSTRUMENT_LEG, DATA)) or 
         %sysfunc(exist(dwh_dds.SWAP_INSTRUMENT_LEG, VIEW))); 
   
   %if (&etls_recCheckExist) %then
   %do;
      proc sql noprint;
         select count(*) into :etls_recnt from dwh_dds.SWAP_INSTRUMENT_LEG;
      quit;
   %end;
%mend etls_recordCheck;
%etls_recordCheck;

%let SYS_SQL_IP_SPEEDO = Y;
%let SYS_SQL_MAPPUTTO = sas_put;
%let SYS_SQLREDUCEPUT = DBMS;
%global etls_sql_pushDown;
%let etls_sql_pushDown = -1;
option DBIDIRECTEXEC;

proc datasets lib = work nolist nowarn memtype = (data view);
   delete W1OTITK6R;
quit;

proc sql;
   create table work.W1OTITK6R as
   select
      WH61BHJ.ACCOUNT_RK length = 8   
         format = 11.
         informat = 11.
         label = 'ACCOUNT_RK',
      'П-06' as REPORTCODE length = 5   
         format = $5.
         informat = $5.
         label = 'REPORTCODE',
      &REPDT as REPORTDATE length = 8   
         format = DATETIME20.
         informat = DATETIME20.
         label = 'REPORTDATE',
      strip(WH61BHJ.ACCOUNT_REGISTRATION_NM ) as FRONTKDEALID length = 10   
         format = $10.
         informat = $10.
         label = 'FRONTKDEALID',
      put(input(substr(WH61BHJ.ALTERNATE_ACCOUNT_NM  , 1, findc(WH61BHJ.ALTERNATE_ACCOUNT_NM  , '_')-1), best.), best.) as FRONTFDEALID length = 10   
         format = $10.
         informat = $10.
         label = 'FRONTFDEALID',
      WH61BHJ.IRB_SRC_INSTRUMENT_ID as DEALID length = 100   
         format = $100.
         informat = $100.
         label = 'DEALID',
      WH61BHJ.FINANCIAL_INSTRUMENT_TYPE_CD as INSTRUMENTTYPECD length = 3   
         format = $3.
         informat = $3.
         label = 'INSTRUMENTTYPECD',
      WH61BHJ.OPEN_DT as DEALDATE length = 8   
         format = DATETIME20.
         informat = DATETIME20.
         label = 'DEALDATE',
      case 
         when WH61BHJ.FINANCIAL_INSTRUMENT_TYPE_CD in ('SWP','SWS','IRS','CIS')
            then CASE   when SWAP_INSTRUMENT_LEG.SWAP_LEG_TYPE_CD ='FRS' then 'MaturityDate1'   
      when SWAP_INSTRUMENT_LEG.SWAP_LEG_TYPE_CD ='SEC' then 'MaturityDate2'   else 'MaturityDate1' END
      else 'MaturityDate1'
      end as ADDITIONALINFORMATION length = 255   
         format = $255.
         informat = $255.
         label = 'ADDITIONALINFORMATION',
      put(WH61BHJ.MATURITY_DT1, datetime20.) as VALUEFRS length = 20   
         format = $20.
         informat = $20.
         label = 'VALUEFRS',
      put(WH61BHJ.MATURITY_DT , datetime20.) as VALUESEC length = 20   
         format = $20.
         informat = $20.
         label = 'VALUESEC'
   from
      work.WH61BHJ left join 
      dwh_dds.SWAP_INSTRUMENT_LEG
         on
         (
            WH61BHJ.FINANCIAL_INSTRUMENT_RK = SWAP_INSTRUMENT_LEG.FINANCIAL_INSTRUMENT_RK
            and SWAP_INSTRUMENT_LEG.VALID_FROM_DTTM <= &REPDT < SWAP_INSTRUMENT_LEG.VALID_TO_DTTM
         )
   ;
quit;

%global etls_sql_pushDown;
%let etls_sql_pushDown = &sys_sql_ip_all;

%rcSet(&sqlrc); 



/**  Step end SQL Join **/

/*==========================================================================* 
 * Step:            SQL Join                              A5ELGGF9.AK000102 * 
 * Transform:       Join                                                    * 
 * Description:     Заполнение атрибутов                                    * 
 *                                                                          * 
 * Source Tables:   FINANCIAL_INSTRUMENT_ASSOC -          A569C89V.AE0000FW * 
 *                   dwh_dds.FINANCIAL_INSTRUMENT_ASSOC                     * 
 *                  FINANCIAL_INSTRUMENT -                A569C89V.AE0000FV * 
 *                   dwh_dds.FINANCIAL_INSTRUMENT                           * 
 *                  SWAP_INSTRUMENT_LEG -                 A569C89V.AE0000JF * 
 *                   dwh_dds.SWAP_INSTRUMENT_LEG                            * 
 *                  INTEREST_PAYMENT_TYPE -               A569C89V.AE0000GI * 
 *                   dwh_dds.INTEREST_PAYMENT_TYPE                          * 
 *                  Append - work.WHRXIBC                 A5ELGGF9.AF0000EI * 
 * Target Table:    SQL Join - work.W1OTVQVPG             A5ELGGF9.AF0000F3 * 
 *==========================================================================*/ 

%let transformID = %quote(A5ELGGF9.AK000102);
%let trans_rc = 0;
%let etls_stepStartTime = %sysfunc(datetime(), datetime20.); 

%let etls_recnt = 0;
%macro etls_recordCheck; 
   %let etls_recCheckExist = %eval(%sysfunc(exist(dwh_dds.FINANCIAL_INSTRUMENT_ASSOC, DATA)) or 
         %sysfunc(exist(dwh_dds.FINANCIAL_INSTRUMENT_ASSOC, VIEW))); 
   
   %if (&etls_recCheckExist) %then
   %do;
      proc sql noprint;
         select count(*) into :etls_recnt from dwh_dds.FINANCIAL_INSTRUMENT_ASSOC;
      quit;
   %end;
%mend etls_recordCheck;
%etls_recordCheck;

%let SYS_SQL_IP_SPEEDO = Y;
%let SYS_SQL_MAPPUTTO = sas_put;
%let SYS_SQLREDUCEPUT = DBMS;
%global etls_sql_pushDown;
%let etls_sql_pushDown = -1;
option DBIDIRECTEXEC;

proc datasets lib = work nolist nowarn memtype = (data view);
   delete W1OTVQVPG;
quit;

proc sql;
   create table work.W1OTVQVPG as
   select
      WHRXIBC.ACCOUNT_RK length = 8   
         format = 11.
         informat = 11.
         label = 'ACCOUNT_RK',
      'П-06' as REPORTCODE length = 5   
         format = $5.
         informat = $5.
         label = 'REPORTCODE',
      &REPDT as REPORTDATE length = 8   
         format = DATETIME20.
         informat = DATETIME20.
         label = 'REPORTDATE',
      strip(WHRXIBC.ACCOUNT_REGISTRATION_NM ) as FRONTKDEALID length = 10   
         format = $10.
         informat = $10.
         label = 'FRONTKDEALID',
      put(input(substr(WHRXIBC.ALTERNATE_ACCOUNT_NM  , 1, findc(WHRXIBC.ALTERNATE_ACCOUNT_NM , '_')-1), best.), best.) as FRONTFDEALID length = 10   
         format = $10.
         informat = $10.
         label = 'FRONTFDEALID',
      case 
         when missing(FINANCIAL_INSTRUMENT.IRB_SRC_INSTRUMENT_ID )
            then WHRXIBC.IRB_SRC_ACCOUNT_ID
         when missing(WHRXIBC.IRB_SRC_ACCOUNT_ID )
            then FINANCIAL_INSTRUMENT.IRB_SRC_INSTRUMENT_ID
         when not missing(FINANCIAL_INSTRUMENT.IRB_SRC_INSTRUMENT_ID) AND not missing(WHRXIBC.IRB_SRC_ACCOUNT_ID )
            then cats(FINANCIAL_INSTRUMENT.IRB_SRC_INSTRUMENT_ID , ',', WHRXIBC.IRB_SRC_ACCOUNT_ID )
      else " "
      end as DEALID length = 100   
         format = $100.
         informat = $100.
         label = 'DEALID',
      FINANCIAL_INSTRUMENT.FINANCIAL_INSTRUMENT_TYPE_CD as INSTRUMENTTYPECD length = 3   
         format = $3.
         informat = $3.
         label = 'INSTRUMENTTYPECD',
      WHRXIBC.OPEN_DT as DEALDATE length = 8   
         format = DATETIME20.
         informat = DATETIME20.
         label = 'DEALDATE',
      case 
         when FINANCIAL_INSTRUMENT.FINANCIAL_INSTRUMENT_TYPE_CD in ('SWP','SWS','IRS','CIS')
            then CASE 
         when SWAP_INSTRUMENT_LEG.SWAP_LEG_TYPE_CD ='FRS' then 'InterestRateType1' 
         when SWAP_INSTRUMENT_LEG.SWAP_LEG_TYPE_CD ='SEC' then 'InterestRateType2' 
         else 'InterestRateType1' 
      END
      else 'InterestRateType1'
      end as ADDITIONALINFORMATION length = 255   
         format = $255.
         informat = $255.
         label = 'ADDITIONALINFORMATION',
      strip(INTEREST_PAYMENT_TYPE.INTEREST_PAYMENT_TYPE_DESC ) as VALUEFRS length = 20   
         format = $20.
         informat = $20.
         label = 'VALUEFRS',
      strip(INTEREST_PAYMENT_TYPE.INTEREST_PAYMENT_TYPE_DESC ) as VALUESEC length = 20   
         format = $20.
         informat = $20.
         label = 'VALUESEC'
   from
      work.WHRXIBC left join 
      dwh_dds.FINANCIAL_INSTRUMENT_ASSOC
         on
         (
            WHRXIBC.ACCOUNT_RK = FINANCIAL_INSTRUMENT_ASSOC.REFERENCE_ACCOUNT_RK
            and FINANCIAL_INSTRUMENT_ASSOC.VALID_FROM_DTTM <= &REPDT < FINANCIAL_INSTRUMENT_ASSOC.VALID_TO_DTTM
         ) left join 
      dwh_dds.FINANCIAL_INSTRUMENT
         on
         (
            FINANCIAL_INSTRUMENT_ASSOC.FINANCIAL_INSTRUMENT_RK = FINANCIAL_INSTRUMENT.FINANCIAL_INSTRUMENT_RK
            and FINANCIAL_INSTRUMENT.VALID_FROM_DTTM <= &REPDT < FINANCIAL_INSTRUMENT.VALID_TO_DTTM
         ) left join 
      dwh_dds.SWAP_INSTRUMENT_LEG
         on
         (
            FINANCIAL_INSTRUMENT.FINANCIAL_INSTRUMENT_RK = SWAP_INSTRUMENT_LEG.FINANCIAL_INSTRUMENT_RK
            and SWAP_INSTRUMENT_LEG.VALID_FROM_DTTM <= &REPDT < SWAP_INSTRUMENT_LEG.VALID_TO_DTTM
         ) left join 
      dwh_dds.INTEREST_PAYMENT_TYPE
         on
         (
            WHRXIBC.INTEREST_PAYMENT_TYPE_CD1 = INTEREST_PAYMENT_TYPE.INTEREST_PAYMENT_TYPE_CD
            and INTEREST_PAYMENT_TYPE.VALID_TO_DTTM = &ETL_SCD_FUTURE_DTTM
         )
   ;
quit;

%global etls_sql_pushDown;
%let etls_sql_pushDown = &sys_sql_ip_all;

%rcSet(&sqlrc); 



/**  Step end SQL Join **/

/*==========================================================================* 
 * Step:            SQL Join                              A5ELGGF9.AK000103 * 
 * Transform:       Join                                                    * 
 * Description:     Заполнение атрибутов                                    * 
 *                                                                          * 
 * Source Tables:   SWAP_INSTRUMENT_LEG -                 A569C89V.AE0000JF * 
 *                   dwh_dds.SWAP_INSTRUMENT_LEG                            * 
 *                  INTEREST_PAYMENT_TYPE -               A569C89V.AE0000GI * 
 *                   dwh_dds.INTEREST_PAYMENT_TYPE                          * 
 *                  Append - work.WSO9IL2                 A5ELGGF9.AF0000EL * 
 * Target Table:    SQL Join - work.W1OU59APU             A5ELGGF9.AF0000F4 * 
 *==========================================================================*/ 

%let transformID = %quote(A5ELGGF9.AK000103);
%let trans_rc = 0;
%let etls_stepStartTime = %sysfunc(datetime(), datetime20.); 

%let etls_recnt = 0;
%macro etls_recordCheck; 
   %let etls_recCheckExist = %eval(%sysfunc(exist(dwh_dds.SWAP_INSTRUMENT_LEG, DATA)) or 
         %sysfunc(exist(dwh_dds.SWAP_INSTRUMENT_LEG, VIEW))); 
   
   %if (&etls_recCheckExist) %then
   %do;
      proc sql noprint;
         select count(*) into :etls_recnt from dwh_dds.SWAP_INSTRUMENT_LEG;
      quit;
   %end;
%mend etls_recordCheck;
%etls_recordCheck;

%let SYS_SQL_IP_SPEEDO = Y;
%let SYS_SQL_MAPPUTTO = sas_put;
%let SYS_SQLREDUCEPUT = DBMS;
%global etls_sql_pushDown;
%let etls_sql_pushDown = -1;
option DBIDIRECTEXEC;

proc datasets lib = work nolist nowarn memtype = (data view);
   delete W1OU59APU;
quit;

proc sql;
   create table work.W1OU59APU as
   select
      WSO9IL2.ACCOUNT_RK length = 8   
         format = 11.
         informat = 11.
         label = 'ACCOUNT_RK',
      'П-06' as REPORTCODE length = 5   
         format = $5.
         informat = $5.
         label = 'REPORTCODE',
      &REPDT as REPORTDATE length = 8   
         format = DATETIME20.
         informat = DATETIME20.
         label = 'REPORTDATE',
      strip(WSO9IL2.ACCOUNT_REGISTRATION_NM ) as FRONTKDEALID length = 10   
         format = $10.
         informat = $10.
         label = 'FRONTKDEALID',
      put(input(substr(WSO9IL2.ALTERNATE_ACCOUNT_NM  , 1, findc(WSO9IL2.ALTERNATE_ACCOUNT_NM  , '_')-1), best.), best.) as FRONTFDEALID length = 10   
         format = $10.
         informat = $10.
         label = 'FRONTFDEALID',
      WSO9IL2.IRB_SRC_INSTRUMENT_ID as DEALID length = 100   
         format = $100.
         informat = $100.
         label = 'DEALID',
      WSO9IL2.FINANCIAL_INSTRUMENT_TYPE_CD as INSTRUMENTTYPECD length = 3   
         format = $3.
         informat = $3.
         label = 'INSTRUMENTTYPECD',
      WSO9IL2.OPEN_DT as DEALDATE length = 8   
         format = DATETIME20.
         informat = DATETIME20.
         label = 'DEALDATE',
      case 
         when WSO9IL2.FINANCIAL_INSTRUMENT_TYPE_CD in ('SWP','SWS','IRS','CIS')
            then CASE 
         when SWAP_INSTRUMENT_LEG.SWAP_LEG_TYPE_CD ='FRS' then 'InterestRateType1' 
         when SWAP_INSTRUMENT_LEG.SWAP_LEG_TYPE_CD ='SEC' then 'InterestRateType2' 
         else 'InterestRateType1' 
       END
      else 'InterestRateType1'
      end as ADDITIONALINFORMATION length = 255   
         format = $255.
         informat = $255.
         label = 'ADDITIONALINFORMATION',
      strip(INTEREST_PAYMENT_TYPE1.INTEREST_PAYMENT_TYPE_DESC ) as VALUEFRS length = 20   
         format = $20.
         informat = $20.
         label = 'VALUEFRS',
      strip(INTEREST_PAYMENT_TYPE.INTEREST_PAYMENT_TYPE_DESC ) as VALUESEC length = 20   
         format = $20.
         informat = $20.
         label = 'VALUESEC'
   from
      work.WSO9IL2 left join 
      dwh_dds.SWAP_INSTRUMENT_LEG
         on
         (
            WSO9IL2.FINANCIAL_INSTRUMENT_RK = SWAP_INSTRUMENT_LEG.FINANCIAL_INSTRUMENT_RK
            and SWAP_INSTRUMENT_LEG.VALID_FROM_DTTM <= &REPDT < SWAP_INSTRUMENT_LEG.VALID_TO_DTTM
         ) left join 
      dwh_dds.INTEREST_PAYMENT_TYPE
         on
         (
            WSO9IL2.INTEREST_PAYMENT_TYPE_CD = INTEREST_PAYMENT_TYPE.INTEREST_PAYMENT_TYPE_CD
            and INTEREST_PAYMENT_TYPE.VALID_TO_DTTM = &ETL_SCD_FUTURE_DTTM
         ) left join 
      dwh_dds.INTEREST_PAYMENT_TYPE as INTEREST_PAYMENT_TYPE1
         on
         (
            WSO9IL2.INTEREST_PAYMENT_TYPE_CD1 = INTEREST_PAYMENT_TYPE1.INTEREST_PAYMENT_TYPE_CD
            and INTEREST_PAYMENT_TYPE1.VALID_TO_DTTM = &ETL_SCD_FUTURE_DTTM
         )
   ;
quit;

%global etls_sql_pushDown;
%let etls_sql_pushDown = &sys_sql_ip_all;

%rcSet(&sqlrc); 



/**  Step end SQL Join **/

/*==========================================================================* 
 * Step:            SQL Join                              A5ELGGF9.AK000104 * 
 * Transform:       Join                                                    * 
 * Description:     Заполнение атрибутов                                    * 
 *                                                                          * 
 * Source Tables:   FINANCIAL_INSTRUMENT_ASSOC -          A569C89V.AE0000FW * 
 *                   dwh_dds.FINANCIAL_INSTRUMENT_ASSOC                     * 
 *                  FINANCIAL_INSTRUMENT -                A569C89V.AE0000FV * 
 *                   dwh_dds.FINANCIAL_INSTRUMENT                           * 
 *                  SWAP_INSTRUMENT_LEG -                 A569C89V.AE0000JF * 
 *                   dwh_dds.SWAP_INSTRUMENT_LEG                            * 
 *                  Append - work.WUFQ8BJ                 A5ELGGF9.AF0000EO * 
 * Target Table:    SQL Join - work.W1OUIQAPW             A5ELGGF9.AF0000F5 * 
 *==========================================================================*/ 

%let transformID = %quote(A5ELGGF9.AK000104);
%let trans_rc = 0;
%let etls_stepStartTime = %sysfunc(datetime(), datetime20.); 

%let etls_recnt = 0;
%macro etls_recordCheck; 
   %let etls_recCheckExist = %eval(%sysfunc(exist(dwh_dds.FINANCIAL_INSTRUMENT_ASSOC, DATA)) or 
         %sysfunc(exist(dwh_dds.FINANCIAL_INSTRUMENT_ASSOC, VIEW))); 
   
   %if (&etls_recCheckExist) %then
   %do;
      proc sql noprint;
         select count(*) into :etls_recnt from dwh_dds.FINANCIAL_INSTRUMENT_ASSOC;
      quit;
   %end;
%mend etls_recordCheck;
%etls_recordCheck;

%let SYS_SQL_IP_SPEEDO = Y;
%let SYS_SQL_MAPPUTTO = sas_put;
%let SYS_SQLREDUCEPUT = DBMS;
%global etls_sql_pushDown;
%let etls_sql_pushDown = -1;
option DBIDIRECTEXEC;

proc datasets lib = work nolist nowarn memtype = (data view);
   delete W1OUIQAPW;
quit;

proc sql;
   create table work.W1OUIQAPW as
   select
      WUFQ8BJ.ACCOUNT_RK length = 8   
         format = 11.
         informat = 11.
         label = 'ACCOUNT_RK',
      'П-06' as REPORTCODE length = 5   
         format = $5.
         informat = $5.
         label = 'REPORTCODE',
      &REPDT as REPORTDATE length = 8   
         format = DATETIME20.
         informat = DATETIME20.
         label = 'REPORTDATE',
      strip(WUFQ8BJ.ACCOUNT_REGISTRATION_NM ) as FRONTKDEALID length = 10   
         format = $10.
         informat = $10.
         label = 'FRONTKDEALID',
      put(input(substr(WUFQ8BJ.ALTERNATE_ACCOUNT_NM, 1, findc(WUFQ8BJ.ALTERNATE_ACCOUNT_NM, '_')-1), best.), best.) as FRONTFDEALID length = 10   
         format = $10.
         informat = $10.
         label = 'FRONTFDEALID',
      case 
         when missing(FINANCIAL_INSTRUMENT.IRB_SRC_INSTRUMENT_ID )
            then WUFQ8BJ.IRB_SRC_ACCOUNT_ID
         when missing(WUFQ8BJ.IRB_SRC_ACCOUNT_ID )
            then FINANCIAL_INSTRUMENT.IRB_SRC_INSTRUMENT_ID
         when not missing(FINANCIAL_INSTRUMENT.IRB_SRC_INSTRUMENT_ID ) AND not missing(WUFQ8BJ.IRB_SRC_ACCOUNT_ID )
            then cats(FINANCIAL_INSTRUMENT.IRB_SRC_INSTRUMENT_ID , ',', WUFQ8BJ.IRB_SRC_ACCOUNT_ID )
      else " "
      end as DEALID length = 100   
         format = $100.
         informat = $100.
         label = 'DEALID',
      FINANCIAL_INSTRUMENT.FINANCIAL_INSTRUMENT_TYPE_CD as INSTRUMENTTYPECD length = 3   
         format = $3.
         informat = $3.
         label = 'INSTRUMENTTYPECD',
      WUFQ8BJ.OPEN_DT as DEALDATE length = 8   
         format = DATETIME20.
         informat = DATETIME20.
         label = 'DEALDATE',
      case 
         when FINANCIAL_INSTRUMENT.FINANCIAL_INSTRUMENT_TYPE_CD in ('SWP','SWS','IRS','CIS')
            then CASE 
         when SWAP_INSTRUMENT_LEG.SWAP_LEG_TYPE_CD ='FRS' then 'DealType1' 
         when SWAP_INSTRUMENT_LEG.SWAP_LEG_TYPE_CD ='SEC' then 'DealType2' 
         else 'DealType1' 
      END
      else 'DealType1'
      end as ADDITIONALINFORMATION length = 255   
         format = $255.
         informat = $255.
         label = 'ADDITIONALINFORMATION',
      WUFQ8BJ.IRB_TYPE1 as VALUEFRS length = 20   
         format = $20.
         informat = $20.
         label = 'VALUEFRS',
      WUFQ8BJ.IRB_TYPE as VALUESEC length = 20   
         format = $20.
         informat = $20.
         label = 'VALUESEC'
   from
      work.WUFQ8BJ left join 
      dwh_dds.FINANCIAL_INSTRUMENT_ASSOC
         on
         (
            WUFQ8BJ.ACCOUNT_RK = FINANCIAL_INSTRUMENT_ASSOC.REFERENCE_ACCOUNT_RK
            and FINANCIAL_INSTRUMENT_ASSOC.VALID_FROM_DTTM <= &REPDT < FINANCIAL_INSTRUMENT_ASSOC.VALID_TO_DTTM
         ) left join 
      dwh_dds.FINANCIAL_INSTRUMENT
         on
         (
            FINANCIAL_INSTRUMENT_ASSOC.FINANCIAL_INSTRUMENT_RK = FINANCIAL_INSTRUMENT.FINANCIAL_INSTRUMENT_RK
            and FINANCIAL_INSTRUMENT.VALID_FROM_DTTM <= &REPDT < FINANCIAL_INSTRUMENT.VALID_TO_DTTM
         ) left join 
      dwh_dds.SWAP_INSTRUMENT_LEG
         on
         (
            FINANCIAL_INSTRUMENT.FINANCIAL_INSTRUMENT_RK = SWAP_INSTRUMENT_LEG.FINANCIAL_INSTRUMENT_RK
            and SWAP_INSTRUMENT_LEG.VALID_FROM_DTTM <= &REPDT < SWAP_INSTRUMENT_LEG.VALID_TO_DTTM
         )
   ;
quit;

%global etls_sql_pushDown;
%let etls_sql_pushDown = &sys_sql_ip_all;

%rcSet(&sqlrc); 



/**  Step end SQL Join **/

/*==========================================================================* 
 * Step:            SQL Join                              A5ELGGF9.AK000105 * 
 * Transform:       Join                                                    * 
 * Description:     Заполнение атрибутов                                    * 
 *                                                                          * 
 * Source Tables:   SWAP_INSTRUMENT_LEG -                 A569C89V.AE0000JF * 
 *                   dwh_dds.SWAP_INSTRUMENT_LEG                            * 
 *                  Append - work.WV21AZA                 A5ELGGF9.AF0000ER * 
 * Target Table:    SQL Join - work.W1OUIV1OE             A5ELGGF9.AF0000F6 * 
 *==========================================================================*/ 

%let transformID = %quote(A5ELGGF9.AK000105);
%let trans_rc = 0;
%let etls_stepStartTime = %sysfunc(datetime(), datetime20.); 

%let etls_recnt = 0;
%macro etls_recordCheck; 
   %let etls_recCheckExist = %eval(%sysfunc(exist(dwh_dds.SWAP_INSTRUMENT_LEG, DATA)) or 
         %sysfunc(exist(dwh_dds.SWAP_INSTRUMENT_LEG, VIEW))); 
   
   %if (&etls_recCheckExist) %then
   %do;
      proc sql noprint;
         select count(*) into :etls_recnt from dwh_dds.SWAP_INSTRUMENT_LEG;
      quit;
   %end;
%mend etls_recordCheck;
%etls_recordCheck;

%let SYS_SQL_IP_SPEEDO = Y;
%let SYS_SQL_MAPPUTTO = sas_put;
%let SYS_SQLREDUCEPUT = DBMS;
%global etls_sql_pushDown;
%let etls_sql_pushDown = -1;
option DBIDIRECTEXEC;

proc datasets lib = work nolist nowarn memtype = (data view);
   delete W1OUIV1OE;
quit;

proc sql;
   create table work.W1OUIV1OE as
   select
      WV21AZA.ACCOUNT_RK length = 8   
         format = 11.
         informat = 11.
         label = 'ACCOUNT_RK',
      'П-06' as REPORTCODE length = 5   
         format = $5.
         informat = $5.
         label = 'REPORTCODE',
      &REPDT as REPORTDATE length = 8   
         format = DATETIME20.
         informat = DATETIME20.
         label = 'REPORTDATE',
      strip(WV21AZA.ACCOUNT_REGISTRATION_NM ) as FRONTKDEALID length = 10   
         format = $10.
         informat = $10.
         label = 'FRONTKDEALID',
      put(input(substr(WV21AZA.ALTERNATE_ACCOUNT_NM  , 1, findc(WV21AZA.ALTERNATE_ACCOUNT_NM  , '_')-1), best.), best.) as FRONTFDEALID length = 10   
         format = $10.
         informat = $10.
         label = 'FRONTFDEALID',
      WV21AZA.IRB_SRC_INSTRUMENT_ID as DEALID length = 100   
         format = $100.
         informat = $100.
         label = 'DEALID',
      WV21AZA.FINANCIAL_INSTRUMENT_TYPE_CD as INSTRUMENTTYPECD length = 3   
         format = $3.
         informat = $3.
         label = 'INSTRUMENTTYPECD',
      WV21AZA.OPEN_DT as DEALDATE length = 8   
         format = DATETIME20.
         informat = DATETIME20.
         label = 'DEALDATE',
      case 
         when WV21AZA.FINANCIAL_INSTRUMENT_TYPE_CD in ('SPW','SWS','IRS','CIS')
            then CASE 
         when SWAP_INSTRUMENT_LEG.SWAP_LEG_TYPE_CD ='FRS' then 'DealType1' 
         when SWAP_INSTRUMENT_LEG.SWAP_LEG_TYPE_CD ='SEC' then 'DealType2' 
         else 'DealType1' 
       END
      else 'DealType1'
      end as ADDITIONALINFORMATION length = 255   
         format = $255.
         informat = $255.
         label = 'ADDITIONALINFORMATION',
      WV21AZA.IRB_TYPE1 as VALUEFRS length = 20   
         format = $20.
         informat = $20.
         label = 'VALUEFRS',
      WV21AZA.IRB_TYPE as VALUESEC length = 20   
         format = $20.
         informat = $20.
         label = 'VALUESEC'
   from
      work.WV21AZA left join 
      dwh_dds.SWAP_INSTRUMENT_LEG
         on
         (
            WV21AZA.FINANCIAL_INSTRUMENT_RK = SWAP_INSTRUMENT_LEG.FINANCIAL_INSTRUMENT_RK
            and SWAP_INSTRUMENT_LEG.VALID_FROM_DTTM <= &REPDT < SWAP_INSTRUMENT_LEG.VALID_TO_DTTM
         )
   ;
quit;

%global etls_sql_pushDown;
%let etls_sql_pushDown = &sys_sql_ip_all;

%rcSet(&sqlrc); 



/**  Step end SQL Join **/

/*==========================================================================* 
 * Step:            SQL Join                              A5ELGGF9.AK000106 * 
 * Transform:       Join                                                    * 
 * Description:     Заполнение атрибутов                                    * 
 *                                                                          * 
 * Source Tables:   Append - work.WF1Q2F                  A5ELGGF9.AF0000EU * 
 *                  FINANCIAL_INSTRUMENT_ASSOC -          A569C89V.AE0000FW * 
 *                   dwh_dds.FINANCIAL_INSTRUMENT_ASSOC                     * 
 *                  FINANCIAL_INSTRUMENT -                A569C89V.AE0000FV * 
 *                   dwh_dds.FINANCIAL_INSTRUMENT                           * 
 * Target Table:    SQL Join - work.WH8HQ0                A5ELGGF9.AF0000F7 * 
 *==========================================================================*/ 

%let transformID = %quote(A5ELGGF9.AK000106);
%let trans_rc = 0;
%let etls_stepStartTime = %sysfunc(datetime(), datetime20.); 

%let etls_recnt = -1;
%let SYS_SQL_IP_SPEEDO = Y;
%let SYS_SQL_MAPPUTTO = sas_put;
%let SYS_SQLREDUCEPUT = DBMS;
%global etls_sql_pushDown;
%let etls_sql_pushDown = -1;
option DBIDIRECTEXEC;

proc datasets lib = work nolist nowarn memtype = (data view);
   delete WH8HQ0;
quit;

proc sql;
   create view work.WH8HQ0 as
   select
      WF1Q2F.ACCOUNT_RK length = 8   
         format = 11.
         informat = 11.
         label = 'ACCOUNT_RK',
      'П-06' as REPORTCODE length = 5   
         format = $5.
         informat = $5.
         label = 'REPORTCODE',
      &REPDT as REPORTDATE length = 8   
         format = DATETIME20.
         informat = DATETIME20.
         label = 'REPORTDATE',
      strip(WF1Q2F.ACCOUNT_REGISTRATION_NM) as FRONTKDEALID length = 10   
         format = $10.
         informat = $10.
         label = 'FRONTKDEALID',
      put(input(substr(WF1Q2F.ALTERNATE_ACCOUNT_NM, 1, findc(WF1Q2F.ALTERNATE_ACCOUNT_NM, '_')-1), best.), best.) as FRONTFDEALID length = 10   
         format = $10.
         informat = $10.
         label = 'FRONTFDEALID',
      WF1Q2F.IRB_SRC_ACCOUNT_ID as DEALID length = 100   
         format = $100.
         informat = $100.
         label = 'DEALID',
      min(FINANCIAL_INSTRUMENT.FINANCIAL_INSTRUMENT_TYPE_CD) as INSTRUMENTTYPECD length = 3   
         format = $3.
         informat = $3.
         label = 'INSTRUMENTTYPECD',
      WF1Q2F.OPEN_DT as DEALDATE length = 8   
         format = DATETIME20.
         informat = DATETIME20.
         label = 'DEALDATE',
      'DealDate' as ADDITIONALINFORMATION length = 255   
         format = $255.
         informat = $255.
         label = 'ADDITIONALINFORMATION',
      translate(put(datepart(WF1Q2F.OPEN_DT1), ddmmyy10.), '.', '/') as VALUEFRS length = 20   
         format = $20.
         informat = $20.
         label = 'VALUEFRS',
      translate(put(datepart(WF1Q2F.OPEN_DT), ddmmyy10.), '.', '/') as VALUESEC length = 20   
         format = $20.
         informat = $20.
         label = 'VALUESEC'
   from
      work.WF1Q2F left join 
      dwh_dds.FINANCIAL_INSTRUMENT_ASSOC
         on
         (
            WF1Q2F.ACCOUNT_RK = FINANCIAL_INSTRUMENT_ASSOC.REFERENCE_ACCOUNT_RK
            and FINANCIAL_INSTRUMENT_ASSOC.VALID_FROM_DTTM <= &REPDT < FINANCIAL_INSTRUMENT_ASSOC.VALID_TO_DTTM
         ) left join 
      dwh_dds.FINANCIAL_INSTRUMENT
         on
         (
            FINANCIAL_INSTRUMENT_ASSOC.FINANCIAL_INSTRUMENT_RK = FINANCIAL_INSTRUMENT.FINANCIAL_INSTRUMENT_RK
            and FINANCIAL_INSTRUMENT.VALID_FROM_DTTM <= &REPDT < FINANCIAL_INSTRUMENT.VALID_TO_DTTM
         )
   group by
      ACCOUNT_RK,
      REPORTCODE,
      REPORTDATE,
      FRONTKDEALID,
      FRONTFDEALID,
      DEALID,
      DEALDATE,
      ADDITIONALINFORMATION,
      VALUEFRS,
      VALUESEC
   ;
quit;

%global etls_sql_pushDown;
%let etls_sql_pushDown = &sys_sql_ip_all;

%rcSet(&sqlrc); 



/**  Step end SQL Join **/

/*==========================================================================* 
 * Step:            SQL Join                              A5ELGGF9.AK000107 * 
 * Transform:       Join                                                    * 
 * Description:     Заполнение атрибутов                                    * 
 *                                                                          * 
 * Source Tables:   Append - work.W2GQM08                 A5ELGGF9.AF0000EX * 
 *                  FINANCIAL_INSTRUMENT_ASSOC -          A569C89V.AE0000FW * 
 *                   dwh_dds.FINANCIAL_INSTRUMENT_ASSOC                     * 
 *                  FINANCIAL_INSTRUMENT -                A569C89V.AE0000FV * 
 *                   dwh_dds.FINANCIAL_INSTRUMENT                           * 
 * Target Table:    SQL Join - work.W2HG95P               A5ELGGF9.AF0000F8 * 
 *==========================================================================*/ 

%let transformID = %quote(A5ELGGF9.AK000107);
%let trans_rc = 0;
%let etls_stepStartTime = %sysfunc(datetime(), datetime20.); 

%let etls_recnt = -1;
%let SYS_SQL_IP_SPEEDO = Y;
%let SYS_SQL_MAPPUTTO = sas_put;
%let SYS_SQLREDUCEPUT = DBMS;
%global etls_sql_pushDown;
%let etls_sql_pushDown = -1;
option DBIDIRECTEXEC;

proc datasets lib = work nolist nowarn memtype = (data view);
   delete W2HG95P;
quit;

proc sql;
   create view work.W2HG95P as
   select
      W2GQM08.ACCOUNT_RK length = 8   
         format = 11.
         informat = 11.
         label = 'ACCOUNT_RK',
      'П-06' as REPORTCODE length = 5   
         format = $5.
         informat = $5.
         label = 'REPORTCODE',
      &REPDT as REPORTDATE length = 8   
         format = DATETIME20.
         informat = DATETIME20.
         label = 'REPORTDATE',
      strip(W2GQM08.ACCOUNT_REGISTRATION_NM) as FRONTKDEALID length = 10   
         format = $10.
         informat = $10.
         label = 'FRONTKDEALID',
      put(input(substr(W2GQM08.ALTERNATE_ACCOUNT_NM, 1, findc(W2GQM08.ALTERNATE_ACCOUNT_NM, '_')-1), best.), best.) as FRONTFDEALID length = 10   
         format = $10.
         informat = $10.
         label = 'FRONTFDEALID',
      W2GQM08.IRB_SRC_ACCOUNT_ID as DEALID length = 100   
         format = $100.
         informat = $100.
         label = 'DEALID',
      min(FINANCIAL_INSTRUMENT.FINANCIAL_INSTRUMENT_TYPE_CD) as INSTRUMENTTYPECD length = 3   
         format = $3.
         informat = $3.
         label = 'INSTRUMENTTYPECD',
      W2GQM08.OPEN_DT as DEALDATE length = 8   
         format = DATETIME20.
         informat = DATETIME20.
         label = 'DEALDATE',
      'DealDate' as ADDITIONALINFORMATION length = 255   
         format = $255.
         informat = $255.
         label = 'ADDITIONALINFORMATION',
      translate(put(datepart(W2GQM08.OPEN_DT1), ddmmyy10.), '.', '/') as VALUEFRS length = 20   
         format = $20.
         informat = $20.
         label = 'VALUEFRS',
      translate(put(datepart(W2GQM08.OPEN_DT), ddmmyy10.), '.', '/') as VALUESEC length = 20   
         format = $20.
         informat = $20.
         label = 'VALUESEC'
   from
      work.W2GQM08 left join 
      dwh_dds.FINANCIAL_INSTRUMENT_ASSOC
         on
         (
            W2GQM08.ACCOUNT_RK = FINANCIAL_INSTRUMENT_ASSOC.REFERENCE_ACCOUNT_RK
            and FINANCIAL_INSTRUMENT_ASSOC.VALID_FROM_DTTM <= &REPDT < FINANCIAL_INSTRUMENT_ASSOC.VALID_TO_DTTM
         ) left join 
      dwh_dds.FINANCIAL_INSTRUMENT
         on
         (
            FINANCIAL_INSTRUMENT_ASSOC.FINANCIAL_INSTRUMENT_RK = FINANCIAL_INSTRUMENT.FINANCIAL_INSTRUMENT_RK
            and FINANCIAL_INSTRUMENT.VALID_FROM_DTTM <= &REPDT < FINANCIAL_INSTRUMENT.VALID_TO_DTTM
         )
   group by
      ACCOUNT_RK,
      REPORTCODE,
      REPORTDATE,
      FRONTKDEALID,
      FRONTFDEALID,
      DEALID,
      DEALDATE,
      ADDITIONALINFORMATION,
      VALUEFRS,
      VALUESEC
   ;
quit;

%global etls_sql_pushDown;
%let etls_sql_pushDown = &sys_sql_ip_all;

%rcSet(&sqlrc); 



/**  Step end SQL Join **/

/*==========================================================================* 
 * Step:            SQL Join                              A5ELGGF9.AK000108 * 
 * Transform:       Join                                                    * 
 * Description:     DRVREPDT                                                * 
 *                                                                          * 
 * Source Tables:   FINANCIAL_ACCOUNT - work.W1OAQKQTH    A5ELGGF9.AF0000DM * 
 *                  FINANCIAL_INSTRUMENT_ASSOC -          A569C89V.AE0000FW * 
 *                   dwh_dds.FINANCIAL_INSTRUMENT_ASSOC                     * 
 *                  FINANCIAL_INSTRUMENT -                A569C89V.AE0000FV * 
 *                   dwh_dds.FINANCIAL_INSTRUMENT                           * 
 *                  FRA_INSTRUMENT -                      A569C89V.AE0000G5 * 
 *                   dwh_dds.FRA_INSTRUMENT                                 * 
 *                  OPTION_INSTRUMENT -                   A569C89V.AE0000IV * 
 *                   dwh_dds.OPTION_INSTRUMENT                              * 
 *                  SWAP_INSTRUMENT_LEG -                 A569C89V.AE0000JF * 
 *                   dwh_dds.SWAP_INSTRUMENT_LEG                            * 
 * Target Table:    SQL Join - work.W1OREU80U             A5ELGGF9.AF0000F9 * 
 *==========================================================================*/ 

%let transformID = %quote(A5ELGGF9.AK000108);
%let trans_rc = 0;
%let etls_stepStartTime = %sysfunc(datetime(), datetime20.); 

%let etls_recnt = -1;
%let SYS_SQL_IP_SPEEDO = Y;
%let SYS_SQL_MAPPUTTO = sas_put;
%let SYS_SQLREDUCEPUT = DBMS;
%global etls_sql_pushDown;
%let etls_sql_pushDown = -1;
option DBIDIRECTEXEC;

proc datasets lib = work nolist nowarn memtype = (data view);
   delete W1OREU80U;
quit;

proc sql;
   create table work.W1OREU80U as
   select
      W1OAQKQTH.ACCOUNT_RK length = 8   
         format = 11.
         informat = 11.
         label = 'ACCOUNT_RK',
      W1OAQKQTH.ACCOUNT_REGISTRATION_NM length = 100   
         format = $100.
         informat = $100.
         label = 'ACCOUNT_REGISTRATION_NM',
      W1OAQKQTH.ALTERNATE_ACCOUNT_NM length = 40   
         format = $40.
         informat = $40.
         label = 'ALTERNATE_ACCOUNT_NM',
      W1OAQKQTH.OPEN_DT length = 8   
         format = DATETIME20.
         informat = DATETIME20.
         label = 'OPEN_DT',
      FINANCIAL_INSTRUMENT.FACE_VALUE_AMT length = 8   
         format = 20.5
         informat = 20.5
         label = 'FACE_VALUE_AMT',
      FINANCIAL_INSTRUMENT.FINANCIAL_INSTRUMENT_RK length = 8   
         format = 11.
         informat = 11.
         label = 'FINANCIAL_INSTRUMENT_RK',
      FINANCIAL_INSTRUMENT.FINANCIAL_INSTRUMENT_TYPE_CD length = 3   
         format = $3.
         informat = $3.
         label = 'FINANCIAL_INSTRUMENT_TYPE_CD',
      FINANCIAL_INSTRUMENT.IRB_SRC_INSTRUMENT_ID length = 32   
         format = $32.
         informat = $32.
         label = 'IRB_SRC_INSTRUMENT_ID'
   from
      work.W1OAQKQTH left join 
      dwh_dds.FINANCIAL_INSTRUMENT_ASSOC
         on
         (
            W1OAQKQTH.ACCOUNT_RK = FINANCIAL_INSTRUMENT_ASSOC.REFERENCE_ACCOUNT_RK
            and FINANCIAL_INSTRUMENT_ASSOC.VALID_FROM_DTTM <= &REPDT < FINANCIAL_INSTRUMENT_ASSOC.VALID_TO_DTTM
         ) left join 
      dwh_dds.FINANCIAL_INSTRUMENT
         on
         (
            FINANCIAL_INSTRUMENT_ASSOC.FINANCIAL_INSTRUMENT_RK = FINANCIAL_INSTRUMENT.FINANCIAL_INSTRUMENT_RK
            and FINANCIAL_INSTRUMENT.VALID_FROM_DTTM <= &REPDT < FINANCIAL_INSTRUMENT.VALID_TO_DTTM
         ) left join 
      dwh_dds.FRA_INSTRUMENT
         on
         (
            FINANCIAL_INSTRUMENT.FINANCIAL_INSTRUMENT_TYPE_CD = 'FRA'
            and FINANCIAL_INSTRUMENT.FINANCIAL_INSTRUMENT_RK = FRA_INSTRUMENT.FINANCIAL_INSTRUMENT_RK
            and FRA_INSTRUMENT.VALID_FROM_DTTM <= &REPDT < FRA_INSTRUMENT.VALID_TO_DTTM
            and not (FRA_INSTRUMENT.IRB_RATE_NAME = 'RUONIA'
            and FINANCIAL_INSTRUMENT.INTEREST_PAYMENT_TYPE_CD = 'FLT')
         ) left join 
      dwh_dds.OPTION_INSTRUMENT
         on
         (
            FINANCIAL_INSTRUMENT.FINANCIAL_INSTRUMENT_TYPE_CD IN ('CAP','FLR')
            and FINANCIAL_INSTRUMENT.FINANCIAL_INSTRUMENT_RK = OPTION_INSTRUMENT.FINANCIAL_INSTRUMENT_RK
            and OPTION_INSTRUMENT.VALID_FROM_DTTM <= &REPDT < OPTION_INSTRUMENT.VALID_TO_DTTM
            and not (OPTION_INSTRUMENT.IRB_RATE_NAME = 'RUONIA'
            and FINANCIAL_INSTRUMENT.INTEREST_PAYMENT_TYPE_CD = 'FLT')
         ) left join 
      dwh_dds.SWAP_INSTRUMENT_LEG
         on
         (
            FINANCIAL_INSTRUMENT.FINANCIAL_INSTRUMENT_TYPE_CD IN ('IRS','CIS')
            and FINANCIAL_INSTRUMENT.FINANCIAL_INSTRUMENT_RK = SWAP_INSTRUMENT_LEG.FINANCIAL_INSTRUMENT_RK
            and SWAP_INSTRUMENT_LEG.VALID_FROM_DTTM <= &REPDT < SWAP_INSTRUMENT_LEG.VALID_TO_DTTM
            and not (SWAP_INSTRUMENT_LEG.IRB_RATE_NAME = 'RUONIA'
            and FINANCIAL_INSTRUMENT.INTEREST_PAYMENT_TYPE_CD = 'FLT')
         )
   where
      W1OAQKQTH.FINANCIAL_ACCOUNT_TYPE_CD = 'DRV'
      and coalesce(FRA_INSTRUMENT.FINANCIAL_INSTRUMENT_RK,OPTION_INSTRUMENT.FINANCIAL_INSTRUMENT_RK,SWAP_INSTRUMENT_LEG.FINANCIAL_INSTRUMENT_RK) NOT IS MISSING 
   ;
quit;

%global etls_sql_pushDown;
%let etls_sql_pushDown = &sys_sql_ip_all;

%rcSet(&sqlrc); 



/**  Step end SQL Join **/

/*==========================================================================* 
 * Step:            SQL Join                              A5ELGGF9.AK000109 * 
 * Transform:       Join                                                    * 
 * Description:     DRVREPDT1                                               * 
 *                                                                          * 
 * Source Tables:   FINANCIAL_ACCOUNT - work.W1OAWZ5SU    A5ELGGF9.AF0000DN * 
 *                  FINANCIAL_INSTRUMENT_ASSOC -          A569C89V.AE0000FW * 
 *                   dwh_dds.FINANCIAL_INSTRUMENT_ASSOC                     * 
 *                  FINANCIAL_INSTRUMENT -                A569C89V.AE0000FV * 
 *                   dwh_dds.FINANCIAL_INSTRUMENT                           * 
 *                  FRA_INSTRUMENT -                      A569C89V.AE0000G5 * 
 *                   dwh_dds.FRA_INSTRUMENT                                 * 
 *                  OPTION_INSTRUMENT -                   A569C89V.AE0000IV * 
 *                   dwh_dds.OPTION_INSTRUMENT                              * 
 *                  SWAP_INSTRUMENT_LEG -                 A569C89V.AE0000JF * 
 *                   dwh_dds.SWAP_INSTRUMENT_LEG                            * 
 * Target Table:    SQL Join - work.W1OREUOJG             A5ELGGF9.AF0000FA * 
 *==========================================================================*/ 

%let transformID = %quote(A5ELGGF9.AK000109);
%let trans_rc = 0;
%let etls_stepStartTime = %sysfunc(datetime(), datetime20.); 

%let etls_recnt = -1;
%let SYS_SQL_IP_SPEEDO = Y;
%let SYS_SQL_MAPPUTTO = sas_put;
%let SYS_SQLREDUCEPUT = DBMS;
%global etls_sql_pushDown;
%let etls_sql_pushDown = -1;
option DBIDIRECTEXEC;

proc datasets lib = work nolist nowarn memtype = (data view);
   delete W1OREUOJG;
quit;

proc sql;
   create table work.W1OREUOJG as
   select
      W1OAWZ5SU.ACCOUNT_RK length = 8   
         format = 11.
         informat = 11.
         label = 'ACCOUNT_RK',
      W1OAWZ5SU.ACCOUNT_REGISTRATION_NM length = 100   
         format = $100.
         informat = $100.
         label = 'ACCOUNT_REGISTRATION_NM',
      W1OAWZ5SU.ALTERNATE_ACCOUNT_NM length = 40   
         format = $40.
         informat = $40.
         label = 'ALTERNATE_ACCOUNT_NM',
      W1OAWZ5SU.OPEN_DT length = 8   
         format = DATETIME20.
         informat = DATETIME20.
         label = 'OPEN_DT',
      FINANCIAL_INSTRUMENT.FACE_VALUE_AMT as FACE_VALUE_AMT1 length = 8   
         format = 20.5
         informat = 20.5
         label = 'FACE_VALUE_AMT',
      FINANCIAL_INSTRUMENT.FINANCIAL_INSTRUMENT_RK length = 8   
         format = 11.
         informat = 11.
         label = 'FINANCIAL_INSTRUMENT_RK'
   from
      work.W1OAWZ5SU left join 
      dwh_dds.FINANCIAL_INSTRUMENT_ASSOC
         on
         (
            W1OAWZ5SU.ACCOUNT_RK = FINANCIAL_INSTRUMENT_ASSOC.REFERENCE_ACCOUNT_RK
            and FINANCIAL_INSTRUMENT_ASSOC.VALID_FROM_DTTM <= &REPDT1 < FINANCIAL_INSTRUMENT_ASSOC.VALID_TO_DTTM
         ) left join 
      dwh_dds.FINANCIAL_INSTRUMENT
         on
         (
            FINANCIAL_INSTRUMENT_ASSOC.FINANCIAL_INSTRUMENT_RK = FINANCIAL_INSTRUMENT.FINANCIAL_INSTRUMENT_RK
            and FINANCIAL_INSTRUMENT.VALID_FROM_DTTM <= &REPDT1 < FINANCIAL_INSTRUMENT.VALID_TO_DTTM
         ) left join 
      dwh_dds.FRA_INSTRUMENT
         on
         (
            FINANCIAL_INSTRUMENT.FINANCIAL_INSTRUMENT_TYPE_CD = 'FRA'
            and FINANCIAL_INSTRUMENT.FINANCIAL_INSTRUMENT_RK = FRA_INSTRUMENT.FINANCIAL_INSTRUMENT_RK
            and FRA_INSTRUMENT.VALID_FROM_DTTM <= &REPDT1 < FRA_INSTRUMENT.VALID_TO_DTTM
            and not (FRA_INSTRUMENT.IRB_RATE_NAME = 'RUONIA'
            and FINANCIAL_INSTRUMENT.INTEREST_PAYMENT_TYPE_CD = 'FLT')
         ) left join 
      dwh_dds.OPTION_INSTRUMENT
         on
         (
            FINANCIAL_INSTRUMENT.FINANCIAL_INSTRUMENT_TYPE_CD IN ('CAP','FLR')
            and FINANCIAL_INSTRUMENT.FINANCIAL_INSTRUMENT_RK = OPTION_INSTRUMENT.FINANCIAL_INSTRUMENT_RK
            and OPTION_INSTRUMENT.VALID_FROM_DTTM <= &REPDT1 < OPTION_INSTRUMENT.VALID_TO_DTTM
            and not (OPTION_INSTRUMENT.IRB_RATE_NAME = 'RUONIA'
            and FINANCIAL_INSTRUMENT.INTEREST_PAYMENT_TYPE_CD = 'FLT')
         ) left join 
      dwh_dds.SWAP_INSTRUMENT_LEG
         on
         (
            FINANCIAL_INSTRUMENT.FINANCIAL_INSTRUMENT_TYPE_CD IN ('IRS','CIS')
            and FINANCIAL_INSTRUMENT.FINANCIAL_INSTRUMENT_RK = SWAP_INSTRUMENT_LEG.FINANCIAL_INSTRUMENT_RK
            and SWAP_INSTRUMENT_LEG.VALID_FROM_DTTM <= &REPDT1 < SWAP_INSTRUMENT_LEG.VALID_TO_DTTM
            and not (SWAP_INSTRUMENT_LEG.IRB_RATE_NAME = 'RUONIA'
            and FINANCIAL_INSTRUMENT.INTEREST_PAYMENT_TYPE_CD = 'FLT')
         )
   where
      W1OAWZ5SU.FINANCIAL_ACCOUNT_TYPE_CD = 'DRV'
      and coalesce(FRA_INSTRUMENT.FINANCIAL_INSTRUMENT_RK,OPTION_INSTRUMENT.FINANCIAL_INSTRUMENT_RK,SWAP_INSTRUMENT_LEG.FINANCIAL_INSTRUMENT_RK) NOT IS MISSING 
   ;
quit;

%global etls_sql_pushDown;
%let etls_sql_pushDown = &sys_sql_ip_all;

%rcSet(&sqlrc); 



/**  Step end SQL Join **/

/*==========================================================================* 
 * Step:            SQL Join                              A5ELGGF9.AK00010A * 
 * Transform:       Join                                                    * 
 * Description:     DRV-jrnlREPDT2                                          * 
 *                                                                          * 
 * Source Tables:   FINANCIAL_ACCOUNT - work.W1OAWZ5SU    A5ELGGF9.AF0000DN * 
 *                  FINANCIAL_INSTRUMENT_ASSOC -          A569C89V.AE0000FW * 
 *                   dwh_dds.FINANCIAL_INSTRUMENT_ASSOC                     * 
 *                  IRB_FINANCIAL_INSTRUMENT_JRNL -       A569C89V.AE0000I7 * 
 *                  dwh_dds.IRB_FINANCIAL_INSTRUMENT_JR                     * 
 *                  NL                                                      * 
 *                  FRA_INSTRUMENT -                      A569C89V.AE0000G5 * 
 *                   dwh_dds.FRA_INSTRUMENT                                 * 
 *                  OPTION_INSTRUMENT -                   A569C89V.AE0000IV * 
 *                   dwh_dds.OPTION_INSTRUMENT                              * 
 *                  SWAP_INSTRUMENT_LEG -                 A569C89V.AE0000JF * 
 *                   dwh_dds.SWAP_INSTRUMENT_LEG                            * 
 * Target Table:    SQL Join - work.WV6AYK8               A5ELGGF9.AF0000FB * 
 *==========================================================================*/ 

%let transformID = %quote(A5ELGGF9.AK00010A);
%let trans_rc = 0;
%let etls_stepStartTime = %sysfunc(datetime(), datetime20.); 

%let etls_recnt = -1;
%let SYS_SQL_IP_SPEEDO = Y;
%let SYS_SQL_MAPPUTTO = sas_put;
%let SYS_SQLREDUCEPUT = DBMS;
%global etls_sql_pushDown;
%let etls_sql_pushDown = -1;
option DBIDIRECTEXEC;

proc datasets lib = work nolist nowarn memtype = (data view);
   delete WV6AYK8;
quit;

proc sql;
   create view work.WV6AYK8 as
   select
      W1OAWZ5SU.ACCOUNT_RK length = 8   
         format = 11.
         informat = 11.
         label = 'ACCOUNT_RK',
      W1OAWZ5SU.ACCOUNT_REGISTRATION_NM length = 100   
         format = $100.
         informat = $100.
         label = 'ACCOUNT_REGISTRATION_NM',
      W1OAWZ5SU.ALTERNATE_ACCOUNT_NM length = 40   
         format = $40.
         informat = $40.
         label = 'ALTERNATE_ACCOUNT_NM',
      W1OAWZ5SU.OPEN_DT length = 8   
         format = DATETIME20.
         informat = DATETIME20.
         label = 'OPEN_DT',
      IRB_FINANCIAL_INSTRUMENT_JRNL.FINANCIAL_INSTRUMENT_RK length = 8   
         format = 11.
         informat = 11.
         label = 'FINANCIAL_INSTRUMENT_RK',
      IRB_FINANCIAL_INSTRUMENT_JRNL.FACE_VALUE_AMT as FACE_VALUE_AMT1 length = 8   
         format = 20.5
         informat = 20.5
         label = 'FACE_VALUE_AMT'
   from
      work.W1OAWZ5SU left join 
      dwh_dds.FINANCIAL_INSTRUMENT_ASSOC
         on
         (
            W1OAWZ5SU.ACCOUNT_RK = FINANCIAL_INSTRUMENT_ASSOC.REFERENCE_ACCOUNT_RK
            and FINANCIAL_INSTRUMENT_ASSOC.VALID_FROM_DTTM <= &REPDT1 <  FINANCIAL_INSTRUMENT_ASSOC.VALID_TO_DTTM
         ) left join 
      dwh_dds.IRB_FINANCIAL_INSTRUMENT_JRNL
         on
         (
            FINANCIAL_INSTRUMENT_ASSOC.FINANCIAL_INSTRUMENT_RK = IRB_FINANCIAL_INSTRUMENT_JRNL.FINANCIAL_INSTRUMENT_RK
            and datepart(IRB_FINANCIAL_INSTRUMENT_JRNL.JRNL_TO_DTTM) = datepart(&REPDT2)
            and IRB_FINANCIAL_INSTRUMENT_JRNL.VALID_FROM_DTTM <= &REPDT1 < IRB_FINANCIAL_INSTRUMENT_JRNL.VALID_TO_DTTM
         ) left join 
      dwh_dds.FRA_INSTRUMENT
         on
         (
            IRB_FINANCIAL_INSTRUMENT_JRNL.FINANCIAL_INSTRUMENT_TYPE_CD = 'FRA'
            and IRB_FINANCIAL_INSTRUMENT_JRNL.FINANCIAL_INSTRUMENT_RK = FRA_INSTRUMENT.FINANCIAL_INSTRUMENT_RK
            and FRA_INSTRUMENT.VALID_FROM_DTTM <= &REPDT1 < FRA_INSTRUMENT.VALID_TO_DTTM
            and not (FRA_INSTRUMENT.IRB_RATE_NAME = 'RUONIA'
            and IRB_FINANCIAL_INSTRUMENT_JRNL.INTEREST_PAYMENT_TYPE_CD = 'FLT')
         ) left join 
      dwh_dds.OPTION_INSTRUMENT
         on
         (
            IRB_FINANCIAL_INSTRUMENT_JRNL.FINANCIAL_INSTRUMENT_TYPE_CD IN ('CAP','FLR')
            and IRB_FINANCIAL_INSTRUMENT_JRNL.FINANCIAL_INSTRUMENT_RK = OPTION_INSTRUMENT.FINANCIAL_INSTRUMENT_RK
            and OPTION_INSTRUMENT.VALID_FROM_DTTM <= &REPDT1 < OPTION_INSTRUMENT.VALID_TO_DTTM
            and not (OPTION_INSTRUMENT.IRB_RATE_NAME = 'RUONIA'
            and IRB_FINANCIAL_INSTRUMENT_JRNL.INTEREST_PAYMENT_TYPE_CD = 'FLT')
         ) left join 
      dwh_dds.SWAP_INSTRUMENT_LEG
         on
         (
            IRB_FINANCIAL_INSTRUMENT_JRNL.FINANCIAL_INSTRUMENT_TYPE_CD IN ('IRS','CIS')
            and IRB_FINANCIAL_INSTRUMENT_JRNL.FINANCIAL_INSTRUMENT_RK = SWAP_INSTRUMENT_LEG.FINANCIAL_INSTRUMENT_RK
            and SWAP_INSTRUMENT_LEG.VALID_FROM_DTTM <= &REPDT1 < SWAP_INSTRUMENT_LEG.VALID_TO_DTTM
            and not (SWAP_INSTRUMENT_LEG.IRB_RATE_NAME = 'RUONIA'
            and IRB_FINANCIAL_INSTRUMENT_JRNL.INTEREST_PAYMENT_TYPE_CD = 'FLT')
         )
   where
      W1OAWZ5SU.FINANCIAL_ACCOUNT_TYPE_CD = 'DRV'
      and coalesce(FRA_INSTRUMENT.FINANCIAL_INSTRUMENT_RK,OPTION_INSTRUMENT.FINANCIAL_INSTRUMENT_RK,SWAP_INSTRUMENT_LEG.FINANCIAL_INSTRUMENT_RK) NOT IS MISSING 
   ;
quit;

%global etls_sql_pushDown;
%let etls_sql_pushDown = &sys_sql_ip_all;

%rcSet(&sqlrc); 



/**  Step end SQL Join **/

/*==========================================================================* 
 * Step:            SQL Join                              A5ELGGF9.AK00010B * 
 * Transform:       Join                                                    * 
 * Description:     6. Проверка условий DQ                                  * 
 *                                                                          * 
 * Source Tables:   SQL Join - work.W1OREU80U             A5ELGGF9.AF0000F9 * 
 *                  SQL Join - work.W1OREUOJG             A5ELGGF9.AF0000FA * 
 * Target Table:    SQL Join - work.W1ORSW0MY             A5ELGGF9.AF0000FC * 
 *==========================================================================*/ 

%let transformID = %quote(A5ELGGF9.AK00010B);
%let trans_rc = 0;
%let etls_stepStartTime = %sysfunc(datetime(), datetime20.); 

%let etls_recCheckExist = 0; 
%let etls_recnt = 0; 
%macro etls_recordCheck; 
   %let etls_recCheckExist = %eval(%sysfunc(exist(work.W1OREU80U, DATA)) or 
         %sysfunc(exist(work.W1OREU80U, VIEW))); 
   
   %if (&etls_recCheckExist) %then
   %do;
      %local etls_syntaxcheck; 
      %let etls_syntaxcheck = %sysfunc(getoption(syntaxcheck)); 
      /* Turn off syntaxcheck option to perform following steps  */ 
      options nosyntaxcheck;
      
      proc contents data = work.W1OREU80U out = work.etls_contents(keep = nobs) noprint; 
      run; 
      
      data _null_; 
         set work.etls_contents (obs = 1); 
         call symput("etls_recnt", left(put(nobs,32.))); 
      run;
      
      proc datasets lib = work nolist nowarn memtype = (data view);
         delete etls_contents;
      quit;
      
      /* Reset syntaxcheck option to previous setting  */ 
      options &etls_syntaxcheck; 
   %end;
%mend etls_recordCheck;
%etls_recordCheck;

%let SYS_SQL_IP_SPEEDO = Y;
%let SYS_SQL_MAPPUTTO = sas_put;
%let SYS_SQLREDUCEPUT = DBMS;
%global etls_sql_pushDown;
%let etls_sql_pushDown = -1;
option DBIDIRECTEXEC;

proc datasets lib = work nolist nowarn memtype = (data view);
   delete W1ORSW0MY;
quit;

proc sql;
   create table work.W1ORSW0MY as
   select
      W1OREU80U.ACCOUNT_RK length = 8   
         format = 11.
         informat = 11.
         label = 'ACCOUNT_RK',
      W1OREU80U.ACCOUNT_REGISTRATION_NM length = 100   
         format = $100.
         informat = $100.
         label = 'ACCOUNT_REGISTRATION_NM',
      W1OREU80U.ALTERNATE_ACCOUNT_NM length = 40   
         format = $40.
         informat = $40.
         label = 'ALTERNATE_ACCOUNT_NM',
      W1OREU80U.OPEN_DT length = 8   
         format = DATETIME20.
         informat = DATETIME20.
         label = 'OPEN_DT',
      W1OREU80U.FACE_VALUE_AMT length = 8   
         format = 20.5
         informat = 20.5
         label = 'FACE_VALUE_AMT',
      W1OREU80U.FINANCIAL_INSTRUMENT_RK length = 8   
         format = 11.
         informat = 11.
         label = 'FINANCIAL_INSTRUMENT_RK',
      W1OREU80U.FINANCIAL_INSTRUMENT_TYPE_CD length = 3   
         format = $3.
         informat = $3.
         label = 'FINANCIAL_INSTRUMENT_TYPE_CD',
      W1OREU80U.IRB_SRC_INSTRUMENT_ID length = 32   
         format = $32.
         informat = $32.
         label = 'IRB_SRC_INSTRUMENT_ID',
      W1OREUOJG.FACE_VALUE_AMT1 length = 8   
         format = 20.5
         informat = 20.5
         label = 'FACE_VALUE_AMT'
   from
      work.W1OREU80U inner join 
      work.W1OREUOJG
         on
         (
            W1OREU80U.ACCOUNT_RK = W1OREUOJG.ACCOUNT_RK
            and W1OREU80U.FINANCIAL_INSTRUMENT_RK = W1OREUOJG.FINANCIAL_INSTRUMENT_RK
         )
   where
      W1OREU80U.FACE_VALUE_AMT <> W1OREUOJG.FACE_VALUE_AMT1
      and W1OREU80U.FACE_VALUE_AMT NOT IS MISSING 
      and W1OREUOJG.FACE_VALUE_AMT1 NOT IS MISSING 
   ;
quit;

%global etls_sql_pushDown;
%let etls_sql_pushDown = &sys_sql_ip_all;

%rcSet(&sqlrc); 



/**  Step end SQL Join **/

/*==========================================================================* 
 * Step:            SQL Join                              A5ELGGF9.AK00010C * 
 * Transform:       Join                                                    * 
 * Description:     6. Доп.проверка условий DQ                              * 
 *                                                                          * 
 * Source Tables:   SQL Join - work.W1OREU80U             A5ELGGF9.AF0000F9 * 
 *                  SQL Join - work.WV6AYK8               A5ELGGF9.AF0000FB * 
 * Target Table:    SQL Join - work.WVWKWYI               A5ELGGF9.AF0000FD * 
 *==========================================================================*/ 

%let transformID = %quote(A5ELGGF9.AK00010C);
%let trans_rc = 0;
%let etls_stepStartTime = %sysfunc(datetime(), datetime20.); 

%let etls_recCheckExist = 0; 
%let etls_recnt = 0; 
%macro etls_recordCheck; 
   %let etls_recCheckExist = %eval(%sysfunc(exist(work.W1OREU80U, DATA)) or 
         %sysfunc(exist(work.W1OREU80U, VIEW))); 
   
   %if (&etls_recCheckExist) %then
   %do;
      %local etls_syntaxcheck; 
      %let etls_syntaxcheck = %sysfunc(getoption(syntaxcheck)); 
      /* Turn off syntaxcheck option to perform following steps  */ 
      options nosyntaxcheck;
      
      proc contents data = work.W1OREU80U out = work.etls_contents(keep = nobs) noprint; 
      run; 
      
      data _null_; 
         set work.etls_contents (obs = 1); 
         call symput("etls_recnt", left(put(nobs,32.))); 
      run;
      
      proc datasets lib = work nolist nowarn memtype = (data view);
         delete etls_contents;
      quit;
      
      /* Reset syntaxcheck option to previous setting  */ 
      options &etls_syntaxcheck; 
   %end;
%mend etls_recordCheck;
%etls_recordCheck;

%let SYS_SQL_IP_SPEEDO = Y;
%let SYS_SQL_MAPPUTTO = sas_put;
%let SYS_SQLREDUCEPUT = DBMS;
%global etls_sql_pushDown;
%let etls_sql_pushDown = -1;
option DBIDIRECTEXEC;

proc datasets lib = work nolist nowarn memtype = (data view);
   delete WVWKWYI;
quit;

proc sql;
   create view work.WVWKWYI as
   select
      W1OREU80U.ACCOUNT_RK length = 8   
         format = 11.
         informat = 11.
         label = 'ACCOUNT_RK',
      W1OREU80U.ACCOUNT_REGISTRATION_NM length = 100   
         format = $100.
         informat = $100.
         label = 'ACCOUNT_REGISTRATION_NM',
      W1OREU80U.ALTERNATE_ACCOUNT_NM length = 40   
         format = $40.
         informat = $40.
         label = 'ALTERNATE_ACCOUNT_NM',
      W1OREU80U.OPEN_DT length = 8   
         format = DATETIME20.
         informat = DATETIME20.
         label = 'OPEN_DT',
      W1OREU80U.FACE_VALUE_AMT length = 8   
         format = 20.5
         informat = 20.5
         label = 'FACE_VALUE_AMT',
      W1OREU80U.FINANCIAL_INSTRUMENT_RK length = 8   
         format = 11.
         informat = 11.
         label = 'FINANCIAL_INSTRUMENT_RK',
      W1OREU80U.FINANCIAL_INSTRUMENT_TYPE_CD length = 3   
         format = $3.
         informat = $3.
         label = 'FINANCIAL_INSTRUMENT_TYPE_CD',
      W1OREU80U.IRB_SRC_INSTRUMENT_ID length = 32   
         format = $32.
         informat = $32.
         label = 'IRB_SRC_INSTRUMENT_ID',
      WV6AYK8.FACE_VALUE_AMT1 length = 8   
         format = 20.5
         informat = 20.5
         label = 'FACE_VALUE_AMT'
   from
      work.W1OREU80U inner join 
      work.WV6AYK8
         on
         (
            W1OREU80U.ACCOUNT_RK = WV6AYK8.ACCOUNT_RK
            and W1OREU80U.FINANCIAL_INSTRUMENT_RK = WV6AYK8.FINANCIAL_INSTRUMENT_RK
         )
   where
      W1OREU80U.FACE_VALUE_AMT <> WV6AYK8.FACE_VALUE_AMT1
      and W1OREU80U.FACE_VALUE_AMT NOT IS MISSING 
      and WV6AYK8.FACE_VALUE_AMT1 NOT IS MISSING 
   ;
quit;

%global etls_sql_pushDown;
%let etls_sql_pushDown = &sys_sql_ip_all;

%rcSet(&sqlrc); 



/**  Step end SQL Join **/

/*==========================================================================* 
 * Step:            Append                                A5ELGGF9.AK00010D * 
 * Transform:       Append                                                  * 
 * Description:                                                             * 
 *                                                                          * 
 * Source Tables:   SQL Join - work.W1ORSW0MY             A5ELGGF9.AF0000FC * 
 *                  SQL Join - work.WVWKWYI               A5ELGGF9.AF0000FD * 
 * Target Table:    Append - work.WW0NO6P                 A5ELGGF9.AF0000FE * 
 *==========================================================================*/ 

%let transformID = %quote(A5ELGGF9.AK00010D);
%let trans_rc = 0;
%let etls_stepStartTime = %sysfunc(datetime(), datetime20.); 

%let etls_recCheckExist = 0; 
%let etls_recnt = 0; 
%macro etls_recordCheck; 
   %let etls_recCheckExist = %eval(%sysfunc(exist(work.W1ORSW0MY, DATA)) or 
         %sysfunc(exist(work.W1ORSW0MY, VIEW))); 
   
   %if (&etls_recCheckExist) %then
   %do;
      %local etls_syntaxcheck; 
      %let etls_syntaxcheck = %sysfunc(getoption(syntaxcheck)); 
      /* Turn off syntaxcheck option to perform following steps  */ 
      options nosyntaxcheck;
      
      proc contents data = work.W1ORSW0MY out = work.etls_contents(keep = nobs) noprint; 
      run; 
      
      data _null_; 
         set work.etls_contents (obs = 1); 
         call symput("etls_recnt", left(put(nobs,32.))); 
      run;
      
      proc datasets lib = work nolist nowarn memtype = (data view);
         delete etls_contents;
      quit;
      
      /* Reset syntaxcheck option to previous setting  */ 
      options &etls_syntaxcheck; 
   %end;
%mend etls_recordCheck;
%etls_recordCheck;

%let dbxrc = %eval(%sysfunc(exist(work.W1ORSW0MY, DATA)) or 
      %sysfunc(exist(work.W1ORSW0MY, VIEW))); 

%let dbxrc = %eval(%sysfunc(exist(work.WVWKWYI, DATA)) or 
      %sysfunc(exist(work.WVWKWYI, VIEW))); 

proc datasets lib = work nolist nowarn memtype = (data view);
   delete WW0NO6P;
quit;

data work.WW0NO6P / view=work.WW0NO6P;
   set work.W1ORSW0MY
       work.WVWKWYI;
   keep ACCOUNT_RK ACCOUNT_REGISTRATION_NM ALTERNATE_ACCOUNT_NM OPEN_DT 
    FACE_VALUE_AMT FINANCIAL_INSTRUMENT_RK FINANCIAL_INSTRUMENT_TYPE_CD 
    IRB_SRC_INSTRUMENT_ID FACE_VALUE_AMT1; 
run;

%rcSet(&syserr); 



/**  Step end Append **/

/*==========================================================================* 
 * Step:            SQL Join                              A5ELGGF9.AK00010E * 
 * Transform:       Join                                                    * 
 * Description:     Заполнение атрибутов                                    * 
 *                                                                          * 
 * Source Tables:   SWAP_INSTRUMENT_LEG -                 A569C89V.AE0000JF * 
 *                   dwh_dds.SWAP_INSTRUMENT_LEG                            * 
 *                  Append - work.WW0NO6P                 A5ELGGF9.AF0000FE * 
 * Target Table:    SQL Join - work.W1P3HMHMC             A5ELGGF9.AF0000FF * 
 *==========================================================================*/ 

%let transformID = %quote(A5ELGGF9.AK00010E);
%let trans_rc = 0;
%let etls_stepStartTime = %sysfunc(datetime(), datetime20.); 

%let etls_recnt = 0;
%macro etls_recordCheck; 
   %let etls_recCheckExist = %eval(%sysfunc(exist(dwh_dds.SWAP_INSTRUMENT_LEG, DATA)) or 
         %sysfunc(exist(dwh_dds.SWAP_INSTRUMENT_LEG, VIEW))); 
   
   %if (&etls_recCheckExist) %then
   %do;
      proc sql noprint;
         select count(*) into :etls_recnt from dwh_dds.SWAP_INSTRUMENT_LEG;
      quit;
   %end;
%mend etls_recordCheck;
%etls_recordCheck;

%let SYS_SQL_IP_SPEEDO = Y;
%let SYS_SQL_MAPPUTTO = sas_put;
%let SYS_SQLREDUCEPUT = DBMS;
%global etls_sql_pushDown;
%let etls_sql_pushDown = -1;
option DBIDIRECTEXEC;

proc datasets lib = work nolist nowarn memtype = (data view);
   delete W1P3HMHMC;
quit;

proc sql;
   create table work.W1P3HMHMC as
   select
      WW0NO6P.ACCOUNT_RK length = 8   
         format = 11.
         informat = 11.
         label = 'ACCOUNT_RK',
      'П-06' as REPORTCODE length = 5   
         format = $5.
         informat = $5.
         label = 'REPORTCODE',
      &REPDT as REPORTDATE length = 8   
         format = DATETIME20.
         informat = DATETIME20.
         label = 'REPORTDATE',
      strip(WW0NO6P.ACCOUNT_REGISTRATION_NM ) as FRONTKDEALID length = 10   
         format = $10.
         informat = $10.
         label = 'FRONTKDEALID',
      put(input(substr(WW0NO6P.ALTERNATE_ACCOUNT_NM  , 1, findc(WW0NO6P.ALTERNATE_ACCOUNT_NM  , '_')-1), best.), best.) as FRONTFDEALID length = 10   
         format = $10.
         informat = $10.
         label = 'FRONTFDEALID',
      WW0NO6P.IRB_SRC_INSTRUMENT_ID as DEALID length = 100   
         format = $100.
         informat = $100.
         label = 'DEALID',
      WW0NO6P.FINANCIAL_INSTRUMENT_TYPE_CD as INSTRUMENTTYPECD length = 3   
         format = $3.
         informat = $3.
         label = 'INSTRUMENTTYPECD',
      WW0NO6P.OPEN_DT as DEALDATE length = 8   
         format = DATETIME20.
         informat = DATETIME20.
         label = 'DEALDATE',
      case 
         when WW0NO6P.FINANCIAL_INSTRUMENT_TYPE_CD in ('SPW','SWS','IRS','CIS')
            then CASE   when SWAP_INSTRUMENT_LEG.SWAP_LEG_TYPE_CD ='FRS' then 'NotionalCurrent1'   when SWAP_INSTRUMENT_LEG.SWAP_LEG_TYPE_CD ='SEC' then 'NotionalCurrent2'   else 'NotionalCurrent1' END
      else 'NotionalCurrent1'
      end as ADDITIONALINFORMATION length = 255   
         format = $255.
         informat = $255.
         label = 'ADDITIONALINFORMATION',
      put(WW0NO6P.FACE_VALUE_AMT1 , best12.5) as VALUEFRS length = 20   
         format = $20.
         informat = $20.
         label = 'VALUEFRS',
      put(WW0NO6P.FACE_VALUE_AMT , best12.5) as VALUESEC length = 20   
         format = $20.
         informat = $20.
         label = 'VALUESEC'
   from
      work.WW0NO6P left join 
      dwh_dds.SWAP_INSTRUMENT_LEG
         on
         (
            WW0NO6P.FINANCIAL_INSTRUMENT_RK = SWAP_INSTRUMENT_LEG.FINANCIAL_INSTRUMENT_RK
            and SWAP_INSTRUMENT_LEG.VALID_FROM_DTTM <= &REPDT < SWAP_INSTRUMENT_LEG.VALID_TO_DTTM
         )
   ;
quit;

%global etls_sql_pushDown;
%let etls_sql_pushDown = &sys_sql_ip_all;

%rcSet(&sqlrc); 



/**  Step end SQL Join **/

/*==========================================================================* 
 * Step:            Append                                A5ELGGF9.AK00010F * 
 * Transform:       Append                                                  * 
 * Description:                                                             * 
 *                                                                          * 
 * Source Tables:   SQL Join - work.W1OS49XFW             A5ELGGF9.AF0000EY * 
 *                  SQL Join - work.W1OSH1MCP             A5ELGGF9.AF0000EZ * 
 *                  Extract - work.W1OSM4NF5              A5ELGGF9.AF0000F0 * 
 *                  SQL Join - work.W1OSQGJIG             A5ELGGF9.AF0000F1 * 
 *                  SQL Join - work.W1OTITK6R             A5ELGGF9.AF0000F2 * 
 *                  SQL Join - work.W1OTVQVPG             A5ELGGF9.AF0000F3 * 
 *                  SQL Join - work.W1OU59APU             A5ELGGF9.AF0000F4 * 
 *                  SQL Join - work.W1OUIQAPW             A5ELGGF9.AF0000F5 * 
 *                  SQL Join - work.W1OUIV1OE             A5ELGGF9.AF0000F6 * 
 *                  SQL Join - work.W1P3HMHMC             A5ELGGF9.AF0000FF * 
 *                  SQL Join - work.WH8HQ0                A5ELGGF9.AF0000F7 * 
 *                  SQL Join - work.W2HG95P               A5ELGGF9.AF0000F8 * 
 * Target Table:    Append - work.W1P3LQQVS               A5ELGGF9.AF0000FG * 
 *==========================================================================*/ 

%let transformID = %quote(A5ELGGF9.AK00010F);
%let trans_rc = 0;
%let etls_stepStartTime = %sysfunc(datetime(), datetime20.); 

%let etls_recCheckExist = 0; 
%let etls_recnt = 0; 
%macro etls_recordCheck; 
   %let etls_recCheckExist = %eval(%sysfunc(exist(work.W1OS49XFW, DATA)) or 
         %sysfunc(exist(work.W1OS49XFW, VIEW))); 
   
   %if (&etls_recCheckExist) %then
   %do;
      %local etls_syntaxcheck; 
      %let etls_syntaxcheck = %sysfunc(getoption(syntaxcheck)); 
      /* Turn off syntaxcheck option to perform following steps  */ 
      options nosyntaxcheck;
      
      proc contents data = work.W1OS49XFW out = work.etls_contents(keep = nobs) noprint; 
      run; 
      
      data _null_; 
         set work.etls_contents (obs = 1); 
         call symput("etls_recnt", left(put(nobs,32.))); 
      run;
      
      proc datasets lib = work nolist nowarn memtype = (data view);
         delete etls_contents;
      quit;
      
      /* Reset syntaxcheck option to previous setting  */ 
      options &etls_syntaxcheck; 
   %end;
%mend etls_recordCheck;
%etls_recordCheck;

%let dbxrc = %eval(%sysfunc(exist(work.W1OS49XFW, DATA)) or 
      %sysfunc(exist(work.W1OS49XFW, VIEW))); 

%let dbxrc = %eval(%sysfunc(exist(work.W1OSH1MCP, DATA)) or 
      %sysfunc(exist(work.W1OSH1MCP, VIEW))); 

%let dbxrc = %eval(%sysfunc(exist(work.W1OSM4NF5, DATA)) or 
      %sysfunc(exist(work.W1OSM4NF5, VIEW))); 

%let dbxrc = %eval(%sysfunc(exist(work.W1OSQGJIG, DATA)) or 
      %sysfunc(exist(work.W1OSQGJIG, VIEW))); 

%let dbxrc = %eval(%sysfunc(exist(work.W1OTITK6R, DATA)) or 
      %sysfunc(exist(work.W1OTITK6R, VIEW))); 

%let dbxrc = %eval(%sysfunc(exist(work.W1OTVQVPG, DATA)) or 
      %sysfunc(exist(work.W1OTVQVPG, VIEW))); 

%let dbxrc = %eval(%sysfunc(exist(work.W1OU59APU, DATA)) or 
      %sysfunc(exist(work.W1OU59APU, VIEW))); 

%let dbxrc = %eval(%sysfunc(exist(work.W1OUIQAPW, DATA)) or 
      %sysfunc(exist(work.W1OUIQAPW, VIEW))); 

%let dbxrc = %eval(%sysfunc(exist(work.W1OUIV1OE, DATA)) or 
      %sysfunc(exist(work.W1OUIV1OE, VIEW))); 

%let dbxrc = %eval(%sysfunc(exist(work.W1P3HMHMC, DATA)) or 
      %sysfunc(exist(work.W1P3HMHMC, VIEW))); 

%let dbxrc = %eval(%sysfunc(exist(work.WH8HQ0, DATA)) or 
      %sysfunc(exist(work.WH8HQ0, VIEW))); 

%let dbxrc = %eval(%sysfunc(exist(work.W2HG95P, DATA)) or 
      %sysfunc(exist(work.W2HG95P, VIEW))); 

proc datasets lib = work nolist nowarn memtype = (data view);
   delete W1P3LQQVS;
quit;

data work.W1P3LQQVS;
   set work.W1OS49XFW
       work.W1OSH1MCP
       work.W1OSM4NF5
       work.W1OSQGJIG
       work.W1OTITK6R
       work.W1OTVQVPG
       work.W1OU59APU
       work.W1OUIQAPW
       work.W1OUIV1OE
       work.W1P3HMHMC
       work.WH8HQ0
       work.W2HG95P;
   keep ACCOUNT_RK REPORTCODE REPORTDATE FRONTKDEALID FRONTFDEALID DEALID 
    INSTRUMENTTYPECD DEALDATE ADDITIONALINFORMATION VALUEFRS VALUESEC; 
run;

%rcSet(&syserr); 



/**  Step end Append **/

/*==========================================================================* 
 * Step:            Extract                               A5ELGGF9.AK00010G * 
 * Transform:       Extract                                                 * 
 * Description:     Убираем дубли, возможные при доп.проверках              * 
 *                                                                          * 
 * Source Table:    Append - work.W1P3LQQVS               A5ELGGF9.AF0000FG * 
 * Target Table:    Extract - work.W1L6PELS               A5ELGGF9.AF0000FH * 
 *==========================================================================*/ 

%let transformID = %quote(A5ELGGF9.AK00010G);
%let trans_rc = 0;
%let etls_stepStartTime = %sysfunc(datetime(), datetime20.); 

%let etls_recCheckExist = 0; 
%let etls_recnt = 0; 
%macro etls_recordCheck; 
   %let etls_recCheckExist = %eval(%sysfunc(exist(work.W1P3LQQVS, DATA)) or 
         %sysfunc(exist(work.W1P3LQQVS, VIEW))); 
   
   %if (&etls_recCheckExist) %then
   %do;
      %local etls_syntaxcheck; 
      %let etls_syntaxcheck = %sysfunc(getoption(syntaxcheck)); 
      /* Turn off syntaxcheck option to perform following steps  */ 
      options nosyntaxcheck;
      
      proc contents data = work.W1P3LQQVS out = work.etls_contents(keep = nobs) noprint; 
      run; 
      
      data _null_; 
         set work.etls_contents (obs = 1); 
         call symput("etls_recnt", left(put(nobs,32.))); 
      run;
      
      proc datasets lib = work nolist nowarn memtype = (data view);
         delete etls_contents;
      quit;
      
      /* Reset syntaxcheck option to previous setting  */ 
      options &etls_syntaxcheck; 
   %end;
%mend etls_recordCheck;
%etls_recordCheck;

%let SYSLAST = %nrquote(work.W1P3LQQVS); 

%let SYS_SQL_IP_SPEEDO = Y;
%let SYS_SQL_MAPPUTTO = sas_put;
%let SYS_SQLREDUCEPUT = DBMS;
%global etls_sql_pushDown;
%let etls_sql_pushDown = -1;
option DBIDIRECTEXEC;

/*---- Map the columns  ----*/ 
proc datasets lib = work nolist nowarn memtype = (data view);
   delete W1L6PELS;
quit;

%put %str(NOTE: Mapping columns ...);
proc sql;
   create view work.W1L6PELS as
      select distinct
         ACCOUNT_RK,
         REPORTCODE,
         REPORTDATE,
         FRONTKDEALID,
         FRONTFDEALID,
         DEALID,
         INSTRUMENTTYPECD,
         DEALDATE,
         ADDITIONALINFORMATION,
         VALUEFRS,
         VALUESEC
   from &SYSLAST
   ;
quit;

%let SYSLAST = work.W1L6PELS;

%global etls_sql_pushDown;
%let etls_sql_pushDown = &sys_sql_ip_all;

%rcSet(&sqlrc); 



/**  Step end Extract **/

/*==========================================================================* 
 * Step:            Table Loader                          A5ELGGF9.AK00010H * 
 * Transform:       Table Loader (Version 2.1)                              * 
 * Description:                                                             * 
 *                                                                          * 
 * Source Table:    Extract - work.W1L6PELS               A5ELGGF9.AF0000FH * 
 * Target Table:    DQ_DRVT_DWH_DM - dm_dq.DQ_DRVT_DWH_DM A5ELGGF9.AE000049 * 
 *==========================================================================*/ 

%let transformID = %quote(A5ELGGF9.AK00010H);
%let trans_rc = 0;
%let etls_stepStartTime = %sysfunc(datetime(), datetime20.); 

%let SYSLAST = %nrquote(work.W1L6PELS); 

%let SYS_SQL_IP_SPEEDO = Y;
%let SYS_SQL_MAPPUTTO = sas_put;
%let SYS_SQLREDUCEPUT = DBMS;
%global etls_sql_pushDown;
%let etls_sql_pushDown = -1;
option DBIDIRECTEXEC;

%global etls_tableExist;
%global etls_numIndex;
%global etls_lastTable;
%let etls_tableExist = -1; 
%let etls_numIndex = -1; 
%let etls_lastTable = &SYSLAST; 

/*---- Define load data macro  ----*/ 

/* --------------------------------------------------------------
   Load Technique Selection: AppendToExisting - AppendProc
   Constraint and index action selections: 'ASIS','ASIS','ASIS','ASIS'
   Additional options selections... 
      Set unmapped to missing on updates: false 
   -------------------------------------------------------------- */
%macro etls_loader;

   %let etls_tableOptions = ;
   
   /*---- Map the columns  ----*/ 
   proc datasets lib = work nolist nowarn memtype = (data view);
      delete WJ2YB7E;
   quit;
   
   data _null_;
      put "NOTE: The following column(s) do not have a column mapping, so the"
           " value(s) will be set to missing: STARTDATE, NEXTDATE, ENDDATE,"
           " LEGNUMBER";
   run;
   
   %put %str(NOTE: Mapping columns ...);
   proc sql;
      create view work.WJ2YB7E as
         select
            REPORTCODE,
            REPORTDATE,
            FRONTKDEALID,
            FRONTFDEALID,
            DEALID,
            INSTRUMENTTYPECD,
            DEALDATE,
            ADDITIONALINFORMATION,
            . as STARTDATE length = 8
               format = DATETIME20.
               informat = DATETIME20.,
            . as NEXTDATE length = 8
               format = DATETIME20.
               informat = DATETIME20.,
            . as ENDDATE length = 8
               format = DATETIME20.
               informat = DATETIME20.,
            "" as LEGNUMBER length = 1
               format = $1.
               informat = $1.,
            VALUEFRS,
            VALUESEC
      from &etls_lastTable
      ;
   quit;
   
   %let SYSLAST = work.WJ2YB7E;
   
   %let etls_lastTable = &SYSLAST; 
   %let etls_tableOptions = ; 
   
   /* Determine if the target table exists  */ 
   %let etls_tableExist = %eval(%sysfunc(exist(dm_dq.DQ_DRVT_DWH_DM, DATA)) or 
         %sysfunc(exist(dm_dq.DQ_DRVT_DWH_DM, VIEW))); 
   
   /*---- Create a new table  ----*/ 
   %if (&etls_tableExist eq 0) %then 
   %do;  /* if table does not exist  */ 
   
      %put %str(NOTE: Creating table ...);
      
      data dm_dq.DQ_DRVT_DWH_DM
              (dbnull = (
                         REPORTCODE = YES
                         REPORTDATE = YES
                         FRONTKDEALID = YES
                         FRONTFDEALID = YES
                         DEALID = YES
                         INSTRUMENTTYPECD = YES
                         DEALDATE = YES
                         ADDITIONALINFORMATION = YES
                         STARTDATE = YES
                         NEXTDATE = YES
                         ENDDATE = YES
                         LEGNUMBER = YES
                         VALUEFRS = YES
                         VALUESEC = YES));
         attrib REPORTCODE length = $5
            format = $5.
            informat = $5.
            label = 'REPORTCODE'; 
         attrib REPORTDATE length = 8
            format = DATETIME20.
            informat = DATETIME20.
            label = 'REPORTDATE'; 
         attrib FRONTKDEALID length = $10
            format = $10.
            informat = $10.
            label = 'FRONTKDEALID'; 
         attrib FRONTFDEALID length = $10
            format = $10.
            informat = $10.
            label = 'FRONTFDEALID'; 
         attrib DEALID length = $100
            format = $100.
            informat = $100.
            label = 'DEALID'; 
         attrib INSTRUMENTTYPECD length = $3
            format = $3.
            informat = $3.
            label = 'INSTRUMENTTYPECD'; 
         attrib DEALDATE length = 8
            format = DATETIME20.
            informat = DATETIME20.
            label = 'DEALDATE'; 
         attrib ADDITIONALINFORMATION length = $255
            format = $255.
            informat = $255.
            label = 'ADDITIONALINFORMATION'; 
         attrib STARTDATE length = 8
            format = DATETIME20.
            informat = DATETIME20.
            label = 'STARTDATE'; 
         attrib NEXTDATE length = 8
            format = DATETIME20.
            informat = DATETIME20.
            label = 'NEXTDATE'; 
         attrib ENDDATE length = 8
            format = DATETIME20.
            informat = DATETIME20.
            label = 'ENDDATE'; 
         attrib LEGNUMBER length = $1
            format = $1.
            informat = $1.
            label = 'LEGNUMBER'; 
         attrib VALUEFRS length = $20
            format = $20.
            informat = $20.
            label = 'VALUEFRS'; 
         attrib VALUESEC length = $20
            format = $20.
            informat = $20.
            label = 'VALUESEC'; 
         call missing(of _all_);
         stop;
      run;
      
      %rcSet(&syserr); 
      
   %end;  /* if table does not exist  */ 
   
   /*---- Append  ----*/ 
   %put %str(NOTE: Appending data ...);
   
   proc append base = dm_dq.DQ_DRVT_DWH_DM 
      data = &etls_lastTable (&etls_tableOptions)  force ; 
    run; 
   
   %rcSet(&syserr); 
   
   proc datasets lib = work nolist nowarn memtype = (data view);
      delete WJ2YB7E;
   quit;
   
%mend etls_loader;
%etls_loader;

%let etls_recnt = 0;
%macro etls_recordCheck; 
   %let etls_recCheckExist = %eval(%sysfunc(exist(dm_dq.DQ_DRVT_DWH_DM, DATA)) or 
         %sysfunc(exist(dm_dq.DQ_DRVT_DWH_DM, VIEW))); 
   
   %if (&etls_recCheckExist) %then
   %do;
      proc sql noprint;
         select count(*) into :etls_recnt from dm_dq.DQ_DRVT_DWH_DM;
      quit;
   %end;
%mend etls_recordCheck;
%etls_recordCheck;



/**  Step end Table Loader **/

/*==========================================================================* 
 * Step:            SQL Join                              A5ELGGF9.AK00010I * 
 * Transform:       Join                                                    * 
 * Description:                                                             * 
 *                                                                          * 
 * Source Tables:   FINANCIAL_INSTRUMENT_TYPE -           A569C89V.AE0000FZ * 
 *                   dwh_dds.FINANCIAL_INSTRUMENT_TYPE                      * 
 *                  Extract - work.W1L6PELS               A5ELGGF9.AF0000FH * 
 * Target Table:    SQL Join - work.W1P3MV6OH             A5ELGGF9.AF0000FI * 
 *==========================================================================*/ 

%let transformID = %quote(A5ELGGF9.AK00010I);
%let trans_rc = 0;
%let etls_stepStartTime = %sysfunc(datetime(), datetime20.); 

%let etls_recnt = 0;
%macro etls_recordCheck; 
   %let etls_recCheckExist = %eval(%sysfunc(exist(dwh_dds.FINANCIAL_INSTRUMENT_TYPE, DATA)) or 
         %sysfunc(exist(dwh_dds.FINANCIAL_INSTRUMENT_TYPE, VIEW))); 
   
   %if (&etls_recCheckExist) %then
   %do;
      proc sql noprint;
         select count(*) into :etls_recnt from dwh_dds.FINANCIAL_INSTRUMENT_TYPE;
      quit;
   %end;
%mend etls_recordCheck;
%etls_recordCheck;

%let SYS_SQL_IP_SPEEDO = Y;
%let SYS_SQL_MAPPUTTO = sas_put;
%let SYS_SQLREDUCEPUT = DBMS;
%global etls_sql_pushDown;
%let etls_sql_pushDown = -1;
option DBIDIRECTEXEC;

proc datasets lib = work nolist nowarn memtype = (data view);
   delete W1P3MV6OH;
quit;

proc sql;
   create table work.W1P3MV6OH as
   select distinct
      W1L6PELS.INSTRUMENTTYPECD length = 3   
         format = $3.
         informat = $3.
         label = 'INSTRUMENTTYPECD',
      FINANCIAL_INSTRUMENT_TYPE.FINANCIAL_INSTRUMENT_TYPE_DESC as INSTRUMENTTYPE length = 100   
         format = $100.
         informat = $100.
         label = 'INSTRUMENTTYPE'
   from
      work.W1L6PELS left join 
      dwh_dds.FINANCIAL_INSTRUMENT_TYPE
         on
         (
            W1L6PELS.INSTRUMENTTYPECD = FINANCIAL_INSTRUMENT_TYPE.FINANCIAL_INSTRUMENT_TYPE_CD
            and FINANCIAL_INSTRUMENT_TYPE.VALID_TO_DTTM = &ETL_SCD_FUTURE_DTTM
         )
   where
      INSTRUMENTTYPECD NOT IS MISSING 
   ;
quit;

%global etls_sql_pushDown;
%let etls_sql_pushDown = &sys_sql_ip_all;

%rcSet(&sqlrc); 



/**  Step end SQL Join **/

/*==========================================================================* 
 * Step:            Table Loader                          A5ELGGF9.AK00010J * 
 * Transform:       Table Loader (Version 2.1)                              * 
 * Description:                                                             * 
 *                                                                          * 
 * Source Table:    SQL Join - work.W1P3MV6OH             A5ELGGF9.AF0000FI * 
 * Target Table:    DQ_DRVT_INSTRUMENTTYPE -              A5ELGGF9.AE00004A * 
 *                   dm_dq.DQ_DRVT_INSTRUMENTTYPE                           * 
 *==========================================================================*/ 

%let transformID = %quote(A5ELGGF9.AK00010J);
%let trans_rc = 0;
%let etls_stepStartTime = %sysfunc(datetime(), datetime20.); 

%let SYSLAST = %nrquote(work.W1P3MV6OH); 

%let SYS_SQL_IP_SPEEDO = Y;
%let SYS_SQL_MAPPUTTO = sas_put;
%let SYS_SQLREDUCEPUT = DBMS;
%global etls_sql_pushDown;
%let etls_sql_pushDown = -1;
option DBIDIRECTEXEC;

%global etls_tableExist;
%global etls_numIndex;
%global etls_lastTable;
%let etls_tableExist = -1; 
%let etls_numIndex = -1; 
%let etls_lastTable = &SYSLAST; 

/*---- Define load data macro  ----*/ 

/* --------------------------------------------------------------
   Load Technique Selection: Update - Matching=SQLSet, New=AppendProc
   Blanks may replace non-blanks: false
   Constraint and index action selections: 'ASIS','ASIS','ASIS','ASIS'
   Additional options selections... 
      Set unmapped to missing on updates: false 
   -------------------------------------------------------------- */
%macro etls_loader;

   %let etls_tableOptions = ;
   
   /* Determine if the target table exists  */ 
   %let etls_tableExist = %eval(%sysfunc(exist(dm_dq.DQ_DRVT_INSTRUMENTTYPE, DATA)) or 
         %sysfunc(exist(dm_dq.DQ_DRVT_INSTRUMENTTYPE, VIEW))); 
   
   %let etls_hasUpdateIndex=0; 
   
   /*---- Create a new table  ----*/ 
   %if (&etls_tableExist eq 0) %then 
   %do;  /* if table does not exist  */ 
   
      %put %str(NOTE: Creating table ...);
      
      data dm_dq.DQ_DRVT_INSTRUMENTTYPE
              (dbnull = (
                         INSTRUMENTTYPECD = YES
                         INSTRUMENTTYPE = YES));
         attrib INSTRUMENTTYPECD length = $3
            format = $3.
            informat = $3.
            label = 'INSTRUMENTTYPECD'; 
         attrib INSTRUMENTTYPE length = $100
            format = $100.
            informat = $100.
            label = 'INSTRUMENTTYPE'; 
         call missing(of _all_);
         stop;
      run;
      
      %rcSet(&syserr); 
      
   %end;  /* if table does not exist  */ 
   
   %let etls_recCheckExist = 0; 
   %let etls_targetHasRows = 0; 
   %macro etls_recordCheck; 
      %let etls_recCheckExist = %eval(%sysfunc(exist(dm_dq.DQ_DRVT_INSTRUMENTTYPE, DATA)) or 
            %sysfunc(exist(dm_dq.DQ_DRVT_INSTRUMENTTYPE, VIEW))); 
      
      %if (&etls_recCheckExist) %then
      %do;
         %local etls_syntaxcheck; 
         %let etls_syntaxcheck = %sysfunc(getoption(syntaxcheck)); 
         /* Turn off syntaxcheck option to perform following steps  */ 
         options nosyntaxcheck;
         
         data _null_; 
            set dm_dq.DQ_DRVT_INSTRUMENTTYPE( obs=1 ); 
            call symput("etls_targetHasRows",'1'); 
         run; 
         /* Reset syntaxcheck option to previous setting  */ 
         options &etls_syntaxcheck; 
      %end;
   %mend etls_recordCheck;
   %etls_recordCheck;
   
   
   %if (&etls_targetHasRows) %then 
   %do;  /* if has rows */ 
      proc sql ; 
         /* update existing records in the master table  */ 
         update dm_dq.DQ_DRVT_INSTRUMENTTYPE as m
            set INSTRUMENTTYPE = (select case when t.INSTRUMENTTYPE="" then m.INSTRUMENTTYPE else t.INSTRUMENTTYPE end from &etls_lastTable as t 
                                where m.INSTRUMENTTYPECD = t.INSTRUMENTTYPECD)
               where exists (select * from &etls_lastTable as t
                                   where m.INSTRUMENTTYPECD = t.INSTRUMENTTYPECD);
         
         /* create a temporary table of new records from the transaction table  */ 
         create table etls_newrecords as 
            select * 
               from &etls_lastTable as t 
                  where not exists 
                     (select * from dm_dq.DQ_DRVT_INSTRUMENTTYPE
                   as m 
                                      where m.INSTRUMENTTYPECD = t.INSTRUMENTTYPECD)
         ; 
         
      quit;
      
      %let etls_lastTable = &SYSLAST;
      
      %let etls_tableOptions = ; 
      
      %global etls_sql_pushDown;
      %let etls_sql_pushDown = &sys_sql_ip_all;
      
      %rcSet(&sqlrc); 
      
   %end; /* if has rows */ 
   
   /*---- Append  ----*/ 
   %put %str(NOTE: Appending data ...);
   
   proc append base = dm_dq.DQ_DRVT_INSTRUMENTTYPE 
      data = &etls_lastTable (&etls_tableOptions)  force ; 
    run; 
   
   %rcSet(&syserr); 
   
   proc datasets lib = work nolist nowarn memtype = (data view);
      delete etls_newrecords;
   quit;
   
%mend etls_loader;
%etls_loader;

%let etls_recnt = 0;
%macro etls_recordCheck; 
   %let etls_recCheckExist = %eval(%sysfunc(exist(dm_dq.DQ_DRVT_INSTRUMENTTYPE, DATA)) or 
         %sysfunc(exist(dm_dq.DQ_DRVT_INSTRUMENTTYPE, VIEW))); 
   
   %if (&etls_recCheckExist) %then
   %do;
      proc sql noprint;
         select count(*) into :etls_recnt from dm_dq.DQ_DRVT_INSTRUMENTTYPE;
      quit;
   %end;
%mend etls_recordCheck;
%etls_recordCheck;



/**  Step end Table Loader **/

/*==========================================================================* 
 * Step:            User Written                          A5ELGGF9.AK00010K * 
 * Transform:       User Written                                            * 
 * Description:     Сбор статистики                                         * 
 *                                                                          * 
 * Source Tables:   FINANCIAL_ACCOUNT - work.W1OAQKQTH    A5ELGGF9.AF0000DM * 
 *                  ETL_JOB - etl_sys.ETL_JOB             A59S11RW.AE00001A * 
 *                  Extract - work.W1L6PELS               A5ELGGF9.AF0000FH * 
 * Target Table:    User Written - work.W1P3OPGV4         A5ELGGF9.AF0000FJ * 
 *                                                                          * 
 * User Written:    SourceCode                                              * 
 *==========================================================================*/ 

%let transformID = %quote(A5ELGGF9.AK00010K);
%let trans_rc = 0;
%let etls_stepStartTime = %sysfunc(datetime(), datetime20.); 

%let etls_recnt = -1;
%let _INPUT_count = 3;
%let _INPUT = work.W1OAQKQTH;
%let _INPUT_connect = ;
%let _INPUT_engine = ;
%let _INPUT_memtype = VIEW;
%let _INPUT_options = %nrquote();
%let _INPUT_alter = %nrquote();
%let _INPUT_path = %nrquote(/FINANCIAL_ACCOUNT_A5ELGGF9.AF0000DM%(WorkTable%));
%let _INPUT_type = 1;
%let _INPUT_label = %nrquote();

%let _INPUT1 = work.W1OAQKQTH;
%let _INPUT1_connect = ;
%let _INPUT1_engine = ;
%let _INPUT1_memtype = VIEW;
%let _INPUT1_options = %nrquote();
%let _INPUT1_alter = %nrquote();
%let _INPUT1_path = %nrquote(/FINANCIAL_ACCOUNT_A5ELGGF9.AF0000DM%(WorkTable%));
%let _INPUT1_type = 1;
%let _INPUT1_label = %nrquote();

%let _INPUT2 = etl_sys.ETL_JOB;
%let _INPUT2_connect =  PATH=DWH.IMB.RU AUTHDOMAIN="OraAuth_ETL_SYS" 
;
%let _INPUT2_engine = ORACLE;
%let _INPUT2_memtype = DATA;
%let _INPUT2_options = %nrquote();
%let _INPUT2_alter = %nrquote();
%let _INPUT2_path = %nrquote(/DWH_DWHDDS_SYS/Tables/ETL_SYS/ETL_JOB%(Table%));
%let _INPUT2_type = 1;
%let _INPUT2_label = %nrquote();

%let _INPUT3 = work.W1L6PELS;
%let _INPUT3_connect = ;
%let _INPUT3_engine = ;
%let _INPUT3_memtype = VIEW;
%let _INPUT3_options = %nrquote();
%let _INPUT3_alter = %nrquote();
%let _INPUT3_path = %nrquote(/Extract_A5ELGGF9.AF0000FH%(WorkTable%));
%let _INPUT3_type = 1;
%let _INPUT3_label = %nrquote();

%let _OUTPUT_count = 1;
%let _OUTPUT = work.W1P3OPGV4;
%let _OUTPUT_connect = ;
%let _OUTPUT_engine = ;
%let _OUTPUT_memtype = DATA;
%let _OUTPUT_options = %nrquote();
%let _OUTPUT_alter = %nrquote();
%let _OUTPUT_path = %nrquote(/User Written_A5ELGGF9.AF0000FJ%(WorkTable%));
%let _OUTPUT_type = 1;
%let _OUTPUT_label = %nrquote();
/* List of target columns to keep  */ 
%let _OUTPUT_keep = REP_DT REP_ID PRC CNT_ALL CNT_ERR DWH_DT;
%let _OUTPUT_col_count = 6;
%let _OUTPUT_col0_name = REP_DT;
%let _OUTPUT_col0_table = work.W1P3OPGV4;
%let _OUTPUT_col0_length = 8;
%let _OUTPUT_col0_type = ;
%let _OUTPUT_col0_format = DATETIME20.;
%let _OUTPUT_col0_informat = DATETIME20.;
%let _OUTPUT_col0_label = %nrquote(REP_DT);
%let _OUTPUT_col0_exp = ;
%let _OUTPUT_col0_input_count = 0;
%let _OUTPUT_col1_name = REP_ID;
%let _OUTPUT_col1_table = work.W1P3OPGV4;
%let _OUTPUT_col1_length = 8;
%let _OUTPUT_col1_type = ;
%let _OUTPUT_col1_format = 6.;
%let _OUTPUT_col1_informat = 6.;
%let _OUTPUT_col1_label = %nrquote(REP_ID);
%let _OUTPUT_col1_exp = ;
%let _OUTPUT_col1_input_count = 0;
%let _OUTPUT_col2_name = PRC;
%let _OUTPUT_col2_table = work.W1P3OPGV4;
%let _OUTPUT_col2_length = 8;
%let _OUTPUT_col2_type = ;
%let _OUTPUT_col2_format = 17.8;
%let _OUTPUT_col2_informat = 17.8;
%let _OUTPUT_col2_label = %nrquote(PRC);
%let _OUTPUT_col2_exp = ;
%let _OUTPUT_col2_input_count = 0;
%let _OUTPUT_col3_name = CNT_ALL;
%let _OUTPUT_col3_table = work.W1P3OPGV4;
%let _OUTPUT_col3_length = 8;
%let _OUTPUT_col3_type = ;
%let _OUTPUT_col3_format = 12.;
%let _OUTPUT_col3_informat = 12.;
%let _OUTPUT_col3_label = %nrquote(CNT_ALL);
%let _OUTPUT_col3_exp = ;
%let _OUTPUT_col3_input_count = 0;
%let _OUTPUT_col4_name = CNT_ERR;
%let _OUTPUT_col4_table = work.W1P3OPGV4;
%let _OUTPUT_col4_length = 8;
%let _OUTPUT_col4_type = ;
%let _OUTPUT_col4_format = 12.;
%let _OUTPUT_col4_informat = 12.;
%let _OUTPUT_col4_label = %nrquote(CNT_ERR);
%let _OUTPUT_col4_exp = ;
%let _OUTPUT_col4_input_count = 0;
%let _OUTPUT_col5_name = DWH_DT;
%let _OUTPUT_col5_table = work.W1P3OPGV4;
%let _OUTPUT_col5_length = 8;
%let _OUTPUT_col5_type = ;
%let _OUTPUT_col5_format = DATETIME20.;
%let _OUTPUT_col5_informat = DATETIME20.;
%let _OUTPUT_col5_label = %nrquote(DWH_DT);
%let _OUTPUT_col5_exp = ;
%let _OUTPUT_col5_input_count = 0;

%let _OUTPUT1 = work.W1P3OPGV4;
%let _OUTPUT1_connect = ;
%let _OUTPUT1_engine = ;
%let _OUTPUT1_memtype = DATA;
%let _OUTPUT1_options = %nrquote();
%let _OUTPUT1_alter = %nrquote();
%let _OUTPUT1_path = %nrquote(/User Written_A5ELGGF9.AF0000FJ%(WorkTable%));
%let _OUTPUT1_type = 1;
%let _OUTPUT1_label = %nrquote();
/* List of target columns to keep  */ 
%let _OUTPUT1_keep = REP_DT REP_ID PRC CNT_ALL CNT_ERR DWH_DT;
%let _OUTPUT1_col_count = 6;
%let _OUTPUT1_col0_name = REP_DT;
%let _OUTPUT1_col0_table = work.W1P3OPGV4;
%let _OUTPUT1_col0_length = 8;
%let _OUTPUT1_col0_type = ;
%let _OUTPUT1_col0_format = DATETIME20.;
%let _OUTPUT1_col0_informat = DATETIME20.;
%let _OUTPUT1_col0_label = %nrquote(REP_DT);
%let _OUTPUT1_col0_exp = ;
%let _OUTPUT1_col0_input_count = 0;
%let _OUTPUT1_col1_name = REP_ID;
%let _OUTPUT1_col1_table = work.W1P3OPGV4;
%let _OUTPUT1_col1_length = 8;
%let _OUTPUT1_col1_type = ;
%let _OUTPUT1_col1_format = 6.;
%let _OUTPUT1_col1_informat = 6.;
%let _OUTPUT1_col1_label = %nrquote(REP_ID);
%let _OUTPUT1_col1_exp = ;
%let _OUTPUT1_col1_input_count = 0;
%let _OUTPUT1_col2_name = PRC;
%let _OUTPUT1_col2_table = work.W1P3OPGV4;
%let _OUTPUT1_col2_length = 8;
%let _OUTPUT1_col2_type = ;
%let _OUTPUT1_col2_format = 17.8;
%let _OUTPUT1_col2_informat = 17.8;
%let _OUTPUT1_col2_label = %nrquote(PRC);
%let _OUTPUT1_col2_exp = ;
%let _OUTPUT1_col2_input_count = 0;
%let _OUTPUT1_col3_name = CNT_ALL;
%let _OUTPUT1_col3_table = work.W1P3OPGV4;
%let _OUTPUT1_col3_length = 8;
%let _OUTPUT1_col3_type = ;
%let _OUTPUT1_col3_format = 12.;
%let _OUTPUT1_col3_informat = 12.;
%let _OUTPUT1_col3_label = %nrquote(CNT_ALL);
%let _OUTPUT1_col3_exp = ;
%let _OUTPUT1_col3_input_count = 0;
%let _OUTPUT1_col4_name = CNT_ERR;
%let _OUTPUT1_col4_table = work.W1P3OPGV4;
%let _OUTPUT1_col4_length = 8;
%let _OUTPUT1_col4_type = ;
%let _OUTPUT1_col4_format = 12.;
%let _OUTPUT1_col4_informat = 12.;
%let _OUTPUT1_col4_label = %nrquote(CNT_ERR);
%let _OUTPUT1_col4_exp = ;
%let _OUTPUT1_col4_input_count = 0;
%let _OUTPUT1_col5_name = DWH_DT;
%let _OUTPUT1_col5_table = work.W1P3OPGV4;
%let _OUTPUT1_col5_length = 8;
%let _OUTPUT1_col5_type = ;
%let _OUTPUT1_col5_format = DATETIME20.;
%let _OUTPUT1_col5_informat = DATETIME20.;
%let _OUTPUT1_col5_label = %nrquote(DWH_DT);
%let _OUTPUT1_col5_exp = ;
%let _OUTPUT1_col5_input_count = 0;

/*---- Start of User Written Code  ----*/ 

proc sql;
/*Кол-во всех уникальных деривативных сделок*/
  select count(distinct ACCOUNT_RK) into :CNT_ALL from &_INPUT1 where FINANCIAL_ACCOUNT_TYPE_CD ^= 'DEP';
/*Кол-во ошибочных сделок*/
  select count(distinct ACCOUNT_RK) into :CNT_ERR from &_INPUT3;
/*Дата успешного выполнения процесса в DWH*/
  select end_dttm into :DWH_DT from &_INPUT2 where JOB_ID = (
  select MAX(job_id) 
  from &_INPUT2
  where upper(job_nm) = '081_360_COMMIT_MIDAS_FIN_INSTR_FULL' and success_flg = 'Y'
  );
quit;
%error_check(mpStepType=SQL);
data &_OUTPUT1;
	attrib
		REP_DT length = 8 format = DATETIME20.
		REP_ID length = 8
		PRC length =8
		CNT_ALL length=8
		CNT_ERR length = 8
		DWH_DT length = 8 format = DATETIME20.
	;

	REP_DT = &REPDT.;
	REP_ID = 6;
	PRC = DIVIDE(&CNT_ERR. , &CNT_ALL.) * 100;
	if missing(PRC) then PRC=0;
	CNT_ALL = &CNT_ALL.;
	CNT_ERR = &CNT_ERR.;
	DWH_DT = "&DWH_DT."dt;
run;
%error_check(mpStepType=DATA);
/*---- End of User Written Code  ----*/ 

%rcSet(&syserr); 
%rcSet(&sqlrc); 


/**  Step end User Written **/

/*==========================================================================* 
 * Step:            Table Loader                          A5ELGGF9.AK00010L * 
 * Transform:       Table Loader (Version 2.1)                              * 
 * Description:                                                             * 
 *                                                                          * 
 * Source Table:    User Written - work.W1P3OPGV4         A5ELGGF9.AF0000FJ * 
 * Target Table:    DQ_DRVT_REPORT_PRC -                  A5ELGGF9.AE00004E * 
 *                   dm_dq.DQ_DRVT_REPORT_PRC                               * 
 *==========================================================================*/ 

%let transformID = %quote(A5ELGGF9.AK00010L);
%let trans_rc = 0;
%let etls_stepStartTime = %sysfunc(datetime(), datetime20.); 

%let SYSLAST = %nrquote(work.W1P3OPGV4); 

%let SYS_SQL_IP_SPEEDO = Y;
%let SYS_SQL_MAPPUTTO = sas_put;
%let SYS_SQLREDUCEPUT = DBMS;
%global etls_sql_pushDown;
%let etls_sql_pushDown = -1;
option DBIDIRECTEXEC;

%global etls_tableExist;
%global etls_numIndex;
%global etls_lastTable;
%let etls_tableExist = -1; 
%let etls_numIndex = -1; 
%let etls_lastTable = &SYSLAST; 

/*---- Define load data macro  ----*/ 

/* --------------------------------------------------------------
   Load Technique Selection: AppendToExisting - AppendProc
   Constraint and index action selections: 'ASIS','ASIS','ASIS','ASIS'
   Additional options selections... 
      Set unmapped to missing on updates: false 
   -------------------------------------------------------------- */
%macro etls_loader;

   %let etls_tableOptions = ;
   
   /*---- Map the columns  ----*/ 
   proc datasets lib = work nolist nowarn memtype = (data view);
      delete WJ2YBLM;
   quit;
   
   %put %str(NOTE: Mapping columns ...);
   proc sql;
      create view work.WJ2YBLM as
         select
            REP_DT,
            REP_ID   
               format = 7.
               informat = 7.,
            PRC   
               format = 19.8
               informat = 19.8,
            CNT_ALL   
               format = 13.
               informat = 13.,
            CNT_ERR   
               format = 13.
               informat = 13.,
            DWH_DT
      from &etls_lastTable
      ;
   quit;
   
   %let SYSLAST = work.WJ2YBLM;
   
   %let etls_lastTable = &SYSLAST; 
   %let etls_tableOptions = ; 
   
   /* Determine if the target table exists  */ 
   %let etls_tableExist = %eval(%sysfunc(exist(dm_dq.DQ_DRVT_REPORT_PRC, DATA)) or 
         %sysfunc(exist(dm_dq.DQ_DRVT_REPORT_PRC, VIEW))); 
   
   /*---- Create a new table  ----*/ 
   %if (&etls_tableExist eq 0) %then 
   %do;  /* if table does not exist  */ 
   
      %put %str(NOTE: Creating table ...);
      
      data dm_dq.DQ_DRVT_REPORT_PRC
              (dbnull = (
                         REP_DT = NO
                         REP_ID = NO
                         PRC = YES
                         CNT_ALL = YES
                         CNT_ERR = YES
                         DWH_DT = YES));
         attrib REP_DT length = 8
            format = DATETIME20.
            informat = DATETIME20.
            label = 'REP_DT'; 
         attrib REP_ID length = 8
            format = 7.
            informat = 7.
            label = 'REP_ID'; 
         attrib PRC length = 8
            format = 19.8
            informat = 19.8
            label = 'PRC'; 
         attrib CNT_ALL length = 8
            format = 13.
            informat = 13.
            label = 'CNT_ALL'; 
         attrib CNT_ERR length = 8
            format = 13.
            informat = 13.
            label = 'CNT_ERR'; 
         attrib DWH_DT length = 8
            format = DATETIME20.
            informat = DATETIME20.
            label = 'DWH_DT'; 
         call missing(of _all_);
         stop;
      run;
      
      %rcSet(&syserr); 
      
   %end;  /* if table does not exist  */ 
   
   /*---- Append  ----*/ 
   %put %str(NOTE: Appending data ...);
   
   proc append base = dm_dq.DQ_DRVT_REPORT_PRC 
      data = &etls_lastTable (&etls_tableOptions)  force ; 
    run; 
   
   %rcSet(&syserr); 
   
   proc datasets lib = work nolist nowarn memtype = (data view);
      delete WJ2YBLM;
   quit;
   
%mend etls_loader;
%etls_loader;

%let etls_recnt = 0;
%macro etls_recordCheck; 
   %let etls_recCheckExist = %eval(%sysfunc(exist(dm_dq.DQ_DRVT_REPORT_PRC, DATA)) or 
         %sysfunc(exist(dm_dq.DQ_DRVT_REPORT_PRC, VIEW))); 
   
   %if (&etls_recCheckExist) %then
   %do;
      proc sql noprint;
         select count(*) into :etls_recnt from dm_dq.DQ_DRVT_REPORT_PRC;
      quit;
   %end;
%mend etls_recordCheck;
%etls_recordCheck;



/**  Step end Table Loader **/

/*==========================================================================* 
 * Step:            Завершить модуль                      A5ELGGF9.AK00010M * 
 * Transform:       Завершить модуль                                        * 
 * Description:                                                             * 
 *==========================================================================*/ 

%let transformID = %quote(A5ELGGF9.AK00010M);
%let trans_rc = 0;
%let etls_stepStartTime = %sysfunc(datetime(), datetime20.); 

%let _INPUT_count = 0; 
%let _OUTPUT_count = 0; 


/*****************************************************************
* ВЕРСИЯ:
*   $Id: transform_job_finish.sas 247 2012-04-03 07:31:10Z nesterenok $
*
******************************************************************
* НАЗНАЧЕНИЕ:
*   Регистрирует конец модуля ETL.
*
* ПАРАМЕТРЫ:
*   нет
*
******************************************************************/

%macro transform_job_finish;

   /* Продолжаем модуль */
   %job_continue_reg(mpJobType=JOB, mpJobName=&ETLS_JobName., mpPostEvent=N);

   /* Завершаем модуль */
   %job_finish_reg(mpJobType=JOB);

%mend transform_job_finish;

%transform_job_finish;


%rcSet(&syserr); 
%rcSet(&sysrc); 
%rcSet(&sqlrc); 



/**  Step end Завершить модуль **/

%let etls_endTime = %sysfunc(datetime(),datetime.);



/**  Job end 202_060_Mart_DQ_DRVT_REP06 **/

/* Reset jobid and name */
%let jobID = %quote(A5ELGGF9.AH00003N);
%let etls_jobName = %nrquote(202_002_Stream_DQ_DRVT);

/**************************************************************************** 
 * Job:             202_070_Mart_DQ_DRVT_REP07            A5ELGGF9.AH00002D * 
 * Description:     Совпадение параметров первой и второй ноги свопа за     * 
 *                   дату проверки.                                         * 
 *                                                                          * 
 * Metadata Server: bravo14                                                 * 
 * Port:            8561                                                    * 
 * Location:        /DWH_DMDQ_REP/Jobs/Includes/DQ_DRVT                     * 
 *                                                                          * 
 * Server:          SASApp                                A5C46MZY.AQ000002 * 
 *                                                                          * 
 * Source Tables:   INSTRUMENTTYPE -                      A5LX14I5.A900001B * 
 *                   DM_DRVT.INSTRUMENTTYPE                                 * 
 *                  DEAL - DM_DRVT.DEAL                   A5LX14I5.A9000014 * 
 *                  ETL_JOB - etl_sys.ETL_JOB             A59S11RW.AE00001A * 
 * Target Tables:   DQ_DRVT_DWH_DM - dm_dq.DQ_DRVT_DWH_DM A5ELGGF9.AE000049 * 
 *                  DQ_DRVT_INSTRUMENTTYPE -              A5ELGGF9.AE00004A * 
 *                   dm_dq.DQ_DRVT_INSTRUMENTTYPE                           * 
 *                  DQ_DRVT_REPORT_PRC -                  A5ELGGF9.AE00004E * 
 *                   dm_dq.DQ_DRVT_REPORT_PRC                               * 
 *                  DQ_DRVT_DWH_DM - dm_dq.DQ_DRVT_DWH_DM A5ELGGF9.AE000049 * 
 *                  DQ_DRVT_REPORT_PRC -                  A5ELGGF9.AE00004E * 
 *                   dm_dq.DQ_DRVT_REPORT_PRC                               * 
 *                                                                          * 
 * Generated on:    16 Июль 2013 г. 17:46:19 MSD                            * 
 * Generated by:    sasdwh                                                  * 
 * Version:         SAS Data Integration Studio 4.5                         * 
 ****************************************************************************/ 

/* General macro variables  */ 
%let jobID = %quote(A5ELGGF9.AH00002D);
%let etls_jobName = %nrquote(202_070_Mart_DQ_DRVT_REP07);
%let etls_userID = %nrquote(sasdwh);


/* Create metadata macro variables */
%let IOMServer      = %nrquote(SASApp);
%let metaPort       = %nrquote(8561);
%let metaServer     = %nrquote(bravo14);

/* Set metadata options */
options metaport       = &metaPort 
        metaserver     = "&metaServer"; 

/* Setup for capturing job status  */ 
%let etls_startTime = %sysfunc(datetime(),datetime.);
%let etls_recordsBefore = 0;
%let etls_recordsAfter = 0;
%let etls_lib = 0;
%let etls_table = 0;

%global etls_debug; 
%macro etls_setDebug; 
   %if %str(&etls_debug) ne 0 %then 
      OPTIONS MPRINT%str(;); 
%mend; 
%etls_setDebug; 

/*---- Start of Pre-Process Code  ----*/ 

%LET REPDT=&DMDQ_REPORT_START_DTTM;
/*---- End of Pre-Process Code  ----*/ 

%rcSet(&syserr); 
%rcSet(&sqlrc); 

/*==========================================================================* 
 * Step:            Начать модуль                         A5ELGGF9.AK00010N * 
 * Transform:       Начать модуль                                           * 
 * Description:                                                             * 
 *==========================================================================*/ 

%let transformID = %quote(A5ELGGF9.AK00010N);
%let trans_rc = 0;
%let etls_stepStartTime = %sysfunc(datetime(), datetime20.); 

%let _INPUT_count = 0; 
%let _OUTPUT_count = 0; 


/*****************************************************************
* ВЕРСИЯ:
*   $Id: transform_job_start.sas 1747 2012-08-01 11:26:13Z nesterenok $
*
******************************************************************
* НАЗНАЧЕНИЕ:
*   Регистрирует начало модуля ETL.
*
* ПАРАМЕТРЫ:
*   нет
*
******************************************************************/

%macro transform_job_start;

   /* Продолжаем поток (или создаем новый) */
   %local lmvStreamName;
   %if %sysfunc(sysexist(LSB_JOBNAME)) %then
      %let lmvStreamName = %scan(%sysfunc(sysget(LSB_JOBNAME)), 3, :);
   %else
      %let lmvStreamName = ;

   %job_continue_reg(mpJobType=STREAM, mpJobName=&lmvStreamName, mpPostEvent=N, mpForcedStart=Y);

   /* Для DI, начинаем поток заново, если старый был начат не сегодня */
   %if %length(&lmvStreamName) eq 0 and &STREAM_START_DT ne %sysfunc(today()) %then %do;
      %job_start_reg(mpJobType=STREAM, mpParentJobId=, mpJobName=&lmvStreamName.);
   %end;

   /* Начинаем модуль */
   %job_start_reg(mpJobType=JOB, mpParentJobId=&STREAM_ID, mpJobName=&ETLS_JobName.);

%mend transform_job_start;

%transform_job_start;


%rcSet(&syserr); 
%rcSet(&sysrc); 
%rcSet(&sqlrc); 



/**  Step end Начать модуль **/

/*==========================================================================* 
 * Step:            Очистить таблицу                      A5ELGGF9.AK00010O * 
 * Transform:       Очистить таблицу                                        * 
 * Description:                                                             * 
 *                                                                          * 
 * Target Table:    DQ_DRVT_DWH_DM - dm_dq.DQ_DRVT_DWH_DM A5ELGGF9.AE000049 * 
 *==========================================================================*/ 

%let transformID = %quote(A5ELGGF9.AK00010O);
%let trans_rc = 0;
%let etls_stepStartTime = %sysfunc(datetime(), datetime20.); 

%let _INPUT_count = 0; 
%let _OUTPUT_count = 1; 
%let _OUTPUT = dm_dq.DQ_DRVT_DWH_DM;
%let _OUTPUT_connect =  DEFER=YES PATH=DWH.IMB.RU AUTHDOMAIN="OraAuth_DM_DQ" 
;
%let _OUTPUT_engine = ORACLE;
%let _OUTPUT_memtype = DATA;
%let _OUTPUT_options = %nrquote();
%let _OUTPUT_alter = %nrquote();
%let _OUTPUT_path = %nrquote(/DWH_DMDQ_REP/Marts/DQ_DRVT/DQ_DRVT_DWH_DM%(Table%));
%let _OUTPUT_type = 1;
%let _OUTPUT_label = %nrquote();
/* List of target columns to keep  */ 
%let _OUTPUT_keep = REPORTCODE REPORTDATE FRONTKDEALID FRONTFDEALID DEALID 
        INSTRUMENTTYPECD DEALDATE ADDITIONALINFORMATION STARTDATE NEXTDATE 
        ENDDATE LEGNUMBER VALUEFRS VALUESEC;

%let tpOut = dm_dq.DQ_DRVT_DWH_DM;
%let tpOut_connect =  DEFER=YES PATH=DWH.IMB.RU AUTHDOMAIN="OraAuth_DM_DQ" 
;
%let tpOut_engine = ORACLE;
%let tpOut_memtype = DATA;
%let tpOut_options = %nrquote();
%let tpOut_alter = %nrquote();
%let tpOut_path = %nrquote(/DWH_DMDQ_REP/Marts/DQ_DRVT/DQ_DRVT_DWH_DM%(Table%));
%let tpOut_type = 1;
%let tpOut_label = %nrquote();
/* List of target columns to keep  */ 
%let tpOut_keep = REPORTCODE REPORTDATE FRONTKDEALID FRONTFDEALID DEALID 
        INSTRUMENTTYPECD DEALDATE ADDITIONALINFORMATION STARTDATE NEXTDATE 
        ENDDATE LEGNUMBER VALUEFRS VALUESEC;


%let tpWhere = %nrquote(REPORTCODE = %'П-07%' AND REPORTDATE = &DMDQ_REPORT_START_DTTM);

/* List of target columns to keep  */ 
%let _keep = REPORTCODE REPORTDATE FRONTKDEALID FRONTFDEALID DEALID 
        INSTRUMENTTYPECD DEALDATE ADDITIONALINFORMATION STARTDATE NEXTDATE 
        ENDDATE LEGNUMBER VALUEFRS VALUESEC;
/* List of target columns to keep  */ 
%let keep = REPORTCODE REPORTDATE FRONTKDEALID FRONTFDEALID DEALID 
        INSTRUMENTTYPECD DEALDATE ADDITIONALINFORMATION STARTDATE NEXTDATE 
        ENDDATE LEGNUMBER VALUEFRS VALUESEC;
/*****************************************************************
* ВЕРСИЯ:
*   $Id: transform_table_delete.sas 2142 2012-08-17 14:15:09Z nesterenok $
*
******************************************************************
* НАЗНАЧЕНИЕ:
*   Удаляет из указанной таблицы записи.
*
* ПАРАМЕТРЫ:
*   tpOut                  + имя целевой таблицы, которая будет очищена
*   tpWhere                - условие отбора записей под удаление
*                            по умолчанию отсутствует, т.е. удаляются все записи
*
******************************************************************/

%macro transform_table_delete;

   /* Удаляем записи */
   /* TODO: truncate */
   proc sql;
      delete from &tpOut
      %if %length(&tpWhere) gt 0 %then %do;
         where (%unquote(&tpWhere))
      %end;
      ;
   quit;
   %error_check (mpStepType=SQL);

%mend transform_table_delete;

%transform_table_delete;


%rcSet(&syserr); 
%rcSet(&sysrc); 
%rcSet(&sqlrc); 



/**  Step end Очистить таблицу **/

/*==========================================================================* 
 * Step:            Очистить таблицу                      A5ELGGF9.AK00010P * 
 * Transform:       Очистить таблицу                                        * 
 * Description:                                                             * 
 *                                                                          * 
 * Target Table:    DQ_DRVT_REPORT_PRC -                  A5ELGGF9.AE00004E * 
 *                   dm_dq.DQ_DRVT_REPORT_PRC                               * 
 *==========================================================================*/ 

%let transformID = %quote(A5ELGGF9.AK00010P);
%let trans_rc = 0;
%let etls_stepStartTime = %sysfunc(datetime(), datetime20.); 

%let _INPUT_count = 0; 
%let _OUTPUT_count = 1; 
%let _OUTPUT = dm_dq.DQ_DRVT_REPORT_PRC;
%let _OUTPUT_connect =  DEFER=YES PATH=DWH.IMB.RU AUTHDOMAIN="OraAuth_DM_DQ" 
;
%let _OUTPUT_engine = ORACLE;
%let _OUTPUT_memtype = DATA;
%let _OUTPUT_options = %nrquote();
%let _OUTPUT_alter = %nrquote();
%let _OUTPUT_path = %nrquote(/DWH_DMDQ_REP/Marts/DQ_DRVT/DQ_DRVT_REPORT_PRC%(Table%));
%let _OUTPUT_type = 1;
%let _OUTPUT_label = %nrquote();
/* List of target columns to keep  */ 
%let _OUTPUT_keep = REP_DT REP_ID PRC CNT_ALL CNT_ERR DWH_DT;

%let tpOut = dm_dq.DQ_DRVT_REPORT_PRC;
%let tpOut_connect =  DEFER=YES PATH=DWH.IMB.RU AUTHDOMAIN="OraAuth_DM_DQ" 
;
%let tpOut_engine = ORACLE;
%let tpOut_memtype = DATA;
%let tpOut_options = %nrquote();
%let tpOut_alter = %nrquote();
%let tpOut_path = %nrquote(/DWH_DMDQ_REP/Marts/DQ_DRVT/DQ_DRVT_REPORT_PRC%(Table%));
%let tpOut_type = 1;
%let tpOut_label = %nrquote();
/* List of target columns to keep  */ 
%let tpOut_keep = REP_DT REP_ID PRC CNT_ALL CNT_ERR DWH_DT;


%let tpWhere = %nrquote(REP_ID = 7 AND REP_DT = &DMDQ_REPORT_START_DTTM);

/* List of target columns to keep  */ 
%let _keep = REP_DT REP_ID PRC CNT_ALL CNT_ERR DWH_DT;
/* List of target columns to keep  */ 
%let keep = REP_DT REP_ID PRC CNT_ALL CNT_ERR DWH_DT;
/*****************************************************************
* ВЕРСИЯ:
*   $Id: transform_table_delete.sas 2142 2012-08-17 14:15:09Z nesterenok $
*
******************************************************************
* НАЗНАЧЕНИЕ:
*   Удаляет из указанной таблицы записи.
*
* ПАРАМЕТРЫ:
*   tpOut                  + имя целевой таблицы, которая будет очищена
*   tpWhere                - условие отбора записей под удаление
*                            по умолчанию отсутствует, т.е. удаляются все записи
*
******************************************************************/

%macro transform_table_delete;

   /* Удаляем записи */
   /* TODO: truncate */
   proc sql;
      delete from &tpOut
      %if %length(&tpWhere) gt 0 %then %do;
         where (%unquote(&tpWhere))
      %end;
      ;
   quit;
   %error_check (mpStepType=SQL);

%mend transform_table_delete;

%transform_table_delete;


%rcSet(&syserr); 
%rcSet(&sysrc); 
%rcSet(&sqlrc); 



/**  Step end Очистить таблицу **/

/*==========================================================================* 
 * Step:            Extract                               A5ELGGF9.AK00010Q * 
 * Transform:       Extract                                                 * 
 * Description:                                                             * 
 *                                                                          * 
 * Source Table:    DEAL - DM_DRVT.DEAL                   A5LX14I5.A9000014 * 
 * Target Table:    Extract - work.W1N70UWC1              A5ELGGF9.AF0000FK * 
 *==========================================================================*/ 

%let transformID = %quote(A5ELGGF9.AK00010Q);
%let trans_rc = 0;
%let etls_stepStartTime = %sysfunc(datetime(), datetime20.); 

%let etls_recnt = 0;
%macro etls_recordCheck; 
   %let etls_recCheckExist = %eval(%sysfunc(exist(DM_DRVT.DEAL, DATA)) or 
         %sysfunc(exist(DM_DRVT.DEAL, VIEW))); 
   
   %if (&etls_recCheckExist) %then
   %do;
      proc sql noprint;
         select count(*) into :etls_recnt from DM_DRVT.DEAL;
      quit;
   %end;
%mend etls_recordCheck;
%etls_recordCheck;

%let SYSLAST = %nrquote(DM_DRVT.DEAL); 

%let SYS_SQL_IP_SPEEDO = Y;
%let SYS_SQL_MAPPUTTO = sas_put;
%let SYS_SQLREDUCEPUT = DBMS;
%global etls_sql_pushDown;
%let etls_sql_pushDown = -1;
option DBIDIRECTEXEC;

/*---- Map the columns  ----*/ 
proc datasets lib = work nolist nowarn memtype = (data view);
   delete W1N70UWC1;
quit;

data _null_;
   put "NOTE: The following column(s) do not have a column mapping, so the"
        " value(s) will be set to missing: FLAGPFI";
run;

%put %str(NOTE: Mapping columns ...);
proc sql;
   create view work.W1N70UWC1 as
      select
         DEALRK   
            format = 11.
            informat = 11.,
         VALID_FROM_DTTM,
         VALID_TO_DTTM,
         FRONTKDEALID,
         FRONTFDEALID,
         DEALDATE,
         DEALGROUP,
         INSTRUMENTTYPECD,
         "" as FLAGPFI length = 20
            format = $20.
            informat = $20.
            label = 'FLAGPFI',
         INSTRUMENTCLASSCD,
         FLAGDELIVERYCD,
         FLAGOTC,
         CUSTOMERNO,
         PREMIUM   
            format = 20.5
            informat = 20.5,
         PREMIUMCCY,
         OPTIONTYPECD,
         PREMIUMPAYMENTMODE,
         HEDGEINDICATOR,
         ORIGINALMATURITY   
            format = 19.
            informat = 19.,
         DEALSTATUSCD length = 10   
            format = $10.
            informat = $10.,
         DEALID1,
         DEALTYPE1,
         DEALSUBTYPE1,
         DEALDIRECTION1,
         PLACEDTAKEN1,
         VALUEDATE1,
         MATURITYDATE1,
         UNDERLYINGCCY1,
         UNDERLYINGNAME1,
         NOTIONALCURRENT1   
            format = 20.5
            informat = 20.5,
         PRICECCY1,
         GROSSRATE1   
            format = 20.5
            informat = 20.5,
         AMOUNT1   
            format = 20.5
            informat = 20.5,
         CALCBASIS1,
         INTERESTRATE1   
            format = 20.5
            informat = 20.5,
         INTERESTRATETYPECD1,
         PAYMENTFREQUENCY1,
         STARTDATE1,
         STARTPERIODDATE1,
         NEXTPERIODDATE1,
         NEXTINTPAYMENTDATE1,
         DCDFX_DEALID,
         DCDFX_TYPE,
         DCDFX_SUBTYPE,
         DEALID2,
         DEALTYPE2,
         DEALSUBTYPE2,
         DEALDIRECTION2 length = 10   
            format = $10.
            informat = $10.,
         PLACEDTAKEN2,
         VALUEDATE2,
         MATURITYDATE2,
         UNDERLYINGCCY2,
         UNDERLYINGNAME2,
         NOTIONALCURRENT2   
            format = 20.5
            informat = 20.5,
         PRICECCY2,
         GROSSRATE2   
            format = 20.5
            informat = 20.5,
         AMOUNT2   
            format = 20.5
            informat = 20.5,
         CALCBASIS2,
         INTERESTRATE2   
            format = 20.5
            informat = 20.5,
         INTERESTRATETYPECD2,
         PAYMENTFREQUENCY2,
         STARTDATE2,
         STARTPERIODDATE2,
         NEXTPERIODDATE2,
         NEXTINTPAYMENTDATE2
   from &SYSLAST
      where DEALGROUP = 'Своп'
         AND
         INSTRUMENTTYPECD in ('IRS','CIS','SWP','SWS')
         AND 
         VALID_FROM_DTTM <= &REPDT < VALID_TO_DTTM
   ;
quit;

%let SYSLAST = work.W1N70UWC1;

%global etls_sql_pushDown;
%let etls_sql_pushDown = &sys_sql_ip_all;

%rcSet(&sqlrc); 



/**  Step end Extract **/

/*==========================================================================* 
 * Step:            User Written                          A5ELGGF9.AK00010R * 
 * Transform:       User Written                                            * 
 * Description:     Выполнение проверок DQ                                  * 
 *                                                                          * 
 * Source Table:    Extract - work.W1N70UWC1              A5ELGGF9.AF0000FK * 
 * Target Table:    User Written - work.W1M1MK700         A5ELGGF9.AF0000FL * 
 *                                                                          * 
 * User Written:    SourceCode                                              * 
 *==========================================================================*/ 

%let transformID = %quote(A5ELGGF9.AK00010R);
%let trans_rc = 0;
%let etls_stepStartTime = %sysfunc(datetime(), datetime20.); 

%let etls_recnt = -1;
%let SYSLAST = %nrquote(work.W1N70UWC1); 

%let _INPUT_count = 1;
%let _INPUT = work.W1N70UWC1;
%let _INPUT_connect = ;
%let _INPUT_engine = ;
%let _INPUT_memtype = VIEW;
%let _INPUT_options = %nrquote();
%let _INPUT_alter = %nrquote();
%let _INPUT_path = %nrquote(/Extract_A5ELGGF9.AF0000FK%(WorkTable%));
%let _INPUT_type = 1;
%let _INPUT_label = %nrquote();

%let _INPUT1 = work.W1N70UWC1;
%let _INPUT1_connect = ;
%let _INPUT1_engine = ;
%let _INPUT1_memtype = VIEW;
%let _INPUT1_options = %nrquote();
%let _INPUT1_alter = %nrquote();
%let _INPUT1_path = %nrquote(/Extract_A5ELGGF9.AF0000FK%(WorkTable%));
%let _INPUT1_type = 1;
%let _INPUT1_label = %nrquote();

%let _OUTPUT_count = 1;
%let _OUTPUT = work.W1M1MK700;
%let _OUTPUT_connect = ;
%let _OUTPUT_engine = ;
%let _OUTPUT_memtype = DATA;
%let _OUTPUT_options = %nrquote();
%let _OUTPUT_alter = %nrquote();
%let _OUTPUT_path = %nrquote(/User Written_A5ELGGF9.AF0000FL%(WorkTable%));
%let _OUTPUT_type = 1;
%let _OUTPUT_label = %nrquote();
/* List of target columns to keep  */ 
%let _OUTPUT_keep = REPORTCODE REPORTDATE FRONTKDEALID FRONTFDEALID DEALID 
        INSTRUMENTTYPECD DEALDATE ADDITIONALINFORMATION VALUEFRS VALUESEC 
        DEALRK;
%let _OUTPUT_col_count = 11;
%let _OUTPUT_col0_name = REPORTCODE;
%let _OUTPUT_col0_table = work.W1M1MK700;
%let _OUTPUT_col0_length = 5;
%let _OUTPUT_col0_type = $;
%let _OUTPUT_col0_format = $5.;
%let _OUTPUT_col0_informat = $5.;
%let _OUTPUT_col0_label = %nrquote();
%let _OUTPUT_col0_exp = ;
%let _OUTPUT_col0_input_count = 0;
%let _OUTPUT_col1_name = REPORTDATE;
%let _OUTPUT_col1_table = work.W1M1MK700;
%let _OUTPUT_col1_length = 8;
%let _OUTPUT_col1_type = ;
%let _OUTPUT_col1_format = DATETIME20.;
%let _OUTPUT_col1_informat = DATETIME20.;
%let _OUTPUT_col1_label = %nrquote();
%let _OUTPUT_col1_exp = ;
%let _OUTPUT_col1_input_count = 0;
%let _OUTPUT_col2_name = FRONTKDEALID;
%let _OUTPUT_col2_table = work.W1M1MK700;
%let _OUTPUT_col2_length = 10;
%let _OUTPUT_col2_type = $;
%let _OUTPUT_col2_format = $10.;
%let _OUTPUT_col2_informat = $10.;
%let _OUTPUT_col2_label = %nrquote(FRONTKDEALID);
%let _OUTPUT_col2_input0 = FRONTKDEALID;
%let _OUTPUT_col2_exp = ;
%let _OUTPUT_col2_input = FRONTKDEALID;
%let _OUTPUT_col2_input_count = 1;
%let _OUTPUT_col3_name = FRONTFDEALID;
%let _OUTPUT_col3_table = work.W1M1MK700;
%let _OUTPUT_col3_length = 10;
%let _OUTPUT_col3_type = $;
%let _OUTPUT_col3_format = $10.;
%let _OUTPUT_col3_informat = $10.;
%let _OUTPUT_col3_label = %nrquote(FRONTFDEALID);
%let _OUTPUT_col3_input0 = FRONTFDEALID;
%let _OUTPUT_col3_exp = ;
%let _OUTPUT_col3_input = FRONTFDEALID;
%let _OUTPUT_col3_input_count = 1;
%let _OUTPUT_col4_name = DEALID;
%let _OUTPUT_col4_table = work.W1M1MK700;
%let _OUTPUT_col4_length = 100;
%let _OUTPUT_col4_type = $;
%let _OUTPUT_col4_format = $100.;
%let _OUTPUT_col4_informat = $100.;
%let _OUTPUT_col4_label = %nrquote();
%let _OUTPUT_col4_input0 = DEALID1;
%let _OUTPUT_col4_exp = ;
%let _OUTPUT_col4_input = DEALID1;
%let _OUTPUT_col4_input_count = 1;
%let _OUTPUT_col5_name = INSTRUMENTTYPECD;
%let _OUTPUT_col5_table = work.W1M1MK700;
%let _OUTPUT_col5_length = 3;
%let _OUTPUT_col5_type = $;
%let _OUTPUT_col5_format = $3.;
%let _OUTPUT_col5_informat = $3.;
%let _OUTPUT_col5_label = %nrquote(INSTRUMENTTYPECD);
%let _OUTPUT_col5_input0 = INSTRUMENTTYPECD;
%let _OUTPUT_col5_exp = ;
%let _OUTPUT_col5_input = INSTRUMENTTYPECD;
%let _OUTPUT_col5_input_count = 1;
%let _OUTPUT_col6_name = DEALDATE;
%let _OUTPUT_col6_table = work.W1M1MK700;
%let _OUTPUT_col6_length = 8;
%let _OUTPUT_col6_type = ;
%let _OUTPUT_col6_format = DATETIME20.;
%let _OUTPUT_col6_informat = DATETIME20.;
%let _OUTPUT_col6_label = %nrquote(DEALDATE);
%let _OUTPUT_col6_input0 = DEALDATE;
%let _OUTPUT_col6_exp = ;
%let _OUTPUT_col6_input = DEALDATE;
%let _OUTPUT_col6_input_count = 1;
%let _OUTPUT_col7_name = ADDITIONALINFORMATION;
%let _OUTPUT_col7_table = work.W1M1MK700;
%let _OUTPUT_col7_length = 255;
%let _OUTPUT_col7_type = $;
%let _OUTPUT_col7_format = $255.;
%let _OUTPUT_col7_informat = $255.;
%let _OUTPUT_col7_label = %nrquote();
%let _OUTPUT_col7_exp = ;
%let _OUTPUT_col7_input_count = 0;
%let _OUTPUT_col8_name = VALUEFRS;
%let _OUTPUT_col8_table = work.W1M1MK700;
%let _OUTPUT_col8_length = 20;
%let _OUTPUT_col8_type = $;
%let _OUTPUT_col8_format = $20.;
%let _OUTPUT_col8_informat = $20.;
%let _OUTPUT_col8_label = %nrquote();
%let _OUTPUT_col8_exp = ;
%let _OUTPUT_col8_input_count = 0;
%let _OUTPUT_col9_name = VALUESEC;
%let _OUTPUT_col9_table = work.W1M1MK700;
%let _OUTPUT_col9_length = 20;
%let _OUTPUT_col9_type = $;
%let _OUTPUT_col9_format = $20.;
%let _OUTPUT_col9_informat = $20.;
%let _OUTPUT_col9_label = %nrquote();
%let _OUTPUT_col9_exp = ;
%let _OUTPUT_col9_input_count = 0;
%let _OUTPUT_col10_name = DEALRK;
%let _OUTPUT_col10_table = work.W1M1MK700;
%let _OUTPUT_col10_length = 8;
%let _OUTPUT_col10_type = ;
%let _OUTPUT_col10_format = 11.;
%let _OUTPUT_col10_informat = 11.;
%let _OUTPUT_col10_label = %nrquote(DEALRK);
%let _OUTPUT_col10_input0 = DEALRK;
%let _OUTPUT_col10_exp = ;
%let _OUTPUT_col10_input = DEALRK;
%let _OUTPUT_col10_input_count = 1;

%let _OUTPUT1 = work.W1M1MK700;
%let _OUTPUT1_connect = ;
%let _OUTPUT1_engine = ;
%let _OUTPUT1_memtype = DATA;
%let _OUTPUT1_options = %nrquote();
%let _OUTPUT1_alter = %nrquote();
%let _OUTPUT1_path = %nrquote(/User Written_A5ELGGF9.AF0000FL%(WorkTable%));
%let _OUTPUT1_type = 1;
%let _OUTPUT1_label = %nrquote();
/* List of target columns to keep  */ 
%let _OUTPUT1_keep = REPORTCODE REPORTDATE FRONTKDEALID FRONTFDEALID DEALID 
        INSTRUMENTTYPECD DEALDATE ADDITIONALINFORMATION VALUEFRS VALUESEC 
        DEALRK;
%let _OUTPUT1_col_count = 11;
%let _OUTPUT1_col0_name = REPORTCODE;
%let _OUTPUT1_col0_table = work.W1M1MK700;
%let _OUTPUT1_col0_length = 5;
%let _OUTPUT1_col0_type = $;
%let _OUTPUT1_col0_format = $5.;
%let _OUTPUT1_col0_informat = $5.;
%let _OUTPUT1_col0_label = %nrquote();
%let _OUTPUT1_col0_exp = ;
%let _OUTPUT1_col0_input_count = 0;
%let _OUTPUT1_col1_name = REPORTDATE;
%let _OUTPUT1_col1_table = work.W1M1MK700;
%let _OUTPUT1_col1_length = 8;
%let _OUTPUT1_col1_type = ;
%let _OUTPUT1_col1_format = DATETIME20.;
%let _OUTPUT1_col1_informat = DATETIME20.;
%let _OUTPUT1_col1_label = %nrquote();
%let _OUTPUT1_col1_exp = ;
%let _OUTPUT1_col1_input_count = 0;
%let _OUTPUT1_col2_name = FRONTKDEALID;
%let _OUTPUT1_col2_table = work.W1M1MK700;
%let _OUTPUT1_col2_length = 10;
%let _OUTPUT1_col2_type = $;
%let _OUTPUT1_col2_format = $10.;
%let _OUTPUT1_col2_informat = $10.;
%let _OUTPUT1_col2_label = %nrquote(FRONTKDEALID);
%let _OUTPUT1_col2_input0 = FRONTKDEALID;
%let _OUTPUT1_col2_exp = ;
%let _OUTPUT1_col2_input = FRONTKDEALID;
%let _OUTPUT1_col2_input_count = 1;
%let _OUTPUT1_col3_name = FRONTFDEALID;
%let _OUTPUT1_col3_table = work.W1M1MK700;
%let _OUTPUT1_col3_length = 10;
%let _OUTPUT1_col3_type = $;
%let _OUTPUT1_col3_format = $10.;
%let _OUTPUT1_col3_informat = $10.;
%let _OUTPUT1_col3_label = %nrquote(FRONTFDEALID);
%let _OUTPUT1_col3_input0 = FRONTFDEALID;
%let _OUTPUT1_col3_exp = ;
%let _OUTPUT1_col3_input = FRONTFDEALID;
%let _OUTPUT1_col3_input_count = 1;
%let _OUTPUT1_col4_name = DEALID;
%let _OUTPUT1_col4_table = work.W1M1MK700;
%let _OUTPUT1_col4_length = 100;
%let _OUTPUT1_col4_type = $;
%let _OUTPUT1_col4_format = $100.;
%let _OUTPUT1_col4_informat = $100.;
%let _OUTPUT1_col4_label = %nrquote();
%let _OUTPUT1_col4_input0 = DEALID1;
%let _OUTPUT1_col4_exp = ;
%let _OUTPUT1_col4_input = DEALID1;
%let _OUTPUT1_col4_input_count = 1;
%let _OUTPUT1_col5_name = INSTRUMENTTYPECD;
%let _OUTPUT1_col5_table = work.W1M1MK700;
%let _OUTPUT1_col5_length = 3;
%let _OUTPUT1_col5_type = $;
%let _OUTPUT1_col5_format = $3.;
%let _OUTPUT1_col5_informat = $3.;
%let _OUTPUT1_col5_label = %nrquote(INSTRUMENTTYPECD);
%let _OUTPUT1_col5_input0 = INSTRUMENTTYPECD;
%let _OUTPUT1_col5_exp = ;
%let _OUTPUT1_col5_input = INSTRUMENTTYPECD;
%let _OUTPUT1_col5_input_count = 1;
%let _OUTPUT1_col6_name = DEALDATE;
%let _OUTPUT1_col6_table = work.W1M1MK700;
%let _OUTPUT1_col6_length = 8;
%let _OUTPUT1_col6_type = ;
%let _OUTPUT1_col6_format = DATETIME20.;
%let _OUTPUT1_col6_informat = DATETIME20.;
%let _OUTPUT1_col6_label = %nrquote(DEALDATE);
%let _OUTPUT1_col6_input0 = DEALDATE;
%let _OUTPUT1_col6_exp = ;
%let _OUTPUT1_col6_input = DEALDATE;
%let _OUTPUT1_col6_input_count = 1;
%let _OUTPUT1_col7_name = ADDITIONALINFORMATION;
%let _OUTPUT1_col7_table = work.W1M1MK700;
%let _OUTPUT1_col7_length = 255;
%let _OUTPUT1_col7_type = $;
%let _OUTPUT1_col7_format = $255.;
%let _OUTPUT1_col7_informat = $255.;
%let _OUTPUT1_col7_label = %nrquote();
%let _OUTPUT1_col7_exp = ;
%let _OUTPUT1_col7_input_count = 0;
%let _OUTPUT1_col8_name = VALUEFRS;
%let _OUTPUT1_col8_table = work.W1M1MK700;
%let _OUTPUT1_col8_length = 20;
%let _OUTPUT1_col8_type = $;
%let _OUTPUT1_col8_format = $20.;
%let _OUTPUT1_col8_informat = $20.;
%let _OUTPUT1_col8_label = %nrquote();
%let _OUTPUT1_col8_exp = ;
%let _OUTPUT1_col8_input_count = 0;
%let _OUTPUT1_col9_name = VALUESEC;
%let _OUTPUT1_col9_table = work.W1M1MK700;
%let _OUTPUT1_col9_length = 20;
%let _OUTPUT1_col9_type = $;
%let _OUTPUT1_col9_format = $20.;
%let _OUTPUT1_col9_informat = $20.;
%let _OUTPUT1_col9_label = %nrquote();
%let _OUTPUT1_col9_exp = ;
%let _OUTPUT1_col9_input_count = 0;
%let _OUTPUT1_col10_name = DEALRK;
%let _OUTPUT1_col10_table = work.W1M1MK700;
%let _OUTPUT1_col10_length = 8;
%let _OUTPUT1_col10_type = ;
%let _OUTPUT1_col10_format = 11.;
%let _OUTPUT1_col10_informat = 11.;
%let _OUTPUT1_col10_label = %nrquote(DEALRK);
%let _OUTPUT1_col10_input0 = DEALRK;
%let _OUTPUT1_col10_exp = ;
%let _OUTPUT1_col10_input = DEALRK;
%let _OUTPUT1_col10_input_count = 1;

/*---- Start of User Written Code  ----*/ 


/*====================================================================*/
/* Проверка условий согласно FSD													 */
/*																							 */
/* 2012-08-30 - Chepigin Alexander - Initial Coding						 */
/*====================================================================*/

data &_OUTPUT1 (keep = DEALRK REPORTCODE REPORTDATE FRONTKDEALID FRONTFDEALID DEALID
					INSTRUMENTTYPECD DEALDATE ADDITIONALINFORMATION VALUEFRS VALUESEC);
	attrib
		REPORTCODE informat = $5. format = $5. length = $5
		REPORTDATE informat = DATETIME20. format = DATETIME20. length = 8
		FRONTKDEALID informat = $10. format = $10. length = $10
		FRONTFDEALID informat = $10. format = $10. length = $10
		DEALID informat = $100. format = $100. length = $100
		INSTRUMENTTYPECD informat = $3. format = $3. length = $3
		DEALDATE informat = DATETIME20. format = DATETIME20. length = 8
		ADDITIONALINFORMATION informat = $255. format = $255. length = $255
		VALUEFRS informat = $20. format = $20. length = $20
		VALUESEC informat = $20. format = $20. length = $20
	;
	set &_INPUT1;
	REPORTCODE = 'П-07';
	REPORTDATE = &REPDT;
	select;
		when (missing(DEALID1)) DEALID=DEALID2;
		when (missing(DEALID2)) DEALID=DEALID1;
		when (not missing(DEALID1) AND not missing(DEALID2)) DEALID = cats(DEALID1, ',', DEALID2);
		otherwise DEALID = " ";
	end;

	if STARTDATE1 ^= STARTDATE2 then
	do;
		ADDITIONALINFORMATION = 'STARTDATE';
		VALUEFRS = put(datepart(STARTDATE1), ddmmyyp10.);
		VALUESEC = put(datepart(STARTDATE2), ddmmyyp10.);
		output;
	end;
	if MATURITYDATE1 ^= MATURITYDATE2 then
	do;
		ADDITIONALINFORMATION = 'MATURITYDATE';
		VALUEFRS = put(datepart(MATURITYDATE1), ddmmyyp10.);
		VALUESEC = put(datepart(MATURITYDATE2), ddmmyyp10.);
		output;
	end;
	
	if (INSTRUMENTTYPECD = 'IRS') OR (INSTRUMENTTYPECD = 'CIS') then
	do;
	if UNDERLYINGCCY1 ^= UNDERLYINGCCY2 then
	do;
		ADDITIONALINFORMATION = 'UNDERLYINGCCY';
		VALUEFRS = UNDERLYINGCCY1;
		VALUESEC = UNDERLYINGCCY2;
		output;
	end;
	if NOTIONALCURRENT1 ^= NOTIONALCURRENT2 then
	do;
		ADDITIONALINFORMATION = 'NOTIONALCURRENT';
		VALUEFRS = NOTIONALCURRENT1;
		VALUESEC = NOTIONALCURRENT2;
		output;
	end;
	end;
run;
%error_check(mpStepType=DATA);

/*---- End of User Written Code  ----*/ 

%rcSet(&syserr); 
%rcSet(&sqlrc); 


/**  Step end User Written **/

/*==========================================================================* 
 * Step:            Table Loader                          A5ELGGF9.AK00010S * 
 * Transform:       Table Loader (Version 2.1)                              * 
 * Description:                                                             * 
 *                                                                          * 
 * Source Table:    User Written - work.W1M1MK700         A5ELGGF9.AF0000FL * 
 * Target Table:    DQ_DRVT_DWH_DM - dm_dq.DQ_DRVT_DWH_DM A5ELGGF9.AE000049 * 
 *==========================================================================*/ 

%let transformID = %quote(A5ELGGF9.AK00010S);
%let trans_rc = 0;
%let etls_stepStartTime = %sysfunc(datetime(), datetime20.); 

%let SYSLAST = %nrquote(work.W1M1MK700); 

%let SYS_SQL_IP_SPEEDO = Y;
%let SYS_SQL_MAPPUTTO = sas_put;
%let SYS_SQLREDUCEPUT = DBMS;
%global etls_sql_pushDown;
%let etls_sql_pushDown = -1;
option DBIDIRECTEXEC;

%global etls_tableExist;
%global etls_numIndex;
%global etls_lastTable;
%let etls_tableExist = -1; 
%let etls_numIndex = -1; 
%let etls_lastTable = &SYSLAST; 

/*---- Define load data macro  ----*/ 

/* --------------------------------------------------------------
   Load Technique Selection: AppendToExisting - AppendProc
   Constraint and index action selections: 'ASIS','ASIS','ASIS','ASIS'
   Additional options selections... 
      Set unmapped to missing on updates: false 
   -------------------------------------------------------------- */
%macro etls_loader;

   %let etls_tableOptions = ;
   
   /*---- Map the columns  ----*/ 
   proc datasets lib = work nolist nowarn memtype = (data view);
      delete WJ2YE7G;
   quit;
   
   data _null_;
      put "NOTE: The following column(s) do not have a column mapping, so the"
           " value(s) will be set to missing: STARTDATE, NEXTDATE, ENDDATE,"
           " LEGNUMBER";
   run;
   
   %put %str(NOTE: Mapping columns ...);
   proc sql;
      create view work.WJ2YE7G as
         select
            REPORTCODE,
            REPORTDATE,
            FRONTKDEALID,
            FRONTFDEALID,
            DEALID,
            INSTRUMENTTYPECD,
            DEALDATE,
            ADDITIONALINFORMATION,
            . as STARTDATE length = 8
               format = DATETIME20.
               informat = DATETIME20.,
            . as NEXTDATE length = 8
               format = DATETIME20.
               informat = DATETIME20.,
            . as ENDDATE length = 8
               format = DATETIME20.
               informat = DATETIME20.,
            "" as LEGNUMBER length = 1
               format = $1.
               informat = $1.,
            VALUEFRS,
            VALUESEC
      from &etls_lastTable
      ;
   quit;
   
   %let SYSLAST = work.WJ2YE7G;
   
   %let etls_lastTable = &SYSLAST; 
   %let etls_tableOptions = ; 
   
   /* Determine if the target table exists  */ 
   %let etls_tableExist = %eval(%sysfunc(exist(dm_dq.DQ_DRVT_DWH_DM, DATA)) or 
         %sysfunc(exist(dm_dq.DQ_DRVT_DWH_DM, VIEW))); 
   
   /*---- Create a new table  ----*/ 
   %if (&etls_tableExist eq 0) %then 
   %do;  /* if table does not exist  */ 
   
      %put %str(NOTE: Creating table ...);
      
      data dm_dq.DQ_DRVT_DWH_DM
              (dbnull = (
                         REPORTCODE = YES
                         REPORTDATE = YES
                         FRONTKDEALID = YES
                         FRONTFDEALID = YES
                         DEALID = YES
                         INSTRUMENTTYPECD = YES
                         DEALDATE = YES
                         ADDITIONALINFORMATION = YES
                         STARTDATE = YES
                         NEXTDATE = YES
                         ENDDATE = YES
                         LEGNUMBER = YES
                         VALUEFRS = YES
                         VALUESEC = YES));
         attrib REPORTCODE length = $5
            format = $5.
            informat = $5.
            label = 'REPORTCODE'; 
         attrib REPORTDATE length = 8
            format = DATETIME20.
            informat = DATETIME20.
            label = 'REPORTDATE'; 
         attrib FRONTKDEALID length = $10
            format = $10.
            informat = $10.
            label = 'FRONTKDEALID'; 
         attrib FRONTFDEALID length = $10
            format = $10.
            informat = $10.
            label = 'FRONTFDEALID'; 
         attrib DEALID length = $100
            format = $100.
            informat = $100.
            label = 'DEALID'; 
         attrib INSTRUMENTTYPECD length = $3
            format = $3.
            informat = $3.
            label = 'INSTRUMENTTYPECD'; 
         attrib DEALDATE length = 8
            format = DATETIME20.
            informat = DATETIME20.
            label = 'DEALDATE'; 
         attrib ADDITIONALINFORMATION length = $255
            format = $255.
            informat = $255.
            label = 'ADDITIONALINFORMATION'; 
         attrib STARTDATE length = 8
            format = DATETIME20.
            informat = DATETIME20.
            label = 'STARTDATE'; 
         attrib NEXTDATE length = 8
            format = DATETIME20.
            informat = DATETIME20.
            label = 'NEXTDATE'; 
         attrib ENDDATE length = 8
            format = DATETIME20.
            informat = DATETIME20.
            label = 'ENDDATE'; 
         attrib LEGNUMBER length = $1
            format = $1.
            informat = $1.
            label = 'LEGNUMBER'; 
         attrib VALUEFRS length = $20
            format = $20.
            informat = $20.
            label = 'VALUEFRS'; 
         attrib VALUESEC length = $20
            format = $20.
            informat = $20.
            label = 'VALUESEC'; 
         call missing(of _all_);
         stop;
      run;
      
      %rcSet(&syserr); 
      
   %end;  /* if table does not exist  */ 
   
   /*---- Append  ----*/ 
   %put %str(NOTE: Appending data ...);
   
   proc append base = dm_dq.DQ_DRVT_DWH_DM 
      data = &etls_lastTable (&etls_tableOptions)  force ; 
    run; 
   
   %rcSet(&syserr); 
   
   proc datasets lib = work nolist nowarn memtype = (data view);
      delete WJ2YE7G;
   quit;
   
%mend etls_loader;
%etls_loader;

%let etls_recnt = 0;
%macro etls_recordCheck; 
   %let etls_recCheckExist = %eval(%sysfunc(exist(dm_dq.DQ_DRVT_DWH_DM, DATA)) or 
         %sysfunc(exist(dm_dq.DQ_DRVT_DWH_DM, VIEW))); 
   
   %if (&etls_recCheckExist) %then
   %do;
      proc sql noprint;
         select count(*) into :etls_recnt from dm_dq.DQ_DRVT_DWH_DM;
      quit;
   %end;
%mend etls_recordCheck;
%etls_recordCheck;



/**  Step end Table Loader **/

/*==========================================================================* 
 * Step:            SQL Join                              A5ELGGF9.AK00010T * 
 * Transform:       Join                                                    * 
 * Description:                                                             * 
 *                                                                          * 
 * Source Tables:   User Written - work.W1M1MK700         A5ELGGF9.AF0000FL * 
 *                  INSTRUMENTTYPE -                      A5LX14I5.A900001B * 
 *                   DM_DRVT.INSTRUMENTTYPE                                 * 
 * Target Table:    SQL Join - work.W1M1TCL7R             A5ELGGF9.AF0000FM * 
 *==========================================================================*/ 

%let transformID = %quote(A5ELGGF9.AK00010T);
%let trans_rc = 0;
%let etls_stepStartTime = %sysfunc(datetime(), datetime20.); 

%let etls_recCheckExist = 0; 
%let etls_recnt = 0; 
%macro etls_recordCheck; 
   %let etls_recCheckExist = %eval(%sysfunc(exist(work.W1M1MK700, DATA)) or 
         %sysfunc(exist(work.W1M1MK700, VIEW))); 
   
   %if (&etls_recCheckExist) %then
   %do;
      %local etls_syntaxcheck; 
      %let etls_syntaxcheck = %sysfunc(getoption(syntaxcheck)); 
      /* Turn off syntaxcheck option to perform following steps  */ 
      options nosyntaxcheck;
      
      proc contents data = work.W1M1MK700 out = work.etls_contents(keep = nobs) noprint; 
      run; 
      
      data _null_; 
         set work.etls_contents (obs = 1); 
         call symput("etls_recnt", left(put(nobs,32.))); 
      run;
      
      proc datasets lib = work nolist nowarn memtype = (data view);
         delete etls_contents;
      quit;
      
      /* Reset syntaxcheck option to previous setting  */ 
      options &etls_syntaxcheck; 
   %end;
%mend etls_recordCheck;
%etls_recordCheck;

%let SYS_SQL_IP_SPEEDO = Y;
%let SYS_SQL_MAPPUTTO = sas_put;
%let SYS_SQLREDUCEPUT = DBMS;
%global etls_sql_pushDown;
%let etls_sql_pushDown = -1;
option DBIDIRECTEXEC;

proc datasets lib = work nolist nowarn memtype = (data view);
   delete W1M1TCL7R;
quit;

proc sql;
   create table work.W1M1TCL7R as
   select distinct
      W1M1MK700.INSTRUMENTTYPECD length = 3   
         format = $3.
         informat = $3.
         label = 'INSTRUMENTTYPECD',
      INSTRUMENTTYPE.INSTRUMENTTYPE length = 100   
         format = $100.
         informat = $100.
         label = 'FINANCIAL_INSTRUMENT_TYPE_DESC'
   from
      work.W1M1MK700 left join 
      DM_DRVT.INSTRUMENTTYPE
         on
         (
            W1M1MK700.INSTRUMENTTYPECD = INSTRUMENTTYPE.INSTRUMENTTYPECD
         )
   where
      W1M1MK700.INSTRUMENTTYPECD NOT IS MISSING 
   ;
quit;

%global etls_sql_pushDown;
%let etls_sql_pushDown = &sys_sql_ip_all;

%rcSet(&sqlrc); 



/**  Step end SQL Join **/

/*==========================================================================* 
 * Step:            Table Loader                          A5ELGGF9.AK00010U * 
 * Transform:       Table Loader (Version 2.1)                              * 
 * Description:                                                             * 
 *                                                                          * 
 * Source Table:    SQL Join - work.W1M1TCL7R             A5ELGGF9.AF0000FM * 
 * Target Table:    DQ_DRVT_INSTRUMENTTYPE -              A5ELGGF9.AE00004A * 
 *                   dm_dq.DQ_DRVT_INSTRUMENTTYPE                           * 
 *==========================================================================*/ 

%let transformID = %quote(A5ELGGF9.AK00010U);
%let trans_rc = 0;
%let etls_stepStartTime = %sysfunc(datetime(), datetime20.); 

%let SYSLAST = %nrquote(work.W1M1TCL7R); 

%let SYS_SQL_IP_SPEEDO = Y;
%let SYS_SQL_MAPPUTTO = sas_put;
%let SYS_SQLREDUCEPUT = DBMS;
%global etls_sql_pushDown;
%let etls_sql_pushDown = -1;
option DBIDIRECTEXEC;

%global etls_tableExist;
%global etls_numIndex;
%global etls_lastTable;
%let etls_tableExist = -1; 
%let etls_numIndex = -1; 
%let etls_lastTable = &SYSLAST; 

/*---- Define load data macro  ----*/ 

/* --------------------------------------------------------------
   Load Technique Selection: Update - Matching=SQLSet, New=AppendProc
   Blanks may replace non-blanks: false
   Constraint and index action selections: 'ASIS','ASIS','ASIS','ASIS'
   Additional options selections... 
      Set unmapped to missing on updates: false 
   -------------------------------------------------------------- */
%macro etls_loader;

   %let etls_tableOptions = ;
   
   /*---- Map the columns  ----*/ 
   proc datasets lib = work nolist nowarn memtype = (data view);
      delete WJ2YE8F;
   quit;
   
   %put %str(NOTE: Mapping columns ...);
   proc sql;
      create view work.WJ2YE8F as
         select
            INSTRUMENTTYPECD,
            INSTRUMENTTYPE
      from &etls_lastTable
      ;
   quit;
   
   %let SYSLAST = work.WJ2YE8F;
   
   %let etls_lastTable = &SYSLAST; 
   %let etls_tableOptions = ; 
   
   /* Determine if the target table exists  */ 
   %let etls_tableExist = %eval(%sysfunc(exist(dm_dq.DQ_DRVT_INSTRUMENTTYPE, DATA)) or 
         %sysfunc(exist(dm_dq.DQ_DRVT_INSTRUMENTTYPE, VIEW))); 
   
   %let etls_hasUpdateIndex=0; 
   
   /*---- Create a new table  ----*/ 
   %if (&etls_tableExist eq 0) %then 
   %do;  /* if table does not exist  */ 
   
      %put %str(NOTE: Creating table ...);
      
      data dm_dq.DQ_DRVT_INSTRUMENTTYPE
              (dbnull = (
                         INSTRUMENTTYPECD = YES
                         INSTRUMENTTYPE = YES));
         attrib INSTRUMENTTYPECD length = $3
            format = $3.
            informat = $3.
            label = 'INSTRUMENTTYPECD'; 
         attrib INSTRUMENTTYPE length = $100
            format = $100.
            informat = $100.
            label = 'INSTRUMENTTYPE'; 
         call missing(of _all_);
         stop;
      run;
      
      %rcSet(&syserr); 
      
   %end;  /* if table does not exist  */ 
   
   %let etls_recCheckExist = 0; 
   %let etls_targetHasRows = 0; 
   %macro etls_recordCheck; 
      %let etls_recCheckExist = %eval(%sysfunc(exist(dm_dq.DQ_DRVT_INSTRUMENTTYPE, DATA)) or 
            %sysfunc(exist(dm_dq.DQ_DRVT_INSTRUMENTTYPE, VIEW))); 
      
      %if (&etls_recCheckExist) %then
      %do;
         %local etls_syntaxcheck; 
         %let etls_syntaxcheck = %sysfunc(getoption(syntaxcheck)); 
         /* Turn off syntaxcheck option to perform following steps  */ 
         options nosyntaxcheck;
         
         data _null_; 
            set dm_dq.DQ_DRVT_INSTRUMENTTYPE( obs=1 ); 
            call symput("etls_targetHasRows",'1'); 
         run; 
         /* Reset syntaxcheck option to previous setting  */ 
         options &etls_syntaxcheck; 
      %end;
   %mend etls_recordCheck;
   %etls_recordCheck;
   
   
   %if (&etls_targetHasRows) %then 
   %do;  /* if has rows */ 
      proc sql ; 
         /* update existing records in the master table  */ 
         update dm_dq.DQ_DRVT_INSTRUMENTTYPE as m
            set INSTRUMENTTYPE = (select case when t.INSTRUMENTTYPE="" then m.INSTRUMENTTYPE else t.INSTRUMENTTYPE end from &etls_lastTable as t 
                                where m.INSTRUMENTTYPECD = t.INSTRUMENTTYPECD)
               where exists (select * from &etls_lastTable as t
                                   where m.INSTRUMENTTYPECD = t.INSTRUMENTTYPECD);
         
         /* create a temporary table of new records from the transaction table  */ 
         create table etls_newrecords as 
            select * 
               from &etls_lastTable as t 
                  where not exists 
                     (select * from dm_dq.DQ_DRVT_INSTRUMENTTYPE
                   as m 
                                      where m.INSTRUMENTTYPECD = t.INSTRUMENTTYPECD)
         ; 
         
      quit;
      
      %let etls_lastTable = &SYSLAST;
      
      %let etls_tableOptions = ; 
      
      %global etls_sql_pushDown;
      %let etls_sql_pushDown = &sys_sql_ip_all;
      
      %rcSet(&sqlrc); 
      
   %end; /* if has rows */ 
   
   /*---- Append  ----*/ 
   %put %str(NOTE: Appending data ...);
   
   proc append base = dm_dq.DQ_DRVT_INSTRUMENTTYPE 
      data = &etls_lastTable (&etls_tableOptions)  force ; 
    run; 
   
   %rcSet(&syserr); 
   
   proc datasets lib = work nolist nowarn memtype = (data view);
      delete etls_newrecords;
   quit;
   
   proc datasets lib = work nolist nowarn memtype = (data view);
      delete WJ2YE8F;
   quit;
   
%mend etls_loader;
%etls_loader;

%let etls_recnt = 0;
%macro etls_recordCheck; 
   %let etls_recCheckExist = %eval(%sysfunc(exist(dm_dq.DQ_DRVT_INSTRUMENTTYPE, DATA)) or 
         %sysfunc(exist(dm_dq.DQ_DRVT_INSTRUMENTTYPE, VIEW))); 
   
   %if (&etls_recCheckExist) %then
   %do;
      proc sql noprint;
         select count(*) into :etls_recnt from dm_dq.DQ_DRVT_INSTRUMENTTYPE;
      quit;
   %end;
%mend etls_recordCheck;
%etls_recordCheck;



/**  Step end Table Loader **/

/*==========================================================================* 
 * Step:            User Written                          A5ELGGF9.AK00010V * 
 * Transform:       User Written                                            * 
 * Description:     Сбор статистики                                         * 
 *                                                                          * 
 * Source Tables:   Extract - work.W1N70UWC1              A5ELGGF9.AF0000FK * 
 *                  User Written - work.W1M1MK700         A5ELGGF9.AF0000FL * 
 *                  ETL_JOB - etl_sys.ETL_JOB             A59S11RW.AE00001A * 
 * Target Table:    User Written - work.W1N73AQKZ         A5ELGGF9.AF0000FN * 
 *                                                                          * 
 * User Written:    SourceCode                                              * 
 *==========================================================================*/ 

%let transformID = %quote(A5ELGGF9.AK00010V);
%let trans_rc = 0;
%let etls_stepStartTime = %sysfunc(datetime(), datetime20.); 

%let etls_recnt = -1;
%let _INPUT_count = 3;
%let _INPUT = work.W1N70UWC1;
%let _INPUT_connect = ;
%let _INPUT_engine = ;
%let _INPUT_memtype = VIEW;
%let _INPUT_options = %nrquote();
%let _INPUT_alter = %nrquote();
%let _INPUT_path = %nrquote(/Extract_A5ELGGF9.AF0000FK%(WorkTable%));
%let _INPUT_type = 1;
%let _INPUT_label = %nrquote();

%let _INPUT1 = work.W1N70UWC1;
%let _INPUT1_connect = ;
%let _INPUT1_engine = ;
%let _INPUT1_memtype = VIEW;
%let _INPUT1_options = %nrquote();
%let _INPUT1_alter = %nrquote();
%let _INPUT1_path = %nrquote(/Extract_A5ELGGF9.AF0000FK%(WorkTable%));
%let _INPUT1_type = 1;
%let _INPUT1_label = %nrquote();

%let _INPUT2 = work.W1M1MK700;
%let _INPUT2_connect = ;
%let _INPUT2_engine = ;
%let _INPUT2_memtype = DATA;
%let _INPUT2_options = %nrquote();
%let _INPUT2_alter = %nrquote();
%let _INPUT2_path = %nrquote(/User Written_A5ELGGF9.AF0000FL%(WorkTable%));
%let _INPUT2_type = 1;
%let _INPUT2_label = %nrquote();

%let _INPUT3 = etl_sys.ETL_JOB;
%let _INPUT3_connect =  PATH=DWH.IMB.RU AUTHDOMAIN="OraAuth_ETL_SYS" 
;
%let _INPUT3_engine = ORACLE;
%let _INPUT3_memtype = DATA;
%let _INPUT3_options = %nrquote();
%let _INPUT3_alter = %nrquote();
%let _INPUT3_path = %nrquote(/DWH_DWHDDS_SYS/Tables/ETL_SYS/ETL_JOB%(Table%));
%let _INPUT3_type = 1;
%let _INPUT3_label = %nrquote();

%let _OUTPUT_count = 1;
%let _OUTPUT = work.W1N73AQKZ;
%let _OUTPUT_connect = ;
%let _OUTPUT_engine = ;
%let _OUTPUT_memtype = DATA;
%let _OUTPUT_options = %nrquote();
%let _OUTPUT_alter = %nrquote();
%let _OUTPUT_path = %nrquote(/User Written_A5ELGGF9.AF0000FN%(WorkTable%));
%let _OUTPUT_type = 1;
%let _OUTPUT_label = %nrquote();
/* List of target columns to keep  */ 
%let _OUTPUT_keep = REP_DT REP_ID PRC CNT_ALL CNT_ERR DWH_DT;
%let _OUTPUT_col_count = 6;
%let _OUTPUT_col0_name = REP_DT;
%let _OUTPUT_col0_table = work.W1N73AQKZ;
%let _OUTPUT_col0_length = 8;
%let _OUTPUT_col0_type = ;
%let _OUTPUT_col0_format = DATETIME20.;
%let _OUTPUT_col0_informat = ;
%let _OUTPUT_col0_label = %nrquote();
%let _OUTPUT_col0_exp = ;
%let _OUTPUT_col0_input_count = 0;
%let _OUTPUT_col1_name = REP_ID;
%let _OUTPUT_col1_table = work.W1N73AQKZ;
%let _OUTPUT_col1_length = 8;
%let _OUTPUT_col1_type = ;
%let _OUTPUT_col1_format = ;
%let _OUTPUT_col1_informat = ;
%let _OUTPUT_col1_label = %nrquote();
%let _OUTPUT_col1_exp = ;
%let _OUTPUT_col1_input_count = 0;
%let _OUTPUT_col2_name = PRC;
%let _OUTPUT_col2_table = work.W1N73AQKZ;
%let _OUTPUT_col2_length = 8;
%let _OUTPUT_col2_type = ;
%let _OUTPUT_col2_format = ;
%let _OUTPUT_col2_informat = ;
%let _OUTPUT_col2_label = %nrquote();
%let _OUTPUT_col2_exp = ;
%let _OUTPUT_col2_input_count = 0;
%let _OUTPUT_col3_name = CNT_ALL;
%let _OUTPUT_col3_table = work.W1N73AQKZ;
%let _OUTPUT_col3_length = 8;
%let _OUTPUT_col3_type = ;
%let _OUTPUT_col3_format = ;
%let _OUTPUT_col3_informat = ;
%let _OUTPUT_col3_label = %nrquote();
%let _OUTPUT_col3_exp = ;
%let _OUTPUT_col3_input_count = 0;
%let _OUTPUT_col4_name = CNT_ERR;
%let _OUTPUT_col4_table = work.W1N73AQKZ;
%let _OUTPUT_col4_length = 8;
%let _OUTPUT_col4_type = ;
%let _OUTPUT_col4_format = ;
%let _OUTPUT_col4_informat = ;
%let _OUTPUT_col4_label = %nrquote();
%let _OUTPUT_col4_exp = ;
%let _OUTPUT_col4_input_count = 0;
%let _OUTPUT_col5_name = DWH_DT;
%let _OUTPUT_col5_table = work.W1N73AQKZ;
%let _OUTPUT_col5_length = 8;
%let _OUTPUT_col5_type = ;
%let _OUTPUT_col5_format = DATETIME20.;
%let _OUTPUT_col5_informat = ;
%let _OUTPUT_col5_label = %nrquote();
%let _OUTPUT_col5_exp = ;
%let _OUTPUT_col5_input_count = 0;

%let _OUTPUT1 = work.W1N73AQKZ;
%let _OUTPUT1_connect = ;
%let _OUTPUT1_engine = ;
%let _OUTPUT1_memtype = DATA;
%let _OUTPUT1_options = %nrquote();
%let _OUTPUT1_alter = %nrquote();
%let _OUTPUT1_path = %nrquote(/User Written_A5ELGGF9.AF0000FN%(WorkTable%));
%let _OUTPUT1_type = 1;
%let _OUTPUT1_label = %nrquote();
/* List of target columns to keep  */ 
%let _OUTPUT1_keep = REP_DT REP_ID PRC CNT_ALL CNT_ERR DWH_DT;
%let _OUTPUT1_col_count = 6;
%let _OUTPUT1_col0_name = REP_DT;
%let _OUTPUT1_col0_table = work.W1N73AQKZ;
%let _OUTPUT1_col0_length = 8;
%let _OUTPUT1_col0_type = ;
%let _OUTPUT1_col0_format = DATETIME20.;
%let _OUTPUT1_col0_informat = ;
%let _OUTPUT1_col0_label = %nrquote();
%let _OUTPUT1_col0_exp = ;
%let _OUTPUT1_col0_input_count = 0;
%let _OUTPUT1_col1_name = REP_ID;
%let _OUTPUT1_col1_table = work.W1N73AQKZ;
%let _OUTPUT1_col1_length = 8;
%let _OUTPUT1_col1_type = ;
%let _OUTPUT1_col1_format = ;
%let _OUTPUT1_col1_informat = ;
%let _OUTPUT1_col1_label = %nrquote();
%let _OUTPUT1_col1_exp = ;
%let _OUTPUT1_col1_input_count = 0;
%let _OUTPUT1_col2_name = PRC;
%let _OUTPUT1_col2_table = work.W1N73AQKZ;
%let _OUTPUT1_col2_length = 8;
%let _OUTPUT1_col2_type = ;
%let _OUTPUT1_col2_format = ;
%let _OUTPUT1_col2_informat = ;
%let _OUTPUT1_col2_label = %nrquote();
%let _OUTPUT1_col2_exp = ;
%let _OUTPUT1_col2_input_count = 0;
%let _OUTPUT1_col3_name = CNT_ALL;
%let _OUTPUT1_col3_table = work.W1N73AQKZ;
%let _OUTPUT1_col3_length = 8;
%let _OUTPUT1_col3_type = ;
%let _OUTPUT1_col3_format = ;
%let _OUTPUT1_col3_informat = ;
%let _OUTPUT1_col3_label = %nrquote();
%let _OUTPUT1_col3_exp = ;
%let _OUTPUT1_col3_input_count = 0;
%let _OUTPUT1_col4_name = CNT_ERR;
%let _OUTPUT1_col4_table = work.W1N73AQKZ;
%let _OUTPUT1_col4_length = 8;
%let _OUTPUT1_col4_type = ;
%let _OUTPUT1_col4_format = ;
%let _OUTPUT1_col4_informat = ;
%let _OUTPUT1_col4_label = %nrquote();
%let _OUTPUT1_col4_exp = ;
%let _OUTPUT1_col4_input_count = 0;
%let _OUTPUT1_col5_name = DWH_DT;
%let _OUTPUT1_col5_table = work.W1N73AQKZ;
%let _OUTPUT1_col5_length = 8;
%let _OUTPUT1_col5_type = ;
%let _OUTPUT1_col5_format = DATETIME20.;
%let _OUTPUT1_col5_informat = ;
%let _OUTPUT1_col5_label = %nrquote();
%let _OUTPUT1_col5_exp = ;
%let _OUTPUT1_col5_input_count = 0;

/*---- Start of User Written Code  ----*/ 

proc sql;
/*Кол-во всех уникальных деривативных сделок*/
	select count(distinct DEALRK) into :CNT_ALL from &_INPUT1;
/*Кол-во ошибочных сделок*/
	select count(distinct DEALRK) into :CNT_ERR from &_INPUT2;
/*Дата успешного выполнения процесса в DWH*/
	select end_dttm into :DWH_DT from &_INPUT3 where JOB_ID = (
  select MAX(job_id) 
  from &_INPUT3 
  where upper(job_nm) = '401_021_MART_DEAL' and success_flg = 'Y'
  );
quit;
%error_check(mpStepType=SQL);

data &_OUTPUT1;
	attrib
		REP_DT length = 8 format = DATETIME20.
		REP_ID length = 8
		PRC length =8
		CNT_ALL length=8
		CNT_ERR length = 8
		DWH_DT length = 8 format = DATETIME20.
	;

	REP_DT = &REPDT.;
	REP_ID = 7;
	PRC = DIVIDE(&CNT_ERR. , &CNT_ALL.) * 100;
	if missing(PRC) then PRC=0;
	CNT_ALL = &CNT_ALL.;
	CNT_ERR = &CNT_ERR.;
	DWH_DT = "&DWH_DT."dt;
run;
%error_check(mpStepType=DATA);
/*---- End of User Written Code  ----*/ 

%rcSet(&syserr); 
%rcSet(&sqlrc); 


/**  Step end User Written **/

/*==========================================================================* 
 * Step:            Table Loader                          A5ELGGF9.AK00010W * 
 * Transform:       Table Loader (Version 2.1)                              * 
 * Description:                                                             * 
 *                                                                          * 
 * Source Table:    User Written - work.W1N73AQKZ         A5ELGGF9.AF0000FN * 
 * Target Table:    DQ_DRVT_REPORT_PRC -                  A5ELGGF9.AE00004E * 
 *                   dm_dq.DQ_DRVT_REPORT_PRC                               * 
 *==========================================================================*/ 

%let transformID = %quote(A5ELGGF9.AK00010W);
%let trans_rc = 0;
%let etls_stepStartTime = %sysfunc(datetime(), datetime20.); 

%let SYSLAST = %nrquote(work.W1N73AQKZ); 

%let SYS_SQL_IP_SPEEDO = Y;
%let SYS_SQL_MAPPUTTO = sas_put;
%let SYS_SQLREDUCEPUT = DBMS;
%global etls_sql_pushDown;
%let etls_sql_pushDown = -1;
option DBIDIRECTEXEC;

%global etls_tableExist;
%global etls_numIndex;
%global etls_lastTable;
%let etls_tableExist = -1; 
%let etls_numIndex = -1; 
%let etls_lastTable = &SYSLAST; 

/*---- Define load data macro  ----*/ 

/* --------------------------------------------------------------
   Load Technique Selection: AppendToExisting - AppendProc
   Constraint and index action selections: 'ASIS','ASIS','ASIS','ASIS'
   Additional options selections... 
      Set unmapped to missing on updates: false 
   -------------------------------------------------------------- */
%macro etls_loader;

   %let etls_tableOptions = ;
   
   /*---- Map the columns  ----*/ 
   proc datasets lib = work nolist nowarn memtype = (data view);
      delete WJ2YELI;
   quit;
   
   %put %str(NOTE: Mapping columns ...);
   proc sql;
      create view work.WJ2YELI as
         select
            REP_DT   
               informat = DATETIME20.,
            REP_ID   
               format = 7.
               informat = 7.,
            PRC   
               format = 19.8
               informat = 19.8,
            CNT_ALL   
               format = 13.
               informat = 13.,
            CNT_ERR   
               format = 13.
               informat = 13.,
            DWH_DT   
               informat = DATETIME20.
      from &etls_lastTable
      ;
   quit;
   
   %let SYSLAST = work.WJ2YELI;
   
   %let etls_lastTable = &SYSLAST; 
   %let etls_tableOptions = ; 
   
   /* Determine if the target table exists  */ 
   %let etls_tableExist = %eval(%sysfunc(exist(dm_dq.DQ_DRVT_REPORT_PRC, DATA)) or 
         %sysfunc(exist(dm_dq.DQ_DRVT_REPORT_PRC, VIEW))); 
   
   /*---- Create a new table  ----*/ 
   %if (&etls_tableExist eq 0) %then 
   %do;  /* if table does not exist  */ 
   
      %put %str(NOTE: Creating table ...);
      
      data dm_dq.DQ_DRVT_REPORT_PRC
              (dbnull = (
                         REP_DT = NO
                         REP_ID = NO
                         PRC = YES
                         CNT_ALL = YES
                         CNT_ERR = YES
                         DWH_DT = YES));
         attrib REP_DT length = 8
            format = DATETIME20.
            informat = DATETIME20.
            label = 'REP_DT'; 
         attrib REP_ID length = 8
            format = 7.
            informat = 7.
            label = 'REP_ID'; 
         attrib PRC length = 8
            format = 19.8
            informat = 19.8
            label = 'PRC'; 
         attrib CNT_ALL length = 8
            format = 13.
            informat = 13.
            label = 'CNT_ALL'; 
         attrib CNT_ERR length = 8
            format = 13.
            informat = 13.
            label = 'CNT_ERR'; 
         attrib DWH_DT length = 8
            format = DATETIME20.
            informat = DATETIME20.
            label = 'DWH_DT'; 
         call missing(of _all_);
         stop;
      run;
      
      %rcSet(&syserr); 
      
   %end;  /* if table does not exist  */ 
   
   /*---- Append  ----*/ 
   %put %str(NOTE: Appending data ...);
   
   proc append base = dm_dq.DQ_DRVT_REPORT_PRC 
      data = &etls_lastTable (&etls_tableOptions)  force ; 
    run; 
   
   %rcSet(&syserr); 
   
   proc datasets lib = work nolist nowarn memtype = (data view);
      delete WJ2YELI;
   quit;
   
%mend etls_loader;
%etls_loader;

%let etls_recnt = 0;
%macro etls_recordCheck; 
   %let etls_recCheckExist = %eval(%sysfunc(exist(dm_dq.DQ_DRVT_REPORT_PRC, DATA)) or 
         %sysfunc(exist(dm_dq.DQ_DRVT_REPORT_PRC, VIEW))); 
   
   %if (&etls_recCheckExist) %then
   %do;
      proc sql noprint;
         select count(*) into :etls_recnt from dm_dq.DQ_DRVT_REPORT_PRC;
      quit;
   %end;
%mend etls_recordCheck;
%etls_recordCheck;



/**  Step end Table Loader **/

/*==========================================================================* 
 * Step:            Завершить модуль                      A5ELGGF9.AK00010X * 
 * Transform:       Завершить модуль                                        * 
 * Description:                                                             * 
 *==========================================================================*/ 

%let transformID = %quote(A5ELGGF9.AK00010X);
%let trans_rc = 0;
%let etls_stepStartTime = %sysfunc(datetime(), datetime20.); 

%let _INPUT_count = 0; 
%let _OUTPUT_count = 0; 


/*****************************************************************
* ВЕРСИЯ:
*   $Id: transform_job_finish.sas 247 2012-04-03 07:31:10Z nesterenok $
*
******************************************************************
* НАЗНАЧЕНИЕ:
*   Регистрирует конец модуля ETL.
*
* ПАРАМЕТРЫ:
*   нет
*
******************************************************************/

%macro transform_job_finish;

   /* Продолжаем модуль */
   %job_continue_reg(mpJobType=JOB, mpJobName=&ETLS_JobName., mpPostEvent=N);

   /* Завершаем модуль */
   %job_finish_reg(mpJobType=JOB);

%mend transform_job_finish;

%transform_job_finish;


%rcSet(&syserr); 
%rcSet(&sysrc); 
%rcSet(&sqlrc); 



/**  Step end Завершить модуль **/

%let etls_endTime = %sysfunc(datetime(),datetime.);



/**  Job end 202_070_Mart_DQ_DRVT_REP07 **/

/* Reset jobid and name */
%let jobID = %quote(A5ELGGF9.AH00003N);
%let etls_jobName = %nrquote(202_002_Stream_DQ_DRVT);

/**************************************************************************** 
 * Job:             202_080_Mart_DQ_DRVT_REP08            A5ELGGF9.AH00002E * 
 * Description:     Несовпадение типа процентной ставки по первой и второй  * 
 *                   ноге IRS или CIRS за дату отчета.                      * 
 *                                                                          * 
 * Metadata Server: bravo14                                                 * 
 * Port:            8561                                                    * 
 * Location:        /DWH_DMDQ_REP/Jobs/Includes/DQ_DRVT                     * 
 *                                                                          * 
 * Server:          SASApp                                A5C46MZY.AQ000002 * 
 *                                                                          * 
 * Source Tables:   DEAL - DM_DRVT.DEAL                   A5LX14I5.A9000014 * 
 *                  INTERESTRATETYPE -                    A5LX14I5.A900001E * 
 *                   DM_DRVT.INTERESTRATETYPE                               * 
 *                  INSTRUMENTTYPE -                      A5LX14I5.A900001B * 
 *                   DM_DRVT.INSTRUMENTTYPE                                 * 
 *                  ETL_JOB - etl_sys.ETL_JOB             A59S11RW.AE00001A * 
 * Target Tables:   DQ_DRVT_DWH_DM - dm_dq.DQ_DRVT_DWH_DM A5ELGGF9.AE000049 * 
 *                  DQ_DRVT_INSTRUMENTTYPE -              A5ELGGF9.AE00004A * 
 *                   dm_dq.DQ_DRVT_INSTRUMENTTYPE                           * 
 *                  DQ_DRVT_REPORT_PRC -                  A5ELGGF9.AE00004E * 
 *                   dm_dq.DQ_DRVT_REPORT_PRC                               * 
 *                  DQ_DRVT_DWH_DM - dm_dq.DQ_DRVT_DWH_DM A5ELGGF9.AE000049 * 
 *                  DQ_DRVT_REPORT_PRC -                  A5ELGGF9.AE00004E * 
 *                   dm_dq.DQ_DRVT_REPORT_PRC                               * 
 *                                                                          * 
 * Generated on:    16 Июль 2013 г. 17:46:19 MSD                            * 
 * Generated by:    sasdwh                                                  * 
 * Version:         SAS Data Integration Studio 4.5                         * 
 ****************************************************************************/ 

/* General macro variables  */ 
%let jobID = %quote(A5ELGGF9.AH00002E);
%let etls_jobName = %nrquote(202_080_Mart_DQ_DRVT_REP08);
%let etls_userID = %nrquote(sasdwh);


/* Create metadata macro variables */
%let IOMServer      = %nrquote(SASApp);
%let metaPort       = %nrquote(8561);
%let metaServer     = %nrquote(bravo14);

/* Set metadata options */
options metaport       = &metaPort 
        metaserver     = "&metaServer"; 

/* Setup for capturing job status  */ 
%let etls_startTime = %sysfunc(datetime(),datetime.);
%let etls_recordsBefore = 0;
%let etls_recordsAfter = 0;
%let etls_lib = 0;
%let etls_table = 0;

%global etls_debug; 
%macro etls_setDebug; 
   %if %str(&etls_debug) ne 0 %then 
      OPTIONS MPRINT%str(;); 
%mend; 
%etls_setDebug; 

/*---- Start of Pre-Process Code  ----*/ 

%LET REPDT=&DMDQ_REPORT_START_DTTM;
/*---- End of Pre-Process Code  ----*/ 

%rcSet(&syserr); 
%rcSet(&sqlrc); 

/*==========================================================================* 
 * Step:            Начать модуль                         A5ELGGF9.AK00010Y * 
 * Transform:       Начать модуль                                           * 
 * Description:                                                             * 
 *==========================================================================*/ 

%let transformID = %quote(A5ELGGF9.AK00010Y);
%let trans_rc = 0;
%let etls_stepStartTime = %sysfunc(datetime(), datetime20.); 

%let _INPUT_count = 0; 
%let _OUTPUT_count = 0; 


/*****************************************************************
* ВЕРСИЯ:
*   $Id: transform_job_start.sas 1747 2012-08-01 11:26:13Z nesterenok $
*
******************************************************************
* НАЗНАЧЕНИЕ:
*   Регистрирует начало модуля ETL.
*
* ПАРАМЕТРЫ:
*   нет
*
******************************************************************/

%macro transform_job_start;

   /* Продолжаем поток (или создаем новый) */
   %local lmvStreamName;
   %if %sysfunc(sysexist(LSB_JOBNAME)) %then
      %let lmvStreamName = %scan(%sysfunc(sysget(LSB_JOBNAME)), 3, :);
   %else
      %let lmvStreamName = ;

   %job_continue_reg(mpJobType=STREAM, mpJobName=&lmvStreamName, mpPostEvent=N, mpForcedStart=Y);

   /* Для DI, начинаем поток заново, если старый был начат не сегодня */
   %if %length(&lmvStreamName) eq 0 and &STREAM_START_DT ne %sysfunc(today()) %then %do;
      %job_start_reg(mpJobType=STREAM, mpParentJobId=, mpJobName=&lmvStreamName.);
   %end;

   /* Начинаем модуль */
   %job_start_reg(mpJobType=JOB, mpParentJobId=&STREAM_ID, mpJobName=&ETLS_JobName.);

%mend transform_job_start;

%transform_job_start;


%rcSet(&syserr); 
%rcSet(&sysrc); 
%rcSet(&sqlrc); 



/**  Step end Начать модуль **/

/*==========================================================================* 
 * Step:            Очистить таблицу                      A5ELGGF9.AK00010Z * 
 * Transform:       Очистить таблицу                                        * 
 * Description:                                                             * 
 *                                                                          * 
 * Target Table:    DQ_DRVT_DWH_DM - dm_dq.DQ_DRVT_DWH_DM A5ELGGF9.AE000049 * 
 *==========================================================================*/ 

%let transformID = %quote(A5ELGGF9.AK00010Z);
%let trans_rc = 0;
%let etls_stepStartTime = %sysfunc(datetime(), datetime20.); 

%let _INPUT_count = 0; 
%let _OUTPUT_count = 1; 
%let _OUTPUT = dm_dq.DQ_DRVT_DWH_DM;
%let _OUTPUT_connect =  DEFER=YES PATH=DWH.IMB.RU AUTHDOMAIN="OraAuth_DM_DQ" 
;
%let _OUTPUT_engine = ORACLE;
%let _OUTPUT_memtype = DATA;
%let _OUTPUT_options = %nrquote();
%let _OUTPUT_alter = %nrquote();
%let _OUTPUT_path = %nrquote(/DWH_DMDQ_REP/Marts/DQ_DRVT/DQ_DRVT_DWH_DM%(Table%));
%let _OUTPUT_type = 1;
%let _OUTPUT_label = %nrquote();
/* List of target columns to keep  */ 
%let _OUTPUT_keep = REPORTCODE REPORTDATE FRONTKDEALID FRONTFDEALID DEALID 
        INSTRUMENTTYPECD DEALDATE ADDITIONALINFORMATION STARTDATE NEXTDATE 
        ENDDATE LEGNUMBER VALUEFRS VALUESEC;

%let tpOut = dm_dq.DQ_DRVT_DWH_DM;
%let tpOut_connect =  DEFER=YES PATH=DWH.IMB.RU AUTHDOMAIN="OraAuth_DM_DQ" 
;
%let tpOut_engine = ORACLE;
%let tpOut_memtype = DATA;
%let tpOut_options = %nrquote();
%let tpOut_alter = %nrquote();
%let tpOut_path = %nrquote(/DWH_DMDQ_REP/Marts/DQ_DRVT/DQ_DRVT_DWH_DM%(Table%));
%let tpOut_type = 1;
%let tpOut_label = %nrquote();
/* List of target columns to keep  */ 
%let tpOut_keep = REPORTCODE REPORTDATE FRONTKDEALID FRONTFDEALID DEALID 
        INSTRUMENTTYPECD DEALDATE ADDITIONALINFORMATION STARTDATE NEXTDATE 
        ENDDATE LEGNUMBER VALUEFRS VALUESEC;


%let tpWhere = %nrquote(REPORTCODE = %'П-08%' AND REPORTDATE = &DMDQ_REPORT_START_DTTM);

/* List of target columns to keep  */ 
%let _keep = REPORTCODE REPORTDATE FRONTKDEALID FRONTFDEALID DEALID 
        INSTRUMENTTYPECD DEALDATE ADDITIONALINFORMATION STARTDATE NEXTDATE 
        ENDDATE LEGNUMBER VALUEFRS VALUESEC;
/* List of target columns to keep  */ 
%let keep = REPORTCODE REPORTDATE FRONTKDEALID FRONTFDEALID DEALID 
        INSTRUMENTTYPECD DEALDATE ADDITIONALINFORMATION STARTDATE NEXTDATE 
        ENDDATE LEGNUMBER VALUEFRS VALUESEC;
/*****************************************************************
* ВЕРСИЯ:
*   $Id: transform_table_delete.sas 2142 2012-08-17 14:15:09Z nesterenok $
*
******************************************************************
* НАЗНАЧЕНИЕ:
*   Удаляет из указанной таблицы записи.
*
* ПАРАМЕТРЫ:
*   tpOut                  + имя целевой таблицы, которая будет очищена
*   tpWhere                - условие отбора записей под удаление
*                            по умолчанию отсутствует, т.е. удаляются все записи
*
******************************************************************/

%macro transform_table_delete;

   /* Удаляем записи */
   /* TODO: truncate */
   proc sql;
      delete from &tpOut
      %if %length(&tpWhere) gt 0 %then %do;
         where (%unquote(&tpWhere))
      %end;
      ;
   quit;
   %error_check (mpStepType=SQL);

%mend transform_table_delete;

%transform_table_delete;


%rcSet(&syserr); 
%rcSet(&sysrc); 
%rcSet(&sqlrc); 



/**  Step end Очистить таблицу **/

/*==========================================================================* 
 * Step:            Очистить таблицу                      A5ELGGF9.AK000110 * 
 * Transform:       Очистить таблицу                                        * 
 * Description:                                                             * 
 *                                                                          * 
 * Target Table:    DQ_DRVT_REPORT_PRC -                  A5ELGGF9.AE00004E * 
 *                   dm_dq.DQ_DRVT_REPORT_PRC                               * 
 *==========================================================================*/ 

%let transformID = %quote(A5ELGGF9.AK000110);
%let trans_rc = 0;
%let etls_stepStartTime = %sysfunc(datetime(), datetime20.); 

%let _INPUT_count = 0; 
%let _OUTPUT_count = 1; 
%let _OUTPUT = dm_dq.DQ_DRVT_REPORT_PRC;
%let _OUTPUT_connect =  DEFER=YES PATH=DWH.IMB.RU AUTHDOMAIN="OraAuth_DM_DQ" 
;
%let _OUTPUT_engine = ORACLE;
%let _OUTPUT_memtype = DATA;
%let _OUTPUT_options = %nrquote();
%let _OUTPUT_alter = %nrquote();
%let _OUTPUT_path = %nrquote(/DWH_DMDQ_REP/Marts/DQ_DRVT/DQ_DRVT_REPORT_PRC%(Table%));
%let _OUTPUT_type = 1;
%let _OUTPUT_label = %nrquote();
/* List of target columns to keep  */ 
%let _OUTPUT_keep = REP_DT REP_ID PRC CNT_ALL CNT_ERR DWH_DT;

%let tpOut = dm_dq.DQ_DRVT_REPORT_PRC;
%let tpOut_connect =  DEFER=YES PATH=DWH.IMB.RU AUTHDOMAIN="OraAuth_DM_DQ" 
;
%let tpOut_engine = ORACLE;
%let tpOut_memtype = DATA;
%let tpOut_options = %nrquote();
%let tpOut_alter = %nrquote();
%let tpOut_path = %nrquote(/DWH_DMDQ_REP/Marts/DQ_DRVT/DQ_DRVT_REPORT_PRC%(Table%));
%let tpOut_type = 1;
%let tpOut_label = %nrquote();
/* List of target columns to keep  */ 
%let tpOut_keep = REP_DT REP_ID PRC CNT_ALL CNT_ERR DWH_DT;


%let tpWhere = %nrquote(REP_ID = 8 AND REP_DT = &DMDQ_REPORT_START_DTTM);

/* List of target columns to keep  */ 
%let _keep = REP_DT REP_ID PRC CNT_ALL CNT_ERR DWH_DT;
/* List of target columns to keep  */ 
%let keep = REP_DT REP_ID PRC CNT_ALL CNT_ERR DWH_DT;
/*****************************************************************
* ВЕРСИЯ:
*   $Id: transform_table_delete.sas 2142 2012-08-17 14:15:09Z nesterenok $
*
******************************************************************
* НАЗНАЧЕНИЕ:
*   Удаляет из указанной таблицы записи.
*
* ПАРАМЕТРЫ:
*   tpOut                  + имя целевой таблицы, которая будет очищена
*   tpWhere                - условие отбора записей под удаление
*                            по умолчанию отсутствует, т.е. удаляются все записи
*
******************************************************************/

%macro transform_table_delete;

   /* Удаляем записи */
   /* TODO: truncate */
   proc sql;
      delete from &tpOut
      %if %length(&tpWhere) gt 0 %then %do;
         where (%unquote(&tpWhere))
      %end;
      ;
   quit;
   %error_check (mpStepType=SQL);

%mend transform_table_delete;

%transform_table_delete;


%rcSet(&syserr); 
%rcSet(&sysrc); 
%rcSet(&sqlrc); 



/**  Step end Очистить таблицу **/

/*==========================================================================* 
 * Step:            Extract                               A5ELGGF9.AK000111 * 
 * Transform:       Extract                                                 * 
 * Description:                                                             * 
 *                                                                          * 
 * Source Table:    DEAL - DM_DRVT.DEAL                   A5LX14I5.A9000014 * 
 * Target Table:    Extract - work.W1MCORD8W              A5ELGGF9.AF0000FO * 
 *==========================================================================*/ 

%let transformID = %quote(A5ELGGF9.AK000111);
%let trans_rc = 0;
%let etls_stepStartTime = %sysfunc(datetime(), datetime20.); 

%let etls_recnt = 0;
%macro etls_recordCheck; 
   %let etls_recCheckExist = %eval(%sysfunc(exist(DM_DRVT.DEAL, DATA)) or 
         %sysfunc(exist(DM_DRVT.DEAL, VIEW))); 
   
   %if (&etls_recCheckExist) %then
   %do;
      proc sql noprint;
         select count(*) into :etls_recnt from DM_DRVT.DEAL;
      quit;
   %end;
%mend etls_recordCheck;
%etls_recordCheck;

%let SYSLAST = %nrquote(DM_DRVT.DEAL); 

%let SYS_SQL_IP_SPEEDO = Y;
%let SYS_SQL_MAPPUTTO = sas_put;
%let SYS_SQLREDUCEPUT = DBMS;
%global etls_sql_pushDown;
%let etls_sql_pushDown = -1;
option DBIDIRECTEXEC;

/*---- Map the columns  ----*/ 
proc datasets lib = work nolist nowarn memtype = (data view);
   delete W1MCORD8W;
quit;

%put %str(NOTE: Mapping columns ...);
proc sql;
   create view work.W1MCORD8W as
      select
         DEALRK,
         FRONTKDEALID,
         FRONTFDEALID,
         DEALDATE,
         DEALID1,
         INTERESTRATETYPECD1,
         DEALID2,
         INTERESTRATETYPECD2,
         INSTRUMENTTYPECD length = 32   
            format = $32.
            informat = $32.
   from &SYSLAST
      where INSTRUMENTTYPECD in ('IRS', 'CIS')
         AND
         VALID_FROM_DTTM <= &REPDT < VALID_TO_DTTM
   ;
quit;

%let SYSLAST = work.W1MCORD8W;

%global etls_sql_pushDown;
%let etls_sql_pushDown = &sys_sql_ip_all;

%rcSet(&sqlrc); 



/**  Step end Extract **/

/*==========================================================================* 
 * Step:            SQL Join                              A5ELGGF9.AK000112 * 
 * Transform:       Join                                                    * 
 * Description:                                                             * 
 *                                                                          * 
 * Source Tables:   Extract - work.W1MCORD8W              A5ELGGF9.AF0000FO * 
 *                  INTERESTRATETYPE -                    A5LX14I5.A900001E * 
 *                   DM_DRVT.INTERESTRATETYPE                               * 
 * Target Table:    SQL Join - work.W1MCP6IJX             A5ELGGF9.AF0000FP * 
 *==========================================================================*/ 

%let transformID = %quote(A5ELGGF9.AK000112);
%let trans_rc = 0;
%let etls_stepStartTime = %sysfunc(datetime(), datetime20.); 

%let etls_recnt = -1;
%let SYS_SQL_IP_SPEEDO = Y;
%let SYS_SQL_MAPPUTTO = sas_put;
%let SYS_SQLREDUCEPUT = DBMS;
%global etls_sql_pushDown;
%let etls_sql_pushDown = -1;
option DBIDIRECTEXEC;

proc datasets lib = work nolist nowarn memtype = (data view);
   delete W1MCP6IJX;
quit;

proc sql;
   create table work.W1MCP6IJX as
   select
      W1MCORD8W.DEALRK length = 8   
         format = 21.
         informat = 21.
         label = 'DEALRK',
      'П-08' as REPORTCODE length = 5   
         format = $5.
         informat = $5.
         label = 'REPORTCODE',
      &REPDT as REPORTDATE length = 8   
         format = DATETIME20.
         informat = DATETIME20.
         label = 'REPORTDATE',
      W1MCORD8W.FRONTKDEALID length = 10   
         format = $10.
         informat = $10.
         label = 'FRONTKDEALID',
      W1MCORD8W.FRONTFDEALID length = 10   
         format = $10.
         informat = $10.
         label = 'FRONTFDEALID',
      case 
         when missing(W1MCORD8W.DEALID1)
            then W1MCORD8W.DEALID2
         when missing(W1MCORD8W.DEALID2)
            then W1MCORD8W.DEALID1
         when not missing(W1MCORD8W.DEALID1) AND not missing(W1MCORD8W.DEALID2)
            then cats(W1MCORD8W.DEALID1, ',', W1MCORD8W.DEALID2)
      else " "
      end as DEALID length = 100   
         format = $100.
         informat = $100.
         label = 'DEALID',
      strip(W1MCORD8W.INSTRUMENTTYPECD ) as INSTRUMENTTYPECD length = 3   
         format = $3.
         informat = $3.
         label = 'INSTRUMENTTYPECD',
      W1MCORD8W.DEALDATE length = 8   
         format = DATETIME20.
         informat = DATETIME20.
         label = 'DEALDATE',
      INTERESTRATETYPE.INTERESTRATETYPE as ADDITIONALINFORMATION length = 255   
         format = $255.
         informat = $255.
         label = 'ADDITIONALINFORMATION'
   from
      work.W1MCORD8W left join 
      DM_DRVT.INTERESTRATETYPE
         on
         (
            W1MCORD8W.INTERESTRATETYPECD1 = INTERESTRATETYPE.INTERESTRATETYPECD
         ) left join 
      DM_DRVT.INTERESTRATETYPE as INTERESTRATETYPE2
         on
         (
            W1MCORD8W.INTERESTRATETYPECD2 = INTERESTRATETYPE2.INTERESTRATETYPECD
         )
   where
      INTERESTRATETYPE.INTERESTRATETYPE = INTERESTRATETYPE2.INTERESTRATETYPE
   ;
quit;

%global etls_sql_pushDown;
%let etls_sql_pushDown = &sys_sql_ip_all;

%rcSet(&sqlrc); 



/**  Step end SQL Join **/

/*==========================================================================* 
 * Step:            Table Loader                          A5ELGGF9.AK000113 * 
 * Transform:       Table Loader (Version 2.1)                              * 
 * Description:                                                             * 
 *                                                                          * 
 * Source Table:    SQL Join - work.W1MCP6IJX             A5ELGGF9.AF0000FP * 
 * Target Table:    DQ_DRVT_DWH_DM - dm_dq.DQ_DRVT_DWH_DM A5ELGGF9.AE000049 * 
 *==========================================================================*/ 

%let transformID = %quote(A5ELGGF9.AK000113);
%let trans_rc = 0;
%let etls_stepStartTime = %sysfunc(datetime(), datetime20.); 

%let SYSLAST = %nrquote(work.W1MCP6IJX); 

%let SYS_SQL_IP_SPEEDO = Y;
%let SYS_SQL_MAPPUTTO = sas_put;
%let SYS_SQLREDUCEPUT = DBMS;
%global etls_sql_pushDown;
%let etls_sql_pushDown = -1;
option DBIDIRECTEXEC;

%global etls_tableExist;
%global etls_numIndex;
%global etls_lastTable;
%let etls_tableExist = -1; 
%let etls_numIndex = -1; 
%let etls_lastTable = &SYSLAST; 

/*---- Define load data macro  ----*/ 

/* --------------------------------------------------------------
   Load Technique Selection: AppendToExisting - AppendProc
   Constraint and index action selections: 'ASIS','ASIS','ASIS','ASIS'
   Additional options selections... 
      Set unmapped to missing on updates: false 
   -------------------------------------------------------------- */
%macro etls_loader;

   %let etls_tableOptions = ;
   
   /*---- Map the columns  ----*/ 
   proc datasets lib = work nolist nowarn memtype = (data view);
      delete WJ2YH25;
   quit;
   
   data _null_;
      put "NOTE: The following column(s) do not have a column mapping, so the"
           " value(s) will be set to missing: STARTDATE, NEXTDATE, ENDDATE,"
           " LEGNUMBER, VALUEFRS, VALUESEC";
   run;
   
   %put %str(NOTE: Mapping columns ...);
   proc sql;
      create view work.WJ2YH25 as
         select
            REPORTCODE,
            REPORTDATE,
            FRONTKDEALID,
            FRONTFDEALID,
            DEALID,
            INSTRUMENTTYPECD,
            DEALDATE,
            ADDITIONALINFORMATION,
            . as STARTDATE length = 8
               format = DATETIME20.
               informat = DATETIME20.,
            . as NEXTDATE length = 8
               format = DATETIME20.
               informat = DATETIME20.,
            . as ENDDATE length = 8
               format = DATETIME20.
               informat = DATETIME20.,
            "" as LEGNUMBER length = 1
               format = $1.
               informat = $1.,
            "" as VALUEFRS length = 20
               format = $20.
               informat = $20.,
            "" as VALUESEC length = 20
               format = $20.
               informat = $20.
      from &etls_lastTable
      ;
   quit;
   
   %let SYSLAST = work.WJ2YH25;
   
   %let etls_lastTable = &SYSLAST; 
   %let etls_tableOptions = ; 
   
   /* Determine if the target table exists  */ 
   %let etls_tableExist = %eval(%sysfunc(exist(dm_dq.DQ_DRVT_DWH_DM, DATA)) or 
         %sysfunc(exist(dm_dq.DQ_DRVT_DWH_DM, VIEW))); 
   
   /*---- Create a new table  ----*/ 
   %if (&etls_tableExist eq 0) %then 
   %do;  /* if table does not exist  */ 
   
      %put %str(NOTE: Creating table ...);
      
      data dm_dq.DQ_DRVT_DWH_DM
              (dbnull = (
                         REPORTCODE = YES
                         REPORTDATE = YES
                         FRONTKDEALID = YES
                         FRONTFDEALID = YES
                         DEALID = YES
                         INSTRUMENTTYPECD = YES
                         DEALDATE = YES
                         ADDITIONALINFORMATION = YES
                         STARTDATE = YES
                         NEXTDATE = YES
                         ENDDATE = YES
                         LEGNUMBER = YES
                         VALUEFRS = YES
                         VALUESEC = YES));
         attrib REPORTCODE length = $5
            format = $5.
            informat = $5.
            label = 'REPORTCODE'; 
         attrib REPORTDATE length = 8
            format = DATETIME20.
            informat = DATETIME20.
            label = 'REPORTDATE'; 
         attrib FRONTKDEALID length = $10
            format = $10.
            informat = $10.
            label = 'FRONTKDEALID'; 
         attrib FRONTFDEALID length = $10
            format = $10.
            informat = $10.
            label = 'FRONTFDEALID'; 
         attrib DEALID length = $100
            format = $100.
            informat = $100.
            label = 'DEALID'; 
         attrib INSTRUMENTTYPECD length = $3
            format = $3.
            informat = $3.
            label = 'INSTRUMENTTYPECD'; 
         attrib DEALDATE length = 8
            format = DATETIME20.
            informat = DATETIME20.
            label = 'DEALDATE'; 
         attrib ADDITIONALINFORMATION length = $255
            format = $255.
            informat = $255.
            label = 'ADDITIONALINFORMATION'; 
         attrib STARTDATE length = 8
            format = DATETIME20.
            informat = DATETIME20.
            label = 'STARTDATE'; 
         attrib NEXTDATE length = 8
            format = DATETIME20.
            informat = DATETIME20.
            label = 'NEXTDATE'; 
         attrib ENDDATE length = 8
            format = DATETIME20.
            informat = DATETIME20.
            label = 'ENDDATE'; 
         attrib LEGNUMBER length = $1
            format = $1.
            informat = $1.
            label = 'LEGNUMBER'; 
         attrib VALUEFRS length = $20
            format = $20.
            informat = $20.
            label = 'VALUEFRS'; 
         attrib VALUESEC length = $20
            format = $20.
            informat = $20.
            label = 'VALUESEC'; 
         call missing(of _all_);
         stop;
      run;
      
      %rcSet(&syserr); 
      
   %end;  /* if table does not exist  */ 
   
   /*---- Append  ----*/ 
   %put %str(NOTE: Appending data ...);
   
   proc append base = dm_dq.DQ_DRVT_DWH_DM 
      data = &etls_lastTable (&etls_tableOptions)  force ; 
    run; 
   
   %rcSet(&syserr); 
   
   proc datasets lib = work nolist nowarn memtype = (data view);
      delete WJ2YH25;
   quit;
   
%mend etls_loader;
%etls_loader;

%let etls_recnt = 0;
%macro etls_recordCheck; 
   %let etls_recCheckExist = %eval(%sysfunc(exist(dm_dq.DQ_DRVT_DWH_DM, DATA)) or 
         %sysfunc(exist(dm_dq.DQ_DRVT_DWH_DM, VIEW))); 
   
   %if (&etls_recCheckExist) %then
   %do;
      proc sql noprint;
         select count(*) into :etls_recnt from dm_dq.DQ_DRVT_DWH_DM;
      quit;
   %end;
%mend etls_recordCheck;
%etls_recordCheck;



/**  Step end Table Loader **/

/*==========================================================================* 
 * Step:            SQL Join                              A5ELGGF9.AK000114 * 
 * Transform:       Join                                                    * 
 * Description:                                                             * 
 *                                                                          * 
 * Source Tables:   SQL Join - work.W1MCP6IJX             A5ELGGF9.AF0000FP * 
 *                  INSTRUMENTTYPE -                      A5LX14I5.A900001B * 
 *                   DM_DRVT.INSTRUMENTTYPE                                 * 
 * Target Table:    SQL Join - work.W1MD3NTHB             A5ELGGF9.AF0000FQ * 
 *==========================================================================*/ 

%let transformID = %quote(A5ELGGF9.AK000114);
%let trans_rc = 0;
%let etls_stepStartTime = %sysfunc(datetime(), datetime20.); 

%let etls_recCheckExist = 0; 
%let etls_recnt = 0; 
%macro etls_recordCheck; 
   %let etls_recCheckExist = %eval(%sysfunc(exist(work.W1MCP6IJX, DATA)) or 
         %sysfunc(exist(work.W1MCP6IJX, VIEW))); 
   
   %if (&etls_recCheckExist) %then
   %do;
      %local etls_syntaxcheck; 
      %let etls_syntaxcheck = %sysfunc(getoption(syntaxcheck)); 
      /* Turn off syntaxcheck option to perform following steps  */ 
      options nosyntaxcheck;
      
      proc contents data = work.W1MCP6IJX out = work.etls_contents(keep = nobs) noprint; 
      run; 
      
      data _null_; 
         set work.etls_contents (obs = 1); 
         call symput("etls_recnt", left(put(nobs,32.))); 
      run;
      
      proc datasets lib = work nolist nowarn memtype = (data view);
         delete etls_contents;
      quit;
      
      /* Reset syntaxcheck option to previous setting  */ 
      options &etls_syntaxcheck; 
   %end;
%mend etls_recordCheck;
%etls_recordCheck;

%let SYS_SQL_IP_SPEEDO = Y;
%let SYS_SQL_MAPPUTTO = sas_put;
%let SYS_SQLREDUCEPUT = DBMS;
%global etls_sql_pushDown;
%let etls_sql_pushDown = -1;
option DBIDIRECTEXEC;

proc datasets lib = work nolist nowarn memtype = (data view);
   delete W1MD3NTHB;
quit;

proc sql;
   create table work.W1MD3NTHB as
   select distinct
      W1MCP6IJX.INSTRUMENTTYPECD length = 3   
         format = $3.
         informat = $3.
         label = 'INSTRUMENTTYPECD',
      INSTRUMENTTYPE.INSTRUMENTTYPE length = 100   
         format = $100.
         informat = $100.
         label = 'INSTRUMENTTYPE'
   from
      work.W1MCP6IJX left join 
      DM_DRVT.INSTRUMENTTYPE
         on
         (
            W1MCP6IJX.INSTRUMENTTYPECD = INSTRUMENTTYPE.INSTRUMENTTYPECD
         )
   where
      W1MCP6IJX.INSTRUMENTTYPECD NOT IS MISSING 
   ;
quit;

%global etls_sql_pushDown;
%let etls_sql_pushDown = &sys_sql_ip_all;

%rcSet(&sqlrc); 



/**  Step end SQL Join **/

/*==========================================================================* 
 * Step:            Table Loader                          A5ELGGF9.AK000115 * 
 * Transform:       Table Loader (Version 2.1)                              * 
 * Description:                                                             * 
 *                                                                          * 
 * Source Table:    SQL Join - work.W1MD3NTHB             A5ELGGF9.AF0000FQ * 
 * Target Table:    DQ_DRVT_INSTRUMENTTYPE -              A5ELGGF9.AE00004A * 
 *                   dm_dq.DQ_DRVT_INSTRUMENTTYPE                           * 
 *==========================================================================*/ 

%let transformID = %quote(A5ELGGF9.AK000115);
%let trans_rc = 0;
%let etls_stepStartTime = %sysfunc(datetime(), datetime20.); 

%let SYSLAST = %nrquote(work.W1MD3NTHB); 

%let SYS_SQL_IP_SPEEDO = Y;
%let SYS_SQL_MAPPUTTO = sas_put;
%let SYS_SQLREDUCEPUT = DBMS;
%global etls_sql_pushDown;
%let etls_sql_pushDown = -1;
option DBIDIRECTEXEC;

%global etls_tableExist;
%global etls_numIndex;
%global etls_lastTable;
%let etls_tableExist = -1; 
%let etls_numIndex = -1; 
%let etls_lastTable = &SYSLAST; 

/*---- Define load data macro  ----*/ 

/* --------------------------------------------------------------
   Load Technique Selection: Update - Matching=SQLSet, New=AppendProc
   Blanks may replace non-blanks: false
   Constraint and index action selections: 'ASIS','ASIS','ASIS','ASIS'
   Additional options selections... 
      Set unmapped to missing on updates: false 
   -------------------------------------------------------------- */
%macro etls_loader;

   %let etls_tableOptions = ;
   
   /* Determine if the target table exists  */ 
   %let etls_tableExist = %eval(%sysfunc(exist(dm_dq.DQ_DRVT_INSTRUMENTTYPE, DATA)) or 
         %sysfunc(exist(dm_dq.DQ_DRVT_INSTRUMENTTYPE, VIEW))); 
   
   %let etls_hasUpdateIndex=0; 
   
   /*---- Create a new table  ----*/ 
   %if (&etls_tableExist eq 0) %then 
   %do;  /* if table does not exist  */ 
   
      %put %str(NOTE: Creating table ...);
      
      data dm_dq.DQ_DRVT_INSTRUMENTTYPE
              (dbnull = (
                         INSTRUMENTTYPECD = YES
                         INSTRUMENTTYPE = YES));
         attrib INSTRUMENTTYPECD length = $3
            format = $3.
            informat = $3.
            label = 'INSTRUMENTTYPECD'; 
         attrib INSTRUMENTTYPE length = $100
            format = $100.
            informat = $100.
            label = 'INSTRUMENTTYPE'; 
         call missing(of _all_);
         stop;
      run;
      
      %rcSet(&syserr); 
      
   %end;  /* if table does not exist  */ 
   
   %let etls_recCheckExist = 0; 
   %let etls_targetHasRows = 0; 
   %macro etls_recordCheck; 
      %let etls_recCheckExist = %eval(%sysfunc(exist(dm_dq.DQ_DRVT_INSTRUMENTTYPE, DATA)) or 
            %sysfunc(exist(dm_dq.DQ_DRVT_INSTRUMENTTYPE, VIEW))); 
      
      %if (&etls_recCheckExist) %then
      %do;
         %local etls_syntaxcheck; 
         %let etls_syntaxcheck = %sysfunc(getoption(syntaxcheck)); 
         /* Turn off syntaxcheck option to perform following steps  */ 
         options nosyntaxcheck;
         
         data _null_; 
            set dm_dq.DQ_DRVT_INSTRUMENTTYPE( obs=1 ); 
            call symput("etls_targetHasRows",'1'); 
         run; 
         /* Reset syntaxcheck option to previous setting  */ 
         options &etls_syntaxcheck; 
      %end;
   %mend etls_recordCheck;
   %etls_recordCheck;
   
   
   %if (&etls_targetHasRows) %then 
   %do;  /* if has rows */ 
      proc sql ; 
         /* update existing records in the master table  */ 
         update dm_dq.DQ_DRVT_INSTRUMENTTYPE as m
            set INSTRUMENTTYPE = (select case when t.INSTRUMENTTYPE="" then m.INSTRUMENTTYPE else t.INSTRUMENTTYPE end from &etls_lastTable as t 
                                where m.INSTRUMENTTYPECD = t.INSTRUMENTTYPECD)
               where exists (select * from &etls_lastTable as t
                                   where m.INSTRUMENTTYPECD = t.INSTRUMENTTYPECD);
         
         /* create a temporary table of new records from the transaction table  */ 
         create table etls_newrecords as 
            select * 
               from &etls_lastTable as t 
                  where not exists 
                     (select * from dm_dq.DQ_DRVT_INSTRUMENTTYPE
                   as m 
                                      where m.INSTRUMENTTYPECD = t.INSTRUMENTTYPECD)
         ; 
         
      quit;
      
      %let etls_lastTable = &SYSLAST;
      
      %let etls_tableOptions = ; 
      
      %global etls_sql_pushDown;
      %let etls_sql_pushDown = &sys_sql_ip_all;
      
      %rcSet(&sqlrc); 
      
   %end; /* if has rows */ 
   
   /*---- Append  ----*/ 
   %put %str(NOTE: Appending data ...);
   
   proc append base = dm_dq.DQ_DRVT_INSTRUMENTTYPE 
      data = &etls_lastTable (&etls_tableOptions)  force ; 
    run; 
   
   %rcSet(&syserr); 
   
   proc datasets lib = work nolist nowarn memtype = (data view);
      delete etls_newrecords;
   quit;
   
%mend etls_loader;
%etls_loader;

%let etls_recnt = 0;
%macro etls_recordCheck; 
   %let etls_recCheckExist = %eval(%sysfunc(exist(dm_dq.DQ_DRVT_INSTRUMENTTYPE, DATA)) or 
         %sysfunc(exist(dm_dq.DQ_DRVT_INSTRUMENTTYPE, VIEW))); 
   
   %if (&etls_recCheckExist) %then
   %do;
      proc sql noprint;
         select count(*) into :etls_recnt from dm_dq.DQ_DRVT_INSTRUMENTTYPE;
      quit;
   %end;
%mend etls_recordCheck;
%etls_recordCheck;



/**  Step end Table Loader **/

/*==========================================================================* 
 * Step:            User Written                          A5ELGGF9.AK000116 * 
 * Transform:       User Written                                            * 
 * Description:     Сбор статистики                                         * 
 *                                                                          * 
 * Source Tables:   Extract - work.W1MCORD8W              A5ELGGF9.AF0000FO * 
 *                  SQL Join - work.W1MCP6IJX             A5ELGGF9.AF0000FP * 
 *                  ETL_JOB - etl_sys.ETL_JOB             A59S11RW.AE00001A * 
 * Target Table:    User Written - work.W1N77CG5U         A5ELGGF9.AF0000FR * 
 *                                                                          * 
 * User Written:    SourceCode                                              * 
 *==========================================================================*/ 

%let transformID = %quote(A5ELGGF9.AK000116);
%let trans_rc = 0;
%let etls_stepStartTime = %sysfunc(datetime(), datetime20.); 

%let etls_recnt = -1;
%let _INPUT_count = 3;
%let _INPUT = work.W1MCORD8W;
%let _INPUT_connect = ;
%let _INPUT_engine = ;
%let _INPUT_memtype = VIEW;
%let _INPUT_options = %nrquote();
%let _INPUT_alter = %nrquote();
%let _INPUT_path = %nrquote(/Extract_A5ELGGF9.AF0000FO%(WorkTable%));
%let _INPUT_type = 1;
%let _INPUT_label = %nrquote();

%let _INPUT1 = work.W1MCORD8W;
%let _INPUT1_connect = ;
%let _INPUT1_engine = ;
%let _INPUT1_memtype = VIEW;
%let _INPUT1_options = %nrquote();
%let _INPUT1_alter = %nrquote();
%let _INPUT1_path = %nrquote(/Extract_A5ELGGF9.AF0000FO%(WorkTable%));
%let _INPUT1_type = 1;
%let _INPUT1_label = %nrquote();

%let _INPUT2 = work.W1MCP6IJX;
%let _INPUT2_connect = ;
%let _INPUT2_engine = ;
%let _INPUT2_memtype = DATA;
%let _INPUT2_options = %nrquote();
%let _INPUT2_alter = %nrquote();
%let _INPUT2_path = %nrquote(/SQL Join_A5ELGGF9.AF0000FP%(WorkTable%));
%let _INPUT2_type = 1;
%let _INPUT2_label = %nrquote();

%let _INPUT3 = etl_sys.ETL_JOB;
%let _INPUT3_connect =  PATH=DWH.IMB.RU AUTHDOMAIN="OraAuth_ETL_SYS" 
;
%let _INPUT3_engine = ORACLE;
%let _INPUT3_memtype = DATA;
%let _INPUT3_options = %nrquote();
%let _INPUT3_alter = %nrquote();
%let _INPUT3_path = %nrquote(/DWH_DWHDDS_SYS/Tables/ETL_SYS/ETL_JOB%(Table%));
%let _INPUT3_type = 1;
%let _INPUT3_label = %nrquote();

%let _OUTPUT_count = 1;
%let _OUTPUT = work.W1N77CG5U;
%let _OUTPUT_connect = ;
%let _OUTPUT_engine = ;
%let _OUTPUT_memtype = DATA;
%let _OUTPUT_options = %nrquote();
%let _OUTPUT_alter = %nrquote();
%let _OUTPUT_path = %nrquote(/User Written_A5ELGGF9.AF0000FR%(WorkTable%));
%let _OUTPUT_type = 1;
%let _OUTPUT_label = %nrquote();
/* List of target columns to keep  */ 
%let _OUTPUT_keep = REP_DT REP_ID PRC CNT_ALL CNT_ERR DWH_DT;
%let _OUTPUT_col_count = 6;
%let _OUTPUT_col0_name = REP_DT;
%let _OUTPUT_col0_table = work.W1N77CG5U;
%let _OUTPUT_col0_length = 8;
%let _OUTPUT_col0_type = ;
%let _OUTPUT_col0_format = DATETIME20.;
%let _OUTPUT_col0_informat = ;
%let _OUTPUT_col0_label = %nrquote();
%let _OUTPUT_col0_exp = ;
%let _OUTPUT_col0_input_count = 0;
%let _OUTPUT_col1_name = REP_ID;
%let _OUTPUT_col1_table = work.W1N77CG5U;
%let _OUTPUT_col1_length = 8;
%let _OUTPUT_col1_type = ;
%let _OUTPUT_col1_format = ;
%let _OUTPUT_col1_informat = ;
%let _OUTPUT_col1_label = %nrquote();
%let _OUTPUT_col1_exp = ;
%let _OUTPUT_col1_input_count = 0;
%let _OUTPUT_col2_name = PRC;
%let _OUTPUT_col2_table = work.W1N77CG5U;
%let _OUTPUT_col2_length = 8;
%let _OUTPUT_col2_type = ;
%let _OUTPUT_col2_format = ;
%let _OUTPUT_col2_informat = ;
%let _OUTPUT_col2_label = %nrquote();
%let _OUTPUT_col2_exp = ;
%let _OUTPUT_col2_input_count = 0;
%let _OUTPUT_col3_name = CNT_ALL;
%let _OUTPUT_col3_table = work.W1N77CG5U;
%let _OUTPUT_col3_length = 8;
%let _OUTPUT_col3_type = ;
%let _OUTPUT_col3_format = ;
%let _OUTPUT_col3_informat = ;
%let _OUTPUT_col3_label = %nrquote();
%let _OUTPUT_col3_exp = ;
%let _OUTPUT_col3_input_count = 0;
%let _OUTPUT_col4_name = CNT_ERR;
%let _OUTPUT_col4_table = work.W1N77CG5U;
%let _OUTPUT_col4_length = 8;
%let _OUTPUT_col4_type = ;
%let _OUTPUT_col4_format = ;
%let _OUTPUT_col4_informat = ;
%let _OUTPUT_col4_label = %nrquote();
%let _OUTPUT_col4_exp = ;
%let _OUTPUT_col4_input_count = 0;
%let _OUTPUT_col5_name = DWH_DT;
%let _OUTPUT_col5_table = work.W1N77CG5U;
%let _OUTPUT_col5_length = 8;
%let _OUTPUT_col5_type = ;
%let _OUTPUT_col5_format = DATETIME20.;
%let _OUTPUT_col5_informat = ;
%let _OUTPUT_col5_label = %nrquote();
%let _OUTPUT_col5_exp = ;
%let _OUTPUT_col5_input_count = 0;

%let _OUTPUT1 = work.W1N77CG5U;
%let _OUTPUT1_connect = ;
%let _OUTPUT1_engine = ;
%let _OUTPUT1_memtype = DATA;
%let _OUTPUT1_options = %nrquote();
%let _OUTPUT1_alter = %nrquote();
%let _OUTPUT1_path = %nrquote(/User Written_A5ELGGF9.AF0000FR%(WorkTable%));
%let _OUTPUT1_type = 1;
%let _OUTPUT1_label = %nrquote();
/* List of target columns to keep  */ 
%let _OUTPUT1_keep = REP_DT REP_ID PRC CNT_ALL CNT_ERR DWH_DT;
%let _OUTPUT1_col_count = 6;
%let _OUTPUT1_col0_name = REP_DT;
%let _OUTPUT1_col0_table = work.W1N77CG5U;
%let _OUTPUT1_col0_length = 8;
%let _OUTPUT1_col0_type = ;
%let _OUTPUT1_col0_format = DATETIME20.;
%let _OUTPUT1_col0_informat = ;
%let _OUTPUT1_col0_label = %nrquote();
%let _OUTPUT1_col0_exp = ;
%let _OUTPUT1_col0_input_count = 0;
%let _OUTPUT1_col1_name = REP_ID;
%let _OUTPUT1_col1_table = work.W1N77CG5U;
%let _OUTPUT1_col1_length = 8;
%let _OUTPUT1_col1_type = ;
%let _OUTPUT1_col1_format = ;
%let _OUTPUT1_col1_informat = ;
%let _OUTPUT1_col1_label = %nrquote();
%let _OUTPUT1_col1_exp = ;
%let _OUTPUT1_col1_input_count = 0;
%let _OUTPUT1_col2_name = PRC;
%let _OUTPUT1_col2_table = work.W1N77CG5U;
%let _OUTPUT1_col2_length = 8;
%let _OUTPUT1_col2_type = ;
%let _OUTPUT1_col2_format = ;
%let _OUTPUT1_col2_informat = ;
%let _OUTPUT1_col2_label = %nrquote();
%let _OUTPUT1_col2_exp = ;
%let _OUTPUT1_col2_input_count = 0;
%let _OUTPUT1_col3_name = CNT_ALL;
%let _OUTPUT1_col3_table = work.W1N77CG5U;
%let _OUTPUT1_col3_length = 8;
%let _OUTPUT1_col3_type = ;
%let _OUTPUT1_col3_format = ;
%let _OUTPUT1_col3_informat = ;
%let _OUTPUT1_col3_label = %nrquote();
%let _OUTPUT1_col3_exp = ;
%let _OUTPUT1_col3_input_count = 0;
%let _OUTPUT1_col4_name = CNT_ERR;
%let _OUTPUT1_col4_table = work.W1N77CG5U;
%let _OUTPUT1_col4_length = 8;
%let _OUTPUT1_col4_type = ;
%let _OUTPUT1_col4_format = ;
%let _OUTPUT1_col4_informat = ;
%let _OUTPUT1_col4_label = %nrquote();
%let _OUTPUT1_col4_exp = ;
%let _OUTPUT1_col4_input_count = 0;
%let _OUTPUT1_col5_name = DWH_DT;
%let _OUTPUT1_col5_table = work.W1N77CG5U;
%let _OUTPUT1_col5_length = 8;
%let _OUTPUT1_col5_type = ;
%let _OUTPUT1_col5_format = DATETIME20.;
%let _OUTPUT1_col5_informat = ;
%let _OUTPUT1_col5_label = %nrquote();
%let _OUTPUT1_col5_exp = ;
%let _OUTPUT1_col5_input_count = 0;

/*---- Start of User Written Code  ----*/ 

proc sql;
/*Кол-во всех уникальных деривативных сделок*/
	select count(distinct DEALRK) into :CNT_ALL from &_INPUT1;
/*Кол-во ошибочных сделок*/
	select count(distinct DEALRK) into :CNT_ERR from &_INPUT2;
/*Дата успешного выполнения процесса в DWH*/
	select end_dttm into :DWH_DT from &_INPUT3 where JOB_ID = (
  select MAX(job_id) 
  from &_INPUT3 
  where upper(job_nm) = '401_021_MART_DEAL' and success_flg = 'Y'
  );
quit;
%error_check(mpStepType=SQL);

data &_OUTPUT1;
	attrib
		REP_DT length = 8 format = DATETIME20.
		REP_ID length = 8
		PRC length =8
		CNT_ALL length=8
		CNT_ERR length = 8
		DWH_DT length = 8 format = DATETIME20.
	;

	REP_DT = &REPDT.;
	REP_ID = 8;
	PRC = DIVIDE(&CNT_ERR. , &CNT_ALL.) * 100;
	if missing(PRC) then PRC=0;
	CNT_ALL = &CNT_ALL.;
	CNT_ERR = &CNT_ERR.;
	DWH_DT = "&DWH_DT."dt;
run;
%error_check(mpStepType=DATA);
/*---- End of User Written Code  ----*/ 

%rcSet(&syserr); 
%rcSet(&sqlrc); 


/**  Step end User Written **/

/*==========================================================================* 
 * Step:            Table Loader                          A5ELGGF9.AK000117 * 
 * Transform:       Table Loader (Version 2.1)                              * 
 * Description:                                                             * 
 *                                                                          * 
 * Source Table:    User Written - work.W1N77CG5U         A5ELGGF9.AF0000FR * 
 * Target Table:    DQ_DRVT_REPORT_PRC -                  A5ELGGF9.AE00004E * 
 *                   dm_dq.DQ_DRVT_REPORT_PRC                               * 
 *==========================================================================*/ 

%let transformID = %quote(A5ELGGF9.AK000117);
%let trans_rc = 0;
%let etls_stepStartTime = %sysfunc(datetime(), datetime20.); 

%let SYSLAST = %nrquote(work.W1N77CG5U); 

%let SYS_SQL_IP_SPEEDO = Y;
%let SYS_SQL_MAPPUTTO = sas_put;
%let SYS_SQLREDUCEPUT = DBMS;
%global etls_sql_pushDown;
%let etls_sql_pushDown = -1;
option DBIDIRECTEXEC;

%global etls_tableExist;
%global etls_numIndex;
%global etls_lastTable;
%let etls_tableExist = -1; 
%let etls_numIndex = -1; 
%let etls_lastTable = &SYSLAST; 

/*---- Define load data macro  ----*/ 

/* --------------------------------------------------------------
   Load Technique Selection: AppendToExisting - AppendProc
   Constraint and index action selections: 'ASIS','ASIS','ASIS','ASIS'
   Additional options selections... 
      Set unmapped to missing on updates: false 
   -------------------------------------------------------------- */
%macro etls_loader;

   %let etls_tableOptions = ;
   
   /*---- Map the columns  ----*/ 
   proc datasets lib = work nolist nowarn memtype = (data view);
      delete WJ2YHDA;
   quit;
   
   %put %str(NOTE: Mapping columns ...);
   proc sql;
      create view work.WJ2YHDA as
         select
            REP_DT   
               informat = DATETIME20.,
            REP_ID   
               format = 7.
               informat = 7.,
            PRC   
               format = 19.8
               informat = 19.8,
            CNT_ALL   
               format = 13.
               informat = 13.,
            CNT_ERR   
               format = 13.
               informat = 13.,
            DWH_DT   
               informat = DATETIME20.
      from &etls_lastTable
      ;
   quit;
   
   %let SYSLAST = work.WJ2YHDA;
   
   %let etls_lastTable = &SYSLAST; 
   %let etls_tableOptions = ; 
   
   /* Determine if the target table exists  */ 
   %let etls_tableExist = %eval(%sysfunc(exist(dm_dq.DQ_DRVT_REPORT_PRC, DATA)) or 
         %sysfunc(exist(dm_dq.DQ_DRVT_REPORT_PRC, VIEW))); 
   
   /*---- Create a new table  ----*/ 
   %if (&etls_tableExist eq 0) %then 
   %do;  /* if table does not exist  */ 
   
      %put %str(NOTE: Creating table ...);
      
      data dm_dq.DQ_DRVT_REPORT_PRC
              (dbnull = (
                         REP_DT = NO
                         REP_ID = NO
                         PRC = YES
                         CNT_ALL = YES
                         CNT_ERR = YES
                         DWH_DT = YES));
         attrib REP_DT length = 8
            format = DATETIME20.
            informat = DATETIME20.
            label = 'REP_DT'; 
         attrib REP_ID length = 8
            format = 7.
            informat = 7.
            label = 'REP_ID'; 
         attrib PRC length = 8
            format = 19.8
            informat = 19.8
            label = 'PRC'; 
         attrib CNT_ALL length = 8
            format = 13.
            informat = 13.
            label = 'CNT_ALL'; 
         attrib CNT_ERR length = 8
            format = 13.
            informat = 13.
            label = 'CNT_ERR'; 
         attrib DWH_DT length = 8
            format = DATETIME20.
            informat = DATETIME20.
            label = 'DWH_DT'; 
         call missing(of _all_);
         stop;
      run;
      
      %rcSet(&syserr); 
      
   %end;  /* if table does not exist  */ 
   
   /*---- Append  ----*/ 
   %put %str(NOTE: Appending data ...);
   
   proc append base = dm_dq.DQ_DRVT_REPORT_PRC 
      data = &etls_lastTable (&etls_tableOptions)  force ; 
    run; 
   
   %rcSet(&syserr); 
   
   proc datasets lib = work nolist nowarn memtype = (data view);
      delete WJ2YHDA;
   quit;
   
%mend etls_loader;
%etls_loader;

%let etls_recnt = 0;
%macro etls_recordCheck; 
   %let etls_recCheckExist = %eval(%sysfunc(exist(dm_dq.DQ_DRVT_REPORT_PRC, DATA)) or 
         %sysfunc(exist(dm_dq.DQ_DRVT_REPORT_PRC, VIEW))); 
   
   %if (&etls_recCheckExist) %then
   %do;
      proc sql noprint;
         select count(*) into :etls_recnt from dm_dq.DQ_DRVT_REPORT_PRC;
      quit;
   %end;
%mend etls_recordCheck;
%etls_recordCheck;



/**  Step end Table Loader **/

/*==========================================================================* 
 * Step:            Завершить модуль                      A5ELGGF9.AK000118 * 
 * Transform:       Завершить модуль                                        * 
 * Description:                                                             * 
 *==========================================================================*/ 

%let transformID = %quote(A5ELGGF9.AK000118);
%let trans_rc = 0;
%let etls_stepStartTime = %sysfunc(datetime(), datetime20.); 

%let _INPUT_count = 0; 
%let _OUTPUT_count = 0; 


/*****************************************************************
* ВЕРСИЯ:
*   $Id: transform_job_finish.sas 247 2012-04-03 07:31:10Z nesterenok $
*
******************************************************************
* НАЗНАЧЕНИЕ:
*   Регистрирует конец модуля ETL.
*
* ПАРАМЕТРЫ:
*   нет
*
******************************************************************/

%macro transform_job_finish;

   /* Продолжаем модуль */
   %job_continue_reg(mpJobType=JOB, mpJobName=&ETLS_JobName., mpPostEvent=N);

   /* Завершаем модуль */
   %job_finish_reg(mpJobType=JOB);

%mend transform_job_finish;

%transform_job_finish;


%rcSet(&syserr); 
%rcSet(&sysrc); 
%rcSet(&sqlrc); 



/**  Step end Завершить модуль **/

%let etls_endTime = %sysfunc(datetime(),datetime.);



/**  Job end 202_080_Mart_DQ_DRVT_REP08 **/

/* Reset jobid and name */
%let jobID = %quote(A5ELGGF9.AH00003N);
%let etls_jobName = %nrquote(202_002_Stream_DQ_DRVT);

/**************************************************************************** 
 * Job:             202_090_Mart_DQ_DRVT_REP09            A5ELGGF9.AH00002F * 
 * Description:     Несовпадение валюты цены первой и второй ноги CIRS за   * 
 *                   дату проверки.                                         * 
 *                                                                          * 
 * Metadata Server: bravo14                                                 * 
 * Port:            8561                                                    * 
 * Location:        /DWH_DMDQ_REP/Jobs/Includes/DQ_DRVT                     * 
 *                                                                          * 
 * Server:          SASApp                                A5C46MZY.AQ000002 * 
 *                                                                          * 
 * Source Tables:   DEAL - DM_DRVT.DEAL                   A5LX14I5.A9000014 * 
 *                  INSTRUMENTTYPE -                      A5LX14I5.A900001B * 
 *                   DM_DRVT.INSTRUMENTTYPE                                 * 
 *                  DEAL - DM_DRVT.DEAL                   A5LX14I5.A9000014 * 
 *                  ETL_JOB - etl_sys.ETL_JOB             A59S11RW.AE00001A * 
 * Target Tables:   DQ_DRVT_DWH_DM - dm_dq.DQ_DRVT_DWH_DM A5ELGGF9.AE000049 * 
 *                  DQ_DRVT_INSTRUMENTTYPE -              A5ELGGF9.AE00004A * 
 *                   dm_dq.DQ_DRVT_INSTRUMENTTYPE                           * 
 *                  DQ_DRVT_REPORT_PRC -                  A5ELGGF9.AE00004E * 
 *                   dm_dq.DQ_DRVT_REPORT_PRC                               * 
 *                  DQ_DRVT_DWH_DM - dm_dq.DQ_DRVT_DWH_DM A5ELGGF9.AE000049 * 
 *                  DQ_DRVT_REPORT_PRC -                  A5ELGGF9.AE00004E * 
 *                   dm_dq.DQ_DRVT_REPORT_PRC                               * 
 *                                                                          * 
 * Generated on:    16 Июль 2013 г. 17:46:20 MSD                            * 
 * Generated by:    sasdwh                                                  * 
 * Version:         SAS Data Integration Studio 4.5                         * 
 ****************************************************************************/ 

/* General macro variables  */ 
%let jobID = %quote(A5ELGGF9.AH00002F);
%let etls_jobName = %nrquote(202_090_Mart_DQ_DRVT_REP09);
%let etls_userID = %nrquote(sasdwh);


/* Create metadata macro variables */
%let IOMServer      = %nrquote(SASApp);
%let metaPort       = %nrquote(8561);
%let metaServer     = %nrquote(bravo14);

/* Set metadata options */
options metaport       = &metaPort 
        metaserver     = "&metaServer"; 

/* Setup for capturing job status  */ 
%let etls_startTime = %sysfunc(datetime(),datetime.);
%let etls_recordsBefore = 0;
%let etls_recordsAfter = 0;
%let etls_lib = 0;
%let etls_table = 0;

%global etls_debug; 
%macro etls_setDebug; 
   %if %str(&etls_debug) ne 0 %then 
      OPTIONS MPRINT%str(;); 
%mend; 
%etls_setDebug; 

/*---- Start of Pre-Process Code  ----*/ 

%LET REPDT=&DMDQ_REPORT_START_DTTM;
/*---- End of Pre-Process Code  ----*/ 

%rcSet(&syserr); 
%rcSet(&sqlrc); 

/*==========================================================================* 
 * Step:            Начать модуль                         A5ELGGF9.AK000119 * 
 * Transform:       Начать модуль                                           * 
 * Description:                                                             * 
 *==========================================================================*/ 

%let transformID = %quote(A5ELGGF9.AK000119);
%let trans_rc = 0;
%let etls_stepStartTime = %sysfunc(datetime(), datetime20.); 

%let _INPUT_count = 0; 
%let _OUTPUT_count = 0; 


/*****************************************************************
* ВЕРСИЯ:
*   $Id: transform_job_start.sas 1747 2012-08-01 11:26:13Z nesterenok $
*
******************************************************************
* НАЗНАЧЕНИЕ:
*   Регистрирует начало модуля ETL.
*
* ПАРАМЕТРЫ:
*   нет
*
******************************************************************/

%macro transform_job_start;

   /* Продолжаем поток (или создаем новый) */
   %local lmvStreamName;
   %if %sysfunc(sysexist(LSB_JOBNAME)) %then
      %let lmvStreamName = %scan(%sysfunc(sysget(LSB_JOBNAME)), 3, :);
   %else
      %let lmvStreamName = ;

   %job_continue_reg(mpJobType=STREAM, mpJobName=&lmvStreamName, mpPostEvent=N, mpForcedStart=Y);

   /* Для DI, начинаем поток заново, если старый был начат не сегодня */
   %if %length(&lmvStreamName) eq 0 and &STREAM_START_DT ne %sysfunc(today()) %then %do;
      %job_start_reg(mpJobType=STREAM, mpParentJobId=, mpJobName=&lmvStreamName.);
   %end;

   /* Начинаем модуль */
   %job_start_reg(mpJobType=JOB, mpParentJobId=&STREAM_ID, mpJobName=&ETLS_JobName.);

%mend transform_job_start;

%transform_job_start;


%rcSet(&syserr); 
%rcSet(&sysrc); 
%rcSet(&sqlrc); 



/**  Step end Начать модуль **/

/*==========================================================================* 
 * Step:            Очистить таблицу                      A5ELGGF9.AK00011A * 
 * Transform:       Очистить таблицу                                        * 
 * Description:                                                             * 
 *                                                                          * 
 * Target Table:    DQ_DRVT_DWH_DM - dm_dq.DQ_DRVT_DWH_DM A5ELGGF9.AE000049 * 
 *==========================================================================*/ 

%let transformID = %quote(A5ELGGF9.AK00011A);
%let trans_rc = 0;
%let etls_stepStartTime = %sysfunc(datetime(), datetime20.); 

%let _INPUT_count = 0; 
%let _OUTPUT_count = 1; 
%let _OUTPUT = dm_dq.DQ_DRVT_DWH_DM;
%let _OUTPUT_connect =  DEFER=YES PATH=DWH.IMB.RU AUTHDOMAIN="OraAuth_DM_DQ" 
;
%let _OUTPUT_engine = ORACLE;
%let _OUTPUT_memtype = DATA;
%let _OUTPUT_options = %nrquote();
%let _OUTPUT_alter = %nrquote();
%let _OUTPUT_path = %nrquote(/DWH_DMDQ_REP/Marts/DQ_DRVT/DQ_DRVT_DWH_DM%(Table%));
%let _OUTPUT_type = 1;
%let _OUTPUT_label = %nrquote();
/* List of target columns to keep  */ 
%let _OUTPUT_keep = REPORTCODE REPORTDATE FRONTKDEALID FRONTFDEALID DEALID 
        INSTRUMENTTYPECD DEALDATE ADDITIONALINFORMATION STARTDATE NEXTDATE 
        ENDDATE LEGNUMBER VALUEFRS VALUESEC;

%let tpOut = dm_dq.DQ_DRVT_DWH_DM;
%let tpOut_connect =  DEFER=YES PATH=DWH.IMB.RU AUTHDOMAIN="OraAuth_DM_DQ" 
;
%let tpOut_engine = ORACLE;
%let tpOut_memtype = DATA;
%let tpOut_options = %nrquote();
%let tpOut_alter = %nrquote();
%let tpOut_path = %nrquote(/DWH_DMDQ_REP/Marts/DQ_DRVT/DQ_DRVT_DWH_DM%(Table%));
%let tpOut_type = 1;
%let tpOut_label = %nrquote();
/* List of target columns to keep  */ 
%let tpOut_keep = REPORTCODE REPORTDATE FRONTKDEALID FRONTFDEALID DEALID 
        INSTRUMENTTYPECD DEALDATE ADDITIONALINFORMATION STARTDATE NEXTDATE 
        ENDDATE LEGNUMBER VALUEFRS VALUESEC;


%let tpWhere = %nrquote(REPORTCODE = %'П-09%' AND REPORTDATE = &DMDQ_REPORT_START_DTTM);

/* List of target columns to keep  */ 
%let _keep = REPORTCODE REPORTDATE FRONTKDEALID FRONTFDEALID DEALID 
        INSTRUMENTTYPECD DEALDATE ADDITIONALINFORMATION STARTDATE NEXTDATE 
        ENDDATE LEGNUMBER VALUEFRS VALUESEC;
/* List of target columns to keep  */ 
%let keep = REPORTCODE REPORTDATE FRONTKDEALID FRONTFDEALID DEALID 
        INSTRUMENTTYPECD DEALDATE ADDITIONALINFORMATION STARTDATE NEXTDATE 
        ENDDATE LEGNUMBER VALUEFRS VALUESEC;
/*****************************************************************
* ВЕРСИЯ:
*   $Id: transform_table_delete.sas 2142 2012-08-17 14:15:09Z nesterenok $
*
******************************************************************
* НАЗНАЧЕНИЕ:
*   Удаляет из указанной таблицы записи.
*
* ПАРАМЕТРЫ:
*   tpOut                  + имя целевой таблицы, которая будет очищена
*   tpWhere                - условие отбора записей под удаление
*                            по умолчанию отсутствует, т.е. удаляются все записи
*
******************************************************************/

%macro transform_table_delete;

   /* Удаляем записи */
   /* TODO: truncate */
   proc sql;
      delete from &tpOut
      %if %length(&tpWhere) gt 0 %then %do;
         where (%unquote(&tpWhere))
      %end;
      ;
   quit;
   %error_check (mpStepType=SQL);

%mend transform_table_delete;

%transform_table_delete;


%rcSet(&syserr); 
%rcSet(&sysrc); 
%rcSet(&sqlrc); 



/**  Step end Очистить таблицу **/

/*==========================================================================* 
 * Step:            Очистить таблицу                      A5ELGGF9.AK00011B * 
 * Transform:       Очистить таблицу                                        * 
 * Description:                                                             * 
 *                                                                          * 
 * Target Table:    DQ_DRVT_REPORT_PRC -                  A5ELGGF9.AE00004E * 
 *                   dm_dq.DQ_DRVT_REPORT_PRC                               * 
 *==========================================================================*/ 

%let transformID = %quote(A5ELGGF9.AK00011B);
%let trans_rc = 0;
%let etls_stepStartTime = %sysfunc(datetime(), datetime20.); 

%let _INPUT_count = 0; 
%let _OUTPUT_count = 1; 
%let _OUTPUT = dm_dq.DQ_DRVT_REPORT_PRC;
%let _OUTPUT_connect =  DEFER=YES PATH=DWH.IMB.RU AUTHDOMAIN="OraAuth_DM_DQ" 
;
%let _OUTPUT_engine = ORACLE;
%let _OUTPUT_memtype = DATA;
%let _OUTPUT_options = %nrquote();
%let _OUTPUT_alter = %nrquote();
%let _OUTPUT_path = %nrquote(/DWH_DMDQ_REP/Marts/DQ_DRVT/DQ_DRVT_REPORT_PRC%(Table%));
%let _OUTPUT_type = 1;
%let _OUTPUT_label = %nrquote();
/* List of target columns to keep  */ 
%let _OUTPUT_keep = REP_DT REP_ID PRC CNT_ALL CNT_ERR DWH_DT;

%let tpOut = dm_dq.DQ_DRVT_REPORT_PRC;
%let tpOut_connect =  DEFER=YES PATH=DWH.IMB.RU AUTHDOMAIN="OraAuth_DM_DQ" 
;
%let tpOut_engine = ORACLE;
%let tpOut_memtype = DATA;
%let tpOut_options = %nrquote();
%let tpOut_alter = %nrquote();
%let tpOut_path = %nrquote(/DWH_DMDQ_REP/Marts/DQ_DRVT/DQ_DRVT_REPORT_PRC%(Table%));
%let tpOut_type = 1;
%let tpOut_label = %nrquote();
/* List of target columns to keep  */ 
%let tpOut_keep = REP_DT REP_ID PRC CNT_ALL CNT_ERR DWH_DT;


%let tpWhere = %nrquote(REP_ID = 9 AND REP_DT = &DMDQ_REPORT_START_DTTM);

/* List of target columns to keep  */ 
%let _keep = REP_DT REP_ID PRC CNT_ALL CNT_ERR DWH_DT;
/* List of target columns to keep  */ 
%let keep = REP_DT REP_ID PRC CNT_ALL CNT_ERR DWH_DT;
/*****************************************************************
* ВЕРСИЯ:
*   $Id: transform_table_delete.sas 2142 2012-08-17 14:15:09Z nesterenok $
*
******************************************************************
* НАЗНАЧЕНИЕ:
*   Удаляет из указанной таблицы записи.
*
* ПАРАМЕТРЫ:
*   tpOut                  + имя целевой таблицы, которая будет очищена
*   tpWhere                - условие отбора записей под удаление
*                            по умолчанию отсутствует, т.е. удаляются все записи
*
******************************************************************/

%macro transform_table_delete;

   /* Удаляем записи */
   /* TODO: truncate */
   proc sql;
      delete from &tpOut
      %if %length(&tpWhere) gt 0 %then %do;
         where (%unquote(&tpWhere))
      %end;
      ;
   quit;
   %error_check (mpStepType=SQL);

%mend transform_table_delete;

%transform_table_delete;


%rcSet(&syserr); 
%rcSet(&sysrc); 
%rcSet(&sqlrc); 



/**  Step end Очистить таблицу **/

/*==========================================================================* 
 * Step:            Extract                               A5ELGGF9.AK00011C * 
 * Transform:       Extract                                                 * 
 * Description:     Выполнение проверок DQ                                  * 
 *                                                                          * 
 * Source Table:    DEAL - DM_DRVT.DEAL                   A5LX14I5.A9000014 * 
 * Target Table:    Extract - work.W1MDCKTZM              A5ELGGF9.AF0000FS * 
 *==========================================================================*/ 

%let transformID = %quote(A5ELGGF9.AK00011C);
%let trans_rc = 0;
%let etls_stepStartTime = %sysfunc(datetime(), datetime20.); 

%let etls_recnt = 0;
%macro etls_recordCheck; 
   %let etls_recCheckExist = %eval(%sysfunc(exist(DM_DRVT.DEAL, DATA)) or 
         %sysfunc(exist(DM_DRVT.DEAL, VIEW))); 
   
   %if (&etls_recCheckExist) %then
   %do;
      proc sql noprint;
         select count(*) into :etls_recnt from DM_DRVT.DEAL;
      quit;
   %end;
%mend etls_recordCheck;
%etls_recordCheck;

%let SYSLAST = %nrquote(DM_DRVT.DEAL); 

%let SYS_SQL_IP_SPEEDO = Y;
%let SYS_SQL_MAPPUTTO = sas_put;
%let SYS_SQLREDUCEPUT = DBMS;
%global etls_sql_pushDown;
%let etls_sql_pushDown = -1;
option DBIDIRECTEXEC;

/*---- Map the columns  ----*/ 
proc datasets lib = work nolist nowarn memtype = (data view);
   delete W1MDCKTZM;
quit;

data _null_;
   put "NOTE: The following column(s) do not have a column mapping, so the"
        " value(s) will be set to missing: ADDITIONALINFORMATION";
run;

%put %str(NOTE: Mapping columns ...);
proc sql;
   create table work.W1MDCKTZM as
      select
         DEALRK,
         ('П-09') as REPORTCODE length = 5
            format = $5.
            informat = $5.
            label = 'REPORTCODE',
         (&REPDT) as REPORTDATE length = 8
            format = DATETIME20.
            informat = DATETIME20.
            label = 'REPORTDATE',
         FRONTKDEALID,
         FRONTFDEALID,
         (case
              when missing(DEALID1) then DEALID2
              when missing(DEALID2) then DEALID1
              when not missing(DEALID1) AND not missing(DEALID2) then cats(DEALID1, ',', DEALID2)
              else " "
            end) as DEALID length = 100
            format = $100.
            informat = $100.
            label = 'DEALID',
         (strip(INSTRUMENTTYPECD )) as INSTRUMENTTYPECD length = 3
            format = $3.
            informat = $3.
            label = 'INSTRUMENTTYPECD',
         DEALDATE,
         "" as ADDITIONALINFORMATION length = 255
            format = $255.
            informat = $255.
            label = 'ADDITIONALINFORMATION'
   from &SYSLAST
      where VALID_FROM_DTTM <= &REPDT < VALID_TO_DTTM
         AND
         INSTRUMENTTYPECD = 'CIS'
         AND
         (PRICECCY1 = PRICECCY2)
   ;
quit;

%let SYSLAST = work.W1MDCKTZM;

%global etls_sql_pushDown;
%let etls_sql_pushDown = &sys_sql_ip_all;

%rcSet(&sqlrc); 



/**  Step end Extract **/

/*==========================================================================* 
 * Step:            Table Loader                          A5ELGGF9.AK00011D * 
 * Transform:       Table Loader (Version 2.1)                              * 
 * Description:                                                             * 
 *                                                                          * 
 * Source Table:    Extract - work.W1MDCKTZM              A5ELGGF9.AF0000FS * 
 * Target Table:    DQ_DRVT_DWH_DM - dm_dq.DQ_DRVT_DWH_DM A5ELGGF9.AE000049 * 
 *==========================================================================*/ 

%let transformID = %quote(A5ELGGF9.AK00011D);
%let trans_rc = 0;
%let etls_stepStartTime = %sysfunc(datetime(), datetime20.); 

%let SYSLAST = %nrquote(work.W1MDCKTZM); 

%let SYS_SQL_IP_SPEEDO = Y;
%let SYS_SQL_MAPPUTTO = sas_put;
%let SYS_SQLREDUCEPUT = DBMS;
%global etls_sql_pushDown;
%let etls_sql_pushDown = -1;
option DBIDIRECTEXEC;

%global etls_tableExist;
%global etls_numIndex;
%global etls_lastTable;
%let etls_tableExist = -1; 
%let etls_numIndex = -1; 
%let etls_lastTable = &SYSLAST; 

/*---- Define load data macro  ----*/ 

/* --------------------------------------------------------------
   Load Technique Selection: AppendToExisting - AppendProc
   Constraint and index action selections: 'ASIS','ASIS','ASIS','ASIS'
   Additional options selections... 
      Set unmapped to missing on updates: false 
   -------------------------------------------------------------- */
%macro etls_loader;

   %let etls_tableOptions = ;
   
   /*---- Map the columns  ----*/ 
   proc datasets lib = work nolist nowarn memtype = (data view);
      delete WJ2YJKU;
   quit;
   
   data _null_;
      put "NOTE: The following column(s) do not have a column mapping, so the"
           " value(s) will be set to missing: STARTDATE, NEXTDATE, ENDDATE,"
           " LEGNUMBER, VALUEFRS, VALUESEC";
   run;
   
   %put %str(NOTE: Mapping columns ...);
   proc sql;
      create view work.WJ2YJKU as
         select
            REPORTCODE,
            REPORTDATE,
            FRONTKDEALID,
            FRONTFDEALID,
            DEALID,
            INSTRUMENTTYPECD,
            DEALDATE,
            ADDITIONALINFORMATION,
            . as STARTDATE length = 8
               format = DATETIME20.
               informat = DATETIME20.,
            . as NEXTDATE length = 8
               format = DATETIME20.
               informat = DATETIME20.,
            . as ENDDATE length = 8
               format = DATETIME20.
               informat = DATETIME20.,
            "" as LEGNUMBER length = 1
               format = $1.
               informat = $1.,
            "" as VALUEFRS length = 20
               format = $20.
               informat = $20.,
            "" as VALUESEC length = 20
               format = $20.
               informat = $20.
      from &etls_lastTable
      ;
   quit;
   
   %let SYSLAST = work.WJ2YJKU;
   
   %let etls_lastTable = &SYSLAST; 
   %let etls_tableOptions = ; 
   
   /* Determine if the target table exists  */ 
   %let etls_tableExist = %eval(%sysfunc(exist(dm_dq.DQ_DRVT_DWH_DM, DATA)) or 
         %sysfunc(exist(dm_dq.DQ_DRVT_DWH_DM, VIEW))); 
   
   /*---- Create a new table  ----*/ 
   %if (&etls_tableExist eq 0) %then 
   %do;  /* if table does not exist  */ 
   
      %put %str(NOTE: Creating table ...);
      
      data dm_dq.DQ_DRVT_DWH_DM
              (dbnull = (
                         REPORTCODE = YES
                         REPORTDATE = YES
                         FRONTKDEALID = YES
                         FRONTFDEALID = YES
                         DEALID = YES
                         INSTRUMENTTYPECD = YES
                         DEALDATE = YES
                         ADDITIONALINFORMATION = YES
                         STARTDATE = YES
                         NEXTDATE = YES
                         ENDDATE = YES
                         LEGNUMBER = YES
                         VALUEFRS = YES
                         VALUESEC = YES));
         attrib REPORTCODE length = $5
            format = $5.
            informat = $5.
            label = 'REPORTCODE'; 
         attrib REPORTDATE length = 8
            format = DATETIME20.
            informat = DATETIME20.
            label = 'REPORTDATE'; 
         attrib FRONTKDEALID length = $10
            format = $10.
            informat = $10.
            label = 'FRONTKDEALID'; 
         attrib FRONTFDEALID length = $10
            format = $10.
            informat = $10.
            label = 'FRONTFDEALID'; 
         attrib DEALID length = $100
            format = $100.
            informat = $100.
            label = 'DEALID'; 
         attrib INSTRUMENTTYPECD length = $3
            format = $3.
            informat = $3.
            label = 'INSTRUMENTTYPECD'; 
         attrib DEALDATE length = 8
            format = DATETIME20.
            informat = DATETIME20.
            label = 'DEALDATE'; 
         attrib ADDITIONALINFORMATION length = $255
            format = $255.
            informat = $255.
            label = 'ADDITIONALINFORMATION'; 
         attrib STARTDATE length = 8
            format = DATETIME20.
            informat = DATETIME20.
            label = 'STARTDATE'; 
         attrib NEXTDATE length = 8
            format = DATETIME20.
            informat = DATETIME20.
            label = 'NEXTDATE'; 
         attrib ENDDATE length = 8
            format = DATETIME20.
            informat = DATETIME20.
            label = 'ENDDATE'; 
         attrib LEGNUMBER length = $1
            format = $1.
            informat = $1.
            label = 'LEGNUMBER'; 
         attrib VALUEFRS length = $20
            format = $20.
            informat = $20.
            label = 'VALUEFRS'; 
         attrib VALUESEC length = $20
            format = $20.
            informat = $20.
            label = 'VALUESEC'; 
         call missing(of _all_);
         stop;
      run;
      
      %rcSet(&syserr); 
      
   %end;  /* if table does not exist  */ 
   
   /*---- Append  ----*/ 
   %put %str(NOTE: Appending data ...);
   
   proc append base = dm_dq.DQ_DRVT_DWH_DM 
      data = &etls_lastTable (&etls_tableOptions)  force ; 
    run; 
   
   %rcSet(&syserr); 
   
   proc datasets lib = work nolist nowarn memtype = (data view);
      delete WJ2YJKU;
   quit;
   
%mend etls_loader;
%etls_loader;

%let etls_recnt = 0;
%macro etls_recordCheck; 
   %let etls_recCheckExist = %eval(%sysfunc(exist(dm_dq.DQ_DRVT_DWH_DM, DATA)) or 
         %sysfunc(exist(dm_dq.DQ_DRVT_DWH_DM, VIEW))); 
   
   %if (&etls_recCheckExist) %then
   %do;
      proc sql noprint;
         select count(*) into :etls_recnt from dm_dq.DQ_DRVT_DWH_DM;
      quit;
   %end;
%mend etls_recordCheck;
%etls_recordCheck;



/**  Step end Table Loader **/

/*==========================================================================* 
 * Step:            SQL Join                              A5ELGGF9.AK00011E * 
 * Transform:       Join                                                    * 
 * Description:                                                             * 
 *                                                                          * 
 * Source Tables:   Extract - work.W1MDCKTZM              A5ELGGF9.AF0000FS * 
 *                  INSTRUMENTTYPE -                      A5LX14I5.A900001B * 
 *                   DM_DRVT.INSTRUMENTTYPE                                 * 
 * Target Table:    SQL Join - work.W1MDIR4UJ             A5ELGGF9.AF0000FT * 
 *==========================================================================*/ 

%let transformID = %quote(A5ELGGF9.AK00011E);
%let trans_rc = 0;
%let etls_stepStartTime = %sysfunc(datetime(), datetime20.); 

%let etls_recCheckExist = 0; 
%let etls_recnt = 0; 
%macro etls_recordCheck; 
   %let etls_recCheckExist = %eval(%sysfunc(exist(work.W1MDCKTZM, DATA)) or 
         %sysfunc(exist(work.W1MDCKTZM, VIEW))); 
   
   %if (&etls_recCheckExist) %then
   %do;
      %local etls_syntaxcheck; 
      %let etls_syntaxcheck = %sysfunc(getoption(syntaxcheck)); 
      /* Turn off syntaxcheck option to perform following steps  */ 
      options nosyntaxcheck;
      
      proc contents data = work.W1MDCKTZM out = work.etls_contents(keep = nobs) noprint; 
      run; 
      
      data _null_; 
         set work.etls_contents (obs = 1); 
         call symput("etls_recnt", left(put(nobs,32.))); 
      run;
      
      proc datasets lib = work nolist nowarn memtype = (data view);
         delete etls_contents;
      quit;
      
      /* Reset syntaxcheck option to previous setting  */ 
      options &etls_syntaxcheck; 
   %end;
%mend etls_recordCheck;
%etls_recordCheck;

%let SYS_SQL_IP_SPEEDO = Y;
%let SYS_SQL_MAPPUTTO = sas_put;
%let SYS_SQLREDUCEPUT = DBMS;
%global etls_sql_pushDown;
%let etls_sql_pushDown = -1;
option DBIDIRECTEXEC;

proc datasets lib = work nolist nowarn memtype = (data view);
   delete W1MDIR4UJ;
quit;

proc sql;
   create table work.W1MDIR4UJ as
   select distinct
      W1MDCKTZM.INSTRUMENTTYPECD length = 3   
         format = $3.
         informat = $3.
         label = 'INSTRUMENTTYPECD',
      INSTRUMENTTYPE.INSTRUMENTTYPE length = 100   
         format = $100.
         informat = $100.
         label = 'INSTRUMENTTYPE'
   from
      work.W1MDCKTZM left join 
      DM_DRVT.INSTRUMENTTYPE
         on
         (
            W1MDCKTZM.INSTRUMENTTYPECD = INSTRUMENTTYPE.INSTRUMENTTYPECD
         )
   where
      W1MDCKTZM.INSTRUMENTTYPECD NOT IS MISSING 
   ;
quit;

%global etls_sql_pushDown;
%let etls_sql_pushDown = &sys_sql_ip_all;

%rcSet(&sqlrc); 



/**  Step end SQL Join **/

/*==========================================================================* 
 * Step:            Table Loader                          A5ELGGF9.AK00011F * 
 * Transform:       Table Loader (Version 2.1)                              * 
 * Description:                                                             * 
 *                                                                          * 
 * Source Table:    SQL Join - work.W1MDIR4UJ             A5ELGGF9.AF0000FT * 
 * Target Table:    DQ_DRVT_INSTRUMENTTYPE -              A5ELGGF9.AE00004A * 
 *                   dm_dq.DQ_DRVT_INSTRUMENTTYPE                           * 
 *==========================================================================*/ 

%let transformID = %quote(A5ELGGF9.AK00011F);
%let trans_rc = 0;
%let etls_stepStartTime = %sysfunc(datetime(), datetime20.); 

%let SYSLAST = %nrquote(work.W1MDIR4UJ); 

%let SYS_SQL_IP_SPEEDO = Y;
%let SYS_SQL_MAPPUTTO = sas_put;
%let SYS_SQLREDUCEPUT = DBMS;
%global etls_sql_pushDown;
%let etls_sql_pushDown = -1;
option DBIDIRECTEXEC;

%global etls_tableExist;
%global etls_numIndex;
%global etls_lastTable;
%let etls_tableExist = -1; 
%let etls_numIndex = -1; 
%let etls_lastTable = &SYSLAST; 

/*---- Define load data macro  ----*/ 

/* --------------------------------------------------------------
   Load Technique Selection: Update - Matching=Skip, New=AppendProc
   Blanks may replace non-blanks: true
   Constraint and index action selections: 'ASIS','ASIS','ASIS','ASIS'
   Additional options selections... 
      Set unmapped to missing on updates: false 
   -------------------------------------------------------------- */
%macro etls_loader;

   %let etls_tableOptions = ;
   
   /* Determine if the target table exists  */ 
   %let etls_tableExist = %eval(%sysfunc(exist(dm_dq.DQ_DRVT_INSTRUMENTTYPE, DATA)) or 
         %sysfunc(exist(dm_dq.DQ_DRVT_INSTRUMENTTYPE, VIEW))); 
   
   %let etls_hasUpdateIndex=0; 
   
   /*---- Create a new table  ----*/ 
   %if (&etls_tableExist eq 0) %then 
   %do;  /* if table does not exist  */ 
   
      %put %str(NOTE: Creating table ...);
      
      data dm_dq.DQ_DRVT_INSTRUMENTTYPE
              (dbnull = (
                         INSTRUMENTTYPECD = YES
                         INSTRUMENTTYPE = YES));
         attrib INSTRUMENTTYPECD length = $3
            format = $3.
            informat = $3.
            label = 'INSTRUMENTTYPECD'; 
         attrib INSTRUMENTTYPE length = $100
            format = $100.
            informat = $100.
            label = 'INSTRUMENTTYPE'; 
         call missing(of _all_);
         stop;
      run;
      
      %rcSet(&syserr); 
      
   %end;  /* if table does not exist  */ 
   
   %let etls_recCheckExist = 0; 
   %let etls_targetHasRows = 0; 
   %macro etls_recordCheck; 
      %let etls_recCheckExist = %eval(%sysfunc(exist(dm_dq.DQ_DRVT_INSTRUMENTTYPE, DATA)) or 
            %sysfunc(exist(dm_dq.DQ_DRVT_INSTRUMENTTYPE, VIEW))); 
      
      %if (&etls_recCheckExist) %then
      %do;
         %local etls_syntaxcheck; 
         %let etls_syntaxcheck = %sysfunc(getoption(syntaxcheck)); 
         /* Turn off syntaxcheck option to perform following steps  */ 
         options nosyntaxcheck;
         
         data _null_; 
            set dm_dq.DQ_DRVT_INSTRUMENTTYPE( obs=1 ); 
            call symput("etls_targetHasRows",'1'); 
         run; 
         /* Reset syntaxcheck option to previous setting  */ 
         options &etls_syntaxcheck; 
      %end;
   %mend etls_recordCheck;
   %etls_recordCheck;
   
   
   %if (&etls_targetHasRows) %then 
   %do;  /* if has rows */ 
      proc sql ; 
         /* create a temporary table of new records from the transaction table  */ 
         create table etls_newrecords as 
            select * 
               from &etls_lastTable as t 
                  where not exists 
                     (select * from dm_dq.DQ_DRVT_INSTRUMENTTYPE
                   as m 
                                      where m.INSTRUMENTTYPECD = t.INSTRUMENTTYPECD)
         ; 
         
      quit;
      
      %let etls_lastTable = &SYSLAST;
      
      %let etls_tableOptions = ; 
      
      %global etls_sql_pushDown;
      %let etls_sql_pushDown = &sys_sql_ip_all;
      
      %rcSet(&sqlrc); 
      
   %end; /* if has rows */ 
   
   /*---- Append  ----*/ 
   %put %str(NOTE: Appending data ...);
   
   proc append base = dm_dq.DQ_DRVT_INSTRUMENTTYPE 
      data = &etls_lastTable (&etls_tableOptions)  force ; 
    run; 
   
   %rcSet(&syserr); 
   
   proc datasets lib = work nolist nowarn memtype = (data view);
      delete etls_newrecords;
   quit;
   
%mend etls_loader;
%etls_loader;

%let etls_recnt = 0;
%macro etls_recordCheck; 
   %let etls_recCheckExist = %eval(%sysfunc(exist(dm_dq.DQ_DRVT_INSTRUMENTTYPE, DATA)) or 
         %sysfunc(exist(dm_dq.DQ_DRVT_INSTRUMENTTYPE, VIEW))); 
   
   %if (&etls_recCheckExist) %then
   %do;
      proc sql noprint;
         select count(*) into :etls_recnt from dm_dq.DQ_DRVT_INSTRUMENTTYPE;
      quit;
   %end;
%mend etls_recordCheck;
%etls_recordCheck;



/**  Step end Table Loader **/

/*==========================================================================* 
 * Step:            User Written                          A5ELGGF9.AK00011G * 
 * Transform:       User Written                                            * 
 * Description:     Сбор статистики                                         * 
 *                                                                          * 
 * Source Tables:   DEAL - DM_DRVT.DEAL                   A5LX14I5.A9000014 * 
 *                  Extract - work.W1MDCKTZM              A5ELGGF9.AF0000FS * 
 *                  ETL_JOB - etl_sys.ETL_JOB             A59S11RW.AE00001A * 
 * Target Table:    User Written - work.W1N7CH1PZ         A5ELGGF9.AF0000FU * 
 *                                                                          * 
 * User Written:    SourceCode                                              * 
 *==========================================================================*/ 

%let transformID = %quote(A5ELGGF9.AK00011G);
%let trans_rc = 0;
%let etls_stepStartTime = %sysfunc(datetime(), datetime20.); 

%let etls_recnt = 0;
%macro etls_recordCheck; 
   %let etls_recCheckExist = %eval(%sysfunc(exist(DM_DRVT.DEAL, DATA)) or 
         %sysfunc(exist(DM_DRVT.DEAL, VIEW))); 
   
   %if (&etls_recCheckExist) %then
   %do;
      proc sql noprint;
         select count(*) into :etls_recnt from DM_DRVT.DEAL;
      quit;
   %end;
%mend etls_recordCheck;
%etls_recordCheck;

%let _INPUT_count = 3;
%let _INPUT = DM_DRVT.DEAL;
%let _INPUT_connect =  PATH=DWH.IMB.RU AUTHDOMAIN="OraAuth_DM_DRVT" 
;
%let _INPUT_engine = ORACLE;
%let _INPUT_memtype = DATA;
%let _INPUT_options = %nrquote();
%let _INPUT_alter = %nrquote();
%let _INPUT_path = %nrquote(/DWH_DMDRVT_REP/Marts/DM_DRVT/DEAL%(Table%));
%let _INPUT_type = 1;
%let _INPUT_label = %nrquote();

%let _INPUT1 = DM_DRVT.DEAL;
%let _INPUT1_connect =  PATH=DWH.IMB.RU AUTHDOMAIN="OraAuth_DM_DRVT" 
;
%let _INPUT1_engine = ORACLE;
%let _INPUT1_memtype = DATA;
%let _INPUT1_options = %nrquote();
%let _INPUT1_alter = %nrquote();
%let _INPUT1_path = %nrquote(/DWH_DMDRVT_REP/Marts/DM_DRVT/DEAL%(Table%));
%let _INPUT1_type = 1;
%let _INPUT1_label = %nrquote();

%let _INPUT2 = work.W1MDCKTZM;
%let _INPUT2_connect = ;
%let _INPUT2_engine = ;
%let _INPUT2_memtype = DATA;
%let _INPUT2_options = %nrquote();
%let _INPUT2_alter = %nrquote();
%let _INPUT2_path = %nrquote(/Extract_A5ELGGF9.AF0000FS%(WorkTable%));
%let _INPUT2_type = 1;
%let _INPUT2_label = %nrquote();

%let _INPUT3 = etl_sys.ETL_JOB;
%let _INPUT3_connect =  PATH=DWH.IMB.RU AUTHDOMAIN="OraAuth_ETL_SYS" 
;
%let _INPUT3_engine = ORACLE;
%let _INPUT3_memtype = DATA;
%let _INPUT3_options = %nrquote();
%let _INPUT3_alter = %nrquote();
%let _INPUT3_path = %nrquote(/DWH_DWHDDS_SYS/Tables/ETL_SYS/ETL_JOB%(Table%));
%let _INPUT3_type = 1;
%let _INPUT3_label = %nrquote();

%let _OUTPUT_count = 1;
%let _OUTPUT = work.W1N7CH1PZ;
%let _OUTPUT_connect = ;
%let _OUTPUT_engine = ;
%let _OUTPUT_memtype = DATA;
%let _OUTPUT_options = %nrquote();
%let _OUTPUT_alter = %nrquote();
%let _OUTPUT_path = %nrquote(/User Written_A5ELGGF9.AF0000FU%(WorkTable%));
%let _OUTPUT_type = 1;
%let _OUTPUT_label = %nrquote();
/* List of target columns to keep  */ 
%let _OUTPUT_keep = REP_DT REP_ID PRC CNT_ALL CNT_ERR DWH_DT;
%let _OUTPUT_col_count = 6;
%let _OUTPUT_col0_name = REP_DT;
%let _OUTPUT_col0_table = work.W1N7CH1PZ;
%let _OUTPUT_col0_length = 8;
%let _OUTPUT_col0_type = ;
%let _OUTPUT_col0_format = DATETIME20.;
%let _OUTPUT_col0_informat = ;
%let _OUTPUT_col0_label = %nrquote();
%let _OUTPUT_col0_exp = ;
%let _OUTPUT_col0_input_count = 0;
%let _OUTPUT_col1_name = REP_ID;
%let _OUTPUT_col1_table = work.W1N7CH1PZ;
%let _OUTPUT_col1_length = 8;
%let _OUTPUT_col1_type = ;
%let _OUTPUT_col1_format = ;
%let _OUTPUT_col1_informat = ;
%let _OUTPUT_col1_label = %nrquote();
%let _OUTPUT_col1_exp = ;
%let _OUTPUT_col1_input_count = 0;
%let _OUTPUT_col2_name = PRC;
%let _OUTPUT_col2_table = work.W1N7CH1PZ;
%let _OUTPUT_col2_length = 8;
%let _OUTPUT_col2_type = ;
%let _OUTPUT_col2_format = ;
%let _OUTPUT_col2_informat = ;
%let _OUTPUT_col2_label = %nrquote();
%let _OUTPUT_col2_exp = ;
%let _OUTPUT_col2_input_count = 0;
%let _OUTPUT_col3_name = CNT_ALL;
%let _OUTPUT_col3_table = work.W1N7CH1PZ;
%let _OUTPUT_col3_length = 8;
%let _OUTPUT_col3_type = ;
%let _OUTPUT_col3_format = ;
%let _OUTPUT_col3_informat = ;
%let _OUTPUT_col3_label = %nrquote();
%let _OUTPUT_col3_exp = ;
%let _OUTPUT_col3_input_count = 0;
%let _OUTPUT_col4_name = CNT_ERR;
%let _OUTPUT_col4_table = work.W1N7CH1PZ;
%let _OUTPUT_col4_length = 8;
%let _OUTPUT_col4_type = ;
%let _OUTPUT_col4_format = ;
%let _OUTPUT_col4_informat = ;
%let _OUTPUT_col4_label = %nrquote();
%let _OUTPUT_col4_exp = ;
%let _OUTPUT_col4_input_count = 0;
%let _OUTPUT_col5_name = DWH_DT;
%let _OUTPUT_col5_table = work.W1N7CH1PZ;
%let _OUTPUT_col5_length = 8;
%let _OUTPUT_col5_type = ;
%let _OUTPUT_col5_format = DATETIME20.;
%let _OUTPUT_col5_informat = ;
%let _OUTPUT_col5_label = %nrquote();
%let _OUTPUT_col5_exp = ;
%let _OUTPUT_col5_input_count = 0;

%let _OUTPUT1 = work.W1N7CH1PZ;
%let _OUTPUT1_connect = ;
%let _OUTPUT1_engine = ;
%let _OUTPUT1_memtype = DATA;
%let _OUTPUT1_options = %nrquote();
%let _OUTPUT1_alter = %nrquote();
%let _OUTPUT1_path = %nrquote(/User Written_A5ELGGF9.AF0000FU%(WorkTable%));
%let _OUTPUT1_type = 1;
%let _OUTPUT1_label = %nrquote();
/* List of target columns to keep  */ 
%let _OUTPUT1_keep = REP_DT REP_ID PRC CNT_ALL CNT_ERR DWH_DT;
%let _OUTPUT1_col_count = 6;
%let _OUTPUT1_col0_name = REP_DT;
%let _OUTPUT1_col0_table = work.W1N7CH1PZ;
%let _OUTPUT1_col0_length = 8;
%let _OUTPUT1_col0_type = ;
%let _OUTPUT1_col0_format = DATETIME20.;
%let _OUTPUT1_col0_informat = ;
%let _OUTPUT1_col0_label = %nrquote();
%let _OUTPUT1_col0_exp = ;
%let _OUTPUT1_col0_input_count = 0;
%let _OUTPUT1_col1_name = REP_ID;
%let _OUTPUT1_col1_table = work.W1N7CH1PZ;
%let _OUTPUT1_col1_length = 8;
%let _OUTPUT1_col1_type = ;
%let _OUTPUT1_col1_format = ;
%let _OUTPUT1_col1_informat = ;
%let _OUTPUT1_col1_label = %nrquote();
%let _OUTPUT1_col1_exp = ;
%let _OUTPUT1_col1_input_count = 0;
%let _OUTPUT1_col2_name = PRC;
%let _OUTPUT1_col2_table = work.W1N7CH1PZ;
%let _OUTPUT1_col2_length = 8;
%let _OUTPUT1_col2_type = ;
%let _OUTPUT1_col2_format = ;
%let _OUTPUT1_col2_informat = ;
%let _OUTPUT1_col2_label = %nrquote();
%let _OUTPUT1_col2_exp = ;
%let _OUTPUT1_col2_input_count = 0;
%let _OUTPUT1_col3_name = CNT_ALL;
%let _OUTPUT1_col3_table = work.W1N7CH1PZ;
%let _OUTPUT1_col3_length = 8;
%let _OUTPUT1_col3_type = ;
%let _OUTPUT1_col3_format = ;
%let _OUTPUT1_col3_informat = ;
%let _OUTPUT1_col3_label = %nrquote();
%let _OUTPUT1_col3_exp = ;
%let _OUTPUT1_col3_input_count = 0;
%let _OUTPUT1_col4_name = CNT_ERR;
%let _OUTPUT1_col4_table = work.W1N7CH1PZ;
%let _OUTPUT1_col4_length = 8;
%let _OUTPUT1_col4_type = ;
%let _OUTPUT1_col4_format = ;
%let _OUTPUT1_col4_informat = ;
%let _OUTPUT1_col4_label = %nrquote();
%let _OUTPUT1_col4_exp = ;
%let _OUTPUT1_col4_input_count = 0;
%let _OUTPUT1_col5_name = DWH_DT;
%let _OUTPUT1_col5_table = work.W1N7CH1PZ;
%let _OUTPUT1_col5_length = 8;
%let _OUTPUT1_col5_type = ;
%let _OUTPUT1_col5_format = DATETIME20.;
%let _OUTPUT1_col5_informat = ;
%let _OUTPUT1_col5_label = %nrquote();
%let _OUTPUT1_col5_exp = ;
%let _OUTPUT1_col5_input_count = 0;

/*---- Start of User Written Code  ----*/ 

proc sql;
/*Кол-во всех уникальных деривативных сделок*/
	select count(distinct DEALRK) into :CNT_ALL from &_INPUT1 where INSTRUMENTTYPECD in ('CIS');
/*Кол-во ошибочных сделок*/
	select count(distinct DEALRK) into :CNT_ERR from &_INPUT2;
/*Дата успешного выполнения процесса в DWH*/
	select end_dttm into :DWH_DT from &_INPUT3 where JOB_ID = (
  select MAX(job_id) 
  from &_INPUT3 
  where upper(job_nm) = '401_021_MART_DEAL' and success_flg = 'Y'
  );
quit;
%error_check(mpStepType=SQL);

data &_OUTPUT1;
	attrib
		REP_DT length = 8 format = DATETIME20.
		REP_ID length = 8
		PRC length =8
		CNT_ALL length=8
		CNT_ERR length = 8
		DWH_DT length = 8 format = DATETIME20.
	;

	REP_DT = &REPDT.;
	REP_ID = 9;
	PRC = DIVIDE(&CNT_ERR. , &CNT_ALL.) * 100;
	if missing(PRC) then PRC=0;
	CNT_ALL = &CNT_ALL.;
	CNT_ERR = &CNT_ERR.;
	DWH_DT = "&DWH_DT."dt;
run;
%error_check(mpStepType=DATA);
/*---- End of User Written Code  ----*/ 

%rcSet(&syserr); 
%rcSet(&sqlrc); 


/**  Step end User Written **/

/*==========================================================================* 
 * Step:            Table Loader                          A5ELGGF9.AK00011H * 
 * Transform:       Table Loader (Version 2.1)                              * 
 * Description:                                                             * 
 *                                                                          * 
 * Source Table:    User Written - work.W1N7CH1PZ         A5ELGGF9.AF0000FU * 
 * Target Table:    DQ_DRVT_REPORT_PRC -                  A5ELGGF9.AE00004E * 
 *                   dm_dq.DQ_DRVT_REPORT_PRC                               * 
 *==========================================================================*/ 

%let transformID = %quote(A5ELGGF9.AK00011H);
%let trans_rc = 0;
%let etls_stepStartTime = %sysfunc(datetime(), datetime20.); 

%let SYSLAST = %nrquote(work.W1N7CH1PZ); 

%let SYS_SQL_IP_SPEEDO = Y;
%let SYS_SQL_MAPPUTTO = sas_put;
%let SYS_SQLREDUCEPUT = DBMS;
%global etls_sql_pushDown;
%let etls_sql_pushDown = -1;
option DBIDIRECTEXEC;

%global etls_tableExist;
%global etls_numIndex;
%global etls_lastTable;
%let etls_tableExist = -1; 
%let etls_numIndex = -1; 
%let etls_lastTable = &SYSLAST; 

/*---- Define load data macro  ----*/ 

/* --------------------------------------------------------------
   Load Technique Selection: AppendToExisting - AppendProc
   Constraint and index action selections: 'ASIS','ASIS','ASIS','ASIS'
   Additional options selections... 
      Set unmapped to missing on updates: false 
   -------------------------------------------------------------- */
%macro etls_loader;

   %let etls_tableOptions = ;
   
   /*---- Map the columns  ----*/ 
   proc datasets lib = work nolist nowarn memtype = (data view);
      delete WJ2YKJ2;
   quit;
   
   %put %str(NOTE: Mapping columns ...);
   proc sql;
      create view work.WJ2YKJ2 as
         select
            REP_DT   
               informat = DATETIME20.,
            REP_ID   
               format = 7.
               informat = 7.,
            PRC   
               format = 19.8
               informat = 19.8,
            CNT_ALL   
               format = 13.
               informat = 13.,
            CNT_ERR   
               format = 13.
               informat = 13.,
            DWH_DT   
               informat = DATETIME20.
      from &etls_lastTable
      ;
   quit;
   
   %let SYSLAST = work.WJ2YKJ2;
   
   %let etls_lastTable = &SYSLAST; 
   %let etls_tableOptions = ; 
   
   /* Determine if the target table exists  */ 
   %let etls_tableExist = %eval(%sysfunc(exist(dm_dq.DQ_DRVT_REPORT_PRC, DATA)) or 
         %sysfunc(exist(dm_dq.DQ_DRVT_REPORT_PRC, VIEW))); 
   
   /*---- Create a new table  ----*/ 
   %if (&etls_tableExist eq 0) %then 
   %do;  /* if table does not exist  */ 
   
      %put %str(NOTE: Creating table ...);
      
      data dm_dq.DQ_DRVT_REPORT_PRC
              (dbnull = (
                         REP_DT = NO
                         REP_ID = NO
                         PRC = YES
                         CNT_ALL = YES
                         CNT_ERR = YES
                         DWH_DT = YES));
         attrib REP_DT length = 8
            format = DATETIME20.
            informat = DATETIME20.
            label = 'REP_DT'; 
         attrib REP_ID length = 8
            format = 7.
            informat = 7.
            label = 'REP_ID'; 
         attrib PRC length = 8
            format = 19.8
            informat = 19.8
            label = 'PRC'; 
         attrib CNT_ALL length = 8
            format = 13.
            informat = 13.
            label = 'CNT_ALL'; 
         attrib CNT_ERR length = 8
            format = 13.
            informat = 13.
            label = 'CNT_ERR'; 
         attrib DWH_DT length = 8
            format = DATETIME20.
            informat = DATETIME20.
            label = 'DWH_DT'; 
         call missing(of _all_);
         stop;
      run;
      
      %rcSet(&syserr); 
      
   %end;  /* if table does not exist  */ 
   
   /*---- Append  ----*/ 
   %put %str(NOTE: Appending data ...);
   
   proc append base = dm_dq.DQ_DRVT_REPORT_PRC 
      data = &etls_lastTable (&etls_tableOptions)  force ; 
    run; 
   
   %rcSet(&syserr); 
   
   proc datasets lib = work nolist nowarn memtype = (data view);
      delete WJ2YKJ2;
   quit;
   
%mend etls_loader;
%etls_loader;

%let etls_recnt = 0;
%macro etls_recordCheck; 
   %let etls_recCheckExist = %eval(%sysfunc(exist(dm_dq.DQ_DRVT_REPORT_PRC, DATA)) or 
         %sysfunc(exist(dm_dq.DQ_DRVT_REPORT_PRC, VIEW))); 
   
   %if (&etls_recCheckExist) %then
   %do;
      proc sql noprint;
         select count(*) into :etls_recnt from dm_dq.DQ_DRVT_REPORT_PRC;
      quit;
   %end;
%mend etls_recordCheck;
%etls_recordCheck;



/**  Step end Table Loader **/

/*==========================================================================* 
 * Step:            Завершить модуль                      A5ELGGF9.AK00011I * 
 * Transform:       Завершить модуль                                        * 
 * Description:                                                             * 
 *==========================================================================*/ 

%let transformID = %quote(A5ELGGF9.AK00011I);
%let trans_rc = 0;
%let etls_stepStartTime = %sysfunc(datetime(), datetime20.); 

%let _INPUT_count = 0; 
%let _OUTPUT_count = 0; 


/*****************************************************************
* ВЕРСИЯ:
*   $Id: transform_job_finish.sas 247 2012-04-03 07:31:10Z nesterenok $
*
******************************************************************
* НАЗНАЧЕНИЕ:
*   Регистрирует конец модуля ETL.
*
* ПАРАМЕТРЫ:
*   нет
*
******************************************************************/

%macro transform_job_finish;

   /* Продолжаем модуль */
   %job_continue_reg(mpJobType=JOB, mpJobName=&ETLS_JobName., mpPostEvent=N);

   /* Завершаем модуль */
   %job_finish_reg(mpJobType=JOB);

%mend transform_job_finish;

%transform_job_finish;


%rcSet(&syserr); 
%rcSet(&sysrc); 
%rcSet(&sqlrc); 



/**  Step end Завершить модуль **/

%let etls_endTime = %sysfunc(datetime(),datetime.);



/**  Job end 202_090_Mart_DQ_DRVT_REP09 **/

/* Reset jobid and name */
%let jobID = %quote(A5ELGGF9.AH00003N);
%let etls_jobName = %nrquote(202_002_Stream_DQ_DRVT);

/**************************************************************************** 
 * Job:             202_100_Mart_DQ_DRVT_REP10            A5ELGGF9.AH00002G * 
 * Description:     Проверка количества записей не прошедших загрузку в     * 
 *                   DWH.                                                   * 
 *                                                                          * 
 * Metadata Server: bravo14                                                 * 
 * Port:            8561                                                    * 
 * Location:        /DWH_DMDQ_REP/Jobs/Includes/DQ_DRVT                     * 
 *                                                                          * 
 * Server:          SASApp                                A5C46MZY.AQ000002 * 
 *                                                                          * 
 * Source Tables:   VDWH_IRPERIOD_FULL -                  A59ZTHAS.AF0000LY * 
 *                   etl_stg.VDWH_IRPERIOD_FULL                             * 
 *                  IRREGULAR_RATE_RESETS_LEFT -          A5Y50FNE.AE00011I * 
 *                   work_ia.IRREGULAR_RATE_RESETS_LEFT                     * 
 *                  ETL_JOB - etl_sys.ETL_JOB             A59S11RW.AE00001A * 
 *                  DLBHISPD_FULL - etl_stg.DLBHISPD_FULL A59ZTHAS.AF0000PP * 
 *                  DEALSDCA_DRVT_FULL -                  A59ZTHAS.AF0000PM * 
 *                   etl_stg.DEALSDCA_DRVT_FULL                             * 
 *                  DEALSDB_FULL - etl_stg.DEALSDB_FULL   A59ZTHAS.AF0000PJ * 
 *                  DLCHISPD_DRVT_FULL -                  A59ZTHAS.AF0000PS * 
 *                   etl_stg.DLCHISPD_DRVT_FULL                             * 
 *                  FIN_INSTR_LEFT_C -                    A5Y50FNE.AE00013Q * 
 *                   work_ia.FIN_INSTR_LEFT_C                               * 
 *                  FIN_INSTR_LEFT_B -                    A5Y50FNE.AE00013P * 
 *                   work_ia.FIN_INSTR_LEFT_B                               * 
 * Target Tables:   DQ_DRVT_LOAD_10 -                     A5ELGGF9.AE00004B * 
 *                   dm_dq.DQ_DRVT_LOAD_10                                  * 
 *                  DQ_DRVT_REPORT_PRC -                  A5ELGGF9.AE00004E * 
 *                   dm_dq.DQ_DRVT_REPORT_PRC                               * 
 *                  DQ_DRVT_LOAD_10 -                     A5ELGGF9.AE00004B * 
 *                   dm_dq.DQ_DRVT_LOAD_10                                  * 
 *                  DQ_DRVT_REPORT_PRC -                  A5ELGGF9.AE00004E * 
 *                   dm_dq.DQ_DRVT_REPORT_PRC                               * 
 *                                                                          * 
 * Generated on:    16 Июль 2013 г. 17:46:20 MSD                            * 
 * Generated by:    sasdwh                                                  * 
 * Version:         SAS Data Integration Studio 4.5                         * 
 ****************************************************************************/ 

/* General macro variables  */ 
%let jobID = %quote(A5ELGGF9.AH00002G);
%let etls_jobName = %nrquote(202_100_Mart_DQ_DRVT_REP10);
%let etls_userID = %nrquote(sasdwh);


/* Create metadata macro variables */
%let IOMServer      = %nrquote(SASApp);
%let metaPort       = %nrquote(8561);
%let metaServer     = %nrquote(bravo14);

/* Set metadata options */
options metaport       = &metaPort 
        metaserver     = "&metaServer"; 

/* Setup for capturing job status  */ 
%let etls_startTime = %sysfunc(datetime(),datetime.);
%let etls_recordsBefore = 0;
%let etls_recordsAfter = 0;
%let etls_lib = 0;
%let etls_table = 0;

%global etls_debug; 
%macro etls_setDebug; 
   %if %str(&etls_debug) ne 0 %then 
      OPTIONS MPRINT%str(;); 
%mend; 
%etls_setDebug; 

/*---- Start of Pre-Process Code  ----*/ 

%LET REPDT=&DMDQ_REPORT_START_DTTM;
/*---- End of Pre-Process Code  ----*/ 

%rcSet(&syserr); 
%rcSet(&sqlrc); 

/*==========================================================================* 
 * Step:            Начать модуль                         A5ELGGF9.AK00011J * 
 * Transform:       Начать модуль                                           * 
 * Description:                                                             * 
 *==========================================================================*/ 

%let transformID = %quote(A5ELGGF9.AK00011J);
%let trans_rc = 0;
%let etls_stepStartTime = %sysfunc(datetime(), datetime20.); 

%let _INPUT_count = 0; 
%let _OUTPUT_count = 0; 


/*****************************************************************
* ВЕРСИЯ:
*   $Id: transform_job_start.sas 1747 2012-08-01 11:26:13Z nesterenok $
*
******************************************************************
* НАЗНАЧЕНИЕ:
*   Регистрирует начало модуля ETL.
*
* ПАРАМЕТРЫ:
*   нет
*
******************************************************************/

%macro transform_job_start;

   /* Продолжаем поток (или создаем новый) */
   %local lmvStreamName;
   %if %sysfunc(sysexist(LSB_JOBNAME)) %then
      %let lmvStreamName = %scan(%sysfunc(sysget(LSB_JOBNAME)), 3, :);
   %else
      %let lmvStreamName = ;

   %job_continue_reg(mpJobType=STREAM, mpJobName=&lmvStreamName, mpPostEvent=N, mpForcedStart=Y);

   /* Для DI, начинаем поток заново, если старый был начат не сегодня */
   %if %length(&lmvStreamName) eq 0 and &STREAM_START_DT ne %sysfunc(today()) %then %do;
      %job_start_reg(mpJobType=STREAM, mpParentJobId=, mpJobName=&lmvStreamName.);
   %end;

   /* Начинаем модуль */
   %job_start_reg(mpJobType=JOB, mpParentJobId=&STREAM_ID, mpJobName=&ETLS_JobName.);

%mend transform_job_start;

%transform_job_start;


%rcSet(&syserr); 
%rcSet(&sysrc); 
%rcSet(&sqlrc); 



/**  Step end Начать модуль **/

/*==========================================================================* 
 * Step:            Очистить таблицу                      A5ELGGF9.AK00011K * 
 * Transform:       Очистить таблицу                                        * 
 * Description:                                                             * 
 *                                                                          * 
 * Target Table:    DQ_DRVT_LOAD_10 -                     A5ELGGF9.AE00004B * 
 *                   dm_dq.DQ_DRVT_LOAD_10                                  * 
 *==========================================================================*/ 

%let transformID = %quote(A5ELGGF9.AK00011K);
%let trans_rc = 0;
%let etls_stepStartTime = %sysfunc(datetime(), datetime20.); 

%let _INPUT_count = 0; 
%let _OUTPUT_count = 1; 
%let _OUTPUT = dm_dq.DQ_DRVT_LOAD_10;
%let _OUTPUT_connect =  DEFER=YES PATH=DWH.IMB.RU AUTHDOMAIN="OraAuth_DM_DQ" 
;
%let _OUTPUT_engine = ORACLE;
%let _OUTPUT_memtype = DATA;
%let _OUTPUT_options = %nrquote();
%let _OUTPUT_alter = %nrquote();
%let _OUTPUT_path = %nrquote(/DWH_DMDQ_REP/Marts/DQ_DRVT/DQ_DRVT_LOAD_10%(Table%));
%let _OUTPUT_type = 1;
%let _OUTPUT_label = %nrquote();
/* List of target columns to keep  */ 
%let _OUTPUT_keep = REPORTDATE OBJECTTYPE NUMBERSTAGE NUMBERDWH;

%let tpOut = dm_dq.DQ_DRVT_LOAD_10;
%let tpOut_connect =  DEFER=YES PATH=DWH.IMB.RU AUTHDOMAIN="OraAuth_DM_DQ" 
;
%let tpOut_engine = ORACLE;
%let tpOut_memtype = DATA;
%let tpOut_options = %nrquote();
%let tpOut_alter = %nrquote();
%let tpOut_path = %nrquote(/DWH_DMDQ_REP/Marts/DQ_DRVT/DQ_DRVT_LOAD_10%(Table%));
%let tpOut_type = 1;
%let tpOut_label = %nrquote();
/* List of target columns to keep  */ 
%let tpOut_keep = REPORTDATE OBJECTTYPE NUMBERSTAGE NUMBERDWH;


%let tpWhere = %nrquote(REPORTDATE = &DMDQ_REPORT_START_DTTM);

/* List of target columns to keep  */ 
%let _keep = REPORTDATE OBJECTTYPE NUMBERSTAGE NUMBERDWH;
/* List of target columns to keep  */ 
%let keep = REPORTDATE OBJECTTYPE NUMBERSTAGE NUMBERDWH;
/*****************************************************************
* ВЕРСИЯ:
*   $Id: transform_table_delete.sas 2142 2012-08-17 14:15:09Z nesterenok $
*
******************************************************************
* НАЗНАЧЕНИЕ:
*   Удаляет из указанной таблицы записи.
*
* ПАРАМЕТРЫ:
*   tpOut                  + имя целевой таблицы, которая будет очищена
*   tpWhere                - условие отбора записей под удаление
*                            по умолчанию отсутствует, т.е. удаляются все записи
*
******************************************************************/

%macro transform_table_delete;

   /* Удаляем записи */
   /* TODO: truncate */
   proc sql;
      delete from &tpOut
      %if %length(&tpWhere) gt 0 %then %do;
         where (%unquote(&tpWhere))
      %end;
      ;
   quit;
   %error_check (mpStepType=SQL);

%mend transform_table_delete;

%transform_table_delete;


%rcSet(&syserr); 
%rcSet(&sysrc); 
%rcSet(&sqlrc); 



/**  Step end Очистить таблицу **/

/*==========================================================================* 
 * Step:            Очистить таблицу                      A5ELGGF9.AK00011L * 
 * Transform:       Очистить таблицу                                        * 
 * Description:                                                             * 
 *                                                                          * 
 * Target Table:    DQ_DRVT_REPORT_PRC -                  A5ELGGF9.AE00004E * 
 *                   dm_dq.DQ_DRVT_REPORT_PRC                               * 
 *==========================================================================*/ 

%let transformID = %quote(A5ELGGF9.AK00011L);
%let trans_rc = 0;
%let etls_stepStartTime = %sysfunc(datetime(), datetime20.); 

%let _INPUT_count = 0; 
%let _OUTPUT_count = 1; 
%let _OUTPUT = dm_dq.DQ_DRVT_REPORT_PRC;
%let _OUTPUT_connect =  DEFER=YES PATH=DWH.IMB.RU AUTHDOMAIN="OraAuth_DM_DQ" 
;
%let _OUTPUT_engine = ORACLE;
%let _OUTPUT_memtype = DATA;
%let _OUTPUT_options = %nrquote();
%let _OUTPUT_alter = %nrquote();
%let _OUTPUT_path = %nrquote(/DWH_DMDQ_REP/Marts/DQ_DRVT/DQ_DRVT_REPORT_PRC%(Table%));
%let _OUTPUT_type = 1;
%let _OUTPUT_label = %nrquote();
/* List of target columns to keep  */ 
%let _OUTPUT_keep = REP_DT REP_ID PRC CNT_ALL CNT_ERR DWH_DT;

%let tpOut = dm_dq.DQ_DRVT_REPORT_PRC;
%let tpOut_connect =  DEFER=YES PATH=DWH.IMB.RU AUTHDOMAIN="OraAuth_DM_DQ" 
;
%let tpOut_engine = ORACLE;
%let tpOut_memtype = DATA;
%let tpOut_options = %nrquote();
%let tpOut_alter = %nrquote();
%let tpOut_path = %nrquote(/DWH_DMDQ_REP/Marts/DQ_DRVT/DQ_DRVT_REPORT_PRC%(Table%));
%let tpOut_type = 1;
%let tpOut_label = %nrquote();
/* List of target columns to keep  */ 
%let tpOut_keep = REP_DT REP_ID PRC CNT_ALL CNT_ERR DWH_DT;


%let tpWhere = %nrquote(REP_ID = 10 AND REP_DT = &DMDQ_REPORT_START_DTTM);

/* List of target columns to keep  */ 
%let _keep = REP_DT REP_ID PRC CNT_ALL CNT_ERR DWH_DT;
/* List of target columns to keep  */ 
%let keep = REP_DT REP_ID PRC CNT_ALL CNT_ERR DWH_DT;
/*****************************************************************
* ВЕРСИЯ:
*   $Id: transform_table_delete.sas 2142 2012-08-17 14:15:09Z nesterenok $
*
******************************************************************
* НАЗНАЧЕНИЕ:
*   Удаляет из указанной таблицы записи.
*
* ПАРАМЕТРЫ:
*   tpOut                  + имя целевой таблицы, которая будет очищена
*   tpWhere                - условие отбора записей под удаление
*                            по умолчанию отсутствует, т.е. удаляются все записи
*
******************************************************************/

%macro transform_table_delete;

   /* Удаляем записи */
   /* TODO: truncate */
   proc sql;
      delete from &tpOut
      %if %length(&tpWhere) gt 0 %then %do;
         where (%unquote(&tpWhere))
      %end;
      ;
   quit;
   %error_check (mpStepType=SQL);

%mend transform_table_delete;

%transform_table_delete;


%rcSet(&syserr); 
%rcSet(&sysrc); 
%rcSet(&sqlrc); 



/**  Step end Очистить таблицу **/

/*==========================================================================* 
 * Step:            Append                                A5ELGGF9.AK00011M * 
 * Transform:       Append                                                  * 
 * Description:                                                             * 
 *                                                                          * 
 * Source Tables:   DLBHISPD_FULL - etl_stg.DLBHISPD_FULL A59ZTHAS.AF0000PP * 
 *                  DEALSDCA_DRVT_FULL -                  A59ZTHAS.AF0000PM * 
 *                   etl_stg.DEALSDCA_DRVT_FULL                             * 
 *                  DEALSDB_FULL - etl_stg.DEALSDB_FULL   A59ZTHAS.AF0000PJ * 
 *                  DLCHISPD_DRVT_FULL -                  A59ZTHAS.AF0000PS * 
 *                   etl_stg.DLCHISPD_DRVT_FULL                             * 
 * Target Table:    Append - work.W9LN6GVX                A5ELGGF9.AF0000FV * 
 *==========================================================================*/ 

%let transformID = %quote(A5ELGGF9.AK00011M);
%let trans_rc = 0;
%let etls_stepStartTime = %sysfunc(datetime(), datetime20.); 

%let etls_recnt = 0;
%macro etls_recordCheck; 
   %let etls_recCheckExist = %eval(%sysfunc(exist(etl_stg.DLBHISPD_FULL, DATA)) or 
         %sysfunc(exist(etl_stg.DLBHISPD_FULL, VIEW))); 
   
   %if (&etls_recCheckExist) %then
   %do;
      proc sql noprint;
         select count(*) into :etls_recnt from etl_stg.DLBHISPD_FULL;
      quit;
   %end;
%mend etls_recordCheck;
%etls_recordCheck;

%let dbxrc = %eval(%sysfunc(exist(etl_stg.DLBHISPD_FULL, DATA)) or 
      %sysfunc(exist(etl_stg.DLBHISPD_FULL, VIEW))); 

/*---- Map the columns  ----*/ 
proc datasets lib = work nolist nowarn memtype = (data view);
   delete WJ2Z0F7;
quit;

%put %str(NOTE: Mapping columns ...);
proc sql;
   create view work.WJ2Z0F7 as
      select
         DLNO
   from etl_stg.DLBHISPD_FULL
   ;
quit;

%let SYSLAST = work.WJ2Z0F7;

%let dbxrc = %eval(%sysfunc(exist(etl_stg.DEALSDCA_DRVT_FULL, DATA)) or 
      %sysfunc(exist(etl_stg.DEALSDCA_DRVT_FULL, VIEW))); 

/*---- Map the columns  ----*/ 
proc datasets lib = work nolist nowarn memtype = (data view);
   delete WJ2Z0FB;
quit;

%put %str(NOTE: Mapping columns ...);
proc sql;
   create view work.WJ2Z0FB as
      select
         DLNO
   from etl_stg.DEALSDCA_DRVT_FULL
   ;
quit;

%let SYSLAST = work.WJ2Z0FB;

%let dbxrc = %eval(%sysfunc(exist(etl_stg.DEALSDB_FULL, DATA)) or 
      %sysfunc(exist(etl_stg.DEALSDB_FULL, VIEW))); 

/*---- Map the columns  ----*/ 
proc datasets lib = work nolist nowarn memtype = (data view);
   delete WJ2Z0FG;
quit;

%put %str(NOTE: Mapping columns ...);
proc sql;
   create view work.WJ2Z0FG as
      select
         DLNO
   from etl_stg.DEALSDB_FULL
   ;
quit;

%let SYSLAST = work.WJ2Z0FG;

%let dbxrc = %eval(%sysfunc(exist(etl_stg.DLCHISPD_DRVT_FULL, DATA)) or 
      %sysfunc(exist(etl_stg.DLCHISPD_DRVT_FULL, VIEW))); 

/*---- Map the columns  ----*/ 
proc datasets lib = work nolist nowarn memtype = (data view);
   delete WJ2Z0FK;
quit;

%put %str(NOTE: Mapping columns ...);
proc sql;
   create view work.WJ2Z0FK as
      select
         DLNO
   from etl_stg.DLCHISPD_DRVT_FULL
   ;
quit;

%let SYSLAST = work.WJ2Z0FK;

proc datasets lib = work nolist nowarn memtype = (data view);
   delete W9LN6GVX;
quit;

data work.W9LN6GVX / view=work.W9LN6GVX;
   set work.WJ2Z0F7
       work.WJ2Z0FB
       work.WJ2Z0FG
       work.WJ2Z0FK;
   keep DLNO; 
run;

%rcSet(&syserr); 



/**  Step end Append **/

/*==========================================================================* 
 * Step:            Sort                                  A5ELGGF9.AK00011N * 
 * Transform:       Sort                                                    * 
 * Description:                                                             * 
 *                                                                          * 
 * Source Table:    Append - work.W9LN6GVX                A5ELGGF9.AF0000FV * 
 * Target Table:    Sort - work.W9LNTNAS                  A5ELGGF9.AF0000FW * 
 *==========================================================================*/ 

%let transformID = %quote(A5ELGGF9.AK00011N);
%let trans_rc = 0;
%let etls_stepStartTime = %sysfunc(datetime(), datetime20.); 

%let etls_recnt = -1;
%let SYSLAST = %nrquote(work.W9LN6GVX); 

proc datasets lib = work nolist nowarn memtype = (data view);
   delete W9LNTNAS;
quit;

proc sort data = &SYSLAST 
   out = work.W9LNTNAS
      NODUPKEY ; 
   by
      DLNO
   ;
run; 

%rcSet(&syserr); 



/**  Step end Sort **/

/*==========================================================================* 
 * Step:            Append                                A5ELGGF9.AK00011O * 
 * Transform:       Append                                                  * 
 * Description:                                                             * 
 *                                                                          * 
 * Source Tables:   FIN_INSTR_LEFT_C -                    A5Y50FNE.AE00013Q * 
 *                   work_ia.FIN_INSTR_LEFT_C                               * 
 *                  FIN_INSTR_LEFT_B -                    A5Y50FNE.AE00013P * 
 *                   work_ia.FIN_INSTR_LEFT_B                               * 
 * Target Table:    Append - work.W9LO4AYK                A5ELGGF9.AF0000FX * 
 *==========================================================================*/ 

%let transformID = %quote(A5ELGGF9.AK00011O);
%let trans_rc = 0;
%let etls_stepStartTime = %sysfunc(datetime(), datetime20.); 

%let etls_recCheckExist = 0; 
%let etls_recnt = 0; 
%macro etls_recordCheck; 
   %let etls_recCheckExist = %eval(%sysfunc(exist(work_ia.FIN_INSTR_LEFT_C, DATA)) or 
         %sysfunc(exist(work_ia.FIN_INSTR_LEFT_C, VIEW))); 
   
   %if (&etls_recCheckExist) %then
   %do;
      %local etls_syntaxcheck; 
      %let etls_syntaxcheck = %sysfunc(getoption(syntaxcheck)); 
      /* Turn off syntaxcheck option to perform following steps  */ 
      options nosyntaxcheck;
      
      proc contents data = work_ia.FIN_INSTR_LEFT_C out = work.etls_contents(keep = nobs) noprint; 
      run; 
      
      data _null_; 
         set work.etls_contents (obs = 1); 
         call symput("etls_recnt", left(put(nobs,32.))); 
      run;
      
      proc datasets lib = work nolist nowarn memtype = (data view);
         delete etls_contents;
      quit;
      
      /* Reset syntaxcheck option to previous setting  */ 
      options &etls_syntaxcheck; 
   %end;
%mend etls_recordCheck;
%etls_recordCheck;

%let dbxrc = %eval(%sysfunc(exist(work_ia.FIN_INSTR_LEFT_C, DATA)) or 
      %sysfunc(exist(work_ia.FIN_INSTR_LEFT_C, VIEW))); 

/*---- Map the columns  ----*/ 
proc datasets lib = work nolist nowarn memtype = (data view);
   delete WJ2Z0GP;
quit;

%put %str(NOTE: Mapping columns ...);
proc sql;
   create view work.WJ2Z0GP as
      select
         DLNO
   from work_ia.FIN_INSTR_LEFT_C
   ;
quit;

%let SYSLAST = work.WJ2Z0GP;

%let dbxrc = %eval(%sysfunc(exist(work_ia.FIN_INSTR_LEFT_B, DATA)) or 
      %sysfunc(exist(work_ia.FIN_INSTR_LEFT_B, VIEW))); 

/*---- Map the columns  ----*/ 
proc datasets lib = work nolist nowarn memtype = (data view);
   delete WJ2Z0GT;
quit;

%put %str(NOTE: Mapping columns ...);
proc sql;
   create view work.WJ2Z0GT as
      select
         DLNO
   from work_ia.FIN_INSTR_LEFT_B
   ;
quit;

%let SYSLAST = work.WJ2Z0GT;

proc datasets lib = work nolist nowarn memtype = (data view);
   delete W9LO4AYK;
quit;

data work.W9LO4AYK / view=work.W9LO4AYK;
   set work.WJ2Z0GP
       work.WJ2Z0GT;
   keep DLNO; 
run;

%rcSet(&syserr); 



/**  Step end Append **/

/*==========================================================================* 
 * Step:            Sort                                  A5ELGGF9.AK00011P * 
 * Transform:       Sort                                                    * 
 * Description:                                                             * 
 *                                                                          * 
 * Source Table:    Append - work.W9LO4AYK                A5ELGGF9.AF0000FX * 
 * Target Table:    Sort - work.W9LO4WUC                  A5ELGGF9.AF0000FY * 
 *==========================================================================*/ 

%let transformID = %quote(A5ELGGF9.AK00011P);
%let trans_rc = 0;
%let etls_stepStartTime = %sysfunc(datetime(), datetime20.); 

%let etls_recnt = -1;
%let SYSLAST = %nrquote(work.W9LO4AYK); 

proc datasets lib = work nolist nowarn memtype = (data view);
   delete W9LO4WUC;
quit;

proc sort data = &SYSLAST 
   out = work.W9LO4WUC
      NODUPKEY ; 
   by
      DLNO
   ;
run; 

%rcSet(&syserr); 



/**  Step end Sort **/

/*==========================================================================* 
 * Step:            User Written                          A5ELGGF9.AK00011Q * 
 * Transform:       User Written                                            * 
 * Description:     Провека условий DQСделки                                * 
 *                                                                          * 
 * Source Tables:   Sort - work.W9LNTNAS                  A5ELGGF9.AF0000FW * 
 *                  Sort - work.W9LO4WUC                  A5ELGGF9.AF0000FY * 
 * Target Table:    User Written - work.W1N7ON2W4         A5ELGGF9.AF0000FZ * 
 *                                                                          * 
 * User Written:    SourceCode                                              * 
 *==========================================================================*/ 

%let transformID = %quote(A5ELGGF9.AK00011Q);
%let trans_rc = 0;
%let etls_stepStartTime = %sysfunc(datetime(), datetime20.); 

%let etls_recCheckExist = 0; 
%let etls_recnt = 0; 
%macro etls_recordCheck; 
   %let etls_recCheckExist = %eval(%sysfunc(exist(work.W9LNTNAS, DATA)) or 
         %sysfunc(exist(work.W9LNTNAS, VIEW))); 
   
   %if (&etls_recCheckExist) %then
   %do;
      %local etls_syntaxcheck; 
      %let etls_syntaxcheck = %sysfunc(getoption(syntaxcheck)); 
      /* Turn off syntaxcheck option to perform following steps  */ 
      options nosyntaxcheck;
      
      proc contents data = work.W9LNTNAS out = work.etls_contents(keep = nobs) noprint; 
      run; 
      
      data _null_; 
         set work.etls_contents (obs = 1); 
         call symput("etls_recnt", left(put(nobs,32.))); 
      run;
      
      proc datasets lib = work nolist nowarn memtype = (data view);
         delete etls_contents;
      quit;
      
      /* Reset syntaxcheck option to previous setting  */ 
      options &etls_syntaxcheck; 
   %end;
%mend etls_recordCheck;
%etls_recordCheck;

%let _INPUT_count = 2;
%let _INPUT = work.W9LNTNAS;
%let _INPUT_connect = ;
%let _INPUT_engine = ;
%let _INPUT_memtype = DATA;
%let _INPUT_options = %nrquote();
%let _INPUT_alter = %nrquote();
%let _INPUT_path = %nrquote(/Sort_A5ELGGF9.AF0000FW%(WorkTable%));
%let _INPUT_type = 1;
%let _INPUT_label = %nrquote();

%let _INPUT1 = work.W9LNTNAS;
%let _INPUT1_connect = ;
%let _INPUT1_engine = ;
%let _INPUT1_memtype = DATA;
%let _INPUT1_options = %nrquote();
%let _INPUT1_alter = %nrquote();
%let _INPUT1_path = %nrquote(/Sort_A5ELGGF9.AF0000FW%(WorkTable%));
%let _INPUT1_type = 1;
%let _INPUT1_label = %nrquote();

%let _INPUT2 = work.W9LO4WUC;
%let _INPUT2_connect = ;
%let _INPUT2_engine = ;
%let _INPUT2_memtype = DATA;
%let _INPUT2_options = %nrquote();
%let _INPUT2_alter = %nrquote();
%let _INPUT2_path = %nrquote(/Sort_A5ELGGF9.AF0000FY%(WorkTable%));
%let _INPUT2_type = 1;
%let _INPUT2_label = %nrquote();

%let _OUTPUT_count = 1;
%let _OUTPUT = work.W1N7ON2W4;
%let _OUTPUT_connect = ;
%let _OUTPUT_engine = ;
%let _OUTPUT_memtype = DATA;
%let _OUTPUT_options = %nrquote();
%let _OUTPUT_alter = %nrquote();
%let _OUTPUT_path = %nrquote(/User Written_A5ELGGF9.AF0000FZ%(WorkTable%));
%let _OUTPUT_type = 1;
%let _OUTPUT_label = %nrquote();
/* List of target columns to keep  */ 
%let _OUTPUT_keep = REPORTDATE OBJECTTYPE NUMBERSTAGE NUMBERDWH;
%let _OUTPUT_col_count = 4;
%let _OUTPUT_col0_name = REPORTDATE;
%let _OUTPUT_col0_table = work.W1N7ON2W4;
%let _OUTPUT_col0_length = 8;
%let _OUTPUT_col0_type = ;
%let _OUTPUT_col0_format = DATETIME20.;
%let _OUTPUT_col0_informat = DATETIME20.;
%let _OUTPUT_col0_label = %nrquote();
%let _OUTPUT_col0_exp = ;
%let _OUTPUT_col0_input_count = 0;
%let _OUTPUT_col1_name = OBJECTTYPE;
%let _OUTPUT_col1_table = work.W1N7ON2W4;
%let _OUTPUT_col1_length = 20;
%let _OUTPUT_col1_type = $;
%let _OUTPUT_col1_format = $20.;
%let _OUTPUT_col1_informat = $20.;
%let _OUTPUT_col1_label = %nrquote();
%let _OUTPUT_col1_exp = ;
%let _OUTPUT_col1_input_count = 0;
%let _OUTPUT_col2_name = NUMBERSTAGE;
%let _OUTPUT_col2_table = work.W1N7ON2W4;
%let _OUTPUT_col2_length = 8;
%let _OUTPUT_col2_type = ;
%let _OUTPUT_col2_format = ;
%let _OUTPUT_col2_informat = ;
%let _OUTPUT_col2_label = %nrquote();
%let _OUTPUT_col2_exp = ;
%let _OUTPUT_col2_input_count = 0;
%let _OUTPUT_col3_name = NUMBERDWH;
%let _OUTPUT_col3_table = work.W1N7ON2W4;
%let _OUTPUT_col3_length = 8;
%let _OUTPUT_col3_type = ;
%let _OUTPUT_col3_format = ;
%let _OUTPUT_col3_informat = ;
%let _OUTPUT_col3_label = %nrquote();
%let _OUTPUT_col3_exp = ;
%let _OUTPUT_col3_input_count = 0;

%let _OUTPUT1 = work.W1N7ON2W4;
%let _OUTPUT1_connect = ;
%let _OUTPUT1_engine = ;
%let _OUTPUT1_memtype = DATA;
%let _OUTPUT1_options = %nrquote();
%let _OUTPUT1_alter = %nrquote();
%let _OUTPUT1_path = %nrquote(/User Written_A5ELGGF9.AF0000FZ%(WorkTable%));
%let _OUTPUT1_type = 1;
%let _OUTPUT1_label = %nrquote();
/* List of target columns to keep  */ 
%let _OUTPUT1_keep = REPORTDATE OBJECTTYPE NUMBERSTAGE NUMBERDWH;
%let _OUTPUT1_col_count = 4;
%let _OUTPUT1_col0_name = REPORTDATE;
%let _OUTPUT1_col0_table = work.W1N7ON2W4;
%let _OUTPUT1_col0_length = 8;
%let _OUTPUT1_col0_type = ;
%let _OUTPUT1_col0_format = DATETIME20.;
%let _OUTPUT1_col0_informat = DATETIME20.;
%let _OUTPUT1_col0_label = %nrquote();
%let _OUTPUT1_col0_exp = ;
%let _OUTPUT1_col0_input_count = 0;
%let _OUTPUT1_col1_name = OBJECTTYPE;
%let _OUTPUT1_col1_table = work.W1N7ON2W4;
%let _OUTPUT1_col1_length = 20;
%let _OUTPUT1_col1_type = $;
%let _OUTPUT1_col1_format = $20.;
%let _OUTPUT1_col1_informat = $20.;
%let _OUTPUT1_col1_label = %nrquote();
%let _OUTPUT1_col1_exp = ;
%let _OUTPUT1_col1_input_count = 0;
%let _OUTPUT1_col2_name = NUMBERSTAGE;
%let _OUTPUT1_col2_table = work.W1N7ON2W4;
%let _OUTPUT1_col2_length = 8;
%let _OUTPUT1_col2_type = ;
%let _OUTPUT1_col2_format = ;
%let _OUTPUT1_col2_informat = ;
%let _OUTPUT1_col2_label = %nrquote();
%let _OUTPUT1_col2_exp = ;
%let _OUTPUT1_col2_input_count = 0;
%let _OUTPUT1_col3_name = NUMBERDWH;
%let _OUTPUT1_col3_table = work.W1N7ON2W4;
%let _OUTPUT1_col3_length = 8;
%let _OUTPUT1_col3_type = ;
%let _OUTPUT1_col3_format = ;
%let _OUTPUT1_col3_informat = ;
%let _OUTPUT1_col3_label = %nrquote();
%let _OUTPUT1_col3_exp = ;
%let _OUTPUT1_col3_input_count = 0;

/*---- Start of User Written Code  ----*/ 


proc sql;
	select count(DLNO) into :NOBS_FULL from &_INPUT1;
	select count(DLNO) into :NOBS_LEFT from &_INPUT2;
quit;
%error_check(mpStepType=SQL);

data &_OUTPUT1;
	attrib
		REPORTDATE length = 8 format = DATETIME20. informat = DATETIME20.
		OBJECTTYPE length = $20 format = $20. informat = $20.
		NUMBERSTAGE length = 8
		NUMBERDWH length = 8
	;
	REPORTDATE = &REPDT;
	OBJECTTYPE = 'Сделка';
	NUMBERSTAGE = &NOBS_FULL;
	NUMBERDWH = &NOBS_LEFT;
run;
%error_check(mpStepType=DATA);

/*---- End of User Written Code  ----*/ 

%rcSet(&syserr); 
%rcSet(&sqlrc); 


/**  Step end User Written **/

/*==========================================================================* 
 * Step:            User Written                          A5ELGGF9.AK00011R * 
 * Transform:       User Written                                            * 
 * Description:     Провека условий DQПроцентный период                     * 
 *                                                                          * 
 * Source Tables:   VDWH_IRPERIOD_FULL -                  A59ZTHAS.AF0000LY * 
 *                   etl_stg.VDWH_IRPERIOD_FULL                             * 
 *                  IRREGULAR_RATE_RESETS_LEFT -          A5Y50FNE.AE00011I * 
 *                   work_ia.IRREGULAR_RATE_RESETS_LEFT                     * 
 * Target Table:    User Written - work.W1N8DER6G         A5ELGGF9.AF0000G0 * 
 *                                                                          * 
 * User Written:    SourceCode                                              * 
 *==========================================================================*/ 

%let transformID = %quote(A5ELGGF9.AK00011R);
%let trans_rc = 0;
%let etls_stepStartTime = %sysfunc(datetime(), datetime20.); 

%let etls_recnt = 0;
%macro etls_recordCheck; 
   %let etls_recCheckExist = %eval(%sysfunc(exist(etl_stg.VDWH_IRPERIOD_FULL, DATA)) or 
         %sysfunc(exist(etl_stg.VDWH_IRPERIOD_FULL, VIEW))); 
   
   %if (&etls_recCheckExist) %then
   %do;
      proc sql noprint;
         select count(*) into :etls_recnt from etl_stg.VDWH_IRPERIOD_FULL;
      quit;
   %end;
%mend etls_recordCheck;
%etls_recordCheck;

%let _INPUT_count = 2;
%let _INPUT = etl_stg.VDWH_IRPERIOD_FULL;
%let _INPUT_connect =  DEFER=YES PATH=DWH.IMB.RU AUTHDOMAIN="OraAuth_ETL_STG" 
;
%let _INPUT_engine = ORACLE;
%let _INPUT_memtype = DATA;
%let _INPUT_options = %nrquote();
%let _INPUT_alter = %nrquote();
%let _INPUT_path = %nrquote(/DWH_DWHDDS_STG/Tables/ETL_STG/A2P/VDWH_IRPERIOD_FULL%(Table%));
%let _INPUT_type = 1;
%let _INPUT_label = %nrquote();

%let _INPUT1 = etl_stg.VDWH_IRPERIOD_FULL;
%let _INPUT1_connect =  DEFER=YES PATH=DWH.IMB.RU AUTHDOMAIN="OraAuth_ETL_STG" 
;
%let _INPUT1_engine = ORACLE;
%let _INPUT1_memtype = DATA;
%let _INPUT1_options = %nrquote();
%let _INPUT1_alter = %nrquote();
%let _INPUT1_path = %nrquote(/DWH_DWHDDS_STG/Tables/ETL_STG/A2P/VDWH_IRPERIOD_FULL%(Table%));
%let _INPUT1_type = 1;
%let _INPUT1_label = %nrquote();

%let _INPUT2 = work_ia.IRREGULAR_RATE_RESETS_LEFT;
%let _INPUT2_connect = ;
%let _INPUT2_engine = BASE;
%let _INPUT2_memtype = DATA;
%let _INPUT2_options = %nrquote();
%let _INPUT2_alter = %nrquote();
%let _INPUT2_path = %nrquote(/DWH_DWHDDS_IA/Tables/WORK_IA/Drv_Facts/IRREGULAR_RATE_RESETS_LEFT%(Table%));
%let _INPUT2_type = 1;
%let _INPUT2_label = %nrquote();

%let _OUTPUT_count = 1;
%let _OUTPUT = work.W1N8DER6G;
%let _OUTPUT_connect = ;
%let _OUTPUT_engine = ;
%let _OUTPUT_memtype = DATA;
%let _OUTPUT_options = %nrquote();
%let _OUTPUT_alter = %nrquote();
%let _OUTPUT_path = %nrquote(/User Written_A5ELGGF9.AF0000G0%(WorkTable%));
%let _OUTPUT_type = 1;
%let _OUTPUT_label = %nrquote();
/* List of target columns to keep  */ 
%let _OUTPUT_keep = REPORTDATE OBJECTTYPE NUMBERSTAGE NUMBERDWH;
%let _OUTPUT_col_count = 4;
%let _OUTPUT_col0_name = REPORTDATE;
%let _OUTPUT_col0_table = work.W1N8DER6G;
%let _OUTPUT_col0_length = 8;
%let _OUTPUT_col0_type = ;
%let _OUTPUT_col0_format = DATETIME20.;
%let _OUTPUT_col0_informat = DATETIME20.;
%let _OUTPUT_col0_label = %nrquote();
%let _OUTPUT_col0_exp = ;
%let _OUTPUT_col0_input_count = 0;
%let _OUTPUT_col1_name = OBJECTTYPE;
%let _OUTPUT_col1_table = work.W1N8DER6G;
%let _OUTPUT_col1_length = 20;
%let _OUTPUT_col1_type = $;
%let _OUTPUT_col1_format = $20.;
%let _OUTPUT_col1_informat = $20.;
%let _OUTPUT_col1_label = %nrquote();
%let _OUTPUT_col1_exp = ;
%let _OUTPUT_col1_input_count = 0;
%let _OUTPUT_col2_name = NUMBERSTAGE;
%let _OUTPUT_col2_table = work.W1N8DER6G;
%let _OUTPUT_col2_length = 8;
%let _OUTPUT_col2_type = ;
%let _OUTPUT_col2_format = ;
%let _OUTPUT_col2_informat = ;
%let _OUTPUT_col2_label = %nrquote();
%let _OUTPUT_col2_exp = ;
%let _OUTPUT_col2_input_count = 0;
%let _OUTPUT_col3_name = NUMBERDWH;
%let _OUTPUT_col3_table = work.W1N8DER6G;
%let _OUTPUT_col3_length = 8;
%let _OUTPUT_col3_type = ;
%let _OUTPUT_col3_format = ;
%let _OUTPUT_col3_informat = ;
%let _OUTPUT_col3_label = %nrquote();
%let _OUTPUT_col3_exp = ;
%let _OUTPUT_col3_input_count = 0;

%let _OUTPUT1 = work.W1N8DER6G;
%let _OUTPUT1_connect = ;
%let _OUTPUT1_engine = ;
%let _OUTPUT1_memtype = DATA;
%let _OUTPUT1_options = %nrquote();
%let _OUTPUT1_alter = %nrquote();
%let _OUTPUT1_path = %nrquote(/User Written_A5ELGGF9.AF0000G0%(WorkTable%));
%let _OUTPUT1_type = 1;
%let _OUTPUT1_label = %nrquote();
/* List of target columns to keep  */ 
%let _OUTPUT1_keep = REPORTDATE OBJECTTYPE NUMBERSTAGE NUMBERDWH;
%let _OUTPUT1_col_count = 4;
%let _OUTPUT1_col0_name = REPORTDATE;
%let _OUTPUT1_col0_table = work.W1N8DER6G;
%let _OUTPUT1_col0_length = 8;
%let _OUTPUT1_col0_type = ;
%let _OUTPUT1_col0_format = DATETIME20.;
%let _OUTPUT1_col0_informat = DATETIME20.;
%let _OUTPUT1_col0_label = %nrquote();
%let _OUTPUT1_col0_exp = ;
%let _OUTPUT1_col0_input_count = 0;
%let _OUTPUT1_col1_name = OBJECTTYPE;
%let _OUTPUT1_col1_table = work.W1N8DER6G;
%let _OUTPUT1_col1_length = 20;
%let _OUTPUT1_col1_type = $;
%let _OUTPUT1_col1_format = $20.;
%let _OUTPUT1_col1_informat = $20.;
%let _OUTPUT1_col1_label = %nrquote();
%let _OUTPUT1_col1_exp = ;
%let _OUTPUT1_col1_input_count = 0;
%let _OUTPUT1_col2_name = NUMBERSTAGE;
%let _OUTPUT1_col2_table = work.W1N8DER6G;
%let _OUTPUT1_col2_length = 8;
%let _OUTPUT1_col2_type = ;
%let _OUTPUT1_col2_format = ;
%let _OUTPUT1_col2_informat = ;
%let _OUTPUT1_col2_label = %nrquote();
%let _OUTPUT1_col2_exp = ;
%let _OUTPUT1_col2_input_count = 0;
%let _OUTPUT1_col3_name = NUMBERDWH;
%let _OUTPUT1_col3_table = work.W1N8DER6G;
%let _OUTPUT1_col3_length = 8;
%let _OUTPUT1_col3_type = ;
%let _OUTPUT1_col3_format = ;
%let _OUTPUT1_col3_informat = ;
%let _OUTPUT1_col3_label = %nrquote();
%let _OUTPUT1_col3_exp = ;
%let _OUTPUT1_col3_input_count = 0;

/*---- Start of User Written Code  ----*/ 

proc sort
	data = &_INPUT1
	nodupkey
	out = _null_
	dupout = dups;
	by ARM302P_ID Period_ID;
quit;
%error_check(mpStepType=DATA);

proc sql;
	select count(*) into :NOBS_FULL from &_INPUT1;
	select count(*) into :NOBS_LEFT1 from dups;
	select count(*) into :NOBS_LEFT2 from &_INPUT2;
quit;
%error_check(mpStepType=SQL);

data &_OUTPUT1;
	attrib
		REPORTDATE length = 8 format = DATETIME20. informat = DATETIME20.
		OBJECTTYPE length = $20 format = $20. informat = $20.
		NUMBERSTAGE length = 8
		NUMBERDWH length = 8
	;
	REPORTDATE = &REPDT;
	OBJECTTYPE = 'Процентный период';
	NUMBERSTAGE = &NOBS_FULL;
	NUMBERDWH = &NOBS_LEFT1 + &NOBS_LEFT2;
run;
%error_check(mpStepType=DATA);
/*---- End of User Written Code  ----*/ 

%rcSet(&syserr); 
%rcSet(&sqlrc); 


/**  Step end User Written **/

/*==========================================================================* 
 * Step:            Append                                A5ELGGF9.AK00011S * 
 * Transform:       Append                                                  * 
 * Description:                                                             * 
 *                                                                          * 
 * Source Tables:   User Written - work.W1N7ON2W4         A5ELGGF9.AF0000FZ * 
 *                  User Written - work.W1N8DER6G         A5ELGGF9.AF0000G0 * 
 * Target Table:    Append - work.W1N8ELCQQ               A5ELGGF9.AF0000G1 * 
 *==========================================================================*/ 

%let transformID = %quote(A5ELGGF9.AK00011S);
%let trans_rc = 0;
%let etls_stepStartTime = %sysfunc(datetime(), datetime20.); 

%let etls_recCheckExist = 0; 
%let etls_recnt = 0; 
%macro etls_recordCheck; 
   %let etls_recCheckExist = %eval(%sysfunc(exist(work.W1N7ON2W4, DATA)) or 
         %sysfunc(exist(work.W1N7ON2W4, VIEW))); 
   
   %if (&etls_recCheckExist) %then
   %do;
      %local etls_syntaxcheck; 
      %let etls_syntaxcheck = %sysfunc(getoption(syntaxcheck)); 
      /* Turn off syntaxcheck option to perform following steps  */ 
      options nosyntaxcheck;
      
      proc contents data = work.W1N7ON2W4 out = work.etls_contents(keep = nobs) noprint; 
      run; 
      
      data _null_; 
         set work.etls_contents (obs = 1); 
         call symput("etls_recnt", left(put(nobs,32.))); 
      run;
      
      proc datasets lib = work nolist nowarn memtype = (data view);
         delete etls_contents;
      quit;
      
      /* Reset syntaxcheck option to previous setting  */ 
      options &etls_syntaxcheck; 
   %end;
%mend etls_recordCheck;
%etls_recordCheck;

%let dbxrc = %eval(%sysfunc(exist(work.W1N7ON2W4, DATA)) or 
      %sysfunc(exist(work.W1N7ON2W4, VIEW))); 

%let dbxrc = %eval(%sysfunc(exist(work.W1N8DER6G, DATA)) or 
      %sysfunc(exist(work.W1N8DER6G, VIEW))); 

proc datasets lib = work nolist nowarn memtype = (data view);
   delete W1N8ELCQQ;
quit;

data work.W1N8ELCQQ / view=work.W1N8ELCQQ;
   set work.W1N7ON2W4
       work.W1N8DER6G;
   keep REPORTDATE OBJECTTYPE NUMBERSTAGE NUMBERDWH; 
run;

%rcSet(&syserr); 



/**  Step end Append **/

/*==========================================================================* 
 * Step:            Table Loader                          A5ELGGF9.AK00011T * 
 * Transform:       Table Loader (Version 2.1)                              * 
 * Description:                                                             * 
 *                                                                          * 
 * Source Table:    Append - work.W1N8ELCQQ               A5ELGGF9.AF0000G1 * 
 * Target Table:    DQ_DRVT_LOAD_10 -                     A5ELGGF9.AE00004B * 
 *                   dm_dq.DQ_DRVT_LOAD_10                                  * 
 *==========================================================================*/ 

%let transformID = %quote(A5ELGGF9.AK00011T);
%let trans_rc = 0;
%let etls_stepStartTime = %sysfunc(datetime(), datetime20.); 

%let SYSLAST = %nrquote(work.W1N8ELCQQ); 

%let SYS_SQL_IP_SPEEDO = Y;
%let SYS_SQL_MAPPUTTO = sas_put;
%let SYS_SQLREDUCEPUT = DBMS;
%global etls_sql_pushDown;
%let etls_sql_pushDown = -1;
option DBIDIRECTEXEC;

%global etls_tableExist;
%global etls_numIndex;
%global etls_lastTable;
%let etls_tableExist = -1; 
%let etls_numIndex = -1; 
%let etls_lastTable = &SYSLAST; 

/*---- Define load data macro  ----*/ 

/* --------------------------------------------------------------
   Load Technique Selection: AppendToExisting - AppendProc
   Constraint and index action selections: 'ASIS','ASIS','ASIS','ASIS'
   Additional options selections... 
      Set unmapped to missing on updates: false 
   -------------------------------------------------------------- */
%macro etls_loader;

   %let etls_tableOptions = ;
   
   /* Determine if the target table exists  */ 
   %let etls_tableExist = %eval(%sysfunc(exist(dm_dq.DQ_DRVT_LOAD_10, DATA)) or 
         %sysfunc(exist(dm_dq.DQ_DRVT_LOAD_10, VIEW))); 
   
   /*---- Create a new table  ----*/ 
   %if (&etls_tableExist eq 0) %then 
   %do;  /* if table does not exist  */ 
   
      %put %str(NOTE: Creating table ...);
      
      data dm_dq.DQ_DRVT_LOAD_10
              (dbnull = (
                         REPORTDATE = YES
                         OBJECTTYPE = YES
                         NUMBERSTAGE = YES
                         NUMBERDWH = YES));
         attrib REPORTDATE length = 8
            format = DATETIME20.
            informat = DATETIME20.; 
         attrib OBJECTTYPE length = $20
            format = $20.
            informat = $20.; 
         attrib NUMBERSTAGE length = 8; 
         attrib NUMBERDWH length = 8; 
         call missing(of _all_);
         stop;
      run;
      
      %rcSet(&syserr); 
      
   %end;  /* if table does not exist  */ 
   
   /*---- Append  ----*/ 
   %put %str(NOTE: Appending data ...);
   
   proc append base = dm_dq.DQ_DRVT_LOAD_10 
      data = &etls_lastTable (&etls_tableOptions)  force ; 
    run; 
   
   %rcSet(&syserr); 
   
%mend etls_loader;
%etls_loader;

%let etls_recnt = 0;
%macro etls_recordCheck; 
   %let etls_recCheckExist = %eval(%sysfunc(exist(dm_dq.DQ_DRVT_LOAD_10, DATA)) or 
         %sysfunc(exist(dm_dq.DQ_DRVT_LOAD_10, VIEW))); 
   
   %if (&etls_recCheckExist) %then
   %do;
      proc sql noprint;
         select count(*) into :etls_recnt from dm_dq.DQ_DRVT_LOAD_10;
      quit;
   %end;
%mend etls_recordCheck;
%etls_recordCheck;



/**  Step end Table Loader **/

/*==========================================================================* 
 * Step:            User Written                          A5ELGGF9.AK00011U * 
 * Transform:       User Written                                            * 
 * Description:     Сбор статистики                                         * 
 *                                                                          * 
 * Source Tables:   Append - work.W1N8ELCQQ               A5ELGGF9.AF0000G1 * 
 *                  ETL_JOB - etl_sys.ETL_JOB             A59S11RW.AE00001A * 
 * Target Table:    User Written - work.W1P4AR1M8         A5ELGGF9.AF0000G2 * 
 *                                                                          * 
 * User Written:    SourceCode                                              * 
 *==========================================================================*/ 

%let transformID = %quote(A5ELGGF9.AK00011U);
%let trans_rc = 0;
%let etls_stepStartTime = %sysfunc(datetime(), datetime20.); 

%let etls_recnt = -1;
%let _INPUT_count = 2;
%let _INPUT = work.W1N8ELCQQ;
%let _INPUT_connect = ;
%let _INPUT_engine = ;
%let _INPUT_memtype = VIEW;
%let _INPUT_options = %nrquote();
%let _INPUT_alter = %nrquote();
%let _INPUT_path = %nrquote(/Append_A5ELGGF9.AF0000G1%(WorkTable%));
%let _INPUT_type = 1;
%let _INPUT_label = %nrquote();

%let _INPUT1 = work.W1N8ELCQQ;
%let _INPUT1_connect = ;
%let _INPUT1_engine = ;
%let _INPUT1_memtype = VIEW;
%let _INPUT1_options = %nrquote();
%let _INPUT1_alter = %nrquote();
%let _INPUT1_path = %nrquote(/Append_A5ELGGF9.AF0000G1%(WorkTable%));
%let _INPUT1_type = 1;
%let _INPUT1_label = %nrquote();

%let _INPUT2 = etl_sys.ETL_JOB;
%let _INPUT2_connect =  PATH=DWH.IMB.RU AUTHDOMAIN="OraAuth_ETL_SYS" 
;
%let _INPUT2_engine = ORACLE;
%let _INPUT2_memtype = DATA;
%let _INPUT2_options = %nrquote();
%let _INPUT2_alter = %nrquote();
%let _INPUT2_path = %nrquote(/DWH_DWHDDS_SYS/Tables/ETL_SYS/ETL_JOB%(Table%));
%let _INPUT2_type = 1;
%let _INPUT2_label = %nrquote();

%let _OUTPUT_count = 1;
%let _OUTPUT = work.W1P4AR1M8;
%let _OUTPUT_connect = ;
%let _OUTPUT_engine = ;
%let _OUTPUT_memtype = DATA;
%let _OUTPUT_options = %nrquote();
%let _OUTPUT_alter = %nrquote();
%let _OUTPUT_path = %nrquote(/User Written_A5ELGGF9.AF0000G2%(WorkTable%));
%let _OUTPUT_type = 1;
%let _OUTPUT_label = %nrquote();
/* List of target columns to keep  */ 
%let _OUTPUT_keep = REP_DT REP_ID PRC CNT_ALL CNT_ERR DWH_DT;
%let _OUTPUT_col_count = 6;
%let _OUTPUT_col0_name = REP_DT;
%let _OUTPUT_col0_table = work.W1P4AR1M8;
%let _OUTPUT_col0_length = 8;
%let _OUTPUT_col0_type = ;
%let _OUTPUT_col0_format = DATETIME20.;
%let _OUTPUT_col0_informat = ;
%let _OUTPUT_col0_label = %nrquote();
%let _OUTPUT_col0_exp = ;
%let _OUTPUT_col0_input_count = 0;
%let _OUTPUT_col1_name = REP_ID;
%let _OUTPUT_col1_table = work.W1P4AR1M8;
%let _OUTPUT_col1_length = 8;
%let _OUTPUT_col1_type = ;
%let _OUTPUT_col1_format = ;
%let _OUTPUT_col1_informat = ;
%let _OUTPUT_col1_label = %nrquote();
%let _OUTPUT_col1_exp = ;
%let _OUTPUT_col1_input_count = 0;
%let _OUTPUT_col2_name = PRC;
%let _OUTPUT_col2_table = work.W1P4AR1M8;
%let _OUTPUT_col2_length = 8;
%let _OUTPUT_col2_type = ;
%let _OUTPUT_col2_format = ;
%let _OUTPUT_col2_informat = ;
%let _OUTPUT_col2_label = %nrquote();
%let _OUTPUT_col2_exp = ;
%let _OUTPUT_col2_input_count = 0;
%let _OUTPUT_col3_name = CNT_ALL;
%let _OUTPUT_col3_table = work.W1P4AR1M8;
%let _OUTPUT_col3_length = 8;
%let _OUTPUT_col3_type = ;
%let _OUTPUT_col3_format = ;
%let _OUTPUT_col3_informat = ;
%let _OUTPUT_col3_label = %nrquote();
%let _OUTPUT_col3_exp = ;
%let _OUTPUT_col3_input_count = 0;
%let _OUTPUT_col4_name = CNT_ERR;
%let _OUTPUT_col4_table = work.W1P4AR1M8;
%let _OUTPUT_col4_length = 8;
%let _OUTPUT_col4_type = ;
%let _OUTPUT_col4_format = ;
%let _OUTPUT_col4_informat = ;
%let _OUTPUT_col4_label = %nrquote();
%let _OUTPUT_col4_exp = ;
%let _OUTPUT_col4_input_count = 0;
%let _OUTPUT_col5_name = DWH_DT;
%let _OUTPUT_col5_table = work.W1P4AR1M8;
%let _OUTPUT_col5_length = 8;
%let _OUTPUT_col5_type = ;
%let _OUTPUT_col5_format = DATETIME20.;
%let _OUTPUT_col5_informat = ;
%let _OUTPUT_col5_label = %nrquote();
%let _OUTPUT_col5_exp = ;
%let _OUTPUT_col5_input_count = 0;

%let _OUTPUT1 = work.W1P4AR1M8;
%let _OUTPUT1_connect = ;
%let _OUTPUT1_engine = ;
%let _OUTPUT1_memtype = DATA;
%let _OUTPUT1_options = %nrquote();
%let _OUTPUT1_alter = %nrquote();
%let _OUTPUT1_path = %nrquote(/User Written_A5ELGGF9.AF0000G2%(WorkTable%));
%let _OUTPUT1_type = 1;
%let _OUTPUT1_label = %nrquote();
/* List of target columns to keep  */ 
%let _OUTPUT1_keep = REP_DT REP_ID PRC CNT_ALL CNT_ERR DWH_DT;
%let _OUTPUT1_col_count = 6;
%let _OUTPUT1_col0_name = REP_DT;
%let _OUTPUT1_col0_table = work.W1P4AR1M8;
%let _OUTPUT1_col0_length = 8;
%let _OUTPUT1_col0_type = ;
%let _OUTPUT1_col0_format = DATETIME20.;
%let _OUTPUT1_col0_informat = ;
%let _OUTPUT1_col0_label = %nrquote();
%let _OUTPUT1_col0_exp = ;
%let _OUTPUT1_col0_input_count = 0;
%let _OUTPUT1_col1_name = REP_ID;
%let _OUTPUT1_col1_table = work.W1P4AR1M8;
%let _OUTPUT1_col1_length = 8;
%let _OUTPUT1_col1_type = ;
%let _OUTPUT1_col1_format = ;
%let _OUTPUT1_col1_informat = ;
%let _OUTPUT1_col1_label = %nrquote();
%let _OUTPUT1_col1_exp = ;
%let _OUTPUT1_col1_input_count = 0;
%let _OUTPUT1_col2_name = PRC;
%let _OUTPUT1_col2_table = work.W1P4AR1M8;
%let _OUTPUT1_col2_length = 8;
%let _OUTPUT1_col2_type = ;
%let _OUTPUT1_col2_format = ;
%let _OUTPUT1_col2_informat = ;
%let _OUTPUT1_col2_label = %nrquote();
%let _OUTPUT1_col2_exp = ;
%let _OUTPUT1_col2_input_count = 0;
%let _OUTPUT1_col3_name = CNT_ALL;
%let _OUTPUT1_col3_table = work.W1P4AR1M8;
%let _OUTPUT1_col3_length = 8;
%let _OUTPUT1_col3_type = ;
%let _OUTPUT1_col3_format = ;
%let _OUTPUT1_col3_informat = ;
%let _OUTPUT1_col3_label = %nrquote();
%let _OUTPUT1_col3_exp = ;
%let _OUTPUT1_col3_input_count = 0;
%let _OUTPUT1_col4_name = CNT_ERR;
%let _OUTPUT1_col4_table = work.W1P4AR1M8;
%let _OUTPUT1_col4_length = 8;
%let _OUTPUT1_col4_type = ;
%let _OUTPUT1_col4_format = ;
%let _OUTPUT1_col4_informat = ;
%let _OUTPUT1_col4_label = %nrquote();
%let _OUTPUT1_col4_exp = ;
%let _OUTPUT1_col4_input_count = 0;
%let _OUTPUT1_col5_name = DWH_DT;
%let _OUTPUT1_col5_table = work.W1P4AR1M8;
%let _OUTPUT1_col5_length = 8;
%let _OUTPUT1_col5_type = ;
%let _OUTPUT1_col5_format = DATETIME20.;
%let _OUTPUT1_col5_informat = ;
%let _OUTPUT1_col5_label = %nrquote();
%let _OUTPUT1_col5_exp = ;
%let _OUTPUT1_col5_input_count = 0;

/*---- Start of User Written Code  ----*/ 

proc sql;
/*Кол-во всех уникальных деривативных сделок*/
	select sum(NUMBERSTAGE) into :CNT_ALL from &_INPUT1;
/*Кол-во ошибочных сделок*/
	select sum(NUMBERDWH) into :CNT_ERR from &_INPUT1;
/*Дата успешного выполнения процесса в DWH*/
	select end_dttm into :DWH_DT from &_INPUT2 where JOB_ID = (
  select MAX(job_id) 
  from &_INPUT2 
  where upper(job_nm) = '021_719_STAGE_A2P_VDWH_IRPERIOD' and success_flg = 'Y'
  );
quit;
%error_check(mpStepType=SQL);

data &_OUTPUT1;
	attrib
		REP_DT length = 8 format = DATETIME20.
		REP_ID length = 8
		PRC length =8
		CNT_ALL length=8
		CNT_ERR length = 8
		DWH_DT length = 8 format = DATETIME20.
	;

	REP_DT = &REPDT.;
	REP_ID = 10;
	PRC = DIVIDE(&CNT_ERR. , &CNT_ALL.) * 100;
	if missing(PRC) then PRC=0;
	CNT_ALL = &CNT_ALL.;
	CNT_ERR = &CNT_ERR.;
	DWH_DT = "&DWH_DT."dt;
run;
%error_check(mpStepType=DATA);
/*---- End of User Written Code  ----*/ 

%rcSet(&syserr); 
%rcSet(&sqlrc); 


/**  Step end User Written **/

/*==========================================================================* 
 * Step:            Table Loader                          A5ELGGF9.AK00011V * 
 * Transform:       Table Loader (Version 2.1)                              * 
 * Description:                                                             * 
 *                                                                          * 
 * Source Table:    User Written - work.W1P4AR1M8         A5ELGGF9.AF0000G2 * 
 * Target Table:    DQ_DRVT_REPORT_PRC -                  A5ELGGF9.AE00004E * 
 *                   dm_dq.DQ_DRVT_REPORT_PRC                               * 
 *==========================================================================*/ 

%let transformID = %quote(A5ELGGF9.AK00011V);
%let trans_rc = 0;
%let etls_stepStartTime = %sysfunc(datetime(), datetime20.); 

%let SYSLAST = %nrquote(work.W1P4AR1M8); 

%let SYS_SQL_IP_SPEEDO = Y;
%let SYS_SQL_MAPPUTTO = sas_put;
%let SYS_SQLREDUCEPUT = DBMS;
%global etls_sql_pushDown;
%let etls_sql_pushDown = -1;
option DBIDIRECTEXEC;

%global etls_tableExist;
%global etls_numIndex;
%global etls_lastTable;
%let etls_tableExist = -1; 
%let etls_numIndex = -1; 
%let etls_lastTable = &SYSLAST; 

/*---- Define load data macro  ----*/ 

/* --------------------------------------------------------------
   Load Technique Selection: AppendToExisting - AppendProc
   Constraint and index action selections: 'ASIS','ASIS','ASIS','ASIS'
   Additional options selections... 
      Set unmapped to missing on updates: false 
   -------------------------------------------------------------- */
%macro etls_loader;

   %let etls_tableOptions = ;
   
   /*---- Map the columns  ----*/ 
   proc datasets lib = work nolist nowarn memtype = (data view);
      delete WJ2Z1EV;
   quit;
   
   %put %str(NOTE: Mapping columns ...);
   proc sql;
      create view work.WJ2Z1EV as
         select
            REP_DT   
               informat = DATETIME20.,
            REP_ID   
               format = 7.
               informat = 7.,
            PRC   
               format = 19.8
               informat = 19.8,
            CNT_ALL   
               format = 13.
               informat = 13.,
            CNT_ERR   
               format = 13.
               informat = 13.,
            DWH_DT   
               informat = DATETIME20.
      from &etls_lastTable
      ;
   quit;
   
   %let SYSLAST = work.WJ2Z1EV;
   
   %let etls_lastTable = &SYSLAST; 
   %let etls_tableOptions = ; 
   
   /* Determine if the target table exists  */ 
   %let etls_tableExist = %eval(%sysfunc(exist(dm_dq.DQ_DRVT_REPORT_PRC, DATA)) or 
         %sysfunc(exist(dm_dq.DQ_DRVT_REPORT_PRC, VIEW))); 
   
   /*---- Create a new table  ----*/ 
   %if (&etls_tableExist eq 0) %then 
   %do;  /* if table does not exist  */ 
   
      %put %str(NOTE: Creating table ...);
      
      data dm_dq.DQ_DRVT_REPORT_PRC
              (dbnull = (
                         REP_DT = NO
                         REP_ID = NO
                         PRC = YES
                         CNT_ALL = YES
                         CNT_ERR = YES
                         DWH_DT = YES));
         attrib REP_DT length = 8
            format = DATETIME20.
            informat = DATETIME20.
            label = 'REP_DT'; 
         attrib REP_ID length = 8
            format = 7.
            informat = 7.
            label = 'REP_ID'; 
         attrib PRC length = 8
            format = 19.8
            informat = 19.8
            label = 'PRC'; 
         attrib CNT_ALL length = 8
            format = 13.
            informat = 13.
            label = 'CNT_ALL'; 
         attrib CNT_ERR length = 8
            format = 13.
            informat = 13.
            label = 'CNT_ERR'; 
         attrib DWH_DT length = 8
            format = DATETIME20.
            informat = DATETIME20.
            label = 'DWH_DT'; 
         call missing(of _all_);
         stop;
      run;
      
      %rcSet(&syserr); 
      
   %end;  /* if table does not exist  */ 
   
   /*---- Append  ----*/ 
   %put %str(NOTE: Appending data ...);
   
   proc append base = dm_dq.DQ_DRVT_REPORT_PRC 
      data = &etls_lastTable (&etls_tableOptions)  force ; 
    run; 
   
   %rcSet(&syserr); 
   
   proc datasets lib = work nolist nowarn memtype = (data view);
      delete WJ2Z1EV;
   quit;
   
%mend etls_loader;
%etls_loader;

%let etls_recnt = 0;
%macro etls_recordCheck; 
   %let etls_recCheckExist = %eval(%sysfunc(exist(dm_dq.DQ_DRVT_REPORT_PRC, DATA)) or 
         %sysfunc(exist(dm_dq.DQ_DRVT_REPORT_PRC, VIEW))); 
   
   %if (&etls_recCheckExist) %then
   %do;
      proc sql noprint;
         select count(*) into :etls_recnt from dm_dq.DQ_DRVT_REPORT_PRC;
      quit;
   %end;
%mend etls_recordCheck;
%etls_recordCheck;



/**  Step end Table Loader **/

/*==========================================================================* 
 * Step:            Завершить модуль                      A5ELGGF9.AK00011W * 
 * Transform:       Завершить модуль                                        * 
 * Description:                                                             * 
 *==========================================================================*/ 

%let transformID = %quote(A5ELGGF9.AK00011W);
%let trans_rc = 0;
%let etls_stepStartTime = %sysfunc(datetime(), datetime20.); 

%let _INPUT_count = 0; 
%let _OUTPUT_count = 0; 


/*****************************************************************
* ВЕРСИЯ:
*   $Id: transform_job_finish.sas 247 2012-04-03 07:31:10Z nesterenok $
*
******************************************************************
* НАЗНАЧЕНИЕ:
*   Регистрирует конец модуля ETL.
*
* ПАРАМЕТРЫ:
*   нет
*
******************************************************************/

%macro transform_job_finish;

   /* Продолжаем модуль */
   %job_continue_reg(mpJobType=JOB, mpJobName=&ETLS_JobName., mpPostEvent=N);

   /* Завершаем модуль */
   %job_finish_reg(mpJobType=JOB);

%mend transform_job_finish;

%transform_job_finish;


%rcSet(&syserr); 
%rcSet(&sysrc); 
%rcSet(&sqlrc); 



/**  Step end Завершить модуль **/

%let etls_endTime = %sysfunc(datetime(),datetime.);



/**  Job end 202_100_Mart_DQ_DRVT_REP10 **/

/* Reset jobid and name */
%let jobID = %quote(A5ELGGF9.AH00003N);
%let etls_jobName = %nrquote(202_002_Stream_DQ_DRVT);

/**************************************************************************** 
 * Job:             202_110_Mart_DQ_DRVT_REP11            A5ELGGF9.AH00002H * 
 * Description:     Проверка ссылочной целостности.                         * 
 *                                                                          * 
 * Metadata Server: bravo14                                                 * 
 * Port:            8561                                                    * 
 * Location:        /DWH_DMDQ_REP/Jobs/Includes/DQ_DRVT                     * 
 *                                                                          * 
 * Server:          SASApp                                A5C46MZY.AQ000002 * 
 *                                                                          * 
 * Source Tables:   ETL_JOB - etl_sys.ETL_JOB             A59S11RW.AE00001A * 
 *                  FINANCIAL_ACCOUNT -                   A569C89V.AE0000FK * 
 *                   dwh_dds.FINANCIAL_ACCOUNT                              * 
 *                  CUSTOMER_X_FINANCIAL_ACCOUNT -        A569C89V.AE0000F2 * 
 *                   dwh_dds.CUSTOMER_X_FINANCIAL_ACCOUNT                   * 
 *                  COUNTERPARTY - dwh_dds.COUNTERPARTY   A569C89V.AE0000EQ * 
 *                  FINANCIAL_INSTRUMENT_ASSOC -          A569C89V.AE0000FW * 
 *                   dwh_dds.FINANCIAL_INSTRUMENT_ASSOC                     * 
 *                  FINANCIAL_INSTRUMENT -                A569C89V.AE0000FV * 
 *                   dwh_dds.FINANCIAL_INSTRUMENT                           * 
 *                  CURRENCY - dwh_dds.CURRENCY           A569C89V.AE0000EY * 
 *                  FINANCIAL_INSTRUMENT_ASSOC -          A569C89V.AE0000FW * 
 *                   dwh_dds.FINANCIAL_INSTRUMENT_ASSOC                     * 
 *                  FINANCIAL_INSTRUMENT -                A569C89V.AE0000FV * 
 *                   dwh_dds.FINANCIAL_INSTRUMENT                           * 
 *                  IRREGULAR_RATE_RESETS -               A569C89V.AE0000IO * 
 *                   dwh_dds.IRREGULAR_RATE_RESETS                          * 
 *                  FINANCIAL_INSTRUMENT_ASSOC -          A569C89V.AE0000FW * 
 *                   dwh_dds.FINANCIAL_INSTRUMENT_ASSOC                     * 
 *                  FINANCIAL_INSTRUMENT -                A569C89V.AE0000FV * 
 *                   dwh_dds.FINANCIAL_INSTRUMENT                           * 
 *                  FINANCIAL_INSTRUMENT_ASSOC -          A569C89V.AE0000FW * 
 *                   dwh_dds.FINANCIAL_INSTRUMENT_ASSOC                     * 
 *                  FINANCIAL_INSTRUMENT -                A569C89V.AE0000FV * 
 *                   dwh_dds.FINANCIAL_INSTRUMENT                           * 
 *                  FINANCIAL_ACCOUNT_CHNG -              A569C89V.AE0000FM * 
 *                   dwh_dds.FINANCIAL_ACCOUNT_CHNG                         * 
 *                  FINANCIAL_ACCOUNT_ASSOC -             A569C89V.AE0000FL * 
 *                   dwh_dds.FINANCIAL_ACCOUNT_ASSOC                        * 
 *                  FINANCIAL_ACCOUNT -                   A569C89V.AE0000FK * 
 *                   dwh_dds.FINANCIAL_ACCOUNT                              * 
 * Target Tables:   DQ_DRVT_REPORT_PRC -                  A5ELGGF9.AE00004E * 
 *                   dm_dq.DQ_DRVT_REPORT_PRC                               * 
 *                  DQ_DRVT_LOAD_11 -                     A5ELGGF9.AE00004C * 
 *                   dm_dq.DQ_DRVT_LOAD_11                                  * 
 *                  DQ_DRVT_LOAD_11 -                     A5ELGGF9.AE00004C * 
 *                   dm_dq.DQ_DRVT_LOAD_11                                  * 
 *                  DQ_DRVT_REPORT_PRC -                  A5ELGGF9.AE00004E * 
 *                   dm_dq.DQ_DRVT_REPORT_PRC                               * 
 *                                                                          * 
 * Generated on:    16 Июль 2013 г. 17:46:22 MSD                            * 
 * Generated by:    sasdwh                                                  * 
 * Version:         SAS Data Integration Studio 4.5                         * 
 ****************************************************************************/ 

/* General macro variables  */ 
%let jobID = %quote(A5ELGGF9.AH00002H);
%let etls_jobName = %nrquote(202_110_Mart_DQ_DRVT_REP11);
%let etls_userID = %nrquote(sasdwh);


/* Create metadata macro variables */
%let IOMServer      = %nrquote(SASApp);
%let metaPort       = %nrquote(8561);
%let metaServer     = %nrquote(bravo14);

/* Set metadata options */
options metaport       = &metaPort 
        metaserver     = "&metaServer"; 

/* Setup for capturing job status  */ 
%let etls_startTime = %sysfunc(datetime(),datetime.);
%let etls_recordsBefore = 0;
%let etls_recordsAfter = 0;
%let etls_lib = 0;
%let etls_table = 0;

%global etls_debug; 
%macro etls_setDebug; 
   %if %str(&etls_debug) ne 0 %then 
      OPTIONS MPRINT%str(;); 
%mend; 
%etls_setDebug; 

/*---- Start of Pre-Process Code  ----*/ 

%LET REPDT=&DMDQ_REPORT_START_DTTM;
/*---- End of Pre-Process Code  ----*/ 

%rcSet(&syserr); 
%rcSet(&sqlrc); 

/*==========================================================================* 
 * Step:            Начать модуль                         A5ELGGF9.AK00011X * 
 * Transform:       Начать модуль                                           * 
 * Description:                                                             * 
 *==========================================================================*/ 

%let transformID = %quote(A5ELGGF9.AK00011X);
%let trans_rc = 0;
%let etls_stepStartTime = %sysfunc(datetime(), datetime20.); 

%let _INPUT_count = 0; 
%let _OUTPUT_count = 0; 


/*****************************************************************
* ВЕРСИЯ:
*   $Id: transform_job_start.sas 1747 2012-08-01 11:26:13Z nesterenok $
*
******************************************************************
* НАЗНАЧЕНИЕ:
*   Регистрирует начало модуля ETL.
*
* ПАРАМЕТРЫ:
*   нет
*
******************************************************************/

%macro transform_job_start;

   /* Продолжаем поток (или создаем новый) */
   %local lmvStreamName;
   %if %sysfunc(sysexist(LSB_JOBNAME)) %then
      %let lmvStreamName = %scan(%sysfunc(sysget(LSB_JOBNAME)), 3, :);
   %else
      %let lmvStreamName = ;

   %job_continue_reg(mpJobType=STREAM, mpJobName=&lmvStreamName, mpPostEvent=N, mpForcedStart=Y);

   /* Для DI, начинаем поток заново, если старый был начат не сегодня */
   %if %length(&lmvStreamName) eq 0 and &STREAM_START_DT ne %sysfunc(today()) %then %do;
      %job_start_reg(mpJobType=STREAM, mpParentJobId=, mpJobName=&lmvStreamName.);
   %end;

   /* Начинаем модуль */
   %job_start_reg(mpJobType=JOB, mpParentJobId=&STREAM_ID, mpJobName=&ETLS_JobName.);

%mend transform_job_start;

%transform_job_start;


%rcSet(&syserr); 
%rcSet(&sysrc); 
%rcSet(&sqlrc); 



/**  Step end Начать модуль **/

/*==========================================================================* 
 * Step:            Очистить таблицу                      A5ELGGF9.AK00011Y * 
 * Transform:       Очистить таблицу                                        * 
 * Description:                                                             * 
 *                                                                          * 
 * Target Table:    DQ_DRVT_LOAD_11 -                     A5ELGGF9.AE00004C * 
 *                   dm_dq.DQ_DRVT_LOAD_11                                  * 
 *==========================================================================*/ 

%let transformID = %quote(A5ELGGF9.AK00011Y);
%let trans_rc = 0;
%let etls_stepStartTime = %sysfunc(datetime(), datetime20.); 

%let _INPUT_count = 0; 
%let _OUTPUT_count = 1; 
%let _OUTPUT = dm_dq.DQ_DRVT_LOAD_11;
%let _OUTPUT_connect =  DEFER=YES PATH=DWH.IMB.RU AUTHDOMAIN="OraAuth_DM_DQ" 
;
%let _OUTPUT_engine = ORACLE;
%let _OUTPUT_memtype = DATA;
%let _OUTPUT_options = %nrquote();
%let _OUTPUT_alter = %nrquote();
%let _OUTPUT_path = %nrquote(/DWH_DMDQ_REP/Marts/DQ_DRVT/DQ_DRVT_LOAD_11%(Table%));
%let _OUTPUT_type = 1;
%let _OUTPUT_label = %nrquote();
/* List of target columns to keep  */ 
%let _OUTPUT_keep = REPORTDATE OBJECTTYPE1 OBJECTTYPE2 OBJECTID;

%let tpOut = dm_dq.DQ_DRVT_LOAD_11;
%let tpOut_connect =  DEFER=YES PATH=DWH.IMB.RU AUTHDOMAIN="OraAuth_DM_DQ" 
;
%let tpOut_engine = ORACLE;
%let tpOut_memtype = DATA;
%let tpOut_options = %nrquote();
%let tpOut_alter = %nrquote();
%let tpOut_path = %nrquote(/DWH_DMDQ_REP/Marts/DQ_DRVT/DQ_DRVT_LOAD_11%(Table%));
%let tpOut_type = 1;
%let tpOut_label = %nrquote();
/* List of target columns to keep  */ 
%let tpOut_keep = REPORTDATE OBJECTTYPE1 OBJECTTYPE2 OBJECTID;


%let tpWhere = %nrquote(REPORTDATE = &DMDQ_REPORT_START_DTTM);

/* List of target columns to keep  */ 
%let _keep = REPORTDATE OBJECTTYPE1 OBJECTTYPE2 OBJECTID;
/* List of target columns to keep  */ 
%let keep = REPORTDATE OBJECTTYPE1 OBJECTTYPE2 OBJECTID;
/*****************************************************************
* ВЕРСИЯ:
*   $Id: transform_table_delete.sas 2142 2012-08-17 14:15:09Z nesterenok $
*
******************************************************************
* НАЗНАЧЕНИЕ:
*   Удаляет из указанной таблицы записи.
*
* ПАРАМЕТРЫ:
*   tpOut                  + имя целевой таблицы, которая будет очищена
*   tpWhere                - условие отбора записей под удаление
*                            по умолчанию отсутствует, т.е. удаляются все записи
*
******************************************************************/

%macro transform_table_delete;

   /* Удаляем записи */
   /* TODO: truncate */
   proc sql;
      delete from &tpOut
      %if %length(&tpWhere) gt 0 %then %do;
         where (%unquote(&tpWhere))
      %end;
      ;
   quit;
   %error_check (mpStepType=SQL);

%mend transform_table_delete;

%transform_table_delete;


%rcSet(&syserr); 
%rcSet(&sysrc); 
%rcSet(&sqlrc); 



/**  Step end Очистить таблицу **/

/*==========================================================================* 
 * Step:            Очистить таблицу                      A5ELGGF9.AK00011Z * 
 * Transform:       Очистить таблицу                                        * 
 * Description:                                                             * 
 *                                                                          * 
 * Target Table:    DQ_DRVT_REPORT_PRC -                  A5ELGGF9.AE00004E * 
 *                   dm_dq.DQ_DRVT_REPORT_PRC                               * 
 *==========================================================================*/ 

%let transformID = %quote(A5ELGGF9.AK00011Z);
%let trans_rc = 0;
%let etls_stepStartTime = %sysfunc(datetime(), datetime20.); 

%let _INPUT_count = 0; 
%let _OUTPUT_count = 1; 
%let _OUTPUT = dm_dq.DQ_DRVT_REPORT_PRC;
%let _OUTPUT_connect =  DEFER=YES PATH=DWH.IMB.RU AUTHDOMAIN="OraAuth_DM_DQ" 
;
%let _OUTPUT_engine = ORACLE;
%let _OUTPUT_memtype = DATA;
%let _OUTPUT_options = %nrquote();
%let _OUTPUT_alter = %nrquote();
%let _OUTPUT_path = %nrquote(/DWH_DMDQ_REP/Marts/DQ_DRVT/DQ_DRVT_REPORT_PRC%(Table%));
%let _OUTPUT_type = 1;
%let _OUTPUT_label = %nrquote();
/* List of target columns to keep  */ 
%let _OUTPUT_keep = REP_DT REP_ID PRC CNT_ALL CNT_ERR DWH_DT;

%let tpOut = dm_dq.DQ_DRVT_REPORT_PRC;
%let tpOut_connect =  DEFER=YES PATH=DWH.IMB.RU AUTHDOMAIN="OraAuth_DM_DQ" 
;
%let tpOut_engine = ORACLE;
%let tpOut_memtype = DATA;
%let tpOut_options = %nrquote();
%let tpOut_alter = %nrquote();
%let tpOut_path = %nrquote(/DWH_DMDQ_REP/Marts/DQ_DRVT/DQ_DRVT_REPORT_PRC%(Table%));
%let tpOut_type = 1;
%let tpOut_label = %nrquote();
/* List of target columns to keep  */ 
%let tpOut_keep = REP_DT REP_ID PRC CNT_ALL CNT_ERR DWH_DT;


%let tpWhere = %nrquote(REP_ID = 11 AND REP_DT = &DMDQ_REPORT_START_DTTM);

/* List of target columns to keep  */ 
%let _keep = REP_DT REP_ID PRC CNT_ALL CNT_ERR DWH_DT;
/* List of target columns to keep  */ 
%let keep = REP_DT REP_ID PRC CNT_ALL CNT_ERR DWH_DT;
/*****************************************************************
* ВЕРСИЯ:
*   $Id: transform_table_delete.sas 2142 2012-08-17 14:15:09Z nesterenok $
*
******************************************************************
* НАЗНАЧЕНИЕ:
*   Удаляет из указанной таблицы записи.
*
* ПАРАМЕТРЫ:
*   tpOut                  + имя целевой таблицы, которая будет очищена
*   tpWhere                - условие отбора записей под удаление
*                            по умолчанию отсутствует, т.е. удаляются все записи
*
******************************************************************/

%macro transform_table_delete;

   /* Удаляем записи */
   /* TODO: truncate */
   proc sql;
      delete from &tpOut
      %if %length(&tpWhere) gt 0 %then %do;
         where (%unquote(&tpWhere))
      %end;
      ;
   quit;
   %error_check (mpStepType=SQL);

%mend transform_table_delete;

%transform_table_delete;


%rcSet(&syserr); 
%rcSet(&sysrc); 
%rcSet(&sqlrc); 



/**  Step end Очистить таблицу **/

/*==========================================================================* 
 * Step:            Extract                               A5ELGGF9.AK000120 * 
 * Transform:       Extract                                                 * 
 * Description:     DRV, DCD                                                * 
 *                                                                          * 
 * Source Table:    FINANCIAL_ACCOUNT -                   A569C89V.AE0000FK * 
 *                   dwh_dds.FINANCIAL_ACCOUNT                              * 
 * Target Table:    FINANCIAL_ACCOUNT - work.W1PICNWIL    A5ELGGF9.AF0000G3 * 
 *==========================================================================*/ 

%let transformID = %quote(A5ELGGF9.AK000120);
%let trans_rc = 0;
%let etls_stepStartTime = %sysfunc(datetime(), datetime20.); 

%let etls_recnt = 0;
%macro etls_recordCheck; 
   %let etls_recCheckExist = %eval(%sysfunc(exist(dwh_dds.FINANCIAL_ACCOUNT, DATA)) or 
         %sysfunc(exist(dwh_dds.FINANCIAL_ACCOUNT, VIEW))); 
   
   %if (&etls_recCheckExist) %then
   %do;
      proc sql noprint;
         select count(*) into :etls_recnt from dwh_dds.FINANCIAL_ACCOUNT;
      quit;
   %end;
%mend etls_recordCheck;
%etls_recordCheck;

%let SYSLAST = %nrquote(dwh_dds.FINANCIAL_ACCOUNT); 

%let SYS_SQL_IP_SPEEDO = Y;
%let SYS_SQL_MAPPUTTO = sas_put;
%let SYS_SQLREDUCEPUT = DBMS;
%global etls_sql_pushDown;
%let etls_sql_pushDown = -1;
option DBIDIRECTEXEC;

/*---- Map the columns  ----*/ 
proc datasets lib = work nolist nowarn memtype = (data view);
   delete W1PICNWIL;
quit;

%put %str(NOTE: Mapping columns ...);
proc sql;
   create view work.W1PICNWIL as
      select
         ACCOUNT_RK,
         VALID_FROM_DTTM,
         VALID_TO_DTTM,
         ACCOUNT_ID,
         SOURCE_SYSTEM_CD,
         ACCOUNT_REGISTRATION_NM,
         ALTERNATE_ACCOUNT_NM,
         FINANCIAL_ACCOUNT_TYPE_CD,
         AUTO_DEBIT_ACCOUNT_TYPE_CD,
         ACCOUNT_REGISTRATION_TYPE_CD,
         ACCOUNT_STATUS_CD,
         OPEN_DT,
         CLOSE_DT,
         CLOSE_REASON_CD,
         ACCOUNT_TAX_ID,
         EXPECTED_LOSS_PCT,
         INDIVIDUAL_ORGANIZATION_CD,
         SOURCE_CD,
         OPENING_CHANNEL_CD,
         PREFERRED_CHANNEL_CD,
         CURRENCY_CD,
         PRIMARY_PHONE_NO,
         PRIMARY_PHONE_TYPE_CD,
         SECONDARY_PHONE_NO,
         SECONDARY_PHONE_TYPE_CD,
         MAILABLE_FLG,
         TELEPHONABLE_FLG,
         EMAIL_FLG,
         SMS_FLG,
         DO_NOT_CONTACT_FLG,
         EMPLOYEE_RK,
         CURRENCY_BASED_ACCOUNT_FLG,
         FEE_BASED_FLG,
         ANNUAL_FEES_AMT,
         MONTHLY_FEES_AMT,
         CAMPAIGN_CD,
         COMMUNICATION_CD,
         REGISTERED_ONLINE_DT,
         FIRST_LOGIN_DT,
         ONLINE_BILL_PAYMENT_FLG,
         ID_VERIFICATION_TYPE_CD,
         PREVIOUS_ACCOUNT_ID,
         OPEN_BRANCH_FINANCIAL_UNIT_RK,
         PRIM_BRANCH_FINANCIAL_UNIT_RK,
         FINANCIAL_APPLICATION_RK,
         CREDIT_FACILITY_RK,
         FUTURE_MARGIN_INCOME_AMT,
         IN_DEFAULT_FLG,
         FINANCIAL_BOOK_RK,
         IRRECOVERABLE_FLG,
         OWNED_BY_INTERNAL_ORG_RK,
         PREVIOUS_BANK_EXTERNAL_ORG_RK,
         NETTING_SET_RK,
         REVOLVING_FLG,
         SOURCE_CHANNEL_CD,
         GRACE_PERIOD_DAYS_CNT,
         REMARGINING_DAYS_CNT,
         FINANCIAL_CALENDAR_RK,
         DAY_BASIS_CD,
         PORTFOLIO_ID,
         SECURITIZATION_POOL_RK,
         RECEIVABLES_POOL_RK,
         ACCOUNT_USAGE_TYPE_CD,
         RISK_ALARM_FLG,
         LOW_PROFITABILITY_FLG,
         ACCOUNT_LIFECYCLE_STG_CD,
         ATTRITION_ALARM_FLG,
         BALANCE_FROZEN_FLG,
         BALANCE_FROZEN_DT,
         ACCOUNT_BLOCK_REASON_CD,
         TAXATION_STATE_CD,
         EFFECTIVE_MATURITY_YEAR_NO,
         GL_ACCOUNT_RK,
         FROM_OTHER_INSTITUTION_FLG,
         ACCOUNT_RENEWAL_CNT,
         BALANCE_TRANSFER_DT,
         BALANCE_TRANSFER_AMT,
         BALANCE_TRANSFER_CNT,
         BASE_LONG_TERM_APR_RT,
         BROKER_FLG,
         MULT_RATE_FLG,
         AUTO_DEBIT_ACCOUNT_NO,
         WORST_STATUS_LAST_12_MTH_CD,
         WORST_STATUS_LAST_12_MTH_DT,
         BALANCE_TRNSF_OTHER_ACCT_CNT,
         EFFECTIVE_FROM_DTTM,
         EFFECTIVE_TO_DTTM,
         COUNTERPARTY_RK,
         INSURED_BY_COUNTERPARTY_RK,
         STATEMENT_FREQUENCY_CD,
         SECURITY_DEPOSIT_AMT,
         SECURITY_DEPOSIT_REFUND_AMT,
         FIRST_PAYMENT_DT,
         LAST_PAYMENT_DT,
         FIRST_RESET_DT,
         LAST_RESET_DT,
         RESETS_PER_ANNUM_NO,
         PRINCIPAL_PAYMENT_TYPE_CD,
         PRINCIPAL_PAYMENT_AMT,
         RATE_POLICY_RK,
         SPREAD_RT,
         DISCOUNT_SPREAD_RT,
         INITIAL_CONTRACT_RT,
         FIXED_MONTHLY_PREPAYMENT_RT,
         CAPITAL_ALLOCATION_RK,
         CAPITAL_COST_RK,
         SEGMENT_RK,
         NEAR_BRANCH_FINANCIAL_UNIT_RK,
         STATEMENT_OPT_FLG,
         VALUE_SCALING_FACTOR_RT,
         INTERNAL_REPORTING_CATEGORY_CD,
         CONVEXITY_ADJUSTMENT_FLG,
         ARREARS_PAYMENT_CD,
         QUANTO_FEATURE_RK,
         CASH_INTENSIVE_BUSINESS_FLG,
         LETTER_OF_CREDIT_ONFILE_FLG,
         TRADE_FINANCE_FLG,
         ANNUITY_PAYMENT_TYPE_CD,
         INTEREST_PAYMENT_TYPE_CD,
         INTEREST_PAYMENT_TIME_FREQ_CD,
         LIQUIDITY_CATEGORY_TYPE_CD,
         HOLIDAY_DATE_ROLL_CONV_CD,
         WEEKEND_DATE_ROLL_CONV_CD,
         EXPENSE_ALLOCATION_RK,
         FIRST_INTEREST_PAYMENT_DT,
         LAST_INTEREST_PAYMENT_DT,
         PROCESSED_DTTM,
         IRB_DUMMY_TYPE_CD,
         IRB_SRC_ACCOUNT_ID
   from &SYSLAST
      where FINANCIAL_ACCOUNT_TYPE_CD in ('DRV','DCD') 
         AND 
         VALID_FROM_DTTM <= &REPDT < VALID_TO_DTTM
   ;
quit;

%let SYSLAST = work.W1PICNWIL;

%global etls_sql_pushDown;
%let etls_sql_pushDown = &sys_sql_ip_all;

%rcSet(&sqlrc); 



/**  Step end Extract **/

/*==========================================================================* 
 * Step:            Extract                               A5ELGGF9.AK000121 * 
 * Transform:       Extract                                                 * 
 * Description:     DEP                                                     * 
 *                                                                          * 
 * Source Table:    FINANCIAL_ACCOUNT -                   A569C89V.AE0000FK * 
 *                   dwh_dds.FINANCIAL_ACCOUNT                              * 
 * Target Table:    Extract - work.W22ZTS0AP              A5ELGGF9.AF0000G4 * 
 *==========================================================================*/ 

%let transformID = %quote(A5ELGGF9.AK000121);
%let trans_rc = 0;
%let etls_stepStartTime = %sysfunc(datetime(), datetime20.); 

%let etls_recnt = 0;
%macro etls_recordCheck; 
   %let etls_recCheckExist = %eval(%sysfunc(exist(dwh_dds.FINANCIAL_ACCOUNT, DATA)) or 
         %sysfunc(exist(dwh_dds.FINANCIAL_ACCOUNT, VIEW))); 
   
   %if (&etls_recCheckExist) %then
   %do;
      proc sql noprint;
         select count(*) into :etls_recnt from dwh_dds.FINANCIAL_ACCOUNT;
      quit;
   %end;
%mend etls_recordCheck;
%etls_recordCheck;

%let SYSLAST = %nrquote(dwh_dds.FINANCIAL_ACCOUNT); 

%let SYS_SQL_IP_SPEEDO = Y;
%let SYS_SQL_MAPPUTTO = sas_put;
%let SYS_SQLREDUCEPUT = DBMS;
%global etls_sql_pushDown;
%let etls_sql_pushDown = -1;
option DBIDIRECTEXEC;

/*---- Map the columns  ----*/ 
proc datasets lib = work nolist nowarn memtype = (data view);
   delete W22ZTS0AP;
quit;

%put %str(NOTE: Mapping columns ...);
proc sql;
   create view work.W22ZTS0AP as
      select
         ACCOUNT_RK,
         VALID_FROM_DTTM,
         VALID_TO_DTTM,
         ACCOUNT_ID,
         SOURCE_SYSTEM_CD,
         ACCOUNT_REGISTRATION_NM,
         ALTERNATE_ACCOUNT_NM,
         FINANCIAL_ACCOUNT_TYPE_CD,
         AUTO_DEBIT_ACCOUNT_TYPE_CD,
         ACCOUNT_REGISTRATION_TYPE_CD,
         ACCOUNT_STATUS_CD,
         OPEN_DT,
         CLOSE_DT,
         CLOSE_REASON_CD,
         ACCOUNT_TAX_ID,
         EXPECTED_LOSS_PCT,
         INDIVIDUAL_ORGANIZATION_CD,
         SOURCE_CD,
         OPENING_CHANNEL_CD,
         PREFERRED_CHANNEL_CD,
         CURRENCY_CD,
         PRIMARY_PHONE_NO,
         PRIMARY_PHONE_TYPE_CD,
         SECONDARY_PHONE_NO,
         SECONDARY_PHONE_TYPE_CD,
         MAILABLE_FLG,
         TELEPHONABLE_FLG,
         EMAIL_FLG,
         SMS_FLG,
         DO_NOT_CONTACT_FLG,
         EMPLOYEE_RK,
         CURRENCY_BASED_ACCOUNT_FLG,
         FEE_BASED_FLG,
         ANNUAL_FEES_AMT,
         MONTHLY_FEES_AMT,
         CAMPAIGN_CD,
         COMMUNICATION_CD,
         REGISTERED_ONLINE_DT,
         FIRST_LOGIN_DT,
         ONLINE_BILL_PAYMENT_FLG,
         ID_VERIFICATION_TYPE_CD,
         PREVIOUS_ACCOUNT_ID,
         OPEN_BRANCH_FINANCIAL_UNIT_RK,
         PRIM_BRANCH_FINANCIAL_UNIT_RK,
         FINANCIAL_APPLICATION_RK,
         CREDIT_FACILITY_RK,
         FUTURE_MARGIN_INCOME_AMT,
         IN_DEFAULT_FLG,
         FINANCIAL_BOOK_RK,
         IRRECOVERABLE_FLG,
         OWNED_BY_INTERNAL_ORG_RK,
         PREVIOUS_BANK_EXTERNAL_ORG_RK,
         NETTING_SET_RK,
         REVOLVING_FLG,
         SOURCE_CHANNEL_CD,
         GRACE_PERIOD_DAYS_CNT,
         REMARGINING_DAYS_CNT,
         FINANCIAL_CALENDAR_RK,
         DAY_BASIS_CD,
         PORTFOLIO_ID,
         SECURITIZATION_POOL_RK,
         RECEIVABLES_POOL_RK,
         ACCOUNT_USAGE_TYPE_CD,
         RISK_ALARM_FLG,
         LOW_PROFITABILITY_FLG,
         ACCOUNT_LIFECYCLE_STG_CD,
         ATTRITION_ALARM_FLG,
         BALANCE_FROZEN_FLG,
         BALANCE_FROZEN_DT,
         ACCOUNT_BLOCK_REASON_CD,
         TAXATION_STATE_CD,
         EFFECTIVE_MATURITY_YEAR_NO,
         GL_ACCOUNT_RK,
         FROM_OTHER_INSTITUTION_FLG,
         ACCOUNT_RENEWAL_CNT,
         BALANCE_TRANSFER_DT,
         BALANCE_TRANSFER_AMT,
         BALANCE_TRANSFER_CNT,
         BASE_LONG_TERM_APR_RT,
         BROKER_FLG,
         MULT_RATE_FLG,
         AUTO_DEBIT_ACCOUNT_NO,
         WORST_STATUS_LAST_12_MTH_CD,
         WORST_STATUS_LAST_12_MTH_DT,
         BALANCE_TRNSF_OTHER_ACCT_CNT,
         EFFECTIVE_FROM_DTTM,
         EFFECTIVE_TO_DTTM,
         COUNTERPARTY_RK,
         INSURED_BY_COUNTERPARTY_RK,
         STATEMENT_FREQUENCY_CD,
         SECURITY_DEPOSIT_AMT,
         SECURITY_DEPOSIT_REFUND_AMT,
         FIRST_PAYMENT_DT,
         LAST_PAYMENT_DT,
         FIRST_RESET_DT,
         LAST_RESET_DT,
         RESETS_PER_ANNUM_NO,
         PRINCIPAL_PAYMENT_TYPE_CD,
         PRINCIPAL_PAYMENT_AMT,
         RATE_POLICY_RK,
         SPREAD_RT,
         DISCOUNT_SPREAD_RT,
         INITIAL_CONTRACT_RT,
         FIXED_MONTHLY_PREPAYMENT_RT,
         CAPITAL_ALLOCATION_RK,
         CAPITAL_COST_RK,
         SEGMENT_RK,
         NEAR_BRANCH_FINANCIAL_UNIT_RK,
         STATEMENT_OPT_FLG,
         VALUE_SCALING_FACTOR_RT,
         INTERNAL_REPORTING_CATEGORY_CD,
         CONVEXITY_ADJUSTMENT_FLG,
         ARREARS_PAYMENT_CD,
         QUANTO_FEATURE_RK,
         CASH_INTENSIVE_BUSINESS_FLG,
         LETTER_OF_CREDIT_ONFILE_FLG,
         TRADE_FINANCE_FLG,
         ANNUITY_PAYMENT_TYPE_CD,
         INTEREST_PAYMENT_TYPE_CD,
         INTEREST_PAYMENT_TIME_FREQ_CD,
         LIQUIDITY_CATEGORY_TYPE_CD,
         HOLIDAY_DATE_ROLL_CONV_CD,
         WEEKEND_DATE_ROLL_CONV_CD,
         EXPENSE_ALLOCATION_RK,
         FIRST_INTEREST_PAYMENT_DT,
         LAST_INTEREST_PAYMENT_DT,
         PROCESSED_DTTM,
         IRB_SRC_ACCOUNT_ID,
         IRB_DUMMY_TYPE_CD
   from &SYSLAST
      where FINANCIAL_ACCOUNT_TYPE_CD = 'DEP'
   ;
quit;

%let SYSLAST = work.W22ZTS0AP;

%global etls_sql_pushDown;
%let etls_sql_pushDown = &sys_sql_ip_all;

%rcSet(&sqlrc); 



/**  Step end Extract **/

/*==========================================================================* 
 * Step:            Extract                               A5ELGGF9.AK000122 * 
 * Transform:       Extract                                                 * 
 * Description:     по дате не фильтруем                                    * 
 *                                                                          * 
 * Source Table:    IRREGULAR_RATE_RESETS -               A569C89V.AE0000IO * 
 *                   dwh_dds.IRREGULAR_RATE_RESETS                          * 
 * Target Table:    IRREGULAR_RATE_RESETS -               A5ELGGF9.AF0000G5 * 
 *                   work.W1PIOK2VD                                         * 
 *==========================================================================*/ 

%let transformID = %quote(A5ELGGF9.AK000122);
%let trans_rc = 0;
%let etls_stepStartTime = %sysfunc(datetime(), datetime20.); 

%let etls_recnt = 0;
%macro etls_recordCheck; 
   %let etls_recCheckExist = %eval(%sysfunc(exist(dwh_dds.IRREGULAR_RATE_RESETS, DATA)) or 
         %sysfunc(exist(dwh_dds.IRREGULAR_RATE_RESETS, VIEW))); 
   
   %if (&etls_recCheckExist) %then
   %do;
      proc sql noprint;
         select count(*) into :etls_recnt from dwh_dds.IRREGULAR_RATE_RESETS;
      quit;
   %end;
%mend etls_recordCheck;
%etls_recordCheck;

%let SYSLAST = %nrquote(dwh_dds.IRREGULAR_RATE_RESETS); 

%let SYS_SQL_IP_SPEEDO = Y;
%let SYS_SQL_MAPPUTTO = sas_put;
%let SYS_SQLREDUCEPUT = DBMS;
%global etls_sql_pushDown;
%let etls_sql_pushDown = -1;
option DBIDIRECTEXEC;

/*---- Map the columns  ----*/ 
proc datasets lib = work nolist nowarn memtype = (data view);
   delete W1PIOK2VD;
quit;

%put %str(NOTE: Mapping columns ...);
proc sql;
   create view work.W1PIOK2VD as
      select
         IRREGULAR_RATE_RESETS_RK,
         RESET_DT,
         VALID_FROM_DTTM,
         VALID_TO_DTTM,
         PROCESSED_DTTM,
         ACCOUNT_RK,
         IRB_PAYMENT_DT,
         IRB_SETTLEMENT_RATE   
            format = 20.5
            informat = 20.5,
         IRB_SOURCE_SYSTEM_CD,
         (strip(put(input(substr(IRB_IRR_RATE_RESETS_ID  , findc(IRB_IRR_RATE_RESETS_ID  , '_', 'B')+1), best.), best.))) as IRB_IRR_RATE_RESETS_ID length = 32
            format = $32.
            informat = $32.
            label = 'IRB_IRR_RATE_RESETS_ID',
         IRB_IS_EXEC_FLG,
         IRB_DUMMY_TYPE_CD
   from &SYSLAST
   ;
quit;

%let SYSLAST = work.W1PIOK2VD;

%global etls_sql_pushDown;
%let etls_sql_pushDown = &sys_sql_ip_all;

%rcSet(&sqlrc); 



/**  Step end Extract **/

/*==========================================================================* 
 * Step:            Extract                               A5ELGGF9.AK000123 * 
 * Transform:       Extract                                                 * 
 * Description:                                                             * 
 *                                                                          * 
 * Source Table:    FINANCIAL_ACCOUNT_CHNG -              A569C89V.AE0000FM * 
 *                   dwh_dds.FINANCIAL_ACCOUNT_CHNG                         * 
 * Target Table:    FINANCIAL_ACCOUNT_CHNG -              A5ELGGF9.AF0000G6 * 
 *                   work.W1PIS88Y2                                         * 
 *==========================================================================*/ 

%let transformID = %quote(A5ELGGF9.AK000123);
%let trans_rc = 0;
%let etls_stepStartTime = %sysfunc(datetime(), datetime20.); 

%let etls_recnt = 0;
%macro etls_recordCheck; 
   %let etls_recCheckExist = %eval(%sysfunc(exist(dwh_dds.FINANCIAL_ACCOUNT_CHNG, DATA)) or 
         %sysfunc(exist(dwh_dds.FINANCIAL_ACCOUNT_CHNG, VIEW))); 
   
   %if (&etls_recCheckExist) %then
   %do;
      proc sql noprint;
         select count(*) into :etls_recnt from dwh_dds.FINANCIAL_ACCOUNT_CHNG;
      quit;
   %end;
%mend etls_recordCheck;
%etls_recordCheck;

%let SYSLAST = %nrquote(dwh_dds.FINANCIAL_ACCOUNT_CHNG); 

%let SYS_SQL_IP_SPEEDO = Y;
%let SYS_SQL_MAPPUTTO = sas_put;
%let SYS_SQLREDUCEPUT = DBMS;
%global etls_sql_pushDown;
%let etls_sql_pushDown = -1;
option DBIDIRECTEXEC;

/*---- Map the columns  ----*/ 
proc datasets lib = work nolist nowarn memtype = (data view);
   delete W1PIS88Y2;
quit;

data _null_;
   put "NOTE: The following column(s) do not have a column mapping, so the"
        " value(s) will be set to missing: AVG_DAILY_BALANCE_AMT";
run;

%put %str(NOTE: Mapping columns ...);
proc sql;
   create view work.W1PIS88Y2 as
      select
         ACCOUNT_RK,
         VALID_FROM_DTTM,
         VALID_TO_DTTM,
         STATEMENT_DT,
         BILL_DUE_DT,
         BILLED_AMT,
         CURRENT_BILL_AMT,
         BALANCE_AMT,
         EQUITY_BALANCE_AMT,
         MARGIN_BALANCE_AMT,
         INTEREST_BALANCE_AMT,
         PRINCIPAL_BALANCE_AMT,
         FEES_AMT,
         PAST_DUE_AMT,
         DAYS_PAYMENT_PAST_DUE_CNT,
         CURRENCY_CD,
         LAST_ACTIVITY_DT,
         TOTAL_BALANCE_AMT,
         . as AVG_DAILY_BALANCE_AMT length = 8
            format = 20.5
            informat = 20.5
            label = 'AVG_DAILY_BALANCE_AMT',
         MAX_ACCOUNT_VALUE_AMT,
         MIN_ACCOUNT_VALUE_AMT,
         AVG_ACCOUNT_VALUE_AMT,
         CURTAILMENT_AMT,
         MINIMUM_BILL_DUE_AMT,
         EXPOSURE_AT_DEFAULT_AMT,
         ADJUSTMENT_TO_EXPOSURE_AMT,
         ACCRUED_INTEREST_AMT,
         ACCRUED_BASE_INTEREST_AMT,
         LAST_PAYMENT_STATUS_CD,
         LAST_LOGIN_DT,
         ACCOUNT_VALUE_AMT,
         PROCESSED_DTTM
   from &SYSLAST
      where VALID_FROM_DTTM <= &REPDT < VALID_TO_DTTM
   ;
quit;

%let SYSLAST = work.W1PIS88Y2;

%global etls_sql_pushDown;
%let etls_sql_pushDown = &sys_sql_ip_all;

%rcSet(&sqlrc); 



/**  Step end Extract **/

/*==========================================================================* 
 * Step:            SQL Join                              A5ELGGF9.AK000124 * 
 * Transform:       Join                                                    * 
 * Description:     1. Сделка с несуществующим контрагентом                 * 
 *                                                                          * 
 * Source Tables:   CUSTOMER_X_FINANCIAL_ACCOUNT -        A569C89V.AE0000F2 * 
 *                   dwh_dds.CUSTOMER_X_FINANCIAL_ACCOUNT                   * 
 *                  COUNTERPARTY - dwh_dds.COUNTERPARTY   A569C89V.AE0000EQ * 
 *                  FINANCIAL_ACCOUNT - work.W1PICNWIL    A5ELGGF9.AF0000G3 * 
 * Target Table:    SQL Join - work.W1PIF9BMG             A5ELGGF9.AF0000G7 * 
 *==========================================================================*/ 

%let transformID = %quote(A5ELGGF9.AK000124);
%let trans_rc = 0;
%let etls_stepStartTime = %sysfunc(datetime(), datetime20.); 

%let etls_recnt = 0;
%macro etls_recordCheck; 
   %let etls_recCheckExist = %eval(%sysfunc(exist(dwh_dds.CUSTOMER_X_FINANCIAL_ACCOUNT, DATA)) or 
         %sysfunc(exist(dwh_dds.CUSTOMER_X_FINANCIAL_ACCOUNT, VIEW))); 
   
   %if (&etls_recCheckExist) %then
   %do;
      proc sql noprint;
         select count(*) into :etls_recnt from dwh_dds.CUSTOMER_X_FINANCIAL_ACCOUNT;
      quit;
   %end;
%mend etls_recordCheck;
%etls_recordCheck;

%let SYS_SQL_IP_SPEEDO = Y;
%let SYS_SQL_MAPPUTTO = sas_put;
%let SYS_SQLREDUCEPUT = DBMS;
%global etls_sql_pushDown;
%let etls_sql_pushDown = -1;
option DBIDIRECTEXEC;

proc datasets lib = work nolist nowarn memtype = (data view);
   delete W1PIF9BMG;
quit;

proc sql;
   create table work.W1PIF9BMG as
   select
      &REPDT as REPORTDATE length = 8   
         format = DATETIME20.
         informat = DATETIME20.
         label = 'REPORTDATE',
      'Сделка' as OBJECTTYPE1 length = 35   
         format = $35.
         informat = $35.
         label = 'OBJECTTYPE1',
      'Контрагент' as OBJECTTYPE2 length = 35   
         format = $35.
         informat = $35.
         label = 'OBJECTTYPE2',
      substr(W1PICNWIL.ACCOUNT_ID, findc(W1PICNWIL.ACCOUNT_ID, '_', 'B')+1) as OBJECTID length = 32   
         format = $32.
         informat = $32.
         label = 'OBJECTID'
   from
      work.W1PICNWIL left join 
      dwh_dds.CUSTOMER_X_FINANCIAL_ACCOUNT
         on
         (
            W1PICNWIL.ACCOUNT_RK = CUSTOMER_X_FINANCIAL_ACCOUNT.ACCOUNT_RK
            and CUSTOMER_X_FINANCIAL_ACCOUNT.VALID_FROM_DTTM <= &REPDT < CUSTOMER_X_FINANCIAL_ACCOUNT.VALID_TO_DTTM
            and CUSTOMER_X_FINANCIAL_ACCOUNT.RELATIONSHIP_TO_ACCOUNT_CD = 'DDC'
         ) left join 
      dwh_dds.COUNTERPARTY
         on
         (
            CUSTOMER_X_FINANCIAL_ACCOUNT.CUSTOMER_RK = COUNTERPARTY.COUNTERPARTY_RK
            and COUNTERPARTY.VALID_TO_DTTM = &ETL_SCD_FUTURE_DTTM
         )
   where
      W1PICNWIL.IRB_DUMMY_TYPE_CD IS NULL 
      and COUNTERPARTY.IRB_DUMMY_TYPE_CD IN ('D0','D3')
   ;
quit;

%global etls_sql_pushDown;
%let etls_sql_pushDown = &sys_sql_ip_all;

%rcSet(&sqlrc); 



/**  Step end SQL Join **/

/*==========================================================================* 
 * Step:            SQL Join                              A5ELGGF9.AK000125 * 
 * Transform:       Join                                                    * 
 * Description:     2. Несуществующая валюта базового актива/номинала       * 
 *                                                                          * 
 * Source Tables:   FINANCIAL_ACCOUNT - work.W1PICNWIL    A5ELGGF9.AF0000G3 * 
 *                  FINANCIAL_INSTRUMENT_ASSOC -          A569C89V.AE0000FW * 
 *                   dwh_dds.FINANCIAL_INSTRUMENT_ASSOC                     * 
 *                  FINANCIAL_INSTRUMENT -                A569C89V.AE0000FV * 
 *                   dwh_dds.FINANCIAL_INSTRUMENT                           * 
 *                  CURRENCY - dwh_dds.CURRENCY           A569C89V.AE0000EY * 
 * Target Table:    SQL Join - work.W1PIHZBF5             A5ELGGF9.AF0000G8 * 
 *==========================================================================*/ 

%let transformID = %quote(A5ELGGF9.AK000125);
%let trans_rc = 0;
%let etls_stepStartTime = %sysfunc(datetime(), datetime20.); 

%let etls_recnt = -1;
%let SYS_SQL_IP_SPEEDO = Y;
%let SYS_SQL_MAPPUTTO = sas_put;
%let SYS_SQLREDUCEPUT = DBMS;
%global etls_sql_pushDown;
%let etls_sql_pushDown = -1;
option DBIDIRECTEXEC;

proc datasets lib = work nolist nowarn memtype = (data view);
   delete W1PIHZBF5;
quit;

proc sql;
   create table work.W1PIHZBF5 as
   select
      &REPDT as REPORTDATE length = 8   
         format = DATETIME20.
         informat = DATETIME20.
         label = 'REPORTDATE',
      'Сделка' as OBJECTTYPE1 length = 35   
         format = $35.
         informat = $35.
         label = 'OBJECTTYPE1',
      'Валюта' as OBJECTTYPE2 length = 35   
         format = $35.
         informat = $35.
         label = 'OBJECTTYPE2',
      substr(W1PICNWIL.ACCOUNT_ID, findc(W1PICNWIL.ACCOUNT_ID, '_', 'B')+1) as OBJECTID length = 32   
         format = $32.
         informat = $32.
         label = 'OBJECTID'
   from
      work.W1PICNWIL left join 
      dwh_dds.FINANCIAL_INSTRUMENT_ASSOC
         on
         (
            W1PICNWIL.ACCOUNT_RK = FINANCIAL_INSTRUMENT_ASSOC.REFERENCE_ACCOUNT_RK
            and FINANCIAL_INSTRUMENT_ASSOC.VALID_FROM_DTTM <= &REPDT < FINANCIAL_INSTRUMENT_ASSOC.VALID_TO_DTTM
         ) left join 
      dwh_dds.FINANCIAL_INSTRUMENT
         on
         (
            FINANCIAL_INSTRUMENT_ASSOC.FINANCIAL_INSTRUMENT_RK = FINANCIAL_INSTRUMENT.FINANCIAL_INSTRUMENT_RK
            and FINANCIAL_INSTRUMENT.VALID_FROM_DTTM <= &REPDT < FINANCIAL_INSTRUMENT.VALID_TO_DTTM
         ) left join 
      dwh_dds.CURRENCY
         on
         (
            FINANCIAL_INSTRUMENT.CURRENCY_CD = CURRENCY.CURRENCY_CD
            and CURRENCY.VALID_TO_DTTM = &ETL_SCD_FUTURE_DTTM
         )
   where
      W1PICNWIL.IRB_DUMMY_TYPE_CD IS NULL 
      and CURRENCY.IRB_DUMMY_TYPE_CD IN ('D0','D3')
   ;
quit;

%global etls_sql_pushDown;
%let etls_sql_pushDown = &sys_sql_ip_all;

%rcSet(&sqlrc); 



/**  Step end SQL Join **/

/*==========================================================================* 
 * Step:            SQL Join                              A5ELGGF9.AK000126 * 
 * Transform:       Join                                                    * 
 * Description:     3. Процентный период по несуществующей сделке           * 
 *                                                                          * 
 * Source Tables:   FINANCIAL_ACCOUNT - work.W1PICNWIL    A5ELGGF9.AF0000G3 * 
 *                  FINANCIAL_INSTRUMENT_ASSOC -          A569C89V.AE0000FW * 
 *                   dwh_dds.FINANCIAL_INSTRUMENT_ASSOC                     * 
 *                  FINANCIAL_INSTRUMENT -                A569C89V.AE0000FV * 
 *                   dwh_dds.FINANCIAL_INSTRUMENT                           * 
 *                  IRREGULAR_RATE_RESETS -               A5ELGGF9.AF0000G5 * 
 *                   work.W1PIOK2VD                                         * 
 * Target Table:    SQL Join - work.W1PILM5C7             A5ELGGF9.AF0000G9 * 
 *==========================================================================*/ 

%let transformID = %quote(A5ELGGF9.AK000126);
%let trans_rc = 0;
%let etls_stepStartTime = %sysfunc(datetime(), datetime20.); 

%let etls_recnt = -1;
%let SYS_SQL_IP_SPEEDO = Y;
%let SYS_SQL_MAPPUTTO = sas_put;
%let SYS_SQLREDUCEPUT = DBMS;
%global etls_sql_pushDown;
%let etls_sql_pushDown = -1;
option DBIDIRECTEXEC;

proc datasets lib = work nolist nowarn memtype = (data view);
   delete W1PILM5C7;
quit;

proc sql;
   create table work.W1PILM5C7 as
   select
      &REPDT as REPORTDATE length = 8   
         format = DATETIME20.
         informat = DATETIME20.
         label = 'REPORTDATE',
      'Процентный период' as OBJECTTYPE1 length = 35   
         format = $35.
         informat = $35.
         label = 'OBJECTTYPE1',
      'Сделка' as OBJECTTYPE2 length = 35   
         format = $35.
         informat = $35.
         label = 'OBJECTTYPE2',
      W1PIOK2VD.IRB_IRR_RATE_RESETS_ID as OBJECTID length = 32   
         format = $32.
         informat = $32.
         label = 'OBJECTID',
      substr(W1PICNWIL.ACCOUNT_ID, findc(W1PICNWIL.ACCOUNT_ID, '_', 'B')+1) as ACCID length = 32   
         format = $32.
         informat = $32.
         label = 'ACCOUNT_ID'
   from
      work.W1PIOK2VD left join 
      work.W1PICNWIL
         on
         (
            W1PIOK2VD.ACCOUNT_RK = W1PICNWIL.ACCOUNT_RK
            and W1PICNWIL.FINANCIAL_ACCOUNT_TYPE_CD = 'DRV'
         ) left join 
      dwh_dds.FINANCIAL_INSTRUMENT_ASSOC
         on
         (
            W1PICNWIL.ACCOUNT_RK = FINANCIAL_INSTRUMENT_ASSOC.REFERENCE_ACCOUNT_RK
            and FINANCIAL_INSTRUMENT_ASSOC.FINANCIAL_INSTR_ASSOC_TYPE_CD = 'DRV'
            and FINANCIAL_INSTRUMENT_ASSOC.VALID_FROM_DTTM <= &REPDT < FINANCIAL_INSTRUMENT_ASSOC.VALID_TO_DTTM
         ) left join 
      dwh_dds.FINANCIAL_INSTRUMENT
         on
         (
            FINANCIAL_INSTRUMENT_ASSOC.FINANCIAL_INSTRUMENT_RK = FINANCIAL_INSTRUMENT.FINANCIAL_INSTRUMENT_RK
            and FINANCIAL_INSTRUMENT.VALID_FROM_DTTM <= &REPDT < FINANCIAL_INSTRUMENT.VALID_TO_DTTM
            and FINANCIAL_INSTRUMENT.FINANCIAL_INSTRUMENT_TYPE_CD IN ('CIS','IRS','CAP','FLR')
         )
   where
      W1PICNWIL.IRB_DUMMY_TYPE_CD IN ('D0','D3')
   ;
quit;

%global etls_sql_pushDown;
%let etls_sql_pushDown = &sys_sql_ip_all;

%rcSet(&sqlrc); 



/**  Step end SQL Join **/

/*==========================================================================* 
 * Step:            SQL Join                              A5ELGGF9.AK000127 * 
 * Transform:       Join                                                    * 
 * Description:     4. Текущая справедливая стоимость по несуществующей     * 
 *                   сделке                                                 * 
 *                                                                          * 
 * Source Tables:   FINANCIAL_ACCOUNT_CHNG -              A5ELGGF9.AF0000G6 * 
 *                   work.W1PIS88Y2                                         * 
 *                  FINANCIAL_INSTRUMENT_ASSOC -          A569C89V.AE0000FW * 
 *                   dwh_dds.FINANCIAL_INSTRUMENT_ASSOC                     * 
 *                  FINANCIAL_INSTRUMENT -                A569C89V.AE0000FV * 
 *                   dwh_dds.FINANCIAL_INSTRUMENT                           * 
 *                  FINANCIAL_ACCOUNT - work.W1PICNWIL    A5ELGGF9.AF0000G3 * 
 * Target Table:    SQL Join - work.W1PIROZTT             A5ELGGF9.AF0000GA * 
 *==========================================================================*/ 

%let transformID = %quote(A5ELGGF9.AK000127);
%let trans_rc = 0;
%let etls_stepStartTime = %sysfunc(datetime(), datetime20.); 

%let etls_recnt = -1;
%let SYS_SQL_IP_SPEEDO = Y;
%let SYS_SQL_MAPPUTTO = sas_put;
%let SYS_SQLREDUCEPUT = DBMS;
%global etls_sql_pushDown;
%let etls_sql_pushDown = -1;
option DBIDIRECTEXEC;

proc datasets lib = work nolist nowarn memtype = (data view);
   delete W1PIROZTT;
quit;

proc sql;
   create table work.W1PIROZTT as
   select
      &REPDT as REPORTDATE length = 8   
         format = DATETIME20.
         informat = DATETIME20.
         label = 'REPORTDATE',
      'Текущая справедливая стоимость' as OBJECTTYPE1 length = 35   
         format = $35.
         informat = $35.
         label = 'OBJECTTYPE1',
      'Сделка' as OBJECTTYPE2 length = 35   
         format = $35.
         informat = $35.
         label = 'OBJECTTYPE2',
      substr(W1PICNWIL.ACCOUNT_ID, findc(W1PICNWIL.ACCOUNT_ID, '_', 'B')+1) as OBJECTID length = 32   
         format = $32.
         informat = $32.
         label = 'OBJECTID'
   from
      work.W1PIS88Y2 left join 
      work.W1PICNWIL
         on
         (
            W1PIS88Y2.ACCOUNT_RK = W1PICNWIL.ACCOUNT_RK
            and W1PICNWIL.FINANCIAL_ACCOUNT_TYPE_CD = 'DRV'
         ) left join 
      dwh_dds.FINANCIAL_INSTRUMENT_ASSOC
         on
         (
            W1PICNWIL.ACCOUNT_RK = FINANCIAL_INSTRUMENT_ASSOC.REFERENCE_ACCOUNT_RK
            and FINANCIAL_INSTRUMENT_ASSOC.VALID_FROM_DTTM <= &REPDT < FINANCIAL_INSTRUMENT_ASSOC.VALID_TO_DTTM
         ) left join 
      dwh_dds.FINANCIAL_INSTRUMENT
         on
         (
            FINANCIAL_INSTRUMENT_ASSOC.FINANCIAL_INSTRUMENT_RK = FINANCIAL_INSTRUMENT.FINANCIAL_INSTRUMENT_RK
            and FINANCIAL_INSTRUMENT.FINANCIAL_INSTRUMENT_TYPE_CD NOT IN ('FUT','SPT')
            and FINANCIAL_INSTRUMENT.VALID_FROM_DTTM <= &REPDT < FINANCIAL_INSTRUMENT.VALID_TO_DTTM
         )
   where
      W1PICNWIL.IRB_DUMMY_TYPE_CD IN ('D0','D3')
   ;
quit;

%global etls_sql_pushDown;
%let etls_sql_pushDown = &sys_sql_ip_all;

%rcSet(&sqlrc); 



/**  Step end SQL Join **/

/*==========================================================================* 
 * Step:            SQL Join                              A5ELGGF9.AK000128 * 
 * Transform:       Join                                                    * 
 * Description:     5. Несуществующая связанная сделка DRV                  * 
 *                                                                          * 
 * Source Tables:   FINANCIAL_ACCOUNT - work.W1PICNWIL    A5ELGGF9.AF0000G3 * 
 *                  FINANCIAL_INSTRUMENT_ASSOC -          A569C89V.AE0000FW * 
 *                   dwh_dds.FINANCIAL_INSTRUMENT_ASSOC                     * 
 *                  FINANCIAL_INSTRUMENT -                A569C89V.AE0000FV * 
 *                   dwh_dds.FINANCIAL_INSTRUMENT                           * 
 * Target Table:    SQL Join - work.W1PIRPZ5J             A5ELGGF9.AF0000GB * 
 *==========================================================================*/ 

%let transformID = %quote(A5ELGGF9.AK000128);
%let trans_rc = 0;
%let etls_stepStartTime = %sysfunc(datetime(), datetime20.); 

%let etls_recnt = -1;
%let SYS_SQL_IP_SPEEDO = Y;
%let SYS_SQL_MAPPUTTO = sas_put;
%let SYS_SQLREDUCEPUT = DBMS;
%global etls_sql_pushDown;
%let etls_sql_pushDown = -1;
option DBIDIRECTEXEC;

proc datasets lib = work nolist nowarn memtype = (data view);
   delete W1PIRPZ5J;
quit;

proc sql;
   create table work.W1PIRPZ5J as
   select
      &REPDT as REPORTDATE length = 8   
         format = DATETIME20.
         informat = DATETIME20.
         label = 'REPORTDATE',
      'Сделка' as OBJECTTYPE1 length = 35   
         format = $35.
         informat = $35.
         label = 'OBJECTTYPE1',
      'Сделка' as OBJECTTYPE2 length = 35   
         format = $35.
         informat = $35.
         label = 'OBJECTTYPE2',
      substr(W1PICNWIL.ACCOUNT_ID, findc(W1PICNWIL.ACCOUNT_ID, '_', 'B')+1) as OBJECTID length = 32   
         format = $32.
         informat = $32.
         label = 'OBJECTID'
   from
      work.W1PICNWIL left join 
      dwh_dds.FINANCIAL_INSTRUMENT_ASSOC
         on
         (
            W1PICNWIL.ACCOUNT_RK = FINANCIAL_INSTRUMENT_ASSOC.REFERENCE_ACCOUNT_RK
            and FINANCIAL_INSTRUMENT_ASSOC.VALID_FROM_DTTM <= &REPDT < FINANCIAL_INSTRUMENT_ASSOC.VALID_TO_DTTM
         ) left join 
      dwh_dds.FINANCIAL_INSTRUMENT
         on
         (
            FINANCIAL_INSTRUMENT_ASSOC.FINANCIAL_INSTRUMENT_RK = FINANCIAL_INSTRUMENT.FINANCIAL_INSTRUMENT_RK
            and FINANCIAL_INSTRUMENT.VALID_FROM_DTTM <= &REPDT < FINANCIAL_INSTRUMENT.VALID_TO_DTTM
            and FINANCIAL_INSTRUMENT.FINANCIAL_INSTRUMENT_TYPE_CD IN ('IRS','CIS','SWP','SWS')
         )
   where
      W1PICNWIL.FINANCIAL_ACCOUNT_TYPE_CD = 'DRV'
      and FINANCIAL_INSTRUMENT.IRB_DUMMY_TYPE_CD IN ('D0','D3')
   ;
quit;

%global etls_sql_pushDown;
%let etls_sql_pushDown = &sys_sql_ip_all;

%rcSet(&sqlrc); 



/**  Step end SQL Join **/

/*==========================================================================* 
 * Step:            SQL Join                              A5ELGGF9.AK000129 * 
 * Transform:       Join                                                    * 
 * Description:     5. Несуществующая связанная сделка DCD                  * 
 *                                                                          * 
 * Source Tables:   FINANCIAL_ACCOUNT - work.W1PICNWIL    A5ELGGF9.AF0000G3 * 
 *                  FINANCIAL_ACCOUNT_ASSOC -             A569C89V.AE0000FL * 
 *                   dwh_dds.FINANCIAL_ACCOUNT_ASSOC                        * 
 *                  Extract - work.W22ZTS0AP              A5ELGGF9.AF0000G4 * 
 * Target Table:    SQL Join - work.W1PIZORC0             A5ELGGF9.AF0000GC * 
 *==========================================================================*/ 

%let transformID = %quote(A5ELGGF9.AK000129);
%let trans_rc = 0;
%let etls_stepStartTime = %sysfunc(datetime(), datetime20.); 

%let etls_recnt = -1;
%let SYS_SQL_IP_SPEEDO = Y;
%let SYS_SQL_MAPPUTTO = sas_put;
%let SYS_SQLREDUCEPUT = DBMS;
%global etls_sql_pushDown;
%let etls_sql_pushDown = -1;
option DBIDIRECTEXEC;

proc datasets lib = work nolist nowarn memtype = (data view);
   delete W1PIZORC0;
quit;

proc sql;
   create table work.W1PIZORC0 as
   select
      &REPDT as REPORTDATE length = 8   
         format = DATETIME20.
         informat = DATETIME20.
         label = 'REPORTDATE',
      'Сделка' as OBJECTTYPE1 length = 35   
         format = $35.
         informat = $35.
         label = 'OBJECTTYPE1',
      'Сделка' as OBJECTTYPE2 length = 35   
         format = $35.
         informat = $35.
         label = 'OBJECTTYPE2',
      substr(W1PICNWIL.ACCOUNT_ID, findc(W1PICNWIL.ACCOUNT_ID, '_', 'B')+1) as OBJECTID length = 32   
         format = $32.
         informat = $32.
         label = 'OBJECTID'
   from
      work.W1PICNWIL left join 
      dwh_dds.FINANCIAL_ACCOUNT_ASSOC
         on
         (
            W1PICNWIL.ACCOUNT_RK = FINANCIAL_ACCOUNT_ASSOC.ACCOUNT_RK
            and FINANCIAL_ACCOUNT_ASSOC.VALID_FROM_DTTM <= &REPDT < FINANCIAL_ACCOUNT_ASSOC.VALID_TO_DTTM
            and FINANCIAL_ACCOUNT_ASSOC.FINANCIAL_ACCT_ASSOC_TYPE_CD = 'DCD'
         ) left join 
      work.W22ZTS0AP
         on
         (
            FINANCIAL_ACCOUNT_ASSOC.REFERENCE_FINANCIAL_ACCOUNT_RK = W22ZTS0AP.ACCOUNT_RK
            and W22ZTS0AP.FINANCIAL_ACCOUNT_TYPE_CD = 'DEP'
         )
   where
      W1PICNWIL.FINANCIAL_ACCOUNT_TYPE_CD = 'DCD'
      and W22ZTS0AP.IRB_DUMMY_TYPE_CD IN ('D0','D3')
   ;
quit;

%global etls_sql_pushDown;
%let etls_sql_pushDown = &sys_sql_ip_all;

%rcSet(&sqlrc); 



/**  Step end SQL Join **/

/*==========================================================================* 
 * Step:            Append                                A5ELGGF9.AK00012A * 
 * Transform:       Append                                                  * 
 * Description:                                                             * 
 *                                                                          * 
 * Source Tables:   SQL Join - work.W1PIF9BMG             A5ELGGF9.AF0000G7 * 
 *                  SQL Join - work.W1PIHZBF5             A5ELGGF9.AF0000G8 * 
 *                  SQL Join - work.W1PILM5C7             A5ELGGF9.AF0000G9 * 
 *                  SQL Join - work.W1PIROZTT             A5ELGGF9.AF0000GA * 
 *                  SQL Join - work.W1PIRPZ5J             A5ELGGF9.AF0000GB * 
 *                  SQL Join - work.W1PIZORC0             A5ELGGF9.AF0000GC * 
 * Target Table:    Append - work.W1PJBT2PI               A5ELGGF9.AF0000GD * 
 *==========================================================================*/ 

%let transformID = %quote(A5ELGGF9.AK00012A);
%let trans_rc = 0;
%let etls_stepStartTime = %sysfunc(datetime(), datetime20.); 

%let etls_recCheckExist = 0; 
%let etls_recnt = 0; 
%macro etls_recordCheck; 
   %let etls_recCheckExist = %eval(%sysfunc(exist(work.W1PIF9BMG, DATA)) or 
         %sysfunc(exist(work.W1PIF9BMG, VIEW))); 
   
   %if (&etls_recCheckExist) %then
   %do;
      %local etls_syntaxcheck; 
      %let etls_syntaxcheck = %sysfunc(getoption(syntaxcheck)); 
      /* Turn off syntaxcheck option to perform following steps  */ 
      options nosyntaxcheck;
      
      proc contents data = work.W1PIF9BMG out = work.etls_contents(keep = nobs) noprint; 
      run; 
      
      data _null_; 
         set work.etls_contents (obs = 1); 
         call symput("etls_recnt", left(put(nobs,32.))); 
      run;
      
      proc datasets lib = work nolist nowarn memtype = (data view);
         delete etls_contents;
      quit;
      
      /* Reset syntaxcheck option to previous setting  */ 
      options &etls_syntaxcheck; 
   %end;
%mend etls_recordCheck;
%etls_recordCheck;

%let dbxrc = %eval(%sysfunc(exist(work.W1PIF9BMG, DATA)) or 
      %sysfunc(exist(work.W1PIF9BMG, VIEW))); 

/*---- Map the columns  ----*/ 
proc datasets lib = work nolist nowarn memtype = (data view);
   delete WJ2Z3TR;
quit;

%put %str(NOTE: Mapping columns ...);
proc sql;
   create view work.WJ2Z3TR as
      select
         REPORTDATE,
         OBJECTTYPE1,
         OBJECTTYPE2,
         OBJECTID
   from work.W1PIF9BMG
   ;
quit;

%let SYSLAST = work.WJ2Z3TR;

%let dbxrc = %eval(%sysfunc(exist(work.W1PIHZBF5, DATA)) or 
      %sysfunc(exist(work.W1PIHZBF5, VIEW))); 

/*---- Map the columns  ----*/ 
proc datasets lib = work nolist nowarn memtype = (data view);
   delete WJ2Z3TU;
quit;

%put %str(NOTE: Mapping columns ...);
proc sql;
   create view work.WJ2Z3TU as
      select
         REPORTDATE,
         OBJECTTYPE1,
         OBJECTTYPE2,
         OBJECTID
   from work.W1PIHZBF5
   ;
quit;

%let SYSLAST = work.WJ2Z3TU;

%let dbxrc = %eval(%sysfunc(exist(work.W1PILM5C7, DATA)) or 
      %sysfunc(exist(work.W1PILM5C7, VIEW))); 

%let dbxrc = %eval(%sysfunc(exist(work.W1PIROZTT, DATA)) or 
      %sysfunc(exist(work.W1PIROZTT, VIEW))); 

/*---- Map the columns  ----*/ 
proc datasets lib = work nolist nowarn memtype = (data view);
   delete WJ2Z3TX;
quit;

%put %str(NOTE: Mapping columns ...);
proc sql;
   create view work.WJ2Z3TX as
      select
         REPORTDATE,
         OBJECTTYPE1,
         OBJECTTYPE2,
         OBJECTID
   from work.W1PIROZTT
   ;
quit;

%let SYSLAST = work.WJ2Z3TX;

%let dbxrc = %eval(%sysfunc(exist(work.W1PIRPZ5J, DATA)) or 
      %sysfunc(exist(work.W1PIRPZ5J, VIEW))); 

/*---- Map the columns  ----*/ 
proc datasets lib = work nolist nowarn memtype = (data view);
   delete WJ2Z3U0;
quit;

%put %str(NOTE: Mapping columns ...);
proc sql;
   create view work.WJ2Z3U0 as
      select
         REPORTDATE,
         OBJECTTYPE1,
         OBJECTTYPE2,
         OBJECTID
   from work.W1PIRPZ5J
   ;
quit;

%let SYSLAST = work.WJ2Z3U0;

%let dbxrc = %eval(%sysfunc(exist(work.W1PIZORC0, DATA)) or 
      %sysfunc(exist(work.W1PIZORC0, VIEW))); 

/*---- Map the columns  ----*/ 
proc datasets lib = work nolist nowarn memtype = (data view);
   delete WJ2Z3U2;
quit;

%put %str(NOTE: Mapping columns ...);
proc sql;
   create view work.WJ2Z3U2 as
      select
         REPORTDATE,
         OBJECTTYPE1,
         OBJECTTYPE2,
         OBJECTID
   from work.W1PIZORC0
   ;
quit;

%let SYSLAST = work.WJ2Z3U2;

proc datasets lib = work nolist nowarn memtype = (data view);
   delete W1PJBT2PI;
quit;

data work.W1PJBT2PI / view=work.W1PJBT2PI;
   set work.WJ2Z3TR
       work.WJ2Z3TU
       work.W1PILM5C7
       work.WJ2Z3TX
       work.WJ2Z3U0
       work.WJ2Z3U2;
   keep REPORTDATE OBJECTTYPE1 OBJECTTYPE2 OBJECTID ACCID; 
run;

%rcSet(&syserr); 



/**  Step end Append **/

/*==========================================================================* 
 * Step:            Extract                               A5ELGGF9.AK00012B * 
 * Transform:       Extract                                                 * 
 * Description:     Группируем ошибки по сделкам                            * 
 *                                                                          * 
 * Source Table:    Append - work.W1PJBT2PI               A5ELGGF9.AF0000GD * 
 * Target Table:    Extract - work.W17GXE7V               A5ELGGF9.AF0000GE * 
 *==========================================================================*/ 

%let transformID = %quote(A5ELGGF9.AK00012B);
%let trans_rc = 0;
%let etls_stepStartTime = %sysfunc(datetime(), datetime20.); 

%let etls_recnt = -1;
%let SYSLAST = %nrquote(work.W1PJBT2PI); 

%let SYS_SQL_IP_SPEEDO = Y;
%let SYS_SQL_MAPPUTTO = sas_put;
%let SYS_SQLREDUCEPUT = DBMS;
%global etls_sql_pushDown;
%let etls_sql_pushDown = -1;
option DBIDIRECTEXEC;

/*---- Map the columns  ----*/ 
proc datasets lib = work nolist nowarn memtype = (data view);
   delete W17GXE7V;
quit;

%put %str(NOTE: Mapping columns ...);
proc sql;
   create view work.W17GXE7V as
      select
         (coalesce(ACCID, OBJECTID)) as ERRACCID length = 32
            format = $32.
            informat = $32.
            label = 'ERRACCID',
         (count(*)) as ERRCNT length = 8
            format = 11.
            informat = 11.
            label = 'ERRCNT'
   from &SYSLAST
   group by
      ERRACCID
   ;
quit;

%let SYSLAST = work.W17GXE7V;

%global etls_sql_pushDown;
%let etls_sql_pushDown = &sys_sql_ip_all;

%rcSet(&sqlrc); 



/**  Step end Extract **/

/*==========================================================================* 
 * Step:            Table Loader                          A5ELGGF9.AK00012C * 
 * Transform:       Table Loader (Version 2.1)                              * 
 * Description:                                                             * 
 *                                                                          * 
 * Source Table:    Append - work.W1PJBT2PI               A5ELGGF9.AF0000GD * 
 * Target Table:    DQ_DRVT_LOAD_11 -                     A5ELGGF9.AE00004C * 
 *                   dm_dq.DQ_DRVT_LOAD_11                                  * 
 *==========================================================================*/ 

%let transformID = %quote(A5ELGGF9.AK00012C);
%let trans_rc = 0;
%let etls_stepStartTime = %sysfunc(datetime(), datetime20.); 

%let SYSLAST = %nrquote(work.W1PJBT2PI); 

%let SYS_SQL_IP_SPEEDO = Y;
%let SYS_SQL_MAPPUTTO = sas_put;
%let SYS_SQLREDUCEPUT = DBMS;
%global etls_sql_pushDown;
%let etls_sql_pushDown = -1;
option DBIDIRECTEXEC;

%global etls_tableExist;
%global etls_numIndex;
%global etls_lastTable;
%let etls_tableExist = -1; 
%let etls_numIndex = -1; 
%let etls_lastTable = &SYSLAST; 

/*---- Define load data macro  ----*/ 

/* --------------------------------------------------------------
   Load Technique Selection: AppendToExisting - AppendProc
   Constraint and index action selections: 'ASIS','ASIS','ASIS','ASIS'
   Additional options selections... 
      Set unmapped to missing on updates: false 
   -------------------------------------------------------------- */
%macro etls_loader;

   %let etls_tableOptions = ;
   
   /*---- Map the columns  ----*/ 
   proc datasets lib = work nolist nowarn memtype = (data view);
      delete WJ2Z3UN;
   quit;
   
   %put %str(NOTE: Mapping columns ...);
   proc sql;
      create view work.WJ2Z3UN as
         select
            REPORTDATE,
            OBJECTTYPE1,
            OBJECTTYPE2,
            OBJECTID
      from &etls_lastTable
      ;
   quit;
   
   %let SYSLAST = work.WJ2Z3UN;
   
   %let etls_lastTable = &SYSLAST; 
   %let etls_tableOptions = ; 
   
   /* Determine if the target table exists  */ 
   %let etls_tableExist = %eval(%sysfunc(exist(dm_dq.DQ_DRVT_LOAD_11, DATA)) or 
         %sysfunc(exist(dm_dq.DQ_DRVT_LOAD_11, VIEW))); 
   
   /*---- Create a new table  ----*/ 
   %if (&etls_tableExist eq 0) %then 
   %do;  /* if table does not exist  */ 
   
      %put %str(NOTE: Creating table ...);
      
      data dm_dq.DQ_DRVT_LOAD_11
              (dbnull = (
                         REPORTDATE = YES
                         OBJECTTYPE1 = YES
                         OBJECTTYPE2 = YES
                         OBJECTID = YES));
         attrib REPORTDATE length = 8
            format = DATETIME20.
            informat = DATETIME20.; 
         attrib OBJECTTYPE1 length = $35
            format = $35.
            informat = $35.; 
         attrib OBJECTTYPE2 length = $35
            format = $35.
            informat = $35.; 
         attrib OBJECTID length = $32
            format = $32.
            informat = $32.; 
         call missing(of _all_);
         stop;
      run;
      
      %rcSet(&syserr); 
      
   %end;  /* if table does not exist  */ 
   
   /*---- Append  ----*/ 
   %put %str(NOTE: Appending data ...);
   
   proc append base = dm_dq.DQ_DRVT_LOAD_11 
      data = &etls_lastTable (&etls_tableOptions)  force ; 
    run; 
   
   %rcSet(&syserr); 
   
   proc datasets lib = work nolist nowarn memtype = (data view);
      delete WJ2Z3UN;
   quit;
   
%mend etls_loader;
%etls_loader;

%let etls_recnt = 0;
%macro etls_recordCheck; 
   %let etls_recCheckExist = %eval(%sysfunc(exist(dm_dq.DQ_DRVT_LOAD_11, DATA)) or 
         %sysfunc(exist(dm_dq.DQ_DRVT_LOAD_11, VIEW))); 
   
   %if (&etls_recCheckExist) %then
   %do;
      proc sql noprint;
         select count(*) into :etls_recnt from dm_dq.DQ_DRVT_LOAD_11;
      quit;
   %end;
%mend etls_recordCheck;
%etls_recordCheck;



/**  Step end Table Loader **/

/*==========================================================================* 
 * Step:            User Written                          A5ELGGF9.AK00012D * 
 * Transform:       User Written                                            * 
 * Description:     Сбор статистики                                         * 
 *                                                                          * 
 * Source Tables:   FINANCIAL_ACCOUNT - work.W1PICNWIL    A5ELGGF9.AF0000G3 * 
 *                  ETL_JOB - etl_sys.ETL_JOB             A59S11RW.AE00001A * 
 *                  Extract - work.W17GXE7V               A5ELGGF9.AF0000GE * 
 * Target Table:    User Written - work.W1P4AR1M8         A5ELGGF9.AF0000GF * 
 *                                                                          * 
 * User Written:    SourceCode                                              * 
 *==========================================================================*/ 

%let transformID = %quote(A5ELGGF9.AK00012D);
%let trans_rc = 0;
%let etls_stepStartTime = %sysfunc(datetime(), datetime20.); 

%let etls_recnt = -1;
%let _INPUT_count = 3;
%let _INPUT = work.W1PICNWIL;
%let _INPUT_connect = ;
%let _INPUT_engine = ;
%let _INPUT_memtype = VIEW;
%let _INPUT_options = %nrquote();
%let _INPUT_alter = %nrquote();
%let _INPUT_path = %nrquote(/FINANCIAL_ACCOUNT_A5ELGGF9.AF0000G3%(WorkTable%));
%let _INPUT_type = 1;
%let _INPUT_label = %nrquote();

%let _INPUT1 = work.W1PICNWIL;
%let _INPUT1_connect = ;
%let _INPUT1_engine = ;
%let _INPUT1_memtype = VIEW;
%let _INPUT1_options = %nrquote();
%let _INPUT1_alter = %nrquote();
%let _INPUT1_path = %nrquote(/FINANCIAL_ACCOUNT_A5ELGGF9.AF0000G3%(WorkTable%));
%let _INPUT1_type = 1;
%let _INPUT1_label = %nrquote();

%let _INPUT2 = etl_sys.ETL_JOB;
%let _INPUT2_connect =  PATH=DWH.IMB.RU AUTHDOMAIN="OraAuth_ETL_SYS" 
;
%let _INPUT2_engine = ORACLE;
%let _INPUT2_memtype = DATA;
%let _INPUT2_options = %nrquote();
%let _INPUT2_alter = %nrquote();
%let _INPUT2_path = %nrquote(/DWH_DWHDDS_SYS/Tables/ETL_SYS/ETL_JOB%(Table%));
%let _INPUT2_type = 1;
%let _INPUT2_label = %nrquote();

%let _INPUT3 = work.W17GXE7V;
%let _INPUT3_connect = ;
%let _INPUT3_engine = ;
%let _INPUT3_memtype = VIEW;
%let _INPUT3_options = %nrquote();
%let _INPUT3_alter = %nrquote();
%let _INPUT3_path = %nrquote(/Extract_A5ELGGF9.AF0000GE%(WorkTable%));
%let _INPUT3_type = 1;
%let _INPUT3_label = %nrquote();

%let _OUTPUT_count = 1;
%let _OUTPUT = work.W1P4AR1M8;
%let _OUTPUT_connect = ;
%let _OUTPUT_engine = ;
%let _OUTPUT_memtype = DATA;
%let _OUTPUT_options = %nrquote();
%let _OUTPUT_alter = %nrquote();
%let _OUTPUT_path = %nrquote(/User Written_A5ELGGF9.AF0000GF%(WorkTable%));
%let _OUTPUT_type = 1;
%let _OUTPUT_label = %nrquote();
/* List of target columns to keep  */ 
%let _OUTPUT_keep = REP_DT REP_ID PRC CNT_ALL CNT_ERR DWH_DT;
%let _OUTPUT_col_count = 6;
%let _OUTPUT_col0_name = REP_DT;
%let _OUTPUT_col0_table = work.W1P4AR1M8;
%let _OUTPUT_col0_length = 8;
%let _OUTPUT_col0_type = ;
%let _OUTPUT_col0_format = DATETIME20.;
%let _OUTPUT_col0_informat = ;
%let _OUTPUT_col0_label = %nrquote();
%let _OUTPUT_col0_exp = ;
%let _OUTPUT_col0_input_count = 0;
%let _OUTPUT_col1_name = REP_ID;
%let _OUTPUT_col1_table = work.W1P4AR1M8;
%let _OUTPUT_col1_length = 8;
%let _OUTPUT_col1_type = ;
%let _OUTPUT_col1_format = ;
%let _OUTPUT_col1_informat = ;
%let _OUTPUT_col1_label = %nrquote();
%let _OUTPUT_col1_exp = ;
%let _OUTPUT_col1_input_count = 0;
%let _OUTPUT_col2_name = PRC;
%let _OUTPUT_col2_table = work.W1P4AR1M8;
%let _OUTPUT_col2_length = 8;
%let _OUTPUT_col2_type = ;
%let _OUTPUT_col2_format = ;
%let _OUTPUT_col2_informat = ;
%let _OUTPUT_col2_label = %nrquote();
%let _OUTPUT_col2_exp = ;
%let _OUTPUT_col2_input_count = 0;
%let _OUTPUT_col3_name = CNT_ALL;
%let _OUTPUT_col3_table = work.W1P4AR1M8;
%let _OUTPUT_col3_length = 8;
%let _OUTPUT_col3_type = ;
%let _OUTPUT_col3_format = ;
%let _OUTPUT_col3_informat = ;
%let _OUTPUT_col3_label = %nrquote();
%let _OUTPUT_col3_exp = ;
%let _OUTPUT_col3_input_count = 0;
%let _OUTPUT_col4_name = CNT_ERR;
%let _OUTPUT_col4_table = work.W1P4AR1M8;
%let _OUTPUT_col4_length = 8;
%let _OUTPUT_col4_type = ;
%let _OUTPUT_col4_format = ;
%let _OUTPUT_col4_informat = ;
%let _OUTPUT_col4_label = %nrquote();
%let _OUTPUT_col4_exp = ;
%let _OUTPUT_col4_input_count = 0;
%let _OUTPUT_col5_name = DWH_DT;
%let _OUTPUT_col5_table = work.W1P4AR1M8;
%let _OUTPUT_col5_length = 8;
%let _OUTPUT_col5_type = ;
%let _OUTPUT_col5_format = DATETIME20.;
%let _OUTPUT_col5_informat = ;
%let _OUTPUT_col5_label = %nrquote();
%let _OUTPUT_col5_exp = ;
%let _OUTPUT_col5_input_count = 0;

%let _OUTPUT1 = work.W1P4AR1M8;
%let _OUTPUT1_connect = ;
%let _OUTPUT1_engine = ;
%let _OUTPUT1_memtype = DATA;
%let _OUTPUT1_options = %nrquote();
%let _OUTPUT1_alter = %nrquote();
%let _OUTPUT1_path = %nrquote(/User Written_A5ELGGF9.AF0000GF%(WorkTable%));
%let _OUTPUT1_type = 1;
%let _OUTPUT1_label = %nrquote();
/* List of target columns to keep  */ 
%let _OUTPUT1_keep = REP_DT REP_ID PRC CNT_ALL CNT_ERR DWH_DT;
%let _OUTPUT1_col_count = 6;
%let _OUTPUT1_col0_name = REP_DT;
%let _OUTPUT1_col0_table = work.W1P4AR1M8;
%let _OUTPUT1_col0_length = 8;
%let _OUTPUT1_col0_type = ;
%let _OUTPUT1_col0_format = DATETIME20.;
%let _OUTPUT1_col0_informat = ;
%let _OUTPUT1_col0_label = %nrquote();
%let _OUTPUT1_col0_exp = ;
%let _OUTPUT1_col0_input_count = 0;
%let _OUTPUT1_col1_name = REP_ID;
%let _OUTPUT1_col1_table = work.W1P4AR1M8;
%let _OUTPUT1_col1_length = 8;
%let _OUTPUT1_col1_type = ;
%let _OUTPUT1_col1_format = ;
%let _OUTPUT1_col1_informat = ;
%let _OUTPUT1_col1_label = %nrquote();
%let _OUTPUT1_col1_exp = ;
%let _OUTPUT1_col1_input_count = 0;
%let _OUTPUT1_col2_name = PRC;
%let _OUTPUT1_col2_table = work.W1P4AR1M8;
%let _OUTPUT1_col2_length = 8;
%let _OUTPUT1_col2_type = ;
%let _OUTPUT1_col2_format = ;
%let _OUTPUT1_col2_informat = ;
%let _OUTPUT1_col2_label = %nrquote();
%let _OUTPUT1_col2_exp = ;
%let _OUTPUT1_col2_input_count = 0;
%let _OUTPUT1_col3_name = CNT_ALL;
%let _OUTPUT1_col3_table = work.W1P4AR1M8;
%let _OUTPUT1_col3_length = 8;
%let _OUTPUT1_col3_type = ;
%let _OUTPUT1_col3_format = ;
%let _OUTPUT1_col3_informat = ;
%let _OUTPUT1_col3_label = %nrquote();
%let _OUTPUT1_col3_exp = ;
%let _OUTPUT1_col3_input_count = 0;
%let _OUTPUT1_col4_name = CNT_ERR;
%let _OUTPUT1_col4_table = work.W1P4AR1M8;
%let _OUTPUT1_col4_length = 8;
%let _OUTPUT1_col4_type = ;
%let _OUTPUT1_col4_format = ;
%let _OUTPUT1_col4_informat = ;
%let _OUTPUT1_col4_label = %nrquote();
%let _OUTPUT1_col4_exp = ;
%let _OUTPUT1_col4_input_count = 0;
%let _OUTPUT1_col5_name = DWH_DT;
%let _OUTPUT1_col5_table = work.W1P4AR1M8;
%let _OUTPUT1_col5_length = 8;
%let _OUTPUT1_col5_type = ;
%let _OUTPUT1_col5_format = DATETIME20.;
%let _OUTPUT1_col5_informat = ;
%let _OUTPUT1_col5_label = %nrquote();
%let _OUTPUT1_col5_exp = ;
%let _OUTPUT1_col5_input_count = 0;

/*---- Start of User Written Code  ----*/ 

proc sql;
/*Кол-во всех уникальных деривативных сделок*/
	select count(*) into :CNT_ALL from &_INPUT1;
/*Кол-во ошибочных сделок*/
	select count(*) into :CNT_ERR from &_INPUT3;
/*Дата успешного выполнения процесса в DWH*/
	select end_dttm into :DWH_DT from &_INPUT2 where JOB_ID = (
  select MAX(job_id) 
  from &_INPUT2 
  where upper(job_nm) = '081_360_COMMIT_MIDAS_FIN_INSTR_FULL' and success_flg = 'Y'
  );
quit;
%error_check(mpStepType=SQL);

data &_OUTPUT1;
	attrib
		REP_DT length = 8 format = DATETIME20.
		REP_ID length = 8
		PRC length =8
		CNT_ALL length=8
		CNT_ERR length = 8
		DWH_DT length = 8 format = DATETIME20.
	;

	REP_DT = &REPDT.;
	REP_ID = 11;
	PRC = DIVIDE(&CNT_ERR. , &CNT_ALL.) * 100;
	if missing(PRC) then PRC=0;
	CNT_ALL = &CNT_ALL.;
	CNT_ERR = &CNT_ERR.;
	DWH_DT = "&DWH_DT."dt;
run;
%error_check(mpStepType=DATA);
/*---- End of User Written Code  ----*/ 

%rcSet(&syserr); 
%rcSet(&sqlrc); 


/**  Step end User Written **/

/*==========================================================================* 
 * Step:            Table Loader                          A5ELGGF9.AK00012E * 
 * Transform:       Table Loader (Version 2.1)                              * 
 * Description:                                                             * 
 *                                                                          * 
 * Source Table:    User Written - work.W1P4AR1M8         A5ELGGF9.AF0000GF * 
 * Target Table:    DQ_DRVT_REPORT_PRC -                  A5ELGGF9.AE00004E * 
 *                   dm_dq.DQ_DRVT_REPORT_PRC                               * 
 *==========================================================================*/ 

%let transformID = %quote(A5ELGGF9.AK00012E);
%let trans_rc = 0;
%let etls_stepStartTime = %sysfunc(datetime(), datetime20.); 

%let SYSLAST = %nrquote(work.W1P4AR1M8); 

%let SYS_SQL_IP_SPEEDO = Y;
%let SYS_SQL_MAPPUTTO = sas_put;
%let SYS_SQLREDUCEPUT = DBMS;
%global etls_sql_pushDown;
%let etls_sql_pushDown = -1;
option DBIDIRECTEXEC;

%global etls_tableExist;
%global etls_numIndex;
%global etls_lastTable;
%let etls_tableExist = -1; 
%let etls_numIndex = -1; 
%let etls_lastTable = &SYSLAST; 

/*---- Define load data macro  ----*/ 

/* --------------------------------------------------------------
   Load Technique Selection: AppendToExisting - AppendProc
   Constraint and index action selections: 'ASIS','ASIS','ASIS','ASIS'
   Additional options selections... 
      Set unmapped to missing on updates: false 
   -------------------------------------------------------------- */
%macro etls_loader;

   %let etls_tableOptions = ;
   
   /*---- Map the columns  ----*/ 
   proc datasets lib = work nolist nowarn memtype = (data view);
      delete WJ2Z43V;
   quit;
   
   %put %str(NOTE: Mapping columns ...);
   proc sql;
      create view work.WJ2Z43V as
         select
            REP_DT   
               informat = DATETIME20.,
            REP_ID   
               format = 7.
               informat = 7.,
            PRC   
               format = 19.8
               informat = 19.8,
            CNT_ALL   
               format = 13.
               informat = 13.,
            CNT_ERR   
               format = 13.
               informat = 13.,
            DWH_DT   
               informat = DATETIME20.
      from &etls_lastTable
      ;
   quit;
   
   %let SYSLAST = work.WJ2Z43V;
   
   %let etls_lastTable = &SYSLAST; 
   %let etls_tableOptions = ; 
   
   /* Determine if the target table exists  */ 
   %let etls_tableExist = %eval(%sysfunc(exist(dm_dq.DQ_DRVT_REPORT_PRC, DATA)) or 
         %sysfunc(exist(dm_dq.DQ_DRVT_REPORT_PRC, VIEW))); 
   
   /*---- Create a new table  ----*/ 
   %if (&etls_tableExist eq 0) %then 
   %do;  /* if table does not exist  */ 
   
      %put %str(NOTE: Creating table ...);
      
      data dm_dq.DQ_DRVT_REPORT_PRC
              (dbnull = (
                         REP_DT = NO
                         REP_ID = NO
                         PRC = YES
                         CNT_ALL = YES
                         CNT_ERR = YES
                         DWH_DT = YES));
         attrib REP_DT length = 8
            format = DATETIME20.
            informat = DATETIME20.
            label = 'REP_DT'; 
         attrib REP_ID length = 8
            format = 7.
            informat = 7.
            label = 'REP_ID'; 
         attrib PRC length = 8
            format = 19.8
            informat = 19.8
            label = 'PRC'; 
         attrib CNT_ALL length = 8
            format = 13.
            informat = 13.
            label = 'CNT_ALL'; 
         attrib CNT_ERR length = 8
            format = 13.
            informat = 13.
            label = 'CNT_ERR'; 
         attrib DWH_DT length = 8
            format = DATETIME20.
            informat = DATETIME20.
            label = 'DWH_DT'; 
         call missing(of _all_);
         stop;
      run;
      
      %rcSet(&syserr); 
      
   %end;  /* if table does not exist  */ 
   
   /*---- Append  ----*/ 
   %put %str(NOTE: Appending data ...);
   
   proc append base = dm_dq.DQ_DRVT_REPORT_PRC 
      data = &etls_lastTable (&etls_tableOptions)  force ; 
    run; 
   
   %rcSet(&syserr); 
   
   proc datasets lib = work nolist nowarn memtype = (data view);
      delete WJ2Z43V;
   quit;
   
%mend etls_loader;
%etls_loader;

%let etls_recnt = 0;
%macro etls_recordCheck; 
   %let etls_recCheckExist = %eval(%sysfunc(exist(dm_dq.DQ_DRVT_REPORT_PRC, DATA)) or 
         %sysfunc(exist(dm_dq.DQ_DRVT_REPORT_PRC, VIEW))); 
   
   %if (&etls_recCheckExist) %then
   %do;
      proc sql noprint;
         select count(*) into :etls_recnt from dm_dq.DQ_DRVT_REPORT_PRC;
      quit;
   %end;
%mend etls_recordCheck;
%etls_recordCheck;



/**  Step end Table Loader **/

/*==========================================================================* 
 * Step:            Завершить модуль                      A5ELGGF9.AK00012F * 
 * Transform:       Завершить модуль                                        * 
 * Description:                                                             * 
 *==========================================================================*/ 

%let transformID = %quote(A5ELGGF9.AK00012F);
%let trans_rc = 0;
%let etls_stepStartTime = %sysfunc(datetime(), datetime20.); 

%let _INPUT_count = 0; 
%let _OUTPUT_count = 0; 


/*****************************************************************
* ВЕРСИЯ:
*   $Id: transform_job_finish.sas 247 2012-04-03 07:31:10Z nesterenok $
*
******************************************************************
* НАЗНАЧЕНИЕ:
*   Регистрирует конец модуля ETL.
*
* ПАРАМЕТРЫ:
*   нет
*
******************************************************************/

%macro transform_job_finish;

   /* Продолжаем модуль */
   %job_continue_reg(mpJobType=JOB, mpJobName=&ETLS_JobName., mpPostEvent=N);

   /* Завершаем модуль */
   %job_finish_reg(mpJobType=JOB);

%mend transform_job_finish;

%transform_job_finish;


%rcSet(&syserr); 
%rcSet(&sysrc); 
%rcSet(&sqlrc); 



/**  Step end Завершить модуль **/

%let etls_endTime = %sysfunc(datetime(),datetime.);



/**  Job end 202_110_Mart_DQ_DRVT_REP11 **/

/* Reset jobid and name */
%let jobID = %quote(A5ELGGF9.AH00003N);
%let etls_jobName = %nrquote(202_002_Stream_DQ_DRVT);

/**************************************************************************** 
 * Job:             202_120_Mart_DQ_DRVT_REP12            A5ELGGF9.AH00002I * 
 * Description:     Корректная смена предыдущего процентного периода на     * 
 *                   текущий.                                               * 
 *                                                                          * 
 * Metadata Server: bravo14                                                 * 
 * Port:            8561                                                    * 
 * Location:        /DWH_DMDQ_REP/Jobs/Includes/DQ_DRVT                     * 
 *                                                                          * 
 * Server:          SASApp                                A5C46MZY.AQ000002 * 
 *                                                                          * 
 * Source Tables:   FINANCIAL_INSTRUMENT_ASSOC -          A569C89V.AE0000FW * 
 *                   dwh_dds.FINANCIAL_INSTRUMENT_ASSOC                     * 
 *                  FINANCIAL_INSTRUMENT -                A569C89V.AE0000FV * 
 *                   dwh_dds.FINANCIAL_INSTRUMENT                           * 
 *                  SWAP_INSTRUMENT_LEG -                 A569C89V.AE0000JF * 
 *                   dwh_dds.SWAP_INSTRUMENT_LEG                            * 
 *                  FINANCIAL_ACCOUNT -                   A569C89V.AE0000FK * 
 *                   dwh_dds.FINANCIAL_ACCOUNT                              * 
 *                  IRREGULAR_RATE_RESETS -               A569C89V.AE0000IO * 
 *                   dwh_dds.IRREGULAR_RATE_RESETS                          * 
 *                  IRREGULAR_RATE_RESETS -               A569C89V.AE0000IO * 
 *                   dwh_dds.IRREGULAR_RATE_RESETS                          * 
 *                  FINANCIAL_INSTRUMENT_TYPE -           A569C89V.AE0000FZ * 
 *                   dwh_dds.FINANCIAL_INSTRUMENT_TYPE                      * 
 *                  ETL_JOB - etl_sys.ETL_JOB             A59S11RW.AE00001A * 
 * Target Tables:   DQ_DRVT_DWH_DM - dm_dq.DQ_DRVT_DWH_DM A5ELGGF9.AE000049 * 
 *                  DQ_DRVT_INSTRUMENTTYPE -              A5ELGGF9.AE00004A * 
 *                   dm_dq.DQ_DRVT_INSTRUMENTTYPE                           * 
 *                  DQ_DRVT_REPORT_PRC -                  A5ELGGF9.AE00004E * 
 *                   dm_dq.DQ_DRVT_REPORT_PRC                               * 
 *                  DQ_DRVT_DWH_DM - dm_dq.DQ_DRVT_DWH_DM A5ELGGF9.AE000049 * 
 *                  DQ_DRVT_REPORT_PRC -                  A5ELGGF9.AE00004E * 
 *                   dm_dq.DQ_DRVT_REPORT_PRC                               * 
 *                                                                          * 
 * Generated on:    16 Июль 2013 г. 17:46:22 MSD                            * 
 * Generated by:    sasdwh                                                  * 
 * Version:         SAS Data Integration Studio 4.5                         * 
 ****************************************************************************/ 

/* General macro variables  */ 
%let jobID = %quote(A5ELGGF9.AH00002I);
%let etls_jobName = %nrquote(202_120_Mart_DQ_DRVT_REP12);
%let etls_userID = %nrquote(sasdwh);


/* Create metadata macro variables */
%let IOMServer      = %nrquote(SASApp);
%let metaPort       = %nrquote(8561);
%let metaServer     = %nrquote(bravo14);

/* Set metadata options */
options metaport       = &metaPort 
        metaserver     = "&metaServer"; 

/* Setup for capturing job status  */ 
%let etls_startTime = %sysfunc(datetime(),datetime.);
%let etls_recordsBefore = 0;
%let etls_recordsAfter = 0;
%let etls_lib = 0;
%let etls_table = 0;

%global etls_debug; 
%macro etls_setDebug; 
   %if %str(&etls_debug) ne 0 %then 
      OPTIONS MPRINT%str(;); 
%mend; 
%etls_setDebug; 

/*---- Start of Pre-Process Code  ----*/ 

%LET REPDT=&DMDQ_REPORT_START_DTTM;
/*---- End of Pre-Process Code  ----*/ 

%rcSet(&syserr); 
%rcSet(&sqlrc); 

/*==========================================================================* 
 * Step:            Начать модуль                         A5ELGGF9.AK00012G * 
 * Transform:       Начать модуль                                           * 
 * Description:                                                             * 
 *==========================================================================*/ 

%let transformID = %quote(A5ELGGF9.AK00012G);
%let trans_rc = 0;
%let etls_stepStartTime = %sysfunc(datetime(), datetime20.); 

%let _INPUT_count = 0; 
%let _OUTPUT_count = 0; 


/*****************************************************************
* ВЕРСИЯ:
*   $Id: transform_job_start.sas 1747 2012-08-01 11:26:13Z nesterenok $
*
******************************************************************
* НАЗНАЧЕНИЕ:
*   Регистрирует начало модуля ETL.
*
* ПАРАМЕТРЫ:
*   нет
*
******************************************************************/

%macro transform_job_start;

   /* Продолжаем поток (или создаем новый) */
   %local lmvStreamName;
   %if %sysfunc(sysexist(LSB_JOBNAME)) %then
      %let lmvStreamName = %scan(%sysfunc(sysget(LSB_JOBNAME)), 3, :);
   %else
      %let lmvStreamName = ;

   %job_continue_reg(mpJobType=STREAM, mpJobName=&lmvStreamName, mpPostEvent=N, mpForcedStart=Y);

   /* Для DI, начинаем поток заново, если старый был начат не сегодня */
   %if %length(&lmvStreamName) eq 0 and &STREAM_START_DT ne %sysfunc(today()) %then %do;
      %job_start_reg(mpJobType=STREAM, mpParentJobId=, mpJobName=&lmvStreamName.);
   %end;

   /* Начинаем модуль */
   %job_start_reg(mpJobType=JOB, mpParentJobId=&STREAM_ID, mpJobName=&ETLS_JobName.);

%mend transform_job_start;

%transform_job_start;


%rcSet(&syserr); 
%rcSet(&sysrc); 
%rcSet(&sqlrc); 



/**  Step end Начать модуль **/

/*==========================================================================* 
 * Step:            Очистить таблицу                      A5ELGGF9.AK00012H * 
 * Transform:       Очистить таблицу                                        * 
 * Description:                                                             * 
 *                                                                          * 
 * Target Table:    DQ_DRVT_DWH_DM - dm_dq.DQ_DRVT_DWH_DM A5ELGGF9.AE000049 * 
 *==========================================================================*/ 

%let transformID = %quote(A5ELGGF9.AK00012H);
%let trans_rc = 0;
%let etls_stepStartTime = %sysfunc(datetime(), datetime20.); 

%let _INPUT_count = 0; 
%let _OUTPUT_count = 1; 
%let _OUTPUT = dm_dq.DQ_DRVT_DWH_DM;
%let _OUTPUT_connect =  DEFER=YES PATH=DWH.IMB.RU AUTHDOMAIN="OraAuth_DM_DQ" 
;
%let _OUTPUT_engine = ORACLE;
%let _OUTPUT_memtype = DATA;
%let _OUTPUT_options = %nrquote();
%let _OUTPUT_alter = %nrquote();
%let _OUTPUT_path = %nrquote(/DWH_DMDQ_REP/Marts/DQ_DRVT/DQ_DRVT_DWH_DM%(Table%));
%let _OUTPUT_type = 1;
%let _OUTPUT_label = %nrquote();
/* List of target columns to keep  */ 
%let _OUTPUT_keep = REPORTCODE REPORTDATE FRONTKDEALID FRONTFDEALID DEALID 
        INSTRUMENTTYPECD DEALDATE ADDITIONALINFORMATION STARTDATE NEXTDATE 
        ENDDATE LEGNUMBER VALUEFRS VALUESEC;

%let tpOut = dm_dq.DQ_DRVT_DWH_DM;
%let tpOut_connect =  DEFER=YES PATH=DWH.IMB.RU AUTHDOMAIN="OraAuth_DM_DQ" 
;
%let tpOut_engine = ORACLE;
%let tpOut_memtype = DATA;
%let tpOut_options = %nrquote();
%let tpOut_alter = %nrquote();
%let tpOut_path = %nrquote(/DWH_DMDQ_REP/Marts/DQ_DRVT/DQ_DRVT_DWH_DM%(Table%));
%let tpOut_type = 1;
%let tpOut_label = %nrquote();
/* List of target columns to keep  */ 
%let tpOut_keep = REPORTCODE REPORTDATE FRONTKDEALID FRONTFDEALID DEALID 
        INSTRUMENTTYPECD DEALDATE ADDITIONALINFORMATION STARTDATE NEXTDATE 
        ENDDATE LEGNUMBER VALUEFRS VALUESEC;


%let tpWhere = %nrquote(REPORTCODE = %'П-12%' AND REPORTDATE = &DMDQ_REPORT_START_DTTM);

/* List of target columns to keep  */ 
%let _keep = REPORTCODE REPORTDATE FRONTKDEALID FRONTFDEALID DEALID 
        INSTRUMENTTYPECD DEALDATE ADDITIONALINFORMATION STARTDATE NEXTDATE 
        ENDDATE LEGNUMBER VALUEFRS VALUESEC;
/* List of target columns to keep  */ 
%let keep = REPORTCODE REPORTDATE FRONTKDEALID FRONTFDEALID DEALID 
        INSTRUMENTTYPECD DEALDATE ADDITIONALINFORMATION STARTDATE NEXTDATE 
        ENDDATE LEGNUMBER VALUEFRS VALUESEC;
/*****************************************************************
* ВЕРСИЯ:
*   $Id: transform_table_delete.sas 2142 2012-08-17 14:15:09Z nesterenok $
*
******************************************************************
* НАЗНАЧЕНИЕ:
*   Удаляет из указанной таблицы записи.
*
* ПАРАМЕТРЫ:
*   tpOut                  + имя целевой таблицы, которая будет очищена
*   tpWhere                - условие отбора записей под удаление
*                            по умолчанию отсутствует, т.е. удаляются все записи
*
******************************************************************/

%macro transform_table_delete;

   /* Удаляем записи */
   /* TODO: truncate */
   proc sql;
      delete from &tpOut
      %if %length(&tpWhere) gt 0 %then %do;
         where (%unquote(&tpWhere))
      %end;
      ;
   quit;
   %error_check (mpStepType=SQL);

%mend transform_table_delete;

%transform_table_delete;


%rcSet(&syserr); 
%rcSet(&sysrc); 
%rcSet(&sqlrc); 



/**  Step end Очистить таблицу **/

/*==========================================================================* 
 * Step:            Очистить таблицу                      A5ELGGF9.AK00012I * 
 * Transform:       Очистить таблицу                                        * 
 * Description:                                                             * 
 *                                                                          * 
 * Target Table:    DQ_DRVT_REPORT_PRC -                  A5ELGGF9.AE00004E * 
 *                   dm_dq.DQ_DRVT_REPORT_PRC                               * 
 *==========================================================================*/ 

%let transformID = %quote(A5ELGGF9.AK00012I);
%let trans_rc = 0;
%let etls_stepStartTime = %sysfunc(datetime(), datetime20.); 

%let _INPUT_count = 0; 
%let _OUTPUT_count = 1; 
%let _OUTPUT = dm_dq.DQ_DRVT_REPORT_PRC;
%let _OUTPUT_connect =  DEFER=YES PATH=DWH.IMB.RU AUTHDOMAIN="OraAuth_DM_DQ" 
;
%let _OUTPUT_engine = ORACLE;
%let _OUTPUT_memtype = DATA;
%let _OUTPUT_options = %nrquote();
%let _OUTPUT_alter = %nrquote();
%let _OUTPUT_path = %nrquote(/DWH_DMDQ_REP/Marts/DQ_DRVT/DQ_DRVT_REPORT_PRC%(Table%));
%let _OUTPUT_type = 1;
%let _OUTPUT_label = %nrquote();
/* List of target columns to keep  */ 
%let _OUTPUT_keep = REP_DT REP_ID PRC CNT_ALL CNT_ERR DWH_DT;

%let tpOut = dm_dq.DQ_DRVT_REPORT_PRC;
%let tpOut_connect =  DEFER=YES PATH=DWH.IMB.RU AUTHDOMAIN="OraAuth_DM_DQ" 
;
%let tpOut_engine = ORACLE;
%let tpOut_memtype = DATA;
%let tpOut_options = %nrquote();
%let tpOut_alter = %nrquote();
%let tpOut_path = %nrquote(/DWH_DMDQ_REP/Marts/DQ_DRVT/DQ_DRVT_REPORT_PRC%(Table%));
%let tpOut_type = 1;
%let tpOut_label = %nrquote();
/* List of target columns to keep  */ 
%let tpOut_keep = REP_DT REP_ID PRC CNT_ALL CNT_ERR DWH_DT;


%let tpWhere = %nrquote(REP_ID = 12 AND REP_DT = &DMDQ_REPORT_START_DTTM);

/* List of target columns to keep  */ 
%let _keep = REP_DT REP_ID PRC CNT_ALL CNT_ERR DWH_DT;
/* List of target columns to keep  */ 
%let keep = REP_DT REP_ID PRC CNT_ALL CNT_ERR DWH_DT;
/*****************************************************************
* ВЕРСИЯ:
*   $Id: transform_table_delete.sas 2142 2012-08-17 14:15:09Z nesterenok $
*
******************************************************************
* НАЗНАЧЕНИЕ:
*   Удаляет из указанной таблицы записи.
*
* ПАРАМЕТРЫ:
*   tpOut                  + имя целевой таблицы, которая будет очищена
*   tpWhere                - условие отбора записей под удаление
*                            по умолчанию отсутствует, т.е. удаляются все записи
*
******************************************************************/

%macro transform_table_delete;

   /* Удаляем записи */
   /* TODO: truncate */
   proc sql;
      delete from &tpOut
      %if %length(&tpWhere) gt 0 %then %do;
         where (%unquote(&tpWhere))
      %end;
      ;
   quit;
   %error_check (mpStepType=SQL);

%mend transform_table_delete;

%transform_table_delete;


%rcSet(&syserr); 
%rcSet(&sysrc); 
%rcSet(&sqlrc); 



/**  Step end Очистить таблицу **/

/*==========================================================================* 
 * Step:            Extract                               A5ELGGF9.AK00012J * 
 * Transform:       Extract                                                 * 
 * Description:     DRV                                                     * 
 *                                                                          * 
 * Source Table:    FINANCIAL_ACCOUNT -                   A569C89V.AE0000FK * 
 *                   dwh_dds.FINANCIAL_ACCOUNT                              * 
 * Target Table:    FINANCIAL_ACCOUNT - work.W1P5VNGO4    A5ELGGF9.AF0000GG * 
 *==========================================================================*/ 

%let transformID = %quote(A5ELGGF9.AK00012J);
%let trans_rc = 0;
%let etls_stepStartTime = %sysfunc(datetime(), datetime20.); 

%let etls_recnt = 0;
%macro etls_recordCheck; 
   %let etls_recCheckExist = %eval(%sysfunc(exist(dwh_dds.FINANCIAL_ACCOUNT, DATA)) or 
         %sysfunc(exist(dwh_dds.FINANCIAL_ACCOUNT, VIEW))); 
   
   %if (&etls_recCheckExist) %then
   %do;
      proc sql noprint;
         select count(*) into :etls_recnt from dwh_dds.FINANCIAL_ACCOUNT;
      quit;
   %end;
%mend etls_recordCheck;
%etls_recordCheck;

%let SYSLAST = %nrquote(dwh_dds.FINANCIAL_ACCOUNT); 

%let SYS_SQL_IP_SPEEDO = Y;
%let SYS_SQL_MAPPUTTO = sas_put;
%let SYS_SQLREDUCEPUT = DBMS;
%global etls_sql_pushDown;
%let etls_sql_pushDown = -1;
option DBIDIRECTEXEC;

/*---- Map the columns  ----*/ 
proc datasets lib = work nolist nowarn memtype = (data view);
   delete W1P5VNGO4;
quit;

%put %str(NOTE: Mapping columns ...);
proc sql;
   create view work.W1P5VNGO4 as
      select
         ACCOUNT_RK,
         VALID_FROM_DTTM,
         VALID_TO_DTTM,
         ACCOUNT_ID,
         SOURCE_SYSTEM_CD,
         ACCOUNT_REGISTRATION_NM,
         ALTERNATE_ACCOUNT_NM,
         FINANCIAL_ACCOUNT_TYPE_CD,
         AUTO_DEBIT_ACCOUNT_TYPE_CD,
         ACCOUNT_REGISTRATION_TYPE_CD,
         ACCOUNT_STATUS_CD,
         OPEN_DT,
         CLOSE_DT,
         CLOSE_REASON_CD,
         ACCOUNT_TAX_ID,
         EXPECTED_LOSS_PCT,
         INDIVIDUAL_ORGANIZATION_CD,
         SOURCE_CD,
         OPENING_CHANNEL_CD,
         PREFERRED_CHANNEL_CD,
         CURRENCY_CD,
         PRIMARY_PHONE_NO,
         PRIMARY_PHONE_TYPE_CD,
         SECONDARY_PHONE_NO,
         SECONDARY_PHONE_TYPE_CD,
         MAILABLE_FLG,
         TELEPHONABLE_FLG,
         EMAIL_FLG,
         SMS_FLG,
         DO_NOT_CONTACT_FLG,
         EMPLOYEE_RK,
         CURRENCY_BASED_ACCOUNT_FLG,
         FEE_BASED_FLG,
         ANNUAL_FEES_AMT,
         MONTHLY_FEES_AMT,
         CAMPAIGN_CD,
         COMMUNICATION_CD,
         REGISTERED_ONLINE_DT,
         FIRST_LOGIN_DT,
         ONLINE_BILL_PAYMENT_FLG,
         ID_VERIFICATION_TYPE_CD,
         PREVIOUS_ACCOUNT_ID,
         OPEN_BRANCH_FINANCIAL_UNIT_RK,
         PRIM_BRANCH_FINANCIAL_UNIT_RK,
         FINANCIAL_APPLICATION_RK,
         CREDIT_FACILITY_RK,
         FUTURE_MARGIN_INCOME_AMT,
         IN_DEFAULT_FLG,
         FINANCIAL_BOOK_RK,
         IRRECOVERABLE_FLG,
         OWNED_BY_INTERNAL_ORG_RK,
         PREVIOUS_BANK_EXTERNAL_ORG_RK,
         NETTING_SET_RK,
         REVOLVING_FLG,
         SOURCE_CHANNEL_CD,
         GRACE_PERIOD_DAYS_CNT,
         REMARGINING_DAYS_CNT,
         FINANCIAL_CALENDAR_RK,
         DAY_BASIS_CD,
         PORTFOLIO_ID,
         SECURITIZATION_POOL_RK,
         RECEIVABLES_POOL_RK,
         ACCOUNT_USAGE_TYPE_CD,
         RISK_ALARM_FLG,
         LOW_PROFITABILITY_FLG,
         ACCOUNT_LIFECYCLE_STG_CD,
         ATTRITION_ALARM_FLG,
         BALANCE_FROZEN_FLG,
         BALANCE_FROZEN_DT,
         ACCOUNT_BLOCK_REASON_CD,
         TAXATION_STATE_CD,
         EFFECTIVE_MATURITY_YEAR_NO,
         GL_ACCOUNT_RK,
         FROM_OTHER_INSTITUTION_FLG,
         ACCOUNT_RENEWAL_CNT,
         BALANCE_TRANSFER_DT,
         BALANCE_TRANSFER_AMT,
         BALANCE_TRANSFER_CNT,
         BASE_LONG_TERM_APR_RT,
         BROKER_FLG,
         MULT_RATE_FLG,
         AUTO_DEBIT_ACCOUNT_NO,
         WORST_STATUS_LAST_12_MTH_CD,
         WORST_STATUS_LAST_12_MTH_DT,
         BALANCE_TRNSF_OTHER_ACCT_CNT,
         EFFECTIVE_FROM_DTTM,
         EFFECTIVE_TO_DTTM,
         COUNTERPARTY_RK,
         INSURED_BY_COUNTERPARTY_RK,
         STATEMENT_FREQUENCY_CD,
         SECURITY_DEPOSIT_AMT,
         SECURITY_DEPOSIT_REFUND_AMT,
         FIRST_PAYMENT_DT,
         LAST_PAYMENT_DT,
         FIRST_RESET_DT,
         LAST_RESET_DT,
         RESETS_PER_ANNUM_NO,
         PRINCIPAL_PAYMENT_TYPE_CD,
         PRINCIPAL_PAYMENT_AMT,
         RATE_POLICY_RK,
         SPREAD_RT,
         DISCOUNT_SPREAD_RT,
         INITIAL_CONTRACT_RT,
         FIXED_MONTHLY_PREPAYMENT_RT,
         CAPITAL_ALLOCATION_RK,
         CAPITAL_COST_RK,
         SEGMENT_RK,
         NEAR_BRANCH_FINANCIAL_UNIT_RK,
         STATEMENT_OPT_FLG,
         VALUE_SCALING_FACTOR_RT,
         INTERNAL_REPORTING_CATEGORY_CD,
         CONVEXITY_ADJUSTMENT_FLG,
         ARREARS_PAYMENT_CD,
         QUANTO_FEATURE_RK,
         CASH_INTENSIVE_BUSINESS_FLG,
         LETTER_OF_CREDIT_ONFILE_FLG,
         TRADE_FINANCE_FLG,
         ANNUITY_PAYMENT_TYPE_CD,
         INTEREST_PAYMENT_TYPE_CD,
         INTEREST_PAYMENT_TIME_FREQ_CD,
         LIQUIDITY_CATEGORY_TYPE_CD,
         HOLIDAY_DATE_ROLL_CONV_CD,
         WEEKEND_DATE_ROLL_CONV_CD,
         EXPENSE_ALLOCATION_RK,
         FIRST_INTEREST_PAYMENT_DT,
         LAST_INTEREST_PAYMENT_DT,
         PROCESSED_DTTM,
         IRB_DUMMY_TYPE_CD,
         IRB_SRC_ACCOUNT_ID
   from &SYSLAST
      where VALID_FROM_DTTM <= &REPDT < VALID_TO_DTTM 
         AND 
         FINANCIAL_ACCOUNT_TYPE_CD = 'DRV'
   ;
quit;

%let SYSLAST = work.W1P5VNGO4;

%global etls_sql_pushDown;
%let etls_sql_pushDown = &sys_sql_ip_all;

%rcSet(&sqlrc); 



/**  Step end Extract **/

/*==========================================================================* 
 * Step:            SQL Join                              A5ELGGF9.AK00012K * 
 * Transform:       Join                                                    * 
 * Description:                                                             * 
 *                                                                          * 
 * Source Tables:   FINANCIAL_ACCOUNT - work.W1P5VNGO4    A5ELGGF9.AF0000GG * 
 *                  FINANCIAL_INSTRUMENT_ASSOC -          A569C89V.AE0000FW * 
 *                   dwh_dds.FINANCIAL_INSTRUMENT_ASSOC                     * 
 *                  FINANCIAL_INSTRUMENT -                A569C89V.AE0000FV * 
 *                   dwh_dds.FINANCIAL_INSTRUMENT                           * 
 *                  SWAP_INSTRUMENT_LEG -                 A569C89V.AE0000JF * 
 *                   dwh_dds.SWAP_INSTRUMENT_LEG                            * 
 * Target Table:    SQL Join - work.W1P5VKR4U             A5ELGGF9.AF0000GH * 
 *==========================================================================*/ 

%let transformID = %quote(A5ELGGF9.AK00012K);
%let trans_rc = 0;
%let etls_stepStartTime = %sysfunc(datetime(), datetime20.); 

%let etls_recnt = -1;
%let SYS_SQL_IP_SPEEDO = Y;
%let SYS_SQL_MAPPUTTO = sas_put;
%let SYS_SQLREDUCEPUT = DBMS;
%global etls_sql_pushDown;
%let etls_sql_pushDown = -1;
option DBIDIRECTEXEC;

proc datasets lib = work nolist nowarn memtype = (data view);
   delete W1P5VKR4U;
quit;

proc sql;
   create table work.W1P5VKR4U as
   select
      W1P5VNGO4.ACCOUNT_RK length = 8   
         format = 11.
         informat = 11.
         label = 'ACCOUNT_RK',
      W1P5VNGO4.ACCOUNT_REGISTRATION_NM length = 100   
         format = $100.
         informat = $100.
         label = 'ACCOUNT_REGISTRATION_NM',
      W1P5VNGO4.ALTERNATE_ACCOUNT_NM length = 40   
         format = $40.
         informat = $40.
         label = 'ALTERNATE_ACCOUNT_NM',
      W1P5VNGO4.OPEN_DT length = 8   
         format = DATETIME20.
         informat = DATETIME20.
         label = 'OPEN_DT',
      FINANCIAL_INSTRUMENT.IRB_SRC_INSTRUMENT_ID length = 32   
         format = $32.
         informat = $32.
         label = 'IRB_SRC_INSTRUMENT_ID',
      FINANCIAL_INSTRUMENT.FINANCIAL_INSTRUMENT_TYPE_CD length = 3   
         format = $3.
         informat = $3.
         label = 'FINANCIAL_INSTRUMENT_TYPE_CD',
      SWAP_INSTRUMENT_LEG.SWAP_LEG_TYPE_CD length = 3   
         format = $3.
         informat = $3.
         label = 'SWAP_LEG_TYPE_CD',
      FINANCIAL_INSTRUMENT.FINANCIAL_INSTRUMENT_RK length = 8   
         format = 11.
         informat = 11.
         label = 'FINANCIAL_INSTRUMENT_RK'
   from
      work.W1P5VNGO4 left join 
      dwh_dds.FINANCIAL_INSTRUMENT_ASSOC
         on
         (
            W1P5VNGO4.ACCOUNT_RK = FINANCIAL_INSTRUMENT_ASSOC.REFERENCE_ACCOUNT_RK
            and FINANCIAL_INSTRUMENT_ASSOC.VALID_FROM_DTTM <= &REPDT < FINANCIAL_INSTRUMENT_ASSOC.VALID_TO_DTTM
            and FINANCIAL_INSTRUMENT_ASSOC.FINANCIAL_INSTR_ASSOC_TYPE_CD = 'DRV'
         ) left join 
      dwh_dds.FINANCIAL_INSTRUMENT
         on
         (
            FINANCIAL_INSTRUMENT_ASSOC.FINANCIAL_INSTRUMENT_RK = FINANCIAL_INSTRUMENT.FINANCIAL_INSTRUMENT_RK
            and FINANCIAL_INSTRUMENT.VALID_FROM_DTTM <= &REPDT < FINANCIAL_INSTRUMENT.VALID_TO_DTTM
         ) left join 
      dwh_dds.SWAP_INSTRUMENT_LEG
         on
         (
            FINANCIAL_INSTRUMENT.FINANCIAL_INSTRUMENT_RK = SWAP_INSTRUMENT_LEG.FINANCIAL_INSTRUMENT_RK
            and SWAP_INSTRUMENT_LEG.VALID_FROM_DTTM <= &REPDT < SWAP_INSTRUMENT_LEG.VALID_TO_DTTM
         )
   where
      FINANCIAL_INSTRUMENT.FINANCIAL_INSTRUMENT_TYPE_CD IN ('IRS','CIS','CAP','FLR')
   ;
quit;

%global etls_sql_pushDown;
%let etls_sql_pushDown = &sys_sql_ip_all;

%rcSet(&sqlrc); 



/**  Step end SQL Join **/

/*==========================================================================* 
 * Step:            SQL Join                              A5ELGGF9.AK00012L * 
 * Transform:       Join                                                    * 
 * Description:     CIS, IRS                                                * 
 *                                                                          * 
 * Source Tables:   SQL Join - work.W1P5VKR4U             A5ELGGF9.AF0000GH * 
 *                  IRREGULAR_RATE_RESETS -               A569C89V.AE0000IO * 
 *                   dwh_dds.IRREGULAR_RATE_RESETS                          * 
 * Target Table:    SQL Join - work.W1P6EJJ8A             A5ELGGF9.AF0000GI * 
 *==========================================================================*/ 

%let transformID = %quote(A5ELGGF9.AK00012L);
%let trans_rc = 0;
%let etls_stepStartTime = %sysfunc(datetime(), datetime20.); 

%let etls_recCheckExist = 0; 
%let etls_recnt = 0; 
%macro etls_recordCheck; 
   %let etls_recCheckExist = %eval(%sysfunc(exist(work.W1P5VKR4U, DATA)) or 
         %sysfunc(exist(work.W1P5VKR4U, VIEW))); 
   
   %if (&etls_recCheckExist) %then
   %do;
      %local etls_syntaxcheck; 
      %let etls_syntaxcheck = %sysfunc(getoption(syntaxcheck)); 
      /* Turn off syntaxcheck option to perform following steps  */ 
      options nosyntaxcheck;
      
      proc contents data = work.W1P5VKR4U out = work.etls_contents(keep = nobs) noprint; 
      run; 
      
      data _null_; 
         set work.etls_contents (obs = 1); 
         call symput("etls_recnt", left(put(nobs,32.))); 
      run;
      
      proc datasets lib = work nolist nowarn memtype = (data view);
         delete etls_contents;
      quit;
      
      /* Reset syntaxcheck option to previous setting  */ 
      options &etls_syntaxcheck; 
   %end;
%mend etls_recordCheck;
%etls_recordCheck;

%let ETLS_SYSLAST = &SYSLAST;
/*---- Start of Pre-Process Code  ----*/ 

PROC FORMAT;
  VALUE $LEGFMT
	 "FRS"="1"
    "SEC"="2"
  ;
RUN;
/*---- End of Pre-Process Code  ----*/ 

%rcSet(&syserr); 
%rcSet(&sqlrc); 

%let SYSLAST = &ETLS_SYSLAST;

%let SYS_SQL_IP_SPEEDO = Y;
%let SYS_SQL_MAPPUTTO = sas_put;
%let SYS_SQLREDUCEPUT = DBMS;
%global etls_sql_pushDown;
%let etls_sql_pushDown = -1;
option DBIDIRECTEXEC;

proc datasets lib = work nolist nowarn memtype = (data view);
   delete W1P6EJJ8A;
quit;

proc sql;
   create table work.W1P6EJJ8A as
   select
      W1P5VKR4U.ACCOUNT_RK length = 8   
         format = 11.
         informat = 11.
         label = 'ACCOUNT_RK',
      W1P5VKR4U.ACCOUNT_REGISTRATION_NM length = 100   
         format = $100.
         informat = $100.
         label = 'ACCOUNT_REGISTRATION_NM',
      W1P5VKR4U.ALTERNATE_ACCOUNT_NM length = 40   
         format = $40.
         informat = $40.
         label = 'ALTERNATE_ACCOUNT_NM',
      W1P5VKR4U.OPEN_DT length = 8   
         format = DATETIME20.
         informat = DATETIME20.
         label = 'OPEN_DT',
      W1P5VKR4U.IRB_SRC_INSTRUMENT_ID length = 32   
         format = $32.
         informat = $32.
         label = 'IRB_SRC_INSTRUMENT_ID',
      W1P5VKR4U.FINANCIAL_INSTRUMENT_TYPE_CD length = 3   
         format = $3.
         informat = $3.
         label = 'FINANCIAL_INSTRUMENT_TYPE_CD',
      W1P5VKR4U.SWAP_LEG_TYPE_CD length = 3   
         format = $3.
         informat = $3.
         label = 'SWAP_LEG_TYPE_CD',
      IRREGULAR_RATE_RESETS.RESET_DT length = 8   
         format = DATETIME20.
         informat = DATETIME20.
         label = 'RESET_DT',
      IRREGULAR_RATE_RESETS.VALID_FROM_DTTM length = 8   
         format = DATETIME20.
         informat = DATETIME20.
         label = 'VALID_FROM_DTTM',
      IRREGULAR_RATE_RESETS.VALID_TO_DTTM length = 8   
         format = DATETIME20.
         informat = DATETIME20.
         label = 'VALID_TO_DTTM',
      IRREGULAR_RATE_RESETS.IRB_PAYMENT_DT length = 8   
         format = DATETIME20.
         informat = DATETIME20.
         label = 'IRB_PAYMENT_DT',
      IRREGULAR_RATE_RESETS.IRB_IRR_RATE_RESETS_ID length = 32   
         format = $32.
         informat = $32.
         label = 'IRB_IRR_RATE_RESETS_ID',
      IRREGULAR_RATE_RESETS.IRREGULAR_RATE_RESETS_RK length = 8   
         format = 11.
         informat = 11.
         label = 'IRREGULAR_RATE_RESETS_RK',
      substr(IRREGULAR_RATE_RESETS.IRB_IRR_RATE_RESETS_ID , 5, 1) as LEG length = 8
   from
      work.W1P5VKR4U left join 
      dwh_dds.IRREGULAR_RATE_RESETS
         on
         (
            W1P5VKR4U.ACCOUNT_RK = IRREGULAR_RATE_RESETS.ACCOUNT_RK
            and put(W1P5VKR4U.SWAP_LEG_TYPE_CD, $LEGFMT.) = substr(IRREGULAR_RATE_RESETS.IRB_IRR_RATE_RESETS_ID, 5, 1)
         )
   where
      W1P5VKR4U.FINANCIAL_INSTRUMENT_TYPE_CD IN ('IRS','CIS')
   group by
      LEG
   order by
      ACCOUNT_RK,
      SWAP_LEG_TYPE_CD,
      VALID_FROM_DTTM,
      VALID_TO_DTTM
   ;
quit;

%global etls_sql_pushDown;
%let etls_sql_pushDown = &sys_sql_ip_all;

%rcSet(&sqlrc); 



/**  Step end SQL Join **/

/*==========================================================================* 
 * Step:            User Written                          A5ELGGF9.AK00012M * 
 * Transform:       User Written                                            * 
 * Description:     Проверка условий DQ                                     * 
 *                                                                          * 
 * Source Table:    SQL Join - work.W1P6EJJ8A             A5ELGGF9.AF0000GI * 
 * Target Table:    User Written - work.W1P6TJV69         A5ELGGF9.AF0000GJ * 
 *                                                                          * 
 * User Written:    SourceCode                                              * 
 *==========================================================================*/ 

%let transformID = %quote(A5ELGGF9.AK00012M);
%let trans_rc = 0;
%let etls_stepStartTime = %sysfunc(datetime(), datetime20.); 

%let etls_recCheckExist = 0; 
%let etls_recnt = 0; 
%macro etls_recordCheck; 
   %let etls_recCheckExist = %eval(%sysfunc(exist(work.W1P6EJJ8A, DATA)) or 
         %sysfunc(exist(work.W1P6EJJ8A, VIEW))); 
   
   %if (&etls_recCheckExist) %then
   %do;
      %local etls_syntaxcheck; 
      %let etls_syntaxcheck = %sysfunc(getoption(syntaxcheck)); 
      /* Turn off syntaxcheck option to perform following steps  */ 
      options nosyntaxcheck;
      
      proc contents data = work.W1P6EJJ8A out = work.etls_contents(keep = nobs) noprint; 
      run; 
      
      data _null_; 
         set work.etls_contents (obs = 1); 
         call symput("etls_recnt", left(put(nobs,32.))); 
      run;
      
      proc datasets lib = work nolist nowarn memtype = (data view);
         delete etls_contents;
      quit;
      
      /* Reset syntaxcheck option to previous setting  */ 
      options &etls_syntaxcheck; 
   %end;
%mend etls_recordCheck;
%etls_recordCheck;

%let SYSLAST = %nrquote(work.W1P6EJJ8A); 

%let _INPUT_count = 1;
%let _INPUT = work.W1P6EJJ8A;
%let _INPUT_connect = ;
%let _INPUT_engine = ;
%let _INPUT_memtype = DATA;
%let _INPUT_options = %nrquote();
%let _INPUT_alter = %nrquote();
%let _INPUT_path = %nrquote(/SQL Join_A5ELGGF9.AF0000GI%(WorkTable%));
%let _INPUT_type = 1;
%let _INPUT_label = %nrquote();

%let _INPUT1 = work.W1P6EJJ8A;
%let _INPUT1_connect = ;
%let _INPUT1_engine = ;
%let _INPUT1_memtype = DATA;
%let _INPUT1_options = %nrquote();
%let _INPUT1_alter = %nrquote();
%let _INPUT1_path = %nrquote(/SQL Join_A5ELGGF9.AF0000GI%(WorkTable%));
%let _INPUT1_type = 1;
%let _INPUT1_label = %nrquote();

%let _OUTPUT_count = 1;
%let _OUTPUT = work.W1P6TJV69;
%let _OUTPUT_connect = ;
%let _OUTPUT_engine = ;
%let _OUTPUT_memtype = DATA;
%let _OUTPUT_options = %nrquote();
%let _OUTPUT_alter = %nrquote();
%let _OUTPUT_path = %nrquote(/User Written_A5ELGGF9.AF0000GJ%(WorkTable%));
%let _OUTPUT_type = 1;
%let _OUTPUT_label = %nrquote();
/* List of target columns to keep  */ 
%let _OUTPUT_keep = ACCOUNT_RK ACCOUNT_REGISTRATION_NM ALTERNATE_ACCOUNT_NM OPEN_DT 
        IRB_SRC_INSTRUMENT_ID FINANCIAL_INSTRUMENT_TYPE_CD SWAP_LEG_TYPE_CD 
        RESET_DT VALID_FROM_DTTM VALID_TO_DTTM IRB_PAYMENT_DT 
        IRB_IRR_RATE_RESETS_ID IRREGULAR_RATE_RESETS_RK LEG VT Type;
%let _OUTPUT_col_count = 16;
%let _OUTPUT_col0_name = ACCOUNT_RK;
%let _OUTPUT_col0_table = work.W1P6TJV69;
%let _OUTPUT_col0_length = 8;
%let _OUTPUT_col0_type = ;
%let _OUTPUT_col0_format = 11.;
%let _OUTPUT_col0_informat = 11.;
%let _OUTPUT_col0_label = %nrquote(ACCOUNT_RK);
%let _OUTPUT_col0_exp = ;
%let _OUTPUT_col0_input_count = 0;
%let _OUTPUT_col1_name = ACCOUNT_REGISTRATION_NM;
%let _OUTPUT_col1_table = work.W1P6TJV69;
%let _OUTPUT_col1_length = 100;
%let _OUTPUT_col1_type = $;
%let _OUTPUT_col1_format = $100.;
%let _OUTPUT_col1_informat = $100.;
%let _OUTPUT_col1_label = %nrquote(ACCOUNT_REGISTRATION_NM);
%let _OUTPUT_col1_exp = ;
%let _OUTPUT_col1_input_count = 0;
%let _OUTPUT_col2_name = ALTERNATE_ACCOUNT_NM;
%let _OUTPUT_col2_table = work.W1P6TJV69;
%let _OUTPUT_col2_length = 40;
%let _OUTPUT_col2_type = $;
%let _OUTPUT_col2_format = $40.;
%let _OUTPUT_col2_informat = $40.;
%let _OUTPUT_col2_label = %nrquote(ALTERNATE_ACCOUNT_NM);
%let _OUTPUT_col2_exp = ;
%let _OUTPUT_col2_input_count = 0;
%let _OUTPUT_col3_name = OPEN_DT;
%let _OUTPUT_col3_table = work.W1P6TJV69;
%let _OUTPUT_col3_length = 8;
%let _OUTPUT_col3_type = ;
%let _OUTPUT_col3_format = DATETIME20.;
%let _OUTPUT_col3_informat = DATETIME20.;
%let _OUTPUT_col3_label = %nrquote(OPEN_DT);
%let _OUTPUT_col3_exp = ;
%let _OUTPUT_col3_input_count = 0;
%let _OUTPUT_col4_name = IRB_SRC_INSTRUMENT_ID;
%let _OUTPUT_col4_table = work.W1P6TJV69;
%let _OUTPUT_col4_length = 32;
%let _OUTPUT_col4_type = $;
%let _OUTPUT_col4_format = $32.;
%let _OUTPUT_col4_informat = $32.;
%let _OUTPUT_col4_label = %nrquote(IRB_SRC_INSTRUMENT_ID);
%let _OUTPUT_col4_exp = ;
%let _OUTPUT_col4_input_count = 0;
%let _OUTPUT_col5_name = FINANCIAL_INSTRUMENT_TYPE_CD;
%let _OUTPUT_col5_table = work.W1P6TJV69;
%let _OUTPUT_col5_length = 3;
%let _OUTPUT_col5_type = $;
%let _OUTPUT_col5_format = $3.;
%let _OUTPUT_col5_informat = $3.;
%let _OUTPUT_col5_label = %nrquote(FINANCIAL_INSTRUMENT_TYPE_CD);
%let _OUTPUT_col5_exp = ;
%let _OUTPUT_col5_input_count = 0;
%let _OUTPUT_col6_name = SWAP_LEG_TYPE_CD;
%let _OUTPUT_col6_table = work.W1P6TJV69;
%let _OUTPUT_col6_length = 3;
%let _OUTPUT_col6_type = $;
%let _OUTPUT_col6_format = $3.;
%let _OUTPUT_col6_informat = $3.;
%let _OUTPUT_col6_label = %nrquote(SWAP_LEG_TYPE_CD);
%let _OUTPUT_col6_exp = ;
%let _OUTPUT_col6_input_count = 0;
%let _OUTPUT_col7_name = RESET_DT;
%let _OUTPUT_col7_table = work.W1P6TJV69;
%let _OUTPUT_col7_length = 8;
%let _OUTPUT_col7_type = ;
%let _OUTPUT_col7_format = DATETIME20.;
%let _OUTPUT_col7_informat = DATETIME20.;
%let _OUTPUT_col7_label = %nrquote(RESET_DT);
%let _OUTPUT_col7_exp = ;
%let _OUTPUT_col7_input_count = 0;
%let _OUTPUT_col8_name = VALID_FROM_DTTM;
%let _OUTPUT_col8_table = work.W1P6TJV69;
%let _OUTPUT_col8_length = 8;
%let _OUTPUT_col8_type = ;
%let _OUTPUT_col8_format = DATETIME20.;
%let _OUTPUT_col8_informat = DATETIME20.;
%let _OUTPUT_col8_label = %nrquote(VALID_FROM_DTTM);
%let _OUTPUT_col8_exp = ;
%let _OUTPUT_col8_input_count = 0;
%let _OUTPUT_col9_name = VALID_TO_DTTM;
%let _OUTPUT_col9_table = work.W1P6TJV69;
%let _OUTPUT_col9_length = 8;
%let _OUTPUT_col9_type = ;
%let _OUTPUT_col9_format = DATETIME20.;
%let _OUTPUT_col9_informat = DATETIME20.;
%let _OUTPUT_col9_label = %nrquote(VALID_TO_DTTM);
%let _OUTPUT_col9_exp = ;
%let _OUTPUT_col9_input_count = 0;
%let _OUTPUT_col10_name = IRB_PAYMENT_DT;
%let _OUTPUT_col10_table = work.W1P6TJV69;
%let _OUTPUT_col10_length = 8;
%let _OUTPUT_col10_type = ;
%let _OUTPUT_col10_format = DATETIME20.;
%let _OUTPUT_col10_informat = DATETIME20.;
%let _OUTPUT_col10_label = %nrquote(IRB_PAYMENT_DT);
%let _OUTPUT_col10_exp = ;
%let _OUTPUT_col10_input_count = 0;
%let _OUTPUT_col11_name = IRB_IRR_RATE_RESETS_ID;
%let _OUTPUT_col11_table = work.W1P6TJV69;
%let _OUTPUT_col11_length = 32;
%let _OUTPUT_col11_type = $;
%let _OUTPUT_col11_format = $32.;
%let _OUTPUT_col11_informat = $32.;
%let _OUTPUT_col11_label = %nrquote(IRB_IRR_RATE_RESETS_ID);
%let _OUTPUT_col11_exp = ;
%let _OUTPUT_col11_input_count = 0;
%let _OUTPUT_col12_name = IRREGULAR_RATE_RESETS_RK;
%let _OUTPUT_col12_table = work.W1P6TJV69;
%let _OUTPUT_col12_length = 8;
%let _OUTPUT_col12_type = ;
%let _OUTPUT_col12_format = 11.;
%let _OUTPUT_col12_informat = 11.;
%let _OUTPUT_col12_label = %nrquote(IRREGULAR_RATE_RESETS_RK);
%let _OUTPUT_col12_exp = ;
%let _OUTPUT_col12_input_count = 0;
%let _OUTPUT_col13_name = LEG;
%let _OUTPUT_col13_table = work.W1P6TJV69;
%let _OUTPUT_col13_length = 8;
%let _OUTPUT_col13_type = $;
%let _OUTPUT_col13_format = ;
%let _OUTPUT_col13_informat = ;
%let _OUTPUT_col13_label = %nrquote();
%let _OUTPUT_col13_exp = ;
%let _OUTPUT_col13_input_count = 0;
%let _OUTPUT_col14_name = VT;
%let _OUTPUT_col14_table = work.W1P6TJV69;
%let _OUTPUT_col14_length = 8;
%let _OUTPUT_col14_type = ;
%let _OUTPUT_col14_format = DATETIME20.;
%let _OUTPUT_col14_informat = ;
%let _OUTPUT_col14_label = %nrquote();
%let _OUTPUT_col14_exp = ;
%let _OUTPUT_col14_input_count = 0;
%let _OUTPUT_col15_name = Type;
%let _OUTPUT_col15_table = work.W1P6TJV69;
%let _OUTPUT_col15_length = 8;
%let _OUTPUT_col15_type = ;
%let _OUTPUT_col15_format = ;
%let _OUTPUT_col15_informat = ;
%let _OUTPUT_col15_label = %nrquote();
%let _OUTPUT_col15_exp = ;
%let _OUTPUT_col15_input_count = 0;

%let _OUTPUT1 = work.W1P6TJV69;
%let _OUTPUT1_connect = ;
%let _OUTPUT1_engine = ;
%let _OUTPUT1_memtype = DATA;
%let _OUTPUT1_options = %nrquote();
%let _OUTPUT1_alter = %nrquote();
%let _OUTPUT1_path = %nrquote(/User Written_A5ELGGF9.AF0000GJ%(WorkTable%));
%let _OUTPUT1_type = 1;
%let _OUTPUT1_label = %nrquote();
/* List of target columns to keep  */ 
%let _OUTPUT1_keep = ACCOUNT_RK ACCOUNT_REGISTRATION_NM ALTERNATE_ACCOUNT_NM OPEN_DT 
        IRB_SRC_INSTRUMENT_ID FINANCIAL_INSTRUMENT_TYPE_CD SWAP_LEG_TYPE_CD 
        RESET_DT VALID_FROM_DTTM VALID_TO_DTTM IRB_PAYMENT_DT 
        IRB_IRR_RATE_RESETS_ID IRREGULAR_RATE_RESETS_RK LEG VT Type;
%let _OUTPUT1_col_count = 16;
%let _OUTPUT1_col0_name = ACCOUNT_RK;
%let _OUTPUT1_col0_table = work.W1P6TJV69;
%let _OUTPUT1_col0_length = 8;
%let _OUTPUT1_col0_type = ;
%let _OUTPUT1_col0_format = 11.;
%let _OUTPUT1_col0_informat = 11.;
%let _OUTPUT1_col0_label = %nrquote(ACCOUNT_RK);
%let _OUTPUT1_col0_exp = ;
%let _OUTPUT1_col0_input_count = 0;
%let _OUTPUT1_col1_name = ACCOUNT_REGISTRATION_NM;
%let _OUTPUT1_col1_table = work.W1P6TJV69;
%let _OUTPUT1_col1_length = 100;
%let _OUTPUT1_col1_type = $;
%let _OUTPUT1_col1_format = $100.;
%let _OUTPUT1_col1_informat = $100.;
%let _OUTPUT1_col1_label = %nrquote(ACCOUNT_REGISTRATION_NM);
%let _OUTPUT1_col1_exp = ;
%let _OUTPUT1_col1_input_count = 0;
%let _OUTPUT1_col2_name = ALTERNATE_ACCOUNT_NM;
%let _OUTPUT1_col2_table = work.W1P6TJV69;
%let _OUTPUT1_col2_length = 40;
%let _OUTPUT1_col2_type = $;
%let _OUTPUT1_col2_format = $40.;
%let _OUTPUT1_col2_informat = $40.;
%let _OUTPUT1_col2_label = %nrquote(ALTERNATE_ACCOUNT_NM);
%let _OUTPUT1_col2_exp = ;
%let _OUTPUT1_col2_input_count = 0;
%let _OUTPUT1_col3_name = OPEN_DT;
%let _OUTPUT1_col3_table = work.W1P6TJV69;
%let _OUTPUT1_col3_length = 8;
%let _OUTPUT1_col3_type = ;
%let _OUTPUT1_col3_format = DATETIME20.;
%let _OUTPUT1_col3_informat = DATETIME20.;
%let _OUTPUT1_col3_label = %nrquote(OPEN_DT);
%let _OUTPUT1_col3_exp = ;
%let _OUTPUT1_col3_input_count = 0;
%let _OUTPUT1_col4_name = IRB_SRC_INSTRUMENT_ID;
%let _OUTPUT1_col4_table = work.W1P6TJV69;
%let _OUTPUT1_col4_length = 32;
%let _OUTPUT1_col4_type = $;
%let _OUTPUT1_col4_format = $32.;
%let _OUTPUT1_col4_informat = $32.;
%let _OUTPUT1_col4_label = %nrquote(IRB_SRC_INSTRUMENT_ID);
%let _OUTPUT1_col4_exp = ;
%let _OUTPUT1_col4_input_count = 0;
%let _OUTPUT1_col5_name = FINANCIAL_INSTRUMENT_TYPE_CD;
%let _OUTPUT1_col5_table = work.W1P6TJV69;
%let _OUTPUT1_col5_length = 3;
%let _OUTPUT1_col5_type = $;
%let _OUTPUT1_col5_format = $3.;
%let _OUTPUT1_col5_informat = $3.;
%let _OUTPUT1_col5_label = %nrquote(FINANCIAL_INSTRUMENT_TYPE_CD);
%let _OUTPUT1_col5_exp = ;
%let _OUTPUT1_col5_input_count = 0;
%let _OUTPUT1_col6_name = SWAP_LEG_TYPE_CD;
%let _OUTPUT1_col6_table = work.W1P6TJV69;
%let _OUTPUT1_col6_length = 3;
%let _OUTPUT1_col6_type = $;
%let _OUTPUT1_col6_format = $3.;
%let _OUTPUT1_col6_informat = $3.;
%let _OUTPUT1_col6_label = %nrquote(SWAP_LEG_TYPE_CD);
%let _OUTPUT1_col6_exp = ;
%let _OUTPUT1_col6_input_count = 0;
%let _OUTPUT1_col7_name = RESET_DT;
%let _OUTPUT1_col7_table = work.W1P6TJV69;
%let _OUTPUT1_col7_length = 8;
%let _OUTPUT1_col7_type = ;
%let _OUTPUT1_col7_format = DATETIME20.;
%let _OUTPUT1_col7_informat = DATETIME20.;
%let _OUTPUT1_col7_label = %nrquote(RESET_DT);
%let _OUTPUT1_col7_exp = ;
%let _OUTPUT1_col7_input_count = 0;
%let _OUTPUT1_col8_name = VALID_FROM_DTTM;
%let _OUTPUT1_col8_table = work.W1P6TJV69;
%let _OUTPUT1_col8_length = 8;
%let _OUTPUT1_col8_type = ;
%let _OUTPUT1_col8_format = DATETIME20.;
%let _OUTPUT1_col8_informat = DATETIME20.;
%let _OUTPUT1_col8_label = %nrquote(VALID_FROM_DTTM);
%let _OUTPUT1_col8_exp = ;
%let _OUTPUT1_col8_input_count = 0;
%let _OUTPUT1_col9_name = VALID_TO_DTTM;
%let _OUTPUT1_col9_table = work.W1P6TJV69;
%let _OUTPUT1_col9_length = 8;
%let _OUTPUT1_col9_type = ;
%let _OUTPUT1_col9_format = DATETIME20.;
%let _OUTPUT1_col9_informat = DATETIME20.;
%let _OUTPUT1_col9_label = %nrquote(VALID_TO_DTTM);
%let _OUTPUT1_col9_exp = ;
%let _OUTPUT1_col9_input_count = 0;
%let _OUTPUT1_col10_name = IRB_PAYMENT_DT;
%let _OUTPUT1_col10_table = work.W1P6TJV69;
%let _OUTPUT1_col10_length = 8;
%let _OUTPUT1_col10_type = ;
%let _OUTPUT1_col10_format = DATETIME20.;
%let _OUTPUT1_col10_informat = DATETIME20.;
%let _OUTPUT1_col10_label = %nrquote(IRB_PAYMENT_DT);
%let _OUTPUT1_col10_exp = ;
%let _OUTPUT1_col10_input_count = 0;
%let _OUTPUT1_col11_name = IRB_IRR_RATE_RESETS_ID;
%let _OUTPUT1_col11_table = work.W1P6TJV69;
%let _OUTPUT1_col11_length = 32;
%let _OUTPUT1_col11_type = $;
%let _OUTPUT1_col11_format = $32.;
%let _OUTPUT1_col11_informat = $32.;
%let _OUTPUT1_col11_label = %nrquote(IRB_IRR_RATE_RESETS_ID);
%let _OUTPUT1_col11_exp = ;
%let _OUTPUT1_col11_input_count = 0;
%let _OUTPUT1_col12_name = IRREGULAR_RATE_RESETS_RK;
%let _OUTPUT1_col12_table = work.W1P6TJV69;
%let _OUTPUT1_col12_length = 8;
%let _OUTPUT1_col12_type = ;
%let _OUTPUT1_col12_format = 11.;
%let _OUTPUT1_col12_informat = 11.;
%let _OUTPUT1_col12_label = %nrquote(IRREGULAR_RATE_RESETS_RK);
%let _OUTPUT1_col12_exp = ;
%let _OUTPUT1_col12_input_count = 0;
%let _OUTPUT1_col13_name = LEG;
%let _OUTPUT1_col13_table = work.W1P6TJV69;
%let _OUTPUT1_col13_length = 8;
%let _OUTPUT1_col13_type = $;
%let _OUTPUT1_col13_format = ;
%let _OUTPUT1_col13_informat = ;
%let _OUTPUT1_col13_label = %nrquote();
%let _OUTPUT1_col13_exp = ;
%let _OUTPUT1_col13_input_count = 0;
%let _OUTPUT1_col14_name = VT;
%let _OUTPUT1_col14_table = work.W1P6TJV69;
%let _OUTPUT1_col14_length = 8;
%let _OUTPUT1_col14_type = ;
%let _OUTPUT1_col14_format = DATETIME20.;
%let _OUTPUT1_col14_informat = ;
%let _OUTPUT1_col14_label = %nrquote();
%let _OUTPUT1_col14_exp = ;
%let _OUTPUT1_col14_input_count = 0;
%let _OUTPUT1_col15_name = Type;
%let _OUTPUT1_col15_table = work.W1P6TJV69;
%let _OUTPUT1_col15_length = 8;
%let _OUTPUT1_col15_type = ;
%let _OUTPUT1_col15_format = ;
%let _OUTPUT1_col15_informat = ;
%let _OUTPUT1_col15_label = %nrquote();
%let _OUTPUT1_col15_exp = ;
%let _OUTPUT1_col15_input_count = 0;

/*---- Start of User Written Code  ----*/ 


data &_OUTPUT1;
set &_INPUT1;
by ACCOUNT_RK LEG VALID_FROM_DTTM VALID_TO_DTTM;;
format VT datetime20.;
retain VT .;
if ~first.LEG then
do;
if VT ne VALID_FROM_DTTM then do; Type=1; output; end; 
if RESET_DT>IRB_PAYMENT_DT then do; Type=2;output; end;
end;

VT=VALID_TO_DTTM;
run;

%error_check(mpStepType=DATA);

/*---- End of User Written Code  ----*/ 

%rcSet(&syserr); 
%rcSet(&sqlrc); 


/**  Step end User Written **/

/*==========================================================================* 
 * Step:            SQL Join                              A5ELGGF9.AK00012N * 
 * Transform:       Join                                                    * 
 * Description:     CAP, FLR                                                * 
 *                                                                          * 
 * Source Tables:   SQL Join - work.W1P5VKR4U             A5ELGGF9.AF0000GH * 
 *                  IRREGULAR_RATE_RESETS -               A569C89V.AE0000IO * 
 *                   dwh_dds.IRREGULAR_RATE_RESETS                          * 
 * Target Table:    SQL Join - work.W1P6EKLG5             A5ELGGF9.AF0000GK * 
 *==========================================================================*/ 

%let transformID = %quote(A5ELGGF9.AK00012N);
%let trans_rc = 0;
%let etls_stepStartTime = %sysfunc(datetime(), datetime20.); 

%let etls_recCheckExist = 0; 
%let etls_recnt = 0; 
%macro etls_recordCheck; 
   %let etls_recCheckExist = %eval(%sysfunc(exist(work.W1P5VKR4U, DATA)) or 
         %sysfunc(exist(work.W1P5VKR4U, VIEW))); 
   
   %if (&etls_recCheckExist) %then
   %do;
      %local etls_syntaxcheck; 
      %let etls_syntaxcheck = %sysfunc(getoption(syntaxcheck)); 
      /* Turn off syntaxcheck option to perform following steps  */ 
      options nosyntaxcheck;
      
      proc contents data = work.W1P5VKR4U out = work.etls_contents(keep = nobs) noprint; 
      run; 
      
      data _null_; 
         set work.etls_contents (obs = 1); 
         call symput("etls_recnt", left(put(nobs,32.))); 
      run;
      
      proc datasets lib = work nolist nowarn memtype = (data view);
         delete etls_contents;
      quit;
      
      /* Reset syntaxcheck option to previous setting  */ 
      options &etls_syntaxcheck; 
   %end;
%mend etls_recordCheck;
%etls_recordCheck;

%let SYS_SQL_IP_SPEEDO = Y;
%let SYS_SQL_MAPPUTTO = sas_put;
%let SYS_SQLREDUCEPUT = DBMS;
%global etls_sql_pushDown;
%let etls_sql_pushDown = -1;
option DBIDIRECTEXEC;

proc datasets lib = work nolist nowarn memtype = (data view);
   delete W1P6EKLG5;
quit;

proc sql;
   create table work.W1P6EKLG5 as
   select
      W1P5VKR4U.ACCOUNT_RK length = 8   
         format = 11.
         informat = 11.
         label = 'ACCOUNT_RK',
      W1P5VKR4U.ACCOUNT_REGISTRATION_NM length = 100   
         format = $100.
         informat = $100.
         label = 'ACCOUNT_REGISTRATION_NM',
      W1P5VKR4U.ALTERNATE_ACCOUNT_NM length = 40   
         format = $40.
         informat = $40.
         label = 'ALTERNATE_ACCOUNT_NM',
      W1P5VKR4U.OPEN_DT length = 8   
         format = DATETIME20.
         informat = DATETIME20.
         label = 'OPEN_DT',
      W1P5VKR4U.IRB_SRC_INSTRUMENT_ID length = 32   
         format = $32.
         informat = $32.
         label = 'IRB_SRC_INSTRUMENT_ID',
      W1P5VKR4U.FINANCIAL_INSTRUMENT_TYPE_CD length = 3   
         format = $3.
         informat = $3.
         label = 'FINANCIAL_INSTRUMENT_TYPE_CD',
      W1P5VKR4U.SWAP_LEG_TYPE_CD length = 3   
         format = $3.
         informat = $3.
         label = 'SWAP_LEG_TYPE_CD',
      IRREGULAR_RATE_RESETS.RESET_DT length = 8   
         format = DATETIME20.
         informat = DATETIME20.
         label = 'RESET_DT',
      IRREGULAR_RATE_RESETS.VALID_FROM_DTTM length = 8   
         format = DATETIME20.
         informat = DATETIME20.
         label = 'VALID_FROM_DTTM',
      IRREGULAR_RATE_RESETS.VALID_TO_DTTM length = 8   
         format = DATETIME20.
         informat = DATETIME20.
         label = 'VALID_TO_DTTM',
      IRREGULAR_RATE_RESETS.IRB_PAYMENT_DT length = 8   
         format = DATETIME20.
         informat = DATETIME20.
         label = 'IRB_PAYMENT_DT',
      IRREGULAR_RATE_RESETS.IRB_IRR_RATE_RESETS_ID length = 32   
         format = $32.
         informat = $32.
         label = 'IRB_IRR_RATE_RESETS_ID',
      W1P5VKR4U.FINANCIAL_INSTRUMENT_RK length = 8   
         format = 11.
         informat = 11.
         label = 'FINANCIAL_INSTRUMENT_RK',
      IRREGULAR_RATE_RESETS.IRREGULAR_RATE_RESETS_RK length = 8   
         format = 11.
         informat = 11.
         label = 'IRREGULAR_RATE_RESETS_RK'
   from
      work.W1P5VKR4U left join 
      dwh_dds.IRREGULAR_RATE_RESETS
         on
         (
            W1P5VKR4U.ACCOUNT_RK = IRREGULAR_RATE_RESETS.ACCOUNT_RK
         )
   where
      W1P5VKR4U.FINANCIAL_INSTRUMENT_TYPE_CD NOT IN ('IRS','CIS')
   order by
      ACCOUNT_RK,
      VALID_FROM_DTTM,
      VALID_TO_DTTM
   ;
quit;

%global etls_sql_pushDown;
%let etls_sql_pushDown = &sys_sql_ip_all;

%rcSet(&sqlrc); 



/**  Step end SQL Join **/

/*==========================================================================* 
 * Step:            User Written                          A5ELGGF9.AK00012O * 
 * Transform:       User Written                                            * 
 * Description:     Проверка условий DQ                                     * 
 *                                                                          * 
 * Source Table:    SQL Join - work.W1P6EKLG5             A5ELGGF9.AF0000GK * 
 * Target Table:    User Written - work.W1P7AB0PK         A5ELGGF9.AF0000GL * 
 *                                                                          * 
 * User Written:    SourceCode                                              * 
 *==========================================================================*/ 

%let transformID = %quote(A5ELGGF9.AK00012O);
%let trans_rc = 0;
%let etls_stepStartTime = %sysfunc(datetime(), datetime20.); 

%let etls_recCheckExist = 0; 
%let etls_recnt = 0; 
%macro etls_recordCheck; 
   %let etls_recCheckExist = %eval(%sysfunc(exist(work.W1P6EKLG5, DATA)) or 
         %sysfunc(exist(work.W1P6EKLG5, VIEW))); 
   
   %if (&etls_recCheckExist) %then
   %do;
      %local etls_syntaxcheck; 
      %let etls_syntaxcheck = %sysfunc(getoption(syntaxcheck)); 
      /* Turn off syntaxcheck option to perform following steps  */ 
      options nosyntaxcheck;
      
      proc contents data = work.W1P6EKLG5 out = work.etls_contents(keep = nobs) noprint; 
      run; 
      
      data _null_; 
         set work.etls_contents (obs = 1); 
         call symput("etls_recnt", left(put(nobs,32.))); 
      run;
      
      proc datasets lib = work nolist nowarn memtype = (data view);
         delete etls_contents;
      quit;
      
      /* Reset syntaxcheck option to previous setting  */ 
      options &etls_syntaxcheck; 
   %end;
%mend etls_recordCheck;
%etls_recordCheck;

%let SYSLAST = %nrquote(work.W1P6EKLG5); 

%let _INPUT_count = 1;
%let _INPUT = work.W1P6EKLG5;
%let _INPUT_connect = ;
%let _INPUT_engine = ;
%let _INPUT_memtype = DATA;
%let _INPUT_options = %nrquote();
%let _INPUT_alter = %nrquote();
%let _INPUT_path = %nrquote(/SQL Join_A5ELGGF9.AF0000GK%(WorkTable%));
%let _INPUT_type = 1;
%let _INPUT_label = %nrquote();

%let _INPUT1 = work.W1P6EKLG5;
%let _INPUT1_connect = ;
%let _INPUT1_engine = ;
%let _INPUT1_memtype = DATA;
%let _INPUT1_options = %nrquote();
%let _INPUT1_alter = %nrquote();
%let _INPUT1_path = %nrquote(/SQL Join_A5ELGGF9.AF0000GK%(WorkTable%));
%let _INPUT1_type = 1;
%let _INPUT1_label = %nrquote();

%let _OUTPUT_count = 1;
%let _OUTPUT = work.W1P7AB0PK;
%let _OUTPUT_connect = ;
%let _OUTPUT_engine = ;
%let _OUTPUT_memtype = DATA;
%let _OUTPUT_options = %nrquote();
%let _OUTPUT_alter = %nrquote();
%let _OUTPUT_path = %nrquote(/User Written_A5ELGGF9.AF0000GL%(WorkTable%));
%let _OUTPUT_type = 1;
%let _OUTPUT_label = %nrquote();
/* List of target columns to keep  */ 
%let _OUTPUT_keep = ACCOUNT_RK ACCOUNT_REGISTRATION_NM ALTERNATE_ACCOUNT_NM OPEN_DT 
        IRB_SRC_INSTRUMENT_ID FINANCIAL_INSTRUMENT_TYPE_CD SWAP_LEG_TYPE_CD 
        RESET_DT VALID_FROM_DTTM VALID_TO_DTTM IRB_PAYMENT_DT 
        IRB_IRR_RATE_RESETS_ID FINANCIAL_INSTRUMENT_RK;
%let _OUTPUT_col_count = 13;
%let _OUTPUT_col0_name = ACCOUNT_RK;
%let _OUTPUT_col0_table = work.W1P7AB0PK;
%let _OUTPUT_col0_length = 8;
%let _OUTPUT_col0_type = ;
%let _OUTPUT_col0_format = 11.;
%let _OUTPUT_col0_informat = 11.;
%let _OUTPUT_col0_label = %nrquote(ACCOUNT_RK);
%let _OUTPUT_col0_exp = ;
%let _OUTPUT_col0_input_count = 0;
%let _OUTPUT_col1_name = ACCOUNT_REGISTRATION_NM;
%let _OUTPUT_col1_table = work.W1P7AB0PK;
%let _OUTPUT_col1_length = 100;
%let _OUTPUT_col1_type = $;
%let _OUTPUT_col1_format = $100.;
%let _OUTPUT_col1_informat = $100.;
%let _OUTPUT_col1_label = %nrquote(ACCOUNT_REGISTRATION_NM);
%let _OUTPUT_col1_exp = ;
%let _OUTPUT_col1_input_count = 0;
%let _OUTPUT_col2_name = ALTERNATE_ACCOUNT_NM;
%let _OUTPUT_col2_table = work.W1P7AB0PK;
%let _OUTPUT_col2_length = 40;
%let _OUTPUT_col2_type = $;
%let _OUTPUT_col2_format = $40.;
%let _OUTPUT_col2_informat = $40.;
%let _OUTPUT_col2_label = %nrquote(ALTERNATE_ACCOUNT_NM);
%let _OUTPUT_col2_exp = ;
%let _OUTPUT_col2_input_count = 0;
%let _OUTPUT_col3_name = OPEN_DT;
%let _OUTPUT_col3_table = work.W1P7AB0PK;
%let _OUTPUT_col3_length = 8;
%let _OUTPUT_col3_type = ;
%let _OUTPUT_col3_format = DATETIME20.;
%let _OUTPUT_col3_informat = DATETIME20.;
%let _OUTPUT_col3_label = %nrquote(OPEN_DT);
%let _OUTPUT_col3_exp = ;
%let _OUTPUT_col3_input_count = 0;
%let _OUTPUT_col4_name = IRB_SRC_INSTRUMENT_ID;
%let _OUTPUT_col4_table = work.W1P7AB0PK;
%let _OUTPUT_col4_length = 32;
%let _OUTPUT_col4_type = $;
%let _OUTPUT_col4_format = $32.;
%let _OUTPUT_col4_informat = $32.;
%let _OUTPUT_col4_label = %nrquote(IRB_SRC_INSTRUMENT_ID);
%let _OUTPUT_col4_exp = ;
%let _OUTPUT_col4_input_count = 0;
%let _OUTPUT_col5_name = FINANCIAL_INSTRUMENT_TYPE_CD;
%let _OUTPUT_col5_table = work.W1P7AB0PK;
%let _OUTPUT_col5_length = 3;
%let _OUTPUT_col5_type = $;
%let _OUTPUT_col5_format = $3.;
%let _OUTPUT_col5_informat = $3.;
%let _OUTPUT_col5_label = %nrquote(FINANCIAL_INSTRUMENT_TYPE_CD);
%let _OUTPUT_col5_exp = ;
%let _OUTPUT_col5_input_count = 0;
%let _OUTPUT_col6_name = SWAP_LEG_TYPE_CD;
%let _OUTPUT_col6_table = work.W1P7AB0PK;
%let _OUTPUT_col6_length = 3;
%let _OUTPUT_col6_type = $;
%let _OUTPUT_col6_format = $3.;
%let _OUTPUT_col6_informat = $3.;
%let _OUTPUT_col6_label = %nrquote(SWAP_LEG_TYPE_CD);
%let _OUTPUT_col6_exp = ;
%let _OUTPUT_col6_input_count = 0;
%let _OUTPUT_col7_name = RESET_DT;
%let _OUTPUT_col7_table = work.W1P7AB0PK;
%let _OUTPUT_col7_length = 8;
%let _OUTPUT_col7_type = ;
%let _OUTPUT_col7_format = DATETIME20.;
%let _OUTPUT_col7_informat = DATETIME20.;
%let _OUTPUT_col7_label = %nrquote(RESET_DT);
%let _OUTPUT_col7_exp = ;
%let _OUTPUT_col7_input_count = 0;
%let _OUTPUT_col8_name = VALID_FROM_DTTM;
%let _OUTPUT_col8_table = work.W1P7AB0PK;
%let _OUTPUT_col8_length = 8;
%let _OUTPUT_col8_type = ;
%let _OUTPUT_col8_format = DATETIME20.;
%let _OUTPUT_col8_informat = DATETIME20.;
%let _OUTPUT_col8_label = %nrquote(VALID_FROM_DTTM);
%let _OUTPUT_col8_exp = ;
%let _OUTPUT_col8_input_count = 0;
%let _OUTPUT_col9_name = VALID_TO_DTTM;
%let _OUTPUT_col9_table = work.W1P7AB0PK;
%let _OUTPUT_col9_length = 8;
%let _OUTPUT_col9_type = ;
%let _OUTPUT_col9_format = DATETIME20.;
%let _OUTPUT_col9_informat = DATETIME20.;
%let _OUTPUT_col9_label = %nrquote(VALID_TO_DTTM);
%let _OUTPUT_col9_exp = ;
%let _OUTPUT_col9_input_count = 0;
%let _OUTPUT_col10_name = IRB_PAYMENT_DT;
%let _OUTPUT_col10_table = work.W1P7AB0PK;
%let _OUTPUT_col10_length = 8;
%let _OUTPUT_col10_type = ;
%let _OUTPUT_col10_format = DATETIME20.;
%let _OUTPUT_col10_informat = DATETIME20.;
%let _OUTPUT_col10_label = %nrquote(IRB_PAYMENT_DT);
%let _OUTPUT_col10_exp = ;
%let _OUTPUT_col10_input_count = 0;
%let _OUTPUT_col11_name = IRB_IRR_RATE_RESETS_ID;
%let _OUTPUT_col11_table = work.W1P7AB0PK;
%let _OUTPUT_col11_length = 32;
%let _OUTPUT_col11_type = $;
%let _OUTPUT_col11_format = $32.;
%let _OUTPUT_col11_informat = $32.;
%let _OUTPUT_col11_label = %nrquote(IRB_IRR_RATE_RESETS_ID);
%let _OUTPUT_col11_exp = ;
%let _OUTPUT_col11_input_count = 0;
%let _OUTPUT_col12_name = FINANCIAL_INSTRUMENT_RK;
%let _OUTPUT_col12_table = work.W1P7AB0PK;
%let _OUTPUT_col12_length = 8;
%let _OUTPUT_col12_type = ;
%let _OUTPUT_col12_format = 11.;
%let _OUTPUT_col12_informat = 11.;
%let _OUTPUT_col12_label = %nrquote(FINANCIAL_INSTRUMENT_RK);
%let _OUTPUT_col12_exp = ;
%let _OUTPUT_col12_input_count = 0;

%let _OUTPUT1 = work.W1P7AB0PK;
%let _OUTPUT1_connect = ;
%let _OUTPUT1_engine = ;
%let _OUTPUT1_memtype = DATA;
%let _OUTPUT1_options = %nrquote();
%let _OUTPUT1_alter = %nrquote();
%let _OUTPUT1_path = %nrquote(/User Written_A5ELGGF9.AF0000GL%(WorkTable%));
%let _OUTPUT1_type = 1;
%let _OUTPUT1_label = %nrquote();
/* List of target columns to keep  */ 
%let _OUTPUT1_keep = ACCOUNT_RK ACCOUNT_REGISTRATION_NM ALTERNATE_ACCOUNT_NM OPEN_DT 
        IRB_SRC_INSTRUMENT_ID FINANCIAL_INSTRUMENT_TYPE_CD SWAP_LEG_TYPE_CD 
        RESET_DT VALID_FROM_DTTM VALID_TO_DTTM IRB_PAYMENT_DT 
        IRB_IRR_RATE_RESETS_ID FINANCIAL_INSTRUMENT_RK;
%let _OUTPUT1_col_count = 13;
%let _OUTPUT1_col0_name = ACCOUNT_RK;
%let _OUTPUT1_col0_table = work.W1P7AB0PK;
%let _OUTPUT1_col0_length = 8;
%let _OUTPUT1_col0_type = ;
%let _OUTPUT1_col0_format = 11.;
%let _OUTPUT1_col0_informat = 11.;
%let _OUTPUT1_col0_label = %nrquote(ACCOUNT_RK);
%let _OUTPUT1_col0_exp = ;
%let _OUTPUT1_col0_input_count = 0;
%let _OUTPUT1_col1_name = ACCOUNT_REGISTRATION_NM;
%let _OUTPUT1_col1_table = work.W1P7AB0PK;
%let _OUTPUT1_col1_length = 100;
%let _OUTPUT1_col1_type = $;
%let _OUTPUT1_col1_format = $100.;
%let _OUTPUT1_col1_informat = $100.;
%let _OUTPUT1_col1_label = %nrquote(ACCOUNT_REGISTRATION_NM);
%let _OUTPUT1_col1_exp = ;
%let _OUTPUT1_col1_input_count = 0;
%let _OUTPUT1_col2_name = ALTERNATE_ACCOUNT_NM;
%let _OUTPUT1_col2_table = work.W1P7AB0PK;
%let _OUTPUT1_col2_length = 40;
%let _OUTPUT1_col2_type = $;
%let _OUTPUT1_col2_format = $40.;
%let _OUTPUT1_col2_informat = $40.;
%let _OUTPUT1_col2_label = %nrquote(ALTERNATE_ACCOUNT_NM);
%let _OUTPUT1_col2_exp = ;
%let _OUTPUT1_col2_input_count = 0;
%let _OUTPUT1_col3_name = OPEN_DT;
%let _OUTPUT1_col3_table = work.W1P7AB0PK;
%let _OUTPUT1_col3_length = 8;
%let _OUTPUT1_col3_type = ;
%let _OUTPUT1_col3_format = DATETIME20.;
%let _OUTPUT1_col3_informat = DATETIME20.;
%let _OUTPUT1_col3_label = %nrquote(OPEN_DT);
%let _OUTPUT1_col3_exp = ;
%let _OUTPUT1_col3_input_count = 0;
%let _OUTPUT1_col4_name = IRB_SRC_INSTRUMENT_ID;
%let _OUTPUT1_col4_table = work.W1P7AB0PK;
%let _OUTPUT1_col4_length = 32;
%let _OUTPUT1_col4_type = $;
%let _OUTPUT1_col4_format = $32.;
%let _OUTPUT1_col4_informat = $32.;
%let _OUTPUT1_col4_label = %nrquote(IRB_SRC_INSTRUMENT_ID);
%let _OUTPUT1_col4_exp = ;
%let _OUTPUT1_col4_input_count = 0;
%let _OUTPUT1_col5_name = FINANCIAL_INSTRUMENT_TYPE_CD;
%let _OUTPUT1_col5_table = work.W1P7AB0PK;
%let _OUTPUT1_col5_length = 3;
%let _OUTPUT1_col5_type = $;
%let _OUTPUT1_col5_format = $3.;
%let _OUTPUT1_col5_informat = $3.;
%let _OUTPUT1_col5_label = %nrquote(FINANCIAL_INSTRUMENT_TYPE_CD);
%let _OUTPUT1_col5_exp = ;
%let _OUTPUT1_col5_input_count = 0;
%let _OUTPUT1_col6_name = SWAP_LEG_TYPE_CD;
%let _OUTPUT1_col6_table = work.W1P7AB0PK;
%let _OUTPUT1_col6_length = 3;
%let _OUTPUT1_col6_type = $;
%let _OUTPUT1_col6_format = $3.;
%let _OUTPUT1_col6_informat = $3.;
%let _OUTPUT1_col6_label = %nrquote(SWAP_LEG_TYPE_CD);
%let _OUTPUT1_col6_exp = ;
%let _OUTPUT1_col6_input_count = 0;
%let _OUTPUT1_col7_name = RESET_DT;
%let _OUTPUT1_col7_table = work.W1P7AB0PK;
%let _OUTPUT1_col7_length = 8;
%let _OUTPUT1_col7_type = ;
%let _OUTPUT1_col7_format = DATETIME20.;
%let _OUTPUT1_col7_informat = DATETIME20.;
%let _OUTPUT1_col7_label = %nrquote(RESET_DT);
%let _OUTPUT1_col7_exp = ;
%let _OUTPUT1_col7_input_count = 0;
%let _OUTPUT1_col8_name = VALID_FROM_DTTM;
%let _OUTPUT1_col8_table = work.W1P7AB0PK;
%let _OUTPUT1_col8_length = 8;
%let _OUTPUT1_col8_type = ;
%let _OUTPUT1_col8_format = DATETIME20.;
%let _OUTPUT1_col8_informat = DATETIME20.;
%let _OUTPUT1_col8_label = %nrquote(VALID_FROM_DTTM);
%let _OUTPUT1_col8_exp = ;
%let _OUTPUT1_col8_input_count = 0;
%let _OUTPUT1_col9_name = VALID_TO_DTTM;
%let _OUTPUT1_col9_table = work.W1P7AB0PK;
%let _OUTPUT1_col9_length = 8;
%let _OUTPUT1_col9_type = ;
%let _OUTPUT1_col9_format = DATETIME20.;
%let _OUTPUT1_col9_informat = DATETIME20.;
%let _OUTPUT1_col9_label = %nrquote(VALID_TO_DTTM);
%let _OUTPUT1_col9_exp = ;
%let _OUTPUT1_col9_input_count = 0;
%let _OUTPUT1_col10_name = IRB_PAYMENT_DT;
%let _OUTPUT1_col10_table = work.W1P7AB0PK;
%let _OUTPUT1_col10_length = 8;
%let _OUTPUT1_col10_type = ;
%let _OUTPUT1_col10_format = DATETIME20.;
%let _OUTPUT1_col10_informat = DATETIME20.;
%let _OUTPUT1_col10_label = %nrquote(IRB_PAYMENT_DT);
%let _OUTPUT1_col10_exp = ;
%let _OUTPUT1_col10_input_count = 0;
%let _OUTPUT1_col11_name = IRB_IRR_RATE_RESETS_ID;
%let _OUTPUT1_col11_table = work.W1P7AB0PK;
%let _OUTPUT1_col11_length = 32;
%let _OUTPUT1_col11_type = $;
%let _OUTPUT1_col11_format = $32.;
%let _OUTPUT1_col11_informat = $32.;
%let _OUTPUT1_col11_label = %nrquote(IRB_IRR_RATE_RESETS_ID);
%let _OUTPUT1_col11_exp = ;
%let _OUTPUT1_col11_input_count = 0;
%let _OUTPUT1_col12_name = FINANCIAL_INSTRUMENT_RK;
%let _OUTPUT1_col12_table = work.W1P7AB0PK;
%let _OUTPUT1_col12_length = 8;
%let _OUTPUT1_col12_type = ;
%let _OUTPUT1_col12_format = 11.;
%let _OUTPUT1_col12_informat = 11.;
%let _OUTPUT1_col12_label = %nrquote(FINANCIAL_INSTRUMENT_RK);
%let _OUTPUT1_col12_exp = ;
%let _OUTPUT1_col12_input_count = 0;

/*---- Start of User Written Code  ----*/ 

data &_OUTPUT1;
set &_INPUT1;
by ACCOUNT_RK VALID_FROM_DTTM VALID_TO_DTTM;;
format VT datetime20.;
retain VT .;
if ~first.ACCOUNT_RK then
do;
if VT ne VALID_FROM_DTTM then do; Type=1; output; end; 
if RESET_DT>IRB_PAYMENT_DT then do; Type=2;output; end;
end;

VT=VALID_TO_DTTM;
run;
%error_check(mpStepType=DATA);

/*---- End of User Written Code  ----*/ 

%rcSet(&syserr); 
%rcSet(&sqlrc); 


/**  Step end User Written **/

/*==========================================================================* 
 * Step:            Append                                A5ELGGF9.AK00012P * 
 * Transform:       Append                                                  * 
 * Description:                                                             * 
 *                                                                          * 
 * Source Tables:   User Written - work.W1P6TJV69         A5ELGGF9.AF0000GJ * 
 *                  User Written - work.W1P7AB0PK         A5ELGGF9.AF0000GL * 
 * Target Table:    Append - work.W1P7B8YDK               A5ELGGF9.AF0000GM * 
 *==========================================================================*/ 

%let transformID = %quote(A5ELGGF9.AK00012P);
%let trans_rc = 0;
%let etls_stepStartTime = %sysfunc(datetime(), datetime20.); 

%let etls_recCheckExist = 0; 
%let etls_recnt = 0; 
%macro etls_recordCheck; 
   %let etls_recCheckExist = %eval(%sysfunc(exist(work.W1P6TJV69, DATA)) or 
         %sysfunc(exist(work.W1P6TJV69, VIEW))); 
   
   %if (&etls_recCheckExist) %then
   %do;
      %local etls_syntaxcheck; 
      %let etls_syntaxcheck = %sysfunc(getoption(syntaxcheck)); 
      /* Turn off syntaxcheck option to perform following steps  */ 
      options nosyntaxcheck;
      
      proc contents data = work.W1P6TJV69 out = work.etls_contents(keep = nobs) noprint; 
      run; 
      
      data _null_; 
         set work.etls_contents (obs = 1); 
         call symput("etls_recnt", left(put(nobs,32.))); 
      run;
      
      proc datasets lib = work nolist nowarn memtype = (data view);
         delete etls_contents;
      quit;
      
      /* Reset syntaxcheck option to previous setting  */ 
      options &etls_syntaxcheck; 
   %end;
%mend etls_recordCheck;
%etls_recordCheck;

%let dbxrc = %eval(%sysfunc(exist(work.W1P6TJV69, DATA)) or 
      %sysfunc(exist(work.W1P6TJV69, VIEW))); 

/*---- Map the columns  ----*/ 
proc datasets lib = work nolist nowarn memtype = (data view);
   delete WJ2Z679;
quit;

%put %str(NOTE: Mapping columns ...);
proc sql;
   create view work.WJ2Z679 as
      select
         ACCOUNT_RK,
         ACCOUNT_REGISTRATION_NM,
         ALTERNATE_ACCOUNT_NM,
         OPEN_DT,
         IRB_SRC_INSTRUMENT_ID,
         FINANCIAL_INSTRUMENT_TYPE_CD,
         RESET_DT,
         VALID_FROM_DTTM,
         VALID_TO_DTTM,
         IRB_PAYMENT_DT,
         IRB_IRR_RATE_RESETS_ID
   from work.W1P6TJV69
   ;
quit;

%let SYSLAST = work.WJ2Z679;

%let dbxrc = %eval(%sysfunc(exist(work.W1P7AB0PK, DATA)) or 
      %sysfunc(exist(work.W1P7AB0PK, VIEW))); 

/*---- Map the columns  ----*/ 
proc datasets lib = work nolist nowarn memtype = (data view);
   delete WJ2Z67D;
quit;

%put %str(NOTE: Mapping columns ...);
proc sql;
   create view work.WJ2Z67D as
      select
         ACCOUNT_RK,
         ACCOUNT_REGISTRATION_NM,
         ALTERNATE_ACCOUNT_NM,
         OPEN_DT,
         IRB_SRC_INSTRUMENT_ID,
         FINANCIAL_INSTRUMENT_TYPE_CD,
         RESET_DT,
         VALID_FROM_DTTM,
         VALID_TO_DTTM,
         IRB_PAYMENT_DT,
         IRB_IRR_RATE_RESETS_ID
   from work.W1P7AB0PK
   ;
quit;

%let SYSLAST = work.WJ2Z67D;

proc datasets lib = work nolist nowarn memtype = (data view);
   delete W1P7B8YDK;
quit;

data work.W1P7B8YDK / view=work.W1P7B8YDK;
   set work.WJ2Z679
       work.WJ2Z67D;
   keep ACCOUNT_RK ACCOUNT_REGISTRATION_NM ALTERNATE_ACCOUNT_NM OPEN_DT 
    IRB_SRC_INSTRUMENT_ID FINANCIAL_INSTRUMENT_TYPE_CD RESET_DT VALID_FROM_DTTM 
    VALID_TO_DTTM IRB_PAYMENT_DT IRB_IRR_RATE_RESETS_ID; 
run;

%rcSet(&syserr); 



/**  Step end Append **/

/*==========================================================================* 
 * Step:            Extract                               A5ELGGF9.AK00012Q * 
 * Transform:       Extract                                                 * 
 * Description:     Добавление атрибутов                                    * 
 *                                                                          * 
 * Source Table:    Append - work.W1P7B8YDK               A5ELGGF9.AF0000GM * 
 * Target Table:    Extract - work.W1P7C98X1              A5ELGGF9.AF0000GN * 
 *==========================================================================*/ 

%let transformID = %quote(A5ELGGF9.AK00012Q);
%let trans_rc = 0;
%let etls_stepStartTime = %sysfunc(datetime(), datetime20.); 

%let etls_recnt = -1;
%let SYSLAST = %nrquote(work.W1P7B8YDK); 

%let SYS_SQL_IP_SPEEDO = Y;
%let SYS_SQL_MAPPUTTO = sas_put;
%let SYS_SQLREDUCEPUT = DBMS;
%global etls_sql_pushDown;
%let etls_sql_pushDown = -1;
option DBIDIRECTEXEC;

/*---- Map the columns  ----*/ 
proc datasets lib = work nolist nowarn memtype = (data view);
   delete W1P7C98X1;
quit;

%put %str(NOTE: Mapping columns ...);
proc sql;
   create table work.W1P7C98X1 as
      select
         ('П-12') as REPORTCODE length = 5
            format = $5.
            informat = $5.
            label = 'REPORTCODE',
         (&REPDT) as REPORTDATE length = 8
            format = DATETIME20.
            informat = DATETIME20.
            label = 'REPORTDATE',
         (strip(ACCOUNT_REGISTRATION_NM )) as FRONTKDEALID length = 10
            format = $10.
            informat = $10.
            label = 'FRONTKDEALID',
         (put(input(substr(ALTERNATE_ACCOUNT_NM  , 1, findc(ALTERNATE_ACCOUNT_NM  , '_')-1), best.), best.)) as FRONTFDEALID length = 10
            format = $10.
            informat = $10.
            label = 'FRONTFDEALID',
         IRB_SRC_INSTRUMENT_ID as DEALID length = 100   
            format = $100.
            informat = $100.
            label = 'DEALID',
         FINANCIAL_INSTRUMENT_TYPE_CD as INSTRUMENTTYPECD   
            label = 'INSTRUMENTTYPECD',
         OPEN_DT as DEALDATE   
            label = 'DEALDATE',
         (strip(put(input(substr(IRB_IRR_RATE_RESETS_ID, findc(IRB_IRR_RATE_RESETS_ID , '_','b')+1), best12.), best12.))) as ADDITIONALINFORMATION length = 255
            format = $255.
            informat = $255.
            label = 'ADDITIONALINFORMATION',
         VALID_FROM_DTTM as STARTDATE   
            label = 'STARTDATE',
         VALID_TO_DTTM as ENDDATE   
            label = 'ENDDATE',
         (substr(IRB_IRR_RATE_RESETS_ID , 5, 1)) as LEGNUMBER length = 1
            format = $1.
            informat = $1.
            label = 'LEGNUMBER',
         (put(datepart(RESET_DT) ,ddmmyyp10.)) as VALUEFRS length = 20
            format = $20.
            informat = $20.
            label = 'VALUEFRS',
         (put(datepart(IRB_PAYMENT_DT) , ddmmyyp10.)) as VALUESEC length = 20
            format = $20.
            informat = $20.
            label = 'VALUESEC'
   from &SYSLAST
   ;
quit;

%let SYSLAST = work.W1P7C98X1;

%global etls_sql_pushDown;
%let etls_sql_pushDown = &sys_sql_ip_all;

%rcSet(&sqlrc); 



/**  Step end Extract **/

/*==========================================================================* 
 * Step:            Table Loader                          A5ELGGF9.AK00012R * 
 * Transform:       Table Loader (Version 2.1)                              * 
 * Description:                                                             * 
 *                                                                          * 
 * Source Table:    Extract - work.W1P7C98X1              A5ELGGF9.AF0000GN * 
 * Target Table:    DQ_DRVT_DWH_DM - dm_dq.DQ_DRVT_DWH_DM A5ELGGF9.AE000049 * 
 *==========================================================================*/ 

%let transformID = %quote(A5ELGGF9.AK00012R);
%let trans_rc = 0;
%let etls_stepStartTime = %sysfunc(datetime(), datetime20.); 

%let SYSLAST = %nrquote(work.W1P7C98X1); 

%let SYS_SQL_IP_SPEEDO = Y;
%let SYS_SQL_MAPPUTTO = sas_put;
%let SYS_SQLREDUCEPUT = DBMS;
%global etls_sql_pushDown;
%let etls_sql_pushDown = -1;
option DBIDIRECTEXEC;

%global etls_tableExist;
%global etls_numIndex;
%global etls_lastTable;
%let etls_tableExist = -1; 
%let etls_numIndex = -1; 
%let etls_lastTable = &SYSLAST; 

/*---- Define load data macro  ----*/ 

/* --------------------------------------------------------------
   Load Technique Selection: AppendToExisting - AppendProc
   Constraint and index action selections: 'ASIS','ASIS','ASIS','ASIS'
   Additional options selections... 
      Set unmapped to missing on updates: false 
   -------------------------------------------------------------- */
%macro etls_loader;

   %let etls_tableOptions = ;
   
   /*---- Map the columns  ----*/ 
   proc datasets lib = work nolist nowarn memtype = (data view);
      delete WJ2Z687;
   quit;
   
   data _null_;
      put "NOTE: The following column(s) do not have a column mapping, so the"
           " value(s) will be set to missing: NEXTDATE";
   run;
   
   %put %str(NOTE: Mapping columns ...);
   proc sql;
      create view work.WJ2Z687 as
         select
            REPORTCODE,
            REPORTDATE,
            FRONTKDEALID,
            FRONTFDEALID,
            DEALID,
            INSTRUMENTTYPECD,
            DEALDATE,
            ADDITIONALINFORMATION,
            STARTDATE,
            . as NEXTDATE length = 8
               format = DATETIME20.
               informat = DATETIME20.,
            ENDDATE,
            LEGNUMBER,
            VALUEFRS,
            VALUESEC
      from &etls_lastTable
      ;
   quit;
   
   %let SYSLAST = work.WJ2Z687;
   
   %let etls_lastTable = &SYSLAST; 
   %let etls_tableOptions = ; 
   
   /* Determine if the target table exists  */ 
   %let etls_tableExist = %eval(%sysfunc(exist(dm_dq.DQ_DRVT_DWH_DM, DATA)) or 
         %sysfunc(exist(dm_dq.DQ_DRVT_DWH_DM, VIEW))); 
   
   /*---- Create a new table  ----*/ 
   %if (&etls_tableExist eq 0) %then 
   %do;  /* if table does not exist  */ 
   
      %put %str(NOTE: Creating table ...);
      
      data dm_dq.DQ_DRVT_DWH_DM
              (dbnull = (
                         REPORTCODE = YES
                         REPORTDATE = YES
                         FRONTKDEALID = YES
                         FRONTFDEALID = YES
                         DEALID = YES
                         INSTRUMENTTYPECD = YES
                         DEALDATE = YES
                         ADDITIONALINFORMATION = YES
                         STARTDATE = YES
                         NEXTDATE = YES
                         ENDDATE = YES
                         LEGNUMBER = YES
                         VALUEFRS = YES
                         VALUESEC = YES));
         attrib REPORTCODE length = $5
            format = $5.
            informat = $5.
            label = 'REPORTCODE'; 
         attrib REPORTDATE length = 8
            format = DATETIME20.
            informat = DATETIME20.
            label = 'REPORTDATE'; 
         attrib FRONTKDEALID length = $10
            format = $10.
            informat = $10.
            label = 'FRONTKDEALID'; 
         attrib FRONTFDEALID length = $10
            format = $10.
            informat = $10.
            label = 'FRONTFDEALID'; 
         attrib DEALID length = $100
            format = $100.
            informat = $100.
            label = 'DEALID'; 
         attrib INSTRUMENTTYPECD length = $3
            format = $3.
            informat = $3.
            label = 'INSTRUMENTTYPECD'; 
         attrib DEALDATE length = 8
            format = DATETIME20.
            informat = DATETIME20.
            label = 'DEALDATE'; 
         attrib ADDITIONALINFORMATION length = $255
            format = $255.
            informat = $255.
            label = 'ADDITIONALINFORMATION'; 
         attrib STARTDATE length = 8
            format = DATETIME20.
            informat = DATETIME20.
            label = 'STARTDATE'; 
         attrib NEXTDATE length = 8
            format = DATETIME20.
            informat = DATETIME20.
            label = 'NEXTDATE'; 
         attrib ENDDATE length = 8
            format = DATETIME20.
            informat = DATETIME20.
            label = 'ENDDATE'; 
         attrib LEGNUMBER length = $1
            format = $1.
            informat = $1.
            label = 'LEGNUMBER'; 
         attrib VALUEFRS length = $20
            format = $20.
            informat = $20.
            label = 'VALUEFRS'; 
         attrib VALUESEC length = $20
            format = $20.
            informat = $20.
            label = 'VALUESEC'; 
         call missing(of _all_);
         stop;
      run;
      
      %rcSet(&syserr); 
      
   %end;  /* if table does not exist  */ 
   
   /*---- Append  ----*/ 
   %put %str(NOTE: Appending data ...);
   
   proc append base = dm_dq.DQ_DRVT_DWH_DM 
      data = &etls_lastTable (&etls_tableOptions)  force ; 
    run; 
   
   %rcSet(&syserr); 
   
   proc datasets lib = work nolist nowarn memtype = (data view);
      delete WJ2Z687;
   quit;
   
%mend etls_loader;
%etls_loader;

%let etls_recnt = 0;
%macro etls_recordCheck; 
   %let etls_recCheckExist = %eval(%sysfunc(exist(dm_dq.DQ_DRVT_DWH_DM, DATA)) or 
         %sysfunc(exist(dm_dq.DQ_DRVT_DWH_DM, VIEW))); 
   
   %if (&etls_recCheckExist) %then
   %do;
      proc sql noprint;
         select count(*) into :etls_recnt from dm_dq.DQ_DRVT_DWH_DM;
      quit;
   %end;
%mend etls_recordCheck;
%etls_recordCheck;



/**  Step end Table Loader **/

/*==========================================================================* 
 * Step:            SQL Join                              A5ELGGF9.AK00012S * 
 * Transform:       Join                                                    * 
 * Description:                                                             * 
 *                                                                          * 
 * Source Tables:   Extract - work.W1P7C98X1              A5ELGGF9.AF0000GN * 
 *                  FINANCIAL_INSTRUMENT_TYPE -           A569C89V.AE0000FZ * 
 *                   dwh_dds.FINANCIAL_INSTRUMENT_TYPE                      * 
 * Target Table:    SQL Join - work.W1P7GKA9L             A5ELGGF9.AF0000GO * 
 *==========================================================================*/ 

%let transformID = %quote(A5ELGGF9.AK00012S);
%let trans_rc = 0;
%let etls_stepStartTime = %sysfunc(datetime(), datetime20.); 

%let etls_recCheckExist = 0; 
%let etls_recnt = 0; 
%macro etls_recordCheck; 
   %let etls_recCheckExist = %eval(%sysfunc(exist(work.W1P7C98X1, DATA)) or 
         %sysfunc(exist(work.W1P7C98X1, VIEW))); 
   
   %if (&etls_recCheckExist) %then
   %do;
      %local etls_syntaxcheck; 
      %let etls_syntaxcheck = %sysfunc(getoption(syntaxcheck)); 
      /* Turn off syntaxcheck option to perform following steps  */ 
      options nosyntaxcheck;
      
      proc contents data = work.W1P7C98X1 out = work.etls_contents(keep = nobs) noprint; 
      run; 
      
      data _null_; 
         set work.etls_contents (obs = 1); 
         call symput("etls_recnt", left(put(nobs,32.))); 
      run;
      
      proc datasets lib = work nolist nowarn memtype = (data view);
         delete etls_contents;
      quit;
      
      /* Reset syntaxcheck option to previous setting  */ 
      options &etls_syntaxcheck; 
   %end;
%mend etls_recordCheck;
%etls_recordCheck;

%let SYS_SQL_IP_SPEEDO = Y;
%let SYS_SQL_MAPPUTTO = sas_put;
%let SYS_SQLREDUCEPUT = DBMS;
%global etls_sql_pushDown;
%let etls_sql_pushDown = -1;
option DBIDIRECTEXEC;

proc datasets lib = work nolist nowarn memtype = (data view);
   delete W1P7GKA9L;
quit;

proc sql;
   create table work.W1P7GKA9L as
   select distinct
      FINANCIAL_INSTRUMENT_TYPE.FINANCIAL_INSTRUMENT_TYPE_CD as INSTRUMENTTYPECD length = 3   
         format = $3.
         informat = $3.
         label = 'INSTRUMENTTYPECD',
      FINANCIAL_INSTRUMENT_TYPE.FINANCIAL_INSTRUMENT_TYPE_DESC as INSTRUMENTTYPE length = 100   
         format = $100.
         informat = $100.
         label = 'INSTRUMENTTYPE'
   from
      work.W1P7C98X1 left join 
      dwh_dds.FINANCIAL_INSTRUMENT_TYPE
         on
         (
            W1P7C98X1.INSTRUMENTTYPECD = FINANCIAL_INSTRUMENT_TYPE.FINANCIAL_INSTRUMENT_TYPE_CD
            and FINANCIAL_INSTRUMENT_TYPE.VALID_TO_DTTM = &ETL_SCD_FUTURE_DTTM
         )
   where
      INSTRUMENTTYPECD NOT IS MISSING 
   ;
quit;

%global etls_sql_pushDown;
%let etls_sql_pushDown = &sys_sql_ip_all;

%rcSet(&sqlrc); 



/**  Step end SQL Join **/

/*==========================================================================* 
 * Step:            Table Loader                          A5ELGGF9.AK00012T * 
 * Transform:       Table Loader (Version 2.1)                              * 
 * Description:                                                             * 
 *                                                                          * 
 * Source Table:    SQL Join - work.W1P7GKA9L             A5ELGGF9.AF0000GO * 
 * Target Table:    DQ_DRVT_INSTRUMENTTYPE -              A5ELGGF9.AE00004A * 
 *                   dm_dq.DQ_DRVT_INSTRUMENTTYPE                           * 
 *==========================================================================*/ 

%let transformID = %quote(A5ELGGF9.AK00012T);
%let trans_rc = 0;
%let etls_stepStartTime = %sysfunc(datetime(), datetime20.); 

%let SYSLAST = %nrquote(work.W1P7GKA9L); 

%let SYS_SQL_IP_SPEEDO = Y;
%let SYS_SQL_MAPPUTTO = sas_put;
%let SYS_SQLREDUCEPUT = DBMS;
%global etls_sql_pushDown;
%let etls_sql_pushDown = -1;
option DBIDIRECTEXEC;

%global etls_tableExist;
%global etls_numIndex;
%global etls_lastTable;
%let etls_tableExist = -1; 
%let etls_numIndex = -1; 
%let etls_lastTable = &SYSLAST; 

/*---- Define load data macro  ----*/ 

/* --------------------------------------------------------------
   Load Technique Selection: Update - Matching=SQLSet, New=AppendProc
   Blanks may replace non-blanks: false
   Constraint and index action selections: 'ASIS','ASIS','ASIS','ASIS'
   Additional options selections... 
      Set unmapped to missing on updates: false 
   -------------------------------------------------------------- */
%macro etls_loader;

   %let etls_tableOptions = ;
   
   /* Determine if the target table exists  */ 
   %let etls_tableExist = %eval(%sysfunc(exist(dm_dq.DQ_DRVT_INSTRUMENTTYPE, DATA)) or 
         %sysfunc(exist(dm_dq.DQ_DRVT_INSTRUMENTTYPE, VIEW))); 
   
   %let etls_hasUpdateIndex=0; 
   
   /*---- Create a new table  ----*/ 
   %if (&etls_tableExist eq 0) %then 
   %do;  /* if table does not exist  */ 
   
      %put %str(NOTE: Creating table ...);
      
      data dm_dq.DQ_DRVT_INSTRUMENTTYPE
              (dbnull = (
                         INSTRUMENTTYPECD = YES
                         INSTRUMENTTYPE = YES));
         attrib INSTRUMENTTYPECD length = $3
            format = $3.
            informat = $3.
            label = 'INSTRUMENTTYPECD'; 
         attrib INSTRUMENTTYPE length = $100
            format = $100.
            informat = $100.
            label = 'INSTRUMENTTYPE'; 
         call missing(of _all_);
         stop;
      run;
      
      %rcSet(&syserr); 
      
   %end;  /* if table does not exist  */ 
   
   %let etls_recCheckExist = 0; 
   %let etls_targetHasRows = 0; 
   %macro etls_recordCheck; 
      %let etls_recCheckExist = %eval(%sysfunc(exist(dm_dq.DQ_DRVT_INSTRUMENTTYPE, DATA)) or 
            %sysfunc(exist(dm_dq.DQ_DRVT_INSTRUMENTTYPE, VIEW))); 
      
      %if (&etls_recCheckExist) %then
      %do;
         %local etls_syntaxcheck; 
         %let etls_syntaxcheck = %sysfunc(getoption(syntaxcheck)); 
         /* Turn off syntaxcheck option to perform following steps  */ 
         options nosyntaxcheck;
         
         data _null_; 
            set dm_dq.DQ_DRVT_INSTRUMENTTYPE( obs=1 ); 
            call symput("etls_targetHasRows",'1'); 
         run; 
         /* Reset syntaxcheck option to previous setting  */ 
         options &etls_syntaxcheck; 
      %end;
   %mend etls_recordCheck;
   %etls_recordCheck;
   
   
   %if (&etls_targetHasRows) %then 
   %do;  /* if has rows */ 
      proc sql ; 
         /* update existing records in the master table  */ 
         update dm_dq.DQ_DRVT_INSTRUMENTTYPE as m
            set INSTRUMENTTYPE = (select case when t.INSTRUMENTTYPE="" then m.INSTRUMENTTYPE else t.INSTRUMENTTYPE end from &etls_lastTable as t 
                                where m.INSTRUMENTTYPECD = t.INSTRUMENTTYPECD)
               where exists (select * from &etls_lastTable as t
                                   where m.INSTRUMENTTYPECD = t.INSTRUMENTTYPECD);
         
         /* create a temporary table of new records from the transaction table  */ 
         create table etls_newrecords as 
            select * 
               from &etls_lastTable as t 
                  where not exists 
                     (select * from dm_dq.DQ_DRVT_INSTRUMENTTYPE
                   as m 
                                      where m.INSTRUMENTTYPECD = t.INSTRUMENTTYPECD)
         ; 
         
      quit;
      
      %let etls_lastTable = &SYSLAST;
      
      %let etls_tableOptions = ; 
      
      %global etls_sql_pushDown;
      %let etls_sql_pushDown = &sys_sql_ip_all;
      
      %rcSet(&sqlrc); 
      
   %end; /* if has rows */ 
   
   /*---- Append  ----*/ 
   %put %str(NOTE: Appending data ...);
   
   proc append base = dm_dq.DQ_DRVT_INSTRUMENTTYPE 
      data = &etls_lastTable (&etls_tableOptions)  force ; 
    run; 
   
   %rcSet(&syserr); 
   
   proc datasets lib = work nolist nowarn memtype = (data view);
      delete etls_newrecords;
   quit;
   
%mend etls_loader;
%etls_loader;

%let etls_recnt = 0;
%macro etls_recordCheck; 
   %let etls_recCheckExist = %eval(%sysfunc(exist(dm_dq.DQ_DRVT_INSTRUMENTTYPE, DATA)) or 
         %sysfunc(exist(dm_dq.DQ_DRVT_INSTRUMENTTYPE, VIEW))); 
   
   %if (&etls_recCheckExist) %then
   %do;
      proc sql noprint;
         select count(*) into :etls_recnt from dm_dq.DQ_DRVT_INSTRUMENTTYPE;
      quit;
   %end;
%mend etls_recordCheck;
%etls_recordCheck;



/**  Step end Table Loader **/

/*==========================================================================* 
 * Step:            Append                                A5ELGGF9.AK00012U * 
 * Transform:       Append                                                  * 
 * Description:                                                             * 
 *                                                                          * 
 * Source Tables:   SQL Join - work.W1P6EJJ8A             A5ELGGF9.AF0000GI * 
 *                  SQL Join - work.W1P6EKLG5             A5ELGGF9.AF0000GK * 
 * Target Table:    Append - work.W1P7J7JK8               A5ELGGF9.AF0000GP * 
 *==========================================================================*/ 

%let transformID = %quote(A5ELGGF9.AK00012U);
%let trans_rc = 0;
%let etls_stepStartTime = %sysfunc(datetime(), datetime20.); 

%let etls_recCheckExist = 0; 
%let etls_recnt = 0; 
%macro etls_recordCheck; 
   %let etls_recCheckExist = %eval(%sysfunc(exist(work.W1P6EJJ8A, DATA)) or 
         %sysfunc(exist(work.W1P6EJJ8A, VIEW))); 
   
   %if (&etls_recCheckExist) %then
   %do;
      %local etls_syntaxcheck; 
      %let etls_syntaxcheck = %sysfunc(getoption(syntaxcheck)); 
      /* Turn off syntaxcheck option to perform following steps  */ 
      options nosyntaxcheck;
      
      proc contents data = work.W1P6EJJ8A out = work.etls_contents(keep = nobs) noprint; 
      run; 
      
      data _null_; 
         set work.etls_contents (obs = 1); 
         call symput("etls_recnt", left(put(nobs,32.))); 
      run;
      
      proc datasets lib = work nolist nowarn memtype = (data view);
         delete etls_contents;
      quit;
      
      /* Reset syntaxcheck option to previous setting  */ 
      options &etls_syntaxcheck; 
   %end;
%mend etls_recordCheck;
%etls_recordCheck;

%let dbxrc = %eval(%sysfunc(exist(work.W1P6EJJ8A, DATA)) or 
      %sysfunc(exist(work.W1P6EJJ8A, VIEW))); 

/*---- Map the columns  ----*/ 
proc datasets lib = work nolist nowarn memtype = (data view);
   delete WJ2Z6A2;
quit;

%put %str(NOTE: Mapping columns ...);
proc sql;
   create view work.WJ2Z6A2 as
      select
         ACCOUNT_RK,
         ACCOUNT_REGISTRATION_NM,
         ALTERNATE_ACCOUNT_NM,
         OPEN_DT,
         IRB_SRC_INSTRUMENT_ID,
         FINANCIAL_INSTRUMENT_TYPE_CD,
         SWAP_LEG_TYPE_CD,
         RESET_DT,
         VALID_FROM_DTTM,
         VALID_TO_DTTM,
         IRB_PAYMENT_DT,
         IRB_IRR_RATE_RESETS_ID,
         IRREGULAR_RATE_RESETS_RK
   from work.W1P6EJJ8A
   ;
quit;

%let SYSLAST = work.WJ2Z6A2;

%let dbxrc = %eval(%sysfunc(exist(work.W1P6EKLG5, DATA)) or 
      %sysfunc(exist(work.W1P6EKLG5, VIEW))); 

/*---- Map the columns  ----*/ 
proc datasets lib = work nolist nowarn memtype = (data view);
   delete WJ2Z6A6;
quit;

%put %str(NOTE: Mapping columns ...);
proc sql;
   create view work.WJ2Z6A6 as
      select
         ACCOUNT_RK,
         ACCOUNT_REGISTRATION_NM,
         ALTERNATE_ACCOUNT_NM,
         OPEN_DT,
         IRB_SRC_INSTRUMENT_ID,
         FINANCIAL_INSTRUMENT_TYPE_CD,
         SWAP_LEG_TYPE_CD,
         RESET_DT,
         VALID_FROM_DTTM,
         VALID_TO_DTTM,
         IRB_PAYMENT_DT,
         IRB_IRR_RATE_RESETS_ID,
         IRREGULAR_RATE_RESETS_RK
   from work.W1P6EKLG5
   ;
quit;

%let SYSLAST = work.WJ2Z6A6;

proc datasets lib = work nolist nowarn memtype = (data view);
   delete W1P7J7JK8;
quit;

data work.W1P7J7JK8 / view=work.W1P7J7JK8;
   set work.WJ2Z6A2
       work.WJ2Z6A6;
   keep ACCOUNT_RK ACCOUNT_REGISTRATION_NM ALTERNATE_ACCOUNT_NM OPEN_DT 
    IRB_SRC_INSTRUMENT_ID FINANCIAL_INSTRUMENT_TYPE_CD SWAP_LEG_TYPE_CD RESET_DT 
    VALID_FROM_DTTM VALID_TO_DTTM IRB_PAYMENT_DT IRB_IRR_RATE_RESETS_ID 
    IRREGULAR_RATE_RESETS_RK; 
run;

%rcSet(&syserr); 



/**  Step end Append **/

/*==========================================================================* 
 * Step:            User Written                          A5ELGGF9.AK00012V * 
 * Transform:       User Written                                            * 
 * Description:     Сбор статистики                                         * 
 *                                                                          * 
 * Source Tables:   Append - work.W1P7J7JK8               A5ELGGF9.AF0000GP * 
 *                  Append - work.W1P7B8YDK               A5ELGGF9.AF0000GM * 
 *                  ETL_JOB - etl_sys.ETL_JOB             A59S11RW.AE00001A * 
 * Target Table:    User Written - work.W1P7IGW93         A5ELGGF9.AF0000GQ * 
 *                                                                          * 
 * User Written:    SourceCode                                              * 
 *==========================================================================*/ 

%let transformID = %quote(A5ELGGF9.AK00012V);
%let trans_rc = 0;
%let etls_stepStartTime = %sysfunc(datetime(), datetime20.); 

%let etls_recnt = -1;
%let _INPUT_count = 3;
%let _INPUT = work.W1P7J7JK8;
%let _INPUT_connect = ;
%let _INPUT_engine = ;
%let _INPUT_memtype = VIEW;
%let _INPUT_options = %nrquote();
%let _INPUT_alter = %nrquote();
%let _INPUT_path = %nrquote(/Append_A5ELGGF9.AF0000GP%(WorkTable%));
%let _INPUT_type = 1;
%let _INPUT_label = %nrquote();

%let _INPUT1 = work.W1P7J7JK8;
%let _INPUT1_connect = ;
%let _INPUT1_engine = ;
%let _INPUT1_memtype = VIEW;
%let _INPUT1_options = %nrquote();
%let _INPUT1_alter = %nrquote();
%let _INPUT1_path = %nrquote(/Append_A5ELGGF9.AF0000GP%(WorkTable%));
%let _INPUT1_type = 1;
%let _INPUT1_label = %nrquote();

%let _INPUT2 = work.W1P7B8YDK;
%let _INPUT2_connect = ;
%let _INPUT2_engine = ;
%let _INPUT2_memtype = VIEW;
%let _INPUT2_options = %nrquote();
%let _INPUT2_alter = %nrquote();
%let _INPUT2_path = %nrquote(/Append_A5ELGGF9.AF0000GM%(WorkTable%));
%let _INPUT2_type = 1;
%let _INPUT2_label = %nrquote();

%let _INPUT3 = etl_sys.ETL_JOB;
%let _INPUT3_connect =  PATH=DWH.IMB.RU AUTHDOMAIN="OraAuth_ETL_SYS" 
;
%let _INPUT3_engine = ORACLE;
%let _INPUT3_memtype = DATA;
%let _INPUT3_options = %nrquote();
%let _INPUT3_alter = %nrquote();
%let _INPUT3_path = %nrquote(/DWH_DWHDDS_SYS/Tables/ETL_SYS/ETL_JOB%(Table%));
%let _INPUT3_type = 1;
%let _INPUT3_label = %nrquote();

%let _OUTPUT_count = 1;
%let _OUTPUT = work.W1P7IGW93;
%let _OUTPUT_connect = ;
%let _OUTPUT_engine = ;
%let _OUTPUT_memtype = DATA;
%let _OUTPUT_options = %nrquote();
%let _OUTPUT_alter = %nrquote();
%let _OUTPUT_path = %nrquote(/User Written_A5ELGGF9.AF0000GQ%(WorkTable%));
%let _OUTPUT_type = 1;
%let _OUTPUT_label = %nrquote();
/* List of target columns to keep  */ 
%let _OUTPUT_keep = REP_DT REP_ID PRC CNT_ALL CNT_ERR DWH_DT;
%let _OUTPUT_col_count = 6;
%let _OUTPUT_col0_name = REP_DT;
%let _OUTPUT_col0_table = work.W1P7IGW93;
%let _OUTPUT_col0_length = 8;
%let _OUTPUT_col0_type = ;
%let _OUTPUT_col0_format = DATETIME20.;
%let _OUTPUT_col0_informat = ;
%let _OUTPUT_col0_label = %nrquote();
%let _OUTPUT_col0_exp = ;
%let _OUTPUT_col0_input_count = 0;
%let _OUTPUT_col1_name = REP_ID;
%let _OUTPUT_col1_table = work.W1P7IGW93;
%let _OUTPUT_col1_length = 8;
%let _OUTPUT_col1_type = ;
%let _OUTPUT_col1_format = ;
%let _OUTPUT_col1_informat = ;
%let _OUTPUT_col1_label = %nrquote();
%let _OUTPUT_col1_exp = ;
%let _OUTPUT_col1_input_count = 0;
%let _OUTPUT_col2_name = PRC;
%let _OUTPUT_col2_table = work.W1P7IGW93;
%let _OUTPUT_col2_length = 8;
%let _OUTPUT_col2_type = ;
%let _OUTPUT_col2_format = ;
%let _OUTPUT_col2_informat = ;
%let _OUTPUT_col2_label = %nrquote();
%let _OUTPUT_col2_exp = ;
%let _OUTPUT_col2_input_count = 0;
%let _OUTPUT_col3_name = CNT_ALL;
%let _OUTPUT_col3_table = work.W1P7IGW93;
%let _OUTPUT_col3_length = 8;
%let _OUTPUT_col3_type = ;
%let _OUTPUT_col3_format = ;
%let _OUTPUT_col3_informat = ;
%let _OUTPUT_col3_label = %nrquote();
%let _OUTPUT_col3_exp = ;
%let _OUTPUT_col3_input_count = 0;
%let _OUTPUT_col4_name = CNT_ERR;
%let _OUTPUT_col4_table = work.W1P7IGW93;
%let _OUTPUT_col4_length = 8;
%let _OUTPUT_col4_type = ;
%let _OUTPUT_col4_format = ;
%let _OUTPUT_col4_informat = ;
%let _OUTPUT_col4_label = %nrquote();
%let _OUTPUT_col4_exp = ;
%let _OUTPUT_col4_input_count = 0;
%let _OUTPUT_col5_name = DWH_DT;
%let _OUTPUT_col5_table = work.W1P7IGW93;
%let _OUTPUT_col5_length = 8;
%let _OUTPUT_col5_type = ;
%let _OUTPUT_col5_format = DATETIME20.;
%let _OUTPUT_col5_informat = ;
%let _OUTPUT_col5_label = %nrquote();
%let _OUTPUT_col5_exp = ;
%let _OUTPUT_col5_input_count = 0;

%let _OUTPUT1 = work.W1P7IGW93;
%let _OUTPUT1_connect = ;
%let _OUTPUT1_engine = ;
%let _OUTPUT1_memtype = DATA;
%let _OUTPUT1_options = %nrquote();
%let _OUTPUT1_alter = %nrquote();
%let _OUTPUT1_path = %nrquote(/User Written_A5ELGGF9.AF0000GQ%(WorkTable%));
%let _OUTPUT1_type = 1;
%let _OUTPUT1_label = %nrquote();
/* List of target columns to keep  */ 
%let _OUTPUT1_keep = REP_DT REP_ID PRC CNT_ALL CNT_ERR DWH_DT;
%let _OUTPUT1_col_count = 6;
%let _OUTPUT1_col0_name = REP_DT;
%let _OUTPUT1_col0_table = work.W1P7IGW93;
%let _OUTPUT1_col0_length = 8;
%let _OUTPUT1_col0_type = ;
%let _OUTPUT1_col0_format = DATETIME20.;
%let _OUTPUT1_col0_informat = ;
%let _OUTPUT1_col0_label = %nrquote();
%let _OUTPUT1_col0_exp = ;
%let _OUTPUT1_col0_input_count = 0;
%let _OUTPUT1_col1_name = REP_ID;
%let _OUTPUT1_col1_table = work.W1P7IGW93;
%let _OUTPUT1_col1_length = 8;
%let _OUTPUT1_col1_type = ;
%let _OUTPUT1_col1_format = ;
%let _OUTPUT1_col1_informat = ;
%let _OUTPUT1_col1_label = %nrquote();
%let _OUTPUT1_col1_exp = ;
%let _OUTPUT1_col1_input_count = 0;
%let _OUTPUT1_col2_name = PRC;
%let _OUTPUT1_col2_table = work.W1P7IGW93;
%let _OUTPUT1_col2_length = 8;
%let _OUTPUT1_col2_type = ;
%let _OUTPUT1_col2_format = ;
%let _OUTPUT1_col2_informat = ;
%let _OUTPUT1_col2_label = %nrquote();
%let _OUTPUT1_col2_exp = ;
%let _OUTPUT1_col2_input_count = 0;
%let _OUTPUT1_col3_name = CNT_ALL;
%let _OUTPUT1_col3_table = work.W1P7IGW93;
%let _OUTPUT1_col3_length = 8;
%let _OUTPUT1_col3_type = ;
%let _OUTPUT1_col3_format = ;
%let _OUTPUT1_col3_informat = ;
%let _OUTPUT1_col3_label = %nrquote();
%let _OUTPUT1_col3_exp = ;
%let _OUTPUT1_col3_input_count = 0;
%let _OUTPUT1_col4_name = CNT_ERR;
%let _OUTPUT1_col4_table = work.W1P7IGW93;
%let _OUTPUT1_col4_length = 8;
%let _OUTPUT1_col4_type = ;
%let _OUTPUT1_col4_format = ;
%let _OUTPUT1_col4_informat = ;
%let _OUTPUT1_col4_label = %nrquote();
%let _OUTPUT1_col4_exp = ;
%let _OUTPUT1_col4_input_count = 0;
%let _OUTPUT1_col5_name = DWH_DT;
%let _OUTPUT1_col5_table = work.W1P7IGW93;
%let _OUTPUT1_col5_length = 8;
%let _OUTPUT1_col5_type = ;
%let _OUTPUT1_col5_format = DATETIME20.;
%let _OUTPUT1_col5_informat = ;
%let _OUTPUT1_col5_label = %nrquote();
%let _OUTPUT1_col5_exp = ;
%let _OUTPUT1_col5_input_count = 0;

/*---- Start of User Written Code  ----*/ 

proc sql;
/*Кол-во всех уникальных деривативных сделок*/
	select count(distinct IRREGULAR_RATE_RESETS_RK) into :CNT_ALL from &_INPUT1;
/*Кол-во ошибочных сделок*/
	select count(distinct ACCOUNT_RK) into :CNT_ERR from &_INPUT2;
/*Дата успешного выполнения процесса в DWH*/
	select end_dttm into :DWH_DT from &_INPUT3 where JOB_ID = (
  select MAX(job_id) 
  from &_INPUT3 
  where upper(job_nm) = '081_360_COMMIT_MIDAS_FIN_INSTR_FULL' and success_flg = 'Y'
  );
quit;
%error_check(mpStepType=SQL);

data &_OUTPUT1;
	attrib
		REP_DT length = 8 format = DATETIME20.
		REP_ID length = 8
		PRC length =8
		CNT_ALL length=8
		CNT_ERR length = 8
		DWH_DT length = 8 format = DATETIME20.
	;

	REP_DT = &REPDT.;
	REP_ID = 12;
	PRC = DIVIDE(&CNT_ERR. , &CNT_ALL.) * 100;
	if missing(PRC) then PRC=0;
	CNT_ALL = &CNT_ALL.;
	CNT_ERR = &CNT_ERR.;
	DWH_DT = "&DWH_DT."dt;
run;
%error_check(mpStepType=DATA);
/*---- End of User Written Code  ----*/ 

%rcSet(&syserr); 
%rcSet(&sqlrc); 


/**  Step end User Written **/

/*==========================================================================* 
 * Step:            Table Loader                          A5ELGGF9.AK00012W * 
 * Transform:       Table Loader (Version 2.1)                              * 
 * Description:                                                             * 
 *                                                                          * 
 * Source Table:    User Written - work.W1P7IGW93         A5ELGGF9.AF0000GQ * 
 * Target Table:    DQ_DRVT_REPORT_PRC -                  A5ELGGF9.AE00004E * 
 *                   dm_dq.DQ_DRVT_REPORT_PRC                               * 
 *==========================================================================*/ 

%let transformID = %quote(A5ELGGF9.AK00012W);
%let trans_rc = 0;
%let etls_stepStartTime = %sysfunc(datetime(), datetime20.); 

%let SYSLAST = %nrquote(work.W1P7IGW93); 

%let SYS_SQL_IP_SPEEDO = Y;
%let SYS_SQL_MAPPUTTO = sas_put;
%let SYS_SQLREDUCEPUT = DBMS;
%global etls_sql_pushDown;
%let etls_sql_pushDown = -1;
option DBIDIRECTEXEC;

%global etls_tableExist;
%global etls_numIndex;
%global etls_lastTable;
%let etls_tableExist = -1; 
%let etls_numIndex = -1; 
%let etls_lastTable = &SYSLAST; 

/*---- Define load data macro  ----*/ 

/* --------------------------------------------------------------
   Load Technique Selection: AppendToExisting - AppendProc
   Constraint and index action selections: 'ASIS','ASIS','ASIS','ASIS'
   Additional options selections... 
      Set unmapped to missing on updates: false 
   -------------------------------------------------------------- */
%macro etls_loader;

   %let etls_tableOptions = ;
   
   /*---- Map the columns  ----*/ 
   proc datasets lib = work nolist nowarn memtype = (data view);
      delete WJ2Z6JC;
   quit;
   
   %put %str(NOTE: Mapping columns ...);
   proc sql;
      create view work.WJ2Z6JC as
         select
            REP_DT   
               informat = DATETIME20.,
            REP_ID   
               format = 7.
               informat = 7.,
            PRC   
               format = 19.8
               informat = 19.8,
            CNT_ALL   
               format = 13.
               informat = 13.,
            CNT_ERR   
               format = 13.
               informat = 13.,
            DWH_DT   
               informat = DATETIME20.
      from &etls_lastTable
      ;
   quit;
   
   %let SYSLAST = work.WJ2Z6JC;
   
   %let etls_lastTable = &SYSLAST; 
   %let etls_tableOptions = ; 
   
   /* Determine if the target table exists  */ 
   %let etls_tableExist = %eval(%sysfunc(exist(dm_dq.DQ_DRVT_REPORT_PRC, DATA)) or 
         %sysfunc(exist(dm_dq.DQ_DRVT_REPORT_PRC, VIEW))); 
   
   /*---- Create a new table  ----*/ 
   %if (&etls_tableExist eq 0) %then 
   %do;  /* if table does not exist  */ 
   
      %put %str(NOTE: Creating table ...);
      
      data dm_dq.DQ_DRVT_REPORT_PRC
              (dbnull = (
                         REP_DT = NO
                         REP_ID = NO
                         PRC = YES
                         CNT_ALL = YES
                         CNT_ERR = YES
                         DWH_DT = YES));
         attrib REP_DT length = 8
            format = DATETIME20.
            informat = DATETIME20.
            label = 'REP_DT'; 
         attrib REP_ID length = 8
            format = 7.
            informat = 7.
            label = 'REP_ID'; 
         attrib PRC length = 8
            format = 19.8
            informat = 19.8
            label = 'PRC'; 
         attrib CNT_ALL length = 8
            format = 13.
            informat = 13.
            label = 'CNT_ALL'; 
         attrib CNT_ERR length = 8
            format = 13.
            informat = 13.
            label = 'CNT_ERR'; 
         attrib DWH_DT length = 8
            format = DATETIME20.
            informat = DATETIME20.
            label = 'DWH_DT'; 
         call missing(of _all_);
         stop;
      run;
      
      %rcSet(&syserr); 
      
   %end;  /* if table does not exist  */ 
   
   /*---- Append  ----*/ 
   %put %str(NOTE: Appending data ...);
   
   proc append base = dm_dq.DQ_DRVT_REPORT_PRC 
      data = &etls_lastTable (&etls_tableOptions)  force ; 
    run; 
   
   %rcSet(&syserr); 
   
   proc datasets lib = work nolist nowarn memtype = (data view);
      delete WJ2Z6JC;
   quit;
   
%mend etls_loader;
%etls_loader;

%let etls_recnt = 0;
%macro etls_recordCheck; 
   %let etls_recCheckExist = %eval(%sysfunc(exist(dm_dq.DQ_DRVT_REPORT_PRC, DATA)) or 
         %sysfunc(exist(dm_dq.DQ_DRVT_REPORT_PRC, VIEW))); 
   
   %if (&etls_recCheckExist) %then
   %do;
      proc sql noprint;
         select count(*) into :etls_recnt from dm_dq.DQ_DRVT_REPORT_PRC;
      quit;
   %end;
%mend etls_recordCheck;
%etls_recordCheck;



/**  Step end Table Loader **/

/*==========================================================================* 
 * Step:            Завершить модуль                      A5ELGGF9.AK00012X * 
 * Transform:       Завершить модуль                                        * 
 * Description:                                                             * 
 *==========================================================================*/ 

%let transformID = %quote(A5ELGGF9.AK00012X);
%let trans_rc = 0;
%let etls_stepStartTime = %sysfunc(datetime(), datetime20.); 

%let _INPUT_count = 0; 
%let _OUTPUT_count = 0; 


/*****************************************************************
* ВЕРСИЯ:
*   $Id: transform_job_finish.sas 247 2012-04-03 07:31:10Z nesterenok $
*
******************************************************************
* НАЗНАЧЕНИЕ:
*   Регистрирует конец модуля ETL.
*
* ПАРАМЕТРЫ:
*   нет
*
******************************************************************/

%macro transform_job_finish;

   /* Продолжаем модуль */
   %job_continue_reg(mpJobType=JOB, mpJobName=&ETLS_JobName., mpPostEvent=N);

   /* Завершаем модуль */
   %job_finish_reg(mpJobType=JOB);

%mend transform_job_finish;

%transform_job_finish;


%rcSet(&syserr); 
%rcSet(&sysrc); 
%rcSet(&sqlrc); 



/**  Step end Завершить модуль **/

%let etls_endTime = %sysfunc(datetime(),datetime.);



/**  Job end 202_120_Mart_DQ_DRVT_REP12 **/

/* Reset jobid and name */
%let jobID = %quote(A5ELGGF9.AH00003N);
%let etls_jobName = %nrquote(202_002_Stream_DQ_DRVT);

/**************************************************************************** 
 * Job:             202_130_Mart_DQ_DRVT_REP13            A5ELGGF9.AH00002J * 
 * Description:     Уникальность номера сделки MIDAS.                       * 
 *                                                                          * 
 * Metadata Server: bravo14                                                 * 
 * Port:            8561                                                    * 
 * Location:        /DWH_DMDQ_REP/Jobs/Includes/DQ_DRVT                     * 
 *                                                                          * 
 * Server:          SASApp                                A5C46MZY.AQ000002 * 
 *                                                                          * 
 * Source Tables:   ETL_JOB - etl_sys.ETL_JOB             A59S11RW.AE00001A * 
 *                  DLBHISPD_FULL - etl_stg.DLBHISPD_FULL A59ZTHAS.AF0000PP * 
 *                  DEALSDCA_DRVT_FULL -                  A59ZTHAS.AF0000PM * 
 *                   etl_stg.DEALSDCA_DRVT_FULL                             * 
 *                  DLCHISPD_DRVT_FULL -                  A59ZTHAS.AF0000PS * 
 *                   etl_stg.DLCHISPD_DRVT_FULL                             * 
 *                  DEALSDB_FULL - etl_stg.DEALSDB_FULL   A59ZTHAS.AF0000PJ * 
 * Target Tables:   DQ_DRVT_LOAD_13 -                     A5ELGGF9.AE00004D * 
 *                   dm_dq.DQ_DRVT_LOAD_13                                  * 
 *                  DQ_DRVT_REPORT_PRC -                  A5ELGGF9.AE00004E * 
 *                   dm_dq.DQ_DRVT_REPORT_PRC                               * 
 *                  DQ_DRVT_LOAD_13 -                     A5ELGGF9.AE00004D * 
 *                   dm_dq.DQ_DRVT_LOAD_13                                  * 
 *                  DQ_DRVT_REPORT_PRC -                  A5ELGGF9.AE00004E * 
 *                   dm_dq.DQ_DRVT_REPORT_PRC                               * 
 *                                                                          * 
 * Generated on:    16 Июль 2013 г. 17:46:23 MSD                            * 
 * Generated by:    sasdwh                                                  * 
 * Version:         SAS Data Integration Studio 4.5                         * 
 ****************************************************************************/ 

/* General macro variables  */ 
%let jobID = %quote(A5ELGGF9.AH00002J);
%let etls_jobName = %nrquote(202_130_Mart_DQ_DRVT_REP13);
%let etls_userID = %nrquote(sasdwh);


/* Create metadata macro variables */
%let IOMServer      = %nrquote(SASApp);
%let metaPort       = %nrquote(8561);
%let metaServer     = %nrquote(bravo14);

/* Set metadata options */
options metaport       = &metaPort 
        metaserver     = "&metaServer"; 

/* Setup for capturing job status  */ 
%let etls_startTime = %sysfunc(datetime(),datetime.);
%let etls_recordsBefore = 0;
%let etls_recordsAfter = 0;
%let etls_lib = 0;
%let etls_table = 0;

%global etls_debug; 
%macro etls_setDebug; 
   %if %str(&etls_debug) ne 0 %then 
      OPTIONS MPRINT%str(;); 
%mend; 
%etls_setDebug; 

/*---- Start of Pre-Process Code  ----*/ 

%LET REPDT=&DMDQ_REPORT_START_DTTM;
/*---- End of Pre-Process Code  ----*/ 

%rcSet(&syserr); 
%rcSet(&sqlrc); 

/*==========================================================================* 
 * Step:            Начать модуль                         A5ELGGF9.AK00012Y * 
 * Transform:       Начать модуль                                           * 
 * Description:                                                             * 
 *==========================================================================*/ 

%let transformID = %quote(A5ELGGF9.AK00012Y);
%let trans_rc = 0;
%let etls_stepStartTime = %sysfunc(datetime(), datetime20.); 

%let _INPUT_count = 0; 
%let _OUTPUT_count = 0; 


/*****************************************************************
* ВЕРСИЯ:
*   $Id: transform_job_start.sas 1747 2012-08-01 11:26:13Z nesterenok $
*
******************************************************************
* НАЗНАЧЕНИЕ:
*   Регистрирует начало модуля ETL.
*
* ПАРАМЕТРЫ:
*   нет
*
******************************************************************/

%macro transform_job_start;

   /* Продолжаем поток (или создаем новый) */
   %local lmvStreamName;
   %if %sysfunc(sysexist(LSB_JOBNAME)) %then
      %let lmvStreamName = %scan(%sysfunc(sysget(LSB_JOBNAME)), 3, :);
   %else
      %let lmvStreamName = ;

   %job_continue_reg(mpJobType=STREAM, mpJobName=&lmvStreamName, mpPostEvent=N, mpForcedStart=Y);

   /* Для DI, начинаем поток заново, если старый был начат не сегодня */
   %if %length(&lmvStreamName) eq 0 and &STREAM_START_DT ne %sysfunc(today()) %then %do;
      %job_start_reg(mpJobType=STREAM, mpParentJobId=, mpJobName=&lmvStreamName.);
   %end;

   /* Начинаем модуль */
   %job_start_reg(mpJobType=JOB, mpParentJobId=&STREAM_ID, mpJobName=&ETLS_JobName.);

%mend transform_job_start;

%transform_job_start;


%rcSet(&syserr); 
%rcSet(&sysrc); 
%rcSet(&sqlrc); 



/**  Step end Начать модуль **/

/*==========================================================================* 
 * Step:            Очистить таблицу                      A5ELGGF9.AK00012Z * 
 * Transform:       Очистить таблицу                                        * 
 * Description:                                                             * 
 *                                                                          * 
 * Target Table:    DQ_DRVT_LOAD_13 -                     A5ELGGF9.AE00004D * 
 *                   dm_dq.DQ_DRVT_LOAD_13                                  * 
 *==========================================================================*/ 

%let transformID = %quote(A5ELGGF9.AK00012Z);
%let trans_rc = 0;
%let etls_stepStartTime = %sysfunc(datetime(), datetime20.); 

%let _INPUT_count = 0; 
%let _OUTPUT_count = 1; 
%let _OUTPUT = dm_dq.DQ_DRVT_LOAD_13;
%let _OUTPUT_connect =  DEFER=YES PATH=DWH.IMB.RU AUTHDOMAIN="OraAuth_DM_DQ" 
;
%let _OUTPUT_engine = ORACLE;
%let _OUTPUT_memtype = DATA;
%let _OUTPUT_options = %nrquote();
%let _OUTPUT_alter = %nrquote();
%let _OUTPUT_path = %nrquote(/DWH_DMDQ_REP/Marts/DQ_DRVT/DQ_DRVT_LOAD_13%(Table%));
%let _OUTPUT_type = 1;
%let _OUTPUT_label = %nrquote();
/* List of target columns to keep  */ 
%let _OUTPUT_keep = REPORTDATE DEALNUMBER DEALTYPE DEALSUBTYPE DEALSTATUS DEALDATE;

%let tpOut = dm_dq.DQ_DRVT_LOAD_13;
%let tpOut_connect =  DEFER=YES PATH=DWH.IMB.RU AUTHDOMAIN="OraAuth_DM_DQ" 
;
%let tpOut_engine = ORACLE;
%let tpOut_memtype = DATA;
%let tpOut_options = %nrquote();
%let tpOut_alter = %nrquote();
%let tpOut_path = %nrquote(/DWH_DMDQ_REP/Marts/DQ_DRVT/DQ_DRVT_LOAD_13%(Table%));
%let tpOut_type = 1;
%let tpOut_label = %nrquote();
/* List of target columns to keep  */ 
%let tpOut_keep = REPORTDATE DEALNUMBER DEALTYPE DEALSUBTYPE DEALSTATUS DEALDATE;


%let tpWhere = %nrquote(REPORTDATE = &DMDQ_REPORT_START_DTTM);

/* List of target columns to keep  */ 
%let _keep = REPORTDATE DEALNUMBER DEALTYPE DEALSUBTYPE DEALSTATUS DEALDATE;
/* List of target columns to keep  */ 
%let keep = REPORTDATE DEALNUMBER DEALTYPE DEALSUBTYPE DEALSTATUS DEALDATE;
/*****************************************************************
* ВЕРСИЯ:
*   $Id: transform_table_delete.sas 2142 2012-08-17 14:15:09Z nesterenok $
*
******************************************************************
* НАЗНАЧЕНИЕ:
*   Удаляет из указанной таблицы записи.
*
* ПАРАМЕТРЫ:
*   tpOut                  + имя целевой таблицы, которая будет очищена
*   tpWhere                - условие отбора записей под удаление
*                            по умолчанию отсутствует, т.е. удаляются все записи
*
******************************************************************/

%macro transform_table_delete;

   /* Удаляем записи */
   /* TODO: truncate */
   proc sql;
      delete from &tpOut
      %if %length(&tpWhere) gt 0 %then %do;
         where (%unquote(&tpWhere))
      %end;
      ;
   quit;
   %error_check (mpStepType=SQL);

%mend transform_table_delete;

%transform_table_delete;


%rcSet(&syserr); 
%rcSet(&sysrc); 
%rcSet(&sqlrc); 



/**  Step end Очистить таблицу **/

/*==========================================================================* 
 * Step:            Очистить таблицу                      A5ELGGF9.AK000130 * 
 * Transform:       Очистить таблицу                                        * 
 * Description:                                                             * 
 *                                                                          * 
 * Target Table:    DQ_DRVT_REPORT_PRC -                  A5ELGGF9.AE00004E * 
 *                   dm_dq.DQ_DRVT_REPORT_PRC                               * 
 *==========================================================================*/ 

%let transformID = %quote(A5ELGGF9.AK000130);
%let trans_rc = 0;
%let etls_stepStartTime = %sysfunc(datetime(), datetime20.); 

%let _INPUT_count = 0; 
%let _OUTPUT_count = 1; 
%let _OUTPUT = dm_dq.DQ_DRVT_REPORT_PRC;
%let _OUTPUT_connect =  DEFER=YES PATH=DWH.IMB.RU AUTHDOMAIN="OraAuth_DM_DQ" 
;
%let _OUTPUT_engine = ORACLE;
%let _OUTPUT_memtype = DATA;
%let _OUTPUT_options = %nrquote();
%let _OUTPUT_alter = %nrquote();
%let _OUTPUT_path = %nrquote(/DWH_DMDQ_REP/Marts/DQ_DRVT/DQ_DRVT_REPORT_PRC%(Table%));
%let _OUTPUT_type = 1;
%let _OUTPUT_label = %nrquote();
/* List of target columns to keep  */ 
%let _OUTPUT_keep = REP_DT REP_ID PRC CNT_ALL CNT_ERR DWH_DT;

%let tpOut = dm_dq.DQ_DRVT_REPORT_PRC;
%let tpOut_connect =  DEFER=YES PATH=DWH.IMB.RU AUTHDOMAIN="OraAuth_DM_DQ" 
;
%let tpOut_engine = ORACLE;
%let tpOut_memtype = DATA;
%let tpOut_options = %nrquote();
%let tpOut_alter = %nrquote();
%let tpOut_path = %nrquote(/DWH_DMDQ_REP/Marts/DQ_DRVT/DQ_DRVT_REPORT_PRC%(Table%));
%let tpOut_type = 1;
%let tpOut_label = %nrquote();
/* List of target columns to keep  */ 
%let tpOut_keep = REP_DT REP_ID PRC CNT_ALL CNT_ERR DWH_DT;


%let tpWhere = %nrquote(REP_ID = 13 AND REP_DT = &DMDQ_REPORT_START_DTTM);

/* List of target columns to keep  */ 
%let _keep = REP_DT REP_ID PRC CNT_ALL CNT_ERR DWH_DT;
/* List of target columns to keep  */ 
%let keep = REP_DT REP_ID PRC CNT_ALL CNT_ERR DWH_DT;
/*****************************************************************
* ВЕРСИЯ:
*   $Id: transform_table_delete.sas 2142 2012-08-17 14:15:09Z nesterenok $
*
******************************************************************
* НАЗНАЧЕНИЕ:
*   Удаляет из указанной таблицы записи.
*
* ПАРАМЕТРЫ:
*   tpOut                  + имя целевой таблицы, которая будет очищена
*   tpWhere                - условие отбора записей под удаление
*                            по умолчанию отсутствует, т.е. удаляются все записи
*
******************************************************************/

%macro transform_table_delete;

   /* Удаляем записи */
   /* TODO: truncate */
   proc sql;
      delete from &tpOut
      %if %length(&tpWhere) gt 0 %then %do;
         where (%unquote(&tpWhere))
      %end;
      ;
   quit;
   %error_check (mpStepType=SQL);

%mend transform_table_delete;

%transform_table_delete;


%rcSet(&syserr); 
%rcSet(&sysrc); 
%rcSet(&sqlrc); 



/**  Step end Очистить таблицу **/

/*==========================================================================* 
 * Step:            Append                                A5ELGGF9.AK000131 * 
 * Transform:       Append                                                  * 
 * Description:                                                             * 
 *                                                                          * 
 * Source Tables:   DLBHISPD_FULL - etl_stg.DLBHISPD_FULL A59ZTHAS.AF0000PP * 
 *                  DEALSDCA_DRVT_FULL -                  A59ZTHAS.AF0000PM * 
 *                   etl_stg.DEALSDCA_DRVT_FULL                             * 
 *                  DLCHISPD_DRVT_FULL -                  A59ZTHAS.AF0000PS * 
 *                   etl_stg.DLCHISPD_DRVT_FULL                             * 
 *                  DEALSDB_FULL - etl_stg.DEALSDB_FULL   A59ZTHAS.AF0000PJ * 
 * Target Table:    Append - work.W9M3MKFH                A5ELGGF9.AF0000GR * 
 *==========================================================================*/ 

%let transformID = %quote(A5ELGGF9.AK000131);
%let trans_rc = 0;
%let etls_stepStartTime = %sysfunc(datetime(), datetime20.); 

%let etls_recnt = 0;
%macro etls_recordCheck; 
   %let etls_recCheckExist = %eval(%sysfunc(exist(etl_stg.DLBHISPD_FULL, DATA)) or 
         %sysfunc(exist(etl_stg.DLBHISPD_FULL, VIEW))); 
   
   %if (&etls_recCheckExist) %then
   %do;
      proc sql noprint;
         select count(*) into :etls_recnt from etl_stg.DLBHISPD_FULL;
      quit;
   %end;
%mend etls_recordCheck;
%etls_recordCheck;

%let dbxrc = %eval(%sysfunc(exist(etl_stg.DLBHISPD_FULL, DATA)) or 
      %sysfunc(exist(etl_stg.DLBHISPD_FULL, VIEW))); 

/*---- Map the columns  ----*/ 
proc datasets lib = work nolist nowarn memtype = (data view);
   delete WJ2Z8C6;
quit;

%put %str(NOTE: Mapping columns ...);
proc sql;
   create view work.WJ2Z8C6 as
      select
         RECI,
         DLNO,
         DTYP,
         DLST,
         DDAT
   from etl_stg.DLBHISPD_FULL
   ;
quit;

%let SYSLAST = work.WJ2Z8C6;

%let dbxrc = %eval(%sysfunc(exist(etl_stg.DEALSDCA_DRVT_FULL, DATA)) or 
      %sysfunc(exist(etl_stg.DEALSDCA_DRVT_FULL, VIEW))); 

/*---- Map the columns  ----*/ 
proc datasets lib = work nolist nowarn memtype = (data view);
   delete WJ2Z8C9;
quit;

%put %str(NOTE: Mapping columns ...);
proc sql;
   create view work.WJ2Z8C9 as
      select
         RECI,
         DLNO,
         DTYP,
         DLST,
         DDAT
   from etl_stg.DEALSDCA_DRVT_FULL
   ;
quit;

%let SYSLAST = work.WJ2Z8C9;

%let dbxrc = %eval(%sysfunc(exist(etl_stg.DLCHISPD_DRVT_FULL, DATA)) or 
      %sysfunc(exist(etl_stg.DLCHISPD_DRVT_FULL, VIEW))); 

/*---- Map the columns  ----*/ 
proc datasets lib = work nolist nowarn memtype = (data view);
   delete WJ2Z8CC;
quit;

%put %str(NOTE: Mapping columns ...);
proc sql;
   create view work.WJ2Z8CC as
      select
         RECI,
         DLNO,
         DTYP,
         DLST,
         DDAT
   from etl_stg.DLCHISPD_DRVT_FULL
   ;
quit;

%let SYSLAST = work.WJ2Z8CC;

%let dbxrc = %eval(%sysfunc(exist(etl_stg.DEALSDB_FULL, DATA)) or 
      %sysfunc(exist(etl_stg.DEALSDB_FULL, VIEW))); 

/*---- Map the columns  ----*/ 
proc datasets lib = work nolist nowarn memtype = (data view);
   delete WJ2Z8CF;
quit;

%put %str(NOTE: Mapping columns ...);
proc sql;
   create view work.WJ2Z8CF as
      select
         RECI,
         DLNO,
         DTYP,
         DLST,
         DDAT
   from etl_stg.DEALSDB_FULL
   ;
quit;

%let SYSLAST = work.WJ2Z8CF;

proc datasets lib = work nolist nowarn memtype = (data view);
   delete W9M3MKFH;
quit;

data work.W9M3MKFH;
   set work.WJ2Z8C6
       work.WJ2Z8C9
       work.WJ2Z8CC
       work.WJ2Z8CF;
   keep RECI DLNO DTYP DLST DDAT; 
run;

%rcSet(&syserr); 



/**  Step end Append **/

/*==========================================================================* 
 * Step:            User Written                          A5ELGGF9.AK000132 * 
 * Transform:       User Written                                            * 
 * Description:     Проверка условий DQ                                     * 
 *                                                                          * 
 * Source Table:    Append - work.W9M3MKFH                A5ELGGF9.AF0000GR * 
 * Target Table:    User Written - work.W1N8MR4N4         A5ELGGF9.AF0000GS * 
 *                                                                          * 
 * User Written:    SourceCode                                              * 
 *==========================================================================*/ 

%let transformID = %quote(A5ELGGF9.AK000132);
%let trans_rc = 0;
%let etls_stepStartTime = %sysfunc(datetime(), datetime20.); 

%let etls_recCheckExist = 0; 
%let etls_recnt = 0; 
%macro etls_recordCheck; 
   %let etls_recCheckExist = %eval(%sysfunc(exist(work.W9M3MKFH, DATA)) or 
         %sysfunc(exist(work.W9M3MKFH, VIEW))); 
   
   %if (&etls_recCheckExist) %then
   %do;
      %local etls_syntaxcheck; 
      %let etls_syntaxcheck = %sysfunc(getoption(syntaxcheck)); 
      /* Turn off syntaxcheck option to perform following steps  */ 
      options nosyntaxcheck;
      
      proc contents data = work.W9M3MKFH out = work.etls_contents(keep = nobs) noprint; 
      run; 
      
      data _null_; 
         set work.etls_contents (obs = 1); 
         call symput("etls_recnt", left(put(nobs,32.))); 
      run;
      
      proc datasets lib = work nolist nowarn memtype = (data view);
         delete etls_contents;
      quit;
      
      /* Reset syntaxcheck option to previous setting  */ 
      options &etls_syntaxcheck; 
   %end;
%mend etls_recordCheck;
%etls_recordCheck;

%let SYSLAST = %nrquote(work.W9M3MKFH); 

%let _INPUT_count = 1;
%let _INPUT = work.W9M3MKFH;
%let _INPUT_connect = ;
%let _INPUT_engine = ;
%let _INPUT_memtype = DATA;
%let _INPUT_options = %nrquote();
%let _INPUT_alter = %nrquote();
%let _INPUT_path = %nrquote(/Append_A5ELGGF9.AF0000GR%(WorkTable%));
%let _INPUT_type = 1;
%let _INPUT_label = %nrquote();

%let _INPUT1 = work.W9M3MKFH;
%let _INPUT1_connect = ;
%let _INPUT1_engine = ;
%let _INPUT1_memtype = DATA;
%let _INPUT1_options = %nrquote();
%let _INPUT1_alter = %nrquote();
%let _INPUT1_path = %nrquote(/Append_A5ELGGF9.AF0000GR%(WorkTable%));
%let _INPUT1_type = 1;
%let _INPUT1_label = %nrquote();

%let _OUTPUT_count = 1;
%let _OUTPUT = work.W1N8MR4N4;
%let _OUTPUT_connect = ;
%let _OUTPUT_engine = ;
%let _OUTPUT_memtype = DATA;
%let _OUTPUT_options = %nrquote();
%let _OUTPUT_alter = %nrquote();
%let _OUTPUT_path = %nrquote(/User Written_A5ELGGF9.AF0000GS%(WorkTable%));
%let _OUTPUT_type = 1;
%let _OUTPUT_label = %nrquote();
/* List of target columns to keep  */ 
%let _OUTPUT_keep = REPORTDATE DEALNUMBER DEALTYPE DEALSUBTYPE DEALDATE DEALSTATUS;
%let _OUTPUT_col_count = 6;
%let _OUTPUT_col0_name = REPORTDATE;
%let _OUTPUT_col0_table = work.W1N8MR4N4;
%let _OUTPUT_col0_length = 8;
%let _OUTPUT_col0_type = ;
%let _OUTPUT_col0_format = DATETIME20.;
%let _OUTPUT_col0_informat = DATETIME20.;
%let _OUTPUT_col0_label = %nrquote();
%let _OUTPUT_col0_exp = ;
%let _OUTPUT_col0_input_count = 0;
%let _OUTPUT_col1_name = DEALNUMBER;
%let _OUTPUT_col1_table = work.W1N8MR4N4;
%let _OUTPUT_col1_length = 8;
%let _OUTPUT_col1_type = ;
%let _OUTPUT_col1_format = 7.;
%let _OUTPUT_col1_informat = 7.;
%let _OUTPUT_col1_label = %nrquote(DLNO);
%let _OUTPUT_col1_exp = ;
%let _OUTPUT_col1_input_count = 0;
%let _OUTPUT_col2_name = DEALTYPE;
%let _OUTPUT_col2_table = work.W1N8MR4N4;
%let _OUTPUT_col2_length = 2;
%let _OUTPUT_col2_type = $;
%let _OUTPUT_col2_format = $2.;
%let _OUTPUT_col2_informat = $2.;
%let _OUTPUT_col2_label = %nrquote(DTYP);
%let _OUTPUT_col2_exp = ;
%let _OUTPUT_col2_input_count = 0;
%let _OUTPUT_col3_name = DEALSUBTYPE;
%let _OUTPUT_col3_table = work.W1N8MR4N4;
%let _OUTPUT_col3_length = 2;
%let _OUTPUT_col3_type = $;
%let _OUTPUT_col3_format = $2.;
%let _OUTPUT_col3_informat = $2.;
%let _OUTPUT_col3_label = %nrquote(DLST);
%let _OUTPUT_col3_exp = ;
%let _OUTPUT_col3_input_count = 0;
%let _OUTPUT_col4_name = DEALDATE;
%let _OUTPUT_col4_table = work.W1N8MR4N4;
%let _OUTPUT_col4_length = 8;
%let _OUTPUT_col4_type = ;
%let _OUTPUT_col4_format = DATETIME20.;
%let _OUTPUT_col4_informat = DATETIME20.;
%let _OUTPUT_col4_label = %nrquote(DDAT);
%let _OUTPUT_col4_exp = ;
%let _OUTPUT_col4_input_count = 0;
%let _OUTPUT_col5_name = DEALSTATUS;
%let _OUTPUT_col5_table = work.W1N8MR4N4;
%let _OUTPUT_col5_length = 1;
%let _OUTPUT_col5_type = $;
%let _OUTPUT_col5_format = $1.;
%let _OUTPUT_col5_informat = $1.;
%let _OUTPUT_col5_label = %nrquote(RECI);
%let _OUTPUT_col5_exp = ;
%let _OUTPUT_col5_input_count = 0;

%let _OUTPUT1 = work.W1N8MR4N4;
%let _OUTPUT1_connect = ;
%let _OUTPUT1_engine = ;
%let _OUTPUT1_memtype = DATA;
%let _OUTPUT1_options = %nrquote();
%let _OUTPUT1_alter = %nrquote();
%let _OUTPUT1_path = %nrquote(/User Written_A5ELGGF9.AF0000GS%(WorkTable%));
%let _OUTPUT1_type = 1;
%let _OUTPUT1_label = %nrquote();
/* List of target columns to keep  */ 
%let _OUTPUT1_keep = REPORTDATE DEALNUMBER DEALTYPE DEALSUBTYPE DEALDATE DEALSTATUS;
%let _OUTPUT1_col_count = 6;
%let _OUTPUT1_col0_name = REPORTDATE;
%let _OUTPUT1_col0_table = work.W1N8MR4N4;
%let _OUTPUT1_col0_length = 8;
%let _OUTPUT1_col0_type = ;
%let _OUTPUT1_col0_format = DATETIME20.;
%let _OUTPUT1_col0_informat = DATETIME20.;
%let _OUTPUT1_col0_label = %nrquote();
%let _OUTPUT1_col0_exp = ;
%let _OUTPUT1_col0_input_count = 0;
%let _OUTPUT1_col1_name = DEALNUMBER;
%let _OUTPUT1_col1_table = work.W1N8MR4N4;
%let _OUTPUT1_col1_length = 8;
%let _OUTPUT1_col1_type = ;
%let _OUTPUT1_col1_format = 7.;
%let _OUTPUT1_col1_informat = 7.;
%let _OUTPUT1_col1_label = %nrquote(DLNO);
%let _OUTPUT1_col1_exp = ;
%let _OUTPUT1_col1_input_count = 0;
%let _OUTPUT1_col2_name = DEALTYPE;
%let _OUTPUT1_col2_table = work.W1N8MR4N4;
%let _OUTPUT1_col2_length = 2;
%let _OUTPUT1_col2_type = $;
%let _OUTPUT1_col2_format = $2.;
%let _OUTPUT1_col2_informat = $2.;
%let _OUTPUT1_col2_label = %nrquote(DTYP);
%let _OUTPUT1_col2_exp = ;
%let _OUTPUT1_col2_input_count = 0;
%let _OUTPUT1_col3_name = DEALSUBTYPE;
%let _OUTPUT1_col3_table = work.W1N8MR4N4;
%let _OUTPUT1_col3_length = 2;
%let _OUTPUT1_col3_type = $;
%let _OUTPUT1_col3_format = $2.;
%let _OUTPUT1_col3_informat = $2.;
%let _OUTPUT1_col3_label = %nrquote(DLST);
%let _OUTPUT1_col3_exp = ;
%let _OUTPUT1_col3_input_count = 0;
%let _OUTPUT1_col4_name = DEALDATE;
%let _OUTPUT1_col4_table = work.W1N8MR4N4;
%let _OUTPUT1_col4_length = 8;
%let _OUTPUT1_col4_type = ;
%let _OUTPUT1_col4_format = DATETIME20.;
%let _OUTPUT1_col4_informat = DATETIME20.;
%let _OUTPUT1_col4_label = %nrquote(DDAT);
%let _OUTPUT1_col4_exp = ;
%let _OUTPUT1_col4_input_count = 0;
%let _OUTPUT1_col5_name = DEALSTATUS;
%let _OUTPUT1_col5_table = work.W1N8MR4N4;
%let _OUTPUT1_col5_length = 1;
%let _OUTPUT1_col5_type = $;
%let _OUTPUT1_col5_format = $1.;
%let _OUTPUT1_col5_informat = $1.;
%let _OUTPUT1_col5_label = %nrquote(RECI);
%let _OUTPUT1_col5_exp = ;
%let _OUTPUT1_col5_input_count = 0;

/*---- Start of User Written Code  ----*/ 


proc sort
	data = &_INPUT1;
	by DLNO;
quit;
%error_check(mpStepType=DATA);

data &_OUTPUT1;
	attrib
		REPORTDATE length = 8 format = DATETIME20. informat = DATETIME20.
		DEALNUMBER length = 8
		DEALTYPE length = $2 format = $2. informat = $2.
		DEALSUBTYPE length = $2 format = $2. informat = $2.
		DEALDATE  length = 8 format = DATETIME20. informat = DATETIME20.
		DEALSTATUS length = $1 format = $1. informat = $1.
	;
	set &_INPUT1 (rename = (DLNO = DEALNUMBER DTYP = DEALTYPE DLST = DEALSUBTYPE DDAT = DEALDATE RECI = DEALSTATUS));
	by DEALNUMBER;
	REPORTDATE = &REPDT;
	if (first.DEALNUMBER  ^= last.DEALNUMBER) then output;
run;
%error_check(mpStepType=DATA);
/*---- End of User Written Code  ----*/ 

%rcSet(&syserr); 
%rcSet(&sqlrc); 


/**  Step end User Written **/

/*==========================================================================* 
 * Step:            Table Loader                          A5ELGGF9.AK000133 * 
 * Transform:       Table Loader (Version 2.1)                              * 
 * Description:                                                             * 
 *                                                                          * 
 * Source Table:    User Written - work.W1N8MR4N4         A5ELGGF9.AF0000GS * 
 * Target Table:    DQ_DRVT_LOAD_13 -                     A5ELGGF9.AE00004D * 
 *                   dm_dq.DQ_DRVT_LOAD_13                                  * 
 *==========================================================================*/ 

%let transformID = %quote(A5ELGGF9.AK000133);
%let trans_rc = 0;
%let etls_stepStartTime = %sysfunc(datetime(), datetime20.); 

%let SYSLAST = %nrquote(work.W1N8MR4N4); 

%let SYS_SQL_IP_SPEEDO = Y;
%let SYS_SQL_MAPPUTTO = sas_put;
%let SYS_SQLREDUCEPUT = DBMS;
%global etls_sql_pushDown;
%let etls_sql_pushDown = -1;
option DBIDIRECTEXEC;

%global etls_tableExist;
%global etls_numIndex;
%global etls_lastTable;
%let etls_tableExist = -1; 
%let etls_numIndex = -1; 
%let etls_lastTable = &SYSLAST; 

/*---- Define load data macro  ----*/ 

/* --------------------------------------------------------------
   Load Technique Selection: AppendToExisting - AppendProc
   Constraint and index action selections: 'ASIS','ASIS','ASIS','ASIS'
   Additional options selections... 
      Set unmapped to missing on updates: false 
   -------------------------------------------------------------- */
%macro etls_loader;

   %let etls_tableOptions = ;
   
   /*---- Map the columns  ----*/ 
   proc datasets lib = work nolist nowarn memtype = (data view);
      delete WJ2Z8D9;
   quit;
   
   %put %str(NOTE: Mapping columns ...);
   proc sql;
      create view work.WJ2Z8D9 as
         select
            REPORTDATE,
            DEALNUMBER,
            DEALTYPE,
            DEALSUBTYPE,
            DEALSTATUS,
            DEALDATE
      from &etls_lastTable
      ;
   quit;
   
   %let SYSLAST = work.WJ2Z8D9;
   
   %let etls_lastTable = &SYSLAST; 
   %let etls_tableOptions = ; 
   
   /* Determine if the target table exists  */ 
   %let etls_tableExist = %eval(%sysfunc(exist(dm_dq.DQ_DRVT_LOAD_13, DATA)) or 
         %sysfunc(exist(dm_dq.DQ_DRVT_LOAD_13, VIEW))); 
   
   /*---- Create a new table  ----*/ 
   %if (&etls_tableExist eq 0) %then 
   %do;  /* if table does not exist  */ 
   
      %put %str(NOTE: Creating table ...);
      
      data dm_dq.DQ_DRVT_LOAD_13
              (dbnull = (
                         REPORTDATE = YES
                         DEALNUMBER = YES
                         DEALTYPE = YES
                         DEALSUBTYPE = YES
                         DEALSTATUS = YES
                         DEALDATE = YES));
         attrib REPORTDATE length = 8
            format = DATETIME20.
            informat = DATETIME20.
            label = 'REPORTDATE'; 
         attrib DEALNUMBER length = 8
            format = 7.
            informat = 7.
            label = 'DEALNUMBER'; 
         attrib DEALTYPE length = $2
            format = $2.
            informat = $2.
            label = 'DEALTYPE'; 
         attrib DEALSUBTYPE length = $2
            format = $2.
            informat = $2.
            label = 'DEALSUBTYPE'; 
         attrib DEALSTATUS length = $1
            format = $1.
            informat = $1.
            label = 'DEALSTATUS'; 
         attrib DEALDATE length = 8
            format = DATETIME20.
            informat = DATETIME20.
            label = 'DEALDATE'; 
         call missing(of _all_);
         stop;
      run;
      
      %rcSet(&syserr); 
      
   %end;  /* if table does not exist  */ 
   
   /*---- Append  ----*/ 
   %put %str(NOTE: Appending data ...);
   
   proc append base = dm_dq.DQ_DRVT_LOAD_13 
      data = &etls_lastTable (&etls_tableOptions)  force ; 
    run; 
   
   %rcSet(&syserr); 
   
   proc datasets lib = work nolist nowarn memtype = (data view);
      delete WJ2Z8D9;
   quit;
   
%mend etls_loader;
%etls_loader;

%let etls_recnt = 0;
%macro etls_recordCheck; 
   %let etls_recCheckExist = %eval(%sysfunc(exist(dm_dq.DQ_DRVT_LOAD_13, DATA)) or 
         %sysfunc(exist(dm_dq.DQ_DRVT_LOAD_13, VIEW))); 
   
   %if (&etls_recCheckExist) %then
   %do;
      proc sql noprint;
         select count(*) into :etls_recnt from dm_dq.DQ_DRVT_LOAD_13;
      quit;
   %end;
%mend etls_recordCheck;
%etls_recordCheck;



/**  Step end Table Loader **/

/*==========================================================================* 
 * Step:            User Written                          A5ELGGF9.AK000134 * 
 * Transform:       User Written                                            * 
 * Description:     Сбор статистики                                         * 
 *                                                                          * 
 * Source Tables:   Append - work.W9M3MKFH                A5ELGGF9.AF0000GR * 
 *                  User Written - work.W1N8MR4N4         A5ELGGF9.AF0000GS * 
 *                  ETL_JOB - etl_sys.ETL_JOB             A59S11RW.AE00001A * 
 * Target Table:    User Written - work.W1N8SQ5IO         A5ELGGF9.AF0000GT * 
 *                                                                          * 
 * User Written:    SourceCode                                              * 
 *==========================================================================*/ 

%let transformID = %quote(A5ELGGF9.AK000134);
%let trans_rc = 0;
%let etls_stepStartTime = %sysfunc(datetime(), datetime20.); 

%let etls_recCheckExist = 0; 
%let etls_recnt = 0; 
%macro etls_recordCheck; 
   %let etls_recCheckExist = %eval(%sysfunc(exist(work.W9M3MKFH, DATA)) or 
         %sysfunc(exist(work.W9M3MKFH, VIEW))); 
   
   %if (&etls_recCheckExist) %then
   %do;
      %local etls_syntaxcheck; 
      %let etls_syntaxcheck = %sysfunc(getoption(syntaxcheck)); 
      /* Turn off syntaxcheck option to perform following steps  */ 
      options nosyntaxcheck;
      
      proc contents data = work.W9M3MKFH out = work.etls_contents(keep = nobs) noprint; 
      run; 
      
      data _null_; 
         set work.etls_contents (obs = 1); 
         call symput("etls_recnt", left(put(nobs,32.))); 
      run;
      
      proc datasets lib = work nolist nowarn memtype = (data view);
         delete etls_contents;
      quit;
      
      /* Reset syntaxcheck option to previous setting  */ 
      options &etls_syntaxcheck; 
   %end;
%mend etls_recordCheck;
%etls_recordCheck;

%let _INPUT_count = 3;
%let _INPUT = work.W9M3MKFH;
%let _INPUT_connect = ;
%let _INPUT_engine = ;
%let _INPUT_memtype = DATA;
%let _INPUT_options = %nrquote();
%let _INPUT_alter = %nrquote();
%let _INPUT_path = %nrquote(/Append_A5ELGGF9.AF0000GR%(WorkTable%));
%let _INPUT_type = 1;
%let _INPUT_label = %nrquote();

%let _INPUT1 = work.W9M3MKFH;
%let _INPUT1_connect = ;
%let _INPUT1_engine = ;
%let _INPUT1_memtype = DATA;
%let _INPUT1_options = %nrquote();
%let _INPUT1_alter = %nrquote();
%let _INPUT1_path = %nrquote(/Append_A5ELGGF9.AF0000GR%(WorkTable%));
%let _INPUT1_type = 1;
%let _INPUT1_label = %nrquote();

%let _INPUT2 = work.W1N8MR4N4;
%let _INPUT2_connect = ;
%let _INPUT2_engine = ;
%let _INPUT2_memtype = DATA;
%let _INPUT2_options = %nrquote();
%let _INPUT2_alter = %nrquote();
%let _INPUT2_path = %nrquote(/User Written_A5ELGGF9.AF0000GS%(WorkTable%));
%let _INPUT2_type = 1;
%let _INPUT2_label = %nrquote();

%let _INPUT3 = etl_sys.ETL_JOB;
%let _INPUT3_connect =  PATH=DWH.IMB.RU AUTHDOMAIN="OraAuth_ETL_SYS" 
;
%let _INPUT3_engine = ORACLE;
%let _INPUT3_memtype = DATA;
%let _INPUT3_options = %nrquote();
%let _INPUT3_alter = %nrquote();
%let _INPUT3_path = %nrquote(/DWH_DWHDDS_SYS/Tables/ETL_SYS/ETL_JOB%(Table%));
%let _INPUT3_type = 1;
%let _INPUT3_label = %nrquote();

%let _OUTPUT_count = 1;
%let _OUTPUT = work.W1N8SQ5IO;
%let _OUTPUT_connect = ;
%let _OUTPUT_engine = ;
%let _OUTPUT_memtype = DATA;
%let _OUTPUT_options = %nrquote();
%let _OUTPUT_alter = %nrquote();
%let _OUTPUT_path = %nrquote(/User Written_A5ELGGF9.AF0000GT%(WorkTable%));
%let _OUTPUT_type = 1;
%let _OUTPUT_label = %nrquote();
/* List of target columns to keep  */ 
%let _OUTPUT_keep = REP_DT REP_ID PRC CNT_ALL CNT_ERR DWH_DT;
%let _OUTPUT_col_count = 6;
%let _OUTPUT_col0_name = REP_DT;
%let _OUTPUT_col0_table = work.W1N8SQ5IO;
%let _OUTPUT_col0_length = 8;
%let _OUTPUT_col0_type = ;
%let _OUTPUT_col0_format = DATETIME20.;
%let _OUTPUT_col0_informat = ;
%let _OUTPUT_col0_label = %nrquote();
%let _OUTPUT_col0_exp = ;
%let _OUTPUT_col0_input_count = 0;
%let _OUTPUT_col1_name = REP_ID;
%let _OUTPUT_col1_table = work.W1N8SQ5IO;
%let _OUTPUT_col1_length = 8;
%let _OUTPUT_col1_type = ;
%let _OUTPUT_col1_format = ;
%let _OUTPUT_col1_informat = ;
%let _OUTPUT_col1_label = %nrquote();
%let _OUTPUT_col1_exp = ;
%let _OUTPUT_col1_input_count = 0;
%let _OUTPUT_col2_name = PRC;
%let _OUTPUT_col2_table = work.W1N8SQ5IO;
%let _OUTPUT_col2_length = 8;
%let _OUTPUT_col2_type = ;
%let _OUTPUT_col2_format = ;
%let _OUTPUT_col2_informat = ;
%let _OUTPUT_col2_label = %nrquote();
%let _OUTPUT_col2_exp = ;
%let _OUTPUT_col2_input_count = 0;
%let _OUTPUT_col3_name = CNT_ALL;
%let _OUTPUT_col3_table = work.W1N8SQ5IO;
%let _OUTPUT_col3_length = 8;
%let _OUTPUT_col3_type = ;
%let _OUTPUT_col3_format = ;
%let _OUTPUT_col3_informat = ;
%let _OUTPUT_col3_label = %nrquote();
%let _OUTPUT_col3_exp = ;
%let _OUTPUT_col3_input_count = 0;
%let _OUTPUT_col4_name = CNT_ERR;
%let _OUTPUT_col4_table = work.W1N8SQ5IO;
%let _OUTPUT_col4_length = 8;
%let _OUTPUT_col4_type = ;
%let _OUTPUT_col4_format = ;
%let _OUTPUT_col4_informat = ;
%let _OUTPUT_col4_label = %nrquote();
%let _OUTPUT_col4_exp = ;
%let _OUTPUT_col4_input_count = 0;
%let _OUTPUT_col5_name = DWH_DT;
%let _OUTPUT_col5_table = work.W1N8SQ5IO;
%let _OUTPUT_col5_length = 8;
%let _OUTPUT_col5_type = ;
%let _OUTPUT_col5_format = DATETIME20.;
%let _OUTPUT_col5_informat = ;
%let _OUTPUT_col5_label = %nrquote();
%let _OUTPUT_col5_exp = ;
%let _OUTPUT_col5_input_count = 0;

%let _OUTPUT1 = work.W1N8SQ5IO;
%let _OUTPUT1_connect = ;
%let _OUTPUT1_engine = ;
%let _OUTPUT1_memtype = DATA;
%let _OUTPUT1_options = %nrquote();
%let _OUTPUT1_alter = %nrquote();
%let _OUTPUT1_path = %nrquote(/User Written_A5ELGGF9.AF0000GT%(WorkTable%));
%let _OUTPUT1_type = 1;
%let _OUTPUT1_label = %nrquote();
/* List of target columns to keep  */ 
%let _OUTPUT1_keep = REP_DT REP_ID PRC CNT_ALL CNT_ERR DWH_DT;
%let _OUTPUT1_col_count = 6;
%let _OUTPUT1_col0_name = REP_DT;
%let _OUTPUT1_col0_table = work.W1N8SQ5IO;
%let _OUTPUT1_col0_length = 8;
%let _OUTPUT1_col0_type = ;
%let _OUTPUT1_col0_format = DATETIME20.;
%let _OUTPUT1_col0_informat = ;
%let _OUTPUT1_col0_label = %nrquote();
%let _OUTPUT1_col0_exp = ;
%let _OUTPUT1_col0_input_count = 0;
%let _OUTPUT1_col1_name = REP_ID;
%let _OUTPUT1_col1_table = work.W1N8SQ5IO;
%let _OUTPUT1_col1_length = 8;
%let _OUTPUT1_col1_type = ;
%let _OUTPUT1_col1_format = ;
%let _OUTPUT1_col1_informat = ;
%let _OUTPUT1_col1_label = %nrquote();
%let _OUTPUT1_col1_exp = ;
%let _OUTPUT1_col1_input_count = 0;
%let _OUTPUT1_col2_name = PRC;
%let _OUTPUT1_col2_table = work.W1N8SQ5IO;
%let _OUTPUT1_col2_length = 8;
%let _OUTPUT1_col2_type = ;
%let _OUTPUT1_col2_format = ;
%let _OUTPUT1_col2_informat = ;
%let _OUTPUT1_col2_label = %nrquote();
%let _OUTPUT1_col2_exp = ;
%let _OUTPUT1_col2_input_count = 0;
%let _OUTPUT1_col3_name = CNT_ALL;
%let _OUTPUT1_col3_table = work.W1N8SQ5IO;
%let _OUTPUT1_col3_length = 8;
%let _OUTPUT1_col3_type = ;
%let _OUTPUT1_col3_format = ;
%let _OUTPUT1_col3_informat = ;
%let _OUTPUT1_col3_label = %nrquote();
%let _OUTPUT1_col3_exp = ;
%let _OUTPUT1_col3_input_count = 0;
%let _OUTPUT1_col4_name = CNT_ERR;
%let _OUTPUT1_col4_table = work.W1N8SQ5IO;
%let _OUTPUT1_col4_length = 8;
%let _OUTPUT1_col4_type = ;
%let _OUTPUT1_col4_format = ;
%let _OUTPUT1_col4_informat = ;
%let _OUTPUT1_col4_label = %nrquote();
%let _OUTPUT1_col4_exp = ;
%let _OUTPUT1_col4_input_count = 0;
%let _OUTPUT1_col5_name = DWH_DT;
%let _OUTPUT1_col5_table = work.W1N8SQ5IO;
%let _OUTPUT1_col5_length = 8;
%let _OUTPUT1_col5_type = ;
%let _OUTPUT1_col5_format = DATETIME20.;
%let _OUTPUT1_col5_informat = ;
%let _OUTPUT1_col5_label = %nrquote();
%let _OUTPUT1_col5_exp = ;
%let _OUTPUT1_col5_input_count = 0;

/*---- Start of User Written Code  ----*/ 

proc sql;
/*Кол-во всех уникальных деривативных сделок*/
	select count(DLNO) into :CNT_ALL from &_INPUT1;
/*Кол-во ошибочных сделок*/
	select count(*) into :CNT_ERR from &_INPUT2;
/*Дата успешного выполнения процесса в DWH*/
	select end_dttm into :DWH_DT from &_INPUT3 where JOB_ID = (
  select MAX(job_id) 
  from &_INPUT3 
  where upper(job_nm) = '021_283002_STAGE_MIDAS_DEALSDCA_DRVT_FULL' and success_flg = 'Y'
  );
quit;
%error_check(mpStepType=SQL);

data &_OUTPUT1;
	attrib
		REP_DT length = 8 format = DATETIME20.
		REP_ID length = 8
		PRC length =8
		CNT_ALL length=8
		CNT_ERR length = 8
		DWH_DT length = 8 format = DATETIME20.
	;

	REP_DT = &REPDT.;
	REP_ID = 13;
	PRC = DIVIDE(&CNT_ERR. , &CNT_ALL.) * 100;
	if missing(PRC) then PRC=0;
	CNT_ALL = &CNT_ALL.;
	CNT_ERR = &CNT_ERR.;
	DWH_DT = "&DWH_DT."dt;
run;
%error_check(mpStepType=DATA);

/*---- End of User Written Code  ----*/ 

%rcSet(&syserr); 
%rcSet(&sqlrc); 


/**  Step end User Written **/

/*==========================================================================* 
 * Step:            Table Loader                          A5ELGGF9.AK000135 * 
 * Transform:       Table Loader (Version 2.1)                              * 
 * Description:                                                             * 
 *                                                                          * 
 * Source Table:    User Written - work.W1N8SQ5IO         A5ELGGF9.AF0000GT * 
 * Target Table:    DQ_DRVT_REPORT_PRC -                  A5ELGGF9.AE00004E * 
 *                   dm_dq.DQ_DRVT_REPORT_PRC                               * 
 *==========================================================================*/ 

%let transformID = %quote(A5ELGGF9.AK000135);
%let trans_rc = 0;
%let etls_stepStartTime = %sysfunc(datetime(), datetime20.); 

%let SYSLAST = %nrquote(work.W1N8SQ5IO); 

%let SYS_SQL_IP_SPEEDO = Y;
%let SYS_SQL_MAPPUTTO = sas_put;
%let SYS_SQLREDUCEPUT = DBMS;
%global etls_sql_pushDown;
%let etls_sql_pushDown = -1;
option DBIDIRECTEXEC;

%global etls_tableExist;
%global etls_numIndex;
%global etls_lastTable;
%let etls_tableExist = -1; 
%let etls_numIndex = -1; 
%let etls_lastTable = &SYSLAST; 

/*---- Define load data macro  ----*/ 

/* --------------------------------------------------------------
   Load Technique Selection: AppendToExisting - AppendProc
   Constraint and index action selections: 'ASIS','ASIS','ASIS','ASIS'
   Additional options selections... 
      Set unmapped to missing on updates: false 
   -------------------------------------------------------------- */
%macro etls_loader;

   %let etls_tableOptions = ;
   
   /*---- Map the columns  ----*/ 
   proc datasets lib = work nolist nowarn memtype = (data view);
      delete WJ2Z8M5;
   quit;
   
   %put %str(NOTE: Mapping columns ...);
   proc sql;
      create view work.WJ2Z8M5 as
         select
            REP_DT   
               informat = DATETIME20.,
            REP_ID   
               format = 7.
               informat = 7.,
            PRC   
               format = 19.8
               informat = 19.8,
            CNT_ALL   
               format = 13.
               informat = 13.,
            CNT_ERR   
               format = 13.
               informat = 13.,
            DWH_DT   
               informat = DATETIME20.
      from &etls_lastTable
      ;
   quit;
   
   %let SYSLAST = work.WJ2Z8M5;
   
   %let etls_lastTable = &SYSLAST; 
   %let etls_tableOptions = ; 
   
   /* Determine if the target table exists  */ 
   %let etls_tableExist = %eval(%sysfunc(exist(dm_dq.DQ_DRVT_REPORT_PRC, DATA)) or 
         %sysfunc(exist(dm_dq.DQ_DRVT_REPORT_PRC, VIEW))); 
   
   /*---- Create a new table  ----*/ 
   %if (&etls_tableExist eq 0) %then 
   %do;  /* if table does not exist  */ 
   
      %put %str(NOTE: Creating table ...);
      
      data dm_dq.DQ_DRVT_REPORT_PRC
              (dbnull = (
                         REP_DT = NO
                         REP_ID = NO
                         PRC = YES
                         CNT_ALL = YES
                         CNT_ERR = YES
                         DWH_DT = YES));
         attrib REP_DT length = 8
            format = DATETIME20.
            informat = DATETIME20.
            label = 'REP_DT'; 
         attrib REP_ID length = 8
            format = 7.
            informat = 7.
            label = 'REP_ID'; 
         attrib PRC length = 8
            format = 19.8
            informat = 19.8
            label = 'PRC'; 
         attrib CNT_ALL length = 8
            format = 13.
            informat = 13.
            label = 'CNT_ALL'; 
         attrib CNT_ERR length = 8
            format = 13.
            informat = 13.
            label = 'CNT_ERR'; 
         attrib DWH_DT length = 8
            format = DATETIME20.
            informat = DATETIME20.
            label = 'DWH_DT'; 
         call missing(of _all_);
         stop;
      run;
      
      %rcSet(&syserr); 
      
   %end;  /* if table does not exist  */ 
   
   /*---- Append  ----*/ 
   %put %str(NOTE: Appending data ...);
   
   proc append base = dm_dq.DQ_DRVT_REPORT_PRC 
      data = &etls_lastTable (&etls_tableOptions)  force ; 
    run; 
   
   %rcSet(&syserr); 
   
   proc datasets lib = work nolist nowarn memtype = (data view);
      delete WJ2Z8M5;
   quit;
   
%mend etls_loader;
%etls_loader;

%let etls_recnt = 0;
%macro etls_recordCheck; 
   %let etls_recCheckExist = %eval(%sysfunc(exist(dm_dq.DQ_DRVT_REPORT_PRC, DATA)) or 
         %sysfunc(exist(dm_dq.DQ_DRVT_REPORT_PRC, VIEW))); 
   
   %if (&etls_recCheckExist) %then
   %do;
      proc sql noprint;
         select count(*) into :etls_recnt from dm_dq.DQ_DRVT_REPORT_PRC;
      quit;
   %end;
%mend etls_recordCheck;
%etls_recordCheck;



/**  Step end Table Loader **/

/*==========================================================================* 
 * Step:            Завершить модуль                      A5ELGGF9.AK000136 * 
 * Transform:       Завершить модуль                                        * 
 * Description:                                                             * 
 *==========================================================================*/ 

%let transformID = %quote(A5ELGGF9.AK000136);
%let trans_rc = 0;
%let etls_stepStartTime = %sysfunc(datetime(), datetime20.); 

%let _INPUT_count = 0; 
%let _OUTPUT_count = 0; 


/*****************************************************************
* ВЕРСИЯ:
*   $Id: transform_job_finish.sas 247 2012-04-03 07:31:10Z nesterenok $
*
******************************************************************
* НАЗНАЧЕНИЕ:
*   Регистрирует конец модуля ETL.
*
* ПАРАМЕТРЫ:
*   нет
*
******************************************************************/

%macro transform_job_finish;

   /* Продолжаем модуль */
   %job_continue_reg(mpJobType=JOB, mpJobName=&ETLS_JobName., mpPostEvent=N);

   /* Завершаем модуль */
   %job_finish_reg(mpJobType=JOB);

%mend transform_job_finish;

%transform_job_finish;


%rcSet(&syserr); 
%rcSet(&sysrc); 
%rcSet(&sqlrc); 



/**  Step end Завершить модуль **/

%let etls_endTime = %sysfunc(datetime(),datetime.);



/**  Job end 202_130_Mart_DQ_DRVT_REP13 **/

/* Reset jobid and name */
%let jobID = %quote(A5ELGGF9.AH00003N);
%let etls_jobName = %nrquote(202_002_Stream_DQ_DRVT);

/**************************************************************************** 
 * Job:             202_140_Mart_DQ_DRVT_REP14            A5ELGGF9.AH00002K * 
 * Description:     Выгрузка новых сделок.                                  * 
 *                                                                          * 
 * Metadata Server: bravo14                                                 * 
 * Port:            8561                                                    * 
 * Location:        /DWH_DMDQ_REP/Jobs/Includes/DQ_DRVT                     * 
 *                                                                          * 
 * Server:          SASApp                                A5C46MZY.AQ000002 * 
 *                                                                          * 
 * Source Tables:   FINANCIAL_ACCOUNT -                   A569C89V.AE0000FK * 
 *                   dwh_dds.FINANCIAL_ACCOUNT                              * 
 *                  FINANCIAL_INSTRUMENT_TYPE -           A569C89V.AE0000FZ * 
 *                   dwh_dds.FINANCIAL_INSTRUMENT_TYPE                      * 
 *                  FINANCIAL_INSTRUMENT_ASSOC -          A569C89V.AE0000FW * 
 *                   dwh_dds.FINANCIAL_INSTRUMENT_ASSOC                     * 
 *                  FINANCIAL_INSTRUMENT -                A569C89V.AE0000FV * 
 *                   dwh_dds.FINANCIAL_INSTRUMENT                           * 
 *                  FINANCIAL_ACCOUNT_ASSOC -             A569C89V.AE0000FL * 
 *                   dwh_dds.FINANCIAL_ACCOUNT_ASSOC                        * 
 *                  FINANCIAL_INSTRUMENT_ASSOC -          A569C89V.AE0000FW * 
 *                   dwh_dds.FINANCIAL_INSTRUMENT_ASSOC                     * 
 *                  FINANCIAL_INSTRUMENT -                A569C89V.AE0000FV * 
 *                   dwh_dds.FINANCIAL_INSTRUMENT                           * 
 *                  FINANCIAL_ACCOUNT -                   A569C89V.AE0000FK * 
 *                   dwh_dds.FINANCIAL_ACCOUNT                              * 
 *                  IRB_FINANCIAL_ACCOUNT_JRNL -          A569C89V.AE0000I5 * 
 *                   dwh_dds.IRB_FINANCIAL_ACCOUNT_JRNL                     * 
 * Target Tables:   DQ_DRVT_DWH_DM - dm_dq.DQ_DRVT_DWH_DM A5ELGGF9.AE000049 * 
 *                  DQ_DRVT_INSTRUMENTTYPE -              A5ELGGF9.AE00004A * 
 *                   dm_dq.DQ_DRVT_INSTRUMENTTYPE                           * 
 *                  DQ_DRVT_DWH_DM - dm_dq.DQ_DRVT_DWH_DM A5ELGGF9.AE000049 * 
 *                                                                          * 
 * Generated on:    16 Июль 2013 г. 17:46:23 MSD                            * 
 * Generated by:    sasdwh                                                  * 
 * Version:         SAS Data Integration Studio 4.5                         * 
 ****************************************************************************/ 

/* General macro variables  */ 
%let jobID = %quote(A5ELGGF9.AH00002K);
%let etls_jobName = %nrquote(202_140_Mart_DQ_DRVT_REP14);
%let etls_userID = %nrquote(sasdwh);


/* Create metadata macro variables */
%let IOMServer      = %nrquote(SASApp);
%let metaPort       = %nrquote(8561);
%let metaServer     = %nrquote(bravo14);

/* Set metadata options */
options metaport       = &metaPort 
        metaserver     = "&metaServer"; 

/* Setup for capturing job status  */ 
%let etls_startTime = %sysfunc(datetime(),datetime.);
%let etls_recordsBefore = 0;
%let etls_recordsAfter = 0;
%let etls_lib = 0;
%let etls_table = 0;

%global etls_debug; 
%macro etls_setDebug; 
   %if %str(&etls_debug) ne 0 %then 
      OPTIONS MPRINT%str(;); 
%mend; 
%etls_setDebug; 

/*---- Start of Pre-Process Code  ----*/ 

%LET REPDT=&DMDQ_REPORT_START_DTTM;
/*---- End of Pre-Process Code  ----*/ 

%rcSet(&syserr); 
%rcSet(&sqlrc); 

/*==========================================================================* 
 * Step:            Начать модуль                         A5ELGGF9.AK000137 * 
 * Transform:       Начать модуль                                           * 
 * Description:                                                             * 
 *==========================================================================*/ 

%let transformID = %quote(A5ELGGF9.AK000137);
%let trans_rc = 0;
%let etls_stepStartTime = %sysfunc(datetime(), datetime20.); 

%let _INPUT_count = 0; 
%let _OUTPUT_count = 0; 


/*****************************************************************
* ВЕРСИЯ:
*   $Id: transform_job_start.sas 1747 2012-08-01 11:26:13Z nesterenok $
*
******************************************************************
* НАЗНАЧЕНИЕ:
*   Регистрирует начало модуля ETL.
*
* ПАРАМЕТРЫ:
*   нет
*
******************************************************************/

%macro transform_job_start;

   /* Продолжаем поток (или создаем новый) */
   %local lmvStreamName;
   %if %sysfunc(sysexist(LSB_JOBNAME)) %then
      %let lmvStreamName = %scan(%sysfunc(sysget(LSB_JOBNAME)), 3, :);
   %else
      %let lmvStreamName = ;

   %job_continue_reg(mpJobType=STREAM, mpJobName=&lmvStreamName, mpPostEvent=N, mpForcedStart=Y);

   /* Для DI, начинаем поток заново, если старый был начат не сегодня */
   %if %length(&lmvStreamName) eq 0 and &STREAM_START_DT ne %sysfunc(today()) %then %do;
      %job_start_reg(mpJobType=STREAM, mpParentJobId=, mpJobName=&lmvStreamName.);
   %end;

   /* Начинаем модуль */
   %job_start_reg(mpJobType=JOB, mpParentJobId=&STREAM_ID, mpJobName=&ETLS_JobName.);

%mend transform_job_start;

%transform_job_start;


%rcSet(&syserr); 
%rcSet(&sysrc); 
%rcSet(&sqlrc); 



/**  Step end Начать модуль **/

/*==========================================================================* 
 * Step:            Очистить таблицу                      A5ELGGF9.AK000138 * 
 * Transform:       Очистить таблицу                                        * 
 * Description:                                                             * 
 *                                                                          * 
 * Target Table:    DQ_DRVT_DWH_DM - dm_dq.DQ_DRVT_DWH_DM A5ELGGF9.AE000049 * 
 *==========================================================================*/ 

%let transformID = %quote(A5ELGGF9.AK000138);
%let trans_rc = 0;
%let etls_stepStartTime = %sysfunc(datetime(), datetime20.); 

%let _INPUT_count = 0; 
%let _OUTPUT_count = 1; 
%let _OUTPUT = dm_dq.DQ_DRVT_DWH_DM;
%let _OUTPUT_connect =  DEFER=YES PATH=DWH.IMB.RU AUTHDOMAIN="OraAuth_DM_DQ" 
;
%let _OUTPUT_engine = ORACLE;
%let _OUTPUT_memtype = DATA;
%let _OUTPUT_options = %nrquote();
%let _OUTPUT_alter = %nrquote();
%let _OUTPUT_path = %nrquote(/DWH_DMDQ_REP/Marts/DQ_DRVT/DQ_DRVT_DWH_DM%(Table%));
%let _OUTPUT_type = 1;
%let _OUTPUT_label = %nrquote();
/* List of target columns to keep  */ 
%let _OUTPUT_keep = REPORTCODE REPORTDATE FRONTKDEALID FRONTFDEALID DEALID 
        INSTRUMENTTYPECD DEALDATE ADDITIONALINFORMATION STARTDATE NEXTDATE 
        ENDDATE LEGNUMBER VALUEFRS VALUESEC;

%let tpOut = dm_dq.DQ_DRVT_DWH_DM;
%let tpOut_connect =  DEFER=YES PATH=DWH.IMB.RU AUTHDOMAIN="OraAuth_DM_DQ" 
;
%let tpOut_engine = ORACLE;
%let tpOut_memtype = DATA;
%let tpOut_options = %nrquote();
%let tpOut_alter = %nrquote();
%let tpOut_path = %nrquote(/DWH_DMDQ_REP/Marts/DQ_DRVT/DQ_DRVT_DWH_DM%(Table%));
%let tpOut_type = 1;
%let tpOut_label = %nrquote();
/* List of target columns to keep  */ 
%let tpOut_keep = REPORTCODE REPORTDATE FRONTKDEALID FRONTFDEALID DEALID 
        INSTRUMENTTYPECD DEALDATE ADDITIONALINFORMATION STARTDATE NEXTDATE 
        ENDDATE LEGNUMBER VALUEFRS VALUESEC;


%let tpWhere = %nrquote(REPORTCODE = %'П-14%' AND REPORTDATE = &DMDQ_REPORT_START_DTTM);

/* List of target columns to keep  */ 
%let _keep = REPORTCODE REPORTDATE FRONTKDEALID FRONTFDEALID DEALID 
        INSTRUMENTTYPECD DEALDATE ADDITIONALINFORMATION STARTDATE NEXTDATE 
        ENDDATE LEGNUMBER VALUEFRS VALUESEC;
/* List of target columns to keep  */ 
%let keep = REPORTCODE REPORTDATE FRONTKDEALID FRONTFDEALID DEALID 
        INSTRUMENTTYPECD DEALDATE ADDITIONALINFORMATION STARTDATE NEXTDATE 
        ENDDATE LEGNUMBER VALUEFRS VALUESEC;
/*****************************************************************
* ВЕРСИЯ:
*   $Id: transform_table_delete.sas 2142 2012-08-17 14:15:09Z nesterenok $
*
******************************************************************
* НАЗНАЧЕНИЕ:
*   Удаляет из указанной таблицы записи.
*
* ПАРАМЕТРЫ:
*   tpOut                  + имя целевой таблицы, которая будет очищена
*   tpWhere                - условие отбора записей под удаление
*                            по умолчанию отсутствует, т.е. удаляются все записи
*
******************************************************************/

%macro transform_table_delete;

   /* Удаляем записи */
   /* TODO: truncate */
   proc sql;
      delete from &tpOut
      %if %length(&tpWhere) gt 0 %then %do;
         where (%unquote(&tpWhere))
      %end;
      ;
   quit;
   %error_check (mpStepType=SQL);

%mend transform_table_delete;

%transform_table_delete;


%rcSet(&syserr); 
%rcSet(&sysrc); 
%rcSet(&sqlrc); 



/**  Step end Очистить таблицу **/

/*==========================================================================* 
 * Step:            Extract                               A5ELGGF9.AK000139 * 
 * Transform:       Extract                                                 * 
 * Description:     Отбор сделок DRV, DCD                                   * 
 *                                                                          * 
 * Source Table:    FINANCIAL_ACCOUNT -                   A569C89V.AE0000FK * 
 *                   dwh_dds.FINANCIAL_ACCOUNT                              * 
 * Target Table:    FINANCIAL_ACCOUNT - work.W1MF0DQGK    A5ELGGF9.AF0000GU * 
 *==========================================================================*/ 

%let transformID = %quote(A5ELGGF9.AK000139);
%let trans_rc = 0;
%let etls_stepStartTime = %sysfunc(datetime(), datetime20.); 

%let etls_recnt = 0;
%macro etls_recordCheck; 
   %let etls_recCheckExist = %eval(%sysfunc(exist(dwh_dds.FINANCIAL_ACCOUNT, DATA)) or 
         %sysfunc(exist(dwh_dds.FINANCIAL_ACCOUNT, VIEW))); 
   
   %if (&etls_recCheckExist) %then
   %do;
      proc sql noprint;
         select count(*) into :etls_recnt from dwh_dds.FINANCIAL_ACCOUNT;
      quit;
   %end;
%mend etls_recordCheck;
%etls_recordCheck;

%let SYSLAST = %nrquote(dwh_dds.FINANCIAL_ACCOUNT); 

%let SYS_SQL_IP_SPEEDO = Y;
%let SYS_SQL_MAPPUTTO = sas_put;
%let SYS_SQLREDUCEPUT = DBMS;
%global etls_sql_pushDown;
%let etls_sql_pushDown = -1;
option DBIDIRECTEXEC;

/*---- Map the columns  ----*/ 
proc datasets lib = work nolist nowarn memtype = (data view);
   delete W1MF0DQGK;
quit;

%put %str(NOTE: Mapping columns ...);
proc sql;
   create table work.W1MF0DQGK as
      select
         ACCOUNT_RK,
         VALID_FROM_DTTM,
         VALID_TO_DTTM,
         ACCOUNT_ID,
         SOURCE_SYSTEM_CD,
         ACCOUNT_REGISTRATION_NM,
         ALTERNATE_ACCOUNT_NM,
         FINANCIAL_ACCOUNT_TYPE_CD,
         AUTO_DEBIT_ACCOUNT_TYPE_CD,
         ACCOUNT_REGISTRATION_TYPE_CD,
         ACCOUNT_STATUS_CD,
         OPEN_DT,
         CLOSE_DT,
         CLOSE_REASON_CD,
         ACCOUNT_TAX_ID,
         EXPECTED_LOSS_PCT,
         INDIVIDUAL_ORGANIZATION_CD,
         SOURCE_CD,
         OPENING_CHANNEL_CD,
         PREFERRED_CHANNEL_CD,
         CURRENCY_CD,
         PRIMARY_PHONE_NO,
         PRIMARY_PHONE_TYPE_CD,
         SECONDARY_PHONE_NO,
         SECONDARY_PHONE_TYPE_CD,
         MAILABLE_FLG,
         TELEPHONABLE_FLG,
         EMAIL_FLG,
         SMS_FLG,
         DO_NOT_CONTACT_FLG,
         EMPLOYEE_RK,
         CURRENCY_BASED_ACCOUNT_FLG,
         FEE_BASED_FLG,
         ANNUAL_FEES_AMT,
         MONTHLY_FEES_AMT,
         CAMPAIGN_CD,
         COMMUNICATION_CD,
         REGISTERED_ONLINE_DT,
         FIRST_LOGIN_DT,
         ONLINE_BILL_PAYMENT_FLG,
         ID_VERIFICATION_TYPE_CD,
         PREVIOUS_ACCOUNT_ID,
         OPEN_BRANCH_FINANCIAL_UNIT_RK,
         PRIM_BRANCH_FINANCIAL_UNIT_RK,
         FINANCIAL_APPLICATION_RK,
         CREDIT_FACILITY_RK,
         FUTURE_MARGIN_INCOME_AMT,
         IN_DEFAULT_FLG,
         FINANCIAL_BOOK_RK,
         IRRECOVERABLE_FLG,
         OWNED_BY_INTERNAL_ORG_RK,
         PREVIOUS_BANK_EXTERNAL_ORG_RK,
         NETTING_SET_RK,
         REVOLVING_FLG,
         SOURCE_CHANNEL_CD,
         GRACE_PERIOD_DAYS_CNT,
         REMARGINING_DAYS_CNT,
         FINANCIAL_CALENDAR_RK,
         DAY_BASIS_CD,
         PORTFOLIO_ID,
         SECURITIZATION_POOL_RK,
         RECEIVABLES_POOL_RK,
         ACCOUNT_USAGE_TYPE_CD,
         RISK_ALARM_FLG,
         LOW_PROFITABILITY_FLG,
         ACCOUNT_LIFECYCLE_STG_CD,
         ATTRITION_ALARM_FLG,
         BALANCE_FROZEN_FLG,
         BALANCE_FROZEN_DT,
         ACCOUNT_BLOCK_REASON_CD,
         TAXATION_STATE_CD,
         EFFECTIVE_MATURITY_YEAR_NO,
         GL_ACCOUNT_RK,
         FROM_OTHER_INSTITUTION_FLG,
         ACCOUNT_RENEWAL_CNT,
         BALANCE_TRANSFER_DT,
         BALANCE_TRANSFER_AMT,
         BALANCE_TRANSFER_CNT,
         BASE_LONG_TERM_APR_RT,
         BROKER_FLG,
         MULT_RATE_FLG,
         AUTO_DEBIT_ACCOUNT_NO,
         WORST_STATUS_LAST_12_MTH_CD,
         WORST_STATUS_LAST_12_MTH_DT,
         BALANCE_TRNSF_OTHER_ACCT_CNT,
         EFFECTIVE_FROM_DTTM,
         EFFECTIVE_TO_DTTM,
         COUNTERPARTY_RK,
         INSURED_BY_COUNTERPARTY_RK,
         STATEMENT_FREQUENCY_CD,
         SECURITY_DEPOSIT_AMT,
         SECURITY_DEPOSIT_REFUND_AMT,
         FIRST_PAYMENT_DT,
         LAST_PAYMENT_DT,
         FIRST_RESET_DT,
         LAST_RESET_DT,
         RESETS_PER_ANNUM_NO,
         PRINCIPAL_PAYMENT_TYPE_CD,
         PRINCIPAL_PAYMENT_AMT,
         RATE_POLICY_RK,
         SPREAD_RT,
         DISCOUNT_SPREAD_RT,
         INITIAL_CONTRACT_RT,
         FIXED_MONTHLY_PREPAYMENT_RT,
         CAPITAL_ALLOCATION_RK,
         CAPITAL_COST_RK,
         SEGMENT_RK,
         NEAR_BRANCH_FINANCIAL_UNIT_RK,
         STATEMENT_OPT_FLG,
         VALUE_SCALING_FACTOR_RT,
         INTERNAL_REPORTING_CATEGORY_CD,
         CONVEXITY_ADJUSTMENT_FLG,
         ARREARS_PAYMENT_CD,
         QUANTO_FEATURE_RK,
         CASH_INTENSIVE_BUSINESS_FLG,
         LETTER_OF_CREDIT_ONFILE_FLG,
         TRADE_FINANCE_FLG,
         ANNUITY_PAYMENT_TYPE_CD,
         INTEREST_PAYMENT_TYPE_CD,
         INTEREST_PAYMENT_TIME_FREQ_CD,
         LIQUIDITY_CATEGORY_TYPE_CD,
         HOLIDAY_DATE_ROLL_CONV_CD,
         WEEKEND_DATE_ROLL_CONV_CD,
         EXPENSE_ALLOCATION_RK,
         FIRST_INTEREST_PAYMENT_DT,
         LAST_INTEREST_PAYMENT_DT,
         PROCESSED_DTTM,
         IRB_DUMMY_TYPE_CD,
         IRB_SRC_ACCOUNT_ID
   from &SYSLAST
      where FINANCIAL_ACCOUNT_TYPE_CD IN ('DRV','DCD')
         AND
         datepart(PROCESSED_DTTM) = date()
         AND
         missing(IRB_DUMMY_TYPE_CD)
   order by
      ACCOUNT_RK,
      VALID_FROM_DTTM
   ;
quit;

%let SYSLAST = work.W1MF0DQGK;

%global etls_sql_pushDown;
%let etls_sql_pushDown = &sys_sql_ip_all;

%rcSet(&sqlrc); 



/**  Step end Extract **/

/*==========================================================================* 
 * Step:            User Written                          A5ELGGF9.AK00013A * 
 * Transform:       User Written                                            * 
 * Description:     Отбор новых сделок                                      * 
 *                                                                          * 
 * Source Table:    FINANCIAL_ACCOUNT - work.W1MF0DQGK    A5ELGGF9.AF0000GU * 
 * Target Table:    User Written - work.W1PL05FAE         A5ELGGF9.AF0000GV * 
 *                                                                          * 
 * User Written:    SourceCode                                              * 
 *==========================================================================*/ 

%let transformID = %quote(A5ELGGF9.AK00013A);
%let trans_rc = 0;
%let etls_stepStartTime = %sysfunc(datetime(), datetime20.); 

%let etls_recCheckExist = 0; 
%let etls_recnt = 0; 
%macro etls_recordCheck; 
   %let etls_recCheckExist = %eval(%sysfunc(exist(work.W1MF0DQGK, DATA)) or 
         %sysfunc(exist(work.W1MF0DQGK, VIEW))); 
   
   %if (&etls_recCheckExist) %then
   %do;
      %local etls_syntaxcheck; 
      %let etls_syntaxcheck = %sysfunc(getoption(syntaxcheck)); 
      /* Turn off syntaxcheck option to perform following steps  */ 
      options nosyntaxcheck;
      
      proc contents data = work.W1MF0DQGK out = work.etls_contents(keep = nobs) noprint; 
      run; 
      
      data _null_; 
         set work.etls_contents (obs = 1); 
         call symput("etls_recnt", left(put(nobs,32.))); 
      run;
      
      proc datasets lib = work nolist nowarn memtype = (data view);
         delete etls_contents;
      quit;
      
      /* Reset syntaxcheck option to previous setting  */ 
      options &etls_syntaxcheck; 
   %end;
%mend etls_recordCheck;
%etls_recordCheck;

%let SYSLAST = %nrquote(work.W1MF0DQGK); 

%let _INPUT_count = 1;
%let _INPUT = work.W1MF0DQGK;
%let _INPUT_connect = ;
%let _INPUT_engine = ;
%let _INPUT_memtype = DATA;
%let _INPUT_options = %nrquote();
%let _INPUT_alter = %nrquote();
%let _INPUT_path = %nrquote(/FINANCIAL_ACCOUNT_A5ELGGF9.AF0000GU%(WorkTable%));
%let _INPUT_type = 1;
%let _INPUT_label = %nrquote();

%let _INPUT1 = work.W1MF0DQGK;
%let _INPUT1_connect = ;
%let _INPUT1_engine = ;
%let _INPUT1_memtype = DATA;
%let _INPUT1_options = %nrquote();
%let _INPUT1_alter = %nrquote();
%let _INPUT1_path = %nrquote(/FINANCIAL_ACCOUNT_A5ELGGF9.AF0000GU%(WorkTable%));
%let _INPUT1_type = 1;
%let _INPUT1_label = %nrquote();

%let _OUTPUT_count = 1;
%let _OUTPUT = work.W1PL05FAE;
%let _OUTPUT_connect = ;
%let _OUTPUT_engine = ;
%let _OUTPUT_memtype = DATA;
%let _OUTPUT_options = %nrquote();
%let _OUTPUT_alter = %nrquote();
%let _OUTPUT_path = %nrquote(/User Written_A5ELGGF9.AF0000GV%(WorkTable%));
%let _OUTPUT_type = 1;
%let _OUTPUT_label = %nrquote();
/* List of target columns to keep  */ 
%let _OUTPUT_keep = ACCOUNT_RK VALID_FROM_DTTM VALID_TO_DTTM ACCOUNT_ID SOURCE_SYSTEM_CD 
        ACCOUNT_REGISTRATION_NM ALTERNATE_ACCOUNT_NM FINANCIAL_ACCOUNT_TYPE_CD 
        AUTO_DEBIT_ACCOUNT_TYPE_CD ACCOUNT_REGISTRATION_TYPE_CD 
        ACCOUNT_STATUS_CD OPEN_DT CLOSE_DT CLOSE_REASON_CD ACCOUNT_TAX_ID 
        EXPECTED_LOSS_PCT INDIVIDUAL_ORGANIZATION_CD SOURCE_CD 
        OPENING_CHANNEL_CD PREFERRED_CHANNEL_CD CURRENCY_CD PRIMARY_PHONE_NO 
        PRIMARY_PHONE_TYPE_CD SECONDARY_PHONE_NO SECONDARY_PHONE_TYPE_CD 
        MAILABLE_FLG TELEPHONABLE_FLG EMAIL_FLG SMS_FLG DO_NOT_CONTACT_FLG 
        EMPLOYEE_RK CURRENCY_BASED_ACCOUNT_FLG FEE_BASED_FLG ANNUAL_FEES_AMT 
        MONTHLY_FEES_AMT CAMPAIGN_CD COMMUNICATION_CD REGISTERED_ONLINE_DT 
        FIRST_LOGIN_DT ONLINE_BILL_PAYMENT_FLG ID_VERIFICATION_TYPE_CD 
        PREVIOUS_ACCOUNT_ID OPEN_BRANCH_FINANCIAL_UNIT_RK 
        PRIM_BRANCH_FINANCIAL_UNIT_RK FINANCIAL_APPLICATION_RK 
        CREDIT_FACILITY_RK FUTURE_MARGIN_INCOME_AMT IN_DEFAULT_FLG 
        FINANCIAL_BOOK_RK IRRECOVERABLE_FLG OWNED_BY_INTERNAL_ORG_RK 
        PREVIOUS_BANK_EXTERNAL_ORG_RK NETTING_SET_RK REVOLVING_FLG 
        SOURCE_CHANNEL_CD GRACE_PERIOD_DAYS_CNT REMARGINING_DAYS_CNT 
        FINANCIAL_CALENDAR_RK DAY_BASIS_CD PORTFOLIO_ID SECURITIZATION_POOL_RK 
        RECEIVABLES_POOL_RK ACCOUNT_USAGE_TYPE_CD RISK_ALARM_FLG 
        LOW_PROFITABILITY_FLG ACCOUNT_LIFECYCLE_STG_CD ATTRITION_ALARM_FLG 
        BALANCE_FROZEN_FLG BALANCE_FROZEN_DT ACCOUNT_BLOCK_REASON_CD 
        TAXATION_STATE_CD EFFECTIVE_MATURITY_YEAR_NO GL_ACCOUNT_RK 
        FROM_OTHER_INSTITUTION_FLG ACCOUNT_RENEWAL_CNT BALANCE_TRANSFER_DT 
        BALANCE_TRANSFER_AMT BALANCE_TRANSFER_CNT BASE_LONG_TERM_APR_RT 
        BROKER_FLG MULT_RATE_FLG AUTO_DEBIT_ACCOUNT_NO 
        WORST_STATUS_LAST_12_MTH_CD WORST_STATUS_LAST_12_MTH_DT 
        BALANCE_TRNSF_OTHER_ACCT_CNT EFFECTIVE_FROM_DTTM EFFECTIVE_TO_DTTM 
        COUNTERPARTY_RK INSURED_BY_COUNTERPARTY_RK STATEMENT_FREQUENCY_CD 
        SECURITY_DEPOSIT_AMT SECURITY_DEPOSIT_REFUND_AMT FIRST_PAYMENT_DT 
        LAST_PAYMENT_DT FIRST_RESET_DT LAST_RESET_DT RESETS_PER_ANNUM_NO 
        PRINCIPAL_PAYMENT_TYPE_CD PRINCIPAL_PAYMENT_AMT RATE_POLICY_RK 
        SPREAD_RT DISCOUNT_SPREAD_RT INITIAL_CONTRACT_RT 
        FIXED_MONTHLY_PREPAYMENT_RT CAPITAL_ALLOCATION_RK CAPITAL_COST_RK 
        SEGMENT_RK NEAR_BRANCH_FINANCIAL_UNIT_RK STATEMENT_OPT_FLG 
        VALUE_SCALING_FACTOR_RT INTERNAL_REPORTING_CATEGORY_CD 
        CONVEXITY_ADJUSTMENT_FLG ARREARS_PAYMENT_CD QUANTO_FEATURE_RK 
        CASH_INTENSIVE_BUSINESS_FLG LETTER_OF_CREDIT_ONFILE_FLG 
        TRADE_FINANCE_FLG ANNUITY_PAYMENT_TYPE_CD INTEREST_PAYMENT_TYPE_CD 
        INTEREST_PAYMENT_TIME_FREQ_CD LIQUIDITY_CATEGORY_TYPE_CD 
        HOLIDAY_DATE_ROLL_CONV_CD WEEKEND_DATE_ROLL_CONV_CD 
        EXPENSE_ALLOCATION_RK FIRST_INTEREST_PAYMENT_DT 
        LAST_INTEREST_PAYMENT_DT PROCESSED_DTTM IRB_DUMMY_TYPE_CD 
        IRB_SRC_ACCOUNT_ID SAVE_VALID_FROM_DTTM x y out;
%let _OUTPUT_col_count = 133;
%let _OUTPUT_col0_name = ACCOUNT_RK;
%let _OUTPUT_col0_table = work.W1PL05FAE;
%let _OUTPUT_col0_length = 8;
%let _OUTPUT_col0_type = ;
%let _OUTPUT_col0_format = 12.;
%let _OUTPUT_col0_informat = 12.;
%let _OUTPUT_col0_label = %nrquote(ACCOUNT_RK);
%let _OUTPUT_col0_input0 = ACCOUNT_RK;
%let _OUTPUT_col0_exp = ;
%let _OUTPUT_col0_input = ACCOUNT_RK;
%let _OUTPUT_col0_input_count = 1;
%let _OUTPUT_col1_name = VALID_FROM_DTTM;
%let _OUTPUT_col1_table = work.W1PL05FAE;
%let _OUTPUT_col1_length = 8;
%let _OUTPUT_col1_type = ;
%let _OUTPUT_col1_format = DATETIME20.;
%let _OUTPUT_col1_informat = DATETIME20.;
%let _OUTPUT_col1_label = %nrquote(VALID_FROM_DTTM);
%let _OUTPUT_col1_input0 = VALID_FROM_DTTM;
%let _OUTPUT_col1_exp = ;
%let _OUTPUT_col1_input = VALID_FROM_DTTM;
%let _OUTPUT_col1_input_count = 1;
%let _OUTPUT_col2_name = VALID_TO_DTTM;
%let _OUTPUT_col2_table = work.W1PL05FAE;
%let _OUTPUT_col2_length = 8;
%let _OUTPUT_col2_type = ;
%let _OUTPUT_col2_format = DATETIME20.;
%let _OUTPUT_col2_informat = DATETIME20.;
%let _OUTPUT_col2_label = %nrquote(VALID_TO_DTTM);
%let _OUTPUT_col2_input0 = VALID_TO_DTTM;
%let _OUTPUT_col2_exp = ;
%let _OUTPUT_col2_input = VALID_TO_DTTM;
%let _OUTPUT_col2_input_count = 1;
%let _OUTPUT_col3_name = ACCOUNT_ID;
%let _OUTPUT_col3_table = work.W1PL05FAE;
%let _OUTPUT_col3_length = 32;
%let _OUTPUT_col3_type = $;
%let _OUTPUT_col3_format = $32.;
%let _OUTPUT_col3_informat = $32.;
%let _OUTPUT_col3_label = %nrquote(ACCOUNT_ID);
%let _OUTPUT_col3_input0 = ACCOUNT_ID;
%let _OUTPUT_col3_exp = ;
%let _OUTPUT_col3_input = ACCOUNT_ID;
%let _OUTPUT_col3_input_count = 1;
%let _OUTPUT_col4_name = SOURCE_SYSTEM_CD;
%let _OUTPUT_col4_table = work.W1PL05FAE;
%let _OUTPUT_col4_length = 3;
%let _OUTPUT_col4_type = $;
%let _OUTPUT_col4_format = $3.;
%let _OUTPUT_col4_informat = $3.;
%let _OUTPUT_col4_label = %nrquote(SOURCE_SYSTEM_CD);
%let _OUTPUT_col4_input0 = SOURCE_SYSTEM_CD;
%let _OUTPUT_col4_exp = ;
%let _OUTPUT_col4_input = SOURCE_SYSTEM_CD;
%let _OUTPUT_col4_input_count = 1;
%let _OUTPUT_col5_name = ACCOUNT_REGISTRATION_NM;
%let _OUTPUT_col5_table = work.W1PL05FAE;
%let _OUTPUT_col5_length = 100;
%let _OUTPUT_col5_type = $;
%let _OUTPUT_col5_format = $100.;
%let _OUTPUT_col5_informat = $100.;
%let _OUTPUT_col5_label = %nrquote(ACCOUNT_REGISTRATION_NM);
%let _OUTPUT_col5_input0 = ACCOUNT_REGISTRATION_NM;
%let _OUTPUT_col5_exp = ;
%let _OUTPUT_col5_input = ACCOUNT_REGISTRATION_NM;
%let _OUTPUT_col5_input_count = 1;
%let _OUTPUT_col6_name = ALTERNATE_ACCOUNT_NM;
%let _OUTPUT_col6_table = work.W1PL05FAE;
%let _OUTPUT_col6_length = 40;
%let _OUTPUT_col6_type = $;
%let _OUTPUT_col6_format = $40.;
%let _OUTPUT_col6_informat = $40.;
%let _OUTPUT_col6_label = %nrquote(ALTERNATE_ACCOUNT_NM);
%let _OUTPUT_col6_input0 = ALTERNATE_ACCOUNT_NM;
%let _OUTPUT_col6_exp = ;
%let _OUTPUT_col6_input = ALTERNATE_ACCOUNT_NM;
%let _OUTPUT_col6_input_count = 1;
%let _OUTPUT_col7_name = FINANCIAL_ACCOUNT_TYPE_CD;
%let _OUTPUT_col7_table = work.W1PL05FAE;
%let _OUTPUT_col7_length = 3;
%let _OUTPUT_col7_type = $;
%let _OUTPUT_col7_format = $3.;
%let _OUTPUT_col7_informat = $3.;
%let _OUTPUT_col7_label = %nrquote(FINANCIAL_ACCOUNT_TYPE_CD);
%let _OUTPUT_col7_input0 = FINANCIAL_ACCOUNT_TYPE_CD;
%let _OUTPUT_col7_exp = ;
%let _OUTPUT_col7_input = FINANCIAL_ACCOUNT_TYPE_CD;
%let _OUTPUT_col7_input_count = 1;
%let _OUTPUT_col8_name = AUTO_DEBIT_ACCOUNT_TYPE_CD;
%let _OUTPUT_col8_table = work.W1PL05FAE;
%let _OUTPUT_col8_length = 3;
%let _OUTPUT_col8_type = $;
%let _OUTPUT_col8_format = $3.;
%let _OUTPUT_col8_informat = $3.;
%let _OUTPUT_col8_label = %nrquote(AUTO_DEBIT_ACCOUNT_TYPE_CD);
%let _OUTPUT_col8_input0 = AUTO_DEBIT_ACCOUNT_TYPE_CD;
%let _OUTPUT_col8_exp = ;
%let _OUTPUT_col8_input = AUTO_DEBIT_ACCOUNT_TYPE_CD;
%let _OUTPUT_col8_input_count = 1;
%let _OUTPUT_col9_name = ACCOUNT_REGISTRATION_TYPE_CD;
%let _OUTPUT_col9_table = work.W1PL05FAE;
%let _OUTPUT_col9_length = 3;
%let _OUTPUT_col9_type = $;
%let _OUTPUT_col9_format = $3.;
%let _OUTPUT_col9_informat = $3.;
%let _OUTPUT_col9_label = %nrquote(ACCOUNT_REGISTRATION_TYPE_CD);
%let _OUTPUT_col9_input0 = ACCOUNT_REGISTRATION_TYPE_CD;
%let _OUTPUT_col9_exp = ;
%let _OUTPUT_col9_input = ACCOUNT_REGISTRATION_TYPE_CD;
%let _OUTPUT_col9_input_count = 1;
%let _OUTPUT_col10_name = ACCOUNT_STATUS_CD;
%let _OUTPUT_col10_table = work.W1PL05FAE;
%let _OUTPUT_col10_length = 3;
%let _OUTPUT_col10_type = $;
%let _OUTPUT_col10_format = $3.;
%let _OUTPUT_col10_informat = $3.;
%let _OUTPUT_col10_label = %nrquote(ACCOUNT_STATUS_CD);
%let _OUTPUT_col10_input0 = ACCOUNT_STATUS_CD;
%let _OUTPUT_col10_exp = ;
%let _OUTPUT_col10_input = ACCOUNT_STATUS_CD;
%let _OUTPUT_col10_input_count = 1;
%let _OUTPUT_col11_name = OPEN_DT;
%let _OUTPUT_col11_table = work.W1PL05FAE;
%let _OUTPUT_col11_length = 8;
%let _OUTPUT_col11_type = ;
%let _OUTPUT_col11_format = DATETIME20.;
%let _OUTPUT_col11_informat = DATETIME20.;
%let _OUTPUT_col11_label = %nrquote(OPEN_DT);
%let _OUTPUT_col11_input0 = OPEN_DT;
%let _OUTPUT_col11_exp = ;
%let _OUTPUT_col11_input = OPEN_DT;
%let _OUTPUT_col11_input_count = 1;
%let _OUTPUT_col12_name = CLOSE_DT;
%let _OUTPUT_col12_table = work.W1PL05FAE;
%let _OUTPUT_col12_length = 8;
%let _OUTPUT_col12_type = ;
%let _OUTPUT_col12_format = DATETIME20.;
%let _OUTPUT_col12_informat = DATETIME20.;
%let _OUTPUT_col12_label = %nrquote(CLOSE_DT);
%let _OUTPUT_col12_input0 = CLOSE_DT;
%let _OUTPUT_col12_exp = ;
%let _OUTPUT_col12_input = CLOSE_DT;
%let _OUTPUT_col12_input_count = 1;
%let _OUTPUT_col13_name = CLOSE_REASON_CD;
%let _OUTPUT_col13_table = work.W1PL05FAE;
%let _OUTPUT_col13_length = 3;
%let _OUTPUT_col13_type = $;
%let _OUTPUT_col13_format = $3.;
%let _OUTPUT_col13_informat = $3.;
%let _OUTPUT_col13_label = %nrquote(CLOSE_REASON_CD);
%let _OUTPUT_col13_input0 = CLOSE_REASON_CD;
%let _OUTPUT_col13_exp = ;
%let _OUTPUT_col13_input = CLOSE_REASON_CD;
%let _OUTPUT_col13_input_count = 1;
%let _OUTPUT_col14_name = ACCOUNT_TAX_ID;
%let _OUTPUT_col14_table = work.W1PL05FAE;
%let _OUTPUT_col14_length = 32;
%let _OUTPUT_col14_type = $;
%let _OUTPUT_col14_format = $32.;
%let _OUTPUT_col14_informat = $32.;
%let _OUTPUT_col14_label = %nrquote(ACCOUNT_TAX_ID);
%let _OUTPUT_col14_input0 = ACCOUNT_TAX_ID;
%let _OUTPUT_col14_exp = ;
%let _OUTPUT_col14_input = ACCOUNT_TAX_ID;
%let _OUTPUT_col14_input_count = 1;
%let _OUTPUT_col15_name = EXPECTED_LOSS_PCT;
%let _OUTPUT_col15_table = work.W1PL05FAE;
%let _OUTPUT_col15_length = 8;
%let _OUTPUT_col15_type = ;
%let _OUTPUT_col15_format = 12.4;
%let _OUTPUT_col15_informat = 12.4;
%let _OUTPUT_col15_label = %nrquote(EXPECTED_LOSS_PCT);
%let _OUTPUT_col15_input0 = EXPECTED_LOSS_PCT;
%let _OUTPUT_col15_exp = ;
%let _OUTPUT_col15_input = EXPECTED_LOSS_PCT;
%let _OUTPUT_col15_input_count = 1;
%let _OUTPUT_col16_name = INDIVIDUAL_ORGANIZATION_CD;
%let _OUTPUT_col16_table = work.W1PL05FAE;
%let _OUTPUT_col16_length = 3;
%let _OUTPUT_col16_type = $;
%let _OUTPUT_col16_format = $3.;
%let _OUTPUT_col16_informat = $3.;
%let _OUTPUT_col16_label = %nrquote(INDIVIDUAL_ORGANIZATION_CD);
%let _OUTPUT_col16_input0 = INDIVIDUAL_ORGANIZATION_CD;
%let _OUTPUT_col16_exp = ;
%let _OUTPUT_col16_input = INDIVIDUAL_ORGANIZATION_CD;
%let _OUTPUT_col16_input_count = 1;
%let _OUTPUT_col17_name = SOURCE_CD;
%let _OUTPUT_col17_table = work.W1PL05FAE;
%let _OUTPUT_col17_length = 5;
%let _OUTPUT_col17_type = $;
%let _OUTPUT_col17_format = $5.;
%let _OUTPUT_col17_informat = $5.;
%let _OUTPUT_col17_label = %nrquote(SOURCE_CD);
%let _OUTPUT_col17_input0 = SOURCE_CD;
%let _OUTPUT_col17_exp = ;
%let _OUTPUT_col17_input = SOURCE_CD;
%let _OUTPUT_col17_input_count = 1;
%let _OUTPUT_col18_name = OPENING_CHANNEL_CD;
%let _OUTPUT_col18_table = work.W1PL05FAE;
%let _OUTPUT_col18_length = 3;
%let _OUTPUT_col18_type = $;
%let _OUTPUT_col18_format = $3.;
%let _OUTPUT_col18_informat = $3.;
%let _OUTPUT_col18_label = %nrquote(OPENING_CHANNEL_CD);
%let _OUTPUT_col18_input0 = OPENING_CHANNEL_CD;
%let _OUTPUT_col18_exp = ;
%let _OUTPUT_col18_input = OPENING_CHANNEL_CD;
%let _OUTPUT_col18_input_count = 1;
%let _OUTPUT_col19_name = PREFERRED_CHANNEL_CD;
%let _OUTPUT_col19_table = work.W1PL05FAE;
%let _OUTPUT_col19_length = 3;
%let _OUTPUT_col19_type = $;
%let _OUTPUT_col19_format = $3.;
%let _OUTPUT_col19_informat = $3.;
%let _OUTPUT_col19_label = %nrquote(PREFERRED_CHANNEL_CD);
%let _OUTPUT_col19_input0 = PREFERRED_CHANNEL_CD;
%let _OUTPUT_col19_exp = ;
%let _OUTPUT_col19_input = PREFERRED_CHANNEL_CD;
%let _OUTPUT_col19_input_count = 1;
%let _OUTPUT_col20_name = CURRENCY_CD;
%let _OUTPUT_col20_table = work.W1PL05FAE;
%let _OUTPUT_col20_length = 3;
%let _OUTPUT_col20_type = $;
%let _OUTPUT_col20_format = $3.;
%let _OUTPUT_col20_informat = $3.;
%let _OUTPUT_col20_label = %nrquote(CURRENCY_CD);
%let _OUTPUT_col20_input0 = CURRENCY_CD;
%let _OUTPUT_col20_exp = ;
%let _OUTPUT_col20_input = CURRENCY_CD;
%let _OUTPUT_col20_input_count = 1;
%let _OUTPUT_col21_name = PRIMARY_PHONE_NO;
%let _OUTPUT_col21_table = work.W1PL05FAE;
%let _OUTPUT_col21_length = 20;
%let _OUTPUT_col21_type = $;
%let _OUTPUT_col21_format = $20.;
%let _OUTPUT_col21_informat = $20.;
%let _OUTPUT_col21_label = %nrquote(PRIMARY_PHONE_NO);
%let _OUTPUT_col21_input0 = PRIMARY_PHONE_NO;
%let _OUTPUT_col21_exp = ;
%let _OUTPUT_col21_input = PRIMARY_PHONE_NO;
%let _OUTPUT_col21_input_count = 1;
%let _OUTPUT_col22_name = PRIMARY_PHONE_TYPE_CD;
%let _OUTPUT_col22_table = work.W1PL05FAE;
%let _OUTPUT_col22_length = 3;
%let _OUTPUT_col22_type = $;
%let _OUTPUT_col22_format = $3.;
%let _OUTPUT_col22_informat = $3.;
%let _OUTPUT_col22_label = %nrquote(PRIMARY_PHONE_TYPE_CD);
%let _OUTPUT_col22_input0 = PRIMARY_PHONE_TYPE_CD;
%let _OUTPUT_col22_exp = ;
%let _OUTPUT_col22_input = PRIMARY_PHONE_TYPE_CD;
%let _OUTPUT_col22_input_count = 1;
%let _OUTPUT_col23_name = SECONDARY_PHONE_NO;
%let _OUTPUT_col23_table = work.W1PL05FAE;
%let _OUTPUT_col23_length = 20;
%let _OUTPUT_col23_type = $;
%let _OUTPUT_col23_format = $20.;
%let _OUTPUT_col23_informat = $20.;
%let _OUTPUT_col23_label = %nrquote(SECONDARY_PHONE_NO);
%let _OUTPUT_col23_input0 = SECONDARY_PHONE_NO;
%let _OUTPUT_col23_exp = ;
%let _OUTPUT_col23_input = SECONDARY_PHONE_NO;
%let _OUTPUT_col23_input_count = 1;
%let _OUTPUT_col24_name = SECONDARY_PHONE_TYPE_CD;
%let _OUTPUT_col24_table = work.W1PL05FAE;
%let _OUTPUT_col24_length = 3;
%let _OUTPUT_col24_type = $;
%let _OUTPUT_col24_format = $3.;
%let _OUTPUT_col24_informat = $3.;
%let _OUTPUT_col24_label = %nrquote(SECONDARY_PHONE_TYPE_CD);
%let _OUTPUT_col24_input0 = SECONDARY_PHONE_TYPE_CD;
%let _OUTPUT_col24_exp = ;
%let _OUTPUT_col24_input = SECONDARY_PHONE_TYPE_CD;
%let _OUTPUT_col24_input_count = 1;
%let _OUTPUT_col25_name = MAILABLE_FLG;
%let _OUTPUT_col25_table = work.W1PL05FAE;
%let _OUTPUT_col25_length = 1;
%let _OUTPUT_col25_type = $;
%let _OUTPUT_col25_format = $1.;
%let _OUTPUT_col25_informat = $1.;
%let _OUTPUT_col25_label = %nrquote(MAILABLE_FLG);
%let _OUTPUT_col25_input0 = MAILABLE_FLG;
%let _OUTPUT_col25_exp = ;
%let _OUTPUT_col25_input = MAILABLE_FLG;
%let _OUTPUT_col25_input_count = 1;
%let _OUTPUT_col26_name = TELEPHONABLE_FLG;
%let _OUTPUT_col26_table = work.W1PL05FAE;
%let _OUTPUT_col26_length = 1;
%let _OUTPUT_col26_type = $;
%let _OUTPUT_col26_format = $1.;
%let _OUTPUT_col26_informat = $1.;
%let _OUTPUT_col26_label = %nrquote(TELEPHONABLE_FLG);
%let _OUTPUT_col26_input0 = TELEPHONABLE_FLG;
%let _OUTPUT_col26_exp = ;
%let _OUTPUT_col26_input = TELEPHONABLE_FLG;
%let _OUTPUT_col26_input_count = 1;
%let _OUTPUT_col27_name = EMAIL_FLG;
%let _OUTPUT_col27_table = work.W1PL05FAE;
%let _OUTPUT_col27_length = 1;
%let _OUTPUT_col27_type = $;
%let _OUTPUT_col27_format = $1.;
%let _OUTPUT_col27_informat = $1.;
%let _OUTPUT_col27_label = %nrquote(EMAIL_FLG);
%let _OUTPUT_col27_input0 = EMAIL_FLG;
%let _OUTPUT_col27_exp = ;
%let _OUTPUT_col27_input = EMAIL_FLG;
%let _OUTPUT_col27_input_count = 1;
%let _OUTPUT_col28_name = SMS_FLG;
%let _OUTPUT_col28_table = work.W1PL05FAE;
%let _OUTPUT_col28_length = 1;
%let _OUTPUT_col28_type = $;
%let _OUTPUT_col28_format = $1.;
%let _OUTPUT_col28_informat = $1.;
%let _OUTPUT_col28_label = %nrquote(SMS_FLG);
%let _OUTPUT_col28_input0 = SMS_FLG;
%let _OUTPUT_col28_exp = ;
%let _OUTPUT_col28_input = SMS_FLG;
%let _OUTPUT_col28_input_count = 1;
%let _OUTPUT_col29_name = DO_NOT_CONTACT_FLG;
%let _OUTPUT_col29_table = work.W1PL05FAE;
%let _OUTPUT_col29_length = 1;
%let _OUTPUT_col29_type = $;
%let _OUTPUT_col29_format = $1.;
%let _OUTPUT_col29_informat = $1.;
%let _OUTPUT_col29_label = %nrquote(DO_NOT_CONTACT_FLG);
%let _OUTPUT_col29_input0 = DO_NOT_CONTACT_FLG;
%let _OUTPUT_col29_exp = ;
%let _OUTPUT_col29_input = DO_NOT_CONTACT_FLG;
%let _OUTPUT_col29_input_count = 1;
%let _OUTPUT_col30_name = EMPLOYEE_RK;
%let _OUTPUT_col30_table = work.W1PL05FAE;
%let _OUTPUT_col30_length = 8;
%let _OUTPUT_col30_type = ;
%let _OUTPUT_col30_format = 12.;
%let _OUTPUT_col30_informat = 12.;
%let _OUTPUT_col30_label = %nrquote(EMPLOYEE_RK);
%let _OUTPUT_col30_input0 = EMPLOYEE_RK;
%let _OUTPUT_col30_exp = ;
%let _OUTPUT_col30_input = EMPLOYEE_RK;
%let _OUTPUT_col30_input_count = 1;
%let _OUTPUT_col31_name = CURRENCY_BASED_ACCOUNT_FLG;
%let _OUTPUT_col31_table = work.W1PL05FAE;
%let _OUTPUT_col31_length = 1;
%let _OUTPUT_col31_type = $;
%let _OUTPUT_col31_format = $1.;
%let _OUTPUT_col31_informat = $1.;
%let _OUTPUT_col31_label = %nrquote(CURRENCY_BASED_ACCOUNT_FLG);
%let _OUTPUT_col31_input0 = CURRENCY_BASED_ACCOUNT_FLG;
%let _OUTPUT_col31_exp = ;
%let _OUTPUT_col31_input = CURRENCY_BASED_ACCOUNT_FLG;
%let _OUTPUT_col31_input_count = 1;
%let _OUTPUT_col32_name = FEE_BASED_FLG;
%let _OUTPUT_col32_table = work.W1PL05FAE;
%let _OUTPUT_col32_length = 1;
%let _OUTPUT_col32_type = $;
%let _OUTPUT_col32_format = $1.;
%let _OUTPUT_col32_informat = $1.;
%let _OUTPUT_col32_label = %nrquote(FEE_BASED_FLG);
%let _OUTPUT_col32_input0 = FEE_BASED_FLG;
%let _OUTPUT_col32_exp = ;
%let _OUTPUT_col32_input = FEE_BASED_FLG;
%let _OUTPUT_col32_input_count = 1;
%let _OUTPUT_col33_name = ANNUAL_FEES_AMT;
%let _OUTPUT_col33_table = work.W1PL05FAE;
%let _OUTPUT_col33_length = 8;
%let _OUTPUT_col33_type = ;
%let _OUTPUT_col33_format = 21.5;
%let _OUTPUT_col33_informat = 21.5;
%let _OUTPUT_col33_label = %nrquote(ANNUAL_FEES_AMT);
%let _OUTPUT_col33_input0 = ANNUAL_FEES_AMT;
%let _OUTPUT_col33_exp = ;
%let _OUTPUT_col33_input = ANNUAL_FEES_AMT;
%let _OUTPUT_col33_input_count = 1;
%let _OUTPUT_col34_name = MONTHLY_FEES_AMT;
%let _OUTPUT_col34_table = work.W1PL05FAE;
%let _OUTPUT_col34_length = 8;
%let _OUTPUT_col34_type = ;
%let _OUTPUT_col34_format = 21.5;
%let _OUTPUT_col34_informat = 21.5;
%let _OUTPUT_col34_label = %nrquote(MONTHLY_FEES_AMT);
%let _OUTPUT_col34_input0 = MONTHLY_FEES_AMT;
%let _OUTPUT_col34_exp = ;
%let _OUTPUT_col34_input = MONTHLY_FEES_AMT;
%let _OUTPUT_col34_input_count = 1;
%let _OUTPUT_col35_name = CAMPAIGN_CD;
%let _OUTPUT_col35_table = work.W1PL05FAE;
%let _OUTPUT_col35_length = 30;
%let _OUTPUT_col35_type = $;
%let _OUTPUT_col35_format = $30.;
%let _OUTPUT_col35_informat = $30.;
%let _OUTPUT_col35_label = %nrquote(CAMPAIGN_CD);
%let _OUTPUT_col35_input0 = CAMPAIGN_CD;
%let _OUTPUT_col35_exp = ;
%let _OUTPUT_col35_input = CAMPAIGN_CD;
%let _OUTPUT_col35_input_count = 1;
%let _OUTPUT_col36_name = COMMUNICATION_CD;
%let _OUTPUT_col36_table = work.W1PL05FAE;
%let _OUTPUT_col36_length = 30;
%let _OUTPUT_col36_type = $;
%let _OUTPUT_col36_format = $30.;
%let _OUTPUT_col36_informat = $30.;
%let _OUTPUT_col36_label = %nrquote(COMMUNICATION_CD);
%let _OUTPUT_col36_input0 = COMMUNICATION_CD;
%let _OUTPUT_col36_exp = ;
%let _OUTPUT_col36_input = COMMUNICATION_CD;
%let _OUTPUT_col36_input_count = 1;
%let _OUTPUT_col37_name = REGISTERED_ONLINE_DT;
%let _OUTPUT_col37_table = work.W1PL05FAE;
%let _OUTPUT_col37_length = 8;
%let _OUTPUT_col37_type = ;
%let _OUTPUT_col37_format = DATETIME20.;
%let _OUTPUT_col37_informat = DATETIME20.;
%let _OUTPUT_col37_label = %nrquote(REGISTERED_ONLINE_DT);
%let _OUTPUT_col37_input0 = REGISTERED_ONLINE_DT;
%let _OUTPUT_col37_exp = ;
%let _OUTPUT_col37_input = REGISTERED_ONLINE_DT;
%let _OUTPUT_col37_input_count = 1;
%let _OUTPUT_col38_name = FIRST_LOGIN_DT;
%let _OUTPUT_col38_table = work.W1PL05FAE;
%let _OUTPUT_col38_length = 8;
%let _OUTPUT_col38_type = ;
%let _OUTPUT_col38_format = DATETIME20.;
%let _OUTPUT_col38_informat = DATETIME20.;
%let _OUTPUT_col38_label = %nrquote(FIRST_LOGIN_DT);
%let _OUTPUT_col38_input0 = FIRST_LOGIN_DT;
%let _OUTPUT_col38_exp = ;
%let _OUTPUT_col38_input = FIRST_LOGIN_DT;
%let _OUTPUT_col38_input_count = 1;
%let _OUTPUT_col39_name = ONLINE_BILL_PAYMENT_FLG;
%let _OUTPUT_col39_table = work.W1PL05FAE;
%let _OUTPUT_col39_length = 1;
%let _OUTPUT_col39_type = $;
%let _OUTPUT_col39_format = $1.;
%let _OUTPUT_col39_informat = $1.;
%let _OUTPUT_col39_label = %nrquote(ONLINE_BILL_PAYMENT_FLG);
%let _OUTPUT_col39_input0 = ONLINE_BILL_PAYMENT_FLG;
%let _OUTPUT_col39_exp = ;
%let _OUTPUT_col39_input = ONLINE_BILL_PAYMENT_FLG;
%let _OUTPUT_col39_input_count = 1;
%let _OUTPUT_col40_name = ID_VERIFICATION_TYPE_CD;
%let _OUTPUT_col40_table = work.W1PL05FAE;
%let _OUTPUT_col40_length = 3;
%let _OUTPUT_col40_type = $;
%let _OUTPUT_col40_format = $3.;
%let _OUTPUT_col40_informat = $3.;
%let _OUTPUT_col40_label = %nrquote(ID_VERIFICATION_TYPE_CD);
%let _OUTPUT_col40_input0 = ID_VERIFICATION_TYPE_CD;
%let _OUTPUT_col40_exp = ;
%let _OUTPUT_col40_input = ID_VERIFICATION_TYPE_CD;
%let _OUTPUT_col40_input_count = 1;
%let _OUTPUT_col41_name = PREVIOUS_ACCOUNT_ID;
%let _OUTPUT_col41_table = work.W1PL05FAE;
%let _OUTPUT_col41_length = 32;
%let _OUTPUT_col41_type = $;
%let _OUTPUT_col41_format = $32.;
%let _OUTPUT_col41_informat = $32.;
%let _OUTPUT_col41_label = %nrquote(PREVIOUS_ACCOUNT_ID);
%let _OUTPUT_col41_input0 = PREVIOUS_ACCOUNT_ID;
%let _OUTPUT_col41_exp = ;
%let _OUTPUT_col41_input = PREVIOUS_ACCOUNT_ID;
%let _OUTPUT_col41_input_count = 1;
%let _OUTPUT_col42_name = OPEN_BRANCH_FINANCIAL_UNIT_RK;
%let _OUTPUT_col42_table = work.W1PL05FAE;
%let _OUTPUT_col42_length = 8;
%let _OUTPUT_col42_type = ;
%let _OUTPUT_col42_format = 12.;
%let _OUTPUT_col42_informat = 12.;
%let _OUTPUT_col42_label = %nrquote(OPEN_BRANCH_FINANCIAL_UNIT_RK);
%let _OUTPUT_col42_input0 = OPEN_BRANCH_FINANCIAL_UNIT_RK;
%let _OUTPUT_col42_exp = ;
%let _OUTPUT_col42_input = OPEN_BRANCH_FINANCIAL_UNIT_RK;
%let _OUTPUT_col42_input_count = 1;
%let _OUTPUT_col43_name = PRIM_BRANCH_FINANCIAL_UNIT_RK;
%let _OUTPUT_col43_table = work.W1PL05FAE;
%let _OUTPUT_col43_length = 8;
%let _OUTPUT_col43_type = ;
%let _OUTPUT_col43_format = 12.;
%let _OUTPUT_col43_informat = 12.;
%let _OUTPUT_col43_label = %nrquote(PRIM_BRANCH_FINANCIAL_UNIT_RK);
%let _OUTPUT_col43_input0 = PRIM_BRANCH_FINANCIAL_UNIT_RK;
%let _OUTPUT_col43_exp = ;
%let _OUTPUT_col43_input = PRIM_BRANCH_FINANCIAL_UNIT_RK;
%let _OUTPUT_col43_input_count = 1;
%let _OUTPUT_col44_name = FINANCIAL_APPLICATION_RK;
%let _OUTPUT_col44_table = work.W1PL05FAE;
%let _OUTPUT_col44_length = 8;
%let _OUTPUT_col44_type = ;
%let _OUTPUT_col44_format = 12.;
%let _OUTPUT_col44_informat = 12.;
%let _OUTPUT_col44_label = %nrquote(FINANCIAL_APPLICATION_RK);
%let _OUTPUT_col44_input0 = FINANCIAL_APPLICATION_RK;
%let _OUTPUT_col44_exp = ;
%let _OUTPUT_col44_input = FINANCIAL_APPLICATION_RK;
%let _OUTPUT_col44_input_count = 1;
%let _OUTPUT_col45_name = CREDIT_FACILITY_RK;
%let _OUTPUT_col45_table = work.W1PL05FAE;
%let _OUTPUT_col45_length = 8;
%let _OUTPUT_col45_type = ;
%let _OUTPUT_col45_format = 12.;
%let _OUTPUT_col45_informat = 12.;
%let _OUTPUT_col45_label = %nrquote(CREDIT_FACILITY_RK);
%let _OUTPUT_col45_input0 = CREDIT_FACILITY_RK;
%let _OUTPUT_col45_exp = ;
%let _OUTPUT_col45_input = CREDIT_FACILITY_RK;
%let _OUTPUT_col45_input_count = 1;
%let _OUTPUT_col46_name = FUTURE_MARGIN_INCOME_AMT;
%let _OUTPUT_col46_table = work.W1PL05FAE;
%let _OUTPUT_col46_length = 8;
%let _OUTPUT_col46_type = ;
%let _OUTPUT_col46_format = 21.5;
%let _OUTPUT_col46_informat = 21.5;
%let _OUTPUT_col46_label = %nrquote(FUTURE_MARGIN_INCOME_AMT);
%let _OUTPUT_col46_input0 = FUTURE_MARGIN_INCOME_AMT;
%let _OUTPUT_col46_exp = ;
%let _OUTPUT_col46_input = FUTURE_MARGIN_INCOME_AMT;
%let _OUTPUT_col46_input_count = 1;
%let _OUTPUT_col47_name = IN_DEFAULT_FLG;
%let _OUTPUT_col47_table = work.W1PL05FAE;
%let _OUTPUT_col47_length = 1;
%let _OUTPUT_col47_type = $;
%let _OUTPUT_col47_format = $1.;
%let _OUTPUT_col47_informat = $1.;
%let _OUTPUT_col47_label = %nrquote(IN_DEFAULT_FLG);
%let _OUTPUT_col47_input0 = IN_DEFAULT_FLG;
%let _OUTPUT_col47_exp = ;
%let _OUTPUT_col47_input = IN_DEFAULT_FLG;
%let _OUTPUT_col47_input_count = 1;
%let _OUTPUT_col48_name = FINANCIAL_BOOK_RK;
%let _OUTPUT_col48_table = work.W1PL05FAE;
%let _OUTPUT_col48_length = 8;
%let _OUTPUT_col48_type = ;
%let _OUTPUT_col48_format = 12.;
%let _OUTPUT_col48_informat = 12.;
%let _OUTPUT_col48_label = %nrquote(FINANCIAL_BOOK_RK);
%let _OUTPUT_col48_input0 = FINANCIAL_BOOK_RK;
%let _OUTPUT_col48_exp = ;
%let _OUTPUT_col48_input = FINANCIAL_BOOK_RK;
%let _OUTPUT_col48_input_count = 1;
%let _OUTPUT_col49_name = IRRECOVERABLE_FLG;
%let _OUTPUT_col49_table = work.W1PL05FAE;
%let _OUTPUT_col49_length = 1;
%let _OUTPUT_col49_type = $;
%let _OUTPUT_col49_format = $1.;
%let _OUTPUT_col49_informat = $1.;
%let _OUTPUT_col49_label = %nrquote(IRRECOVERABLE_FLG);
%let _OUTPUT_col49_input0 = IRRECOVERABLE_FLG;
%let _OUTPUT_col49_exp = ;
%let _OUTPUT_col49_input = IRRECOVERABLE_FLG;
%let _OUTPUT_col49_input_count = 1;
%let _OUTPUT_col50_name = OWNED_BY_INTERNAL_ORG_RK;
%let _OUTPUT_col50_table = work.W1PL05FAE;
%let _OUTPUT_col50_length = 8;
%let _OUTPUT_col50_type = ;
%let _OUTPUT_col50_format = 12.;
%let _OUTPUT_col50_informat = 12.;
%let _OUTPUT_col50_label = %nrquote(OWNED_BY_INTERNAL_ORG_RK);
%let _OUTPUT_col50_input0 = OWNED_BY_INTERNAL_ORG_RK;
%let _OUTPUT_col50_exp = ;
%let _OUTPUT_col50_input = OWNED_BY_INTERNAL_ORG_RK;
%let _OUTPUT_col50_input_count = 1;
%let _OUTPUT_col51_name = PREVIOUS_BANK_EXTERNAL_ORG_RK;
%let _OUTPUT_col51_table = work.W1PL05FAE;
%let _OUTPUT_col51_length = 8;
%let _OUTPUT_col51_type = ;
%let _OUTPUT_col51_format = 12.;
%let _OUTPUT_col51_informat = 12.;
%let _OUTPUT_col51_label = %nrquote(PREVIOUS_BANK_EXTERNAL_ORG_RK);
%let _OUTPUT_col51_input0 = PREVIOUS_BANK_EXTERNAL_ORG_RK;
%let _OUTPUT_col51_exp = ;
%let _OUTPUT_col51_input = PREVIOUS_BANK_EXTERNAL_ORG_RK;
%let _OUTPUT_col51_input_count = 1;
%let _OUTPUT_col52_name = NETTING_SET_RK;
%let _OUTPUT_col52_table = work.W1PL05FAE;
%let _OUTPUT_col52_length = 8;
%let _OUTPUT_col52_type = ;
%let _OUTPUT_col52_format = 12.;
%let _OUTPUT_col52_informat = 12.;
%let _OUTPUT_col52_label = %nrquote(NETTING_SET_RK);
%let _OUTPUT_col52_input0 = NETTING_SET_RK;
%let _OUTPUT_col52_exp = ;
%let _OUTPUT_col52_input = NETTING_SET_RK;
%let _OUTPUT_col52_input_count = 1;
%let _OUTPUT_col53_name = REVOLVING_FLG;
%let _OUTPUT_col53_table = work.W1PL05FAE;
%let _OUTPUT_col53_length = 1;
%let _OUTPUT_col53_type = $;
%let _OUTPUT_col53_format = $1.;
%let _OUTPUT_col53_informat = $1.;
%let _OUTPUT_col53_label = %nrquote(REVOLVING_FLG);
%let _OUTPUT_col53_input0 = REVOLVING_FLG;
%let _OUTPUT_col53_exp = ;
%let _OUTPUT_col53_input = REVOLVING_FLG;
%let _OUTPUT_col53_input_count = 1;
%let _OUTPUT_col54_name = SOURCE_CHANNEL_CD;
%let _OUTPUT_col54_table = work.W1PL05FAE;
%let _OUTPUT_col54_length = 3;
%let _OUTPUT_col54_type = $;
%let _OUTPUT_col54_format = $3.;
%let _OUTPUT_col54_informat = $3.;
%let _OUTPUT_col54_label = %nrquote(SOURCE_CHANNEL_CD);
%let _OUTPUT_col54_input0 = SOURCE_CHANNEL_CD;
%let _OUTPUT_col54_exp = ;
%let _OUTPUT_col54_input = SOURCE_CHANNEL_CD;
%let _OUTPUT_col54_input_count = 1;
%let _OUTPUT_col55_name = GRACE_PERIOD_DAYS_CNT;
%let _OUTPUT_col55_table = work.W1PL05FAE;
%let _OUTPUT_col55_length = 8;
%let _OUTPUT_col55_type = ;
%let _OUTPUT_col55_format = 8.;
%let _OUTPUT_col55_informat = 8.;
%let _OUTPUT_col55_label = %nrquote(GRACE_PERIOD_DAYS_CNT);
%let _OUTPUT_col55_input0 = GRACE_PERIOD_DAYS_CNT;
%let _OUTPUT_col55_exp = ;
%let _OUTPUT_col55_input = GRACE_PERIOD_DAYS_CNT;
%let _OUTPUT_col55_input_count = 1;
%let _OUTPUT_col56_name = REMARGINING_DAYS_CNT;
%let _OUTPUT_col56_table = work.W1PL05FAE;
%let _OUTPUT_col56_length = 8;
%let _OUTPUT_col56_type = ;
%let _OUTPUT_col56_format = 8.;
%let _OUTPUT_col56_informat = 8.;
%let _OUTPUT_col56_label = %nrquote(REMARGINING_DAYS_CNT);
%let _OUTPUT_col56_input0 = REMARGINING_DAYS_CNT;
%let _OUTPUT_col56_exp = ;
%let _OUTPUT_col56_input = REMARGINING_DAYS_CNT;
%let _OUTPUT_col56_input_count = 1;
%let _OUTPUT_col57_name = FINANCIAL_CALENDAR_RK;
%let _OUTPUT_col57_table = work.W1PL05FAE;
%let _OUTPUT_col57_length = 8;
%let _OUTPUT_col57_type = ;
%let _OUTPUT_col57_format = 12.;
%let _OUTPUT_col57_informat = 12.;
%let _OUTPUT_col57_label = %nrquote(FINANCIAL_CALENDAR_RK);
%let _OUTPUT_col57_input0 = FINANCIAL_CALENDAR_RK;
%let _OUTPUT_col57_exp = ;
%let _OUTPUT_col57_input = FINANCIAL_CALENDAR_RK;
%let _OUTPUT_col57_input_count = 1;
%let _OUTPUT_col58_name = DAY_BASIS_CD;
%let _OUTPUT_col58_table = work.W1PL05FAE;
%let _OUTPUT_col58_length = 10;
%let _OUTPUT_col58_type = $;
%let _OUTPUT_col58_format = $10.;
%let _OUTPUT_col58_informat = $10.;
%let _OUTPUT_col58_label = %nrquote(DAY_BASIS_CD);
%let _OUTPUT_col58_input0 = DAY_BASIS_CD;
%let _OUTPUT_col58_exp = ;
%let _OUTPUT_col58_input = DAY_BASIS_CD;
%let _OUTPUT_col58_input_count = 1;
%let _OUTPUT_col59_name = PORTFOLIO_ID;
%let _OUTPUT_col59_table = work.W1PL05FAE;
%let _OUTPUT_col59_length = 32;
%let _OUTPUT_col59_type = $;
%let _OUTPUT_col59_format = $32.;
%let _OUTPUT_col59_informat = $32.;
%let _OUTPUT_col59_label = %nrquote(PORTFOLIO_ID);
%let _OUTPUT_col59_input0 = PORTFOLIO_ID;
%let _OUTPUT_col59_exp = ;
%let _OUTPUT_col59_input = PORTFOLIO_ID;
%let _OUTPUT_col59_input_count = 1;
%let _OUTPUT_col60_name = SECURITIZATION_POOL_RK;
%let _OUTPUT_col60_table = work.W1PL05FAE;
%let _OUTPUT_col60_length = 8;
%let _OUTPUT_col60_type = ;
%let _OUTPUT_col60_format = 12.;
%let _OUTPUT_col60_informat = 12.;
%let _OUTPUT_col60_label = %nrquote(SECURITIZATION_POOL_RK);
%let _OUTPUT_col60_input0 = SECURITIZATION_POOL_RK;
%let _OUTPUT_col60_exp = ;
%let _OUTPUT_col60_input = SECURITIZATION_POOL_RK;
%let _OUTPUT_col60_input_count = 1;
%let _OUTPUT_col61_name = RECEIVABLES_POOL_RK;
%let _OUTPUT_col61_table = work.W1PL05FAE;
%let _OUTPUT_col61_length = 8;
%let _OUTPUT_col61_type = ;
%let _OUTPUT_col61_format = 12.;
%let _OUTPUT_col61_informat = 12.;
%let _OUTPUT_col61_label = %nrquote(RECEIVABLES_POOL_RK);
%let _OUTPUT_col61_input0 = RECEIVABLES_POOL_RK;
%let _OUTPUT_col61_exp = ;
%let _OUTPUT_col61_input = RECEIVABLES_POOL_RK;
%let _OUTPUT_col61_input_count = 1;
%let _OUTPUT_col62_name = ACCOUNT_USAGE_TYPE_CD;
%let _OUTPUT_col62_table = work.W1PL05FAE;
%let _OUTPUT_col62_length = 3;
%let _OUTPUT_col62_type = $;
%let _OUTPUT_col62_format = $3.;
%let _OUTPUT_col62_informat = $3.;
%let _OUTPUT_col62_label = %nrquote(ACCOUNT_USAGE_TYPE_CD);
%let _OUTPUT_col62_input0 = ACCOUNT_USAGE_TYPE_CD;
%let _OUTPUT_col62_exp = ;
%let _OUTPUT_col62_input = ACCOUNT_USAGE_TYPE_CD;
%let _OUTPUT_col62_input_count = 1;
%let _OUTPUT_col63_name = RISK_ALARM_FLG;
%let _OUTPUT_col63_table = work.W1PL05FAE;
%let _OUTPUT_col63_length = 1;
%let _OUTPUT_col63_type = $;
%let _OUTPUT_col63_format = $1.;
%let _OUTPUT_col63_informat = $1.;
%let _OUTPUT_col63_label = %nrquote(RISK_ALARM_FLG);
%let _OUTPUT_col63_input0 = RISK_ALARM_FLG;
%let _OUTPUT_col63_exp = ;
%let _OUTPUT_col63_input = RISK_ALARM_FLG;
%let _OUTPUT_col63_input_count = 1;
%let _OUTPUT_col64_name = LOW_PROFITABILITY_FLG;
%let _OUTPUT_col64_table = work.W1PL05FAE;
%let _OUTPUT_col64_length = 1;
%let _OUTPUT_col64_type = $;
%let _OUTPUT_col64_format = $1.;
%let _OUTPUT_col64_informat = $1.;
%let _OUTPUT_col64_label = %nrquote(LOW_PROFITABILITY_FLG);
%let _OUTPUT_col64_input0 = LOW_PROFITABILITY_FLG;
%let _OUTPUT_col64_exp = ;
%let _OUTPUT_col64_input = LOW_PROFITABILITY_FLG;
%let _OUTPUT_col64_input_count = 1;
%let _OUTPUT_col65_name = ACCOUNT_LIFECYCLE_STG_CD;
%let _OUTPUT_col65_table = work.W1PL05FAE;
%let _OUTPUT_col65_length = 3;
%let _OUTPUT_col65_type = $;
%let _OUTPUT_col65_format = $3.;
%let _OUTPUT_col65_informat = $3.;
%let _OUTPUT_col65_label = %nrquote(ACCOUNT_LIFECYCLE_STG_CD);
%let _OUTPUT_col65_input0 = ACCOUNT_LIFECYCLE_STG_CD;
%let _OUTPUT_col65_exp = ;
%let _OUTPUT_col65_input = ACCOUNT_LIFECYCLE_STG_CD;
%let _OUTPUT_col65_input_count = 1;
%let _OUTPUT_col66_name = ATTRITION_ALARM_FLG;
%let _OUTPUT_col66_table = work.W1PL05FAE;
%let _OUTPUT_col66_length = 1;
%let _OUTPUT_col66_type = $;
%let _OUTPUT_col66_format = $1.;
%let _OUTPUT_col66_informat = $1.;
%let _OUTPUT_col66_label = %nrquote(ATTRITION_ALARM_FLG);
%let _OUTPUT_col66_input0 = ATTRITION_ALARM_FLG;
%let _OUTPUT_col66_exp = ;
%let _OUTPUT_col66_input = ATTRITION_ALARM_FLG;
%let _OUTPUT_col66_input_count = 1;
%let _OUTPUT_col67_name = BALANCE_FROZEN_FLG;
%let _OUTPUT_col67_table = work.W1PL05FAE;
%let _OUTPUT_col67_length = 1;
%let _OUTPUT_col67_type = $;
%let _OUTPUT_col67_format = $1.;
%let _OUTPUT_col67_informat = $1.;
%let _OUTPUT_col67_label = %nrquote(BALANCE_FROZEN_FLG);
%let _OUTPUT_col67_input0 = BALANCE_FROZEN_FLG;
%let _OUTPUT_col67_exp = ;
%let _OUTPUT_col67_input = BALANCE_FROZEN_FLG;
%let _OUTPUT_col67_input_count = 1;
%let _OUTPUT_col68_name = BALANCE_FROZEN_DT;
%let _OUTPUT_col68_table = work.W1PL05FAE;
%let _OUTPUT_col68_length = 8;
%let _OUTPUT_col68_type = ;
%let _OUTPUT_col68_format = DATETIME20.;
%let _OUTPUT_col68_informat = DATETIME20.;
%let _OUTPUT_col68_label = %nrquote(BALANCE_FROZEN_DT);
%let _OUTPUT_col68_input0 = BALANCE_FROZEN_DT;
%let _OUTPUT_col68_exp = ;
%let _OUTPUT_col68_input = BALANCE_FROZEN_DT;
%let _OUTPUT_col68_input_count = 1;
%let _OUTPUT_col69_name = ACCOUNT_BLOCK_REASON_CD;
%let _OUTPUT_col69_table = work.W1PL05FAE;
%let _OUTPUT_col69_length = 3;
%let _OUTPUT_col69_type = $;
%let _OUTPUT_col69_format = $3.;
%let _OUTPUT_col69_informat = $3.;
%let _OUTPUT_col69_label = %nrquote(ACCOUNT_BLOCK_REASON_CD);
%let _OUTPUT_col69_input0 = ACCOUNT_BLOCK_REASON_CD;
%let _OUTPUT_col69_exp = ;
%let _OUTPUT_col69_input = ACCOUNT_BLOCK_REASON_CD;
%let _OUTPUT_col69_input_count = 1;
%let _OUTPUT_col70_name = TAXATION_STATE_CD;
%let _OUTPUT_col70_table = work.W1PL05FAE;
%let _OUTPUT_col70_length = 4;
%let _OUTPUT_col70_type = $;
%let _OUTPUT_col70_format = $4.;
%let _OUTPUT_col70_informat = $4.;
%let _OUTPUT_col70_label = %nrquote(TAXATION_STATE_CD);
%let _OUTPUT_col70_input0 = TAXATION_STATE_CD;
%let _OUTPUT_col70_exp = ;
%let _OUTPUT_col70_input = TAXATION_STATE_CD;
%let _OUTPUT_col70_input_count = 1;
%let _OUTPUT_col71_name = EFFECTIVE_MATURITY_YEAR_NO;
%let _OUTPUT_col71_table = work.W1PL05FAE;
%let _OUTPUT_col71_length = 8;
%let _OUTPUT_col71_type = ;
%let _OUTPUT_col71_format = 10.3;
%let _OUTPUT_col71_informat = 10.3;
%let _OUTPUT_col71_label = %nrquote(EFFECTIVE_MATURITY_YEAR_NO);
%let _OUTPUT_col71_input0 = EFFECTIVE_MATURITY_YEAR_NO;
%let _OUTPUT_col71_exp = ;
%let _OUTPUT_col71_input = EFFECTIVE_MATURITY_YEAR_NO;
%let _OUTPUT_col71_input_count = 1;
%let _OUTPUT_col72_name = GL_ACCOUNT_RK;
%let _OUTPUT_col72_table = work.W1PL05FAE;
%let _OUTPUT_col72_length = 8;
%let _OUTPUT_col72_type = ;
%let _OUTPUT_col72_format = 12.;
%let _OUTPUT_col72_informat = 12.;
%let _OUTPUT_col72_label = %nrquote(GL_ACCOUNT_RK);
%let _OUTPUT_col72_input0 = GL_ACCOUNT_RK;
%let _OUTPUT_col72_exp = ;
%let _OUTPUT_col72_input = GL_ACCOUNT_RK;
%let _OUTPUT_col72_input_count = 1;
%let _OUTPUT_col73_name = FROM_OTHER_INSTITUTION_FLG;
%let _OUTPUT_col73_table = work.W1PL05FAE;
%let _OUTPUT_col73_length = 1;
%let _OUTPUT_col73_type = $;
%let _OUTPUT_col73_format = $1.;
%let _OUTPUT_col73_informat = $1.;
%let _OUTPUT_col73_label = %nrquote(FROM_OTHER_INSTITUTION_FLG);
%let _OUTPUT_col73_input0 = FROM_OTHER_INSTITUTION_FLG;
%let _OUTPUT_col73_exp = ;
%let _OUTPUT_col73_input = FROM_OTHER_INSTITUTION_FLG;
%let _OUTPUT_col73_input_count = 1;
%let _OUTPUT_col74_name = ACCOUNT_RENEWAL_CNT;
%let _OUTPUT_col74_table = work.W1PL05FAE;
%let _OUTPUT_col74_length = 8;
%let _OUTPUT_col74_type = ;
%let _OUTPUT_col74_format = 8.;
%let _OUTPUT_col74_informat = 8.;
%let _OUTPUT_col74_label = %nrquote(ACCOUNT_RENEWAL_CNT);
%let _OUTPUT_col74_input0 = ACCOUNT_RENEWAL_CNT;
%let _OUTPUT_col74_exp = ;
%let _OUTPUT_col74_input = ACCOUNT_RENEWAL_CNT;
%let _OUTPUT_col74_input_count = 1;
%let _OUTPUT_col75_name = BALANCE_TRANSFER_DT;
%let _OUTPUT_col75_table = work.W1PL05FAE;
%let _OUTPUT_col75_length = 8;
%let _OUTPUT_col75_type = ;
%let _OUTPUT_col75_format = DATETIME20.;
%let _OUTPUT_col75_informat = DATETIME20.;
%let _OUTPUT_col75_label = %nrquote(BALANCE_TRANSFER_DT);
%let _OUTPUT_col75_input0 = BALANCE_TRANSFER_DT;
%let _OUTPUT_col75_exp = ;
%let _OUTPUT_col75_input = BALANCE_TRANSFER_DT;
%let _OUTPUT_col75_input_count = 1;
%let _OUTPUT_col76_name = BALANCE_TRANSFER_AMT;
%let _OUTPUT_col76_table = work.W1PL05FAE;
%let _OUTPUT_col76_length = 8;
%let _OUTPUT_col76_type = ;
%let _OUTPUT_col76_format = 21.5;
%let _OUTPUT_col76_informat = 21.5;
%let _OUTPUT_col76_label = %nrquote(BALANCE_TRANSFER_AMT);
%let _OUTPUT_col76_input0 = BALANCE_TRANSFER_AMT;
%let _OUTPUT_col76_exp = ;
%let _OUTPUT_col76_input = BALANCE_TRANSFER_AMT;
%let _OUTPUT_col76_input_count = 1;
%let _OUTPUT_col77_name = BALANCE_TRANSFER_CNT;
%let _OUTPUT_col77_table = work.W1PL05FAE;
%let _OUTPUT_col77_length = 8;
%let _OUTPUT_col77_type = ;
%let _OUTPUT_col77_format = 8.;
%let _OUTPUT_col77_informat = 8.;
%let _OUTPUT_col77_label = %nrquote(BALANCE_TRANSFER_CNT);
%let _OUTPUT_col77_input0 = BALANCE_TRANSFER_CNT;
%let _OUTPUT_col77_exp = ;
%let _OUTPUT_col77_input = BALANCE_TRANSFER_CNT;
%let _OUTPUT_col77_input_count = 1;
%let _OUTPUT_col78_name = BASE_LONG_TERM_APR_RT;
%let _OUTPUT_col78_table = work.W1PL05FAE;
%let _OUTPUT_col78_length = 8;
%let _OUTPUT_col78_type = ;
%let _OUTPUT_col78_format = 12.4;
%let _OUTPUT_col78_informat = 12.4;
%let _OUTPUT_col78_label = %nrquote(BASE_LONG_TERM_APR_RT);
%let _OUTPUT_col78_input0 = BASE_LONG_TERM_APR_RT;
%let _OUTPUT_col78_exp = ;
%let _OUTPUT_col78_input = BASE_LONG_TERM_APR_RT;
%let _OUTPUT_col78_input_count = 1;
%let _OUTPUT_col79_name = BROKER_FLG;
%let _OUTPUT_col79_table = work.W1PL05FAE;
%let _OUTPUT_col79_length = 1;
%let _OUTPUT_col79_type = $;
%let _OUTPUT_col79_format = $1.;
%let _OUTPUT_col79_informat = $1.;
%let _OUTPUT_col79_label = %nrquote(BROKER_FLG);
%let _OUTPUT_col79_input0 = BROKER_FLG;
%let _OUTPUT_col79_exp = ;
%let _OUTPUT_col79_input = BROKER_FLG;
%let _OUTPUT_col79_input_count = 1;
%let _OUTPUT_col80_name = MULT_RATE_FLG;
%let _OUTPUT_col80_table = work.W1PL05FAE;
%let _OUTPUT_col80_length = 1;
%let _OUTPUT_col80_type = $;
%let _OUTPUT_col80_format = $1.;
%let _OUTPUT_col80_informat = $1.;
%let _OUTPUT_col80_label = %nrquote(MULT_RATE_FLG);
%let _OUTPUT_col80_input0 = MULT_RATE_FLG;
%let _OUTPUT_col80_exp = ;
%let _OUTPUT_col80_input = MULT_RATE_FLG;
%let _OUTPUT_col80_input_count = 1;
%let _OUTPUT_col81_name = AUTO_DEBIT_ACCOUNT_NO;
%let _OUTPUT_col81_table = work.W1PL05FAE;
%let _OUTPUT_col81_length = 32;
%let _OUTPUT_col81_type = $;
%let _OUTPUT_col81_format = $32.;
%let _OUTPUT_col81_informat = $32.;
%let _OUTPUT_col81_label = %nrquote(AUTO_DEBIT_ACCOUNT_NO);
%let _OUTPUT_col81_input0 = AUTO_DEBIT_ACCOUNT_NO;
%let _OUTPUT_col81_exp = ;
%let _OUTPUT_col81_input = AUTO_DEBIT_ACCOUNT_NO;
%let _OUTPUT_col81_input_count = 1;
%let _OUTPUT_col82_name = WORST_STATUS_LAST_12_MTH_CD;
%let _OUTPUT_col82_table = work.W1PL05FAE;
%let _OUTPUT_col82_length = 3;
%let _OUTPUT_col82_type = $;
%let _OUTPUT_col82_format = $3.;
%let _OUTPUT_col82_informat = $3.;
%let _OUTPUT_col82_label = %nrquote(WORST_STATUS_LAST_12_MTH_CD);
%let _OUTPUT_col82_input0 = WORST_STATUS_LAST_12_MTH_CD;
%let _OUTPUT_col82_exp = ;
%let _OUTPUT_col82_input = WORST_STATUS_LAST_12_MTH_CD;
%let _OUTPUT_col82_input_count = 1;
%let _OUTPUT_col83_name = WORST_STATUS_LAST_12_MTH_DT;
%let _OUTPUT_col83_table = work.W1PL05FAE;
%let _OUTPUT_col83_length = 8;
%let _OUTPUT_col83_type = ;
%let _OUTPUT_col83_format = DATETIME20.;
%let _OUTPUT_col83_informat = DATETIME20.;
%let _OUTPUT_col83_label = %nrquote(WORST_STATUS_LAST_12_MTH_DT);
%let _OUTPUT_col83_input0 = WORST_STATUS_LAST_12_MTH_DT;
%let _OUTPUT_col83_exp = ;
%let _OUTPUT_col83_input = WORST_STATUS_LAST_12_MTH_DT;
%let _OUTPUT_col83_input_count = 1;
%let _OUTPUT_col84_name = BALANCE_TRNSF_OTHER_ACCT_CNT;
%let _OUTPUT_col84_table = work.W1PL05FAE;
%let _OUTPUT_col84_length = 8;
%let _OUTPUT_col84_type = ;
%let _OUTPUT_col84_format = 8.;
%let _OUTPUT_col84_informat = 8.;
%let _OUTPUT_col84_label = %nrquote(BALANCE_TRNSF_OTHER_ACCT_CNT);
%let _OUTPUT_col84_input0 = BALANCE_TRNSF_OTHER_ACCT_CNT;
%let _OUTPUT_col84_exp = ;
%let _OUTPUT_col84_input = BALANCE_TRNSF_OTHER_ACCT_CNT;
%let _OUTPUT_col84_input_count = 1;
%let _OUTPUT_col85_name = EFFECTIVE_FROM_DTTM;
%let _OUTPUT_col85_table = work.W1PL05FAE;
%let _OUTPUT_col85_length = 8;
%let _OUTPUT_col85_type = ;
%let _OUTPUT_col85_format = DATETIME20.;
%let _OUTPUT_col85_informat = DATETIME20.;
%let _OUTPUT_col85_label = %nrquote(EFFECTIVE_FROM_DTTM);
%let _OUTPUT_col85_input0 = EFFECTIVE_FROM_DTTM;
%let _OUTPUT_col85_exp = ;
%let _OUTPUT_col85_input = EFFECTIVE_FROM_DTTM;
%let _OUTPUT_col85_input_count = 1;
%let _OUTPUT_col86_name = EFFECTIVE_TO_DTTM;
%let _OUTPUT_col86_table = work.W1PL05FAE;
%let _OUTPUT_col86_length = 8;
%let _OUTPUT_col86_type = ;
%let _OUTPUT_col86_format = DATETIME20.;
%let _OUTPUT_col86_informat = DATETIME20.;
%let _OUTPUT_col86_label = %nrquote(EFFECTIVE_TO_DTTM);
%let _OUTPUT_col86_input0 = EFFECTIVE_TO_DTTM;
%let _OUTPUT_col86_exp = ;
%let _OUTPUT_col86_input = EFFECTIVE_TO_DTTM;
%let _OUTPUT_col86_input_count = 1;
%let _OUTPUT_col87_name = COUNTERPARTY_RK;
%let _OUTPUT_col87_table = work.W1PL05FAE;
%let _OUTPUT_col87_length = 8;
%let _OUTPUT_col87_type = ;
%let _OUTPUT_col87_format = 12.;
%let _OUTPUT_col87_informat = 12.;
%let _OUTPUT_col87_label = %nrquote(COUNTERPARTY_RK);
%let _OUTPUT_col87_input0 = COUNTERPARTY_RK;
%let _OUTPUT_col87_exp = ;
%let _OUTPUT_col87_input = COUNTERPARTY_RK;
%let _OUTPUT_col87_input_count = 1;
%let _OUTPUT_col88_name = INSURED_BY_COUNTERPARTY_RK;
%let _OUTPUT_col88_table = work.W1PL05FAE;
%let _OUTPUT_col88_length = 8;
%let _OUTPUT_col88_type = ;
%let _OUTPUT_col88_format = 12.;
%let _OUTPUT_col88_informat = 12.;
%let _OUTPUT_col88_label = %nrquote(INSURED_BY_COUNTERPARTY_RK);
%let _OUTPUT_col88_input0 = INSURED_BY_COUNTERPARTY_RK;
%let _OUTPUT_col88_exp = ;
%let _OUTPUT_col88_input = INSURED_BY_COUNTERPARTY_RK;
%let _OUTPUT_col88_input_count = 1;
%let _OUTPUT_col89_name = STATEMENT_FREQUENCY_CD;
%let _OUTPUT_col89_table = work.W1PL05FAE;
%let _OUTPUT_col89_length = 3;
%let _OUTPUT_col89_type = $;
%let _OUTPUT_col89_format = $3.;
%let _OUTPUT_col89_informat = $3.;
%let _OUTPUT_col89_label = %nrquote(STATEMENT_FREQUENCY_CD);
%let _OUTPUT_col89_input0 = STATEMENT_FREQUENCY_CD;
%let _OUTPUT_col89_exp = ;
%let _OUTPUT_col89_input = STATEMENT_FREQUENCY_CD;
%let _OUTPUT_col89_input_count = 1;
%let _OUTPUT_col90_name = SECURITY_DEPOSIT_AMT;
%let _OUTPUT_col90_table = work.W1PL05FAE;
%let _OUTPUT_col90_length = 8;
%let _OUTPUT_col90_type = ;
%let _OUTPUT_col90_format = 21.5;
%let _OUTPUT_col90_informat = 21.5;
%let _OUTPUT_col90_label = %nrquote(SECURITY_DEPOSIT_AMT);
%let _OUTPUT_col90_input0 = SECURITY_DEPOSIT_AMT;
%let _OUTPUT_col90_exp = ;
%let _OUTPUT_col90_input = SECURITY_DEPOSIT_AMT;
%let _OUTPUT_col90_input_count = 1;
%let _OUTPUT_col91_name = SECURITY_DEPOSIT_REFUND_AMT;
%let _OUTPUT_col91_table = work.W1PL05FAE;
%let _OUTPUT_col91_length = 8;
%let _OUTPUT_col91_type = ;
%let _OUTPUT_col91_format = 21.5;
%let _OUTPUT_col91_informat = 21.5;
%let _OUTPUT_col91_label = %nrquote(SECURITY_DEPOSIT_REFUND_AMT);
%let _OUTPUT_col91_input0 = SECURITY_DEPOSIT_REFUND_AMT;
%let _OUTPUT_col91_exp = ;
%let _OUTPUT_col91_input = SECURITY_DEPOSIT_REFUND_AMT;
%let _OUTPUT_col91_input_count = 1;
%let _OUTPUT_col92_name = FIRST_PAYMENT_DT;
%let _OUTPUT_col92_table = work.W1PL05FAE;
%let _OUTPUT_col92_length = 8;
%let _OUTPUT_col92_type = ;
%let _OUTPUT_col92_format = DATETIME20.;
%let _OUTPUT_col92_informat = DATETIME20.;
%let _OUTPUT_col92_label = %nrquote(FIRST_PAYMENT_DT);
%let _OUTPUT_col92_input0 = FIRST_PAYMENT_DT;
%let _OUTPUT_col92_exp = ;
%let _OUTPUT_col92_input = FIRST_PAYMENT_DT;
%let _OUTPUT_col92_input_count = 1;
%let _OUTPUT_col93_name = LAST_PAYMENT_DT;
%let _OUTPUT_col93_table = work.W1PL05FAE;
%let _OUTPUT_col93_length = 8;
%let _OUTPUT_col93_type = ;
%let _OUTPUT_col93_format = DATETIME20.;
%let _OUTPUT_col93_informat = DATETIME20.;
%let _OUTPUT_col93_label = %nrquote(LAST_PAYMENT_DT);
%let _OUTPUT_col93_input0 = LAST_PAYMENT_DT;
%let _OUTPUT_col93_exp = ;
%let _OUTPUT_col93_input = LAST_PAYMENT_DT;
%let _OUTPUT_col93_input_count = 1;
%let _OUTPUT_col94_name = FIRST_RESET_DT;
%let _OUTPUT_col94_table = work.W1PL05FAE;
%let _OUTPUT_col94_length = 8;
%let _OUTPUT_col94_type = ;
%let _OUTPUT_col94_format = DATETIME20.;
%let _OUTPUT_col94_informat = DATETIME20.;
%let _OUTPUT_col94_label = %nrquote(FIRST_RESET_DT);
%let _OUTPUT_col94_input0 = FIRST_RESET_DT;
%let _OUTPUT_col94_exp = ;
%let _OUTPUT_col94_input = FIRST_RESET_DT;
%let _OUTPUT_col94_input_count = 1;
%let _OUTPUT_col95_name = LAST_RESET_DT;
%let _OUTPUT_col95_table = work.W1PL05FAE;
%let _OUTPUT_col95_length = 8;
%let _OUTPUT_col95_type = ;
%let _OUTPUT_col95_format = DATETIME20.;
%let _OUTPUT_col95_informat = DATETIME20.;
%let _OUTPUT_col95_label = %nrquote(LAST_RESET_DT);
%let _OUTPUT_col95_input0 = LAST_RESET_DT;
%let _OUTPUT_col95_exp = ;
%let _OUTPUT_col95_input = LAST_RESET_DT;
%let _OUTPUT_col95_input_count = 1;
%let _OUTPUT_col96_name = RESETS_PER_ANNUM_NO;
%let _OUTPUT_col96_table = work.W1PL05FAE;
%let _OUTPUT_col96_length = 8;
%let _OUTPUT_col96_type = ;
%let _OUTPUT_col96_format = 7.;
%let _OUTPUT_col96_informat = 7.;
%let _OUTPUT_col96_label = %nrquote(RESETS_PER_ANNUM_NO);
%let _OUTPUT_col96_input0 = RESETS_PER_ANNUM_NO;
%let _OUTPUT_col96_exp = ;
%let _OUTPUT_col96_input = RESETS_PER_ANNUM_NO;
%let _OUTPUT_col96_input_count = 1;
%let _OUTPUT_col97_name = PRINCIPAL_PAYMENT_TYPE_CD;
%let _OUTPUT_col97_table = work.W1PL05FAE;
%let _OUTPUT_col97_length = 3;
%let _OUTPUT_col97_type = $;
%let _OUTPUT_col97_format = $3.;
%let _OUTPUT_col97_informat = $3.;
%let _OUTPUT_col97_label = %nrquote(PRINCIPAL_PAYMENT_TYPE_CD);
%let _OUTPUT_col97_input0 = PRINCIPAL_PAYMENT_TYPE_CD;
%let _OUTPUT_col97_exp = ;
%let _OUTPUT_col97_input = PRINCIPAL_PAYMENT_TYPE_CD;
%let _OUTPUT_col97_input_count = 1;
%let _OUTPUT_col98_name = PRINCIPAL_PAYMENT_AMT;
%let _OUTPUT_col98_table = work.W1PL05FAE;
%let _OUTPUT_col98_length = 8;
%let _OUTPUT_col98_type = ;
%let _OUTPUT_col98_format = 21.5;
%let _OUTPUT_col98_informat = 21.5;
%let _OUTPUT_col98_label = %nrquote(PRINCIPAL_PAYMENT_AMT);
%let _OUTPUT_col98_input0 = PRINCIPAL_PAYMENT_AMT;
%let _OUTPUT_col98_exp = ;
%let _OUTPUT_col98_input = PRINCIPAL_PAYMENT_AMT;
%let _OUTPUT_col98_input_count = 1;
%let _OUTPUT_col99_name = RATE_POLICY_RK;
%let _OUTPUT_col99_table = work.W1PL05FAE;
%let _OUTPUT_col99_length = 8;
%let _OUTPUT_col99_type = ;
%let _OUTPUT_col99_format = 12.;
%let _OUTPUT_col99_informat = 12.;
%let _OUTPUT_col99_label = %nrquote(RATE_POLICY_RK);
%let _OUTPUT_col99_input0 = RATE_POLICY_RK;
%let _OUTPUT_col99_exp = ;
%let _OUTPUT_col99_input = RATE_POLICY_RK;
%let _OUTPUT_col99_input_count = 1;
%let _OUTPUT_col100_name = SPREAD_RT;
%let _OUTPUT_col100_table = work.W1PL05FAE;
%let _OUTPUT_col100_length = 8;
%let _OUTPUT_col100_type = ;
%let _OUTPUT_col100_format = 12.4;
%let _OUTPUT_col100_informat = 12.4;
%let _OUTPUT_col100_label = %nrquote(SPREAD_RT);
%let _OUTPUT_col100_input0 = SPREAD_RT;
%let _OUTPUT_col100_exp = ;
%let _OUTPUT_col100_input = SPREAD_RT;
%let _OUTPUT_col100_input_count = 1;
%let _OUTPUT_col101_name = DISCOUNT_SPREAD_RT;
%let _OUTPUT_col101_table = work.W1PL05FAE;
%let _OUTPUT_col101_length = 8;
%let _OUTPUT_col101_type = ;
%let _OUTPUT_col101_format = 12.4;
%let _OUTPUT_col101_informat = 12.4;
%let _OUTPUT_col101_label = %nrquote(DISCOUNT_SPREAD_RT);
%let _OUTPUT_col101_input0 = DISCOUNT_SPREAD_RT;
%let _OUTPUT_col101_exp = ;
%let _OUTPUT_col101_input = DISCOUNT_SPREAD_RT;
%let _OUTPUT_col101_input_count = 1;
%let _OUTPUT_col102_name = INITIAL_CONTRACT_RT;
%let _OUTPUT_col102_table = work.W1PL05FAE;
%let _OUTPUT_col102_length = 8;
%let _OUTPUT_col102_type = ;
%let _OUTPUT_col102_format = 12.4;
%let _OUTPUT_col102_informat = 12.4;
%let _OUTPUT_col102_label = %nrquote(INITIAL_CONTRACT_RT);
%let _OUTPUT_col102_input0 = INITIAL_CONTRACT_RT;
%let _OUTPUT_col102_exp = ;
%let _OUTPUT_col102_input = INITIAL_CONTRACT_RT;
%let _OUTPUT_col102_input_count = 1;
%let _OUTPUT_col103_name = FIXED_MONTHLY_PREPAYMENT_RT;
%let _OUTPUT_col103_table = work.W1PL05FAE;
%let _OUTPUT_col103_length = 8;
%let _OUTPUT_col103_type = ;
%let _OUTPUT_col103_format = 12.4;
%let _OUTPUT_col103_informat = 12.4;
%let _OUTPUT_col103_label = %nrquote(FIXED_MONTHLY_PREPAYMENT_RT);
%let _OUTPUT_col103_input0 = FIXED_MONTHLY_PREPAYMENT_RT;
%let _OUTPUT_col103_exp = ;
%let _OUTPUT_col103_input = FIXED_MONTHLY_PREPAYMENT_RT;
%let _OUTPUT_col103_input_count = 1;
%let _OUTPUT_col104_name = CAPITAL_ALLOCATION_RK;
%let _OUTPUT_col104_table = work.W1PL05FAE;
%let _OUTPUT_col104_length = 8;
%let _OUTPUT_col104_type = ;
%let _OUTPUT_col104_format = 12.;
%let _OUTPUT_col104_informat = 12.;
%let _OUTPUT_col104_label = %nrquote(CAPITAL_ALLOCATION_RK);
%let _OUTPUT_col104_input0 = CAPITAL_ALLOCATION_RK;
%let _OUTPUT_col104_exp = ;
%let _OUTPUT_col104_input = CAPITAL_ALLOCATION_RK;
%let _OUTPUT_col104_input_count = 1;
%let _OUTPUT_col105_name = CAPITAL_COST_RK;
%let _OUTPUT_col105_table = work.W1PL05FAE;
%let _OUTPUT_col105_length = 8;
%let _OUTPUT_col105_type = ;
%let _OUTPUT_col105_format = 12.;
%let _OUTPUT_col105_informat = 12.;
%let _OUTPUT_col105_label = %nrquote(CAPITAL_COST_RK);
%let _OUTPUT_col105_input0 = CAPITAL_COST_RK;
%let _OUTPUT_col105_exp = ;
%let _OUTPUT_col105_input = CAPITAL_COST_RK;
%let _OUTPUT_col105_input_count = 1;
%let _OUTPUT_col106_name = SEGMENT_RK;
%let _OUTPUT_col106_table = work.W1PL05FAE;
%let _OUTPUT_col106_length = 8;
%let _OUTPUT_col106_type = ;
%let _OUTPUT_col106_format = 12.;
%let _OUTPUT_col106_informat = 12.;
%let _OUTPUT_col106_label = %nrquote(SEGMENT_RK);
%let _OUTPUT_col106_input0 = SEGMENT_RK;
%let _OUTPUT_col106_exp = ;
%let _OUTPUT_col106_input = SEGMENT_RK;
%let _OUTPUT_col106_input_count = 1;
%let _OUTPUT_col107_name = NEAR_BRANCH_FINANCIAL_UNIT_RK;
%let _OUTPUT_col107_table = work.W1PL05FAE;
%let _OUTPUT_col107_length = 8;
%let _OUTPUT_col107_type = ;
%let _OUTPUT_col107_format = 12.;
%let _OUTPUT_col107_informat = 12.;
%let _OUTPUT_col107_label = %nrquote(NEAR_BRANCH_FINANCIAL_UNIT_RK);
%let _OUTPUT_col107_input0 = NEAR_BRANCH_FINANCIAL_UNIT_RK;
%let _OUTPUT_col107_exp = ;
%let _OUTPUT_col107_input = NEAR_BRANCH_FINANCIAL_UNIT_RK;
%let _OUTPUT_col107_input_count = 1;
%let _OUTPUT_col108_name = STATEMENT_OPT_FLG;
%let _OUTPUT_col108_table = work.W1PL05FAE;
%let _OUTPUT_col108_length = 1;
%let _OUTPUT_col108_type = $;
%let _OUTPUT_col108_format = $1.;
%let _OUTPUT_col108_informat = $1.;
%let _OUTPUT_col108_label = %nrquote(STATEMENT_OPT_FLG);
%let _OUTPUT_col108_input0 = STATEMENT_OPT_FLG;
%let _OUTPUT_col108_exp = ;
%let _OUTPUT_col108_input = STATEMENT_OPT_FLG;
%let _OUTPUT_col108_input_count = 1;
%let _OUTPUT_col109_name = VALUE_SCALING_FACTOR_RT;
%let _OUTPUT_col109_table = work.W1PL05FAE;
%let _OUTPUT_col109_length = 8;
%let _OUTPUT_col109_type = ;
%let _OUTPUT_col109_format = 12.4;
%let _OUTPUT_col109_informat = 12.4;
%let _OUTPUT_col109_label = %nrquote(VALUE_SCALING_FACTOR_RT);
%let _OUTPUT_col109_input0 = VALUE_SCALING_FACTOR_RT;
%let _OUTPUT_col109_exp = ;
%let _OUTPUT_col109_input = VALUE_SCALING_FACTOR_RT;
%let _OUTPUT_col109_input_count = 1;
%let _OUTPUT_col110_name = INTERNAL_REPORTING_CATEGORY_CD;
%let _OUTPUT_col110_table = work.W1PL05FAE;
%let _OUTPUT_col110_length = 3;
%let _OUTPUT_col110_type = $;
%let _OUTPUT_col110_format = $3.;
%let _OUTPUT_col110_informat = $3.;
%let _OUTPUT_col110_label = %nrquote(INTERNAL_REPORTING_CATEGORY_CD);
%let _OUTPUT_col110_input0 = INTERNAL_REPORTING_CATEGORY_CD;
%let _OUTPUT_col110_exp = ;
%let _OUTPUT_col110_input = INTERNAL_REPORTING_CATEGORY_CD;
%let _OUTPUT_col110_input_count = 1;
%let _OUTPUT_col111_name = CONVEXITY_ADJUSTMENT_FLG;
%let _OUTPUT_col111_table = work.W1PL05FAE;
%let _OUTPUT_col111_length = 1;
%let _OUTPUT_col111_type = $;
%let _OUTPUT_col111_format = $1.;
%let _OUTPUT_col111_informat = $1.;
%let _OUTPUT_col111_label = %nrquote(CONVEXITY_ADJUSTMENT_FLG);
%let _OUTPUT_col111_input0 = CONVEXITY_ADJUSTMENT_FLG;
%let _OUTPUT_col111_exp = ;
%let _OUTPUT_col111_input = CONVEXITY_ADJUSTMENT_FLG;
%let _OUTPUT_col111_input_count = 1;
%let _OUTPUT_col112_name = ARREARS_PAYMENT_CD;
%let _OUTPUT_col112_table = work.W1PL05FAE;
%let _OUTPUT_col112_length = 3;
%let _OUTPUT_col112_type = $;
%let _OUTPUT_col112_format = $3.;
%let _OUTPUT_col112_informat = $3.;
%let _OUTPUT_col112_label = %nrquote(ARREARS_PAYMENT_CD);
%let _OUTPUT_col112_input0 = ARREARS_PAYMENT_CD;
%let _OUTPUT_col112_exp = ;
%let _OUTPUT_col112_input = ARREARS_PAYMENT_CD;
%let _OUTPUT_col112_input_count = 1;
%let _OUTPUT_col113_name = QUANTO_FEATURE_RK;
%let _OUTPUT_col113_table = work.W1PL05FAE;
%let _OUTPUT_col113_length = 8;
%let _OUTPUT_col113_type = ;
%let _OUTPUT_col113_format = 12.;
%let _OUTPUT_col113_informat = 12.;
%let _OUTPUT_col113_label = %nrquote(QUANTO_FEATURE_RK);
%let _OUTPUT_col113_input0 = QUANTO_FEATURE_RK;
%let _OUTPUT_col113_exp = ;
%let _OUTPUT_col113_input = QUANTO_FEATURE_RK;
%let _OUTPUT_col113_input_count = 1;
%let _OUTPUT_col114_name = CASH_INTENSIVE_BUSINESS_FLG;
%let _OUTPUT_col114_table = work.W1PL05FAE;
%let _OUTPUT_col114_length = 1;
%let _OUTPUT_col114_type = $;
%let _OUTPUT_col114_format = $1.;
%let _OUTPUT_col114_informat = $1.;
%let _OUTPUT_col114_label = %nrquote(CASH_INTENSIVE_BUSINESS_FLG);
%let _OUTPUT_col114_input0 = CASH_INTENSIVE_BUSINESS_FLG;
%let _OUTPUT_col114_exp = ;
%let _OUTPUT_col114_input = CASH_INTENSIVE_BUSINESS_FLG;
%let _OUTPUT_col114_input_count = 1;
%let _OUTPUT_col115_name = LETTER_OF_CREDIT_ONFILE_FLG;
%let _OUTPUT_col115_table = work.W1PL05FAE;
%let _OUTPUT_col115_length = 1;
%let _OUTPUT_col115_type = $;
%let _OUTPUT_col115_format = $1.;
%let _OUTPUT_col115_informat = $1.;
%let _OUTPUT_col115_label = %nrquote(LETTER_OF_CREDIT_ONFILE_FLG);
%let _OUTPUT_col115_input0 = LETTER_OF_CREDIT_ONFILE_FLG;
%let _OUTPUT_col115_exp = ;
%let _OUTPUT_col115_input = LETTER_OF_CREDIT_ONFILE_FLG;
%let _OUTPUT_col115_input_count = 1;
%let _OUTPUT_col116_name = TRADE_FINANCE_FLG;
%let _OUTPUT_col116_table = work.W1PL05FAE;
%let _OUTPUT_col116_length = 1;
%let _OUTPUT_col116_type = $;
%let _OUTPUT_col116_format = $1.;
%let _OUTPUT_col116_informat = $1.;
%let _OUTPUT_col116_label = %nrquote(TRADE_FINANCE_FLG);
%let _OUTPUT_col116_input0 = TRADE_FINANCE_FLG;
%let _OUTPUT_col116_exp = ;
%let _OUTPUT_col116_input = TRADE_FINANCE_FLG;
%let _OUTPUT_col116_input_count = 1;
%let _OUTPUT_col117_name = ANNUITY_PAYMENT_TYPE_CD;
%let _OUTPUT_col117_table = work.W1PL05FAE;
%let _OUTPUT_col117_length = 3;
%let _OUTPUT_col117_type = $;
%let _OUTPUT_col117_format = $3.;
%let _OUTPUT_col117_informat = $3.;
%let _OUTPUT_col117_label = %nrquote(ANNUITY_PAYMENT_TYPE_CD);
%let _OUTPUT_col117_input0 = ANNUITY_PAYMENT_TYPE_CD;
%let _OUTPUT_col117_exp = ;
%let _OUTPUT_col117_input = ANNUITY_PAYMENT_TYPE_CD;
%let _OUTPUT_col117_input_count = 1;
%let _OUTPUT_col118_name = INTEREST_PAYMENT_TYPE_CD;
%let _OUTPUT_col118_table = work.W1PL05FAE;
%let _OUTPUT_col118_length = 3;
%let _OUTPUT_col118_type = $;
%let _OUTPUT_col118_format = $3.;
%let _OUTPUT_col118_informat = $3.;
%let _OUTPUT_col118_label = %nrquote(INTEREST_PAYMENT_TYPE_CD);
%let _OUTPUT_col118_input0 = INTEREST_PAYMENT_TYPE_CD;
%let _OUTPUT_col118_exp = ;
%let _OUTPUT_col118_input = INTEREST_PAYMENT_TYPE_CD;
%let _OUTPUT_col118_input_count = 1;
%let _OUTPUT_col119_name = INTEREST_PAYMENT_TIME_FREQ_CD;
%let _OUTPUT_col119_table = work.W1PL05FAE;
%let _OUTPUT_col119_length = 3;
%let _OUTPUT_col119_type = $;
%let _OUTPUT_col119_format = $3.;
%let _OUTPUT_col119_informat = $3.;
%let _OUTPUT_col119_label = %nrquote(INTEREST_PAYMENT_TIME_FREQ_CD);
%let _OUTPUT_col119_input0 = INTEREST_PAYMENT_TIME_FREQ_CD;
%let _OUTPUT_col119_exp = ;
%let _OUTPUT_col119_input = INTEREST_PAYMENT_TIME_FREQ_CD;
%let _OUTPUT_col119_input_count = 1;
%let _OUTPUT_col120_name = LIQUIDITY_CATEGORY_TYPE_CD;
%let _OUTPUT_col120_table = work.W1PL05FAE;
%let _OUTPUT_col120_length = 3;
%let _OUTPUT_col120_type = $;
%let _OUTPUT_col120_format = $3.;
%let _OUTPUT_col120_informat = $3.;
%let _OUTPUT_col120_label = %nrquote(LIQUIDITY_CATEGORY_TYPE_CD);
%let _OUTPUT_col120_input0 = LIQUIDITY_CATEGORY_TYPE_CD;
%let _OUTPUT_col120_exp = ;
%let _OUTPUT_col120_input = LIQUIDITY_CATEGORY_TYPE_CD;
%let _OUTPUT_col120_input_count = 1;
%let _OUTPUT_col121_name = HOLIDAY_DATE_ROLL_CONV_CD;
%let _OUTPUT_col121_table = work.W1PL05FAE;
%let _OUTPUT_col121_length = 3;
%let _OUTPUT_col121_type = $;
%let _OUTPUT_col121_format = $3.;
%let _OUTPUT_col121_informat = $3.;
%let _OUTPUT_col121_label = %nrquote(HOLIDAY_DATE_ROLL_CONV_CD);
%let _OUTPUT_col121_input0 = HOLIDAY_DATE_ROLL_CONV_CD;
%let _OUTPUT_col121_exp = ;
%let _OUTPUT_col121_input = HOLIDAY_DATE_ROLL_CONV_CD;
%let _OUTPUT_col121_input_count = 1;
%let _OUTPUT_col122_name = WEEKEND_DATE_ROLL_CONV_CD;
%let _OUTPUT_col122_table = work.W1PL05FAE;
%let _OUTPUT_col122_length = 3;
%let _OUTPUT_col122_type = $;
%let _OUTPUT_col122_format = $3.;
%let _OUTPUT_col122_informat = $3.;
%let _OUTPUT_col122_label = %nrquote(WEEKEND_DATE_ROLL_CONV_CD);
%let _OUTPUT_col122_input0 = WEEKEND_DATE_ROLL_CONV_CD;
%let _OUTPUT_col122_exp = ;
%let _OUTPUT_col122_input = WEEKEND_DATE_ROLL_CONV_CD;
%let _OUTPUT_col122_input_count = 1;
%let _OUTPUT_col123_name = EXPENSE_ALLOCATION_RK;
%let _OUTPUT_col123_table = work.W1PL05FAE;
%let _OUTPUT_col123_length = 8;
%let _OUTPUT_col123_type = ;
%let _OUTPUT_col123_format = 12.;
%let _OUTPUT_col123_informat = 12.;
%let _OUTPUT_col123_label = %nrquote(EXPENSE_ALLOCATION_RK);
%let _OUTPUT_col123_input0 = EXPENSE_ALLOCATION_RK;
%let _OUTPUT_col123_exp = ;
%let _OUTPUT_col123_input = EXPENSE_ALLOCATION_RK;
%let _OUTPUT_col123_input_count = 1;
%let _OUTPUT_col124_name = FIRST_INTEREST_PAYMENT_DT;
%let _OUTPUT_col124_table = work.W1PL05FAE;
%let _OUTPUT_col124_length = 8;
%let _OUTPUT_col124_type = ;
%let _OUTPUT_col124_format = DATETIME20.;
%let _OUTPUT_col124_informat = DATETIME20.;
%let _OUTPUT_col124_label = %nrquote(FIRST_INTEREST_PAYMENT_DT);
%let _OUTPUT_col124_input0 = FIRST_INTEREST_PAYMENT_DT;
%let _OUTPUT_col124_exp = ;
%let _OUTPUT_col124_input = FIRST_INTEREST_PAYMENT_DT;
%let _OUTPUT_col124_input_count = 1;
%let _OUTPUT_col125_name = LAST_INTEREST_PAYMENT_DT;
%let _OUTPUT_col125_table = work.W1PL05FAE;
%let _OUTPUT_col125_length = 8;
%let _OUTPUT_col125_type = ;
%let _OUTPUT_col125_format = DATETIME20.;
%let _OUTPUT_col125_informat = DATETIME20.;
%let _OUTPUT_col125_label = %nrquote(LAST_INTEREST_PAYMENT_DT);
%let _OUTPUT_col125_input0 = LAST_INTEREST_PAYMENT_DT;
%let _OUTPUT_col125_exp = ;
%let _OUTPUT_col125_input = LAST_INTEREST_PAYMENT_DT;
%let _OUTPUT_col125_input_count = 1;
%let _OUTPUT_col126_name = PROCESSED_DTTM;
%let _OUTPUT_col126_table = work.W1PL05FAE;
%let _OUTPUT_col126_length = 8;
%let _OUTPUT_col126_type = ;
%let _OUTPUT_col126_format = DATETIME20.;
%let _OUTPUT_col126_informat = DATETIME20.;
%let _OUTPUT_col126_label = %nrquote(PROCESSED_DTTM);
%let _OUTPUT_col126_input0 = PROCESSED_DTTM;
%let _OUTPUT_col126_exp = ;
%let _OUTPUT_col126_input = PROCESSED_DTTM;
%let _OUTPUT_col126_input_count = 1;
%let _OUTPUT_col127_name = IRB_DUMMY_TYPE_CD;
%let _OUTPUT_col127_table = work.W1PL05FAE;
%let _OUTPUT_col127_length = 3;
%let _OUTPUT_col127_type = $;
%let _OUTPUT_col127_format = $3.;
%let _OUTPUT_col127_informat = $3.;
%let _OUTPUT_col127_label = %nrquote(IRB_DUMMY_TYPE_CD);
%let _OUTPUT_col127_input0 = IRB_DUMMY_TYPE_CD;
%let _OUTPUT_col127_exp = ;
%let _OUTPUT_col127_input = IRB_DUMMY_TYPE_CD;
%let _OUTPUT_col127_input_count = 1;
%let _OUTPUT_col128_name = IRB_SRC_ACCOUNT_ID;
%let _OUTPUT_col128_table = work.W1PL05FAE;
%let _OUTPUT_col128_length = 32;
%let _OUTPUT_col128_type = $;
%let _OUTPUT_col128_format = $32.;
%let _OUTPUT_col128_informat = $32.;
%let _OUTPUT_col128_label = %nrquote(IRB_SRC_ACCOUNT_ID);
%let _OUTPUT_col128_input0 = IRB_SRC_ACCOUNT_ID;
%let _OUTPUT_col128_exp = ;
%let _OUTPUT_col128_input = IRB_SRC_ACCOUNT_ID;
%let _OUTPUT_col128_input_count = 1;
%let _OUTPUT_col129_name = SAVE_VALID_FROM_DTTM;
%let _OUTPUT_col129_table = work.W1PL05FAE;
%let _OUTPUT_col129_length = 8;
%let _OUTPUT_col129_type = ;
%let _OUTPUT_col129_format = ;
%let _OUTPUT_col129_informat = ;
%let _OUTPUT_col129_label = %nrquote();
%let _OUTPUT_col129_exp = ;
%let _OUTPUT_col129_input_count = 0;
%let _OUTPUT_col130_name = x;
%let _OUTPUT_col130_table = work.W1PL05FAE;
%let _OUTPUT_col130_length = 8;
%let _OUTPUT_col130_type = ;
%let _OUTPUT_col130_format = ;
%let _OUTPUT_col130_informat = ;
%let _OUTPUT_col130_label = %nrquote();
%let _OUTPUT_col130_exp = ;
%let _OUTPUT_col130_input_count = 0;
%let _OUTPUT_col131_name = y;
%let _OUTPUT_col131_table = work.W1PL05FAE;
%let _OUTPUT_col131_length = 8;
%let _OUTPUT_col131_type = ;
%let _OUTPUT_col131_format = ;
%let _OUTPUT_col131_informat = ;
%let _OUTPUT_col131_label = %nrquote();
%let _OUTPUT_col131_exp = ;
%let _OUTPUT_col131_input_count = 0;
%let _OUTPUT_col132_name = out;
%let _OUTPUT_col132_table = work.W1PL05FAE;
%let _OUTPUT_col132_length = 8;
%let _OUTPUT_col132_type = ;
%let _OUTPUT_col132_format = ;
%let _OUTPUT_col132_informat = ;
%let _OUTPUT_col132_label = %nrquote();
%let _OUTPUT_col132_exp = ;
%let _OUTPUT_col132_input_count = 0;

%let _OUTPUT1 = work.W1PL05FAE;
%let _OUTPUT1_connect = ;
%let _OUTPUT1_engine = ;
%let _OUTPUT1_memtype = DATA;
%let _OUTPUT1_options = %nrquote();
%let _OUTPUT1_alter = %nrquote();
%let _OUTPUT1_path = %nrquote(/User Written_A5ELGGF9.AF0000GV%(WorkTable%));
%let _OUTPUT1_type = 1;
%let _OUTPUT1_label = %nrquote();
/* List of target columns to keep  */ 
%let _OUTPUT1_keep = ACCOUNT_RK VALID_FROM_DTTM VALID_TO_DTTM ACCOUNT_ID SOURCE_SYSTEM_CD 
        ACCOUNT_REGISTRATION_NM ALTERNATE_ACCOUNT_NM FINANCIAL_ACCOUNT_TYPE_CD 
        AUTO_DEBIT_ACCOUNT_TYPE_CD ACCOUNT_REGISTRATION_TYPE_CD 
        ACCOUNT_STATUS_CD OPEN_DT CLOSE_DT CLOSE_REASON_CD ACCOUNT_TAX_ID 
        EXPECTED_LOSS_PCT INDIVIDUAL_ORGANIZATION_CD SOURCE_CD 
        OPENING_CHANNEL_CD PREFERRED_CHANNEL_CD CURRENCY_CD PRIMARY_PHONE_NO 
        PRIMARY_PHONE_TYPE_CD SECONDARY_PHONE_NO SECONDARY_PHONE_TYPE_CD 
        MAILABLE_FLG TELEPHONABLE_FLG EMAIL_FLG SMS_FLG DO_NOT_CONTACT_FLG 
        EMPLOYEE_RK CURRENCY_BASED_ACCOUNT_FLG FEE_BASED_FLG ANNUAL_FEES_AMT 
        MONTHLY_FEES_AMT CAMPAIGN_CD COMMUNICATION_CD REGISTERED_ONLINE_DT 
        FIRST_LOGIN_DT ONLINE_BILL_PAYMENT_FLG ID_VERIFICATION_TYPE_CD 
        PREVIOUS_ACCOUNT_ID OPEN_BRANCH_FINANCIAL_UNIT_RK 
        PRIM_BRANCH_FINANCIAL_UNIT_RK FINANCIAL_APPLICATION_RK 
        CREDIT_FACILITY_RK FUTURE_MARGIN_INCOME_AMT IN_DEFAULT_FLG 
        FINANCIAL_BOOK_RK IRRECOVERABLE_FLG OWNED_BY_INTERNAL_ORG_RK 
        PREVIOUS_BANK_EXTERNAL_ORG_RK NETTING_SET_RK REVOLVING_FLG 
        SOURCE_CHANNEL_CD GRACE_PERIOD_DAYS_CNT REMARGINING_DAYS_CNT 
        FINANCIAL_CALENDAR_RK DAY_BASIS_CD PORTFOLIO_ID SECURITIZATION_POOL_RK 
        RECEIVABLES_POOL_RK ACCOUNT_USAGE_TYPE_CD RISK_ALARM_FLG 
        LOW_PROFITABILITY_FLG ACCOUNT_LIFECYCLE_STG_CD ATTRITION_ALARM_FLG 
        BALANCE_FROZEN_FLG BALANCE_FROZEN_DT ACCOUNT_BLOCK_REASON_CD 
        TAXATION_STATE_CD EFFECTIVE_MATURITY_YEAR_NO GL_ACCOUNT_RK 
        FROM_OTHER_INSTITUTION_FLG ACCOUNT_RENEWAL_CNT BALANCE_TRANSFER_DT 
        BALANCE_TRANSFER_AMT BALANCE_TRANSFER_CNT BASE_LONG_TERM_APR_RT 
        BROKER_FLG MULT_RATE_FLG AUTO_DEBIT_ACCOUNT_NO 
        WORST_STATUS_LAST_12_MTH_CD WORST_STATUS_LAST_12_MTH_DT 
        BALANCE_TRNSF_OTHER_ACCT_CNT EFFECTIVE_FROM_DTTM EFFECTIVE_TO_DTTM 
        COUNTERPARTY_RK INSURED_BY_COUNTERPARTY_RK STATEMENT_FREQUENCY_CD 
        SECURITY_DEPOSIT_AMT SECURITY_DEPOSIT_REFUND_AMT FIRST_PAYMENT_DT 
        LAST_PAYMENT_DT FIRST_RESET_DT LAST_RESET_DT RESETS_PER_ANNUM_NO 
        PRINCIPAL_PAYMENT_TYPE_CD PRINCIPAL_PAYMENT_AMT RATE_POLICY_RK 
        SPREAD_RT DISCOUNT_SPREAD_RT INITIAL_CONTRACT_RT 
        FIXED_MONTHLY_PREPAYMENT_RT CAPITAL_ALLOCATION_RK CAPITAL_COST_RK 
        SEGMENT_RK NEAR_BRANCH_FINANCIAL_UNIT_RK STATEMENT_OPT_FLG 
        VALUE_SCALING_FACTOR_RT INTERNAL_REPORTING_CATEGORY_CD 
        CONVEXITY_ADJUSTMENT_FLG ARREARS_PAYMENT_CD QUANTO_FEATURE_RK 
        CASH_INTENSIVE_BUSINESS_FLG LETTER_OF_CREDIT_ONFILE_FLG 
        TRADE_FINANCE_FLG ANNUITY_PAYMENT_TYPE_CD INTEREST_PAYMENT_TYPE_CD 
        INTEREST_PAYMENT_TIME_FREQ_CD LIQUIDITY_CATEGORY_TYPE_CD 
        HOLIDAY_DATE_ROLL_CONV_CD WEEKEND_DATE_ROLL_CONV_CD 
        EXPENSE_ALLOCATION_RK FIRST_INTEREST_PAYMENT_DT 
        LAST_INTEREST_PAYMENT_DT PROCESSED_DTTM IRB_DUMMY_TYPE_CD 
        IRB_SRC_ACCOUNT_ID SAVE_VALID_FROM_DTTM x y out;
%let _OUTPUT1_col_count = 133;
%let _OUTPUT1_col0_name = ACCOUNT_RK;
%let _OUTPUT1_col0_table = work.W1PL05FAE;
%let _OUTPUT1_col0_length = 8;
%let _OUTPUT1_col0_type = ;
%let _OUTPUT1_col0_format = 12.;
%let _OUTPUT1_col0_informat = 12.;
%let _OUTPUT1_col0_label = %nrquote(ACCOUNT_RK);
%let _OUTPUT1_col0_input0 = ACCOUNT_RK;
%let _OUTPUT1_col0_exp = ;
%let _OUTPUT1_col0_input = ACCOUNT_RK;
%let _OUTPUT1_col0_input_count = 1;
%let _OUTPUT1_col1_name = VALID_FROM_DTTM;
%let _OUTPUT1_col1_table = work.W1PL05FAE;
%let _OUTPUT1_col1_length = 8;
%let _OUTPUT1_col1_type = ;
%let _OUTPUT1_col1_format = DATETIME20.;
%let _OUTPUT1_col1_informat = DATETIME20.;
%let _OUTPUT1_col1_label = %nrquote(VALID_FROM_DTTM);
%let _OUTPUT1_col1_input0 = VALID_FROM_DTTM;
%let _OUTPUT1_col1_exp = ;
%let _OUTPUT1_col1_input = VALID_FROM_DTTM;
%let _OUTPUT1_col1_input_count = 1;
%let _OUTPUT1_col2_name = VALID_TO_DTTM;
%let _OUTPUT1_col2_table = work.W1PL05FAE;
%let _OUTPUT1_col2_length = 8;
%let _OUTPUT1_col2_type = ;
%let _OUTPUT1_col2_format = DATETIME20.;
%let _OUTPUT1_col2_informat = DATETIME20.;
%let _OUTPUT1_col2_label = %nrquote(VALID_TO_DTTM);
%let _OUTPUT1_col2_input0 = VALID_TO_DTTM;
%let _OUTPUT1_col2_exp = ;
%let _OUTPUT1_col2_input = VALID_TO_DTTM;
%let _OUTPUT1_col2_input_count = 1;
%let _OUTPUT1_col3_name = ACCOUNT_ID;
%let _OUTPUT1_col3_table = work.W1PL05FAE;
%let _OUTPUT1_col3_length = 32;
%let _OUTPUT1_col3_type = $;
%let _OUTPUT1_col3_format = $32.;
%let _OUTPUT1_col3_informat = $32.;
%let _OUTPUT1_col3_label = %nrquote(ACCOUNT_ID);
%let _OUTPUT1_col3_input0 = ACCOUNT_ID;
%let _OUTPUT1_col3_exp = ;
%let _OUTPUT1_col3_input = ACCOUNT_ID;
%let _OUTPUT1_col3_input_count = 1;
%let _OUTPUT1_col4_name = SOURCE_SYSTEM_CD;
%let _OUTPUT1_col4_table = work.W1PL05FAE;
%let _OUTPUT1_col4_length = 3;
%let _OUTPUT1_col4_type = $;
%let _OUTPUT1_col4_format = $3.;
%let _OUTPUT1_col4_informat = $3.;
%let _OUTPUT1_col4_label = %nrquote(SOURCE_SYSTEM_CD);
%let _OUTPUT1_col4_input0 = SOURCE_SYSTEM_CD;
%let _OUTPUT1_col4_exp = ;
%let _OUTPUT1_col4_input = SOURCE_SYSTEM_CD;
%let _OUTPUT1_col4_input_count = 1;
%let _OUTPUT1_col5_name = ACCOUNT_REGISTRATION_NM;
%let _OUTPUT1_col5_table = work.W1PL05FAE;
%let _OUTPUT1_col5_length = 100;
%let _OUTPUT1_col5_type = $;
%let _OUTPUT1_col5_format = $100.;
%let _OUTPUT1_col5_informat = $100.;
%let _OUTPUT1_col5_label = %nrquote(ACCOUNT_REGISTRATION_NM);
%let _OUTPUT1_col5_input0 = ACCOUNT_REGISTRATION_NM;
%let _OUTPUT1_col5_exp = ;
%let _OUTPUT1_col5_input = ACCOUNT_REGISTRATION_NM;
%let _OUTPUT1_col5_input_count = 1;
%let _OUTPUT1_col6_name = ALTERNATE_ACCOUNT_NM;
%let _OUTPUT1_col6_table = work.W1PL05FAE;
%let _OUTPUT1_col6_length = 40;
%let _OUTPUT1_col6_type = $;
%let _OUTPUT1_col6_format = $40.;
%let _OUTPUT1_col6_informat = $40.;
%let _OUTPUT1_col6_label = %nrquote(ALTERNATE_ACCOUNT_NM);
%let _OUTPUT1_col6_input0 = ALTERNATE_ACCOUNT_NM;
%let _OUTPUT1_col6_exp = ;
%let _OUTPUT1_col6_input = ALTERNATE_ACCOUNT_NM;
%let _OUTPUT1_col6_input_count = 1;
%let _OUTPUT1_col7_name = FINANCIAL_ACCOUNT_TYPE_CD;
%let _OUTPUT1_col7_table = work.W1PL05FAE;
%let _OUTPUT1_col7_length = 3;
%let _OUTPUT1_col7_type = $;
%let _OUTPUT1_col7_format = $3.;
%let _OUTPUT1_col7_informat = $3.;
%let _OUTPUT1_col7_label = %nrquote(FINANCIAL_ACCOUNT_TYPE_CD);
%let _OUTPUT1_col7_input0 = FINANCIAL_ACCOUNT_TYPE_CD;
%let _OUTPUT1_col7_exp = ;
%let _OUTPUT1_col7_input = FINANCIAL_ACCOUNT_TYPE_CD;
%let _OUTPUT1_col7_input_count = 1;
%let _OUTPUT1_col8_name = AUTO_DEBIT_ACCOUNT_TYPE_CD;
%let _OUTPUT1_col8_table = work.W1PL05FAE;
%let _OUTPUT1_col8_length = 3;
%let _OUTPUT1_col8_type = $;
%let _OUTPUT1_col8_format = $3.;
%let _OUTPUT1_col8_informat = $3.;
%let _OUTPUT1_col8_label = %nrquote(AUTO_DEBIT_ACCOUNT_TYPE_CD);
%let _OUTPUT1_col8_input0 = AUTO_DEBIT_ACCOUNT_TYPE_CD;
%let _OUTPUT1_col8_exp = ;
%let _OUTPUT1_col8_input = AUTO_DEBIT_ACCOUNT_TYPE_CD;
%let _OUTPUT1_col8_input_count = 1;
%let _OUTPUT1_col9_name = ACCOUNT_REGISTRATION_TYPE_CD;
%let _OUTPUT1_col9_table = work.W1PL05FAE;
%let _OUTPUT1_col9_length = 3;
%let _OUTPUT1_col9_type = $;
%let _OUTPUT1_col9_format = $3.;
%let _OUTPUT1_col9_informat = $3.;
%let _OUTPUT1_col9_label = %nrquote(ACCOUNT_REGISTRATION_TYPE_CD);
%let _OUTPUT1_col9_input0 = ACCOUNT_REGISTRATION_TYPE_CD;
%let _OUTPUT1_col9_exp = ;
%let _OUTPUT1_col9_input = ACCOUNT_REGISTRATION_TYPE_CD;
%let _OUTPUT1_col9_input_count = 1;
%let _OUTPUT1_col10_name = ACCOUNT_STATUS_CD;
%let _OUTPUT1_col10_table = work.W1PL05FAE;
%let _OUTPUT1_col10_length = 3;
%let _OUTPUT1_col10_type = $;
%let _OUTPUT1_col10_format = $3.;
%let _OUTPUT1_col10_informat = $3.;
%let _OUTPUT1_col10_label = %nrquote(ACCOUNT_STATUS_CD);
%let _OUTPUT1_col10_input0 = ACCOUNT_STATUS_CD;
%let _OUTPUT1_col10_exp = ;
%let _OUTPUT1_col10_input = ACCOUNT_STATUS_CD;
%let _OUTPUT1_col10_input_count = 1;
%let _OUTPUT1_col11_name = OPEN_DT;
%let _OUTPUT1_col11_table = work.W1PL05FAE;
%let _OUTPUT1_col11_length = 8;
%let _OUTPUT1_col11_type = ;
%let _OUTPUT1_col11_format = DATETIME20.;
%let _OUTPUT1_col11_informat = DATETIME20.;
%let _OUTPUT1_col11_label = %nrquote(OPEN_DT);
%let _OUTPUT1_col11_input0 = OPEN_DT;
%let _OUTPUT1_col11_exp = ;
%let _OUTPUT1_col11_input = OPEN_DT;
%let _OUTPUT1_col11_input_count = 1;
%let _OUTPUT1_col12_name = CLOSE_DT;
%let _OUTPUT1_col12_table = work.W1PL05FAE;
%let _OUTPUT1_col12_length = 8;
%let _OUTPUT1_col12_type = ;
%let _OUTPUT1_col12_format = DATETIME20.;
%let _OUTPUT1_col12_informat = DATETIME20.;
%let _OUTPUT1_col12_label = %nrquote(CLOSE_DT);
%let _OUTPUT1_col12_input0 = CLOSE_DT;
%let _OUTPUT1_col12_exp = ;
%let _OUTPUT1_col12_input = CLOSE_DT;
%let _OUTPUT1_col12_input_count = 1;
%let _OUTPUT1_col13_name = CLOSE_REASON_CD;
%let _OUTPUT1_col13_table = work.W1PL05FAE;
%let _OUTPUT1_col13_length = 3;
%let _OUTPUT1_col13_type = $;
%let _OUTPUT1_col13_format = $3.;
%let _OUTPUT1_col13_informat = $3.;
%let _OUTPUT1_col13_label = %nrquote(CLOSE_REASON_CD);
%let _OUTPUT1_col13_input0 = CLOSE_REASON_CD;
%let _OUTPUT1_col13_exp = ;
%let _OUTPUT1_col13_input = CLOSE_REASON_CD;
%let _OUTPUT1_col13_input_count = 1;
%let _OUTPUT1_col14_name = ACCOUNT_TAX_ID;
%let _OUTPUT1_col14_table = work.W1PL05FAE;
%let _OUTPUT1_col14_length = 32;
%let _OUTPUT1_col14_type = $;
%let _OUTPUT1_col14_format = $32.;
%let _OUTPUT1_col14_informat = $32.;
%let _OUTPUT1_col14_label = %nrquote(ACCOUNT_TAX_ID);
%let _OUTPUT1_col14_input0 = ACCOUNT_TAX_ID;
%let _OUTPUT1_col14_exp = ;
%let _OUTPUT1_col14_input = ACCOUNT_TAX_ID;
%let _OUTPUT1_col14_input_count = 1;
%let _OUTPUT1_col15_name = EXPECTED_LOSS_PCT;
%let _OUTPUT1_col15_table = work.W1PL05FAE;
%let _OUTPUT1_col15_length = 8;
%let _OUTPUT1_col15_type = ;
%let _OUTPUT1_col15_format = 12.4;
%let _OUTPUT1_col15_informat = 12.4;
%let _OUTPUT1_col15_label = %nrquote(EXPECTED_LOSS_PCT);
%let _OUTPUT1_col15_input0 = EXPECTED_LOSS_PCT;
%let _OUTPUT1_col15_exp = ;
%let _OUTPUT1_col15_input = EXPECTED_LOSS_PCT;
%let _OUTPUT1_col15_input_count = 1;
%let _OUTPUT1_col16_name = INDIVIDUAL_ORGANIZATION_CD;
%let _OUTPUT1_col16_table = work.W1PL05FAE;
%let _OUTPUT1_col16_length = 3;
%let _OUTPUT1_col16_type = $;
%let _OUTPUT1_col16_format = $3.;
%let _OUTPUT1_col16_informat = $3.;
%let _OUTPUT1_col16_label = %nrquote(INDIVIDUAL_ORGANIZATION_CD);
%let _OUTPUT1_col16_input0 = INDIVIDUAL_ORGANIZATION_CD;
%let _OUTPUT1_col16_exp = ;
%let _OUTPUT1_col16_input = INDIVIDUAL_ORGANIZATION_CD;
%let _OUTPUT1_col16_input_count = 1;
%let _OUTPUT1_col17_name = SOURCE_CD;
%let _OUTPUT1_col17_table = work.W1PL05FAE;
%let _OUTPUT1_col17_length = 5;
%let _OUTPUT1_col17_type = $;
%let _OUTPUT1_col17_format = $5.;
%let _OUTPUT1_col17_informat = $5.;
%let _OUTPUT1_col17_label = %nrquote(SOURCE_CD);
%let _OUTPUT1_col17_input0 = SOURCE_CD;
%let _OUTPUT1_col17_exp = ;
%let _OUTPUT1_col17_input = SOURCE_CD;
%let _OUTPUT1_col17_input_count = 1;
%let _OUTPUT1_col18_name = OPENING_CHANNEL_CD;
%let _OUTPUT1_col18_table = work.W1PL05FAE;
%let _OUTPUT1_col18_length = 3;
%let _OUTPUT1_col18_type = $;
%let _OUTPUT1_col18_format = $3.;
%let _OUTPUT1_col18_informat = $3.;
%let _OUTPUT1_col18_label = %nrquote(OPENING_CHANNEL_CD);
%let _OUTPUT1_col18_input0 = OPENING_CHANNEL_CD;
%let _OUTPUT1_col18_exp = ;
%let _OUTPUT1_col18_input = OPENING_CHANNEL_CD;
%let _OUTPUT1_col18_input_count = 1;
%let _OUTPUT1_col19_name = PREFERRED_CHANNEL_CD;
%let _OUTPUT1_col19_table = work.W1PL05FAE;
%let _OUTPUT1_col19_length = 3;
%let _OUTPUT1_col19_type = $;
%let _OUTPUT1_col19_format = $3.;
%let _OUTPUT1_col19_informat = $3.;
%let _OUTPUT1_col19_label = %nrquote(PREFERRED_CHANNEL_CD);
%let _OUTPUT1_col19_input0 = PREFERRED_CHANNEL_CD;
%let _OUTPUT1_col19_exp = ;
%let _OUTPUT1_col19_input = PREFERRED_CHANNEL_CD;
%let _OUTPUT1_col19_input_count = 1;
%let _OUTPUT1_col20_name = CURRENCY_CD;
%let _OUTPUT1_col20_table = work.W1PL05FAE;
%let _OUTPUT1_col20_length = 3;
%let _OUTPUT1_col20_type = $;
%let _OUTPUT1_col20_format = $3.;
%let _OUTPUT1_col20_informat = $3.;
%let _OUTPUT1_col20_label = %nrquote(CURRENCY_CD);
%let _OUTPUT1_col20_input0 = CURRENCY_CD;
%let _OUTPUT1_col20_exp = ;
%let _OUTPUT1_col20_input = CURRENCY_CD;
%let _OUTPUT1_col20_input_count = 1;
%let _OUTPUT1_col21_name = PRIMARY_PHONE_NO;
%let _OUTPUT1_col21_table = work.W1PL05FAE;
%let _OUTPUT1_col21_length = 20;
%let _OUTPUT1_col21_type = $;
%let _OUTPUT1_col21_format = $20.;
%let _OUTPUT1_col21_informat = $20.;
%let _OUTPUT1_col21_label = %nrquote(PRIMARY_PHONE_NO);
%let _OUTPUT1_col21_input0 = PRIMARY_PHONE_NO;
%let _OUTPUT1_col21_exp = ;
%let _OUTPUT1_col21_input = PRIMARY_PHONE_NO;
%let _OUTPUT1_col21_input_count = 1;
%let _OUTPUT1_col22_name = PRIMARY_PHONE_TYPE_CD;
%let _OUTPUT1_col22_table = work.W1PL05FAE;
%let _OUTPUT1_col22_length = 3;
%let _OUTPUT1_col22_type = $;
%let _OUTPUT1_col22_format = $3.;
%let _OUTPUT1_col22_informat = $3.;
%let _OUTPUT1_col22_label = %nrquote(PRIMARY_PHONE_TYPE_CD);
%let _OUTPUT1_col22_input0 = PRIMARY_PHONE_TYPE_CD;
%let _OUTPUT1_col22_exp = ;
%let _OUTPUT1_col22_input = PRIMARY_PHONE_TYPE_CD;
%let _OUTPUT1_col22_input_count = 1;
%let _OUTPUT1_col23_name = SECONDARY_PHONE_NO;
%let _OUTPUT1_col23_table = work.W1PL05FAE;
%let _OUTPUT1_col23_length = 20;
%let _OUTPUT1_col23_type = $;
%let _OUTPUT1_col23_format = $20.;
%let _OUTPUT1_col23_informat = $20.;
%let _OUTPUT1_col23_label = %nrquote(SECONDARY_PHONE_NO);
%let _OUTPUT1_col23_input0 = SECONDARY_PHONE_NO;
%let _OUTPUT1_col23_exp = ;
%let _OUTPUT1_col23_input = SECONDARY_PHONE_NO;
%let _OUTPUT1_col23_input_count = 1;
%let _OUTPUT1_col24_name = SECONDARY_PHONE_TYPE_CD;
%let _OUTPUT1_col24_table = work.W1PL05FAE;
%let _OUTPUT1_col24_length = 3;
%let _OUTPUT1_col24_type = $;
%let _OUTPUT1_col24_format = $3.;
%let _OUTPUT1_col24_informat = $3.;
%let _OUTPUT1_col24_label = %nrquote(SECONDARY_PHONE_TYPE_CD);
%let _OUTPUT1_col24_input0 = SECONDARY_PHONE_TYPE_CD;
%let _OUTPUT1_col24_exp = ;
%let _OUTPUT1_col24_input = SECONDARY_PHONE_TYPE_CD;
%let _OUTPUT1_col24_input_count = 1;
%let _OUTPUT1_col25_name = MAILABLE_FLG;
%let _OUTPUT1_col25_table = work.W1PL05FAE;
%let _OUTPUT1_col25_length = 1;
%let _OUTPUT1_col25_type = $;
%let _OUTPUT1_col25_format = $1.;
%let _OUTPUT1_col25_informat = $1.;
%let _OUTPUT1_col25_label = %nrquote(MAILABLE_FLG);
%let _OUTPUT1_col25_input0 = MAILABLE_FLG;
%let _OUTPUT1_col25_exp = ;
%let _OUTPUT1_col25_input = MAILABLE_FLG;
%let _OUTPUT1_col25_input_count = 1;
%let _OUTPUT1_col26_name = TELEPHONABLE_FLG;
%let _OUTPUT1_col26_table = work.W1PL05FAE;
%let _OUTPUT1_col26_length = 1;
%let _OUTPUT1_col26_type = $;
%let _OUTPUT1_col26_format = $1.;
%let _OUTPUT1_col26_informat = $1.;
%let _OUTPUT1_col26_label = %nrquote(TELEPHONABLE_FLG);
%let _OUTPUT1_col26_input0 = TELEPHONABLE_FLG;
%let _OUTPUT1_col26_exp = ;
%let _OUTPUT1_col26_input = TELEPHONABLE_FLG;
%let _OUTPUT1_col26_input_count = 1;
%let _OUTPUT1_col27_name = EMAIL_FLG;
%let _OUTPUT1_col27_table = work.W1PL05FAE;
%let _OUTPUT1_col27_length = 1;
%let _OUTPUT1_col27_type = $;
%let _OUTPUT1_col27_format = $1.;
%let _OUTPUT1_col27_informat = $1.;
%let _OUTPUT1_col27_label = %nrquote(EMAIL_FLG);
%let _OUTPUT1_col27_input0 = EMAIL_FLG;
%let _OUTPUT1_col27_exp = ;
%let _OUTPUT1_col27_input = EMAIL_FLG;
%let _OUTPUT1_col27_input_count = 1;
%let _OUTPUT1_col28_name = SMS_FLG;
%let _OUTPUT1_col28_table = work.W1PL05FAE;
%let _OUTPUT1_col28_length = 1;
%let _OUTPUT1_col28_type = $;
%let _OUTPUT1_col28_format = $1.;
%let _OUTPUT1_col28_informat = $1.;
%let _OUTPUT1_col28_label = %nrquote(SMS_FLG);
%let _OUTPUT1_col28_input0 = SMS_FLG;
%let _OUTPUT1_col28_exp = ;
%let _OUTPUT1_col28_input = SMS_FLG;
%let _OUTPUT1_col28_input_count = 1;
%let _OUTPUT1_col29_name = DO_NOT_CONTACT_FLG;
%let _OUTPUT1_col29_table = work.W1PL05FAE;
%let _OUTPUT1_col29_length = 1;
%let _OUTPUT1_col29_type = $;
%let _OUTPUT1_col29_format = $1.;
%let _OUTPUT1_col29_informat = $1.;
%let _OUTPUT1_col29_label = %nrquote(DO_NOT_CONTACT_FLG);
%let _OUTPUT1_col29_input0 = DO_NOT_CONTACT_FLG;
%let _OUTPUT1_col29_exp = ;
%let _OUTPUT1_col29_input = DO_NOT_CONTACT_FLG;
%let _OUTPUT1_col29_input_count = 1;
%let _OUTPUT1_col30_name = EMPLOYEE_RK;
%let _OUTPUT1_col30_table = work.W1PL05FAE;
%let _OUTPUT1_col30_length = 8;
%let _OUTPUT1_col30_type = ;
%let _OUTPUT1_col30_format = 12.;
%let _OUTPUT1_col30_informat = 12.;
%let _OUTPUT1_col30_label = %nrquote(EMPLOYEE_RK);
%let _OUTPUT1_col30_input0 = EMPLOYEE_RK;
%let _OUTPUT1_col30_exp = ;
%let _OUTPUT1_col30_input = EMPLOYEE_RK;
%let _OUTPUT1_col30_input_count = 1;
%let _OUTPUT1_col31_name = CURRENCY_BASED_ACCOUNT_FLG;
%let _OUTPUT1_col31_table = work.W1PL05FAE;
%let _OUTPUT1_col31_length = 1;
%let _OUTPUT1_col31_type = $;
%let _OUTPUT1_col31_format = $1.;
%let _OUTPUT1_col31_informat = $1.;
%let _OUTPUT1_col31_label = %nrquote(CURRENCY_BASED_ACCOUNT_FLG);
%let _OUTPUT1_col31_input0 = CURRENCY_BASED_ACCOUNT_FLG;
%let _OUTPUT1_col31_exp = ;
%let _OUTPUT1_col31_input = CURRENCY_BASED_ACCOUNT_FLG;
%let _OUTPUT1_col31_input_count = 1;
%let _OUTPUT1_col32_name = FEE_BASED_FLG;
%let _OUTPUT1_col32_table = work.W1PL05FAE;
%let _OUTPUT1_col32_length = 1;
%let _OUTPUT1_col32_type = $;
%let _OUTPUT1_col32_format = $1.;
%let _OUTPUT1_col32_informat = $1.;
%let _OUTPUT1_col32_label = %nrquote(FEE_BASED_FLG);
%let _OUTPUT1_col32_input0 = FEE_BASED_FLG;
%let _OUTPUT1_col32_exp = ;
%let _OUTPUT1_col32_input = FEE_BASED_FLG;
%let _OUTPUT1_col32_input_count = 1;
%let _OUTPUT1_col33_name = ANNUAL_FEES_AMT;
%let _OUTPUT1_col33_table = work.W1PL05FAE;
%let _OUTPUT1_col33_length = 8;
%let _OUTPUT1_col33_type = ;
%let _OUTPUT1_col33_format = 21.5;
%let _OUTPUT1_col33_informat = 21.5;
%let _OUTPUT1_col33_label = %nrquote(ANNUAL_FEES_AMT);
%let _OUTPUT1_col33_input0 = ANNUAL_FEES_AMT;
%let _OUTPUT1_col33_exp = ;
%let _OUTPUT1_col33_input = ANNUAL_FEES_AMT;
%let _OUTPUT1_col33_input_count = 1;
%let _OUTPUT1_col34_name = MONTHLY_FEES_AMT;
%let _OUTPUT1_col34_table = work.W1PL05FAE;
%let _OUTPUT1_col34_length = 8;
%let _OUTPUT1_col34_type = ;
%let _OUTPUT1_col34_format = 21.5;
%let _OUTPUT1_col34_informat = 21.5;
%let _OUTPUT1_col34_label = %nrquote(MONTHLY_FEES_AMT);
%let _OUTPUT1_col34_input0 = MONTHLY_FEES_AMT;
%let _OUTPUT1_col34_exp = ;
%let _OUTPUT1_col34_input = MONTHLY_FEES_AMT;
%let _OUTPUT1_col34_input_count = 1;
%let _OUTPUT1_col35_name = CAMPAIGN_CD;
%let _OUTPUT1_col35_table = work.W1PL05FAE;
%let _OUTPUT1_col35_length = 30;
%let _OUTPUT1_col35_type = $;
%let _OUTPUT1_col35_format = $30.;
%let _OUTPUT1_col35_informat = $30.;
%let _OUTPUT1_col35_label = %nrquote(CAMPAIGN_CD);
%let _OUTPUT1_col35_input0 = CAMPAIGN_CD;
%let _OUTPUT1_col35_exp = ;
%let _OUTPUT1_col35_input = CAMPAIGN_CD;
%let _OUTPUT1_col35_input_count = 1;
%let _OUTPUT1_col36_name = COMMUNICATION_CD;
%let _OUTPUT1_col36_table = work.W1PL05FAE;
%let _OUTPUT1_col36_length = 30;
%let _OUTPUT1_col36_type = $;
%let _OUTPUT1_col36_format = $30.;
%let _OUTPUT1_col36_informat = $30.;
%let _OUTPUT1_col36_label = %nrquote(COMMUNICATION_CD);
%let _OUTPUT1_col36_input0 = COMMUNICATION_CD;
%let _OUTPUT1_col36_exp = ;
%let _OUTPUT1_col36_input = COMMUNICATION_CD;
%let _OUTPUT1_col36_input_count = 1;
%let _OUTPUT1_col37_name = REGISTERED_ONLINE_DT;
%let _OUTPUT1_col37_table = work.W1PL05FAE;
%let _OUTPUT1_col37_length = 8;
%let _OUTPUT1_col37_type = ;
%let _OUTPUT1_col37_format = DATETIME20.;
%let _OUTPUT1_col37_informat = DATETIME20.;
%let _OUTPUT1_col37_label = %nrquote(REGISTERED_ONLINE_DT);
%let _OUTPUT1_col37_input0 = REGISTERED_ONLINE_DT;
%let _OUTPUT1_col37_exp = ;
%let _OUTPUT1_col37_input = REGISTERED_ONLINE_DT;
%let _OUTPUT1_col37_input_count = 1;
%let _OUTPUT1_col38_name = FIRST_LOGIN_DT;
%let _OUTPUT1_col38_table = work.W1PL05FAE;
%let _OUTPUT1_col38_length = 8;
%let _OUTPUT1_col38_type = ;
%let _OUTPUT1_col38_format = DATETIME20.;
%let _OUTPUT1_col38_informat = DATETIME20.;
%let _OUTPUT1_col38_label = %nrquote(FIRST_LOGIN_DT);
%let _OUTPUT1_col38_input0 = FIRST_LOGIN_DT;
%let _OUTPUT1_col38_exp = ;
%let _OUTPUT1_col38_input = FIRST_LOGIN_DT;
%let _OUTPUT1_col38_input_count = 1;
%let _OUTPUT1_col39_name = ONLINE_BILL_PAYMENT_FLG;
%let _OUTPUT1_col39_table = work.W1PL05FAE;
%let _OUTPUT1_col39_length = 1;
%let _OUTPUT1_col39_type = $;
%let _OUTPUT1_col39_format = $1.;
%let _OUTPUT1_col39_informat = $1.;
%let _OUTPUT1_col39_label = %nrquote(ONLINE_BILL_PAYMENT_FLG);
%let _OUTPUT1_col39_input0 = ONLINE_BILL_PAYMENT_FLG;
%let _OUTPUT1_col39_exp = ;
%let _OUTPUT1_col39_input = ONLINE_BILL_PAYMENT_FLG;
%let _OUTPUT1_col39_input_count = 1;
%let _OUTPUT1_col40_name = ID_VERIFICATION_TYPE_CD;
%let _OUTPUT1_col40_table = work.W1PL05FAE;
%let _OUTPUT1_col40_length = 3;
%let _OUTPUT1_col40_type = $;
%let _OUTPUT1_col40_format = $3.;
%let _OUTPUT1_col40_informat = $3.;
%let _OUTPUT1_col40_label = %nrquote(ID_VERIFICATION_TYPE_CD);
%let _OUTPUT1_col40_input0 = ID_VERIFICATION_TYPE_CD;
%let _OUTPUT1_col40_exp = ;
%let _OUTPUT1_col40_input = ID_VERIFICATION_TYPE_CD;
%let _OUTPUT1_col40_input_count = 1;
%let _OUTPUT1_col41_name = PREVIOUS_ACCOUNT_ID;
%let _OUTPUT1_col41_table = work.W1PL05FAE;
%let _OUTPUT1_col41_length = 32;
%let _OUTPUT1_col41_type = $;
%let _OUTPUT1_col41_format = $32.;
%let _OUTPUT1_col41_informat = $32.;
%let _OUTPUT1_col41_label = %nrquote(PREVIOUS_ACCOUNT_ID);
%let _OUTPUT1_col41_input0 = PREVIOUS_ACCOUNT_ID;
%let _OUTPUT1_col41_exp = ;
%let _OUTPUT1_col41_input = PREVIOUS_ACCOUNT_ID;
%let _OUTPUT1_col41_input_count = 1;
%let _OUTPUT1_col42_name = OPEN_BRANCH_FINANCIAL_UNIT_RK;
%let _OUTPUT1_col42_table = work.W1PL05FAE;
%let _OUTPUT1_col42_length = 8;
%let _OUTPUT1_col42_type = ;
%let _OUTPUT1_col42_format = 12.;
%let _OUTPUT1_col42_informat = 12.;
%let _OUTPUT1_col42_label = %nrquote(OPEN_BRANCH_FINANCIAL_UNIT_RK);
%let _OUTPUT1_col42_input0 = OPEN_BRANCH_FINANCIAL_UNIT_RK;
%let _OUTPUT1_col42_exp = ;
%let _OUTPUT1_col42_input = OPEN_BRANCH_FINANCIAL_UNIT_RK;
%let _OUTPUT1_col42_input_count = 1;
%let _OUTPUT1_col43_name = PRIM_BRANCH_FINANCIAL_UNIT_RK;
%let _OUTPUT1_col43_table = work.W1PL05FAE;
%let _OUTPUT1_col43_length = 8;
%let _OUTPUT1_col43_type = ;
%let _OUTPUT1_col43_format = 12.;
%let _OUTPUT1_col43_informat = 12.;
%let _OUTPUT1_col43_label = %nrquote(PRIM_BRANCH_FINANCIAL_UNIT_RK);
%let _OUTPUT1_col43_input0 = PRIM_BRANCH_FINANCIAL_UNIT_RK;
%let _OUTPUT1_col43_exp = ;
%let _OUTPUT1_col43_input = PRIM_BRANCH_FINANCIAL_UNIT_RK;
%let _OUTPUT1_col43_input_count = 1;
%let _OUTPUT1_col44_name = FINANCIAL_APPLICATION_RK;
%let _OUTPUT1_col44_table = work.W1PL05FAE;
%let _OUTPUT1_col44_length = 8;
%let _OUTPUT1_col44_type = ;
%let _OUTPUT1_col44_format = 12.;
%let _OUTPUT1_col44_informat = 12.;
%let _OUTPUT1_col44_label = %nrquote(FINANCIAL_APPLICATION_RK);
%let _OUTPUT1_col44_input0 = FINANCIAL_APPLICATION_RK;
%let _OUTPUT1_col44_exp = ;
%let _OUTPUT1_col44_input = FINANCIAL_APPLICATION_RK;
%let _OUTPUT1_col44_input_count = 1;
%let _OUTPUT1_col45_name = CREDIT_FACILITY_RK;
%let _OUTPUT1_col45_table = work.W1PL05FAE;
%let _OUTPUT1_col45_length = 8;
%let _OUTPUT1_col45_type = ;
%let _OUTPUT1_col45_format = 12.;
%let _OUTPUT1_col45_informat = 12.;
%let _OUTPUT1_col45_label = %nrquote(CREDIT_FACILITY_RK);
%let _OUTPUT1_col45_input0 = CREDIT_FACILITY_RK;
%let _OUTPUT1_col45_exp = ;
%let _OUTPUT1_col45_input = CREDIT_FACILITY_RK;
%let _OUTPUT1_col45_input_count = 1;
%let _OUTPUT1_col46_name = FUTURE_MARGIN_INCOME_AMT;
%let _OUTPUT1_col46_table = work.W1PL05FAE;
%let _OUTPUT1_col46_length = 8;
%let _OUTPUT1_col46_type = ;
%let _OUTPUT1_col46_format = 21.5;
%let _OUTPUT1_col46_informat = 21.5;
%let _OUTPUT1_col46_label = %nrquote(FUTURE_MARGIN_INCOME_AMT);
%let _OUTPUT1_col46_input0 = FUTURE_MARGIN_INCOME_AMT;
%let _OUTPUT1_col46_exp = ;
%let _OUTPUT1_col46_input = FUTURE_MARGIN_INCOME_AMT;
%let _OUTPUT1_col46_input_count = 1;
%let _OUTPUT1_col47_name = IN_DEFAULT_FLG;
%let _OUTPUT1_col47_table = work.W1PL05FAE;
%let _OUTPUT1_col47_length = 1;
%let _OUTPUT1_col47_type = $;
%let _OUTPUT1_col47_format = $1.;
%let _OUTPUT1_col47_informat = $1.;
%let _OUTPUT1_col47_label = %nrquote(IN_DEFAULT_FLG);
%let _OUTPUT1_col47_input0 = IN_DEFAULT_FLG;
%let _OUTPUT1_col47_exp = ;
%let _OUTPUT1_col47_input = IN_DEFAULT_FLG;
%let _OUTPUT1_col47_input_count = 1;
%let _OUTPUT1_col48_name = FINANCIAL_BOOK_RK;
%let _OUTPUT1_col48_table = work.W1PL05FAE;
%let _OUTPUT1_col48_length = 8;
%let _OUTPUT1_col48_type = ;
%let _OUTPUT1_col48_format = 12.;
%let _OUTPUT1_col48_informat = 12.;
%let _OUTPUT1_col48_label = %nrquote(FINANCIAL_BOOK_RK);
%let _OUTPUT1_col48_input0 = FINANCIAL_BOOK_RK;
%let _OUTPUT1_col48_exp = ;
%let _OUTPUT1_col48_input = FINANCIAL_BOOK_RK;
%let _OUTPUT1_col48_input_count = 1;
%let _OUTPUT1_col49_name = IRRECOVERABLE_FLG;
%let _OUTPUT1_col49_table = work.W1PL05FAE;
%let _OUTPUT1_col49_length = 1;
%let _OUTPUT1_col49_type = $;
%let _OUTPUT1_col49_format = $1.;
%let _OUTPUT1_col49_informat = $1.;
%let _OUTPUT1_col49_label = %nrquote(IRRECOVERABLE_FLG);
%let _OUTPUT1_col49_input0 = IRRECOVERABLE_FLG;
%let _OUTPUT1_col49_exp = ;
%let _OUTPUT1_col49_input = IRRECOVERABLE_FLG;
%let _OUTPUT1_col49_input_count = 1;
%let _OUTPUT1_col50_name = OWNED_BY_INTERNAL_ORG_RK;
%let _OUTPUT1_col50_table = work.W1PL05FAE;
%let _OUTPUT1_col50_length = 8;
%let _OUTPUT1_col50_type = ;
%let _OUTPUT1_col50_format = 12.;
%let _OUTPUT1_col50_informat = 12.;
%let _OUTPUT1_col50_label = %nrquote(OWNED_BY_INTERNAL_ORG_RK);
%let _OUTPUT1_col50_input0 = OWNED_BY_INTERNAL_ORG_RK;
%let _OUTPUT1_col50_exp = ;
%let _OUTPUT1_col50_input = OWNED_BY_INTERNAL_ORG_RK;
%let _OUTPUT1_col50_input_count = 1;
%let _OUTPUT1_col51_name = PREVIOUS_BANK_EXTERNAL_ORG_RK;
%let _OUTPUT1_col51_table = work.W1PL05FAE;
%let _OUTPUT1_col51_length = 8;
%let _OUTPUT1_col51_type = ;
%let _OUTPUT1_col51_format = 12.;
%let _OUTPUT1_col51_informat = 12.;
%let _OUTPUT1_col51_label = %nrquote(PREVIOUS_BANK_EXTERNAL_ORG_RK);
%let _OUTPUT1_col51_input0 = PREVIOUS_BANK_EXTERNAL_ORG_RK;
%let _OUTPUT1_col51_exp = ;
%let _OUTPUT1_col51_input = PREVIOUS_BANK_EXTERNAL_ORG_RK;
%let _OUTPUT1_col51_input_count = 1;
%let _OUTPUT1_col52_name = NETTING_SET_RK;
%let _OUTPUT1_col52_table = work.W1PL05FAE;
%let _OUTPUT1_col52_length = 8;
%let _OUTPUT1_col52_type = ;
%let _OUTPUT1_col52_format = 12.;
%let _OUTPUT1_col52_informat = 12.;
%let _OUTPUT1_col52_label = %nrquote(NETTING_SET_RK);
%let _OUTPUT1_col52_input0 = NETTING_SET_RK;
%let _OUTPUT1_col52_exp = ;
%let _OUTPUT1_col52_input = NETTING_SET_RK;
%let _OUTPUT1_col52_input_count = 1;
%let _OUTPUT1_col53_name = REVOLVING_FLG;
%let _OUTPUT1_col53_table = work.W1PL05FAE;
%let _OUTPUT1_col53_length = 1;
%let _OUTPUT1_col53_type = $;
%let _OUTPUT1_col53_format = $1.;
%let _OUTPUT1_col53_informat = $1.;
%let _OUTPUT1_col53_label = %nrquote(REVOLVING_FLG);
%let _OUTPUT1_col53_input0 = REVOLVING_FLG;
%let _OUTPUT1_col53_exp = ;
%let _OUTPUT1_col53_input = REVOLVING_FLG;
%let _OUTPUT1_col53_input_count = 1;
%let _OUTPUT1_col54_name = SOURCE_CHANNEL_CD;
%let _OUTPUT1_col54_table = work.W1PL05FAE;
%let _OUTPUT1_col54_length = 3;
%let _OUTPUT1_col54_type = $;
%let _OUTPUT1_col54_format = $3.;
%let _OUTPUT1_col54_informat = $3.;
%let _OUTPUT1_col54_label = %nrquote(SOURCE_CHANNEL_CD);
%let _OUTPUT1_col54_input0 = SOURCE_CHANNEL_CD;
%let _OUTPUT1_col54_exp = ;
%let _OUTPUT1_col54_input = SOURCE_CHANNEL_CD;
%let _OUTPUT1_col54_input_count = 1;
%let _OUTPUT1_col55_name = GRACE_PERIOD_DAYS_CNT;
%let _OUTPUT1_col55_table = work.W1PL05FAE;
%let _OUTPUT1_col55_length = 8;
%let _OUTPUT1_col55_type = ;
%let _OUTPUT1_col55_format = 8.;
%let _OUTPUT1_col55_informat = 8.;
%let _OUTPUT1_col55_label = %nrquote(GRACE_PERIOD_DAYS_CNT);
%let _OUTPUT1_col55_input0 = GRACE_PERIOD_DAYS_CNT;
%let _OUTPUT1_col55_exp = ;
%let _OUTPUT1_col55_input = GRACE_PERIOD_DAYS_CNT;
%let _OUTPUT1_col55_input_count = 1;
%let _OUTPUT1_col56_name = REMARGINING_DAYS_CNT;
%let _OUTPUT1_col56_table = work.W1PL05FAE;
%let _OUTPUT1_col56_length = 8;
%let _OUTPUT1_col56_type = ;
%let _OUTPUT1_col56_format = 8.;
%let _OUTPUT1_col56_informat = 8.;
%let _OUTPUT1_col56_label = %nrquote(REMARGINING_DAYS_CNT);
%let _OUTPUT1_col56_input0 = REMARGINING_DAYS_CNT;
%let _OUTPUT1_col56_exp = ;
%let _OUTPUT1_col56_input = REMARGINING_DAYS_CNT;
%let _OUTPUT1_col56_input_count = 1;
%let _OUTPUT1_col57_name = FINANCIAL_CALENDAR_RK;
%let _OUTPUT1_col57_table = work.W1PL05FAE;
%let _OUTPUT1_col57_length = 8;
%let _OUTPUT1_col57_type = ;
%let _OUTPUT1_col57_format = 12.;
%let _OUTPUT1_col57_informat = 12.;
%let _OUTPUT1_col57_label = %nrquote(FINANCIAL_CALENDAR_RK);
%let _OUTPUT1_col57_input0 = FINANCIAL_CALENDAR_RK;
%let _OUTPUT1_col57_exp = ;
%let _OUTPUT1_col57_input = FINANCIAL_CALENDAR_RK;
%let _OUTPUT1_col57_input_count = 1;
%let _OUTPUT1_col58_name = DAY_BASIS_CD;
%let _OUTPUT1_col58_table = work.W1PL05FAE;
%let _OUTPUT1_col58_length = 10;
%let _OUTPUT1_col58_type = $;
%let _OUTPUT1_col58_format = $10.;
%let _OUTPUT1_col58_informat = $10.;
%let _OUTPUT1_col58_label = %nrquote(DAY_BASIS_CD);
%let _OUTPUT1_col58_input0 = DAY_BASIS_CD;
%let _OUTPUT1_col58_exp = ;
%let _OUTPUT1_col58_input = DAY_BASIS_CD;
%let _OUTPUT1_col58_input_count = 1;
%let _OUTPUT1_col59_name = PORTFOLIO_ID;
%let _OUTPUT1_col59_table = work.W1PL05FAE;
%let _OUTPUT1_col59_length = 32;
%let _OUTPUT1_col59_type = $;
%let _OUTPUT1_col59_format = $32.;
%let _OUTPUT1_col59_informat = $32.;
%let _OUTPUT1_col59_label = %nrquote(PORTFOLIO_ID);
%let _OUTPUT1_col59_input0 = PORTFOLIO_ID;
%let _OUTPUT1_col59_exp = ;
%let _OUTPUT1_col59_input = PORTFOLIO_ID;
%let _OUTPUT1_col59_input_count = 1;
%let _OUTPUT1_col60_name = SECURITIZATION_POOL_RK;
%let _OUTPUT1_col60_table = work.W1PL05FAE;
%let _OUTPUT1_col60_length = 8;
%let _OUTPUT1_col60_type = ;
%let _OUTPUT1_col60_format = 12.;
%let _OUTPUT1_col60_informat = 12.;
%let _OUTPUT1_col60_label = %nrquote(SECURITIZATION_POOL_RK);
%let _OUTPUT1_col60_input0 = SECURITIZATION_POOL_RK;
%let _OUTPUT1_col60_exp = ;
%let _OUTPUT1_col60_input = SECURITIZATION_POOL_RK;
%let _OUTPUT1_col60_input_count = 1;
%let _OUTPUT1_col61_name = RECEIVABLES_POOL_RK;
%let _OUTPUT1_col61_table = work.W1PL05FAE;
%let _OUTPUT1_col61_length = 8;
%let _OUTPUT1_col61_type = ;
%let _OUTPUT1_col61_format = 12.;
%let _OUTPUT1_col61_informat = 12.;
%let _OUTPUT1_col61_label = %nrquote(RECEIVABLES_POOL_RK);
%let _OUTPUT1_col61_input0 = RECEIVABLES_POOL_RK;
%let _OUTPUT1_col61_exp = ;
%let _OUTPUT1_col61_input = RECEIVABLES_POOL_RK;
%let _OUTPUT1_col61_input_count = 1;
%let _OUTPUT1_col62_name = ACCOUNT_USAGE_TYPE_CD;
%let _OUTPUT1_col62_table = work.W1PL05FAE;
%let _OUTPUT1_col62_length = 3;
%let _OUTPUT1_col62_type = $;
%let _OUTPUT1_col62_format = $3.;
%let _OUTPUT1_col62_informat = $3.;
%let _OUTPUT1_col62_label = %nrquote(ACCOUNT_USAGE_TYPE_CD);
%let _OUTPUT1_col62_input0 = ACCOUNT_USAGE_TYPE_CD;
%let _OUTPUT1_col62_exp = ;
%let _OUTPUT1_col62_input = ACCOUNT_USAGE_TYPE_CD;
%let _OUTPUT1_col62_input_count = 1;
%let _OUTPUT1_col63_name = RISK_ALARM_FLG;
%let _OUTPUT1_col63_table = work.W1PL05FAE;
%let _OUTPUT1_col63_length = 1;
%let _OUTPUT1_col63_type = $;
%let _OUTPUT1_col63_format = $1.;
%let _OUTPUT1_col63_informat = $1.;
%let _OUTPUT1_col63_label = %nrquote(RISK_ALARM_FLG);
%let _OUTPUT1_col63_input0 = RISK_ALARM_FLG;
%let _OUTPUT1_col63_exp = ;
%let _OUTPUT1_col63_input = RISK_ALARM_FLG;
%let _OUTPUT1_col63_input_count = 1;
%let _OUTPUT1_col64_name = LOW_PROFITABILITY_FLG;
%let _OUTPUT1_col64_table = work.W1PL05FAE;
%let _OUTPUT1_col64_length = 1;
%let _OUTPUT1_col64_type = $;
%let _OUTPUT1_col64_format = $1.;
%let _OUTPUT1_col64_informat = $1.;
%let _OUTPUT1_col64_label = %nrquote(LOW_PROFITABILITY_FLG);
%let _OUTPUT1_col64_input0 = LOW_PROFITABILITY_FLG;
%let _OUTPUT1_col64_exp = ;
%let _OUTPUT1_col64_input = LOW_PROFITABILITY_FLG;
%let _OUTPUT1_col64_input_count = 1;
%let _OUTPUT1_col65_name = ACCOUNT_LIFECYCLE_STG_CD;
%let _OUTPUT1_col65_table = work.W1PL05FAE;
%let _OUTPUT1_col65_length = 3;
%let _OUTPUT1_col65_type = $;
%let _OUTPUT1_col65_format = $3.;
%let _OUTPUT1_col65_informat = $3.;
%let _OUTPUT1_col65_label = %nrquote(ACCOUNT_LIFECYCLE_STG_CD);
%let _OUTPUT1_col65_input0 = ACCOUNT_LIFECYCLE_STG_CD;
%let _OUTPUT1_col65_exp = ;
%let _OUTPUT1_col65_input = ACCOUNT_LIFECYCLE_STG_CD;
%let _OUTPUT1_col65_input_count = 1;
%let _OUTPUT1_col66_name = ATTRITION_ALARM_FLG;
%let _OUTPUT1_col66_table = work.W1PL05FAE;
%let _OUTPUT1_col66_length = 1;
%let _OUTPUT1_col66_type = $;
%let _OUTPUT1_col66_format = $1.;
%let _OUTPUT1_col66_informat = $1.;
%let _OUTPUT1_col66_label = %nrquote(ATTRITION_ALARM_FLG);
%let _OUTPUT1_col66_input0 = ATTRITION_ALARM_FLG;
%let _OUTPUT1_col66_exp = ;
%let _OUTPUT1_col66_input = ATTRITION_ALARM_FLG;
%let _OUTPUT1_col66_input_count = 1;
%let _OUTPUT1_col67_name = BALANCE_FROZEN_FLG;
%let _OUTPUT1_col67_table = work.W1PL05FAE;
%let _OUTPUT1_col67_length = 1;
%let _OUTPUT1_col67_type = $;
%let _OUTPUT1_col67_format = $1.;
%let _OUTPUT1_col67_informat = $1.;
%let _OUTPUT1_col67_label = %nrquote(BALANCE_FROZEN_FLG);
%let _OUTPUT1_col67_input0 = BALANCE_FROZEN_FLG;
%let _OUTPUT1_col67_exp = ;
%let _OUTPUT1_col67_input = BALANCE_FROZEN_FLG;
%let _OUTPUT1_col67_input_count = 1;
%let _OUTPUT1_col68_name = BALANCE_FROZEN_DT;
%let _OUTPUT1_col68_table = work.W1PL05FAE;
%let _OUTPUT1_col68_length = 8;
%let _OUTPUT1_col68_type = ;
%let _OUTPUT1_col68_format = DATETIME20.;
%let _OUTPUT1_col68_informat = DATETIME20.;
%let _OUTPUT1_col68_label = %nrquote(BALANCE_FROZEN_DT);
%let _OUTPUT1_col68_input0 = BALANCE_FROZEN_DT;
%let _OUTPUT1_col68_exp = ;
%let _OUTPUT1_col68_input = BALANCE_FROZEN_DT;
%let _OUTPUT1_col68_input_count = 1;
%let _OUTPUT1_col69_name = ACCOUNT_BLOCK_REASON_CD;
%let _OUTPUT1_col69_table = work.W1PL05FAE;
%let _OUTPUT1_col69_length = 3;
%let _OUTPUT1_col69_type = $;
%let _OUTPUT1_col69_format = $3.;
%let _OUTPUT1_col69_informat = $3.;
%let _OUTPUT1_col69_label = %nrquote(ACCOUNT_BLOCK_REASON_CD);
%let _OUTPUT1_col69_input0 = ACCOUNT_BLOCK_REASON_CD;
%let _OUTPUT1_col69_exp = ;
%let _OUTPUT1_col69_input = ACCOUNT_BLOCK_REASON_CD;
%let _OUTPUT1_col69_input_count = 1;
%let _OUTPUT1_col70_name = TAXATION_STATE_CD;
%let _OUTPUT1_col70_table = work.W1PL05FAE;
%let _OUTPUT1_col70_length = 4;
%let _OUTPUT1_col70_type = $;
%let _OUTPUT1_col70_format = $4.;
%let _OUTPUT1_col70_informat = $4.;
%let _OUTPUT1_col70_label = %nrquote(TAXATION_STATE_CD);
%let _OUTPUT1_col70_input0 = TAXATION_STATE_CD;
%let _OUTPUT1_col70_exp = ;
%let _OUTPUT1_col70_input = TAXATION_STATE_CD;
%let _OUTPUT1_col70_input_count = 1;
%let _OUTPUT1_col71_name = EFFECTIVE_MATURITY_YEAR_NO;
%let _OUTPUT1_col71_table = work.W1PL05FAE;
%let _OUTPUT1_col71_length = 8;
%let _OUTPUT1_col71_type = ;
%let _OUTPUT1_col71_format = 10.3;
%let _OUTPUT1_col71_informat = 10.3;
%let _OUTPUT1_col71_label = %nrquote(EFFECTIVE_MATURITY_YEAR_NO);
%let _OUTPUT1_col71_input0 = EFFECTIVE_MATURITY_YEAR_NO;
%let _OUTPUT1_col71_exp = ;
%let _OUTPUT1_col71_input = EFFECTIVE_MATURITY_YEAR_NO;
%let _OUTPUT1_col71_input_count = 1;
%let _OUTPUT1_col72_name = GL_ACCOUNT_RK;
%let _OUTPUT1_col72_table = work.W1PL05FAE;
%let _OUTPUT1_col72_length = 8;
%let _OUTPUT1_col72_type = ;
%let _OUTPUT1_col72_format = 12.;
%let _OUTPUT1_col72_informat = 12.;
%let _OUTPUT1_col72_label = %nrquote(GL_ACCOUNT_RK);
%let _OUTPUT1_col72_input0 = GL_ACCOUNT_RK;
%let _OUTPUT1_col72_exp = ;
%let _OUTPUT1_col72_input = GL_ACCOUNT_RK;
%let _OUTPUT1_col72_input_count = 1;
%let _OUTPUT1_col73_name = FROM_OTHER_INSTITUTION_FLG;
%let _OUTPUT1_col73_table = work.W1PL05FAE;
%let _OUTPUT1_col73_length = 1;
%let _OUTPUT1_col73_type = $;
%let _OUTPUT1_col73_format = $1.;
%let _OUTPUT1_col73_informat = $1.;
%let _OUTPUT1_col73_label = %nrquote(FROM_OTHER_INSTITUTION_FLG);
%let _OUTPUT1_col73_input0 = FROM_OTHER_INSTITUTION_FLG;
%let _OUTPUT1_col73_exp = ;
%let _OUTPUT1_col73_input = FROM_OTHER_INSTITUTION_FLG;
%let _OUTPUT1_col73_input_count = 1;
%let _OUTPUT1_col74_name = ACCOUNT_RENEWAL_CNT;
%let _OUTPUT1_col74_table = work.W1PL05FAE;
%let _OUTPUT1_col74_length = 8;
%let _OUTPUT1_col74_type = ;
%let _OUTPUT1_col74_format = 8.;
%let _OUTPUT1_col74_informat = 8.;
%let _OUTPUT1_col74_label = %nrquote(ACCOUNT_RENEWAL_CNT);
%let _OUTPUT1_col74_input0 = ACCOUNT_RENEWAL_CNT;
%let _OUTPUT1_col74_exp = ;
%let _OUTPUT1_col74_input = ACCOUNT_RENEWAL_CNT;
%let _OUTPUT1_col74_input_count = 1;
%let _OUTPUT1_col75_name = BALANCE_TRANSFER_DT;
%let _OUTPUT1_col75_table = work.W1PL05FAE;
%let _OUTPUT1_col75_length = 8;
%let _OUTPUT1_col75_type = ;
%let _OUTPUT1_col75_format = DATETIME20.;
%let _OUTPUT1_col75_informat = DATETIME20.;
%let _OUTPUT1_col75_label = %nrquote(BALANCE_TRANSFER_DT);
%let _OUTPUT1_col75_input0 = BALANCE_TRANSFER_DT;
%let _OUTPUT1_col75_exp = ;
%let _OUTPUT1_col75_input = BALANCE_TRANSFER_DT;
%let _OUTPUT1_col75_input_count = 1;
%let _OUTPUT1_col76_name = BALANCE_TRANSFER_AMT;
%let _OUTPUT1_col76_table = work.W1PL05FAE;
%let _OUTPUT1_col76_length = 8;
%let _OUTPUT1_col76_type = ;
%let _OUTPUT1_col76_format = 21.5;
%let _OUTPUT1_col76_informat = 21.5;
%let _OUTPUT1_col76_label = %nrquote(BALANCE_TRANSFER_AMT);
%let _OUTPUT1_col76_input0 = BALANCE_TRANSFER_AMT;
%let _OUTPUT1_col76_exp = ;
%let _OUTPUT1_col76_input = BALANCE_TRANSFER_AMT;
%let _OUTPUT1_col76_input_count = 1;
%let _OUTPUT1_col77_name = BALANCE_TRANSFER_CNT;
%let _OUTPUT1_col77_table = work.W1PL05FAE;
%let _OUTPUT1_col77_length = 8;
%let _OUTPUT1_col77_type = ;
%let _OUTPUT1_col77_format = 8.;
%let _OUTPUT1_col77_informat = 8.;
%let _OUTPUT1_col77_label = %nrquote(BALANCE_TRANSFER_CNT);
%let _OUTPUT1_col77_input0 = BALANCE_TRANSFER_CNT;
%let _OUTPUT1_col77_exp = ;
%let _OUTPUT1_col77_input = BALANCE_TRANSFER_CNT;
%let _OUTPUT1_col77_input_count = 1;
%let _OUTPUT1_col78_name = BASE_LONG_TERM_APR_RT;
%let _OUTPUT1_col78_table = work.W1PL05FAE;
%let _OUTPUT1_col78_length = 8;
%let _OUTPUT1_col78_type = ;
%let _OUTPUT1_col78_format = 12.4;
%let _OUTPUT1_col78_informat = 12.4;
%let _OUTPUT1_col78_label = %nrquote(BASE_LONG_TERM_APR_RT);
%let _OUTPUT1_col78_input0 = BASE_LONG_TERM_APR_RT;
%let _OUTPUT1_col78_exp = ;
%let _OUTPUT1_col78_input = BASE_LONG_TERM_APR_RT;
%let _OUTPUT1_col78_input_count = 1;
%let _OUTPUT1_col79_name = BROKER_FLG;
%let _OUTPUT1_col79_table = work.W1PL05FAE;
%let _OUTPUT1_col79_length = 1;
%let _OUTPUT1_col79_type = $;
%let _OUTPUT1_col79_format = $1.;
%let _OUTPUT1_col79_informat = $1.;
%let _OUTPUT1_col79_label = %nrquote(BROKER_FLG);
%let _OUTPUT1_col79_input0 = BROKER_FLG;
%let _OUTPUT1_col79_exp = ;
%let _OUTPUT1_col79_input = BROKER_FLG;
%let _OUTPUT1_col79_input_count = 1;
%let _OUTPUT1_col80_name = MULT_RATE_FLG;
%let _OUTPUT1_col80_table = work.W1PL05FAE;
%let _OUTPUT1_col80_length = 1;
%let _OUTPUT1_col80_type = $;
%let _OUTPUT1_col80_format = $1.;
%let _OUTPUT1_col80_informat = $1.;
%let _OUTPUT1_col80_label = %nrquote(MULT_RATE_FLG);
%let _OUTPUT1_col80_input0 = MULT_RATE_FLG;
%let _OUTPUT1_col80_exp = ;
%let _OUTPUT1_col80_input = MULT_RATE_FLG;
%let _OUTPUT1_col80_input_count = 1;
%let _OUTPUT1_col81_name = AUTO_DEBIT_ACCOUNT_NO;
%let _OUTPUT1_col81_table = work.W1PL05FAE;
%let _OUTPUT1_col81_length = 32;
%let _OUTPUT1_col81_type = $;
%let _OUTPUT1_col81_format = $32.;
%let _OUTPUT1_col81_informat = $32.;
%let _OUTPUT1_col81_label = %nrquote(AUTO_DEBIT_ACCOUNT_NO);
%let _OUTPUT1_col81_input0 = AUTO_DEBIT_ACCOUNT_NO;
%let _OUTPUT1_col81_exp = ;
%let _OUTPUT1_col81_input = AUTO_DEBIT_ACCOUNT_NO;
%let _OUTPUT1_col81_input_count = 1;
%let _OUTPUT1_col82_name = WORST_STATUS_LAST_12_MTH_CD;
%let _OUTPUT1_col82_table = work.W1PL05FAE;
%let _OUTPUT1_col82_length = 3;
%let _OUTPUT1_col82_type = $;
%let _OUTPUT1_col82_format = $3.;
%let _OUTPUT1_col82_informat = $3.;
%let _OUTPUT1_col82_label = %nrquote(WORST_STATUS_LAST_12_MTH_CD);
%let _OUTPUT1_col82_input0 = WORST_STATUS_LAST_12_MTH_CD;
%let _OUTPUT1_col82_exp = ;
%let _OUTPUT1_col82_input = WORST_STATUS_LAST_12_MTH_CD;
%let _OUTPUT1_col82_input_count = 1;
%let _OUTPUT1_col83_name = WORST_STATUS_LAST_12_MTH_DT;
%let _OUTPUT1_col83_table = work.W1PL05FAE;
%let _OUTPUT1_col83_length = 8;
%let _OUTPUT1_col83_type = ;
%let _OUTPUT1_col83_format = DATETIME20.;
%let _OUTPUT1_col83_informat = DATETIME20.;
%let _OUTPUT1_col83_label = %nrquote(WORST_STATUS_LAST_12_MTH_DT);
%let _OUTPUT1_col83_input0 = WORST_STATUS_LAST_12_MTH_DT;
%let _OUTPUT1_col83_exp = ;
%let _OUTPUT1_col83_input = WORST_STATUS_LAST_12_MTH_DT;
%let _OUTPUT1_col83_input_count = 1;
%let _OUTPUT1_col84_name = BALANCE_TRNSF_OTHER_ACCT_CNT;
%let _OUTPUT1_col84_table = work.W1PL05FAE;
%let _OUTPUT1_col84_length = 8;
%let _OUTPUT1_col84_type = ;
%let _OUTPUT1_col84_format = 8.;
%let _OUTPUT1_col84_informat = 8.;
%let _OUTPUT1_col84_label = %nrquote(BALANCE_TRNSF_OTHER_ACCT_CNT);
%let _OUTPUT1_col84_input0 = BALANCE_TRNSF_OTHER_ACCT_CNT;
%let _OUTPUT1_col84_exp = ;
%let _OUTPUT1_col84_input = BALANCE_TRNSF_OTHER_ACCT_CNT;
%let _OUTPUT1_col84_input_count = 1;
%let _OUTPUT1_col85_name = EFFECTIVE_FROM_DTTM;
%let _OUTPUT1_col85_table = work.W1PL05FAE;
%let _OUTPUT1_col85_length = 8;
%let _OUTPUT1_col85_type = ;
%let _OUTPUT1_col85_format = DATETIME20.;
%let _OUTPUT1_col85_informat = DATETIME20.;
%let _OUTPUT1_col85_label = %nrquote(EFFECTIVE_FROM_DTTM);
%let _OUTPUT1_col85_input0 = EFFECTIVE_FROM_DTTM;
%let _OUTPUT1_col85_exp = ;
%let _OUTPUT1_col85_input = EFFECTIVE_FROM_DTTM;
%let _OUTPUT1_col85_input_count = 1;
%let _OUTPUT1_col86_name = EFFECTIVE_TO_DTTM;
%let _OUTPUT1_col86_table = work.W1PL05FAE;
%let _OUTPUT1_col86_length = 8;
%let _OUTPUT1_col86_type = ;
%let _OUTPUT1_col86_format = DATETIME20.;
%let _OUTPUT1_col86_informat = DATETIME20.;
%let _OUTPUT1_col86_label = %nrquote(EFFECTIVE_TO_DTTM);
%let _OUTPUT1_col86_input0 = EFFECTIVE_TO_DTTM;
%let _OUTPUT1_col86_exp = ;
%let _OUTPUT1_col86_input = EFFECTIVE_TO_DTTM;
%let _OUTPUT1_col86_input_count = 1;
%let _OUTPUT1_col87_name = COUNTERPARTY_RK;
%let _OUTPUT1_col87_table = work.W1PL05FAE;
%let _OUTPUT1_col87_length = 8;
%let _OUTPUT1_col87_type = ;
%let _OUTPUT1_col87_format = 12.;
%let _OUTPUT1_col87_informat = 12.;
%let _OUTPUT1_col87_label = %nrquote(COUNTERPARTY_RK);
%let _OUTPUT1_col87_input0 = COUNTERPARTY_RK;
%let _OUTPUT1_col87_exp = ;
%let _OUTPUT1_col87_input = COUNTERPARTY_RK;
%let _OUTPUT1_col87_input_count = 1;
%let _OUTPUT1_col88_name = INSURED_BY_COUNTERPARTY_RK;
%let _OUTPUT1_col88_table = work.W1PL05FAE;
%let _OUTPUT1_col88_length = 8;
%let _OUTPUT1_col88_type = ;
%let _OUTPUT1_col88_format = 12.;
%let _OUTPUT1_col88_informat = 12.;
%let _OUTPUT1_col88_label = %nrquote(INSURED_BY_COUNTERPARTY_RK);
%let _OUTPUT1_col88_input0 = INSURED_BY_COUNTERPARTY_RK;
%let _OUTPUT1_col88_exp = ;
%let _OUTPUT1_col88_input = INSURED_BY_COUNTERPARTY_RK;
%let _OUTPUT1_col88_input_count = 1;
%let _OUTPUT1_col89_name = STATEMENT_FREQUENCY_CD;
%let _OUTPUT1_col89_table = work.W1PL05FAE;
%let _OUTPUT1_col89_length = 3;
%let _OUTPUT1_col89_type = $;
%let _OUTPUT1_col89_format = $3.;
%let _OUTPUT1_col89_informat = $3.;
%let _OUTPUT1_col89_label = %nrquote(STATEMENT_FREQUENCY_CD);
%let _OUTPUT1_col89_input0 = STATEMENT_FREQUENCY_CD;
%let _OUTPUT1_col89_exp = ;
%let _OUTPUT1_col89_input = STATEMENT_FREQUENCY_CD;
%let _OUTPUT1_col89_input_count = 1;
%let _OUTPUT1_col90_name = SECURITY_DEPOSIT_AMT;
%let _OUTPUT1_col90_table = work.W1PL05FAE;
%let _OUTPUT1_col90_length = 8;
%let _OUTPUT1_col90_type = ;
%let _OUTPUT1_col90_format = 21.5;
%let _OUTPUT1_col90_informat = 21.5;
%let _OUTPUT1_col90_label = %nrquote(SECURITY_DEPOSIT_AMT);
%let _OUTPUT1_col90_input0 = SECURITY_DEPOSIT_AMT;
%let _OUTPUT1_col90_exp = ;
%let _OUTPUT1_col90_input = SECURITY_DEPOSIT_AMT;
%let _OUTPUT1_col90_input_count = 1;
%let _OUTPUT1_col91_name = SECURITY_DEPOSIT_REFUND_AMT;
%let _OUTPUT1_col91_table = work.W1PL05FAE;
%let _OUTPUT1_col91_length = 8;
%let _OUTPUT1_col91_type = ;
%let _OUTPUT1_col91_format = 21.5;
%let _OUTPUT1_col91_informat = 21.5;
%let _OUTPUT1_col91_label = %nrquote(SECURITY_DEPOSIT_REFUND_AMT);
%let _OUTPUT1_col91_input0 = SECURITY_DEPOSIT_REFUND_AMT;
%let _OUTPUT1_col91_exp = ;
%let _OUTPUT1_col91_input = SECURITY_DEPOSIT_REFUND_AMT;
%let _OUTPUT1_col91_input_count = 1;
%let _OUTPUT1_col92_name = FIRST_PAYMENT_DT;
%let _OUTPUT1_col92_table = work.W1PL05FAE;
%let _OUTPUT1_col92_length = 8;
%let _OUTPUT1_col92_type = ;
%let _OUTPUT1_col92_format = DATETIME20.;
%let _OUTPUT1_col92_informat = DATETIME20.;
%let _OUTPUT1_col92_label = %nrquote(FIRST_PAYMENT_DT);
%let _OUTPUT1_col92_input0 = FIRST_PAYMENT_DT;
%let _OUTPUT1_col92_exp = ;
%let _OUTPUT1_col92_input = FIRST_PAYMENT_DT;
%let _OUTPUT1_col92_input_count = 1;
%let _OUTPUT1_col93_name = LAST_PAYMENT_DT;
%let _OUTPUT1_col93_table = work.W1PL05FAE;
%let _OUTPUT1_col93_length = 8;
%let _OUTPUT1_col93_type = ;
%let _OUTPUT1_col93_format = DATETIME20.;
%let _OUTPUT1_col93_informat = DATETIME20.;
%let _OUTPUT1_col93_label = %nrquote(LAST_PAYMENT_DT);
%let _OUTPUT1_col93_input0 = LAST_PAYMENT_DT;
%let _OUTPUT1_col93_exp = ;
%let _OUTPUT1_col93_input = LAST_PAYMENT_DT;
%let _OUTPUT1_col93_input_count = 1;
%let _OUTPUT1_col94_name = FIRST_RESET_DT;
%let _OUTPUT1_col94_table = work.W1PL05FAE;
%let _OUTPUT1_col94_length = 8;
%let _OUTPUT1_col94_type = ;
%let _OUTPUT1_col94_format = DATETIME20.;
%let _OUTPUT1_col94_informat = DATETIME20.;
%let _OUTPUT1_col94_label = %nrquote(FIRST_RESET_DT);
%let _OUTPUT1_col94_input0 = FIRST_RESET_DT;
%let _OUTPUT1_col94_exp = ;
%let _OUTPUT1_col94_input = FIRST_RESET_DT;
%let _OUTPUT1_col94_input_count = 1;
%let _OUTPUT1_col95_name = LAST_RESET_DT;
%let _OUTPUT1_col95_table = work.W1PL05FAE;
%let _OUTPUT1_col95_length = 8;
%let _OUTPUT1_col95_type = ;
%let _OUTPUT1_col95_format = DATETIME20.;
%let _OUTPUT1_col95_informat = DATETIME20.;
%let _OUTPUT1_col95_label = %nrquote(LAST_RESET_DT);
%let _OUTPUT1_col95_input0 = LAST_RESET_DT;
%let _OUTPUT1_col95_exp = ;
%let _OUTPUT1_col95_input = LAST_RESET_DT;
%let _OUTPUT1_col95_input_count = 1;
%let _OUTPUT1_col96_name = RESETS_PER_ANNUM_NO;
%let _OUTPUT1_col96_table = work.W1PL05FAE;
%let _OUTPUT1_col96_length = 8;
%let _OUTPUT1_col96_type = ;
%let _OUTPUT1_col96_format = 7.;
%let _OUTPUT1_col96_informat = 7.;
%let _OUTPUT1_col96_label = %nrquote(RESETS_PER_ANNUM_NO);
%let _OUTPUT1_col96_input0 = RESETS_PER_ANNUM_NO;
%let _OUTPUT1_col96_exp = ;
%let _OUTPUT1_col96_input = RESETS_PER_ANNUM_NO;
%let _OUTPUT1_col96_input_count = 1;
%let _OUTPUT1_col97_name = PRINCIPAL_PAYMENT_TYPE_CD;
%let _OUTPUT1_col97_table = work.W1PL05FAE;
%let _OUTPUT1_col97_length = 3;
%let _OUTPUT1_col97_type = $;
%let _OUTPUT1_col97_format = $3.;
%let _OUTPUT1_col97_informat = $3.;
%let _OUTPUT1_col97_label = %nrquote(PRINCIPAL_PAYMENT_TYPE_CD);
%let _OUTPUT1_col97_input0 = PRINCIPAL_PAYMENT_TYPE_CD;
%let _OUTPUT1_col97_exp = ;
%let _OUTPUT1_col97_input = PRINCIPAL_PAYMENT_TYPE_CD;
%let _OUTPUT1_col97_input_count = 1;
%let _OUTPUT1_col98_name = PRINCIPAL_PAYMENT_AMT;
%let _OUTPUT1_col98_table = work.W1PL05FAE;
%let _OUTPUT1_col98_length = 8;
%let _OUTPUT1_col98_type = ;
%let _OUTPUT1_col98_format = 21.5;
%let _OUTPUT1_col98_informat = 21.5;
%let _OUTPUT1_col98_label = %nrquote(PRINCIPAL_PAYMENT_AMT);
%let _OUTPUT1_col98_input0 = PRINCIPAL_PAYMENT_AMT;
%let _OUTPUT1_col98_exp = ;
%let _OUTPUT1_col98_input = PRINCIPAL_PAYMENT_AMT;
%let _OUTPUT1_col98_input_count = 1;
%let _OUTPUT1_col99_name = RATE_POLICY_RK;
%let _OUTPUT1_col99_table = work.W1PL05FAE;
%let _OUTPUT1_col99_length = 8;
%let _OUTPUT1_col99_type = ;
%let _OUTPUT1_col99_format = 12.;
%let _OUTPUT1_col99_informat = 12.;
%let _OUTPUT1_col99_label = %nrquote(RATE_POLICY_RK);
%let _OUTPUT1_col99_input0 = RATE_POLICY_RK;
%let _OUTPUT1_col99_exp = ;
%let _OUTPUT1_col99_input = RATE_POLICY_RK;
%let _OUTPUT1_col99_input_count = 1;
%let _OUTPUT1_col100_name = SPREAD_RT;
%let _OUTPUT1_col100_table = work.W1PL05FAE;
%let _OUTPUT1_col100_length = 8;
%let _OUTPUT1_col100_type = ;
%let _OUTPUT1_col100_format = 12.4;
%let _OUTPUT1_col100_informat = 12.4;
%let _OUTPUT1_col100_label = %nrquote(SPREAD_RT);
%let _OUTPUT1_col100_input0 = SPREAD_RT;
%let _OUTPUT1_col100_exp = ;
%let _OUTPUT1_col100_input = SPREAD_RT;
%let _OUTPUT1_col100_input_count = 1;
%let _OUTPUT1_col101_name = DISCOUNT_SPREAD_RT;
%let _OUTPUT1_col101_table = work.W1PL05FAE;
%let _OUTPUT1_col101_length = 8;
%let _OUTPUT1_col101_type = ;
%let _OUTPUT1_col101_format = 12.4;
%let _OUTPUT1_col101_informat = 12.4;
%let _OUTPUT1_col101_label = %nrquote(DISCOUNT_SPREAD_RT);
%let _OUTPUT1_col101_input0 = DISCOUNT_SPREAD_RT;
%let _OUTPUT1_col101_exp = ;
%let _OUTPUT1_col101_input = DISCOUNT_SPREAD_RT;
%let _OUTPUT1_col101_input_count = 1;
%let _OUTPUT1_col102_name = INITIAL_CONTRACT_RT;
%let _OUTPUT1_col102_table = work.W1PL05FAE;
%let _OUTPUT1_col102_length = 8;
%let _OUTPUT1_col102_type = ;
%let _OUTPUT1_col102_format = 12.4;
%let _OUTPUT1_col102_informat = 12.4;
%let _OUTPUT1_col102_label = %nrquote(INITIAL_CONTRACT_RT);
%let _OUTPUT1_col102_input0 = INITIAL_CONTRACT_RT;
%let _OUTPUT1_col102_exp = ;
%let _OUTPUT1_col102_input = INITIAL_CONTRACT_RT;
%let _OUTPUT1_col102_input_count = 1;
%let _OUTPUT1_col103_name = FIXED_MONTHLY_PREPAYMENT_RT;
%let _OUTPUT1_col103_table = work.W1PL05FAE;
%let _OUTPUT1_col103_length = 8;
%let _OUTPUT1_col103_type = ;
%let _OUTPUT1_col103_format = 12.4;
%let _OUTPUT1_col103_informat = 12.4;
%let _OUTPUT1_col103_label = %nrquote(FIXED_MONTHLY_PREPAYMENT_RT);
%let _OUTPUT1_col103_input0 = FIXED_MONTHLY_PREPAYMENT_RT;
%let _OUTPUT1_col103_exp = ;
%let _OUTPUT1_col103_input = FIXED_MONTHLY_PREPAYMENT_RT;
%let _OUTPUT1_col103_input_count = 1;
%let _OUTPUT1_col104_name = CAPITAL_ALLOCATION_RK;
%let _OUTPUT1_col104_table = work.W1PL05FAE;
%let _OUTPUT1_col104_length = 8;
%let _OUTPUT1_col104_type = ;
%let _OUTPUT1_col104_format = 12.;
%let _OUTPUT1_col104_informat = 12.;
%let _OUTPUT1_col104_label = %nrquote(CAPITAL_ALLOCATION_RK);
%let _OUTPUT1_col104_input0 = CAPITAL_ALLOCATION_RK;
%let _OUTPUT1_col104_exp = ;
%let _OUTPUT1_col104_input = CAPITAL_ALLOCATION_RK;
%let _OUTPUT1_col104_input_count = 1;
%let _OUTPUT1_col105_name = CAPITAL_COST_RK;
%let _OUTPUT1_col105_table = work.W1PL05FAE;
%let _OUTPUT1_col105_length = 8;
%let _OUTPUT1_col105_type = ;
%let _OUTPUT1_col105_format = 12.;
%let _OUTPUT1_col105_informat = 12.;
%let _OUTPUT1_col105_label = %nrquote(CAPITAL_COST_RK);
%let _OUTPUT1_col105_input0 = CAPITAL_COST_RK;
%let _OUTPUT1_col105_exp = ;
%let _OUTPUT1_col105_input = CAPITAL_COST_RK;
%let _OUTPUT1_col105_input_count = 1;
%let _OUTPUT1_col106_name = SEGMENT_RK;
%let _OUTPUT1_col106_table = work.W1PL05FAE;
%let _OUTPUT1_col106_length = 8;
%let _OUTPUT1_col106_type = ;
%let _OUTPUT1_col106_format = 12.;
%let _OUTPUT1_col106_informat = 12.;
%let _OUTPUT1_col106_label = %nrquote(SEGMENT_RK);
%let _OUTPUT1_col106_input0 = SEGMENT_RK;
%let _OUTPUT1_col106_exp = ;
%let _OUTPUT1_col106_input = SEGMENT_RK;
%let _OUTPUT1_col106_input_count = 1;
%let _OUTPUT1_col107_name = NEAR_BRANCH_FINANCIAL_UNIT_RK;
%let _OUTPUT1_col107_table = work.W1PL05FAE;
%let _OUTPUT1_col107_length = 8;
%let _OUTPUT1_col107_type = ;
%let _OUTPUT1_col107_format = 12.;
%let _OUTPUT1_col107_informat = 12.;
%let _OUTPUT1_col107_label = %nrquote(NEAR_BRANCH_FINANCIAL_UNIT_RK);
%let _OUTPUT1_col107_input0 = NEAR_BRANCH_FINANCIAL_UNIT_RK;
%let _OUTPUT1_col107_exp = ;
%let _OUTPUT1_col107_input = NEAR_BRANCH_FINANCIAL_UNIT_RK;
%let _OUTPUT1_col107_input_count = 1;
%let _OUTPUT1_col108_name = STATEMENT_OPT_FLG;
%let _OUTPUT1_col108_table = work.W1PL05FAE;
%let _OUTPUT1_col108_length = 1;
%let _OUTPUT1_col108_type = $;
%let _OUTPUT1_col108_format = $1.;
%let _OUTPUT1_col108_informat = $1.;
%let _OUTPUT1_col108_label = %nrquote(STATEMENT_OPT_FLG);
%let _OUTPUT1_col108_input0 = STATEMENT_OPT_FLG;
%let _OUTPUT1_col108_exp = ;
%let _OUTPUT1_col108_input = STATEMENT_OPT_FLG;
%let _OUTPUT1_col108_input_count = 1;
%let _OUTPUT1_col109_name = VALUE_SCALING_FACTOR_RT;
%let _OUTPUT1_col109_table = work.W1PL05FAE;
%let _OUTPUT1_col109_length = 8;
%let _OUTPUT1_col109_type = ;
%let _OUTPUT1_col109_format = 12.4;
%let _OUTPUT1_col109_informat = 12.4;
%let _OUTPUT1_col109_label = %nrquote(VALUE_SCALING_FACTOR_RT);
%let _OUTPUT1_col109_input0 = VALUE_SCALING_FACTOR_RT;
%let _OUTPUT1_col109_exp = ;
%let _OUTPUT1_col109_input = VALUE_SCALING_FACTOR_RT;
%let _OUTPUT1_col109_input_count = 1;
%let _OUTPUT1_col110_name = INTERNAL_REPORTING_CATEGORY_CD;
%let _OUTPUT1_col110_table = work.W1PL05FAE;
%let _OUTPUT1_col110_length = 3;
%let _OUTPUT1_col110_type = $;
%let _OUTPUT1_col110_format = $3.;
%let _OUTPUT1_col110_informat = $3.;
%let _OUTPUT1_col110_label = %nrquote(INTERNAL_REPORTING_CATEGORY_CD);
%let _OUTPUT1_col110_input0 = INTERNAL_REPORTING_CATEGORY_CD;
%let _OUTPUT1_col110_exp = ;
%let _OUTPUT1_col110_input = INTERNAL_REPORTING_CATEGORY_CD;
%let _OUTPUT1_col110_input_count = 1;
%let _OUTPUT1_col111_name = CONVEXITY_ADJUSTMENT_FLG;
%let _OUTPUT1_col111_table = work.W1PL05FAE;
%let _OUTPUT1_col111_length = 1;
%let _OUTPUT1_col111_type = $;
%let _OUTPUT1_col111_format = $1.;
%let _OUTPUT1_col111_informat = $1.;
%let _OUTPUT1_col111_label = %nrquote(CONVEXITY_ADJUSTMENT_FLG);
%let _OUTPUT1_col111_input0 = CONVEXITY_ADJUSTMENT_FLG;
%let _OUTPUT1_col111_exp = ;
%let _OUTPUT1_col111_input = CONVEXITY_ADJUSTMENT_FLG;
%let _OUTPUT1_col111_input_count = 1;
%let _OUTPUT1_col112_name = ARREARS_PAYMENT_CD;
%let _OUTPUT1_col112_table = work.W1PL05FAE;
%let _OUTPUT1_col112_length = 3;
%let _OUTPUT1_col112_type = $;
%let _OUTPUT1_col112_format = $3.;
%let _OUTPUT1_col112_informat = $3.;
%let _OUTPUT1_col112_label = %nrquote(ARREARS_PAYMENT_CD);
%let _OUTPUT1_col112_input0 = ARREARS_PAYMENT_CD;
%let _OUTPUT1_col112_exp = ;
%let _OUTPUT1_col112_input = ARREARS_PAYMENT_CD;
%let _OUTPUT1_col112_input_count = 1;
%let _OUTPUT1_col113_name = QUANTO_FEATURE_RK;
%let _OUTPUT1_col113_table = work.W1PL05FAE;
%let _OUTPUT1_col113_length = 8;
%let _OUTPUT1_col113_type = ;
%let _OUTPUT1_col113_format = 12.;
%let _OUTPUT1_col113_informat = 12.;
%let _OUTPUT1_col113_label = %nrquote(QUANTO_FEATURE_RK);
%let _OUTPUT1_col113_input0 = QUANTO_FEATURE_RK;
%let _OUTPUT1_col113_exp = ;
%let _OUTPUT1_col113_input = QUANTO_FEATURE_RK;
%let _OUTPUT1_col113_input_count = 1;
%let _OUTPUT1_col114_name = CASH_INTENSIVE_BUSINESS_FLG;
%let _OUTPUT1_col114_table = work.W1PL05FAE;
%let _OUTPUT1_col114_length = 1;
%let _OUTPUT1_col114_type = $;
%let _OUTPUT1_col114_format = $1.;
%let _OUTPUT1_col114_informat = $1.;
%let _OUTPUT1_col114_label = %nrquote(CASH_INTENSIVE_BUSINESS_FLG);
%let _OUTPUT1_col114_input0 = CASH_INTENSIVE_BUSINESS_FLG;
%let _OUTPUT1_col114_exp = ;
%let _OUTPUT1_col114_input = CASH_INTENSIVE_BUSINESS_FLG;
%let _OUTPUT1_col114_input_count = 1;
%let _OUTPUT1_col115_name = LETTER_OF_CREDIT_ONFILE_FLG;
%let _OUTPUT1_col115_table = work.W1PL05FAE;
%let _OUTPUT1_col115_length = 1;
%let _OUTPUT1_col115_type = $;
%let _OUTPUT1_col115_format = $1.;
%let _OUTPUT1_col115_informat = $1.;
%let _OUTPUT1_col115_label = %nrquote(LETTER_OF_CREDIT_ONFILE_FLG);
%let _OUTPUT1_col115_input0 = LETTER_OF_CREDIT_ONFILE_FLG;
%let _OUTPUT1_col115_exp = ;
%let _OUTPUT1_col115_input = LETTER_OF_CREDIT_ONFILE_FLG;
%let _OUTPUT1_col115_input_count = 1;
%let _OUTPUT1_col116_name = TRADE_FINANCE_FLG;
%let _OUTPUT1_col116_table = work.W1PL05FAE;
%let _OUTPUT1_col116_length = 1;
%let _OUTPUT1_col116_type = $;
%let _OUTPUT1_col116_format = $1.;
%let _OUTPUT1_col116_informat = $1.;
%let _OUTPUT1_col116_label = %nrquote(TRADE_FINANCE_FLG);
%let _OUTPUT1_col116_input0 = TRADE_FINANCE_FLG;
%let _OUTPUT1_col116_exp = ;
%let _OUTPUT1_col116_input = TRADE_FINANCE_FLG;
%let _OUTPUT1_col116_input_count = 1;
%let _OUTPUT1_col117_name = ANNUITY_PAYMENT_TYPE_CD;
%let _OUTPUT1_col117_table = work.W1PL05FAE;
%let _OUTPUT1_col117_length = 3;
%let _OUTPUT1_col117_type = $;
%let _OUTPUT1_col117_format = $3.;
%let _OUTPUT1_col117_informat = $3.;
%let _OUTPUT1_col117_label = %nrquote(ANNUITY_PAYMENT_TYPE_CD);
%let _OUTPUT1_col117_input0 = ANNUITY_PAYMENT_TYPE_CD;
%let _OUTPUT1_col117_exp = ;
%let _OUTPUT1_col117_input = ANNUITY_PAYMENT_TYPE_CD;
%let _OUTPUT1_col117_input_count = 1;
%let _OUTPUT1_col118_name = INTEREST_PAYMENT_TYPE_CD;
%let _OUTPUT1_col118_table = work.W1PL05FAE;
%let _OUTPUT1_col118_length = 3;
%let _OUTPUT1_col118_type = $;
%let _OUTPUT1_col118_format = $3.;
%let _OUTPUT1_col118_informat = $3.;
%let _OUTPUT1_col118_label = %nrquote(INTEREST_PAYMENT_TYPE_CD);
%let _OUTPUT1_col118_input0 = INTEREST_PAYMENT_TYPE_CD;
%let _OUTPUT1_col118_exp = ;
%let _OUTPUT1_col118_input = INTEREST_PAYMENT_TYPE_CD;
%let _OUTPUT1_col118_input_count = 1;
%let _OUTPUT1_col119_name = INTEREST_PAYMENT_TIME_FREQ_CD;
%let _OUTPUT1_col119_table = work.W1PL05FAE;
%let _OUTPUT1_col119_length = 3;
%let _OUTPUT1_col119_type = $;
%let _OUTPUT1_col119_format = $3.;
%let _OUTPUT1_col119_informat = $3.;
%let _OUTPUT1_col119_label = %nrquote(INTEREST_PAYMENT_TIME_FREQ_CD);
%let _OUTPUT1_col119_input0 = INTEREST_PAYMENT_TIME_FREQ_CD;
%let _OUTPUT1_col119_exp = ;
%let _OUTPUT1_col119_input = INTEREST_PAYMENT_TIME_FREQ_CD;
%let _OUTPUT1_col119_input_count = 1;
%let _OUTPUT1_col120_name = LIQUIDITY_CATEGORY_TYPE_CD;
%let _OUTPUT1_col120_table = work.W1PL05FAE;
%let _OUTPUT1_col120_length = 3;
%let _OUTPUT1_col120_type = $;
%let _OUTPUT1_col120_format = $3.;
%let _OUTPUT1_col120_informat = $3.;
%let _OUTPUT1_col120_label = %nrquote(LIQUIDITY_CATEGORY_TYPE_CD);
%let _OUTPUT1_col120_input0 = LIQUIDITY_CATEGORY_TYPE_CD;
%let _OUTPUT1_col120_exp = ;
%let _OUTPUT1_col120_input = LIQUIDITY_CATEGORY_TYPE_CD;
%let _OUTPUT1_col120_input_count = 1;
%let _OUTPUT1_col121_name = HOLIDAY_DATE_ROLL_CONV_CD;
%let _OUTPUT1_col121_table = work.W1PL05FAE;
%let _OUTPUT1_col121_length = 3;
%let _OUTPUT1_col121_type = $;
%let _OUTPUT1_col121_format = $3.;
%let _OUTPUT1_col121_informat = $3.;
%let _OUTPUT1_col121_label = %nrquote(HOLIDAY_DATE_ROLL_CONV_CD);
%let _OUTPUT1_col121_input0 = HOLIDAY_DATE_ROLL_CONV_CD;
%let _OUTPUT1_col121_exp = ;
%let _OUTPUT1_col121_input = HOLIDAY_DATE_ROLL_CONV_CD;
%let _OUTPUT1_col121_input_count = 1;
%let _OUTPUT1_col122_name = WEEKEND_DATE_ROLL_CONV_CD;
%let _OUTPUT1_col122_table = work.W1PL05FAE;
%let _OUTPUT1_col122_length = 3;
%let _OUTPUT1_col122_type = $;
%let _OUTPUT1_col122_format = $3.;
%let _OUTPUT1_col122_informat = $3.;
%let _OUTPUT1_col122_label = %nrquote(WEEKEND_DATE_ROLL_CONV_CD);
%let _OUTPUT1_col122_input0 = WEEKEND_DATE_ROLL_CONV_CD;
%let _OUTPUT1_col122_exp = ;
%let _OUTPUT1_col122_input = WEEKEND_DATE_ROLL_CONV_CD;
%let _OUTPUT1_col122_input_count = 1;
%let _OUTPUT1_col123_name = EXPENSE_ALLOCATION_RK;
%let _OUTPUT1_col123_table = work.W1PL05FAE;
%let _OUTPUT1_col123_length = 8;
%let _OUTPUT1_col123_type = ;
%let _OUTPUT1_col123_format = 12.;
%let _OUTPUT1_col123_informat = 12.;
%let _OUTPUT1_col123_label = %nrquote(EXPENSE_ALLOCATION_RK);
%let _OUTPUT1_col123_input0 = EXPENSE_ALLOCATION_RK;
%let _OUTPUT1_col123_exp = ;
%let _OUTPUT1_col123_input = EXPENSE_ALLOCATION_RK;
%let _OUTPUT1_col123_input_count = 1;
%let _OUTPUT1_col124_name = FIRST_INTEREST_PAYMENT_DT;
%let _OUTPUT1_col124_table = work.W1PL05FAE;
%let _OUTPUT1_col124_length = 8;
%let _OUTPUT1_col124_type = ;
%let _OUTPUT1_col124_format = DATETIME20.;
%let _OUTPUT1_col124_informat = DATETIME20.;
%let _OUTPUT1_col124_label = %nrquote(FIRST_INTEREST_PAYMENT_DT);
%let _OUTPUT1_col124_input0 = FIRST_INTEREST_PAYMENT_DT;
%let _OUTPUT1_col124_exp = ;
%let _OUTPUT1_col124_input = FIRST_INTEREST_PAYMENT_DT;
%let _OUTPUT1_col124_input_count = 1;
%let _OUTPUT1_col125_name = LAST_INTEREST_PAYMENT_DT;
%let _OUTPUT1_col125_table = work.W1PL05FAE;
%let _OUTPUT1_col125_length = 8;
%let _OUTPUT1_col125_type = ;
%let _OUTPUT1_col125_format = DATETIME20.;
%let _OUTPUT1_col125_informat = DATETIME20.;
%let _OUTPUT1_col125_label = %nrquote(LAST_INTEREST_PAYMENT_DT);
%let _OUTPUT1_col125_input0 = LAST_INTEREST_PAYMENT_DT;
%let _OUTPUT1_col125_exp = ;
%let _OUTPUT1_col125_input = LAST_INTEREST_PAYMENT_DT;
%let _OUTPUT1_col125_input_count = 1;
%let _OUTPUT1_col126_name = PROCESSED_DTTM;
%let _OUTPUT1_col126_table = work.W1PL05FAE;
%let _OUTPUT1_col126_length = 8;
%let _OUTPUT1_col126_type = ;
%let _OUTPUT1_col126_format = DATETIME20.;
%let _OUTPUT1_col126_informat = DATETIME20.;
%let _OUTPUT1_col126_label = %nrquote(PROCESSED_DTTM);
%let _OUTPUT1_col126_input0 = PROCESSED_DTTM;
%let _OUTPUT1_col126_exp = ;
%let _OUTPUT1_col126_input = PROCESSED_DTTM;
%let _OUTPUT1_col126_input_count = 1;
%let _OUTPUT1_col127_name = IRB_DUMMY_TYPE_CD;
%let _OUTPUT1_col127_table = work.W1PL05FAE;
%let _OUTPUT1_col127_length = 3;
%let _OUTPUT1_col127_type = $;
%let _OUTPUT1_col127_format = $3.;
%let _OUTPUT1_col127_informat = $3.;
%let _OUTPUT1_col127_label = %nrquote(IRB_DUMMY_TYPE_CD);
%let _OUTPUT1_col127_input0 = IRB_DUMMY_TYPE_CD;
%let _OUTPUT1_col127_exp = ;
%let _OUTPUT1_col127_input = IRB_DUMMY_TYPE_CD;
%let _OUTPUT1_col127_input_count = 1;
%let _OUTPUT1_col128_name = IRB_SRC_ACCOUNT_ID;
%let _OUTPUT1_col128_table = work.W1PL05FAE;
%let _OUTPUT1_col128_length = 32;
%let _OUTPUT1_col128_type = $;
%let _OUTPUT1_col128_format = $32.;
%let _OUTPUT1_col128_informat = $32.;
%let _OUTPUT1_col128_label = %nrquote(IRB_SRC_ACCOUNT_ID);
%let _OUTPUT1_col128_input0 = IRB_SRC_ACCOUNT_ID;
%let _OUTPUT1_col128_exp = ;
%let _OUTPUT1_col128_input = IRB_SRC_ACCOUNT_ID;
%let _OUTPUT1_col128_input_count = 1;
%let _OUTPUT1_col129_name = SAVE_VALID_FROM_DTTM;
%let _OUTPUT1_col129_table = work.W1PL05FAE;
%let _OUTPUT1_col129_length = 8;
%let _OUTPUT1_col129_type = ;
%let _OUTPUT1_col129_format = ;
%let _OUTPUT1_col129_informat = ;
%let _OUTPUT1_col129_label = %nrquote();
%let _OUTPUT1_col129_exp = ;
%let _OUTPUT1_col129_input_count = 0;
%let _OUTPUT1_col130_name = x;
%let _OUTPUT1_col130_table = work.W1PL05FAE;
%let _OUTPUT1_col130_length = 8;
%let _OUTPUT1_col130_type = ;
%let _OUTPUT1_col130_format = ;
%let _OUTPUT1_col130_informat = ;
%let _OUTPUT1_col130_label = %nrquote();
%let _OUTPUT1_col130_exp = ;
%let _OUTPUT1_col130_input_count = 0;
%let _OUTPUT1_col131_name = y;
%let _OUTPUT1_col131_table = work.W1PL05FAE;
%let _OUTPUT1_col131_length = 8;
%let _OUTPUT1_col131_type = ;
%let _OUTPUT1_col131_format = ;
%let _OUTPUT1_col131_informat = ;
%let _OUTPUT1_col131_label = %nrquote();
%let _OUTPUT1_col131_exp = ;
%let _OUTPUT1_col131_input_count = 0;
%let _OUTPUT1_col132_name = out;
%let _OUTPUT1_col132_table = work.W1PL05FAE;
%let _OUTPUT1_col132_length = 8;
%let _OUTPUT1_col132_type = ;
%let _OUTPUT1_col132_format = ;
%let _OUTPUT1_col132_informat = ;
%let _OUTPUT1_col132_label = %nrquote();
%let _OUTPUT1_col132_exp = ;
%let _OUTPUT1_col132_input_count = 0;

/*---- Start of User Written Code  ----*/ 


data &_OUTPUT1;
	set &_INPUT1;
	by ACCOUNT_RK VALID_FROM_DTTM;
	retain SAVE_VALID_FROM_DTTM;
	x = first.ACCOUNT_RK;
	y = last.ACCOUNT_RK;
	if first.ACCOUNT_RK then
	do;
		SAVE_VALID_FROM_DTTM = VALID_FROM_DTTM;
	end;
	if last.ACCOUNT_RK then
	do;
		if SAVE_VALID_FROM_DTTM=dhms(datepart(PROCESSED_DTTM), 0,0,0) then out = 1;
	end;
run;
%error_check(mpStepType=DATA);

/*---- End of User Written Code  ----*/ 

%rcSet(&syserr); 
%rcSet(&sqlrc); 


/**  Step end User Written **/

/*==========================================================================* 
 * Step:            Extract                               A5ELGGF9.AK00013B * 
 * Transform:       Extract                                                 * 
 * Description:     Отбор старых сделок DRV  и DCD                          * 
 *                                                                          * 
 * Source Table:    IRB_FINANCIAL_ACCOUNT_JRNL -          A569C89V.AE0000I5 * 
 *                   dwh_dds.IRB_FINANCIAL_ACCOUNT_JRNL                     * 
 * Target Table:    Extract - work.WUPNP15                A5ELGGF9.AF0000GW * 
 *==========================================================================*/ 

%let transformID = %quote(A5ELGGF9.AK00013B);
%let trans_rc = 0;
%let etls_stepStartTime = %sysfunc(datetime(), datetime20.); 

%let etls_recnt = 0;
%macro etls_recordCheck; 
   %let etls_recCheckExist = %eval(%sysfunc(exist(dwh_dds.IRB_FINANCIAL_ACCOUNT_JRNL, DATA)) or 
         %sysfunc(exist(dwh_dds.IRB_FINANCIAL_ACCOUNT_JRNL, VIEW))); 
   
   %if (&etls_recCheckExist) %then
   %do;
      proc sql noprint;
         select count(*) into :etls_recnt from dwh_dds.IRB_FINANCIAL_ACCOUNT_JRNL;
      quit;
   %end;
%mend etls_recordCheck;
%etls_recordCheck;

%let SYSLAST = %nrquote(dwh_dds.IRB_FINANCIAL_ACCOUNT_JRNL); 

%let SYS_SQL_IP_SPEEDO = Y;
%let SYS_SQL_MAPPUTTO = sas_put;
%let SYS_SQLREDUCEPUT = DBMS;
%global etls_sql_pushDown;
%let etls_sql_pushDown = -1;
option DBIDIRECTEXEC;

/*---- Map the columns  ----*/ 
proc datasets lib = work nolist nowarn memtype = (data view);
   delete WUPNP15;
quit;

%put %str(NOTE: Mapping columns ...);
proc sql;
   create view work.WUPNP15 as
      select
         ACCOUNT_RK,
         (count(*)) as N_ENTRIES length = 8
            format = 11.
            informat = 11.
            label = 'N_ENTRIES'
   from &SYSLAST
      where FINANCIAL_ACCOUNT_TYPE_CD IN ('DRV','DCD') 
         AND 
         datepart(JRNL_FROM_DTTM) < date()
   group by
      ACCOUNT_RK
   ;
quit;

%let SYSLAST = work.WUPNP15;

%global etls_sql_pushDown;
%let etls_sql_pushDown = &sys_sql_ip_all;

%rcSet(&sqlrc); 



/**  Step end Extract **/

/*==========================================================================* 
 * Step:            SQL Join                              A5ELGGF9.AK00013C * 
 * Transform:       Join                                                    * 
 * Description:     Проверка условий DQ                                     * 
 *                                                                          * 
 * Source Tables:   User Written - work.W1PL05FAE         A5ELGGF9.AF0000GV * 
 *                  Extract - work.WUPNP15                A5ELGGF9.AF0000GW * 
 * Target Table:    SQL Join - work.W1PL30MK7             A5ELGGF9.AF0000GX * 
 *==========================================================================*/ 

%let transformID = %quote(A5ELGGF9.AK00013C);
%let trans_rc = 0;
%let etls_stepStartTime = %sysfunc(datetime(), datetime20.); 

%let etls_recCheckExist = 0; 
%let etls_recnt = 0; 
%macro etls_recordCheck; 
   %let etls_recCheckExist = %eval(%sysfunc(exist(work.W1PL05FAE, DATA)) or 
         %sysfunc(exist(work.W1PL05FAE, VIEW))); 
   
   %if (&etls_recCheckExist) %then
   %do;
      %local etls_syntaxcheck; 
      %let etls_syntaxcheck = %sysfunc(getoption(syntaxcheck)); 
      /* Turn off syntaxcheck option to perform following steps  */ 
      options nosyntaxcheck;
      
      proc contents data = work.W1PL05FAE out = work.etls_contents(keep = nobs) noprint; 
      run; 
      
      data _null_; 
         set work.etls_contents (obs = 1); 
         call symput("etls_recnt", left(put(nobs,32.))); 
      run;
      
      proc datasets lib = work nolist nowarn memtype = (data view);
         delete etls_contents;
      quit;
      
      /* Reset syntaxcheck option to previous setting  */ 
      options &etls_syntaxcheck; 
   %end;
%mend etls_recordCheck;
%etls_recordCheck;

%let SYS_SQL_IP_SPEEDO = Y;
%let SYS_SQL_MAPPUTTO = sas_put;
%let SYS_SQLREDUCEPUT = DBMS;
%global etls_sql_pushDown;
%let etls_sql_pushDown = -1;
option DBIDIRECTEXEC;

proc datasets lib = work nolist nowarn memtype = (data view);
   delete W1PL30MK7;
quit;

proc sql;
   create view work.W1PL30MK7 as
   select
      W1PL05FAE.ACCOUNT_RK length = 8   
         format = 12.
         informat = 12.
         label = 'ACCOUNT_RK',
      W1PL05FAE.VALID_FROM_DTTM length = 8   
         format = DATETIME20.
         informat = DATETIME20.
         label = 'VALID_FROM_DTTM',
      W1PL05FAE.VALID_TO_DTTM length = 8   
         format = DATETIME20.
         informat = DATETIME20.
         label = 'VALID_TO_DTTM',
      W1PL05FAE.ACCOUNT_ID length = 32   
         format = $32.
         informat = $32.
         label = 'ACCOUNT_ID',
      W1PL05FAE.SOURCE_SYSTEM_CD length = 3   
         format = $3.
         informat = $3.
         label = 'SOURCE_SYSTEM_CD',
      W1PL05FAE.ACCOUNT_REGISTRATION_NM length = 100   
         format = $100.
         informat = $100.
         label = 'ACCOUNT_REGISTRATION_NM',
      W1PL05FAE.ALTERNATE_ACCOUNT_NM length = 40   
         format = $40.
         informat = $40.
         label = 'ALTERNATE_ACCOUNT_NM',
      W1PL05FAE.FINANCIAL_ACCOUNT_TYPE_CD length = 3   
         format = $3.
         informat = $3.
         label = 'FINANCIAL_ACCOUNT_TYPE_CD',
      W1PL05FAE.AUTO_DEBIT_ACCOUNT_TYPE_CD length = 3   
         format = $3.
         informat = $3.
         label = 'AUTO_DEBIT_ACCOUNT_TYPE_CD',
      W1PL05FAE.ACCOUNT_REGISTRATION_TYPE_CD length = 3   
         format = $3.
         informat = $3.
         label = 'ACCOUNT_REGISTRATION_TYPE_CD',
      W1PL05FAE.ACCOUNT_STATUS_CD length = 3   
         format = $3.
         informat = $3.
         label = 'ACCOUNT_STATUS_CD',
      W1PL05FAE.OPEN_DT length = 8   
         format = DATETIME20.
         informat = DATETIME20.
         label = 'OPEN_DT',
      W1PL05FAE.CLOSE_DT length = 8   
         format = DATETIME20.
         informat = DATETIME20.
         label = 'CLOSE_DT',
      W1PL05FAE.CLOSE_REASON_CD length = 3   
         format = $3.
         informat = $3.
         label = 'CLOSE_REASON_CD',
      W1PL05FAE.ACCOUNT_TAX_ID length = 32   
         format = $32.
         informat = $32.
         label = 'ACCOUNT_TAX_ID',
      W1PL05FAE.EXPECTED_LOSS_PCT length = 8   
         format = 12.4
         informat = 12.4
         label = 'EXPECTED_LOSS_PCT',
      W1PL05FAE.INDIVIDUAL_ORGANIZATION_CD length = 3   
         format = $3.
         informat = $3.
         label = 'INDIVIDUAL_ORGANIZATION_CD',
      W1PL05FAE.SOURCE_CD length = 5   
         format = $5.
         informat = $5.
         label = 'SOURCE_CD',
      W1PL05FAE.OPENING_CHANNEL_CD length = 3   
         format = $3.
         informat = $3.
         label = 'OPENING_CHANNEL_CD',
      W1PL05FAE.PREFERRED_CHANNEL_CD length = 3   
         format = $3.
         informat = $3.
         label = 'PREFERRED_CHANNEL_CD',
      W1PL05FAE.CURRENCY_CD length = 3   
         format = $3.
         informat = $3.
         label = 'CURRENCY_CD',
      W1PL05FAE.PRIMARY_PHONE_NO length = 20   
         format = $20.
         informat = $20.
         label = 'PRIMARY_PHONE_NO',
      W1PL05FAE.PRIMARY_PHONE_TYPE_CD length = 3   
         format = $3.
         informat = $3.
         label = 'PRIMARY_PHONE_TYPE_CD',
      W1PL05FAE.SECONDARY_PHONE_NO length = 20   
         format = $20.
         informat = $20.
         label = 'SECONDARY_PHONE_NO',
      W1PL05FAE.SECONDARY_PHONE_TYPE_CD length = 3   
         format = $3.
         informat = $3.
         label = 'SECONDARY_PHONE_TYPE_CD',
      W1PL05FAE.MAILABLE_FLG length = 1   
         format = $1.
         informat = $1.
         label = 'MAILABLE_FLG',
      W1PL05FAE.TELEPHONABLE_FLG length = 1   
         format = $1.
         informat = $1.
         label = 'TELEPHONABLE_FLG',
      W1PL05FAE.EMAIL_FLG length = 1   
         format = $1.
         informat = $1.
         label = 'EMAIL_FLG',
      W1PL05FAE.SMS_FLG length = 1   
         format = $1.
         informat = $1.
         label = 'SMS_FLG',
      W1PL05FAE.DO_NOT_CONTACT_FLG length = 1   
         format = $1.
         informat = $1.
         label = 'DO_NOT_CONTACT_FLG',
      W1PL05FAE.EMPLOYEE_RK length = 8   
         format = 12.
         informat = 12.
         label = 'EMPLOYEE_RK',
      W1PL05FAE.CURRENCY_BASED_ACCOUNT_FLG length = 1   
         format = $1.
         informat = $1.
         label = 'CURRENCY_BASED_ACCOUNT_FLG',
      W1PL05FAE.FEE_BASED_FLG length = 1   
         format = $1.
         informat = $1.
         label = 'FEE_BASED_FLG',
      W1PL05FAE.ANNUAL_FEES_AMT length = 8   
         format = 21.5
         informat = 21.5
         label = 'ANNUAL_FEES_AMT',
      W1PL05FAE.MONTHLY_FEES_AMT length = 8   
         format = 21.5
         informat = 21.5
         label = 'MONTHLY_FEES_AMT',
      W1PL05FAE.CAMPAIGN_CD length = 30   
         format = $30.
         informat = $30.
         label = 'CAMPAIGN_CD',
      W1PL05FAE.COMMUNICATION_CD length = 30   
         format = $30.
         informat = $30.
         label = 'COMMUNICATION_CD',
      W1PL05FAE.REGISTERED_ONLINE_DT length = 8   
         format = DATETIME20.
         informat = DATETIME20.
         label = 'REGISTERED_ONLINE_DT',
      W1PL05FAE.FIRST_LOGIN_DT length = 8   
         format = DATETIME20.
         informat = DATETIME20.
         label = 'FIRST_LOGIN_DT',
      W1PL05FAE.ONLINE_BILL_PAYMENT_FLG length = 1   
         format = $1.
         informat = $1.
         label = 'ONLINE_BILL_PAYMENT_FLG',
      W1PL05FAE.ID_VERIFICATION_TYPE_CD length = 3   
         format = $3.
         informat = $3.
         label = 'ID_VERIFICATION_TYPE_CD',
      W1PL05FAE.PREVIOUS_ACCOUNT_ID length = 32   
         format = $32.
         informat = $32.
         label = 'PREVIOUS_ACCOUNT_ID',
      W1PL05FAE.OPEN_BRANCH_FINANCIAL_UNIT_RK length = 8   
         format = 12.
         informat = 12.
         label = 'OPEN_BRANCH_FINANCIAL_UNIT_RK',
      W1PL05FAE.PRIM_BRANCH_FINANCIAL_UNIT_RK length = 8   
         format = 12.
         informat = 12.
         label = 'PRIM_BRANCH_FINANCIAL_UNIT_RK',
      W1PL05FAE.FINANCIAL_APPLICATION_RK length = 8   
         format = 12.
         informat = 12.
         label = 'FINANCIAL_APPLICATION_RK',
      W1PL05FAE.CREDIT_FACILITY_RK length = 8   
         format = 12.
         informat = 12.
         label = 'CREDIT_FACILITY_RK',
      W1PL05FAE.FUTURE_MARGIN_INCOME_AMT length = 8   
         format = 21.5
         informat = 21.5
         label = 'FUTURE_MARGIN_INCOME_AMT',
      W1PL05FAE.IN_DEFAULT_FLG length = 1   
         format = $1.
         informat = $1.
         label = 'IN_DEFAULT_FLG',
      W1PL05FAE.FINANCIAL_BOOK_RK length = 8   
         format = 12.
         informat = 12.
         label = 'FINANCIAL_BOOK_RK',
      W1PL05FAE.IRRECOVERABLE_FLG length = 1   
         format = $1.
         informat = $1.
         label = 'IRRECOVERABLE_FLG',
      W1PL05FAE.OWNED_BY_INTERNAL_ORG_RK length = 8   
         format = 12.
         informat = 12.
         label = 'OWNED_BY_INTERNAL_ORG_RK',
      W1PL05FAE.PREVIOUS_BANK_EXTERNAL_ORG_RK length = 8   
         format = 12.
         informat = 12.
         label = 'PREVIOUS_BANK_EXTERNAL_ORG_RK',
      W1PL05FAE.NETTING_SET_RK length = 8   
         format = 12.
         informat = 12.
         label = 'NETTING_SET_RK',
      W1PL05FAE.REVOLVING_FLG length = 1   
         format = $1.
         informat = $1.
         label = 'REVOLVING_FLG',
      W1PL05FAE.SOURCE_CHANNEL_CD length = 3   
         format = $3.
         informat = $3.
         label = 'SOURCE_CHANNEL_CD',
      W1PL05FAE.GRACE_PERIOD_DAYS_CNT length = 8   
         format = 8.
         informat = 8.
         label = 'GRACE_PERIOD_DAYS_CNT',
      W1PL05FAE.REMARGINING_DAYS_CNT length = 8   
         format = 8.
         informat = 8.
         label = 'REMARGINING_DAYS_CNT',
      W1PL05FAE.FINANCIAL_CALENDAR_RK length = 8   
         format = 12.
         informat = 12.
         label = 'FINANCIAL_CALENDAR_RK',
      W1PL05FAE.DAY_BASIS_CD length = 10   
         format = $10.
         informat = $10.
         label = 'DAY_BASIS_CD',
      W1PL05FAE.PORTFOLIO_ID length = 32   
         format = $32.
         informat = $32.
         label = 'PORTFOLIO_ID',
      W1PL05FAE.SECURITIZATION_POOL_RK length = 8   
         format = 12.
         informat = 12.
         label = 'SECURITIZATION_POOL_RK',
      W1PL05FAE.RECEIVABLES_POOL_RK length = 8   
         format = 12.
         informat = 12.
         label = 'RECEIVABLES_POOL_RK',
      W1PL05FAE.ACCOUNT_USAGE_TYPE_CD length = 3   
         format = $3.
         informat = $3.
         label = 'ACCOUNT_USAGE_TYPE_CD',
      W1PL05FAE.RISK_ALARM_FLG length = 1   
         format = $1.
         informat = $1.
         label = 'RISK_ALARM_FLG',
      W1PL05FAE.LOW_PROFITABILITY_FLG length = 1   
         format = $1.
         informat = $1.
         label = 'LOW_PROFITABILITY_FLG',
      W1PL05FAE.ACCOUNT_LIFECYCLE_STG_CD length = 3   
         format = $3.
         informat = $3.
         label = 'ACCOUNT_LIFECYCLE_STG_CD',
      W1PL05FAE.ATTRITION_ALARM_FLG length = 1   
         format = $1.
         informat = $1.
         label = 'ATTRITION_ALARM_FLG',
      W1PL05FAE.BALANCE_FROZEN_FLG length = 1   
         format = $1.
         informat = $1.
         label = 'BALANCE_FROZEN_FLG',
      W1PL05FAE.BALANCE_FROZEN_DT length = 8   
         format = DATETIME20.
         informat = DATETIME20.
         label = 'BALANCE_FROZEN_DT',
      W1PL05FAE.ACCOUNT_BLOCK_REASON_CD length = 3   
         format = $3.
         informat = $3.
         label = 'ACCOUNT_BLOCK_REASON_CD',
      W1PL05FAE.TAXATION_STATE_CD length = 4   
         format = $4.
         informat = $4.
         label = 'TAXATION_STATE_CD',
      W1PL05FAE.EFFECTIVE_MATURITY_YEAR_NO length = 8   
         format = 10.3
         informat = 10.3
         label = 'EFFECTIVE_MATURITY_YEAR_NO',
      W1PL05FAE.GL_ACCOUNT_RK length = 8   
         format = 12.
         informat = 12.
         label = 'GL_ACCOUNT_RK',
      W1PL05FAE.FROM_OTHER_INSTITUTION_FLG length = 1   
         format = $1.
         informat = $1.
         label = 'FROM_OTHER_INSTITUTION_FLG',
      W1PL05FAE.ACCOUNT_RENEWAL_CNT length = 8   
         format = 8.
         informat = 8.
         label = 'ACCOUNT_RENEWAL_CNT',
      W1PL05FAE.BALANCE_TRANSFER_DT length = 8   
         format = DATETIME20.
         informat = DATETIME20.
         label = 'BALANCE_TRANSFER_DT',
      W1PL05FAE.BALANCE_TRANSFER_AMT length = 8   
         format = 21.5
         informat = 21.5
         label = 'BALANCE_TRANSFER_AMT',
      W1PL05FAE.BALANCE_TRANSFER_CNT length = 8   
         format = 8.
         informat = 8.
         label = 'BALANCE_TRANSFER_CNT',
      W1PL05FAE.BASE_LONG_TERM_APR_RT length = 8   
         format = 12.4
         informat = 12.4
         label = 'BASE_LONG_TERM_APR_RT',
      W1PL05FAE.BROKER_FLG length = 1   
         format = $1.
         informat = $1.
         label = 'BROKER_FLG',
      W1PL05FAE.MULT_RATE_FLG length = 1   
         format = $1.
         informat = $1.
         label = 'MULT_RATE_FLG',
      W1PL05FAE.AUTO_DEBIT_ACCOUNT_NO length = 32   
         format = $32.
         informat = $32.
         label = 'AUTO_DEBIT_ACCOUNT_NO',
      W1PL05FAE.WORST_STATUS_LAST_12_MTH_CD length = 3   
         format = $3.
         informat = $3.
         label = 'WORST_STATUS_LAST_12_MTH_CD',
      W1PL05FAE.WORST_STATUS_LAST_12_MTH_DT length = 8   
         format = DATETIME20.
         informat = DATETIME20.
         label = 'WORST_STATUS_LAST_12_MTH_DT',
      W1PL05FAE.BALANCE_TRNSF_OTHER_ACCT_CNT length = 8   
         format = 8.
         informat = 8.
         label = 'BALANCE_TRNSF_OTHER_ACCT_CNT',
      W1PL05FAE.EFFECTIVE_FROM_DTTM length = 8   
         format = DATETIME20.
         informat = DATETIME20.
         label = 'EFFECTIVE_FROM_DTTM',
      W1PL05FAE.EFFECTIVE_TO_DTTM length = 8   
         format = DATETIME20.
         informat = DATETIME20.
         label = 'EFFECTIVE_TO_DTTM',
      W1PL05FAE.COUNTERPARTY_RK length = 8   
         format = 12.
         informat = 12.
         label = 'COUNTERPARTY_RK',
      W1PL05FAE.INSURED_BY_COUNTERPARTY_RK length = 8   
         format = 12.
         informat = 12.
         label = 'INSURED_BY_COUNTERPARTY_RK',
      W1PL05FAE.STATEMENT_FREQUENCY_CD length = 3   
         format = $3.
         informat = $3.
         label = 'STATEMENT_FREQUENCY_CD',
      W1PL05FAE.SECURITY_DEPOSIT_AMT length = 8   
         format = 21.5
         informat = 21.5
         label = 'SECURITY_DEPOSIT_AMT',
      W1PL05FAE.SECURITY_DEPOSIT_REFUND_AMT length = 8   
         format = 21.5
         informat = 21.5
         label = 'SECURITY_DEPOSIT_REFUND_AMT',
      W1PL05FAE.FIRST_PAYMENT_DT length = 8   
         format = DATETIME20.
         informat = DATETIME20.
         label = 'FIRST_PAYMENT_DT',
      W1PL05FAE.LAST_PAYMENT_DT length = 8   
         format = DATETIME20.
         informat = DATETIME20.
         label = 'LAST_PAYMENT_DT',
      W1PL05FAE.FIRST_RESET_DT length = 8   
         format = DATETIME20.
         informat = DATETIME20.
         label = 'FIRST_RESET_DT',
      W1PL05FAE.LAST_RESET_DT length = 8   
         format = DATETIME20.
         informat = DATETIME20.
         label = 'LAST_RESET_DT',
      W1PL05FAE.RESETS_PER_ANNUM_NO length = 8   
         format = 7.
         informat = 7.
         label = 'RESETS_PER_ANNUM_NO',
      W1PL05FAE.PRINCIPAL_PAYMENT_TYPE_CD length = 3   
         format = $3.
         informat = $3.
         label = 'PRINCIPAL_PAYMENT_TYPE_CD',
      W1PL05FAE.PRINCIPAL_PAYMENT_AMT length = 8   
         format = 21.5
         informat = 21.5
         label = 'PRINCIPAL_PAYMENT_AMT',
      W1PL05FAE.RATE_POLICY_RK length = 8   
         format = 12.
         informat = 12.
         label = 'RATE_POLICY_RK',
      W1PL05FAE.SPREAD_RT length = 8   
         format = 12.4
         informat = 12.4
         label = 'SPREAD_RT',
      W1PL05FAE.DISCOUNT_SPREAD_RT length = 8   
         format = 12.4
         informat = 12.4
         label = 'DISCOUNT_SPREAD_RT',
      W1PL05FAE.INITIAL_CONTRACT_RT length = 8   
         format = 12.4
         informat = 12.4
         label = 'INITIAL_CONTRACT_RT',
      W1PL05FAE.FIXED_MONTHLY_PREPAYMENT_RT length = 8   
         format = 12.4
         informat = 12.4
         label = 'FIXED_MONTHLY_PREPAYMENT_RT',
      W1PL05FAE.CAPITAL_ALLOCATION_RK length = 8   
         format = 12.
         informat = 12.
         label = 'CAPITAL_ALLOCATION_RK',
      W1PL05FAE.CAPITAL_COST_RK length = 8   
         format = 12.
         informat = 12.
         label = 'CAPITAL_COST_RK',
      W1PL05FAE.SEGMENT_RK length = 8   
         format = 12.
         informat = 12.
         label = 'SEGMENT_RK',
      W1PL05FAE.NEAR_BRANCH_FINANCIAL_UNIT_RK length = 8   
         format = 12.
         informat = 12.
         label = 'NEAR_BRANCH_FINANCIAL_UNIT_RK',
      W1PL05FAE.STATEMENT_OPT_FLG length = 1   
         format = $1.
         informat = $1.
         label = 'STATEMENT_OPT_FLG',
      W1PL05FAE.VALUE_SCALING_FACTOR_RT length = 8   
         format = 12.4
         informat = 12.4
         label = 'VALUE_SCALING_FACTOR_RT',
      W1PL05FAE.INTERNAL_REPORTING_CATEGORY_CD length = 3   
         format = $3.
         informat = $3.
         label = 'INTERNAL_REPORTING_CATEGORY_CD',
      W1PL05FAE.CONVEXITY_ADJUSTMENT_FLG length = 1   
         format = $1.
         informat = $1.
         label = 'CONVEXITY_ADJUSTMENT_FLG',
      W1PL05FAE.ARREARS_PAYMENT_CD length = 3   
         format = $3.
         informat = $3.
         label = 'ARREARS_PAYMENT_CD',
      W1PL05FAE.QUANTO_FEATURE_RK length = 8   
         format = 12.
         informat = 12.
         label = 'QUANTO_FEATURE_RK',
      W1PL05FAE.CASH_INTENSIVE_BUSINESS_FLG length = 1   
         format = $1.
         informat = $1.
         label = 'CASH_INTENSIVE_BUSINESS_FLG',
      W1PL05FAE.LETTER_OF_CREDIT_ONFILE_FLG length = 1   
         format = $1.
         informat = $1.
         label = 'LETTER_OF_CREDIT_ONFILE_FLG',
      W1PL05FAE.TRADE_FINANCE_FLG length = 1   
         format = $1.
         informat = $1.
         label = 'TRADE_FINANCE_FLG',
      W1PL05FAE.ANNUITY_PAYMENT_TYPE_CD length = 3   
         format = $3.
         informat = $3.
         label = 'ANNUITY_PAYMENT_TYPE_CD',
      W1PL05FAE.INTEREST_PAYMENT_TYPE_CD length = 3   
         format = $3.
         informat = $3.
         label = 'INTEREST_PAYMENT_TYPE_CD',
      W1PL05FAE.INTEREST_PAYMENT_TIME_FREQ_CD length = 3   
         format = $3.
         informat = $3.
         label = 'INTEREST_PAYMENT_TIME_FREQ_CD',
      W1PL05FAE.LIQUIDITY_CATEGORY_TYPE_CD length = 3   
         format = $3.
         informat = $3.
         label = 'LIQUIDITY_CATEGORY_TYPE_CD',
      W1PL05FAE.HOLIDAY_DATE_ROLL_CONV_CD length = 3   
         format = $3.
         informat = $3.
         label = 'HOLIDAY_DATE_ROLL_CONV_CD',
      W1PL05FAE.WEEKEND_DATE_ROLL_CONV_CD length = 3   
         format = $3.
         informat = $3.
         label = 'WEEKEND_DATE_ROLL_CONV_CD',
      W1PL05FAE.EXPENSE_ALLOCATION_RK length = 8   
         format = 12.
         informat = 12.
         label = 'EXPENSE_ALLOCATION_RK',
      W1PL05FAE.FIRST_INTEREST_PAYMENT_DT length = 8   
         format = DATETIME20.
         informat = DATETIME20.
         label = 'FIRST_INTEREST_PAYMENT_DT',
      W1PL05FAE.LAST_INTEREST_PAYMENT_DT length = 8   
         format = DATETIME20.
         informat = DATETIME20.
         label = 'LAST_INTEREST_PAYMENT_DT',
      W1PL05FAE.PROCESSED_DTTM length = 8   
         format = DATETIME20.
         informat = DATETIME20.
         label = 'PROCESSED_DTTM',
      W1PL05FAE.IRB_DUMMY_TYPE_CD length = 3   
         format = $3.
         informat = $3.
         label = 'IRB_DUMMY_TYPE_CD',
      W1PL05FAE.IRB_SRC_ACCOUNT_ID length = 32   
         format = $32.
         informat = $32.
         label = 'IRB_SRC_ACCOUNT_ID',
      W1PL05FAE.SAVE_VALID_FROM_DTTM length = 8,
      W1PL05FAE.x length = 8,
      W1PL05FAE.y length = 8,
      W1PL05FAE.out length = 8
   from
      work.W1PL05FAE left join 
      work.WUPNP15
         on
         (
            W1PL05FAE.ACCOUNT_RK = WUPNP15.ACCOUNT_RK
         )
   where
      WUPNP15.N_ENTRIES IS MISSING 
   ;
quit;

%global etls_sql_pushDown;
%let etls_sql_pushDown = &sys_sql_ip_all;

%rcSet(&sqlrc); 



/**  Step end SQL Join **/

/*==========================================================================* 
 * Step:            SQL Join                              A5ELGGF9.AK00013D * 
 * Transform:       Join                                                    * 
 * Description:     Добавление атрибутов DQDRV                              * 
 *                                                                          * 
 * Source Tables:   SQL Join - work.W1PL30MK7             A5ELGGF9.AF0000GX * 
 *                  FINANCIAL_INSTRUMENT_ASSOC -          A569C89V.AE0000FW * 
 *                   dwh_dds.FINANCIAL_INSTRUMENT_ASSOC                     * 
 *                  FINANCIAL_INSTRUMENT -                A569C89V.AE0000FV * 
 *                   dwh_dds.FINANCIAL_INSTRUMENT                           * 
 * Target Table:    SQL Join - work.W1PL5OLS4             A5ELGGF9.AF0000GY * 
 *==========================================================================*/ 

%let transformID = %quote(A5ELGGF9.AK00013D);
%let trans_rc = 0;
%let etls_stepStartTime = %sysfunc(datetime(), datetime20.); 

%let etls_recnt = -1;
%let SYS_SQL_IP_SPEEDO = Y;
%let SYS_SQL_MAPPUTTO = sas_put;
%let SYS_SQLREDUCEPUT = DBMS;
%global etls_sql_pushDown;
%let etls_sql_pushDown = -1;
option DBIDIRECTEXEC;

proc datasets lib = work nolist nowarn memtype = (data view);
   delete W1PL5OLS4;
quit;

proc sql;
   create table work.W1PL5OLS4 as
   select
      W1PL30MK7.ACCOUNT_RK length = 8   
         format = 12.
         informat = 12.
         label = 'ACCOUNT_RK',
      'П-14' as REPORTCODE length = 5   
         format = $5.
         informat = $5.
         label = 'REPORTCODE',
      &REPDT as REPORTDATE length = 8   
         format = DATETIME20.
         informat = DATETIME20.
         label = 'REPORTDATE',
      strip(W1PL30MK7.ACCOUNT_REGISTRATION_NM ) as FRONTKDEALID length = 10   
         format = $10.
         informat = $10.
         label = 'FRONTKDEALID',
      put(input(substr(W1PL30MK7.ALTERNATE_ACCOUNT_NM  , 1, findc(W1PL30MK7.ALTERNATE_ACCOUNT_NM  , '_')-1), best.), best.) as FRONTFDEALID length = 10   
         format = $10.
         informat = $10.
         label = 'FRONTFDEALID',
      FINANCIAL_INSTRUMENT.IRB_SRC_INSTRUMENT_ID as DEALID length = 100   
         format = $100.
         informat = $100.
         label = 'DEALID',
      FINANCIAL_INSTRUMENT.FINANCIAL_INSTRUMENT_TYPE_CD as INSTRUMENTTYPECD length = 3   
         format = $3.
         informat = $3.
         label = 'INSTRUMENTTYPECD',
      W1PL30MK7.OPEN_DT as DEALDATE length = 8   
         format = DATETIME20.
         informat = DATETIME20.
         label = 'DEALDATE'
   from
      work.W1PL30MK7 left join 
      dwh_dds.FINANCIAL_INSTRUMENT_ASSOC
         on
         (
            W1PL30MK7.ACCOUNT_RK = FINANCIAL_INSTRUMENT_ASSOC.REFERENCE_ACCOUNT_RK
            and FINANCIAL_INSTRUMENT_ASSOC.VALID_FROM_DTTM <= &REPDT < FINANCIAL_INSTRUMENT_ASSOC.VALID_TO_DTTM
            and FINANCIAL_INSTRUMENT_ASSOC.FINANCIAL_INSTR_ASSOC_TYPE_CD = 'DRV'
         ) left join 
      dwh_dds.FINANCIAL_INSTRUMENT
         on
         (
            FINANCIAL_INSTRUMENT_ASSOC.FINANCIAL_INSTRUMENT_RK = FINANCIAL_INSTRUMENT.FINANCIAL_INSTRUMENT_RK
            and FINANCIAL_INSTRUMENT.VALID_FROM_DTTM <= &REPDT < FINANCIAL_INSTRUMENT.VALID_TO_DTTM
         )
   where
      W1PL30MK7.FINANCIAL_ACCOUNT_TYPE_CD = 'DRV'
      and FINANCIAL_INSTRUMENT.FINANCIAL_INSTRUMENT_TYPE_CD <> 'CSG'
   ;
quit;

%global etls_sql_pushDown;
%let etls_sql_pushDown = &sys_sql_ip_all;

%rcSet(&sqlrc); 



/**  Step end SQL Join **/

/*==========================================================================* 
 * Step:            User Written                          A5ELGGF9.AK00013E * 
 * Transform:       User Written                                            * 
 * Description:     Добавление атрибутов DQ                                 * 
 *                                                                          * 
 * Source Table:    SQL Join - work.W1PL5OLS4             A5ELGGF9.AF0000GY * 
 * Target Table:    User Written - work.W1PWUIPIZ         A5ELGGF9.AF0000GZ * 
 *                                                                          * 
 * User Written:    SourceCode                                              * 
 *==========================================================================*/ 

%let transformID = %quote(A5ELGGF9.AK00013E);
%let trans_rc = 0;
%let etls_stepStartTime = %sysfunc(datetime(), datetime20.); 

%let etls_recCheckExist = 0; 
%let etls_recnt = 0; 
%macro etls_recordCheck; 
   %let etls_recCheckExist = %eval(%sysfunc(exist(work.W1PL5OLS4, DATA)) or 
         %sysfunc(exist(work.W1PL5OLS4, VIEW))); 
   
   %if (&etls_recCheckExist) %then
   %do;
      %local etls_syntaxcheck; 
      %let etls_syntaxcheck = %sysfunc(getoption(syntaxcheck)); 
      /* Turn off syntaxcheck option to perform following steps  */ 
      options nosyntaxcheck;
      
      proc contents data = work.W1PL5OLS4 out = work.etls_contents(keep = nobs) noprint; 
      run; 
      
      data _null_; 
         set work.etls_contents (obs = 1); 
         call symput("etls_recnt", left(put(nobs,32.))); 
      run;
      
      proc datasets lib = work nolist nowarn memtype = (data view);
         delete etls_contents;
      quit;
      
      /* Reset syntaxcheck option to previous setting  */ 
      options &etls_syntaxcheck; 
   %end;
%mend etls_recordCheck;
%etls_recordCheck;

%let SYSLAST = %nrquote(work.W1PL5OLS4); 

%let _INPUT_count = 1;
%let _INPUT = work.W1PL5OLS4;
%let _INPUT_connect = ;
%let _INPUT_engine = ;
%let _INPUT_memtype = DATA;
%let _INPUT_options = %nrquote();
%let _INPUT_alter = %nrquote();
%let _INPUT_path = %nrquote(/SQL Join_A5ELGGF9.AF0000GY%(WorkTable%));
%let _INPUT_type = 1;
%let _INPUT_label = %nrquote();

%let _INPUT1 = work.W1PL5OLS4;
%let _INPUT1_connect = ;
%let _INPUT1_engine = ;
%let _INPUT1_memtype = DATA;
%let _INPUT1_options = %nrquote();
%let _INPUT1_alter = %nrquote();
%let _INPUT1_path = %nrquote(/SQL Join_A5ELGGF9.AF0000GY%(WorkTable%));
%let _INPUT1_type = 1;
%let _INPUT1_label = %nrquote();

%let _OUTPUT_count = 1;
%let _OUTPUT = work.W1PWUIPIZ;
%let _OUTPUT_connect = ;
%let _OUTPUT_engine = ;
%let _OUTPUT_memtype = DATA;
%let _OUTPUT_options = %nrquote();
%let _OUTPUT_alter = %nrquote();
%let _OUTPUT_path = %nrquote(/User Written_A5ELGGF9.AF0000GZ%(WorkTable%));
%let _OUTPUT_type = 1;
%let _OUTPUT_label = %nrquote();
/* List of target columns to keep  */ 
%let _OUTPUT_keep = REPORTCODE REPORTDATE FRONTKDEALID FRONTFDEALID DEALID 
        INSTRUMENTTYPECD DEALDATE;
%let _OUTPUT_col_count = 7;
%let _OUTPUT_col0_name = REPORTCODE;
%let _OUTPUT_col0_table = work.W1PWUIPIZ;
%let _OUTPUT_col0_length = 5;
%let _OUTPUT_col0_type = $;
%let _OUTPUT_col0_format = $5.;
%let _OUTPUT_col0_informat = $5.;
%let _OUTPUT_col0_label = %nrquote(REPORTCODE);
%let _OUTPUT_col0_input0 = REPORTCODE;
%let _OUTPUT_col0_exp = ;
%let _OUTPUT_col0_input = REPORTCODE;
%let _OUTPUT_col0_input_count = 1;
%let _OUTPUT_col1_name = REPORTDATE;
%let _OUTPUT_col1_table = work.W1PWUIPIZ;
%let _OUTPUT_col1_length = 8;
%let _OUTPUT_col1_type = ;
%let _OUTPUT_col1_format = DATETIME20.;
%let _OUTPUT_col1_informat = DATETIME20.;
%let _OUTPUT_col1_label = %nrquote(REPORTDATE);
%let _OUTPUT_col1_input0 = REPORTDATE;
%let _OUTPUT_col1_exp = ;
%let _OUTPUT_col1_input = REPORTDATE;
%let _OUTPUT_col1_input_count = 1;
%let _OUTPUT_col2_name = FRONTKDEALID;
%let _OUTPUT_col2_table = work.W1PWUIPIZ;
%let _OUTPUT_col2_length = 10;
%let _OUTPUT_col2_type = $;
%let _OUTPUT_col2_format = $10.;
%let _OUTPUT_col2_informat = $10.;
%let _OUTPUT_col2_label = %nrquote(FRONTKDEALID);
%let _OUTPUT_col2_input0 = FRONTKDEALID;
%let _OUTPUT_col2_exp = ;
%let _OUTPUT_col2_input = FRONTKDEALID;
%let _OUTPUT_col2_input_count = 1;
%let _OUTPUT_col3_name = FRONTFDEALID;
%let _OUTPUT_col3_table = work.W1PWUIPIZ;
%let _OUTPUT_col3_length = 10;
%let _OUTPUT_col3_type = $;
%let _OUTPUT_col3_format = $10.;
%let _OUTPUT_col3_informat = $10.;
%let _OUTPUT_col3_label = %nrquote(FRONTFDEALID);
%let _OUTPUT_col3_input0 = FRONTFDEALID;
%let _OUTPUT_col3_exp = ;
%let _OUTPUT_col3_input = FRONTFDEALID;
%let _OUTPUT_col3_input_count = 1;
%let _OUTPUT_col4_name = DEALID;
%let _OUTPUT_col4_table = work.W1PWUIPIZ;
%let _OUTPUT_col4_length = 100;
%let _OUTPUT_col4_type = $;
%let _OUTPUT_col4_format = $100.;
%let _OUTPUT_col4_informat = $100.;
%let _OUTPUT_col4_label = %nrquote(DEALID);
%let _OUTPUT_col4_input0 = DEALID;
%let _OUTPUT_col4_exp = ;
%let _OUTPUT_col4_input = DEALID;
%let _OUTPUT_col4_input_count = 1;
%let _OUTPUT_col5_name = INSTRUMENTTYPECD;
%let _OUTPUT_col5_table = work.W1PWUIPIZ;
%let _OUTPUT_col5_length = 3;
%let _OUTPUT_col5_type = $;
%let _OUTPUT_col5_format = $3.;
%let _OUTPUT_col5_informat = $3.;
%let _OUTPUT_col5_label = %nrquote(INSTRUMENTTYPECD);
%let _OUTPUT_col5_input0 = INSTRUMENTTYPECD;
%let _OUTPUT_col5_exp = ;
%let _OUTPUT_col5_input = INSTRUMENTTYPECD;
%let _OUTPUT_col5_input_count = 1;
%let _OUTPUT_col6_name = DEALDATE;
%let _OUTPUT_col6_table = work.W1PWUIPIZ;
%let _OUTPUT_col6_length = 8;
%let _OUTPUT_col6_type = ;
%let _OUTPUT_col6_format = DATETIME20.;
%let _OUTPUT_col6_informat = DATETIME20.;
%let _OUTPUT_col6_label = %nrquote(DEALDATE);
%let _OUTPUT_col6_input0 = DEALDATE;
%let _OUTPUT_col6_exp = ;
%let _OUTPUT_col6_input = DEALDATE;
%let _OUTPUT_col6_input_count = 1;

%let _OUTPUT1 = work.W1PWUIPIZ;
%let _OUTPUT1_connect = ;
%let _OUTPUT1_engine = ;
%let _OUTPUT1_memtype = DATA;
%let _OUTPUT1_options = %nrquote();
%let _OUTPUT1_alter = %nrquote();
%let _OUTPUT1_path = %nrquote(/User Written_A5ELGGF9.AF0000GZ%(WorkTable%));
%let _OUTPUT1_type = 1;
%let _OUTPUT1_label = %nrquote();
/* List of target columns to keep  */ 
%let _OUTPUT1_keep = REPORTCODE REPORTDATE FRONTKDEALID FRONTFDEALID DEALID 
        INSTRUMENTTYPECD DEALDATE;
%let _OUTPUT1_col_count = 7;
%let _OUTPUT1_col0_name = REPORTCODE;
%let _OUTPUT1_col0_table = work.W1PWUIPIZ;
%let _OUTPUT1_col0_length = 5;
%let _OUTPUT1_col0_type = $;
%let _OUTPUT1_col0_format = $5.;
%let _OUTPUT1_col0_informat = $5.;
%let _OUTPUT1_col0_label = %nrquote(REPORTCODE);
%let _OUTPUT1_col0_input0 = REPORTCODE;
%let _OUTPUT1_col0_exp = ;
%let _OUTPUT1_col0_input = REPORTCODE;
%let _OUTPUT1_col0_input_count = 1;
%let _OUTPUT1_col1_name = REPORTDATE;
%let _OUTPUT1_col1_table = work.W1PWUIPIZ;
%let _OUTPUT1_col1_length = 8;
%let _OUTPUT1_col1_type = ;
%let _OUTPUT1_col1_format = DATETIME20.;
%let _OUTPUT1_col1_informat = DATETIME20.;
%let _OUTPUT1_col1_label = %nrquote(REPORTDATE);
%let _OUTPUT1_col1_input0 = REPORTDATE;
%let _OUTPUT1_col1_exp = ;
%let _OUTPUT1_col1_input = REPORTDATE;
%let _OUTPUT1_col1_input_count = 1;
%let _OUTPUT1_col2_name = FRONTKDEALID;
%let _OUTPUT1_col2_table = work.W1PWUIPIZ;
%let _OUTPUT1_col2_length = 10;
%let _OUTPUT1_col2_type = $;
%let _OUTPUT1_col2_format = $10.;
%let _OUTPUT1_col2_informat = $10.;
%let _OUTPUT1_col2_label = %nrquote(FRONTKDEALID);
%let _OUTPUT1_col2_input0 = FRONTKDEALID;
%let _OUTPUT1_col2_exp = ;
%let _OUTPUT1_col2_input = FRONTKDEALID;
%let _OUTPUT1_col2_input_count = 1;
%let _OUTPUT1_col3_name = FRONTFDEALID;
%let _OUTPUT1_col3_table = work.W1PWUIPIZ;
%let _OUTPUT1_col3_length = 10;
%let _OUTPUT1_col3_type = $;
%let _OUTPUT1_col3_format = $10.;
%let _OUTPUT1_col3_informat = $10.;
%let _OUTPUT1_col3_label = %nrquote(FRONTFDEALID);
%let _OUTPUT1_col3_input0 = FRONTFDEALID;
%let _OUTPUT1_col3_exp = ;
%let _OUTPUT1_col3_input = FRONTFDEALID;
%let _OUTPUT1_col3_input_count = 1;
%let _OUTPUT1_col4_name = DEALID;
%let _OUTPUT1_col4_table = work.W1PWUIPIZ;
%let _OUTPUT1_col4_length = 100;
%let _OUTPUT1_col4_type = $;
%let _OUTPUT1_col4_format = $100.;
%let _OUTPUT1_col4_informat = $100.;
%let _OUTPUT1_col4_label = %nrquote(DEALID);
%let _OUTPUT1_col4_input0 = DEALID;
%let _OUTPUT1_col4_exp = ;
%let _OUTPUT1_col4_input = DEALID;
%let _OUTPUT1_col4_input_count = 1;
%let _OUTPUT1_col5_name = INSTRUMENTTYPECD;
%let _OUTPUT1_col5_table = work.W1PWUIPIZ;
%let _OUTPUT1_col5_length = 3;
%let _OUTPUT1_col5_type = $;
%let _OUTPUT1_col5_format = $3.;
%let _OUTPUT1_col5_informat = $3.;
%let _OUTPUT1_col5_label = %nrquote(INSTRUMENTTYPECD);
%let _OUTPUT1_col5_input0 = INSTRUMENTTYPECD;
%let _OUTPUT1_col5_exp = ;
%let _OUTPUT1_col5_input = INSTRUMENTTYPECD;
%let _OUTPUT1_col5_input_count = 1;
%let _OUTPUT1_col6_name = DEALDATE;
%let _OUTPUT1_col6_table = work.W1PWUIPIZ;
%let _OUTPUT1_col6_length = 8;
%let _OUTPUT1_col6_type = ;
%let _OUTPUT1_col6_format = DATETIME20.;
%let _OUTPUT1_col6_informat = DATETIME20.;
%let _OUTPUT1_col6_label = %nrquote(DEALDATE);
%let _OUTPUT1_col6_input0 = DEALDATE;
%let _OUTPUT1_col6_exp = ;
%let _OUTPUT1_col6_input = DEALDATE;
%let _OUTPUT1_col6_input_count = 1;

/*---- Start of User Written Code  ----*/ 

/*Трансформация для записи неуникальных DEALID в строку с разделителем ",".*/

proc sort data = &_INPUT1;
	by ACCOUNT_RK;
quit;
%error_check(mpStepType=DATA);

data &_OUTPUT1 (drop = DEALID_NEW ACCOUNT_RK);
	set &_INPUT1;
	by ACCOUNT_RK;

	retain DEALID_NEW;

if not missing(DEALID) then
do;
/*1 0*/
	if first.ACCOUNT_RK and not last.ACCOUNT_RK then DEALID_NEW = strip(DEALID);

/*0 0*/
	if not first.ACCOUNT_RK and not last.ACCOUNT_RK then DEALID_NEW = cats(DEALID_NEW, ',', DEALID);

/*1 1*/
	if first.ACCOUNT_RK and last.ACCOUNT_RK then
	do;
		DEALID_NEW = "";
		output;
	end;

/*0 1*/
	if not first.ACCOUNT_RK and last.ACCOUNT_RK then
	do;
		DEALID_NEW = cats(DEALID_NEW, ',', DEALID);
		DEALID=DEALID_NEW;
		DEALID_NEW = "";
		output;
	end;
end;
else output;
run;
%error_check(mpStepType=DATA);
/*---- End of User Written Code  ----*/ 

%rcSet(&syserr); 
%rcSet(&sqlrc); 


/**  Step end User Written **/

/*==========================================================================* 
 * Step:            SQL Join                              A5ELGGF9.AK00013F * 
 * Transform:       Join                                                    * 
 * Description:     Добавление атрибутов DQDCD                              * 
 *                                                                          * 
 * Source Tables:   SQL Join - work.W1PL30MK7             A5ELGGF9.AF0000GX * 
 *                  FINANCIAL_ACCOUNT_ASSOC -             A569C89V.AE0000FL * 
 *                   dwh_dds.FINANCIAL_ACCOUNT_ASSOC                        * 
 *                  FINANCIAL_INSTRUMENT_ASSOC -          A569C89V.AE0000FW * 
 *                   dwh_dds.FINANCIAL_INSTRUMENT_ASSOC                     * 
 *                  FINANCIAL_INSTRUMENT -                A569C89V.AE0000FV * 
 *                   dwh_dds.FINANCIAL_INSTRUMENT                           * 
 *                  FINANCIAL_ACCOUNT -                   A569C89V.AE0000FK * 
 *                   dwh_dds.FINANCIAL_ACCOUNT                              * 
 * Target Table:    SQL Join - work.W1PLQQ2I1             A5ELGGF9.AF0000H0 * 
 *==========================================================================*/ 

%let transformID = %quote(A5ELGGF9.AK00013F);
%let trans_rc = 0;
%let etls_stepStartTime = %sysfunc(datetime(), datetime20.); 

%let etls_recnt = -1;
%let SYS_SQL_IP_SPEEDO = Y;
%let SYS_SQL_MAPPUTTO = sas_put;
%let SYS_SQLREDUCEPUT = DBMS;
%global etls_sql_pushDown;
%let etls_sql_pushDown = -1;
option DBIDIRECTEXEC;

proc datasets lib = work nolist nowarn memtype = (data view);
   delete W1PLQQ2I1;
quit;

proc sql;
   create table work.W1PLQQ2I1 as
   select
      'П-14' as REPORTCODE length = 5   
         format = $5.
         informat = $5.
         label = 'REPORTCODE',
      &REPDT as REPORTDATE length = 8   
         format = DATETIME20.
         informat = DATETIME20.
         label = 'REPORTDATE',
      strip(W1PL30MK7.ACCOUNT_REGISTRATION_NM) as FRONTKDEALID length = 10   
         format = $10.
         informat = $10.
         label = 'FRONTKDEALID',
      put(input(substr(W1PL30MK7.ALTERNATE_ACCOUNT_NM  , 1, findc(W1PL30MK7.ALTERNATE_ACCOUNT_NM  , '_')-1), best.), best.) as FRONTFDEALID length = 10   
         format = $10.
         informat = $10.
         label = 'FRONTFDEALID',
      case 
         when missing(FINANCIAL_INSTRUMENT.IRB_SRC_INSTRUMENT_ID)
            then FINANCIAL_ACCOUNT.IRB_SRC_ACCOUNT_ID
         when missing(FINANCIAL_ACCOUNT.IRB_SRC_ACCOUNT_ID)
            then FINANCIAL_INSTRUMENT.IRB_SRC_INSTRUMENT_ID
         when NOT missing(FINANCIAL_INSTRUMENT.IRB_SRC_INSTRUMENT_ID) and NOT missing(FINANCIAL_ACCOUNT.IRB_SRC_ACCOUNT_ID)
            then cats(FINANCIAL_INSTRUMENT.IRB_SRC_INSTRUMENT_ID , ',',FINANCIAL_ACCOUNT.IRB_SRC_ACCOUNT_ID )
      else " "
      end as DEALID length = 100   
         format = $100.
         informat = $100.
         label = 'DEALID',
      ifc(missing(FINANCIAL_INSTRUMENT.FINANCIAL_INSTRUMENT_TYPE_CD), 'DCD', FINANCIAL_INSTRUMENT.FINANCIAL_INSTRUMENT_TYPE_CD) as INSTRUMENTTYPECD length = 3   
         format = $3.
         informat = $3.
         label = 'INSTRUMENTTYPECD',
      W1PL30MK7.OPEN_DT as DEALDATE length = 8   
         format = DATETIME20.
         informat = DATETIME20.
         label = 'DEALDATE',
      W1PL30MK7.ACCOUNT_RK length = 8   
         format = 12.
         informat = 12.
         label = 'ACCOUNT_RK'
   from
      work.W1PL30MK7 left join 
      dwh_dds.FINANCIAL_ACCOUNT_ASSOC
         on
         (
            W1PL30MK7.ACCOUNT_RK = FINANCIAL_ACCOUNT_ASSOC.ACCOUNT_RK
            and FINANCIAL_ACCOUNT_ASSOC.VALID_FROM_DTTM <= &REPDT < FINANCIAL_ACCOUNT_ASSOC.VALID_TO_DTTM
            and FINANCIAL_ACCOUNT_ASSOC.FINANCIAL_ACCT_ASSOC_TYPE_CD = 'DCD'
         ) left join 
      dwh_dds.FINANCIAL_ACCOUNT
         on
         (
            FINANCIAL_ACCOUNT_ASSOC.REFERENCE_FINANCIAL_ACCOUNT_RK = FINANCIAL_ACCOUNT.ACCOUNT_RK
            and FINANCIAL_ACCOUNT.VALID_FROM_DTTM <= &REPDT < FINANCIAL_ACCOUNT.VALID_TO_DTTM
            and FINANCIAL_ACCOUNT.FINANCIAL_ACCOUNT_TYPE_CD = 'DEP'
         ) left join 
      dwh_dds.FINANCIAL_INSTRUMENT_ASSOC
         on
         (
            W1PL30MK7.ACCOUNT_RK = FINANCIAL_INSTRUMENT_ASSOC.REFERENCE_ACCOUNT_RK
            and FINANCIAL_INSTRUMENT_ASSOC.VALID_FROM_DTTM <= &REPDT < FINANCIAL_INSTRUMENT_ASSOC.VALID_TO_DTTM
         ) left join 
      dwh_dds.FINANCIAL_INSTRUMENT
         on
         (
            FINANCIAL_INSTRUMENT_ASSOC.FINANCIAL_INSTRUMENT_RK = FINANCIAL_INSTRUMENT.FINANCIAL_INSTRUMENT_RK
            and FINANCIAL_INSTRUMENT.VALID_FROM_DTTM <= &REPDT < FINANCIAL_INSTRUMENT.VALID_TO_DTTM
         )
   where
      W1PL30MK7.FINANCIAL_ACCOUNT_TYPE_CD = 'DCD'
   ;
quit;

%global etls_sql_pushDown;
%let etls_sql_pushDown = &sys_sql_ip_all;

%rcSet(&sqlrc); 



/**  Step end SQL Join **/

/*==========================================================================* 
 * Step:            Append                                A5ELGGF9.AK00013G * 
 * Transform:       Append                                                  * 
 * Description:                                                             * 
 *                                                                          * 
 * Source Tables:   User Written - work.W1PWUIPIZ         A5ELGGF9.AF0000GZ * 
 *                  SQL Join - work.W1PLQQ2I1             A5ELGGF9.AF0000H0 * 
 * Target Table:    Append - work.W1PWUQCJ5               A5ELGGF9.AF0000H1 * 
 *==========================================================================*/ 

%let transformID = %quote(A5ELGGF9.AK00013G);
%let trans_rc = 0;
%let etls_stepStartTime = %sysfunc(datetime(), datetime20.); 

%let etls_recCheckExist = 0; 
%let etls_recnt = 0; 
%macro etls_recordCheck; 
   %let etls_recCheckExist = %eval(%sysfunc(exist(work.W1PWUIPIZ, DATA)) or 
         %sysfunc(exist(work.W1PWUIPIZ, VIEW))); 
   
   %if (&etls_recCheckExist) %then
   %do;
      %local etls_syntaxcheck; 
      %let etls_syntaxcheck = %sysfunc(getoption(syntaxcheck)); 
      /* Turn off syntaxcheck option to perform following steps  */ 
      options nosyntaxcheck;
      
      proc contents data = work.W1PWUIPIZ out = work.etls_contents(keep = nobs) noprint; 
      run; 
      
      data _null_; 
         set work.etls_contents (obs = 1); 
         call symput("etls_recnt", left(put(nobs,32.))); 
      run;
      
      proc datasets lib = work nolist nowarn memtype = (data view);
         delete etls_contents;
      quit;
      
      /* Reset syntaxcheck option to previous setting  */ 
      options &etls_syntaxcheck; 
   %end;
%mend etls_recordCheck;
%etls_recordCheck;

%let dbxrc = %eval(%sysfunc(exist(work.W1PWUIPIZ, DATA)) or 
      %sysfunc(exist(work.W1PWUIPIZ, VIEW))); 

/*---- Map the columns  ----*/ 
proc datasets lib = work nolist nowarn memtype = (data view);
   delete WJ2Z9XC;
quit;

%put %str(NOTE: Mapping columns ...);
proc sql;
   create view work.WJ2Z9XC as
      select
         REPORTCODE,
         REPORTDATE,
         FRONTKDEALID,
         FRONTFDEALID,
         DEALID,
         INSTRUMENTTYPECD,
         DEALDATE
   from work.W1PWUIPIZ
   ;
quit;

%let SYSLAST = work.WJ2Z9XC;

%let dbxrc = %eval(%sysfunc(exist(work.W1PLQQ2I1, DATA)) or 
      %sysfunc(exist(work.W1PLQQ2I1, VIEW))); 

proc datasets lib = work nolist nowarn memtype = (data view);
   delete W1PWUQCJ5;
quit;

data work.W1PWUQCJ5 / view=work.W1PWUQCJ5;
   set work.WJ2Z9XC
       work.W1PLQQ2I1;
   keep REPORTCODE REPORTDATE FRONTKDEALID FRONTFDEALID DEALID INSTRUMENTTYPECD 
    DEALDATE ACCOUNT_RK; 
run;

%rcSet(&syserr); 



/**  Step end Append **/

/*==========================================================================* 
 * Step:            Table Loader                          A5ELGGF9.AK00013H * 
 * Transform:       Table Loader (Version 2.1)                              * 
 * Description:                                                             * 
 *                                                                          * 
 * Source Table:    Append - work.W1PWUQCJ5               A5ELGGF9.AF0000H1 * 
 * Target Table:    DQ_DRVT_DWH_DM - dm_dq.DQ_DRVT_DWH_DM A5ELGGF9.AE000049 * 
 *==========================================================================*/ 

%let transformID = %quote(A5ELGGF9.AK00013H);
%let trans_rc = 0;
%let etls_stepStartTime = %sysfunc(datetime(), datetime20.); 

%let SYSLAST = %nrquote(work.W1PWUQCJ5); 

%let SYS_SQL_IP_SPEEDO = Y;
%let SYS_SQL_MAPPUTTO = sas_put;
%let SYS_SQLREDUCEPUT = DBMS;
%global etls_sql_pushDown;
%let etls_sql_pushDown = -1;
option DBIDIRECTEXEC;

%global etls_tableExist;
%global etls_numIndex;
%global etls_lastTable;
%let etls_tableExist = -1; 
%let etls_numIndex = -1; 
%let etls_lastTable = &SYSLAST; 

/*---- Define load data macro  ----*/ 

/* --------------------------------------------------------------
   Load Technique Selection: AppendToExisting - AppendProc
   Constraint and index action selections: 'ASIS','ASIS','ASIS','ASIS'
   Additional options selections... 
      Set unmapped to missing on updates: false 
   -------------------------------------------------------------- */
%macro etls_loader;

   %let etls_tableOptions = ;
   
   /*---- Map the columns  ----*/ 
   proc datasets lib = work nolist nowarn memtype = (data view);
      delete WJ2Z9XR;
   quit;
   
   data _null_;
      put "NOTE: The following column(s) do not have a column mapping, so the"
           " value(s) will be set to missing: ADDITIONALINFORMATION, STARTDATE,"
           " NEXTDATE, ENDDATE, LEGNUMBER, VALUEFRS,    VALUESEC";
   run;
   
   %put %str(NOTE: Mapping columns ...);
   proc sql;
      create view work.WJ2Z9XR as
         select
            REPORTCODE,
            REPORTDATE,
            FRONTKDEALID,
            FRONTFDEALID,
            DEALID,
            INSTRUMENTTYPECD,
            DEALDATE,
            "" as ADDITIONALINFORMATION length = 255
               format = $255.
               informat = $255.,
            . as STARTDATE length = 8
               format = DATETIME20.
               informat = DATETIME20.,
            . as NEXTDATE length = 8
               format = DATETIME20.
               informat = DATETIME20.,
            . as ENDDATE length = 8
               format = DATETIME20.
               informat = DATETIME20.,
            "" as LEGNUMBER length = 1
               format = $1.
               informat = $1.,
            "" as VALUEFRS length = 20
               format = $20.
               informat = $20.,
            "" as VALUESEC length = 20
               format = $20.
               informat = $20.
      from &etls_lastTable
      ;
   quit;
   
   %let SYSLAST = work.WJ2Z9XR;
   
   %let etls_lastTable = &SYSLAST; 
   %let etls_tableOptions = ; 
   
   /* Determine if the target table exists  */ 
   %let etls_tableExist = %eval(%sysfunc(exist(dm_dq.DQ_DRVT_DWH_DM, DATA)) or 
         %sysfunc(exist(dm_dq.DQ_DRVT_DWH_DM, VIEW))); 
   
   /*---- Create a new table  ----*/ 
   %if (&etls_tableExist eq 0) %then 
   %do;  /* if table does not exist  */ 
   
      %put %str(NOTE: Creating table ...);
      
      data dm_dq.DQ_DRVT_DWH_DM
              (dbnull = (
                         REPORTCODE = YES
                         REPORTDATE = YES
                         FRONTKDEALID = YES
                         FRONTFDEALID = YES
                         DEALID = YES
                         INSTRUMENTTYPECD = YES
                         DEALDATE = YES
                         ADDITIONALINFORMATION = YES
                         STARTDATE = YES
                         NEXTDATE = YES
                         ENDDATE = YES
                         LEGNUMBER = YES
                         VALUEFRS = YES
                         VALUESEC = YES));
         attrib REPORTCODE length = $5
            format = $5.
            informat = $5.
            label = 'REPORTCODE'; 
         attrib REPORTDATE length = 8
            format = DATETIME20.
            informat = DATETIME20.
            label = 'REPORTDATE'; 
         attrib FRONTKDEALID length = $10
            format = $10.
            informat = $10.
            label = 'FRONTKDEALID'; 
         attrib FRONTFDEALID length = $10
            format = $10.
            informat = $10.
            label = 'FRONTFDEALID'; 
         attrib DEALID length = $100
            format = $100.
            informat = $100.
            label = 'DEALID'; 
         attrib INSTRUMENTTYPECD length = $3
            format = $3.
            informat = $3.
            label = 'INSTRUMENTTYPECD'; 
         attrib DEALDATE length = 8
            format = DATETIME20.
            informat = DATETIME20.
            label = 'DEALDATE'; 
         attrib ADDITIONALINFORMATION length = $255
            format = $255.
            informat = $255.
            label = 'ADDITIONALINFORMATION'; 
         attrib STARTDATE length = 8
            format = DATETIME20.
            informat = DATETIME20.
            label = 'STARTDATE'; 
         attrib NEXTDATE length = 8
            format = DATETIME20.
            informat = DATETIME20.
            label = 'NEXTDATE'; 
         attrib ENDDATE length = 8
            format = DATETIME20.
            informat = DATETIME20.
            label = 'ENDDATE'; 
         attrib LEGNUMBER length = $1
            format = $1.
            informat = $1.
            label = 'LEGNUMBER'; 
         attrib VALUEFRS length = $20
            format = $20.
            informat = $20.
            label = 'VALUEFRS'; 
         attrib VALUESEC length = $20
            format = $20.
            informat = $20.
            label = 'VALUESEC'; 
         call missing(of _all_);
         stop;
      run;
      
      %rcSet(&syserr); 
      
   %end;  /* if table does not exist  */ 
   
   /*---- Append  ----*/ 
   %put %str(NOTE: Appending data ...);
   
   proc append base = dm_dq.DQ_DRVT_DWH_DM 
      data = &etls_lastTable (&etls_tableOptions)  force ; 
    run; 
   
   %rcSet(&syserr); 
   
   proc datasets lib = work nolist nowarn memtype = (data view);
      delete WJ2Z9XR;
   quit;
   
%mend etls_loader;
%etls_loader;

%let etls_recnt = 0;
%macro etls_recordCheck; 
   %let etls_recCheckExist = %eval(%sysfunc(exist(dm_dq.DQ_DRVT_DWH_DM, DATA)) or 
         %sysfunc(exist(dm_dq.DQ_DRVT_DWH_DM, VIEW))); 
   
   %if (&etls_recCheckExist) %then
   %do;
      proc sql noprint;
         select count(*) into :etls_recnt from dm_dq.DQ_DRVT_DWH_DM;
      quit;
   %end;
%mend etls_recordCheck;
%etls_recordCheck;



/**  Step end Table Loader **/

/*==========================================================================* 
 * Step:            SQL Join                              A5ELGGF9.AK00013I * 
 * Transform:       Join                                                    * 
 * Description:                                                             * 
 *                                                                          * 
 * Source Tables:   FINANCIAL_INSTRUMENT_TYPE -           A569C89V.AE0000FZ * 
 *                   dwh_dds.FINANCIAL_INSTRUMENT_TYPE                      * 
 *                  Append - work.W1PWUQCJ5               A5ELGGF9.AF0000H1 * 
 * Target Table:    SQL Join - work.W1MUJ4OLZ             A5ELGGF9.AF0000H2 * 
 *==========================================================================*/ 

%let transformID = %quote(A5ELGGF9.AK00013I);
%let trans_rc = 0;
%let etls_stepStartTime = %sysfunc(datetime(), datetime20.); 

%let etls_recnt = 0;
%macro etls_recordCheck; 
   %let etls_recCheckExist = %eval(%sysfunc(exist(dwh_dds.FINANCIAL_INSTRUMENT_TYPE, DATA)) or 
         %sysfunc(exist(dwh_dds.FINANCIAL_INSTRUMENT_TYPE, VIEW))); 
   
   %if (&etls_recCheckExist) %then
   %do;
      proc sql noprint;
         select count(*) into :etls_recnt from dwh_dds.FINANCIAL_INSTRUMENT_TYPE;
      quit;
   %end;
%mend etls_recordCheck;
%etls_recordCheck;

%let SYS_SQL_IP_SPEEDO = Y;
%let SYS_SQL_MAPPUTTO = sas_put;
%let SYS_SQLREDUCEPUT = DBMS;
%global etls_sql_pushDown;
%let etls_sql_pushDown = -1;
option DBIDIRECTEXEC;

proc datasets lib = work nolist nowarn memtype = (data view);
   delete W1MUJ4OLZ;
quit;

proc sql;
   create table work.W1MUJ4OLZ as
   select distinct
      W1PWUQCJ5.INSTRUMENTTYPECD length = 3   
         format = $3.
         informat = $3.
         label = 'INSTRUMENTTYPECD',
      FINANCIAL_INSTRUMENT_TYPE.FINANCIAL_INSTRUMENT_TYPE_DESC as INSTRUMENTTYPE length = 100   
         format = $100.
         informat = $100.
         label = 'INSTRUMENTTYPE'
   from
      work.W1PWUQCJ5 left join 
      dwh_dds.FINANCIAL_INSTRUMENT_TYPE
         on
         (
            W1PWUQCJ5.INSTRUMENTTYPECD = FINANCIAL_INSTRUMENT_TYPE.FINANCIAL_INSTRUMENT_TYPE_CD
            and FINANCIAL_INSTRUMENT_TYPE.VALID_TO_DTTM = &ETL_SCD_FUTURE_DTTM
         )
   where
      INSTRUMENTTYPECD NOT IS MISSING 
   ;
quit;

%global etls_sql_pushDown;
%let etls_sql_pushDown = &sys_sql_ip_all;

%rcSet(&sqlrc); 



/**  Step end SQL Join **/

/*==========================================================================* 
 * Step:            Table Loader                          A5ELGGF9.AK00013J * 
 * Transform:       Table Loader (Version 2.1)                              * 
 * Description:                                                             * 
 *                                                                          * 
 * Source Table:    SQL Join - work.W1MUJ4OLZ             A5ELGGF9.AF0000H2 * 
 * Target Table:    DQ_DRVT_INSTRUMENTTYPE -              A5ELGGF9.AE00004A * 
 *                   dm_dq.DQ_DRVT_INSTRUMENTTYPE                           * 
 *==========================================================================*/ 

%let transformID = %quote(A5ELGGF9.AK00013J);
%let trans_rc = 0;
%let etls_stepStartTime = %sysfunc(datetime(), datetime20.); 

%let SYSLAST = %nrquote(work.W1MUJ4OLZ); 

%let SYS_SQL_IP_SPEEDO = Y;
%let SYS_SQL_MAPPUTTO = sas_put;
%let SYS_SQLREDUCEPUT = DBMS;
%global etls_sql_pushDown;
%let etls_sql_pushDown = -1;
option DBIDIRECTEXEC;

%global etls_tableExist;
%global etls_numIndex;
%global etls_lastTable;
%let etls_tableExist = -1; 
%let etls_numIndex = -1; 
%let etls_lastTable = &SYSLAST; 

/*---- Define load data macro  ----*/ 

/* --------------------------------------------------------------
   Load Technique Selection: Update - Matching=SQLSet, New=InsertSQL
   Blanks may replace non-blanks: false
   Constraint and index action selections: 'ASIS','ASIS','ASIS','ASIS'
   Additional options selections... 
      Set unmapped to missing on updates: false 
   -------------------------------------------------------------- */
%macro etls_loader;

   %let etls_tableOptions = ;
   
   /* Determine if the target table exists  */ 
   %let etls_tableExist = %eval(%sysfunc(exist(dm_dq.DQ_DRVT_INSTRUMENTTYPE, DATA)) or 
         %sysfunc(exist(dm_dq.DQ_DRVT_INSTRUMENTTYPE, VIEW))); 
   
   %let etls_hasUpdateIndex=0; 
   
   /*---- Create a new table  ----*/ 
   %if (&etls_tableExist eq 0) %then 
   %do;  /* if table does not exist  */ 
   
      %put %str(NOTE: Creating table ...);
      
      data dm_dq.DQ_DRVT_INSTRUMENTTYPE
              (dbnull = (
                         INSTRUMENTTYPECD = YES
                         INSTRUMENTTYPE = YES));
         attrib INSTRUMENTTYPECD length = $3
            format = $3.
            informat = $3.
            label = 'INSTRUMENTTYPECD'; 
         attrib INSTRUMENTTYPE length = $100
            format = $100.
            informat = $100.
            label = 'INSTRUMENTTYPE'; 
         call missing(of _all_);
         stop;
      run;
      
      %rcSet(&syserr); 
      
   %end;  /* if table does not exist  */ 
   
   %let etls_recCheckExist = 0; 
   %let etls_targetHasRows = 0; 
   %macro etls_recordCheck; 
      %let etls_recCheckExist = %eval(%sysfunc(exist(dm_dq.DQ_DRVT_INSTRUMENTTYPE, DATA)) or 
            %sysfunc(exist(dm_dq.DQ_DRVT_INSTRUMENTTYPE, VIEW))); 
      
      %if (&etls_recCheckExist) %then
      %do;
         %local etls_syntaxcheck; 
         %let etls_syntaxcheck = %sysfunc(getoption(syntaxcheck)); 
         /* Turn off syntaxcheck option to perform following steps  */ 
         options nosyntaxcheck;
         
         data _null_; 
            set dm_dq.DQ_DRVT_INSTRUMENTTYPE( obs=1 ); 
            call symput("etls_targetHasRows",'1'); 
         run; 
         /* Reset syntaxcheck option to previous setting  */ 
         options &etls_syntaxcheck; 
      %end;
   %mend etls_recordCheck;
   %etls_recordCheck;
   
   
   %if (&etls_targetHasRows) %then 
   %do;  /* if has rows */ 
      proc sql ; 
         /* update existing records in the master table  */ 
         update dm_dq.DQ_DRVT_INSTRUMENTTYPE as m
            set INSTRUMENTTYPE = (select case when t.INSTRUMENTTYPE="" then m.INSTRUMENTTYPE else t.INSTRUMENTTYPE end from &etls_lastTable as t 
                                where m.INSTRUMENTTYPECD = t.INSTRUMENTTYPECD)
               where exists (select * from &etls_lastTable as t
                                   where m.INSTRUMENTTYPECD = t.INSTRUMENTTYPECD);
         
         /* create a temporary table of new records from the transaction table  */ 
         create table etls_newrecords as 
            select * 
               from &etls_lastTable as t 
                  where not exists 
                     (select * from dm_dq.DQ_DRVT_INSTRUMENTTYPE
                   as m 
                                      where m.INSTRUMENTTYPECD = t.INSTRUMENTTYPECD)
         ; 
         
      quit;
      
      %let etls_lastTable = &SYSLAST;
      
      %let etls_tableOptions = ; 
      
      %global etls_sql_pushDown;
      %let etls_sql_pushDown = &sys_sql_ip_all;
      
      %rcSet(&sqlrc); 
      
   %end; /* if has rows */ 
   
   proc sql ; 
   
      /* insert new records into the master table  */ 
      insert into dm_dq.DQ_DRVT_INSTRUMENTTYPE 
         (INSTRUMENTTYPECD, INSTRUMENTTYPE)
         select 
                   INSTRUMENTTYPECD, INSTRUMENTTYPE
            from &etls_lastTable 
      ; 
      
   quit;
   
   %global etls_sql_pushDown;
   %let etls_sql_pushDown = &sys_sql_ip_all;
   
   %rcSet(&sqlrc); 
   
   proc datasets lib = work nolist nowarn memtype = (data view);
      delete etls_newrecords;
   quit;
   
%mend etls_loader;
%etls_loader;

%let etls_recnt = 0;
%macro etls_recordCheck; 
   %let etls_recCheckExist = %eval(%sysfunc(exist(dm_dq.DQ_DRVT_INSTRUMENTTYPE, DATA)) or 
         %sysfunc(exist(dm_dq.DQ_DRVT_INSTRUMENTTYPE, VIEW))); 
   
   %if (&etls_recCheckExist) %then
   %do;
      proc sql noprint;
         select count(*) into :etls_recnt from dm_dq.DQ_DRVT_INSTRUMENTTYPE;
      quit;
   %end;
%mend etls_recordCheck;
%etls_recordCheck;



/**  Step end Table Loader **/

/*==========================================================================* 
 * Step:            Завершить модуль                      A5ELGGF9.AK00013K * 
 * Transform:       Завершить модуль                                        * 
 * Description:                                                             * 
 *==========================================================================*/ 

%let transformID = %quote(A5ELGGF9.AK00013K);
%let trans_rc = 0;
%let etls_stepStartTime = %sysfunc(datetime(), datetime20.); 

%let _INPUT_count = 0; 
%let _OUTPUT_count = 0; 


/*****************************************************************
* ВЕРСИЯ:
*   $Id: transform_job_finish.sas 247 2012-04-03 07:31:10Z nesterenok $
*
******************************************************************
* НАЗНАЧЕНИЕ:
*   Регистрирует конец модуля ETL.
*
* ПАРАМЕТРЫ:
*   нет
*
******************************************************************/

%macro transform_job_finish;

   /* Продолжаем модуль */
   %job_continue_reg(mpJobType=JOB, mpJobName=&ETLS_JobName., mpPostEvent=N);

   /* Завершаем модуль */
   %job_finish_reg(mpJobType=JOB);

%mend transform_job_finish;

%transform_job_finish;


%rcSet(&syserr); 
%rcSet(&sysrc); 
%rcSet(&sqlrc); 



/**  Step end Завершить модуль **/

%let etls_endTime = %sysfunc(datetime(),datetime.);



/**  Job end 202_140_Mart_DQ_DRVT_REP14 **/

/* Reset jobid and name */
%let jobID = %quote(A5ELGGF9.AH00003N);
%let etls_jobName = %nrquote(202_002_Stream_DQ_DRVT);

/**************************************************************************** 
 * Job:             202_150_Mart_DQ_DRVT_Finish           A5ELGGF9.AH00002L * 
 * Description:                                                             * 
 *                                                                          * 
 * Metadata Server: bravo14                                                 * 
 * Port:            8561                                                    * 
 * Location:        /DWH_DMDQ_REP/Jobs/Includes/DQ_DRVT                     * 
 *                                                                          * 
 * Server:          SASApp                                A5C46MZY.AQ000002 * 
 *                                                                          * 
 * Source Table:    ETL_RESOURCE - etl_sys.ETL_RESOURCE   A59S11RW.AE00001H * 
 *                                                                          * 
 * Generated on:    16 Июль 2013 г. 17:46:23 MSD                            * 
 * Generated by:    sasdwh                                                  * 
 * Version:         SAS Data Integration Studio 4.5                         * 
 ****************************************************************************/ 

/* General macro variables  */ 
%let jobID = %quote(A5ELGGF9.AH00002L);
%let etls_jobName = %nrquote(202_150_Mart_DQ_DRVT_Finish);
%let etls_userID = %nrquote(sasdwh);


/* Create metadata macro variables */
%let IOMServer      = %nrquote(SASApp);
%let metaPort       = %nrquote(8561);
%let metaServer     = %nrquote(bravo14);

/* Set metadata options */
options metaport       = &metaPort 
        metaserver     = "&metaServer"; 

/* Setup for capturing job status  */ 
%let etls_startTime = %sysfunc(datetime(),datetime.);
%let etls_recordsBefore = 0;
%let etls_recordsAfter = 0;
%let etls_lib = 0;
%let etls_table = 0;

%global etls_debug; 
%macro etls_setDebug; 
   %if %str(&etls_debug) ne 0 %then 
      OPTIONS MPRINT%str(;); 
%mend; 
%etls_setDebug; 

/*==========================================================================* 
 * Step:            Начать модуль                         A5ELGGF9.AK00013L * 
 * Transform:       Начать модуль                                           * 
 * Description:                                                             * 
 *==========================================================================*/ 

%let transformID = %quote(A5ELGGF9.AK00013L);
%let trans_rc = 0;
%let etls_stepStartTime = %sysfunc(datetime(), datetime20.); 

%let _INPUT_count = 0; 
%let _OUTPUT_count = 0; 


/*****************************************************************
* ВЕРСИЯ:
*   $Id: transform_job_start.sas 1747 2012-08-01 11:26:13Z nesterenok $
*
******************************************************************
* НАЗНАЧЕНИЕ:
*   Регистрирует начало модуля ETL.
*
* ПАРАМЕТРЫ:
*   нет
*
******************************************************************/

%macro transform_job_start;

   /* Продолжаем поток (или создаем новый) */
   %local lmvStreamName;
   %if %sysfunc(sysexist(LSB_JOBNAME)) %then
      %let lmvStreamName = %scan(%sysfunc(sysget(LSB_JOBNAME)), 3, :);
   %else
      %let lmvStreamName = ;

   %job_continue_reg(mpJobType=STREAM, mpJobName=&lmvStreamName, mpPostEvent=N, mpForcedStart=Y);

   /* Для DI, начинаем поток заново, если старый был начат не сегодня */
   %if %length(&lmvStreamName) eq 0 and &STREAM_START_DT ne %sysfunc(today()) %then %do;
      %job_start_reg(mpJobType=STREAM, mpParentJobId=, mpJobName=&lmvStreamName.);
   %end;

   /* Начинаем модуль */
   %job_start_reg(mpJobType=JOB, mpParentJobId=&STREAM_ID, mpJobName=&ETLS_JobName.);

%mend transform_job_start;

%transform_job_start;


%rcSet(&syserr); 
%rcSet(&sysrc); 
%rcSet(&sqlrc); 



/**  Step end Начать модуль **/

/*==========================================================================* 
 * Step:            Extract                               A5ELGGF9.AK00013M * 
 * Transform:       Extract                                                 * 
 * Description:     RESOURCE_CD = "DM_DQ_DRVT"                              * 
 *                                                                          * 
 * Source Table:    ETL_RESOURCE - etl_sys.ETL_RESOURCE   A59S11RW.AE00001H * 
 * Target Table:    Extract - work.W6TDS5W0               A5ELGGF9.AF0000H3 * 
 *==========================================================================*/ 

%let transformID = %quote(A5ELGGF9.AK00013M);
%let trans_rc = 0;
%let etls_stepStartTime = %sysfunc(datetime(), datetime20.); 

%let etls_recnt = 0;
%macro etls_recordCheck; 
   %let etls_recCheckExist = %eval(%sysfunc(exist(etl_sys.ETL_RESOURCE, DATA)) or 
         %sysfunc(exist(etl_sys.ETL_RESOURCE, VIEW))); 
   
   %if (&etls_recCheckExist) %then
   %do;
      proc sql noprint;
         select count(*) into :etls_recnt from etl_sys.ETL_RESOURCE;
      quit;
   %end;
%mend etls_recordCheck;
%etls_recordCheck;

%let SYSLAST = %nrquote(etl_sys.ETL_RESOURCE); 

%let SYS_SQL_IP_SPEEDO = Y;
%let SYS_SQL_MAPPUTTO = sas_put;
%let SYS_SQLREDUCEPUT = DBMS;
%global etls_sql_pushDown;
%let etls_sql_pushDown = -1;
option DBIDIRECTEXEC;

/*---- Map the columns  ----*/ 
proc datasets lib = work nolist nowarn memtype = (data view);
   delete W6TDS5W0;
quit;

%put %str(NOTE: Mapping columns ...);
proc sql;
   create table work.W6TDS5W0 as
      select
         RESOURCE_ID,
         ("ALL") as VERSION_ID length = 8
            format = $8.
            informat = $8.
            label = 'VERSION_ID',
         ("NOCHG") as AVAILABLE_DT length = 8
            format = $8.
            informat = $8.
            label = 'AVAILABLE_DT',
         (&JOB_ID) as PROCESSED_BY_JOB_ID length = 8
            format = 8.
            informat = 8.
            label = 'PROCESSED_BY_JOB_ID',
         ("E") as STATUS_CD length = 3
            format = $3.
            informat = $3.
            label = 'STATUS_CD'
   from &SYSLAST
      where RESOURCE_CD = "DM_DQ_DRVT"
   ;
quit;

%let SYSLAST = work.W6TDS5W0;

%global etls_sql_pushDown;
%let etls_sql_pushDown = &sys_sql_ip_all;

%rcSet(&sqlrc); 



/**  Step end Extract **/

/*==========================================================================* 
 * Step:            Обновить ресурсы                      A5ELGGF9.AK00013N * 
 * Transform:       Обновить ресурсы                                        * 
 * Description:     E для всех                                              * 
 *                                                                          * 
 * Source Table:    Extract - work.W6TDS5W0               A5ELGGF9.AF0000H3 * 
 *==========================================================================*/ 

%let transformID = %quote(A5ELGGF9.AK00013N);
%let trans_rc = 0;
%let etls_stepStartTime = %sysfunc(datetime(), datetime20.); 

%let etls_recCheckExist = 0; 
%let etls_recnt = 0; 
%macro etls_recordCheck; 
   %let etls_recCheckExist = %eval(%sysfunc(exist(work.W6TDS5W0, DATA)) or 
         %sysfunc(exist(work.W6TDS5W0, VIEW))); 
   
   %if (&etls_recCheckExist) %then
   %do;
      %local etls_syntaxcheck; 
      %let etls_syntaxcheck = %sysfunc(getoption(syntaxcheck)); 
      /* Turn off syntaxcheck option to perform following steps  */ 
      options nosyntaxcheck;
      
      proc contents data = work.W6TDS5W0 out = work.etls_contents(keep = nobs) noprint; 
      run; 
      
      data _null_; 
         set work.etls_contents (obs = 1); 
         call symput("etls_recnt", left(put(nobs,32.))); 
      run;
      
      proc datasets lib = work nolist nowarn memtype = (data view);
         delete etls_contents;
      quit;
      
      /* Reset syntaxcheck option to previous setting  */ 
      options &etls_syntaxcheck; 
   %end;
%mend etls_recordCheck;
%etls_recordCheck;

%let SYSLAST = %nrquote(work.W6TDS5W0); 

%let _INPUT_count = 1; 
%let _INPUT = work.W6TDS5W0;
%let _INPUT_connect = ;
%let _INPUT_engine = ;
%let _INPUT_memtype = DATA;
%let _INPUT_options = %nrquote();
%let _INPUT_alter = %nrquote();
%let _INPUT_path = %nrquote(/Extract_A5ELGGF9.AF0000H3%(WorkTable%));
%let _INPUT_type = 1;
%let _INPUT_label = %nrquote();

%let tpIn = work.W6TDS5W0;
%let tpIn_connect = ;
%let tpIn_engine = ;
%let tpIn_memtype = DATA;
%let tpIn_options = %nrquote();
%let tpIn_alter = %nrquote();
%let tpIn_path = %nrquote(/Extract_A5ELGGF9.AF0000H3%(WorkTable%));
%let tpIn_type = 1;
%let tpIn_label = %nrquote();

%let _OUTPUT_count = 0; 

%let tpNotFound = %nrquote(ADD);
%let tpWhere = %nrquote(status_cd = %'A%');

/*****************************************************************
* ВЕРСИЯ:
*   $Id: transform_resource_update_all.sas 3459 2012-10-09 06:44:46Z nesterenok $
*
******************************************************************
* НАЗНАЧЕНИЕ:
*   Обновляет несколько ресурсов по таблице.
*   TODO:  убрать дефолт для update_dttm.
*
* ПАРАМЕТРЫ:
*   tpIn                + входная таблица (поля: resource_id, version_id, available_dt, update_dttm, processed_by_job_id, status_cd)
*                         Поля available_dt, update_dttm, processed_by_job_id, status_cd могут отсутствовать и в этом случае не обновляются
*                         Присутствующие поля должны содержать обновленные значения
*   tpNotFound          - если запись не найдена:
*                         NOP - ничего не делать
*                         ERR - сообщать об ошибке
*                         ADD - добавить новую запись
*   tpWhere             - дополнительное ограничение, в формате Oracle
*
******************************************************************/

%macro transform_resource_update_all;
   /* Получаем список доступных переменных */
   %local lmvInVars;
   %let lmvInVars = %upcase(%member_vars (&tpIn));

   /* Обновляем все ресурсы */
   %macro _tr_resource_update_all_loop;
      %resource_update (
         mpResourceId=&resource_id, mpVersion=&version_id,
         %if %index(&lmvInVars, AVAILABLE_DT) %then
            mpDate=&available_dt,
         ;
         %if %index(&lmvInVars, UPDATE_DTTM) %then
            mpUpdateDttm=&update_dttm,
         ;
         %else %if %length(&version_id) = 0 or &version_id = . %then
            mpUpdateDttm=,
         ;
         %if %index(&lmvInVars, PROCESSED_BY_JOB_ID) %then
            mpProcessedBy=&processed_by_job_id,
         ;
         %if %index(&lmvInVars, STATUS_CD) %then
            mpStatus=&status_cd,
         ;
         mpNotFound=&tpNotFound, mpWhere=&tpWhere
      );
   %mend _tr_resource_update_all_loop;

   %util_loop_data (mpLoopMacro=_tr_resource_update_all_loop, mpData=&tpIn);
%mend transform_resource_update_all;

%transform_resource_update_all;

%rcSet(&syserr); 
%rcSet(&sysrc); 
%rcSet(&sqlrc); 



/**  Step end Обновить ресурсы **/

/*==========================================================================* 
 * Step:            Завершить модуль                      A5ELGGF9.AK00013O * 
 * Transform:       Завершить модуль                                        * 
 * Description:                                                             * 
 *==========================================================================*/ 

%let transformID = %quote(A5ELGGF9.AK00013O);
%let trans_rc = 0;
%let etls_stepStartTime = %sysfunc(datetime(), datetime20.); 

%let _INPUT_count = 0; 
%let _OUTPUT_count = 0; 


/*****************************************************************
* ВЕРСИЯ:
*   $Id: transform_job_finish.sas 247 2012-04-03 07:31:10Z nesterenok $
*
******************************************************************
* НАЗНАЧЕНИЕ:
*   Регистрирует конец модуля ETL.
*
* ПАРАМЕТРЫ:
*   нет
*
******************************************************************/

%macro transform_job_finish;

   /* Продолжаем модуль */
   %job_continue_reg(mpJobType=JOB, mpJobName=&ETLS_JobName., mpPostEvent=N);

   /* Завершаем модуль */
   %job_finish_reg(mpJobType=JOB);

%mend transform_job_finish;

%transform_job_finish;


%rcSet(&syserr); 
%rcSet(&sysrc); 
%rcSet(&sqlrc); 



/**  Step end Завершить модуль **/

%let etls_endTime = %sysfunc(datetime(),datetime.);



/**  Job end 202_150_Mart_DQ_DRVT_Finish **/

/* Reset jobid and name */
%let jobID = %quote(A5ELGGF9.AH00003N);
%let etls_jobName = %nrquote(202_002_Stream_DQ_DRVT);

/*==========================================================================* 
 * Step:            Завершить модуль                      A5ELGGF9.AK0001B9 * 
 * Transform:       Завершить модуль                                        * 
 * Description:                                                             * 
 *==========================================================================*/ 

%let transformID = %quote(A5ELGGF9.AK0001B9);
%let trans_rc = 0;
%let etls_stepStartTime = %sysfunc(datetime(), datetime20.); 

%let _INPUT_count = 0; 
%let _OUTPUT_count = 0; 


/*****************************************************************
* ВЕРСИЯ:
*   $Id: transform_job_finish.sas 247 2012-04-03 07:31:10Z nesterenok $
*
******************************************************************
* НАЗНАЧЕНИЕ:
*   Регистрирует конец модуля ETL.
*
* ПАРАМЕТРЫ:
*   нет
*
******************************************************************/

%macro transform_job_finish;

   /* Продолжаем модуль */
   %job_continue_reg(mpJobType=JOB, mpJobName=&ETLS_JobName., mpPostEvent=N);

   /* Завершаем модуль */
   %job_finish_reg(mpJobType=JOB);

%mend transform_job_finish;

%transform_job_finish;


%rcSet(&syserr); 
%rcSet(&sysrc); 
%rcSet(&sqlrc); 



/**  Step end Завершить модуль **/

%let etls_endTime = %sysfunc(datetime(),datetime.);

