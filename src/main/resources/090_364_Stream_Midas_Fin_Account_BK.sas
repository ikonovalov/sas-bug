/**************************************************************************** 
 * Job:             090_364_Stream_Midas_Fin_Account_BK   A569C89V.AQ0000CK * 
 * Description:                                                             * 
 *                                                                          * 
 * Metadata Server: bravo14                                                 * 
 * Port:            8561                                                    * 
 * Location:        /DWH_DWHDDS_DDS/Jobs/090_Regular_ETL/090_360_Stream_M   * 
 *                  idas_Fin_Instrument                                     * 
 *                                                                          * 
 * Server:          SASApp                                A5C46MZY.AQ000002 * 
 *                                                                          * 
 * Generated on:    16 Июль 2013 г. 17:14:39 MSD                            * 
 * Generated by:    sasdwh                                                  * 
 * Version:         SAS Data Integration Studio 4.5                         * 
 ****************************************************************************/ 

/* General macro variables  */ 
%let jobID = %quote(A569C89V.AQ0000CK);
%let etls_jobName = %nrquote(090_364_Stream_Midas_Fin_Account_BK);
%let etls_userID = %nrquote(sasdwh);

/* Setup to capture return codes  */ 
%global job_rc trans_rc sqlrc ;
%let sysrc = 0;
%let job_rc = 0;
%let trans_rc = 0;
%let sqlrc = 0;
%global etls_stepStartTime; 
/* initialize syserr to 0 */
data _null_; run;

%macro rcSet(error); 
   %if (&error gt &trans_rc) %then 
      %let trans_rc = &error;
   %if (&error gt &job_rc) %then 
      %let job_rc = &error;
%mend rcSet; 

%macro rcSetDS(error); 
   if &error gt input(symget('trans_rc'),12.) then 
      call symput('trans_rc',trim(left(put(&error,12.))));
   if &error gt input(symget('job_rc'),12.) then 
      call symput('job_rc',trim(left(put(&error,12.))));
%mend rcSetDS; 

/* Create metadata macro variables */
%let IOMServer      = %nrquote(SASApp);
%let metaPort       = %nrquote(8561);
%let metaServer     = %nrquote(bravo14);

/* Set metadata options */
options metaport       = &metaPort 
        metaserver     = "&metaServer"; 

/* Setup for capturing job status  */ 
%let etls_startTime = %sysfunc(datetime(),datetime.);
%let etls_recordsBefore = 0;
%let etls_recordsAfter = 0;
%let etls_lib = 0;
%let etls_table = 0;

%global etls_debug; 
%macro etls_setDebug; 
   %if %str(&etls_debug) ne 0 %then 
      OPTIONS MPRINT%str(;); 
%mend; 
%etls_setDebug; 

/*==========================================================================* 
 * Step:            Начать модуль                         A569C89V.AS000440 * 
 * Transform:       Начать модуль                                           * 
 * Description:                                                             * 
 *==========================================================================*/ 

%let transformID = %quote(A569C89V.AS000440);
%let trans_rc = 0;
%let etls_stepStartTime = %sysfunc(datetime(), datetime20.); 

%let _INPUT_count = 0; 
%let _OUTPUT_count = 0; 


/*****************************************************************
* ВЕРСИЯ:
*   $Id: transform_job_start.sas 1747 2012-08-01 11:26:13Z nesterenok $
*
******************************************************************
* НАЗНАЧЕНИЕ:
*   Регистрирует начало модуля ETL.
*
* ПАРАМЕТРЫ:
*   нет
*
******************************************************************/

%macro transform_job_start;

   /* Продолжаем поток (или создаем новый) */
   %local lmvStreamName;
   %if %sysfunc(sysexist(LSB_JOBNAME)) %then
      %let lmvStreamName = %scan(%sysfunc(sysget(LSB_JOBNAME)), 3, :);
   %else
      %let lmvStreamName = ;

   %job_continue_reg(mpJobType=STREAM, mpJobName=&lmvStreamName, mpPostEvent=N, mpForcedStart=Y);

   /* Для DI, начинаем поток заново, если старый был начат не сегодня */
   %if %length(&lmvStreamName) eq 0 and &STREAM_START_DT ne %sysfunc(today()) %then %do;
      %job_start_reg(mpJobType=STREAM, mpParentJobId=, mpJobName=&lmvStreamName.);
   %end;

   /* Начинаем модуль */
   %job_start_reg(mpJobType=JOB, mpParentJobId=&STREAM_ID, mpJobName=&ETLS_JobName.);

%mend transform_job_start;

%transform_job_start;


%rcSet(&syserr); 
%rcSet(&sysrc); 
%rcSet(&sqlrc); 



/**  Step end Начать модуль **/

/**************************************************************************** 
 * Job:             042_931_Structure_FINANCIAL_ACCOUNT_  A5Y50FNE.AN0000VF * 
 *                  IRS_BK                                                  * 
 * Description:                                                             * 
 *                                                                          * 
 * Metadata Server: bravo14                                                 * 
 * Port:            8561                                                    * 
 * Location:        /DWH_DWHDDS_IA/Jobs/042_Structure/Financial_Account     * 
 *                                                                          * 
 * Server:          SASApp                                A5C46MZY.AQ000002 * 
 *                                                                          * 
 * Source Table:    FINANCIAL_INSTRUMENT_IRS_BK -         A5Y50FNE.AE00013Y * 
 *                   work_ia.FINANCIAL_INSTRUMENT_IRS_BK                    * 
 * Target Tables:   FINANCIAL_ACCOUNT_IRS_BK -            A5Y50FNE.AE00012O * 
 *                   work_ia.FINANCIAL_ACCOUNT_IRS_BK                       * 
 *                  FIN_INSTR_ASSOC_IRS_BK -              A5Y50FNE.AE000126 * 
 *                   work_ia.FIN_INSTR_ASSOC_IRS_BK                         * 
 *                  CUSTOMER_X_FIN_ACC_IRS_BK -           A5Y50FNE.AE00011S * 
 *                   work_ia.CUSTOMER_X_FIN_ACC_IRS_BK                      * 
 *                                                                          * 
 * Generated on:    16 Июль 2013 г. 17:14:41 MSD                            * 
 * Generated by:    sasdwh                                                  * 
 * Version:         SAS Data Integration Studio 4.5                         * 
 ****************************************************************************/ 

/* General macro variables  */ 
%let jobID = %quote(A5Y50FNE.AN0000VF);
%let etls_jobName = %nrquote(042_931_Structure_FINANCIAL_ACCOUNT_IRS_BK);
%let etls_userID = %nrquote(sasdwh);


/* Create metadata macro variables */
%let IOMServer      = %nrquote(SASApp);
%let metaPort       = %nrquote(8561);
%let metaServer     = %nrquote(bravo14);

/* Set metadata options */
options metaport       = &metaPort 
        metaserver     = "&metaServer"; 

/* Setup for capturing job status  */ 
%let etls_startTime = %sysfunc(datetime(),datetime.);
%let etls_recordsBefore = 0;
%let etls_recordsAfter = 0;
%let etls_lib = 0;
%let etls_table = 0;

%global etls_debug; 
%macro etls_setDebug; 
   %if %str(&etls_debug) ne 0 %then 
      OPTIONS MPRINT%str(;); 
%mend; 
%etls_setDebug; 

/*==========================================================================* 
 * Step:            Начать модуль                         A5Y50FNE.AQ0009P1 * 
 * Transform:       Начать модуль                                           * 
 * Description:                                                             * 
 *==========================================================================*/ 

%let transformID = %quote(A5Y50FNE.AQ0009P1);
%let trans_rc = 0;
%let etls_stepStartTime = %sysfunc(datetime(), datetime20.); 

%let _INPUT_count = 0; 
%let _OUTPUT_count = 0; 


/*****************************************************************
* ВЕРСИЯ:
*   $Id: transform_job_start.sas 1747 2012-08-01 11:26:13Z nesterenok $
*
******************************************************************
* НАЗНАЧЕНИЕ:
*   Регистрирует начало модуля ETL.
*
* ПАРАМЕТРЫ:
*   нет
*
******************************************************************/

%macro transform_job_start;

   /* Продолжаем поток (или создаем новый) */
   %local lmvStreamName;
   %if %sysfunc(sysexist(LSB_JOBNAME)) %then
      %let lmvStreamName = %scan(%sysfunc(sysget(LSB_JOBNAME)), 3, :);
   %else
      %let lmvStreamName = ;

   %job_continue_reg(mpJobType=STREAM, mpJobName=&lmvStreamName, mpPostEvent=N, mpForcedStart=Y);

   /* Для DI, начинаем поток заново, если старый был начат не сегодня */
   %if %length(&lmvStreamName) eq 0 and &STREAM_START_DT ne %sysfunc(today()) %then %do;
      %job_start_reg(mpJobType=STREAM, mpParentJobId=, mpJobName=&lmvStreamName.);
   %end;

   /* Начинаем модуль */
   %job_start_reg(mpJobType=JOB, mpParentJobId=&STREAM_ID, mpJobName=&ETLS_JobName.);

%mend transform_job_start;

%transform_job_start;


%rcSet(&syserr); 
%rcSet(&sysrc); 
%rcSet(&sqlrc); 



/**  Step end Начать модуль **/

/*==========================================================================* 
 * Step:            Отбор первых и актуальных записей с   A5Y50FNE.AQ0009P2 * 
 *                   учетом ног                                             * 
 * Transform:       Splitter                                                * 
 * Description:                                                             * 
 *                                                                          * 
 * Source Table:    FINANCIAL_INSTRUMENT_IRS_BK -         A5Y50FNE.AE00013Y * 
 *                   work_ia.FINANCIAL_INSTRUMENT_IRS_BK                    * 
 * Target Tables:   first1 recs - work.W1B87YYR           A5Y50FNE.AO0005EZ * 
 *                  first2 recs - work.W1B889DD           A5Y50FNE.AO0005F0 * 
 *                  actual1 recs - work.W1BAZY4C          A5Y50FNE.AO0005F1 * 
 *                  actual2 recs - work.W1BB1D6X          A5Y50FNE.AO0005F2 * 
 *==========================================================================*/ 

%let transformID = %quote(A5Y50FNE.AQ0009P2);
%let trans_rc = 0;
%let etls_stepStartTime = %sysfunc(datetime(), datetime20.); 

%let etls_recCheckExist = 0; 
%let etls_recnt = 0; 
%macro etls_recordCheck; 
   %let etls_recCheckExist = %eval(%sysfunc(exist(work_ia.FINANCIAL_INSTRUMENT_IRS_BK, DATA)) or 
         %sysfunc(exist(work_ia.FINANCIAL_INSTRUMENT_IRS_BK, VIEW))); 
   
   %if (&etls_recCheckExist) %then
   %do;
      %local etls_syntaxcheck; 
      %let etls_syntaxcheck = %sysfunc(getoption(syntaxcheck)); 
      /* Turn off syntaxcheck option to perform following steps  */ 
      options nosyntaxcheck;
      
      proc contents data = work_ia.FINANCIAL_INSTRUMENT_IRS_BK out = work.etls_contents(keep = nobs) noprint; 
      run; 
      
      data _null_; 
         set work.etls_contents (obs = 1); 
         call symput("etls_recnt", left(put(nobs,32.))); 
      run;
      
      proc datasets lib = work nolist nowarn memtype = (data view);
         delete etls_contents;
      quit;
      
      /* Reset syntaxcheck option to previous setting  */ 
      options &etls_syntaxcheck; 
   %end;
%mend etls_recordCheck;
%etls_recordCheck;

%let SYSLAST = %nrquote(work_ia.FINANCIAL_INSTRUMENT_IRS_BK); 

proc datasets lib=work nolist nowarn memtype = (data view);
   delete W1B87YYR;
   delete W1B889DD;
   delete W1BAZY4C;
   delete W1BB1D6X;
quit;

data 
     work.W1B87YYR
     work.W1B889DD
     work.W1BAZY4C
     work.W1BB1D6X;
   set &SYSLAST;
   if FSRT=1 and LEGN=1 then 
      output work.W1B87YYR;
   if FSRT=1 and LEGN=2 then 
      output work.W1B889DD;
   if VALID_TO_DTTM = &ETL_SCD_FUTURE_DTTM and LEGN=1 then 
      output work.W1BAZY4C;
   if VALID_TO_DTTM = &ETL_SCD_FUTURE_DTTM and LEGN=2 then 
      output work.W1BB1D6X;
run;

%rcSet(&syserr); 

/*---- Map the columns  ----*/ 
proc datasets lib = work nolist nowarn memtype = (data view);
   delete etls_mapped;
quit;

%put %str(NOTE: Mapping columns ...);
proc sql;
   create table work.etls_mapped as
      select
         VALID_FROM_DTTM,
         FINANCIAL_INSTRUMENT_ID,
         IRB_SRC_ACCOUNT_ID,
         DDAT,
         IRB_DUMMY_TYPE_CD
   from work.W1B87YYR
   ;
quit;

%let SYSLAST = work.etls_mapped;

data work.W1B87YYR;
  set work.etls_mapped;
run;

proc datasets lib = work nolist nowarn memtype = (data view);
   delete etls_mapped;
quit;

%rcSet(&syscc); 

/*---- Map the columns  ----*/ 
proc datasets lib = work nolist nowarn memtype = (data view);
   delete etls_mapped;
quit;

%put %str(NOTE: Mapping columns ...);
proc sql;
   create table work.etls_mapped as
      select
         VALID_FROM_DTTM,
         FINANCIAL_INSTRUMENT_ID,
         IRB_SRC_ACCOUNT_ID,
         DDAT,
         IRB_DUMMY_TYPE_CD
   from work.W1B889DD
   ;
quit;

%let SYSLAST = work.etls_mapped;

data work.W1B889DD;
  set work.etls_mapped;
run;

proc datasets lib = work nolist nowarn memtype = (data view);
   delete etls_mapped;
quit;

%rcSet(&syscc); 

/*---- Map the columns  ----*/ 
proc datasets lib = work nolist nowarn memtype = (data view);
   delete etls_mapped;
quit;

%put %str(NOTE: Mapping columns ...);
proc sql;
   create table work.etls_mapped as
      select
         FINANCIAL_INSTRUMENT_ID,
         IRB_INSTR_STATUS_CD,
         IRB_SRC_ACCOUNT_ID,
         KONDOR_A,
         ARM302P_ID,
         FXMM_ID,
         LNKDN as LNKDN1,
         BRCA,
         FINANCIAL_INSTRUMENT_TYPE_CD,
         CURRENCY_CD,
         CNUM,
         MATURITY_DT,
         MDAT as MDAT1,
         IRB_DUMMY_TYPE_CD,
         LCD as LCD1,
         DDAT as DDAT1
   from work.W1BAZY4C
   ;
quit;

%let SYSLAST = work.etls_mapped;

data work.W1BAZY4C;
  set work.etls_mapped;
run;

proc datasets lib = work nolist nowarn memtype = (data view);
   delete etls_mapped;
quit;

%rcSet(&syscc); 

/*---- Map the columns  ----*/ 
proc datasets lib = work nolist nowarn memtype = (data view);
   delete etls_mapped;
quit;

%put %str(NOTE: Mapping columns ...);
proc sql;
   create table work.etls_mapped as
      select
         FINANCIAL_INSTRUMENT_ID,
         IRB_INSTR_STATUS_CD,
         IRB_SRC_ACCOUNT_ID,
         KONDOR_A,
         ARM302P_ID,
         FXMM_ID,
         LNKDN as LNKDN2,
         BRCA,
         FINANCIAL_INSTRUMENT_TYPE_CD,
         CURRENCY_CD,
         CNUM,
         MDAT as MDAT2,
         IRB_DUMMY_TYPE_CD,
         LCD as LCD2,
         DDAT as DDAT2
   from work.W1BB1D6X
   ;
quit;

%let SYSLAST = work.etls_mapped;

data work.W1BB1D6X;
  set work.etls_mapped;
run;

proc datasets lib = work nolist nowarn memtype = (data view);
   delete etls_mapped;
quit;

%rcSet(&syscc); 



/**  Step end Отбор первых и актуальных записей с учетом ног **/

/*==========================================================================* 
 * Step:            Вяжем первые записи ног в одну запись A5Y50FNE.AQ0009P3 * 
 * Transform:       Join                                                    * 
 * Description:                                                             * 
 *                                                                          * 
 * Source Tables:   first1 recs - work.W1B87YYR           A5Y50FNE.AO0005EZ * 
 *                  first2 recs - work.W1B889DD           A5Y50FNE.AO0005F0 * 
 * Target Table:    first recs - work.W17GRCZV            A5Y50FNE.AO0005F3 * 
 *==========================================================================*/ 

%let transformID = %quote(A5Y50FNE.AQ0009P3);
%let trans_rc = 0;
%let etls_stepStartTime = %sysfunc(datetime(), datetime20.); 

%let etls_recCheckExist = 0; 
%let etls_recnt = 0; 
%macro etls_recordCheck; 
   %let etls_recCheckExist = %eval(%sysfunc(exist(work.W1B87YYR, DATA)) or 
         %sysfunc(exist(work.W1B87YYR, VIEW))); 
   
   %if (&etls_recCheckExist) %then
   %do;
      %local etls_syntaxcheck; 
      %let etls_syntaxcheck = %sysfunc(getoption(syntaxcheck)); 
      /* Turn off syntaxcheck option to perform following steps  */ 
      options nosyntaxcheck;
      
      proc contents data = work.W1B87YYR out = work.etls_contents(keep = nobs) noprint; 
      run; 
      
      data _null_; 
         set work.etls_contents (obs = 1); 
         call symput("etls_recnt", left(put(nobs,32.))); 
      run;
      
      proc datasets lib = work nolist nowarn memtype = (data view);
         delete etls_contents;
      quit;
      
      /* Reset syntaxcheck option to previous setting  */ 
      options &etls_syntaxcheck; 
   %end;
%mend etls_recordCheck;
%etls_recordCheck;

%let SYS_SQL_IP_SPEEDO = Y;
%let SYS_SQL_MAPPUTTO = sas_put;
%let SYS_SQLREDUCEPUT = DBMS;
%global etls_sql_pushDown;
%let etls_sql_pushDown = -1;
option DBIDIRECTEXEC;

proc datasets lib = work nolist nowarn memtype = (data view);
   delete W17GRCZV;
quit;

proc sql;
   create view work.W17GRCZV as
   select
      coalesce(W1B87YYR.VALID_FROM_DTTM , W1B889DD.VALID_FROM_DTTM) as VALID_FROM_DTTM length = 8   
         format = DATETIME20.
         informat = DATETIME20.
         label = 'VALID_FROM_DTTM',
      coalesce(W1B87YYR.FINANCIAL_INSTRUMENT_ID, W1B889DD.FINANCIAL_INSTRUMENT_ID) as FINANCIAL_INSTRUMENT_ID length = 32   
         format = $32.
         informat = $32.
         label = 'FINANCIAL_INSTRUMENT_ID',
      coalesce(W1B87YYR.IRB_SRC_ACCOUNT_ID, W1B889DD.IRB_SRC_ACCOUNT_ID) as IRB_SRC_ACCOUNT_ID length = 32   
         format = $32.
         informat = $32.
         label = 'IRB_SRC_ACCOUNT_ID',
      coalesce(W1B87YYR.DDAT, W1B889DD.DDAT) as DDAT length = 8   
         format = DATETIME20.
         informat = DATETIME20.
         label = 'DDAT',
      W1B87YYR.IRB_DUMMY_TYPE_CD length = 3   
         format = $3.
         informat = $3.
         label = 'IRB_DUMMY_TYPE_CD'
   from
      work.W1B87YYR full join 
      work.W1B889DD
         on
         (
            W1B87YYR.IRB_SRC_ACCOUNT_ID = W1B889DD.IRB_SRC_ACCOUNT_ID
         )
   ;
quit;

%global etls_sql_pushDown;
%let etls_sql_pushDown = &sys_sql_ip_all;

%rcSet(&sqlrc); 



/**  Step end Вяжем первые записи ног в одну запись **/

/*==========================================================================* 
 * Step:            Вяжем актуальные записи ног в одну    A5Y50FNE.AQ0009P4 * 
 *                   запись                                                 * 
 * Transform:       Join                                                    * 
 * Description:                                                             * 
 *                                                                          * 
 * Source Tables:   actual1 recs - work.W1BAZY4C          A5Y50FNE.AO0005F1 * 
 *                  actual2 recs - work.W1BB1D6X          A5Y50FNE.AO0005F2 * 
 * Target Table:    actual recs - work.W1AL1VEQ           A5Y50FNE.AO0005F4 * 
 *==========================================================================*/ 

%let transformID = %quote(A5Y50FNE.AQ0009P4);
%let trans_rc = 0;
%let etls_stepStartTime = %sysfunc(datetime(), datetime20.); 

%let etls_recCheckExist = 0; 
%let etls_recnt = 0; 
%macro etls_recordCheck; 
   %let etls_recCheckExist = %eval(%sysfunc(exist(work.W1BAZY4C, DATA)) or 
         %sysfunc(exist(work.W1BAZY4C, VIEW))); 
   
   %if (&etls_recCheckExist) %then
   %do;
      %local etls_syntaxcheck; 
      %let etls_syntaxcheck = %sysfunc(getoption(syntaxcheck)); 
      /* Turn off syntaxcheck option to perform following steps  */ 
      options nosyntaxcheck;
      
      proc contents data = work.W1BAZY4C out = work.etls_contents(keep = nobs) noprint; 
      run; 
      
      data _null_; 
         set work.etls_contents (obs = 1); 
         call symput("etls_recnt", left(put(nobs,32.))); 
      run;
      
      proc datasets lib = work nolist nowarn memtype = (data view);
         delete etls_contents;
      quit;
      
      /* Reset syntaxcheck option to previous setting  */ 
      options &etls_syntaxcheck; 
   %end;
%mend etls_recordCheck;
%etls_recordCheck;

%let SYS_SQL_IP_SPEEDO = Y;
%let SYS_SQL_MAPPUTTO = sas_put;
%let SYS_SQLREDUCEPUT = DBMS;
%global etls_sql_pushDown;
%let etls_sql_pushDown = -1;
option DBIDIRECTEXEC;

proc datasets lib = work nolist nowarn memtype = (data view);
   delete W1AL1VEQ;
quit;

proc sql;
   create view work.W1AL1VEQ as
   select
      coalesce(W1BAZY4C.FINANCIAL_INSTRUMENT_ID, W1BB1D6X.FINANCIAL_INSTRUMENT_ID) as FINANCIAL_INSTRUMENT_ID length = 32   
         format = $32.
         informat = $32.
         label = 'FINANCIAL_INSTRUMENT_ID',
      W1BAZY4C.IRB_INSTR_STATUS_CD as IRB_INSTR_STATUS_CD1 length = 3   
         format = $3.
         informat = $3.
         label = 'IRB_INSTR_STATUS_CD',
      coalesce(W1BAZY4C.IRB_SRC_ACCOUNT_ID, W1BB1D6X.IRB_SRC_ACCOUNT_ID) as IRB_SRC_ACCOUNT_ID length = 32   
         format = $32.
         informat = $32.
         label = 'IRB_SRC_ACCOUNT_ID',
      coalesce(W1BAZY4C.ARM302P_ID, W1BB1D6X.ARM302P_ID) as ARM302P_ID length = 8   
         format = 11.
         informat = 11.
         label = 'ARM302P_ID',
      coalesce(W1BAZY4C.FXMM_ID, W1BB1D6X.FXMM_ID) as FXMM_ID length = 8   
         format = 11.
         informat = 11.
         label = 'FXMM_ID',
      coalesce(W1BAZY4C.BRCA, W1BB1D6X.BRCA) as BRCA length = 3   
         format = $3.
         informat = $3.
         label = 'BRCA',
      W1BB1D6X.IRB_INSTR_STATUS_CD as IRB_INSTR_STATUS_CD2 length = 3   
         format = $3.
         informat = $3.
         label = 'IRB_INSTR_STATUS_CD',
      coalesce(W1BB1D6X.LNKDN2, W1BAZY4C.LNKDN1) as LNKDN length = 8   
         format = 7.
         informat = 7.
         label = 'LNKDN',
      coalesce(W1BAZY4C.FINANCIAL_INSTRUMENT_TYPE_CD, W1BB1D6X.FINANCIAL_INSTRUMENT_TYPE_CD) as FINANCIAL_INSTRUMENT_TYPE_CD length = 3   
         format = $3.
         informat = $3.
         label = 'FINANCIAL_INSTRUMENT_TYPE_CD',
      coalesce(W1BAZY4C.KONDOR_A, W1BB1D6X.KONDOR_A) as KONDOR_A length = 8   
         format = 11.
         informat = 11.
         label = 'KONDOR_A',
      coalesce(W1BAZY4C.CURRENCY_CD, W1BB1D6X.CURRENCY_CD) as CURRENCY_CD length = 3   
         format = $3.
         informat = $3.
         label = 'CURRENCY_CD',
      coalesce(W1BAZY4C.CNUM, W1BB1D6X.CNUM) as CNUM length = 8   
         format = 7.
         informat = 7.
         label = 'CNUM',
      coalesce(W1BB1D6X.MDAT2, W1BAZY4C.MDAT1) as MDAT length = 8   
         format = DATETIME20.
         informat = DATETIME20.
         label = 'MDAT',
      coalesce(W1BB1D6X.LCD2, W1BAZY4C.LCD1) as LCD length = 8   
         format = 6.
         informat = 6.
         label = 'LCD',
      coalesce(W1BB1D6X.DDAT2, W1BAZY4C.DDAT1) as DDAT length = 8   
         format = DATETIME20.
         informat = DATETIME20.
         label = 'DDAT'
   from
      work.W1BAZY4C full join 
      work.W1BB1D6X
         on
         (
            W1BAZY4C.IRB_SRC_ACCOUNT_ID = W1BB1D6X.IRB_SRC_ACCOUNT_ID
         )
   ;
quit;

%global etls_sql_pushDown;
%let etls_sql_pushDown = &sys_sql_ip_all;

%rcSet(&sqlrc); 



/**  Step end Вяжем актуальные записи ног в одну запись **/

/*==========================================================================* 
 * Step:            Собираем данные по сделке             A5Y50FNE.AQ0009P5 * 
 * Transform:       Join                                                    * 
 * Description:                                                             * 
 *                                                                          * 
 * Source Tables:   first recs - work.W17GRCZV            A5Y50FNE.AO0005F3 * 
 *                  actual recs - work.W1AL1VEQ           A5Y50FNE.AO0005F4 * 
 * Target Table:    SQL Join - work.W1B4DNDN              A5Y50FNE.AO0005F5 * 
 *==========================================================================*/ 

%let transformID = %quote(A5Y50FNE.AQ0009P5);
%let trans_rc = 0;
%let etls_stepStartTime = %sysfunc(datetime(), datetime20.); 

%let etls_recnt = -1;
%let SYS_SQL_IP_SPEEDO = Y;
%let SYS_SQL_MAPPUTTO = sas_put;
%let SYS_SQLREDUCEPUT = DBMS;
%global etls_sql_pushDown;
%let etls_sql_pushDown = -1;
option DBIDIRECTEXEC;

proc datasets lib = work nolist nowarn memtype = (data view);
   delete W1B4DNDN;
quit;

proc sql;
   create view work.W1B4DNDN as
   select
      W17GRCZV.VALID_FROM_DTTM length = 8   
         format = DATETIME20.
         informat = DATETIME20.
         label = 'VALID_FROM_DTTM',
      W17GRCZV.IRB_SRC_ACCOUNT_ID length = 32   
         format = $32.
         informat = $32.
         label = 'IRB_SRC_ACCOUNT_ID',
      W1AL1VEQ.IRB_INSTR_STATUS_CD1 length = 3   
         format = $3.
         informat = $3.
         label = 'IRB_INSTR_STATUS_CD',
      W1AL1VEQ.DDAT length = 8   
         format = DATETIME20.
         informat = DATETIME20.
         label = 'DDAT',
      W1AL1VEQ.ARM302P_ID length = 8   
         format = 11.
         informat = 11.
         label = 'ARM302P_ID',
      W1AL1VEQ.FXMM_ID length = 8   
         format = 11.
         informat = 11.
         label = 'FXMM_ID',
      W1AL1VEQ.BRCA length = 3   
         format = $3.
         informat = $3.
         label = 'BRCA',
      W1AL1VEQ.IRB_INSTR_STATUS_CD2 length = 3   
         format = $3.
         informat = $3.
         label = 'IRB_INSTR_STATUS_CD',
      W1AL1VEQ.LNKDN length = 8   
         format = 7.
         informat = 7.
         label = 'LNKDN',
      W1AL1VEQ.FINANCIAL_INSTRUMENT_TYPE_CD length = 3   
         format = $3.
         informat = $3.
         label = 'FINANCIAL_INSTRUMENT_TYPE_CD',
      W1AL1VEQ.KONDOR_A length = 8   
         format = 11.
         informat = 11.
         label = 'KONDOR_A',
      W1AL1VEQ.CURRENCY_CD length = 3   
         format = $3.
         informat = $3.
         label = 'CURRENCY_CD',
      W1AL1VEQ.CNUM length = 8   
         format = 7.
         informat = 7.
         label = 'CNUM',
      W1AL1VEQ.MDAT length = 8   
         format = DATETIME20.
         informat = DATETIME20.
         label = 'MDAT',
      W17GRCZV.IRB_DUMMY_TYPE_CD length = 3   
         format = $3.
         informat = $3.
         label = 'IRB_DUMMY_TYPE_CD',
      W1AL1VEQ.LCD length = 8   
         format = 6.
         informat = 6.
         label = 'LCD'
   from
      work.W17GRCZV, 
      work.W1AL1VEQ
   where
      W17GRCZV.IRB_SRC_ACCOUNT_ID = W1AL1VEQ.IRB_SRC_ACCOUNT_ID
   ;
quit;

%global etls_sql_pushDown;
%let etls_sql_pushDown = &sys_sql_ip_all;

%rcSet(&sqlrc); 



/**  Step end Собираем данные по сделке **/

/*==========================================================================* 
 * Step:            Готовим Fin.Account                   A5Y50FNE.AQ0009P6 * 
 * Transform:       Extract                                                 * 
 * Description:                                                             * 
 *                                                                          * 
 * Source Table:    SQL Join - work.W1B4DNDN              A5Y50FNE.AO0005F5 * 
 * Target Table:    Extract - work.W1MOEVV1               A5Y50FNE.AO0005F6 * 
 *==========================================================================*/ 

%let transformID = %quote(A5Y50FNE.AQ0009P6);
%let trans_rc = 0;
%let etls_stepStartTime = %sysfunc(datetime(), datetime20.); 

%let etls_recnt = -1;
%let SYSLAST = %nrquote(work.W1B4DNDN); 

%let SYS_SQL_IP_SPEEDO = Y;
%let SYS_SQL_MAPPUTTO = sas_put;
%let SYS_SQLREDUCEPUT = DBMS;
%global etls_sql_pushDown;
%let etls_sql_pushDown = -1;
option DBIDIRECTEXEC;

/*---- Map the columns  ----*/ 
proc datasets lib = work nolist nowarn memtype = (data view);
   delete W1MOEVV1;
quit;

data _null_;
   put "NOTE: The following column(s) do not have a column mapping, so the"
        " value(s) will be set to missing: DAY_BASIS_CD,"
        " INTEREST_PAYMENT_TYPE_CD";
run;

%put %str(NOTE: Mapping columns ...);
proc sql;
   create view work.W1MOEVV1 as
      select
         VALID_FROM_DTTM,
         (&ETL_SCD_FUTURE_DTTM) as VALID_TO_DTTM length = 8
            format = DATETIME20.
            informat = DATETIME20.
            label = 'VALID_TO_DTTM',
         ('MID') as SOURCE_SYSTEM_CD length = 3
            format = $3.
            informat = $3.
            label = 'SOURCE_SYSTEM_CD',
         (ifc(missing(KONDOR_A), '', cats(KONDOR_A))) as ACCOUNT_REGISTRATION_NM length = 100
            format = $100.
            informat = $100.
            label = 'ACCOUNT_REGISTRATION_NM',
         (ifc(missing(ARM302P_ID), '', cats(FXMM_ID, '_', ARM302P_ID))) as ALTERNATE_ACCOUNT_NM length = 40
            format = $40.
            informat = $40.
            label = 'ALTERNATE_ACCOUNT_NM',
         ('DRV') as FINANCIAL_ACCOUNT_TYPE_CD length = 3
            format = $3.
            informat = $3.
            label = 'FINANCIAL_ACCOUNT_TYPE_CD',
         (cats(input(BRCA, 8.))) as EXT_BRANCH length = 3
            format = $3.
            informat = $3.
            label = 'BRCA',
         (ifc(IRB_INSTR_STATUS_CD1 = 'DUM' or IRB_INSTR_STATUS_CD2 = 'DUM', 'DUM', 
              ifc(IRB_INSTR_STATUS_CD1 = 'AUT' or IRB_INSTR_STATUS_CD2 = 'AUT', 'AUT', 
                ifc(IRB_INSTR_STATUS_CD1 = 'REV' or IRB_INSTR_STATUS_CD2 = 'REV', 'REV', 'MAT')))) as ACCOUNT_STATUS_CD length = 3
            format = $3.
            informat = $3.
            label = 'ACCOUNT_STATUS_CD',
         DDAT as OPEN_DT   
            label = 'OPEN_DT',
         (ifn( coalesce(MDAT, 0) <> 0, MDAT, 
              ifn( coalesce(LNKDN, 0) = 0, ., 
                dhms(input( substr(put(LNKDN, z6.), 1, 4) || '20' || substr(put(LNKDN, z6.), 5, 2), ddmmyy8.), 0, 0, 0) ))) as CLOSE_DT_MAT length = 8
            format = DATETIME20.
            informat = DATETIME20.
            label = 'CLOSE_DT',
         (ifn( coalesce(MDAT, 0) <> 0, min(MDAT, LCD), 
              ifn( coalesce(LNKDN, 0) = 0, LCD, 
                min( dhms(input( substr(put(LNKDN, z6.), 1, 4) || '20' || substr(put(LNKDN, z6.), 5, 2), ddmmyy8.), 0, 0, 0), LCD ) ))) as CLOSE_DT_REV length = 8
            format = DATETIME20.
            informat = DATETIME20.
            label = 'CLOSE_DT',
         CURRENCY_CD,
         "" as DAY_BASIS_CD length = 10
            format = $10.
            informat = $10.
            label = 'DAY_BASIS_CD',
         "" as INTEREST_PAYMENT_TYPE_CD length = 3
            format = $3.
            informat = $3.
            label = 'INTEREST_PAYMENT_TYPE_CD',
         IRB_SRC_ACCOUNT_ID,
         FINANCIAL_INSTRUMENT_TYPE_CD,
         (put(CNUM, z8.)) as CUSTOMER_NO length = 9
            format = $9.
            informat = $9.
            label = 'CNUM',
         BRCA,
         IRB_DUMMY_TYPE_CD
   from &SYSLAST
   ;
quit;

%let SYSLAST = work.W1MOEVV1;

%global etls_sql_pushDown;
%let etls_sql_pushDown = &sys_sql_ip_all;

%rcSet(&sqlrc); 



/**  Step end Готовим Fin.Account **/

/*==========================================================================* 
 * Step:            Генерация BK                          A5Y50FNE.AQ0009P7 * 
 * Transform:       Генерация BK                                            * 
 * Description:                                                             * 
 *                                                                          * 
 * Source Table:    Extract - work.W1MOEVV1               A5Y50FNE.AO0005F6 * 
 * Target Table:    Генерация BKtpOut - work.W1MHBF25     A5Y50FNE.AO0005F7 * 
 *==========================================================================*/ 

%let transformID = %quote(A5Y50FNE.AQ0009P7);
%let trans_rc = 0;
%let etls_stepStartTime = %sysfunc(datetime(), datetime20.); 

%let etls_recnt = -1;
%let SYSLAST = %nrquote(work.W1MOEVV1); 

%let _INPUT_count = 1; 
%let _INPUT = work.W1MOEVV1;
%let _INPUT_connect = ;
%let _INPUT_engine = ;
%let _INPUT_memtype = VIEW;
%let _INPUT_options = %nrquote();
%let _INPUT_alter = %nrquote();
%let _INPUT_path = %nrquote(/Extract_A5Y50FNE.AO0005F6%(WorkTable%));
%let _INPUT_type = 1;
%let _INPUT_label = %nrquote();

%let tpIn = work.W1MOEVV1;
%let tpIn_connect = ;
%let tpIn_engine = ;
%let tpIn_memtype = VIEW;
%let tpIn_options = %nrquote();
%let tpIn_alter = %nrquote();
%let tpIn_path = %nrquote(/Extract_A5Y50FNE.AO0005F6%(WorkTable%));
%let tpIn_type = 1;
%let tpIn_label = %nrquote();

%let _OUTPUT_count = 1; 
%let _OUTPUT = work.W1MHBF25;
%let _OUTPUT_connect = ;
%let _OUTPUT_engine = ;
%let _OUTPUT_memtype = DATA;
%let _OUTPUT_options = %nrquote();
%let _OUTPUT_alter = %nrquote();
%let _OUTPUT_path = %nrquote(/Генерация BKtpOut_A5Y50FNE.AO0005F7%(WorkTable%));
%let _OUTPUT_type = 1;
%let _OUTPUT_label = %nrquote();
/* List of target columns to keep  */ 
%let _OUTPUT_keep = DRV_ACCOUNT_ID VALID_FROM_DTTM VALID_TO_DTTM SOURCE_SYSTEM_CD 
        ACCOUNT_REGISTRATION_NM ALTERNATE_ACCOUNT_NM FINANCIAL_ACCOUNT_TYPE_CD 
        ACCOUNT_STATUS_CD OPEN_DT CLOSE_DT_MAT CLOSE_DT_REV CURRENCY_CD 
        DAY_BASIS_CD INTEREST_PAYMENT_TYPE_CD IRB_SRC_ACCOUNT_ID 
        FINANCIAL_INSTRUMENT_TYPE_CD MID_FINANCIAL_UNIT_ID_BRCA 
        FCC_COUNTERPARTY_ID BRCA IRB_DUMMY_TYPE_CD;

%let tpOut = work.W1MHBF25;
%let tpOut_connect = ;
%let tpOut_engine = ;
%let tpOut_memtype = DATA;
%let tpOut_options = %nrquote();
%let tpOut_alter = %nrquote();
%let tpOut_path = %nrquote(/Генерация BKtpOut_A5Y50FNE.AO0005F7%(WorkTable%));
%let tpOut_type = 1;
%let tpOut_label = %nrquote();
/* List of target columns to keep  */ 
%let tpOut_keep = DRV_ACCOUNT_ID VALID_FROM_DTTM VALID_TO_DTTM SOURCE_SYSTEM_CD 
        ACCOUNT_REGISTRATION_NM ALTERNATE_ACCOUNT_NM FINANCIAL_ACCOUNT_TYPE_CD 
        ACCOUNT_STATUS_CD OPEN_DT CLOSE_DT_MAT CLOSE_DT_REV CURRENCY_CD 
        DAY_BASIS_CD INTEREST_PAYMENT_TYPE_CD IRB_SRC_ACCOUNT_ID 
        FINANCIAL_INSTRUMENT_TYPE_CD MID_FINANCIAL_UNIT_ID_BRCA 
        FCC_COUNTERPARTY_ID BRCA IRB_DUMMY_TYPE_CD;


proc datasets lib=work nolist nowarn memtype = (data view);
   delete W1MHBF25;
quit;

%let tpBK = %nrquote(FINANCIAL_ACCOUNT_DRV           );
%let tpBK0 = %nrquote(3);
%let tpBK1 = %nrquote(FINANCIAL_ACCOUNT_DRV           );
%let tpBK2 = %nrquote(FINANCIAL_UNIT_MID_BRCA         );
%let tpBK3 = %nrquote(FCC_COUNTERPARTY_FCC            );
%let tpBK_count = %nrquote(3);
%let tpOptionalBK_count = %nrquote(0);
%let tpOptionalBK = ;

/* List of target columns to keep  */ 
%let _keep = DRV_ACCOUNT_ID VALID_FROM_DTTM VALID_TO_DTTM SOURCE_SYSTEM_CD 
        ACCOUNT_REGISTRATION_NM ALTERNATE_ACCOUNT_NM FINANCIAL_ACCOUNT_TYPE_CD 
        ACCOUNT_STATUS_CD OPEN_DT CLOSE_DT_MAT CLOSE_DT_REV CURRENCY_CD 
        DAY_BASIS_CD INTEREST_PAYMENT_TYPE_CD IRB_SRC_ACCOUNT_ID 
        FINANCIAL_INSTRUMENT_TYPE_CD MID_FINANCIAL_UNIT_ID_BRCA 
        FCC_COUNTERPARTY_ID BRCA IRB_DUMMY_TYPE_CD;
/* List of target columns to keep  */ 
%let keep = DRV_ACCOUNT_ID VALID_FROM_DTTM VALID_TO_DTTM SOURCE_SYSTEM_CD 
        ACCOUNT_REGISTRATION_NM ALTERNATE_ACCOUNT_NM FINANCIAL_ACCOUNT_TYPE_CD 
        ACCOUNT_STATUS_CD OPEN_DT CLOSE_DT_MAT CLOSE_DT_REV CURRENCY_CD 
        DAY_BASIS_CD INTEREST_PAYMENT_TYPE_CD IRB_SRC_ACCOUNT_ID 
        FINANCIAL_INSTRUMENT_TYPE_CD MID_FINANCIAL_UNIT_ID_BRCA 
        FCC_COUNTERPARTY_ID BRCA IRB_DUMMY_TYPE_CD;
/*****************************************************************
* ВЕРСИЯ:
*     $Id: transform_generate_bk.sas 4889 2013-04-04 09:14:07Z nesterenok $
*
******************************************************************
* НАЗНАЧЕНИЕ:
*     Генерирует бизнес-ключи в таблице по списку.
*
* ПАРАМЕТРЫ:
*     tpIn                    +  имя входного набора
*     tpBK                    +  список кодов обязательных для генерации бизнес-ключей, разделенный пробелами
*                                Такой бизнес-ключ станет дамми, если заполнены не все поля, его составляющие
*                                FK к ETL_SYS.ETL_BK.BK_CD
*     tpOptionalBK            +  список кодов НЕобязательных для генерации бизнес-ключей, разделенный пробелами
*                                Такой бизнес-ключ останется пустым, если заполнены не все поля, его составляющие
*     tpOut                   +  имя выходного набора
*
******************************************************************/

%macro transform_generate_bk;
   %let tpBK_count         = %unquote(&tpBK_count);
   %let tpOptionalBK_count = %unquote(&tpOptionalBK_count);

   %local lmvDummyRows lmvFieldDummyCount lmvDummyRequired;
   %let lmvDummyRows       = work.tr_gen_bk_dummy_rows;
   %let lmvFieldDummyCount = etl_dummy_count;
   %let lmvDummyRequired   = %eval (&tpBK_count gt 0);

   /* Макросы для генерации одного ключа */
   %macro sm_trans_gen_bk_required;
      %etl_generate_bk (
         mpFieldBK=&bk_field_nm, mpLengthBK=%sysfunc(inputn(&bk_type_cd, bkt_cd_len.)),
         mpColumnList=&bk_column_list_txt, mpFormat=&bk_format_txt,
         mpFieldDummy=&lmvFieldDummy, mpFieldDummyCount=&lmvFieldDummyCount
      );
   %mend;
   %macro sm_trans_gen_bk_optional;
      %etl_generate_bk (
         mpFieldBK=&bk_field_nm, mpLengthBK=%sysfunc(inputn(&bk_type_cd, bkt_cd_len.)),
         mpColumnList=&bk_column_list_txt, mpFormat=&bk_format_txt,
         mpFieldDummy=
      );
   %mend;

   /* Макрос для подстановки в дамми-ключ уникального номера */
   %macro sm_trans_gen_bk_dummy;
      if &lmvFieldDummy gt 0 then do;
         set &lmvDummyIds (keep=OBJECT_ID rename=(OBJECT_ID=&lmvFieldDummy._no)) point=&lmvFieldDummy;
         &bk_field_nm = cats (&bk_field_nm, "_", &lmvFieldDummy._no);

         %error_check;
      end;
   %mend;


   /* Создаем выходной набор итерацией по всем заявленным бизнес-ключам */
   /* Считаем необходимое кол-во дамми-ключей */
   %local lmvBkIndex lmvFieldDummy lmvDummyCount;
   %let lmvDummyCount   = 0;
   data
      %if &lmvDummyRequired %then %do;
         &tpOut (drop= etl_dummy_:)
         &lmvDummyRows
      %end;
      %else %do;
         &tpOut
      %end;
   ;
      set &tpIn end=ds_end;

      /* Генерация необязательных ключей */
      %do lmvBkIndex=1 %to &tpOptionalBK_count;
         %util_loop_data (mpLoopMacro=sm_trans_gen_bk_optional, mpData=ETL_SYS.ETL_BK,
                          mpWhere=BK_CD eq %util_quote(&&tpOptionalBK&lmvBkIndex)
         );
      %end;

      %if &lmvDummyRequired %then %do;
         length &lmvFieldDummyCount 8;
         drop &lmvFieldDummyCount;
         retain &lmvFieldDummyCount 0;

         /* Генерация обязательных ключей */
         %do lmvBkIndex=1 %to &tpBK_count;
            %let lmvFieldDummy = etl_dummy_&lmvBkIndex.;

            %util_loop_data (mpLoopMacro=sm_trans_gen_bk_required, mpData=ETL_SYS.ETL_BK,
                             mpWhere=BK_CD eq %util_quote(&&tpBK&lmvBkIndex)
            );
         %end;

         /* Если в какой-то записи есть дамми, то не выводим ее сразу */
         if sum (of etl_dummy_1-etl_dummy_&tpBK_count) = 0 then
            output &tpOut;
         else do;
            output &lmvDummyRows;
         end;

         if ds_end then call symputx ("lmvDummyCount", &lmvFieldDummyCount);
      %end;
      %else %do;
         output &tpOut;
      %end;
   run;
   %error_check (mpStepType=DATA);

   /* Если дамми нет, то всё */
   %if (not &lmvDummyRequired) or (&lmvDummyCount eq 0) %then %return;


   /* Для каждого дамми генерируем уникальный номер */
   %local lmvDummyIds;
   %let lmvDummyIds = work.tr_gen_bk_dummy_ids;
   %unique_ids (mpIdCount=&lmvDummyCount, mpOut=&lmvDummyIds, mpSequenceName=ETL_DUMMY_SEQ);

   /* Добавляем номер к дамми */
   data &lmvDummyRows._id (drop= etl_dummy_:);
      set &lmvDummyRows;

      %do lmvBkIndex=1 %to &tpBK_count;
         %let lmvFieldDummy = etl_dummy_&lmvBkIndex.;

         %util_loop_data (mpLoopMacro=sm_trans_gen_bk_dummy, mpData=ETL_SYS.ETL_BK,
                          mpWhere=BK_CD eq %util_quote(&&tpBK&lmvBkIndex)
         );
      %end;
   run;
   %error_check (mpStepType=DATA);


   /* Добавляем дамми-строки к выходному набору */
   proc append base=&tpOut data=&lmvDummyRows._id;
   run;
   %error_check (mpStepType=DATA);

%mend transform_generate_bk;

%transform_generate_bk;

%rcSet(&syserr); 
%rcSet(&sysrc); 
%rcSet(&sqlrc); 



/**  Step end Генерация BK **/

/*==========================================================================* 
 * Step:            Table Loader                          A5Y50FNE.AQ0009P8 * 
 * Transform:       Table Loader (Version 2.1)                              * 
 * Description:                                                             * 
 *                                                                          * 
 * Source Table:    Генерация BKtpOut - work.W1MHBF25     A5Y50FNE.AO0005F7 * 
 * Target Table:    CUSTOMER_X_FIN_ACC_IRS_BK -           A5Y50FNE.AE00011S * 
 *                   work_ia.CUSTOMER_X_FIN_ACC_IRS_BK                      * 
 *==========================================================================*/ 

%let transformID = %quote(A5Y50FNE.AQ0009P8);
%let trans_rc = 0;
%let etls_stepStartTime = %sysfunc(datetime(), datetime20.); 

%let SYSLAST = %nrquote(work.W1MHBF25); 

%let SYS_SQL_IP_SPEEDO = Y;
%let SYS_SQL_MAPPUTTO = sas_put;
%let SYS_SQLREDUCEPUT = DBMS;
%global etls_sql_pushDown;
%let etls_sql_pushDown = -1;
option DBIDIRECTEXEC;

%global etls_tableExist;
%global etls_numIndex;
%global etls_lastTable;
%let etls_tableExist = -1; 
%let etls_numIndex = -1; 
%let etls_lastTable = &SYSLAST; 

/*---- Define load data macro  ----*/ 

/* --------------------------------------------------------------
   Load Technique Selection: Replace - EntireTable
   Constraint and index action selections: 'INIT','ASIS','ASIS','ASIS'
   Additional options selections... 
      Set unmapped to missing on updates: false 
   -------------------------------------------------------------- */
%macro etls_loader;

   %let etls_tableOptions = ;
   
   /*---- Map the columns  ----*/ 
   proc datasets lib = work nolist nowarn memtype = (data view);
      delete WIRNQPV;
   quit;
   
   data _null_;
      put "NOTE: The following column(s) do not have a column mapping, so the"
           " value(s) will be set to missing: RELSHP_TO_PRIMARY_CD,"
           " EFFECTIVE_FROM_DTTM, EFFECTIVE_TO_DTTM";
   run;
   
   %put %str(NOTE: Mapping columns ...);
   proc sql;
      create view work.WIRNQPV as
         select
            FCC_COUNTERPARTY_ID as CUSTOMER_ID,
            DRV_ACCOUNT_ID as ACCOUNT_ID,
            VALID_FROM_DTTM,
            VALID_TO_DTTM,
            "" as RELSHP_TO_PRIMARY_CD length = 3
               format = $3.
               informat = $3.,
            ('DDC') as RELATIONSHIP_TO_ACCOUNT_CD length = 3
               format = $3.
               informat = $3.,
            . as EFFECTIVE_FROM_DTTM length = 8
               format = DATETIME20.
               informat = DATETIME20.,
            . as EFFECTIVE_TO_DTTM length = 8
               format = DATETIME20.
               informat = DATETIME20.
      from &etls_lastTable
      ;
   quit;
   
   %let SYSLAST = work.WIRNQPV;
   
   %let etls_lastTable = &SYSLAST; 
   %let etls_tableOptions = ; 
   
   /* Determine if the target table exists  */ 
   %let etls_tableExist = %eval(%sysfunc(exist(work_ia.CUSTOMER_X_FIN_ACC_IRS_BK, DATA)) or 
         %sysfunc(exist(work_ia.CUSTOMER_X_FIN_ACC_IRS_BK, VIEW))); 
   
   %if &etls_tableExist %then 
   %do;/* table exists  */ 
      %let etls_hasPreExistingConstraint=0; 
      
      proc datasets lib = work nolist nowarn memtype = (data view);
         delete etls_commands etls_commands_F;
      quit;
      
      %let etls_otherTablesReferToThisTable=0;
      
      %macro etls_CIContents(table=,workTableOut=,inDSOptions=);
         %put NOTE: Building table listing Constraints and Indexes for: &table;
         proc datasets lib=work nolist; delete &workTableOut; quit;
         proc contents data=&table&inDSOptions out2=&workTableOut noprint; run;
         
         data &workTableOut;
            length name $60 type $20 icown idxUnique idxNoMiss $3 recreate $600;
            set &workTableOut;
            type=upcase(type);
            if type eq 'REFERENTIAL' then
            do;
               put "WARNING%QUOTE(:) Target table is referenced by constraints in"
                    " another table: " ref;
               call symput('etls_otherTablesReferToThisTable','1');
               delete;
            end;
            if type='INDEX' and ICOwn eq 'YES' then delete;
         run;
         %rcSet(&syserr); 
         
      %mend etls_CIContents;
      
      %etls_CIContents(table=work_ia.CUSTOMER_X_FIN_ACC_IRS_BK, workTableOut=etls_commands, inDSOptions=);
      
      %if &etls_otherTablesReferToThisTable %then 
         %put WARNING%QUOTE(:) Replacing entire table will fail. Consider an alternate load technique or revising constraints.; 
      %else 
      %do; /* okay - remove foreign keys  */ 
      
         data etls_commands_F; 
            set etls_commands; 
            if upcase(type)="FOREIGN KEY" then 
            do; 
               command='ic delete '||trim(name)||';';
               output etls_commands_F; 
            end; 
         run; 
         
         %put %str(NOTE: Removing foreign keys before dropping table...);
         data _null_;
            set etls_commands_F;
            %rcSet(&syserr); 
            
      %end; /* okay - remove foreign keys  */ 
      
      proc datasets lib = work nolist nowarn memtype = (data view);
         delete etls_commands etls_commands_F;
      quit;
      
      /*---- Drop a table  ----*/ 
      %put %str(NOTE: Dropping table ...);
      proc datasets lib = work_ia nolist nowarn memtype = (data view);
         delete CUSTOMER_X_FIN_ACC_IRS_BK;
      quit;
      
      %rcSet(&syserr); 
      
      %let etls_tableExist = 0;
      
   %end; /* table exists  */ 
   
   /*---- Create a new table  ----*/ 
   %if (&etls_tableExist eq 0) %then 
   %do;  /* if table does not exist  */ 
   
      %put %str(NOTE: Creating table ...);
      
      data work_ia.CUSTOMER_X_FIN_ACC_IRS_BK;
         attrib CUSTOMER_ID length = $32
            format = $32.
            informat = $32.
            label = 'CUSTOMER_ID'; 
         attrib ACCOUNT_ID length = $32
            format = $32.
            informat = $32.
            label = 'ACCOUNT_ID'; 
         attrib VALID_FROM_DTTM length = 8
            format = DATETIME20.
            informat = DATETIME20.
            label = 'VALID_FROM_DTTM'; 
         attrib VALID_TO_DTTM length = 8
            format = DATETIME20.
            informat = DATETIME20.
            label = 'VALID_TO_DTTM'; 
         attrib RELSHP_TO_PRIMARY_CD length = $3
            format = $3.
            informat = $3.
            label = 'RELSHP_TO_PRIMARY_CD'; 
         attrib RELATIONSHIP_TO_ACCOUNT_CD length = $3
            format = $3.
            informat = $3.
            label = 'RELATIONSHIP_TO_ACCOUNT_CD'; 
         attrib EFFECTIVE_FROM_DTTM length = 8
            format = DATETIME20.
            informat = DATETIME20.
            label = 'EFFECTIVE_FROM_DTTM'; 
         attrib EFFECTIVE_TO_DTTM length = 8
            format = DATETIME20.
            informat = DATETIME20.
            label = 'EFFECTIVE_TO_DTTM'; 
         call missing(of _all_);
         stop;
      run;
      
      %rcSet(&syserr); 
      
      /*---- Create the integrity constraints for a table  ----*/ 
      %put %str(NOTE: Creating integrity constraints ...);
      proc datasets library=work_ia nolist;
         modify CUSTOMER_X_FIN_ACC_IRS_BK;
            ic create not null (CUSTOMER_ID);
            ic create not null (ACCOUNT_ID);
            ic create not null (VALID_FROM_DTTM);
            ic create not null (VALID_TO_DTTM);
            ic create not null (RELATIONSHIP_TO_ACCOUNT_CD);
            ic create Index1 = primary key (CUSTOMER_ID ACCOUNT_ID VALID_FROM_DTTM 
                           RELATIONSHIP_TO_ACCOUNT_CD);
      quit;
      
      %rcSet(&syserr); 
      
   %end;  /* if table does not exist  */ 
   
   /*---- Append  ----*/ 
   %put %str(NOTE: Appending data ...);
   
   proc append base = work_ia.CUSTOMER_X_FIN_ACC_IRS_BK 
      data = &etls_lastTable (&etls_tableOptions)  force ; 
    run; 
   
   %rcSet(&syserr); 
   
   proc datasets lib = work nolist nowarn memtype = (data view);
      delete WIRNQPV;
   quit;
   
%mend etls_loader;
%etls_loader;

%let etls_recCheckExist = 0; 
%let etls_recnt = 0; 
%macro etls_recordCheck; 
   %let etls_recCheckExist = %eval(%sysfunc(exist(work_ia.CUSTOMER_X_FIN_ACC_IRS_BK, DATA)) or 
         %sysfunc(exist(work_ia.CUSTOMER_X_FIN_ACC_IRS_BK, VIEW))); 
   
   %if (&etls_recCheckExist) %then
   %do;
      %local etls_syntaxcheck; 
      %let etls_syntaxcheck = %sysfunc(getoption(syntaxcheck)); 
      /* Turn off syntaxcheck option to perform following steps  */ 
      options nosyntaxcheck;
      
      proc contents data = work_ia.CUSTOMER_X_FIN_ACC_IRS_BK out = work.etls_contents(keep = nobs) noprint; 
      run; 
      
      data _null_; 
         set work.etls_contents (obs = 1); 
         call symput("etls_recnt", left(put(nobs,32.))); 
      run;
      
      proc datasets lib = work nolist nowarn memtype = (data view);
         delete etls_contents;
      quit;
      
      /* Reset syntaxcheck option to previous setting  */ 
      options &etls_syntaxcheck; 
   %end;
%mend etls_recordCheck;
%etls_recordCheck;



/**  Step end Table Loader **/

/*==========================================================================* 
 * Step:            Вяжем актуальные записи ног со        A5Y50FNE.AQ0009P9 * 
 *                   сделкой                                                * 
 * Transform:       Join                                                    * 
 * Description:                                                             * 
 *                                                                          * 
 * Source Tables:   actual1 recs - work.W1BAZY4C          A5Y50FNE.AO0005F1 * 
 *                  Генерация BKtpOut - work.W1MHBF25     A5Y50FNE.AO0005F7 * 
 * Target Table:    SQL Join - work.WFBG6LA               A5Y50FNE.AO0005F8 * 
 *==========================================================================*/ 

%let transformID = %quote(A5Y50FNE.AQ0009P9);
%let trans_rc = 0;
%let etls_stepStartTime = %sysfunc(datetime(), datetime20.); 

%let etls_recCheckExist = 0; 
%let etls_recnt = 0; 
%macro etls_recordCheck; 
   %let etls_recCheckExist = %eval(%sysfunc(exist(work.W1BAZY4C, DATA)) or 
         %sysfunc(exist(work.W1BAZY4C, VIEW))); 
   
   %if (&etls_recCheckExist) %then
   %do;
      %local etls_syntaxcheck; 
      %let etls_syntaxcheck = %sysfunc(getoption(syntaxcheck)); 
      /* Turn off syntaxcheck option to perform following steps  */ 
      options nosyntaxcheck;
      
      proc contents data = work.W1BAZY4C out = work.etls_contents(keep = nobs) noprint; 
      run; 
      
      data _null_; 
         set work.etls_contents (obs = 1); 
         call symput("etls_recnt", left(put(nobs,32.))); 
      run;
      
      proc datasets lib = work nolist nowarn memtype = (data view);
         delete etls_contents;
      quit;
      
      /* Reset syntaxcheck option to previous setting  */ 
      options &etls_syntaxcheck; 
   %end;
%mend etls_recordCheck;
%etls_recordCheck;

%let SYS_SQL_IP_SPEEDO = Y;
%let SYS_SQL_MAPPUTTO = sas_put;
%let SYS_SQLREDUCEPUT = DBMS;
%global etls_sql_pushDown;
%let etls_sql_pushDown = -1;
option DBIDIRECTEXEC;

proc datasets lib = work nolist nowarn memtype = (data view);
   delete WFBG6LA;
quit;

proc sql;
   create view work.WFBG6LA as
   select
      W1BAZY4C.FINANCIAL_INSTRUMENT_ID length = 32   
         format = $32.
         informat = $32.
         label = 'FINANCIAL_INSTRUMENT_ID',
      W1MHBF25.DRV_ACCOUNT_ID length = 32   
         format = $32.
         informat = $32.
         label = 'ACCOUNT_ID',
      W1MHBF25.VALID_FROM_DTTM length = 8   
         format = DATETIME20.
         informat = DATETIME20.
         label = 'VALID_FROM_DTTM',
      W1MHBF25.VALID_TO_DTTM length = 8   
         format = DATETIME20.
         informat = DATETIME20.
         label = 'VALID_TO_DTTM',
      W1MHBF25.IRB_DUMMY_TYPE_CD length = 3   
         format = $3.
         informat = $3.
         label = 'IRB_DUMMY_TYPE_CD'
   from
      work.W1BAZY4C inner join 
      work.W1MHBF25
         on
         (
            W1BAZY4C.IRB_SRC_ACCOUNT_ID = W1MHBF25.IRB_SRC_ACCOUNT_ID
         )
   ;
quit;

%global etls_sql_pushDown;
%let etls_sql_pushDown = &sys_sql_ip_all;

%rcSet(&sqlrc); 



/**  Step end Вяжем актуальные записи ног со сделкой **/

/*==========================================================================* 
 * Step:            Вяжем актуальные записи ног со        A5Y50FNE.AQ0009PA * 
 *                   сделкой                                                * 
 * Transform:       Join                                                    * 
 * Description:                                                             * 
 *                                                                          * 
 * Source Tables:   actual2 recs - work.W1BB1D6X          A5Y50FNE.AO0005F2 * 
 *                  Генерация BKtpOut - work.W1MHBF25     A5Y50FNE.AO0005F7 * 
 * Target Table:    SQL Join - work.WFBH9I3               A5Y50FNE.AO0005F9 * 
 *==========================================================================*/ 

%let transformID = %quote(A5Y50FNE.AQ0009PA);
%let trans_rc = 0;
%let etls_stepStartTime = %sysfunc(datetime(), datetime20.); 

%let etls_recCheckExist = 0; 
%let etls_recnt = 0; 
%macro etls_recordCheck; 
   %let etls_recCheckExist = %eval(%sysfunc(exist(work.W1BB1D6X, DATA)) or 
         %sysfunc(exist(work.W1BB1D6X, VIEW))); 
   
   %if (&etls_recCheckExist) %then
   %do;
      %local etls_syntaxcheck; 
      %let etls_syntaxcheck = %sysfunc(getoption(syntaxcheck)); 
      /* Turn off syntaxcheck option to perform following steps  */ 
      options nosyntaxcheck;
      
      proc contents data = work.W1BB1D6X out = work.etls_contents(keep = nobs) noprint; 
      run; 
      
      data _null_; 
         set work.etls_contents (obs = 1); 
         call symput("etls_recnt", left(put(nobs,32.))); 
      run;
      
      proc datasets lib = work nolist nowarn memtype = (data view);
         delete etls_contents;
      quit;
      
      /* Reset syntaxcheck option to previous setting  */ 
      options &etls_syntaxcheck; 
   %end;
%mend etls_recordCheck;
%etls_recordCheck;

%let SYS_SQL_IP_SPEEDO = Y;
%let SYS_SQL_MAPPUTTO = sas_put;
%let SYS_SQLREDUCEPUT = DBMS;
%global etls_sql_pushDown;
%let etls_sql_pushDown = -1;
option DBIDIRECTEXEC;

proc datasets lib = work nolist nowarn memtype = (data view);
   delete WFBH9I3;
quit;

data _null_;
   put "NOTE: The following column(s) do not have a column mapping, so the"
        " value(s) will be set to missing: IRB_DUMMY_TYPE_CD";
run;

proc sql;
   create view work.WFBH9I3 as
   select
      W1BB1D6X.FINANCIAL_INSTRUMENT_ID length = 32   
         format = $32.
         informat = $32.
         label = 'FINANCIAL_INSTRUMENT_ID',
      W1MHBF25.DRV_ACCOUNT_ID length = 32   
         format = $32.
         informat = $32.
         label = 'ACCOUNT_ID',
      W1MHBF25.VALID_FROM_DTTM length = 8   
         format = DATETIME20.
         informat = DATETIME20.
         label = 'VALID_FROM_DTTM',
      W1MHBF25.VALID_TO_DTTM length = 8   
         format = DATETIME20.
         informat = DATETIME20.
         label = 'VALID_TO_DTTM',
      "" as IRB_DUMMY_TYPE_CD length = 3   
         format = $3.
         informat = $3.
         label = 'IRB_DUMMY_TYPE_CD'
   from
      work.W1BB1D6X inner join 
      work.W1MHBF25
         on
         (
            W1BB1D6X.IRB_SRC_ACCOUNT_ID = W1MHBF25.IRB_SRC_ACCOUNT_ID
         )
   ;
quit;

%global etls_sql_pushDown;
%let etls_sql_pushDown = &sys_sql_ip_all;

%rcSet(&sqlrc); 



/**  Step end Вяжем актуальные записи ног со сделкой **/

/*==========================================================================* 
 * Step:            Append                                A5Y50FNE.AQ0009PB * 
 * Transform:       Append                                                  * 
 * Description:                                                             * 
 *                                                                          * 
 * Source Tables:   SQL Join - work.WFBG6LA               A5Y50FNE.AO0005F8 * 
 *                  SQL Join - work.WFBH9I3               A5Y50FNE.AO0005F9 * 
 * Target Table:    Append - work.WFD6IQ0                 A5Y50FNE.AO0005FA * 
 *==========================================================================*/ 

%let transformID = %quote(A5Y50FNE.AQ0009PB);
%let trans_rc = 0;
%let etls_stepStartTime = %sysfunc(datetime(), datetime20.); 

%let etls_recnt = -1;
%let dbxrc = %eval(%sysfunc(exist(work.WFBG6LA, DATA)) or 
      %sysfunc(exist(work.WFBG6LA, VIEW))); 

/*---- Map the columns  ----*/ 
proc datasets lib = work nolist nowarn memtype = (data view);
   delete WIRNQTN;
quit;

%put %str(NOTE: Mapping columns ...);
proc sql;
   create view work.WIRNQTN as
      select
         VALID_FROM_DTTM,
         VALID_TO_DTTM,
         FINANCIAL_INSTRUMENT_ID,
         DRV_ACCOUNT_ID as REFERENCE_ACCOUNT_ID   
            label = 'FINANCIAL_ACCOUNT_ID'
   from work.WFBG6LA
   ;
quit;

%let SYSLAST = work.WIRNQTN;

%let dbxrc = %eval(%sysfunc(exist(work.WFBH9I3, DATA)) or 
      %sysfunc(exist(work.WFBH9I3, VIEW))); 

/*---- Map the columns  ----*/ 
proc datasets lib = work nolist nowarn memtype = (data view);
   delete WIRNQTT;
quit;

%put %str(NOTE: Mapping columns ...);
proc sql;
   create view work.WIRNQTT as
      select
         VALID_FROM_DTTM,
         VALID_TO_DTTM,
         FINANCIAL_INSTRUMENT_ID,
         DRV_ACCOUNT_ID as REFERENCE_ACCOUNT_ID   
            label = 'FINANCIAL_ACCOUNT_ID',
         IRB_DUMMY_TYPE_CD
   from work.WFBH9I3
   ;
quit;

%let SYSLAST = work.WIRNQTT;

proc datasets lib = work nolist nowarn memtype = (data view);
   delete WFD6IQ0;
quit;

data work.WFD6IQ0 / view=work.WFD6IQ0;
   set work.WIRNQTN
       work.WIRNQTT;
   keep VALID_FROM_DTTM VALID_TO_DTTM FINANCIAL_INSTRUMENT_ID REFERENCE_ACCOUNT_ID 
    IRB_DUMMY_TYPE_CD; 
run;

%rcSet(&syserr); 



/**  Step end Append **/

/*==========================================================================* 
 * Step:            Table Loader                          A5Y50FNE.AQ0009PC * 
 * Transform:       Table Loader (Version 2.1)                              * 
 * Description:                                                             * 
 *                                                                          * 
 * Source Table:    Генерация BKtpOut - work.W1MHBF25     A5Y50FNE.AO0005F7 * 
 * Target Table:    FINANCIAL_ACCOUNT_IRS_BK -            A5Y50FNE.AE00012O * 
 *                   work_ia.FINANCIAL_ACCOUNT_IRS_BK                       * 
 *==========================================================================*/ 

%let transformID = %quote(A5Y50FNE.AQ0009PC);
%let trans_rc = 0;
%let etls_stepStartTime = %sysfunc(datetime(), datetime20.); 

%let SYSLAST = %nrquote(work.W1MHBF25); 

%let SYS_SQL_IP_SPEEDO = Y;
%let SYS_SQL_MAPPUTTO = sas_put;
%let SYS_SQLREDUCEPUT = DBMS;
%global etls_sql_pushDown;
%let etls_sql_pushDown = -1;
option DBIDIRECTEXEC;

%global etls_tableExist;
%global etls_numIndex;
%global etls_lastTable;
%let etls_tableExist = -1; 
%let etls_numIndex = -1; 
%let etls_lastTable = &SYSLAST; 

/*---- Define load data macro  ----*/ 

/* --------------------------------------------------------------
   Load Technique Selection: Replace - EntireTable
   Constraint and index action selections: 'INIT','ASIS','ASIS','ASIS'
   Additional options selections... 
      Set unmapped to missing on updates: false 
   -------------------------------------------------------------- */
%macro etls_loader;

   %let etls_tableOptions = ;
   
   /*---- Map the columns  ----*/ 
   proc datasets lib = work nolist nowarn memtype = (data view);
      delete WIRNQUR;
   quit;
   
   data _null_;
      put "NOTE: The following column(s) do not have a column mapping, so the"
           " value(s) will be set to missing: AUTO_DEBIT_ACCOUNT_TYPE_CD,"
           " ACCOUNT_REGISTRATION_TYPE_CD, CLOSE_REASON_CD,    ACCOUNT_TAX_ID,"
           " EXPECTED_LOSS_PCT, INDIVIDUAL_ORGANIZATION_CD, SOURCE_CD,   "
           " OPENING_CHANNEL_CD, PREFERRED_CHANNEL_CD, PRIMARY_PHONE_NO,   "
           " PRIMARY_PHONE_TYPE_CD, SECONDARY_PHONE_NO, SECONDARY_PHONE_TYPE_CD,"
           "    MAILABLE_FLG, TELEPHONABLE_FLG, EMAIL_FLG, SMS_FLG,"
           " DO_NOT_CONTACT_FLG,    EMPLOYEE_RK, CURRENCY_BASED_ACCOUNT_FLG,"
           " FEE_BASED_FLG, ANNUAL_FEES_AMT,    MONTHLY_FEES_AMT, CAMPAIGN_CD,"
           " COMMUNICATION_CD, REGISTERED_ONLINE_DT,    FIRST_LOGIN_DT,"
           " ONLINE_BILL_PAYMENT_FLG, ID_VERIFICATION_TYPE_CD,   "
           " PREVIOUS_ACCOUNT_ID, OPEN_BRANCH_FINANCIAL_UNIT_ID,   "
           " FINANCIAL_APPLICATION_ID, CREDIT_FACILITY_ID,"
           " FUTURE_MARGIN_INCOME_AMT,    IN_DEFAULT_FLG, FINANCIAL_BOOK_ID,"
           " IRRECOVERABLE_FLG,    OWNED_BY_INTERNAL_ORG_ID,"
           " PREVIOUS_BANK_EXTERNAL_ORG_ID, NETTING_SET_ID,    REVOLVING_FLG,"
           " SOURCE_CHANNEL_CD, GRACE_PERIOD_DAYS_CNT,    REMARGINING_DAYS_CNT,"
           " FINANCIAL_CALENDAR_ID, PORTFOLIO_ID,    SECURITIZATION_POOL_ID,"
           " RECEIVABLES_POOL_ID, ACCOUNT_USAGE_TYPE_CD,    RISK_ALARM_FLG,"
           " LOW_PROFITABILITY_FLG, ACCOUNT_LIFECYCLE_STG_CD,   "
           " ATTRITION_ALARM_FLG, BALANCE_FROZEN_FLG, BALANCE_FROZEN_DT,   "
           " ACCOUNT_BLOCK_REASON_CD, TAXATION_STATE_CD,"
           " EFFECTIVE_MATURITY_YEAR_NO,    GL_ACCOUNT_ID,"
           " FROM_OTHER_INSTITUTION_FLG, ACCOUNT_RENEWAL_CNT,   "
           " BALANCE_TRANSFER_DT, BALANCE_TRANSFER_AMT, BALANCE_TRANSFER_CNT,   "
           " BASE_LONG_TERM_APR_RT, BROKER_FLG, MULT_RATE_FLG,"
           " AUTO_DEBIT_ACCOUNT_NO,    WORST_STATUS_LAST_12_MTH_CD,"
           " WORST_STATUS_LAST_12_MTH_DT,    BALANCE_TRNSF_OTHER_ACCT_CNT,"
           " EFFECTIVE_FROM_DTTM, EFFECTIVE_TO_DTTM,    COUNTERPARTY_ID,"
           " INSURED_BY_COUNTERPARTY_ID, STATEMENT_FREQUENCY_CD,   "
           " SECURITY_DEPOSIT_AMT, SECURITY_DEPOSIT_REFUND_AMT,"
           " FIRST_PAYMENT_DT,    LAST_PAYMENT_DT, FIRST_RESET_DT,"
           " LAST_RESET_DT, RESETS_PER_ANNUM_NO,    PRINCIPAL_PAYMENT_TYPE_CD,"
           " PRINCIPAL_PAYMENT_AMT, RATE_POLICY_ID, SPREAD_RT,   "
           " DISCOUNT_SPREAD_RT, INITIAL_CONTRACT_RT,"
           " FIXED_MONTHLY_PREPAYMENT_RT,    CAPITAL_ALLOCATION_ID,"
           " CAPITAL_COST_ID, SEGMENT_ID,    NEAR_BRANCH_FINANCIAL_UNIT_ID,"
           " STATEMENT_OPT_FLG, VALUE_SCALING_FACTOR_RT,   "
           " INTERNAL_REPORTING_CATEGORY_CD, CONVEXITY_ADJUSTMENT_FLG,   "
           " ARREARS_PAYMENT_CD, QUANTO_FEATURE_ID, CASH_INTENSIVE_BUSINESS_FLG,"
           "    LETTER_OF_CREDIT_ONFILE_FLG, TRADE_FINANCE_FLG,"
           " ANNUITY_PAYMENT_TYPE_CD,    INTEREST_PAYMENT_TIME_FREQ_CD,"
           " LIQUIDITY_CATEGORY_TYPE_CD,    HOLIDAY_DATE_ROLL_CONV_CD,"
           " WEEKEND_DATE_ROLL_CONV_CD, EXPENSE_ALLOCATION_ID,   "
           " FIRST_INTEREST_PAYMENT_DT, LAST_INTEREST_PAYMENT_DT";
   run;
   
   %put %str(NOTE: Mapping columns ...);
   proc sql;
      create view work.WIRNQUR as
         select
            DRV_ACCOUNT_ID as ACCOUNT_ID,
            VALID_FROM_DTTM,
            VALID_TO_DTTM,
            SOURCE_SYSTEM_CD,
            ACCOUNT_REGISTRATION_NM,
            ALTERNATE_ACCOUNT_NM,
            FINANCIAL_ACCOUNT_TYPE_CD,
            "" as AUTO_DEBIT_ACCOUNT_TYPE_CD length = 3
               format = $3.
               informat = $3.,
            "" as ACCOUNT_REGISTRATION_TYPE_CD length = 3
               format = $3.
               informat = $3.,
            ACCOUNT_STATUS_CD,
            OPEN_DT,
            (case (ACCOUNT_STATUS_CD)
               when 'MAT' then CLOSE_DT_MAT
               when 'REV' then CLOSE_DT_REV
               else .
               end) as CLOSE_DT length = 8
               format = DATETIME20.
               informat = DATETIME20.,
            "" as CLOSE_REASON_CD length = 3
               format = $3.
               informat = $3.,
            "" as ACCOUNT_TAX_ID length = 32
               format = $32.
               informat = $32.,
            . as EXPECTED_LOSS_PCT length = 8
               format = 11.4
               informat = 11.4,
            "" as INDIVIDUAL_ORGANIZATION_CD length = 3
               format = $3.
               informat = $3.,
            "" as SOURCE_CD length = 5
               format = $5.
               informat = $5.,
            "" as OPENING_CHANNEL_CD length = 3
               format = $3.
               informat = $3.,
            "" as PREFERRED_CHANNEL_CD length = 3
               format = $3.
               informat = $3.,
            (coalesce(CURRENCY_CD, 'DUM')) as CURRENCY_CD length = 3
               format = $3.
               informat = $3.,
            "" as PRIMARY_PHONE_NO length = 20
               format = $20.
               informat = $20.,
            "" as PRIMARY_PHONE_TYPE_CD length = 3
               format = $3.
               informat = $3.,
            "" as SECONDARY_PHONE_NO length = 20
               format = $20.
               informat = $20.,
            "" as SECONDARY_PHONE_TYPE_CD length = 3
               format = $3.
               informat = $3.,
            "" as MAILABLE_FLG length = 1
               format = $1.
               informat = $1.,
            "" as TELEPHONABLE_FLG length = 1
               format = $1.
               informat = $1.,
            "" as EMAIL_FLG length = 1
               format = $1.
               informat = $1.,
            "" as SMS_FLG length = 1
               format = $1.
               informat = $1.,
            "" as DO_NOT_CONTACT_FLG length = 1
               format = $1.
               informat = $1.,
            . as EMPLOYEE_RK length = 8
               format = 11.
               informat = 11.,
            "" as CURRENCY_BASED_ACCOUNT_FLG length = 1
               format = $1.
               informat = $1.,
            "" as FEE_BASED_FLG length = 1
               format = $1.
               informat = $1.,
            . as ANNUAL_FEES_AMT length = 8
               format = 20.5
               informat = 20.5,
            . as MONTHLY_FEES_AMT length = 8
               format = 20.5
               informat = 20.5,
            "" as CAMPAIGN_CD length = 30
               format = $30.
               informat = $30.,
            "" as COMMUNICATION_CD length = 30
               format = $30.
               informat = $30.,
            . as REGISTERED_ONLINE_DT length = 8
               format = DATETIME20.
               informat = DATETIME20.,
            . as FIRST_LOGIN_DT length = 8
               format = DATETIME20.
               informat = DATETIME20.,
            "" as ONLINE_BILL_PAYMENT_FLG length = 1
               format = $1.
               informat = $1.,
            "" as ID_VERIFICATION_TYPE_CD length = 3
               format = $3.
               informat = $3.,
            "" as PREVIOUS_ACCOUNT_ID length = 32
               format = $32.
               informat = $32.,
            "" as OPEN_BRANCH_FINANCIAL_UNIT_ID length = 32
               format = $32.
               informat = $32.,
            MID_FINANCIAL_UNIT_ID_BRCA as PRIM_BRANCH_FINANCIAL_UNIT_ID,
            "" as FINANCIAL_APPLICATION_ID length = 32
               format = $32.
               informat = $32.,
            "" as CREDIT_FACILITY_ID length = 40
               format = $40.
               informat = $40.,
            . as FUTURE_MARGIN_INCOME_AMT length = 8
               format = 20.5
               informat = 20.5,
            "" as IN_DEFAULT_FLG length = 1
               format = $1.
               informat = $1.,
            "" as FINANCIAL_BOOK_ID length = 32
               format = $32.
               informat = $32.,
            "" as IRRECOVERABLE_FLG length = 1
               format = $1.
               informat = $1.,
            "" as OWNED_BY_INTERNAL_ORG_ID length = 32
               format = $32.
               informat = $32.,
            "" as PREVIOUS_BANK_EXTERNAL_ORG_ID length = 32
               format = $32.
               informat = $32.,
            "" as NETTING_SET_ID length = 32
               format = $32.
               informat = $32.,
            "" as REVOLVING_FLG length = 1
               format = $1.
               informat = $1.,
            "" as SOURCE_CHANNEL_CD length = 3
               format = $3.
               informat = $3.,
            . as GRACE_PERIOD_DAYS_CNT length = 8
               format = 7.
               informat = 7.,
            . as REMARGINING_DAYS_CNT length = 8
               format = 7.
               informat = 7.,
            "" as FINANCIAL_CALENDAR_ID length = 32
               format = $32.
               informat = $32.,
            DAY_BASIS_CD,
            "" as PORTFOLIO_ID length = 32
               format = $32.
               informat = $32.,
            "" as SECURITIZATION_POOL_ID length = 32
               format = $32.
               informat = $32.,
            "" as RECEIVABLES_POOL_ID length = 32
               format = $32.
               informat = $32.,
            "" as ACCOUNT_USAGE_TYPE_CD length = 3
               format = $3.
               informat = $3.,
            "" as RISK_ALARM_FLG length = 1
               format = $1.
               informat = $1.,
            "" as LOW_PROFITABILITY_FLG length = 1
               format = $1.
               informat = $1.,
            "" as ACCOUNT_LIFECYCLE_STG_CD length = 3
               format = $3.
               informat = $3.,
            "" as ATTRITION_ALARM_FLG length = 1
               format = $1.
               informat = $1.,
            "" as BALANCE_FROZEN_FLG length = 1
               format = $1.
               informat = $1.,
            . as BALANCE_FROZEN_DT length = 8
               format = DATETIME20.
               informat = DATETIME20.,
            "" as ACCOUNT_BLOCK_REASON_CD length = 3
               format = $3.
               informat = $3.,
            "" as TAXATION_STATE_CD length = 4
               format = $4.
               informat = $4.,
            . as EFFECTIVE_MATURITY_YEAR_NO length = 8
               format = 9.3
               informat = 9.3,
            "" as GL_ACCOUNT_ID length = 32
               format = $32.
               informat = $32.,
            "" as FROM_OTHER_INSTITUTION_FLG length = 1
               format = $1.
               informat = $1.,
            . as ACCOUNT_RENEWAL_CNT length = 8
               format = 7.
               informat = 7.,
            . as BALANCE_TRANSFER_DT length = 8
               format = DATETIME20.
               informat = DATETIME20.,
            . as BALANCE_TRANSFER_AMT length = 8
               format = 20.5
               informat = 20.5,
            . as BALANCE_TRANSFER_CNT length = 8
               format = 7.
               informat = 7.,
            . as BASE_LONG_TERM_APR_RT length = 8
               format = 11.4
               informat = 11.4,
            "" as BROKER_FLG length = 1
               format = $1.
               informat = $1.,
            "" as MULT_RATE_FLG length = 1
               format = $1.
               informat = $1.,
            "" as AUTO_DEBIT_ACCOUNT_NO length = 32
               format = $32.
               informat = $32.,
            "" as WORST_STATUS_LAST_12_MTH_CD length = 3
               format = $3.
               informat = $3.,
            . as WORST_STATUS_LAST_12_MTH_DT length = 8
               format = DATETIME20.
               informat = DATETIME20.,
            . as BALANCE_TRNSF_OTHER_ACCT_CNT length = 8
               format = 7.
               informat = 7.,
            . as EFFECTIVE_FROM_DTTM length = 8
               format = DATETIME20.
               informat = DATETIME20.,
            . as EFFECTIVE_TO_DTTM length = 8
               format = DATETIME20.
               informat = DATETIME20.,
            "" as COUNTERPARTY_ID length = 32
               format = $32.
               informat = $32.,
            "" as INSURED_BY_COUNTERPARTY_ID length = 32
               format = $32.
               informat = $32.,
            "" as STATEMENT_FREQUENCY_CD length = 3
               format = $3.
               informat = $3.,
            . as SECURITY_DEPOSIT_AMT length = 8
               format = 20.5
               informat = 20.5,
            . as SECURITY_DEPOSIT_REFUND_AMT length = 8
               format = 20.5
               informat = 20.5,
            . as FIRST_PAYMENT_DT length = 8
               format = DATETIME20.
               informat = DATETIME20.,
            . as LAST_PAYMENT_DT length = 8
               format = DATETIME20.
               informat = DATETIME20.,
            . as FIRST_RESET_DT length = 8
               format = DATETIME20.
               informat = DATETIME20.,
            . as LAST_RESET_DT length = 8
               format = DATETIME20.
               informat = DATETIME20.,
            . as RESETS_PER_ANNUM_NO length = 8
               format = 6.
               informat = 6.,
            "" as PRINCIPAL_PAYMENT_TYPE_CD length = 3
               format = $3.
               informat = $3.,
            . as PRINCIPAL_PAYMENT_AMT length = 8
               format = 20.5
               informat = 20.5,
            "" as RATE_POLICY_ID length = 32
               format = $32.
               informat = $32.,
            . as SPREAD_RT length = 8
               format = 11.4
               informat = 11.4,
            . as DISCOUNT_SPREAD_RT length = 8
               format = 11.4
               informat = 11.4,
            . as INITIAL_CONTRACT_RT length = 8
               format = 11.4
               informat = 11.4,
            . as FIXED_MONTHLY_PREPAYMENT_RT length = 8
               format = 11.4
               informat = 11.4,
            "" as CAPITAL_ALLOCATION_ID length = 32
               format = $32.
               informat = $32.,
            "" as CAPITAL_COST_ID length = 32
               format = $32.
               informat = $32.,
            "" as SEGMENT_ID length = 32
               format = $32.
               informat = $32.,
            "" as NEAR_BRANCH_FINANCIAL_UNIT_ID length = 32
               format = $32.
               informat = $32.,
            "" as STATEMENT_OPT_FLG length = 1
               format = $1.
               informat = $1.,
            . as VALUE_SCALING_FACTOR_RT length = 8
               format = 11.4
               informat = 11.4,
            "" as INTERNAL_REPORTING_CATEGORY_CD length = 3
               format = $3.
               informat = $3.,
            "" as CONVEXITY_ADJUSTMENT_FLG length = 1
               format = $1.
               informat = $1.,
            "" as ARREARS_PAYMENT_CD length = 3
               format = $3.
               informat = $3.,
            "" as QUANTO_FEATURE_ID length = 32
               format = $32.
               informat = $32.,
            "" as CASH_INTENSIVE_BUSINESS_FLG length = 1
               format = $1.
               informat = $1.,
            "" as LETTER_OF_CREDIT_ONFILE_FLG length = 1
               format = $1.
               informat = $1.,
            "" as TRADE_FINANCE_FLG length = 1
               format = $1.
               informat = $1.,
            "" as ANNUITY_PAYMENT_TYPE_CD length = 3
               format = $3.
               informat = $3.,
            INTEREST_PAYMENT_TYPE_CD,
            "" as INTEREST_PAYMENT_TIME_FREQ_CD length = 3
               format = $3.
               informat = $3.,
            "" as LIQUIDITY_CATEGORY_TYPE_CD length = 3
               format = $3.
               informat = $3.,
            "" as HOLIDAY_DATE_ROLL_CONV_CD length = 3
               format = $3.
               informat = $3.,
            "" as WEEKEND_DATE_ROLL_CONV_CD length = 3
               format = $3.
               informat = $3.,
            "" as EXPENSE_ALLOCATION_ID length = 32
               format = $32.
               informat = $32.,
            . as FIRST_INTEREST_PAYMENT_DT length = 8
               format = DATETIME20.
               informat = DATETIME20.,
            . as LAST_INTEREST_PAYMENT_DT length = 8
               format = DATETIME20.
               informat = DATETIME20.,
            IRB_DUMMY_TYPE_CD,
            IRB_SRC_ACCOUNT_ID,
            BRCA,
            FINANCIAL_INSTRUMENT_TYPE_CD
      from &etls_lastTable
      ;
   quit;
   
   %let SYSLAST = work.WIRNQUR;
   
   %let etls_lastTable = &SYSLAST; 
   %let etls_tableOptions = ; 
   
   /* Determine if the target table exists  */ 
   %let etls_tableExist = %eval(%sysfunc(exist(work_ia.FINANCIAL_ACCOUNT_IRS_BK, DATA)) or 
         %sysfunc(exist(work_ia.FINANCIAL_ACCOUNT_IRS_BK, VIEW))); 
   
   %if &etls_tableExist %then 
   %do;/* table exists  */ 
      %let etls_hasPreExistingConstraint=0; 
      
      proc datasets lib = work nolist nowarn memtype = (data view);
         delete etls_commands etls_commands_F;
      quit;
      
      %let etls_otherTablesReferToThisTable=0;
      
      %macro etls_CIContents(table=,workTableOut=,inDSOptions=);
         %put NOTE: Building table listing Constraints and Indexes for: &table;
         proc datasets lib=work nolist; delete &workTableOut; quit;
         proc contents data=&table&inDSOptions out2=&workTableOut noprint; run;
         
         data &workTableOut;
            length name $60 type $20 icown idxUnique idxNoMiss $3 recreate $600;
            set &workTableOut;
            type=upcase(type);
            if type eq 'REFERENTIAL' then
            do;
               put "WARNING%QUOTE(:) Target table is referenced by constraints in"
                    " another table: " ref;
               call symput('etls_otherTablesReferToThisTable','1');
               delete;
            end;
            if type='INDEX' and ICOwn eq 'YES' then delete;
         run;
         %rcSet(&syserr); 
         
      %mend etls_CIContents;
      
      %etls_CIContents(table=work_ia.FINANCIAL_ACCOUNT_IRS_BK, workTableOut=etls_commands, inDSOptions=);
      
      %if &etls_otherTablesReferToThisTable %then 
         %put WARNING%QUOTE(:) Replacing entire table will fail. Consider an alternate load technique or revising constraints.; 
      %else 
      %do; /* okay - remove foreign keys  */ 
      
         data etls_commands_F; 
            set etls_commands; 
            if upcase(type)="FOREIGN KEY" then 
            do; 
               command='ic delete '||trim(name)||';';
               output etls_commands_F; 
            end; 
         run; 
         
         %put %str(NOTE: Removing foreign keys before dropping table...);
         data _null_;
            set etls_commands_F;
            %rcSet(&syserr); 
            
      %end; /* okay - remove foreign keys  */ 
      
      proc datasets lib = work nolist nowarn memtype = (data view);
         delete etls_commands etls_commands_F;
      quit;
      
      /*---- Drop a table  ----*/ 
      %put %str(NOTE: Dropping table ...);
      proc datasets lib = work_ia nolist nowarn memtype = (data view);
         delete FINANCIAL_ACCOUNT_IRS_BK;
      quit;
      
      %rcSet(&syserr); 
      
      %let etls_tableExist = 0;
      
   %end; /* table exists  */ 
   
   /*---- Create a new table  ----*/ 
   %if (&etls_tableExist eq 0) %then 
   %do;  /* if table does not exist  */ 
   
      %put %str(NOTE: Creating table ...);
      
      data work_ia.FINANCIAL_ACCOUNT_IRS_BK;
         attrib ACCOUNT_ID length = $32
            format = $32.
            informat = $32.
            label = 'ACCOUNT_ID'; 
         attrib VALID_FROM_DTTM length = 8
            format = DATETIME20.
            informat = DATETIME20.
            label = 'VALID_FROM_DTTM'; 
         attrib VALID_TO_DTTM length = 8
            format = DATETIME20.
            informat = DATETIME20.
            label = 'VALID_TO_DTTM'; 
         attrib SOURCE_SYSTEM_CD length = $3
            format = $3.
            informat = $3.
            label = 'SOURCE_SYSTEM_CD'; 
         attrib ACCOUNT_REGISTRATION_NM length = $100
            format = $100.
            informat = $100.
            label = 'ACCOUNT_REGISTRATION_NM'; 
         attrib ALTERNATE_ACCOUNT_NM length = $40
            format = $40.
            informat = $40.
            label = 'ALTERNATE_ACCOUNT_NM'; 
         attrib FINANCIAL_ACCOUNT_TYPE_CD length = $3
            format = $3.
            informat = $3.
            label = 'FINANCIAL_ACCOUNT_TYPE_CD'; 
         attrib AUTO_DEBIT_ACCOUNT_TYPE_CD length = $3
            format = $3.
            informat = $3.
            label = 'AUTO_DEBIT_ACCOUNT_TYPE_CD'; 
         attrib ACCOUNT_REGISTRATION_TYPE_CD length = $3
            format = $3.
            informat = $3.
            label = 'ACCOUNT_REGISTRATION_TYPE_CD'; 
         attrib ACCOUNT_STATUS_CD length = $3
            format = $3.
            informat = $3.
            label = 'ACCOUNT_STATUS_CD'; 
         attrib OPEN_DT length = 8
            format = DATETIME20.
            informat = DATETIME20.
            label = 'OPEN_DT'; 
         attrib CLOSE_DT length = 8
            format = DATETIME20.
            informat = DATETIME20.
            label = 'CLOSE_DT'; 
         attrib CLOSE_REASON_CD length = $3
            format = $3.
            informat = $3.
            label = 'CLOSE_REASON_CD'; 
         attrib ACCOUNT_TAX_ID length = $32
            format = $32.
            informat = $32.
            label = 'ACCOUNT_TAX_ID'; 
         attrib EXPECTED_LOSS_PCT length = 8
            format = 11.4
            informat = 11.4
            label = 'EXPECTED_LOSS_PCT'; 
         attrib INDIVIDUAL_ORGANIZATION_CD length = $3
            format = $3.
            informat = $3.
            label = 'INDIVIDUAL_ORGANIZATION_CD'; 
         attrib SOURCE_CD length = $5
            format = $5.
            informat = $5.
            label = 'SOURCE_CD'; 
         attrib OPENING_CHANNEL_CD length = $3
            format = $3.
            informat = $3.
            label = 'OPENING_CHANNEL_CD'; 
         attrib PREFERRED_CHANNEL_CD length = $3
            format = $3.
            informat = $3.
            label = 'PREFERRED_CHANNEL_CD'; 
         attrib CURRENCY_CD length = $3
            format = $3.
            informat = $3.
            label = 'CURRENCY_CD'; 
         attrib PRIMARY_PHONE_NO length = $20
            format = $20.
            informat = $20.
            label = 'PRIMARY_PHONE_NO'; 
         attrib PRIMARY_PHONE_TYPE_CD length = $3
            format = $3.
            informat = $3.
            label = 'PRIMARY_PHONE_TYPE_CD'; 
         attrib SECONDARY_PHONE_NO length = $20
            format = $20.
            informat = $20.
            label = 'SECONDARY_PHONE_NO'; 
         attrib SECONDARY_PHONE_TYPE_CD length = $3
            format = $3.
            informat = $3.
            label = 'SECONDARY_PHONE_TYPE_CD'; 
         attrib MAILABLE_FLG length = $1
            format = $1.
            informat = $1.
            label = 'MAILABLE_FLG'; 
         attrib TELEPHONABLE_FLG length = $1
            format = $1.
            informat = $1.
            label = 'TELEPHONABLE_FLG'; 
         attrib EMAIL_FLG length = $1
            format = $1.
            informat = $1.
            label = 'EMAIL_FLG'; 
         attrib SMS_FLG length = $1
            format = $1.
            informat = $1.
            label = 'SMS_FLG'; 
         attrib DO_NOT_CONTACT_FLG length = $1
            format = $1.
            informat = $1.
            label = 'DO_NOT_CONTACT_FLG'; 
         attrib EMPLOYEE_RK length = 8
            format = 11.
            informat = 11.
            label = 'EMPLOYEE_RK'; 
         attrib CURRENCY_BASED_ACCOUNT_FLG length = $1
            format = $1.
            informat = $1.
            label = 'CURRENCY_BASED_ACCOUNT_FLG'; 
         attrib FEE_BASED_FLG length = $1
            format = $1.
            informat = $1.
            label = 'FEE_BASED_FLG'; 
         attrib ANNUAL_FEES_AMT length = 8
            format = 20.5
            informat = 20.5
            label = 'ANNUAL_FEES_AMT'; 
         attrib MONTHLY_FEES_AMT length = 8
            format = 20.5
            informat = 20.5
            label = 'MONTHLY_FEES_AMT'; 
         attrib CAMPAIGN_CD length = $30
            format = $30.
            informat = $30.
            label = 'CAMPAIGN_CD'; 
         attrib COMMUNICATION_CD length = $30
            format = $30.
            informat = $30.
            label = 'COMMUNICATION_CD'; 
         attrib REGISTERED_ONLINE_DT length = 8
            format = DATETIME20.
            informat = DATETIME20.
            label = 'REGISTERED_ONLINE_DT'; 
         attrib FIRST_LOGIN_DT length = 8
            format = DATETIME20.
            informat = DATETIME20.
            label = 'FIRST_LOGIN_DT'; 
         attrib ONLINE_BILL_PAYMENT_FLG length = $1
            format = $1.
            informat = $1.
            label = 'ONLINE_BILL_PAYMENT_FLG'; 
         attrib ID_VERIFICATION_TYPE_CD length = $3
            format = $3.
            informat = $3.
            label = 'ID_VERIFICATION_TYPE_CD'; 
         attrib PREVIOUS_ACCOUNT_ID length = $32
            format = $32.
            informat = $32.
            label = 'PREVIOUS_ACCOUNT_ID'; 
         attrib OPEN_BRANCH_FINANCIAL_UNIT_ID length = $32
            format = $32.
            informat = $32.
            label = 'OPEN_BRANCH_FINANCIAL_UNIT_ID'; 
         attrib PRIM_BRANCH_FINANCIAL_UNIT_ID length = $32
            format = $32.
            informat = $32.
            label = 'PRIM_BRANCH_FINANCIAL_UNIT_ID'; 
         attrib FINANCIAL_APPLICATION_ID length = $32
            format = $32.
            informat = $32.
            label = 'FINANCIAL_APPLICATION_ID'; 
         attrib CREDIT_FACILITY_ID length = $40
            format = $40.
            informat = $40.
            label = 'CREDIT_FACILITY_ID'; 
         attrib FUTURE_MARGIN_INCOME_AMT length = 8
            format = 20.5
            informat = 20.5
            label = 'FUTURE_MARGIN_INCOME_AMT'; 
         attrib IN_DEFAULT_FLG length = $1
            format = $1.
            informat = $1.
            label = 'IN_DEFAULT_FLG'; 
         attrib FINANCIAL_BOOK_ID length = $32
            format = $32.
            informat = $32.
            label = 'FINANCIAL_BOOK_ID'; 
         attrib IRRECOVERABLE_FLG length = $1
            format = $1.
            informat = $1.
            label = 'IRRECOVERABLE_FLG'; 
         attrib OWNED_BY_INTERNAL_ORG_ID length = $32
            format = $32.
            informat = $32.
            label = 'OWNED_BY_INTERNAL_ORG_ID'; 
         attrib PREVIOUS_BANK_EXTERNAL_ORG_ID length = $32
            format = $32.
            informat = $32.
            label = 'PREVIOUS_BANK_EXTERNAL_ORG_ID'; 
         attrib NETTING_SET_ID length = $32
            format = $32.
            informat = $32.
            label = 'NETTING_SET_ID'; 
         attrib REVOLVING_FLG length = $1
            format = $1.
            informat = $1.
            label = 'REVOLVING_FLG'; 
         attrib SOURCE_CHANNEL_CD length = $3
            format = $3.
            informat = $3.
            label = 'SOURCE_CHANNEL_CD'; 
         attrib GRACE_PERIOD_DAYS_CNT length = 8
            format = 7.
            informat = 7.
            label = 'GRACE_PERIOD_DAYS_CNT'; 
         attrib REMARGINING_DAYS_CNT length = 8
            format = 7.
            informat = 7.
            label = 'REMARGINING_DAYS_CNT'; 
         attrib FINANCIAL_CALENDAR_ID length = $32
            format = $32.
            informat = $32.
            label = 'FINANCIAL_CALENDAR_ID'; 
         attrib DAY_BASIS_CD length = $10
            format = $10.
            informat = $10.
            label = 'DAY_BASIS_CD'; 
         attrib PORTFOLIO_ID length = $32
            format = $32.
            informat = $32.
            label = 'PORTFOLIO_ID'; 
         attrib SECURITIZATION_POOL_ID length = $32
            format = $32.
            informat = $32.
            label = 'SECURITIZATION_POOL_ID'; 
         attrib RECEIVABLES_POOL_ID length = $32
            format = $32.
            informat = $32.
            label = 'RECEIVABLES_POOL_ID'; 
         attrib ACCOUNT_USAGE_TYPE_CD length = $3
            format = $3.
            informat = $3.
            label = 'ACCOUNT_USAGE_TYPE_CD'; 
         attrib RISK_ALARM_FLG length = $1
            format = $1.
            informat = $1.
            label = 'RISK_ALARM_FLG'; 
         attrib LOW_PROFITABILITY_FLG length = $1
            format = $1.
            informat = $1.
            label = 'LOW_PROFITABILITY_FLG'; 
         attrib ACCOUNT_LIFECYCLE_STG_CD length = $3
            format = $3.
            informat = $3.
            label = 'ACCOUNT_LIFECYCLE_STG_CD'; 
         attrib ATTRITION_ALARM_FLG length = $1
            format = $1.
            informat = $1.
            label = 'ATTRITION_ALARM_FLG'; 
         attrib BALANCE_FROZEN_FLG length = $1
            format = $1.
            informat = $1.
            label = 'BALANCE_FROZEN_FLG'; 
         attrib BALANCE_FROZEN_DT length = 8
            format = DATETIME20.
            informat = DATETIME20.
            label = 'BALANCE_FROZEN_DT'; 
         attrib ACCOUNT_BLOCK_REASON_CD length = $3
            format = $3.
            informat = $3.
            label = 'ACCOUNT_BLOCK_REASON_CD'; 
         attrib TAXATION_STATE_CD length = $4
            format = $4.
            informat = $4.
            label = 'TAXATION_STATE_CD'; 
         attrib EFFECTIVE_MATURITY_YEAR_NO length = 8
            format = 9.3
            informat = 9.3
            label = 'EFFECTIVE_MATURITY_YEAR_NO'; 
         attrib GL_ACCOUNT_ID length = $32
            format = $32.
            informat = $32.
            label = 'GL_ACCOUNT_ID'; 
         attrib FROM_OTHER_INSTITUTION_FLG length = $1
            format = $1.
            informat = $1.
            label = 'FROM_OTHER_INSTITUTION_FLG'; 
         attrib ACCOUNT_RENEWAL_CNT length = 8
            format = 7.
            informat = 7.
            label = 'ACCOUNT_RENEWAL_CNT'; 
         attrib BALANCE_TRANSFER_DT length = 8
            format = DATETIME20.
            informat = DATETIME20.
            label = 'BALANCE_TRANSFER_DT'; 
         attrib BALANCE_TRANSFER_AMT length = 8
            format = 20.5
            informat = 20.5
            label = 'BALANCE_TRANSFER_AMT'; 
         attrib BALANCE_TRANSFER_CNT length = 8
            format = 7.
            informat = 7.
            label = 'BALANCE_TRANSFER_CNT'; 
         attrib BASE_LONG_TERM_APR_RT length = 8
            format = 11.4
            informat = 11.4
            label = 'BASE_LONG_TERM_APR_RT'; 
         attrib BROKER_FLG length = $1
            format = $1.
            informat = $1.
            label = 'BROKER_FLG'; 
         attrib MULT_RATE_FLG length = $1
            format = $1.
            informat = $1.
            label = 'MULT_RATE_FLG'; 
         attrib AUTO_DEBIT_ACCOUNT_NO length = $32
            format = $32.
            informat = $32.
            label = 'AUTO_DEBIT_ACCOUNT_NO'; 
         attrib WORST_STATUS_LAST_12_MTH_CD length = $3
            format = $3.
            informat = $3.
            label = 'WORST_STATUS_LAST_12_MTH_CD'; 
         attrib WORST_STATUS_LAST_12_MTH_DT length = 8
            format = DATETIME20.
            informat = DATETIME20.
            label = 'WORST_STATUS_LAST_12_MTH_DT'; 
         attrib BALANCE_TRNSF_OTHER_ACCT_CNT length = 8
            format = 7.
            informat = 7.
            label = 'BALANCE_TRNSF_OTHER_ACCT_CNT'; 
         attrib EFFECTIVE_FROM_DTTM length = 8
            format = DATETIME20.
            informat = DATETIME20.
            label = 'EFFECTIVE_FROM_DTTM'; 
         attrib EFFECTIVE_TO_DTTM length = 8
            format = DATETIME20.
            informat = DATETIME20.
            label = 'EFFECTIVE_TO_DTTM'; 
         attrib COUNTERPARTY_ID length = $32
            format = $32.
            informat = $32.
            label = 'COUNTERPARTY_ID'; 
         attrib INSURED_BY_COUNTERPARTY_ID length = $32
            format = $32.
            informat = $32.
            label = 'INSURED_BY_COUNTERPARTY_ID'; 
         attrib STATEMENT_FREQUENCY_CD length = $3
            format = $3.
            informat = $3.
            label = 'STATEMENT_FREQUENCY_CD'; 
         attrib SECURITY_DEPOSIT_AMT length = 8
            format = 20.5
            informat = 20.5
            label = 'SECURITY_DEPOSIT_AMT'; 
         attrib SECURITY_DEPOSIT_REFUND_AMT length = 8
            format = 20.5
            informat = 20.5
            label = 'SECURITY_DEPOSIT_REFUND_AMT'; 
         attrib FIRST_PAYMENT_DT length = 8
            format = DATETIME20.
            informat = DATETIME20.
            label = 'FIRST_PAYMENT_DT'; 
         attrib LAST_PAYMENT_DT length = 8
            format = DATETIME20.
            informat = DATETIME20.
            label = 'LAST_PAYMENT_DT'; 
         attrib FIRST_RESET_DT length = 8
            format = DATETIME20.
            informat = DATETIME20.
            label = 'FIRST_RESET_DT'; 
         attrib LAST_RESET_DT length = 8
            format = DATETIME20.
            informat = DATETIME20.
            label = 'LAST_RESET_DT'; 
         attrib RESETS_PER_ANNUM_NO length = 8
            format = 6.
            informat = 6.
            label = 'RESETS_PER_ANNUM_NO'; 
         attrib PRINCIPAL_PAYMENT_TYPE_CD length = $3
            format = $3.
            informat = $3.
            label = 'PRINCIPAL_PAYMENT_TYPE_CD'; 
         attrib PRINCIPAL_PAYMENT_AMT length = 8
            format = 20.5
            informat = 20.5
            label = 'PRINCIPAL_PAYMENT_AMT'; 
         attrib RATE_POLICY_ID length = $32
            format = $32.
            informat = $32.
            label = 'RATE_POLICY_ID'; 
         attrib SPREAD_RT length = 8
            format = 11.4
            informat = 11.4
            label = 'SPREAD_RT'; 
         attrib DISCOUNT_SPREAD_RT length = 8
            format = 11.4
            informat = 11.4
            label = 'DISCOUNT_SPREAD_RT'; 
         attrib INITIAL_CONTRACT_RT length = 8
            format = 11.4
            informat = 11.4
            label = 'INITIAL_CONTRACT_RT'; 
         attrib FIXED_MONTHLY_PREPAYMENT_RT length = 8
            format = 11.4
            informat = 11.4
            label = 'FIXED_MONTHLY_PREPAYMENT_RT'; 
         attrib CAPITAL_ALLOCATION_ID length = $32
            format = $32.
            informat = $32.
            label = 'CAPITAL_ALLOCATION_ID'; 
         attrib CAPITAL_COST_ID length = $32
            format = $32.
            informat = $32.
            label = 'CAPITAL_COST_ID'; 
         attrib SEGMENT_ID length = $32
            format = $32.
            informat = $32.
            label = 'SEGMENT_ID'; 
         attrib NEAR_BRANCH_FINANCIAL_UNIT_ID length = $32
            format = $32.
            informat = $32.
            label = 'NEAR_BRANCH_FINANCIAL_UNIT_ID'; 
         attrib STATEMENT_OPT_FLG length = $1
            format = $1.
            informat = $1.
            label = 'STATEMENT_OPT_FLG'; 
         attrib VALUE_SCALING_FACTOR_RT length = 8
            format = 11.4
            informat = 11.4
            label = 'VALUE_SCALING_FACTOR_RT'; 
         attrib INTERNAL_REPORTING_CATEGORY_CD length = $3
            format = $3.
            informat = $3.
            label = 'INTERNAL_REPORTING_CATEGORY_CD'; 
         attrib CONVEXITY_ADJUSTMENT_FLG length = $1
            format = $1.
            informat = $1.
            label = 'CONVEXITY_ADJUSTMENT_FLG'; 
         attrib ARREARS_PAYMENT_CD length = $3
            format = $3.
            informat = $3.
            label = 'ARREARS_PAYMENT_CD'; 
         attrib QUANTO_FEATURE_ID length = $32
            format = $32.
            informat = $32.
            label = 'QUANTO_FEATURE_ID'; 
         attrib CASH_INTENSIVE_BUSINESS_FLG length = $1
            format = $1.
            informat = $1.
            label = 'CASH_INTENSIVE_BUSINESS_FLG'; 
         attrib LETTER_OF_CREDIT_ONFILE_FLG length = $1
            format = $1.
            informat = $1.
            label = 'LETTER_OF_CREDIT_ONFILE_FLG'; 
         attrib TRADE_FINANCE_FLG length = $1
            format = $1.
            informat = $1.
            label = 'TRADE_FINANCE_FLG'; 
         attrib ANNUITY_PAYMENT_TYPE_CD length = $3
            format = $3.
            informat = $3.
            label = 'ANNUITY_PAYMENT_TYPE_CD'; 
         attrib INTEREST_PAYMENT_TYPE_CD length = $3
            format = $3.
            informat = $3.
            label = 'INTEREST_PAYMENT_TYPE_CD'; 
         attrib INTEREST_PAYMENT_TIME_FREQ_CD length = $3
            format = $3.
            informat = $3.
            label = 'INTEREST_PAYMENT_TIME_FREQ_CD'; 
         attrib LIQUIDITY_CATEGORY_TYPE_CD length = $3
            format = $3.
            informat = $3.
            label = 'LIQUIDITY_CATEGORY_TYPE_CD'; 
         attrib HOLIDAY_DATE_ROLL_CONV_CD length = $3
            format = $3.
            informat = $3.
            label = 'HOLIDAY_DATE_ROLL_CONV_CD'; 
         attrib WEEKEND_DATE_ROLL_CONV_CD length = $3
            format = $3.
            informat = $3.
            label = 'WEEKEND_DATE_ROLL_CONV_CD'; 
         attrib EXPENSE_ALLOCATION_ID length = $32
            format = $32.
            informat = $32.
            label = 'EXPENSE_ALLOCATION_ID'; 
         attrib FIRST_INTEREST_PAYMENT_DT length = 8
            format = DATETIME20.
            informat = DATETIME20.
            label = 'FIRST_INTEREST_PAYMENT_DT'; 
         attrib LAST_INTEREST_PAYMENT_DT length = 8
            format = DATETIME20.
            informat = DATETIME20.
            label = 'LAST_INTEREST_PAYMENT_DT'; 
         attrib IRB_DUMMY_TYPE_CD length = $3
            format = $3.
            informat = $3.
            label = 'IRB_DUMMY_TYPE_CD'; 
         attrib IRB_SRC_ACCOUNT_ID length = $32
            format = $32.
            informat = $32.
            label = 'IRB_SRC_ACCOUNT_ID'; 
         attrib BRCA length = $3
            format = $3.
            informat = $3.
            label = 'BRCA'; 
         attrib FINANCIAL_INSTRUMENT_TYPE_CD length = $3
            format = $3.
            informat = $3.
            label = 'FINANCIAL_INSTRUMENT_TYPE_CD'; 
         call missing(of _all_);
         stop;
      run;
      
      %rcSet(&syserr); 
      
      /*---- Create the integrity constraints for a table  ----*/ 
      %put %str(NOTE: Creating integrity constraints ...);
      proc datasets library=work_ia nolist;
         modify FINANCIAL_ACCOUNT_IRS_BK;
            ic create not null (ACCOUNT_ID);
            ic create not null (SOURCE_SYSTEM_CD);
            ic create not null (FINANCIAL_ACCOUNT_TYPE_CD);
            ic create not null (ACCOUNT_STATUS_CD);
            ic create not null (CURRENCY_CD);
            ic create not null (PRIM_BRANCH_FINANCIAL_UNIT_ID);
            ic create not null (BRCA);
            ic create Index1 = primary key (ACCOUNT_ID VALID_FROM_DTTM);
      quit;
      
      %rcSet(&syserr); 
      
   %end;  /* if table does not exist  */ 
   
   /*---- Append  ----*/ 
   %put %str(NOTE: Appending data ...);
   
   proc append base = work_ia.FINANCIAL_ACCOUNT_IRS_BK 
      data = &etls_lastTable (&etls_tableOptions)  force ; 
    run; 
   
   %rcSet(&syserr); 
   
   proc datasets lib = work nolist nowarn memtype = (data view);
      delete WIRNQUR;
   quit;
   
%mend etls_loader;
%etls_loader;

%let etls_recCheckExist = 0; 
%let etls_recnt = 0; 
%macro etls_recordCheck; 
   %let etls_recCheckExist = %eval(%sysfunc(exist(work_ia.FINANCIAL_ACCOUNT_IRS_BK, DATA)) or 
         %sysfunc(exist(work_ia.FINANCIAL_ACCOUNT_IRS_BK, VIEW))); 
   
   %if (&etls_recCheckExist) %then
   %do;
      %local etls_syntaxcheck; 
      %let etls_syntaxcheck = %sysfunc(getoption(syntaxcheck)); 
      /* Turn off syntaxcheck option to perform following steps  */ 
      options nosyntaxcheck;
      
      proc contents data = work_ia.FINANCIAL_ACCOUNT_IRS_BK out = work.etls_contents(keep = nobs) noprint; 
      run; 
      
      data _null_; 
         set work.etls_contents (obs = 1); 
         call symput("etls_recnt", left(put(nobs,32.))); 
      run;
      
      proc datasets lib = work nolist nowarn memtype = (data view);
         delete etls_contents;
      quit;
      
      /* Reset syntaxcheck option to previous setting  */ 
      options &etls_syntaxcheck; 
   %end;
%mend etls_recordCheck;
%etls_recordCheck;



/**  Step end Table Loader **/

/*==========================================================================* 
 * Step:            Table Loader                          A5Y50FNE.AQ0009PD * 
 * Transform:       Table Loader (Version 2.1)                              * 
 * Description:                                                             * 
 *                                                                          * 
 * Source Table:    Append - work.WFD6IQ0                 A5Y50FNE.AO0005FA * 
 * Target Table:    FIN_INSTR_ASSOC_IRS_BK -              A5Y50FNE.AE000126 * 
 *                   work_ia.FIN_INSTR_ASSOC_IRS_BK                         * 
 *==========================================================================*/ 

%let transformID = %quote(A5Y50FNE.AQ0009PD);
%let trans_rc = 0;
%let etls_stepStartTime = %sysfunc(datetime(), datetime20.); 

%let SYSLAST = %nrquote(work.WFD6IQ0); 

%let SYS_SQL_IP_SPEEDO = Y;
%let SYS_SQL_MAPPUTTO = sas_put;
%let SYS_SQLREDUCEPUT = DBMS;
%global etls_sql_pushDown;
%let etls_sql_pushDown = -1;
option DBIDIRECTEXEC;

%global etls_tableExist;
%global etls_numIndex;
%global etls_lastTable;
%let etls_tableExist = -1; 
%let etls_numIndex = -1; 
%let etls_lastTable = &SYSLAST; 

/*---- Define load data macro  ----*/ 

/* --------------------------------------------------------------
   Load Technique Selection: Replace - EntireTable
   Constraint and index action selections: 'INIT','ASIS','ASIS','ASIS'
   Additional options selections... 
      Set unmapped to missing on updates: false 
   -------------------------------------------------------------- */
%macro etls_loader;

   %let etls_tableOptions = ;
   
   /*---- Map the columns  ----*/ 
   proc datasets lib = work nolist nowarn memtype = (data view);
      delete WIRNR0O;
   quit;
   
   %put %str(NOTE: Mapping columns ...);
   proc sql;
      create view work.WIRNR0O as
         select
            FINANCIAL_INSTRUMENT_ID as FINANCIAL_INSTRUMENT_ASSOC_ID,
            VALID_FROM_DTTM,
            VALID_TO_DTTM,
            ('DRV') as FINANCIAL_INSTR_ASSOC_TYPE_CD length = 3
               format = $3.
               informat = $3.,
            FINANCIAL_INSTRUMENT_ID,
            REFERENCE_ACCOUNT_ID
      from &etls_lastTable
      ;
   quit;
   
   %let SYSLAST = work.WIRNR0O;
   
   %let etls_lastTable = &SYSLAST; 
   %let etls_tableOptions = ; 
   
   /* Determine if the target table exists  */ 
   %let etls_tableExist = %eval(%sysfunc(exist(work_ia.FIN_INSTR_ASSOC_IRS_BK, DATA)) or 
         %sysfunc(exist(work_ia.FIN_INSTR_ASSOC_IRS_BK, VIEW))); 
   
   %if &etls_tableExist %then 
   %do;/* table exists  */ 
      %let etls_hasPreExistingConstraint=0; 
      
      proc datasets lib = work nolist nowarn memtype = (data view);
         delete etls_commands etls_commands_F;
      quit;
      
      %let etls_otherTablesReferToThisTable=0;
      
      %macro etls_CIContents(table=,workTableOut=,inDSOptions=);
         %put NOTE: Building table listing Constraints and Indexes for: &table;
         proc datasets lib=work nolist; delete &workTableOut; quit;
         proc contents data=&table&inDSOptions out2=&workTableOut noprint; run;
         
         data &workTableOut;
            length name $60 type $20 icown idxUnique idxNoMiss $3 recreate $600;
            set &workTableOut;
            type=upcase(type);
            if type eq 'REFERENTIAL' then
            do;
               put "WARNING%QUOTE(:) Target table is referenced by constraints in"
                    " another table: " ref;
               call symput('etls_otherTablesReferToThisTable','1');
               delete;
            end;
            if type='INDEX' and ICOwn eq 'YES' then delete;
         run;
         %rcSet(&syserr); 
         
      %mend etls_CIContents;
      
      %etls_CIContents(table=work_ia.FIN_INSTR_ASSOC_IRS_BK, workTableOut=etls_commands, inDSOptions=);
      
      %if &etls_otherTablesReferToThisTable %then 
         %put WARNING%QUOTE(:) Replacing entire table will fail. Consider an alternate load technique or revising constraints.; 
      %else 
      %do; /* okay - remove foreign keys  */ 
      
         data etls_commands_F; 
            set etls_commands; 
            if upcase(type)="FOREIGN KEY" then 
            do; 
               command='ic delete '||trim(name)||';';
               output etls_commands_F; 
            end; 
         run; 
         
         %put %str(NOTE: Removing foreign keys before dropping table...);
         data _null_;
            set etls_commands_F;
            %rcSet(&syserr); 
            
      %end; /* okay - remove foreign keys  */ 
      
      proc datasets lib = work nolist nowarn memtype = (data view);
         delete etls_commands etls_commands_F;
      quit;
      
      /*---- Drop a table  ----*/ 
      %put %str(NOTE: Dropping table ...);
      proc datasets lib = work_ia nolist nowarn memtype = (data view);
         delete FIN_INSTR_ASSOC_IRS_BK;
      quit;
      
      %rcSet(&syserr); 
      
      %let etls_tableExist = 0;
      
   %end; /* table exists  */ 
   
   /*---- Create a new table  ----*/ 
   %if (&etls_tableExist eq 0) %then 
   %do;  /* if table does not exist  */ 
   
      %put %str(NOTE: Creating table ...);
      
      data work_ia.FIN_INSTR_ASSOC_IRS_BK;
         attrib FINANCIAL_INSTRUMENT_ASSOC_ID length = $32
            format = $32.
            informat = $32.
            label = 'FINANCIAL_INSTRUMENT_ASSOC_ID'; 
         attrib VALID_FROM_DTTM length = 8
            format = DATETIME20.
            informat = DATETIME20.
            label = 'VALID_FROM_DTTM'; 
         attrib VALID_TO_DTTM length = 8
            format = DATETIME20.
            informat = DATETIME20.
            label = 'VALID_TO_DTTM'; 
         attrib FINANCIAL_INSTR_ASSOC_TYPE_CD length = $3
            format = $3.
            informat = $3.
            label = 'FINANCIAL_INSTR_ASSOC_TYPE_CD'; 
         attrib FINANCIAL_INSTRUMENT_ID length = $32
            format = $32.
            informat = $32.
            label = 'FINANCIAL_INSTRUMENT_ID'; 
         attrib REFERENCE_ACCOUNT_ID length = $32
            format = $32.
            informat = $32.
            label = 'FINANCIAL_ACCOUNT_ID'; 
         call missing(of _all_);
         stop;
      run;
      
      %rcSet(&syserr); 
      
      /*---- Create the integrity constraints for a table  ----*/ 
      %put %str(NOTE: Creating integrity constraints ...);
      proc datasets library=work_ia nolist;
         modify FIN_INSTR_ASSOC_IRS_BK;
            ic create not null (FINANCIAL_INSTRUMENT_ASSOC_ID);
            ic create not null (VALID_FROM_DTTM);
            ic create not null (VALID_TO_DTTM);
            ic create not null (FINANCIAL_INSTR_ASSOC_TYPE_CD);
            ic create not null (FINANCIAL_INSTRUMENT_ID);
            ic create not null (REFERENCE_ACCOUNT_ID);
            ic create pk_index = primary key (FINANCIAL_INSTRUMENT_ASSOC_ID VALID_FROM_DTTM);
      quit;
      
      %rcSet(&syserr); 
      
   %end;  /* if table does not exist  */ 
   
   /*---- Append  ----*/ 
   %put %str(NOTE: Appending data ...);
   
   proc append base = work_ia.FIN_INSTR_ASSOC_IRS_BK 
      data = &etls_lastTable (&etls_tableOptions)  force ; 
    run; 
   
   %rcSet(&syserr); 
   
   proc datasets lib = work nolist nowarn memtype = (data view);
      delete WIRNR0O;
   quit;
   
%mend etls_loader;
%etls_loader;

%let etls_recCheckExist = 0; 
%let etls_recnt = 0; 
%macro etls_recordCheck; 
   %let etls_recCheckExist = %eval(%sysfunc(exist(work_ia.FIN_INSTR_ASSOC_IRS_BK, DATA)) or 
         %sysfunc(exist(work_ia.FIN_INSTR_ASSOC_IRS_BK, VIEW))); 
   
   %if (&etls_recCheckExist) %then
   %do;
      %local etls_syntaxcheck; 
      %let etls_syntaxcheck = %sysfunc(getoption(syntaxcheck)); 
      /* Turn off syntaxcheck option to perform following steps  */ 
      options nosyntaxcheck;
      
      proc contents data = work_ia.FIN_INSTR_ASSOC_IRS_BK out = work.etls_contents(keep = nobs) noprint; 
      run; 
      
      data _null_; 
         set work.etls_contents (obs = 1); 
         call symput("etls_recnt", left(put(nobs,32.))); 
      run;
      
      proc datasets lib = work nolist nowarn memtype = (data view);
         delete etls_contents;
      quit;
      
      /* Reset syntaxcheck option to previous setting  */ 
      options &etls_syntaxcheck; 
   %end;
%mend etls_recordCheck;
%etls_recordCheck;



/**  Step end Table Loader **/

/*==========================================================================* 
 * Step:            Завершить модуль                      A5Y50FNE.AQ0009PE * 
 * Transform:       Завершить модуль                                        * 
 * Description:                                                             * 
 *==========================================================================*/ 

%let transformID = %quote(A5Y50FNE.AQ0009PE);
%let trans_rc = 0;
%let etls_stepStartTime = %sysfunc(datetime(), datetime20.); 

%let _INPUT_count = 0; 
%let _OUTPUT_count = 0; 


/*****************************************************************
* ВЕРСИЯ:
*   $Id: transform_job_finish.sas 247 2012-04-03 07:31:10Z nesterenok $
*
******************************************************************
* НАЗНАЧЕНИЕ:
*   Регистрирует конец модуля ETL.
*
* ПАРАМЕТРЫ:
*   нет
*
******************************************************************/

%macro transform_job_finish;

   /* Продолжаем модуль */
   %job_continue_reg(mpJobType=JOB, mpJobName=&ETLS_JobName., mpPostEvent=N);

   /* Завершаем модуль */
   %job_finish_reg(mpJobType=JOB);

%mend transform_job_finish;

%transform_job_finish;


%rcSet(&syserr); 
%rcSet(&sysrc); 
%rcSet(&sqlrc); 



/**  Step end Завершить модуль **/

%let etls_endTime = %sysfunc(datetime(),datetime.);



/**  Job end 042_931_Structure_FINANCIAL_ACCOUNT_IRS_BK **/

/* Reset jobid and name */
%let jobID = %quote(A569C89V.AQ0000CK);
%let etls_jobName = %nrquote(090_364_Stream_Midas_Fin_Account_BK);

/**************************************************************************** 
 * Job:             042_932_Structure_FINANCIAL_ACCOUNT_  A5Y50FNE.AN0000VG * 
 *                  CIS_BK                                                  * 
 * Description:                                                             * 
 *                                                                          * 
 * Metadata Server: bravo14                                                 * 
 * Port:            8561                                                    * 
 * Location:        /DWH_DWHDDS_IA/Jobs/042_Structure/Financial_Account     * 
 *                                                                          * 
 * Server:          SASApp                                A5C46MZY.AQ000002 * 
 *                                                                          * 
 * Source Table:    FINANCIAL_INSTRUMENT_CIS_BK -         A5Y50FNE.AE00013S * 
 *                   work_ia.FINANCIAL_INSTRUMENT_CIS_BK                    * 
 * Target Tables:   FINANCIAL_ACCOUNT_CIS_BK -            A5Y50FNE.AE00012F * 
 *                   work_ia.FINANCIAL_ACCOUNT_CIS_BK                       * 
 *                  FIN_INSTR_ASSOC_CIS_BK -              A5Y50FNE.AE00011Z * 
 *                   work_ia.FIN_INSTR_ASSOC_CIS_BK                         * 
 *                  CUSTOMER_X_FIN_ACC_CIS_BK -           A5Y50FNE.AE00011L * 
 *                   work_ia.CUSTOMER_X_FIN_ACC_CIS_BK                      * 
 *                                                                          * 
 * Generated on:    16 Июль 2013 г. 17:14:42 MSD                            * 
 * Generated by:    sasdwh                                                  * 
 * Version:         SAS Data Integration Studio 4.5                         * 
 ****************************************************************************/ 

/* General macro variables  */ 
%let jobID = %quote(A5Y50FNE.AN0000VG);
%let etls_jobName = %nrquote(042_932_Structure_FINANCIAL_ACCOUNT_CIS_BK);
%let etls_userID = %nrquote(sasdwh);


/* Create metadata macro variables */
%let IOMServer      = %nrquote(SASApp);
%let metaPort       = %nrquote(8561);
%let metaServer     = %nrquote(bravo14);

/* Set metadata options */
options metaport       = &metaPort 
        metaserver     = "&metaServer"; 

/* Setup for capturing job status  */ 
%let etls_startTime = %sysfunc(datetime(),datetime.);
%let etls_recordsBefore = 0;
%let etls_recordsAfter = 0;
%let etls_lib = 0;
%let etls_table = 0;

%global etls_debug; 
%macro etls_setDebug; 
   %if %str(&etls_debug) ne 0 %then 
      OPTIONS MPRINT%str(;); 
%mend; 
%etls_setDebug; 

/*==========================================================================* 
 * Step:            Начать модуль                         A5Y50FNE.AQ0009PF * 
 * Transform:       Начать модуль                                           * 
 * Description:                                                             * 
 *==========================================================================*/ 

%let transformID = %quote(A5Y50FNE.AQ0009PF);
%let trans_rc = 0;
%let etls_stepStartTime = %sysfunc(datetime(), datetime20.); 

%let _INPUT_count = 0; 
%let _OUTPUT_count = 0; 


/*****************************************************************
* ВЕРСИЯ:
*   $Id: transform_job_start.sas 1747 2012-08-01 11:26:13Z nesterenok $
*
******************************************************************
* НАЗНАЧЕНИЕ:
*   Регистрирует начало модуля ETL.
*
* ПАРАМЕТРЫ:
*   нет
*
******************************************************************/

%macro transform_job_start;

   /* Продолжаем поток (или создаем новый) */
   %local lmvStreamName;
   %if %sysfunc(sysexist(LSB_JOBNAME)) %then
      %let lmvStreamName = %scan(%sysfunc(sysget(LSB_JOBNAME)), 3, :);
   %else
      %let lmvStreamName = ;

   %job_continue_reg(mpJobType=STREAM, mpJobName=&lmvStreamName, mpPostEvent=N, mpForcedStart=Y);

   /* Для DI, начинаем поток заново, если старый был начат не сегодня */
   %if %length(&lmvStreamName) eq 0 and &STREAM_START_DT ne %sysfunc(today()) %then %do;
      %job_start_reg(mpJobType=STREAM, mpParentJobId=, mpJobName=&lmvStreamName.);
   %end;

   /* Начинаем модуль */
   %job_start_reg(mpJobType=JOB, mpParentJobId=&STREAM_ID, mpJobName=&ETLS_JobName.);

%mend transform_job_start;

%transform_job_start;


%rcSet(&syserr); 
%rcSet(&sysrc); 
%rcSet(&sqlrc); 



/**  Step end Начать модуль **/

/*==========================================================================* 
 * Step:            Отбор первых и актуальных записей с   A5Y50FNE.AQ0009PG * 
 *                   учетом ног                                             * 
 * Transform:       Splitter                                                * 
 * Description:                                                             * 
 *                                                                          * 
 * Source Table:    FINANCIAL_INSTRUMENT_CIS_BK -         A5Y50FNE.AE00013S * 
 *                   work_ia.FINANCIAL_INSTRUMENT_CIS_BK                    * 
 * Target Tables:   first1 recs - work.W1B87YYR           A5Y50FNE.AO0005FB * 
 *                  first2 recs - work.W1B889DD           A5Y50FNE.AO0005FC * 
 *                  actual1 recs - work.W1BAZY4C          A5Y50FNE.AO0005FD * 
 *                  actual2 recs - work.W1BB1D6X          A5Y50FNE.AO0005FE * 
 *==========================================================================*/ 

%let transformID = %quote(A5Y50FNE.AQ0009PG);
%let trans_rc = 0;
%let etls_stepStartTime = %sysfunc(datetime(), datetime20.); 

%let etls_recCheckExist = 0; 
%let etls_recnt = 0; 
%macro etls_recordCheck; 
   %let etls_recCheckExist = %eval(%sysfunc(exist(work_ia.FINANCIAL_INSTRUMENT_CIS_BK, DATA)) or 
         %sysfunc(exist(work_ia.FINANCIAL_INSTRUMENT_CIS_BK, VIEW))); 
   
   %if (&etls_recCheckExist) %then
   %do;
      %local etls_syntaxcheck; 
      %let etls_syntaxcheck = %sysfunc(getoption(syntaxcheck)); 
      /* Turn off syntaxcheck option to perform following steps  */ 
      options nosyntaxcheck;
      
      proc contents data = work_ia.FINANCIAL_INSTRUMENT_CIS_BK out = work.etls_contents(keep = nobs) noprint; 
      run; 
      
      data _null_; 
         set work.etls_contents (obs = 1); 
         call symput("etls_recnt", left(put(nobs,32.))); 
      run;
      
      proc datasets lib = work nolist nowarn memtype = (data view);
         delete etls_contents;
      quit;
      
      /* Reset syntaxcheck option to previous setting  */ 
      options &etls_syntaxcheck; 
   %end;
%mend etls_recordCheck;
%etls_recordCheck;

%let SYSLAST = %nrquote(work_ia.FINANCIAL_INSTRUMENT_CIS_BK); 

proc datasets lib=work nolist nowarn memtype = (data view);
   delete W1B87YYR;
   delete W1B889DD;
   delete W1BAZY4C;
   delete W1BB1D6X;
quit;

data 
     work.W1B87YYR
     work.W1B889DD
     work.W1BAZY4C
     work.W1BB1D6X;
   set &SYSLAST;
   if FSRT=1 and LEGN=1 then 
      output work.W1B87YYR;
   if FSRT=1 and LEGN=2 then 
      output work.W1B889DD;
   if VALID_TO_DTTM = &ETL_SCD_FUTURE_DTTM and LEGN=1 then 
      output work.W1BAZY4C;
   if VALID_TO_DTTM = &ETL_SCD_FUTURE_DTTM and LEGN=2 then 
      output work.W1BB1D6X;
run;

%rcSet(&syserr); 

/*---- Map the columns  ----*/ 
proc datasets lib = work nolist nowarn memtype = (data view);
   delete etls_mapped;
quit;

%put %str(NOTE: Mapping columns ...);
proc sql;
   create table work.etls_mapped as
      select
         VALID_FROM_DTTM,
         FINANCIAL_INSTRUMENT_ID,
         IRB_SRC_ACCOUNT_ID,
         DDAT,
         IRB_DUMMY_TYPE_CD,
         SETTLEMENT_TYPE_CD
   from work.W1B87YYR
   ;
quit;

%let SYSLAST = work.etls_mapped;

data work.W1B87YYR;
  set work.etls_mapped;
run;

proc datasets lib = work nolist nowarn memtype = (data view);
   delete etls_mapped;
quit;

%rcSet(&syscc); 

/*---- Map the columns  ----*/ 
proc datasets lib = work nolist nowarn memtype = (data view);
   delete etls_mapped;
quit;

%put %str(NOTE: Mapping columns ...);
proc sql;
   create table work.etls_mapped as
      select
         VALID_FROM_DTTM,
         FINANCIAL_INSTRUMENT_ID,
         IRB_SRC_ACCOUNT_ID,
         DDAT,
         IRB_DUMMY_TYPE_CD,
         SETTLEMENT_TYPE_CD
   from work.W1B889DD
   ;
quit;

%let SYSLAST = work.etls_mapped;

data work.W1B889DD;
  set work.etls_mapped;
run;

proc datasets lib = work nolist nowarn memtype = (data view);
   delete etls_mapped;
quit;

%rcSet(&syscc); 

/*---- Map the columns  ----*/ 
proc datasets lib = work nolist nowarn memtype = (data view);
   delete etls_mapped;
quit;

%put %str(NOTE: Mapping columns ...);
proc sql;
   create table work.etls_mapped as
      select
         FINANCIAL_INSTRUMENT_ID,
         IRB_INSTR_STATUS_CD,
         IRB_SRC_ACCOUNT_ID,
         KONDOR_A,
         ARM302P_ID,
         FXMM_ID,
         LNKDN as LNKDN1,
         BRCA,
         FINANCIAL_INSTRUMENT_TYPE_CD,
         CURRENCY_CD,
         CNUM,
         MDAT as MDAT1,
         IRB_DUMMY_TYPE_CD,
         SETTLEMENT_TYPE_CD,
         LCD as LCD1,
         DDAT as DDAT1
   from work.W1BAZY4C
   ;
quit;

%let SYSLAST = work.etls_mapped;

data work.W1BAZY4C;
  set work.etls_mapped;
run;

proc datasets lib = work nolist nowarn memtype = (data view);
   delete etls_mapped;
quit;

%rcSet(&syscc); 

/*---- Map the columns  ----*/ 
proc datasets lib = work nolist nowarn memtype = (data view);
   delete etls_mapped;
quit;

%put %str(NOTE: Mapping columns ...);
proc sql;
   create table work.etls_mapped as
      select
         FINANCIAL_INSTRUMENT_ID,
         IRB_INSTR_STATUS_CD,
         IRB_SRC_ACCOUNT_ID,
         KONDOR_A,
         ARM302P_ID,
         FXMM_ID,
         LNKDN as LNKDN2,
         BRCA,
         FINANCIAL_INSTRUMENT_TYPE_CD,
         CURRENCY_CD,
         CNUM,
         MDAT as MDAT2,
         IRB_DUMMY_TYPE_CD,
         SETTLEMENT_TYPE_CD,
         LCD as LCD2,
         DDAT as DDAT2
   from work.W1BB1D6X
   ;
quit;

%let SYSLAST = work.etls_mapped;

data work.W1BB1D6X;
  set work.etls_mapped;
run;

proc datasets lib = work nolist nowarn memtype = (data view);
   delete etls_mapped;
quit;

%rcSet(&syscc); 



/**  Step end Отбор первых и актуальных записей с учетом ног **/

/*==========================================================================* 
 * Step:            Вяжем первые записи ног в одну запись A5Y50FNE.AQ0009PH * 
 * Transform:       Join                                                    * 
 * Description:                                                             * 
 *                                                                          * 
 * Source Tables:   first1 recs - work.W1B87YYR           A5Y50FNE.AO0005FB * 
 *                  first2 recs - work.W1B889DD           A5Y50FNE.AO0005FC * 
 * Target Table:    first recs - work.W17GRCZV            A5Y50FNE.AO0005FF * 
 *==========================================================================*/ 

%let transformID = %quote(A5Y50FNE.AQ0009PH);
%let trans_rc = 0;
%let etls_stepStartTime = %sysfunc(datetime(), datetime20.); 

%let etls_recCheckExist = 0; 
%let etls_recnt = 0; 
%macro etls_recordCheck; 
   %let etls_recCheckExist = %eval(%sysfunc(exist(work.W1B87YYR, DATA)) or 
         %sysfunc(exist(work.W1B87YYR, VIEW))); 
   
   %if (&etls_recCheckExist) %then
   %do;
      %local etls_syntaxcheck; 
      %let etls_syntaxcheck = %sysfunc(getoption(syntaxcheck)); 
      /* Turn off syntaxcheck option to perform following steps  */ 
      options nosyntaxcheck;
      
      proc contents data = work.W1B87YYR out = work.etls_contents(keep = nobs) noprint; 
      run; 
      
      data _null_; 
         set work.etls_contents (obs = 1); 
         call symput("etls_recnt", left(put(nobs,32.))); 
      run;
      
      proc datasets lib = work nolist nowarn memtype = (data view);
         delete etls_contents;
      quit;
      
      /* Reset syntaxcheck option to previous setting  */ 
      options &etls_syntaxcheck; 
   %end;
%mend etls_recordCheck;
%etls_recordCheck;

%let SYS_SQL_IP_SPEEDO = Y;
%let SYS_SQL_MAPPUTTO = sas_put;
%let SYS_SQLREDUCEPUT = DBMS;
%global etls_sql_pushDown;
%let etls_sql_pushDown = -1;
option DBIDIRECTEXEC;

proc datasets lib = work nolist nowarn memtype = (data view);
   delete W17GRCZV;
quit;

proc sql;
   create view work.W17GRCZV as
   select
      coalesce(W1B87YYR.VALID_FROM_DTTM , W1B889DD.VALID_FROM_DTTM) as VALID_FROM_DTTM length = 8   
         format = DATETIME20.
         informat = DATETIME20.
         label = 'VALID_FROM_DTTM',
      coalesce(W1B87YYR.FINANCIAL_INSTRUMENT_ID, W1B889DD.FINANCIAL_INSTRUMENT_ID) as FINANCIAL_INSTRUMENT_ID length = 32   
         format = $32.
         informat = $32.
         label = 'FINANCIAL_INSTRUMENT_ID',
      coalesce(W1B87YYR.IRB_SRC_ACCOUNT_ID, W1B889DD.IRB_SRC_ACCOUNT_ID) as IRB_SRC_ACCOUNT_ID length = 32   
         format = $32.
         informat = $32.
         label = 'IRB_SRC_ACCOUNT_ID',
      coalesce(W1B87YYR.DDAT, W1B889DD.DDAT) as DDAT length = 8   
         format = DATETIME20.
         informat = DATETIME20.
         label = 'DDAT',
      W1B889DD.IRB_DUMMY_TYPE_CD length = 3   
         format = $3.
         informat = $3.
         label = 'IRB_DUMMY_TYPE_CD',
      coalesce(W1B87YYR.SETTLEMENT_TYPE_CD ,W1B889DD.SETTLEMENT_TYPE_CD ) as SETTLEMENT_TYPE_CD length = 3   
         format = $3.
         informat = $3.
         label = 'SETTLEMENT_TYPE_CD'
   from
      work.W1B87YYR full join 
      work.W1B889DD
         on
         (
            W1B87YYR.IRB_SRC_ACCOUNT_ID = W1B889DD.IRB_SRC_ACCOUNT_ID
         )
   ;
quit;

%global etls_sql_pushDown;
%let etls_sql_pushDown = &sys_sql_ip_all;

%rcSet(&sqlrc); 



/**  Step end Вяжем первые записи ног в одну запись **/

/*==========================================================================* 
 * Step:            Вяжем актуальные записи ног в одну    A5Y50FNE.AQ0009PI * 
 *                   запись                                                 * 
 * Transform:       Join                                                    * 
 * Description:                                                             * 
 *                                                                          * 
 * Source Tables:   actual1 recs - work.W1BAZY4C          A5Y50FNE.AO0005FD * 
 *                  actual2 recs - work.W1BB1D6X          A5Y50FNE.AO0005FE * 
 * Target Table:    actual recs - work.W1AL1VEQ           A5Y50FNE.AO0005FG * 
 *==========================================================================*/ 

%let transformID = %quote(A5Y50FNE.AQ0009PI);
%let trans_rc = 0;
%let etls_stepStartTime = %sysfunc(datetime(), datetime20.); 

%let etls_recCheckExist = 0; 
%let etls_recnt = 0; 
%macro etls_recordCheck; 
   %let etls_recCheckExist = %eval(%sysfunc(exist(work.W1BAZY4C, DATA)) or 
         %sysfunc(exist(work.W1BAZY4C, VIEW))); 
   
   %if (&etls_recCheckExist) %then
   %do;
      %local etls_syntaxcheck; 
      %let etls_syntaxcheck = %sysfunc(getoption(syntaxcheck)); 
      /* Turn off syntaxcheck option to perform following steps  */ 
      options nosyntaxcheck;
      
      proc contents data = work.W1BAZY4C out = work.etls_contents(keep = nobs) noprint; 
      run; 
      
      data _null_; 
         set work.etls_contents (obs = 1); 
         call symput("etls_recnt", left(put(nobs,32.))); 
      run;
      
      proc datasets lib = work nolist nowarn memtype = (data view);
         delete etls_contents;
      quit;
      
      /* Reset syntaxcheck option to previous setting  */ 
      options &etls_syntaxcheck; 
   %end;
%mend etls_recordCheck;
%etls_recordCheck;

%let SYS_SQL_IP_SPEEDO = Y;
%let SYS_SQL_MAPPUTTO = sas_put;
%let SYS_SQLREDUCEPUT = DBMS;
%global etls_sql_pushDown;
%let etls_sql_pushDown = -1;
option DBIDIRECTEXEC;

proc datasets lib = work nolist nowarn memtype = (data view);
   delete W1AL1VEQ;
quit;

proc sql;
   create view work.W1AL1VEQ as
   select
      coalesce(W1BAZY4C.FINANCIAL_INSTRUMENT_ID, W1BB1D6X.FINANCIAL_INSTRUMENT_ID) as FINANCIAL_INSTRUMENT_ID length = 32   
         format = $32.
         informat = $32.
         label = 'FINANCIAL_INSTRUMENT_ID',
      W1BAZY4C.IRB_INSTR_STATUS_CD as IRB_INSTR_STATUS_CD1 length = 3   
         format = $3.
         informat = $3.
         label = 'IRB_INSTR_STATUS_CD',
      coalesce(W1BAZY4C.IRB_SRC_ACCOUNT_ID, W1BB1D6X.IRB_SRC_ACCOUNT_ID) as IRB_SRC_ACCOUNT_ID length = 32   
         format = $32.
         informat = $32.
         label = 'IRB_SRC_ACCOUNT_ID',
      coalesce(W1BAZY4C.ARM302P_ID, W1BB1D6X.ARM302P_ID) as ARM302P_ID length = 8   
         format = 11.
         informat = 11.
         label = 'ARM302P_ID',
      coalesce(W1BAZY4C.FXMM_ID, W1BB1D6X.FXMM_ID) as FXMM_ID length = 8   
         format = 11.
         informat = 11.
         label = 'FXMM_ID',
      coalesce(W1BAZY4C.BRCA, W1BB1D6X.BRCA) as BRCA length = 3   
         format = $3.
         informat = $3.
         label = 'BRCA',
      W1BB1D6X.IRB_INSTR_STATUS_CD as IRB_INSTR_STATUS_CD2 length = 3   
         format = $3.
         informat = $3.
         label = 'IRB_INSTR_STATUS_CD',
      coalesce(W1BB1D6X.LNKDN2, W1BAZY4C.LNKDN1) as LNKDN length = 8   
         format = 7.
         informat = 7.
         label = 'LNKDN',
      coalesce(W1BAZY4C.FINANCIAL_INSTRUMENT_TYPE_CD, W1BB1D6X.FINANCIAL_INSTRUMENT_TYPE_CD) as FINANCIAL_INSTRUMENT_TYPE_CD length = 3   
         format = $3.
         informat = $3.
         label = 'FINANCIAL_INSTRUMENT_TYPE_CD',
      coalesce(W1BAZY4C.KONDOR_A, W1BB1D6X.KONDOR_A) as KONDOR_A length = 8   
         format = 11.
         informat = 11.
         label = 'KONDOR_A',
      coalesce(W1BAZY4C.CURRENCY_CD, W1BB1D6X.CURRENCY_CD) as CURRENCY_CD length = 3   
         format = $3.
         informat = $3.
         label = 'CURRENCY_CD',
      coalesce(W1BAZY4C.CNUM, W1BB1D6X.CNUM) as CNUM length = 8   
         format = 7.
         informat = 7.
         label = 'CNUM',
      coalesce(W1BB1D6X.MDAT2, W1BAZY4C.MDAT1) as MDAT length = 8   
         format = DATETIME20.
         informat = DATETIME20.
         label = 'MDAT',
      W1BB1D6X.IRB_DUMMY_TYPE_CD length = 3   
         format = $3.
         informat = $3.
         label = 'IRB_DUMMY_TYPE_CD',
      coalesce(W1BAZY4C.SETTLEMENT_TYPE_CD ,W1BB1D6X.SETTLEMENT_TYPE_CD ) as SETTLEMENT_TYPE_CD length = 3   
         format = $3.
         informat = $3.
         label = 'SETTLEMENT_TYPE_CD',
      coalesce(W1BB1D6X.LCD2, W1BAZY4C.LCD1) as LCD length = 8   
         format = 6.
         informat = 6.
         label = 'LCD',
      coalesce(W1BB1D6X.DDAT2, W1BAZY4C.DDAT1) as DDAT length = 8   
         format = DATETIME20.
         informat = DATETIME20.
         label = 'DDAT'
   from
      work.W1BAZY4C full join 
      work.W1BB1D6X
         on
         (
            W1BAZY4C.IRB_SRC_ACCOUNT_ID = W1BB1D6X.IRB_SRC_ACCOUNT_ID
         )
   ;
quit;

%global etls_sql_pushDown;
%let etls_sql_pushDown = &sys_sql_ip_all;

%rcSet(&sqlrc); 



/**  Step end Вяжем актуальные записи ног в одну запись **/

/*==========================================================================* 
 * Step:            Собираем данные по сделке             A5Y50FNE.AQ0009PJ * 
 * Transform:       Join                                                    * 
 * Description:                                                             * 
 *                                                                          * 
 * Source Tables:   first recs - work.W17GRCZV            A5Y50FNE.AO0005FF * 
 *                  actual recs - work.W1AL1VEQ           A5Y50FNE.AO0005FG * 
 * Target Table:    SQL Join - work.W1B4DNDN              A5Y50FNE.AO0005FH * 
 *==========================================================================*/ 

%let transformID = %quote(A5Y50FNE.AQ0009PJ);
%let trans_rc = 0;
%let etls_stepStartTime = %sysfunc(datetime(), datetime20.); 

%let etls_recnt = -1;
%let SYS_SQL_IP_SPEEDO = Y;
%let SYS_SQL_MAPPUTTO = sas_put;
%let SYS_SQLREDUCEPUT = DBMS;
%global etls_sql_pushDown;
%let etls_sql_pushDown = -1;
option DBIDIRECTEXEC;

proc datasets lib = work nolist nowarn memtype = (data view);
   delete W1B4DNDN;
quit;

proc sql;
   create view work.W1B4DNDN as
   select
      W17GRCZV.VALID_FROM_DTTM length = 8   
         format = DATETIME20.
         informat = DATETIME20.
         label = 'VALID_FROM_DTTM',
      W17GRCZV.IRB_SRC_ACCOUNT_ID length = 32   
         format = $32.
         informat = $32.
         label = 'IRB_SRC_ACCOUNT_ID',
      W1AL1VEQ.IRB_INSTR_STATUS_CD1 length = 3   
         format = $3.
         informat = $3.
         label = 'IRB_INSTR_STATUS_CD',
      W1AL1VEQ.DDAT length = 8   
         format = DATETIME20.
         informat = DATETIME20.
         label = 'DDAT',
      W1AL1VEQ.ARM302P_ID length = 8   
         format = 11.
         informat = 11.
         label = 'ARM302P_ID',
      W1AL1VEQ.FXMM_ID length = 8   
         format = 11.
         informat = 11.
         label = 'FXMM_ID',
      W1AL1VEQ.BRCA length = 3   
         format = $3.
         informat = $3.
         label = 'BRCA',
      W1AL1VEQ.IRB_INSTR_STATUS_CD2 length = 3   
         format = $3.
         informat = $3.
         label = 'IRB_INSTR_STATUS_CD',
      W1AL1VEQ.LNKDN length = 8   
         format = 7.
         informat = 7.
         label = 'LNKDN',
      W1AL1VEQ.FINANCIAL_INSTRUMENT_TYPE_CD length = 3   
         format = $3.
         informat = $3.
         label = 'FINANCIAL_INSTRUMENT_TYPE_CD',
      W1AL1VEQ.KONDOR_A length = 8   
         format = 11.
         informat = 11.
         label = 'KONDOR_A',
      W1AL1VEQ.CURRENCY_CD length = 3   
         format = $3.
         informat = $3.
         label = 'CURRENCY_CD',
      W1AL1VEQ.CNUM length = 8   
         format = 7.
         informat = 7.
         label = 'CNUM',
      W1AL1VEQ.MDAT length = 8   
         format = DATETIME20.
         informat = DATETIME20.
         label = 'MDAT',
      W1AL1VEQ.IRB_DUMMY_TYPE_CD length = 3   
         format = $3.
         informat = $3.
         label = 'IRB_DUMMY_TYPE_CD',
      W1AL1VEQ.SETTLEMENT_TYPE_CD length = 3   
         format = $3.
         informat = $3.
         label = 'SETTLEMENT_TYPE_CD',
      W1AL1VEQ.LCD length = 8   
         format = 6.
         informat = 6.
         label = 'LCD'
   from
      work.W17GRCZV, 
      work.W1AL1VEQ
   where
      W17GRCZV.IRB_SRC_ACCOUNT_ID = W1AL1VEQ.IRB_SRC_ACCOUNT_ID
   ;
quit;

%global etls_sql_pushDown;
%let etls_sql_pushDown = &sys_sql_ip_all;

%rcSet(&sqlrc); 



/**  Step end Собираем данные по сделке **/

/*==========================================================================* 
 * Step:            Готовим данные для FINANCIAL_ACCOUNT  A5Y50FNE.AQ0009PK * 
 * Transform:       Extract                                                 * 
 * Description:                                                             * 
 *                                                                          * 
 * Source Table:    SQL Join - work.W1B4DNDN              A5Y50FNE.AO0005FH * 
 * Target Table:    Extract - work.W1MOEVV1               A5Y50FNE.AO0005FI * 
 *==========================================================================*/ 

%let transformID = %quote(A5Y50FNE.AQ0009PK);
%let trans_rc = 0;
%let etls_stepStartTime = %sysfunc(datetime(), datetime20.); 

%let etls_recnt = -1;
%let SYSLAST = %nrquote(work.W1B4DNDN); 

%let SYS_SQL_IP_SPEEDO = Y;
%let SYS_SQL_MAPPUTTO = sas_put;
%let SYS_SQLREDUCEPUT = DBMS;
%global etls_sql_pushDown;
%let etls_sql_pushDown = -1;
option DBIDIRECTEXEC;

/*---- Map the columns  ----*/ 
proc datasets lib = work nolist nowarn memtype = (data view);
   delete W1MOEVV1;
quit;

data _null_;
   put "NOTE: The following column(s) do not have a column mapping, so the"
        " value(s) will be set to missing: DAY_BASIS_CD,"
        " INTEREST_PAYMENT_TYPE_CD";
run;

%put %str(NOTE: Mapping columns ...);
proc sql;
   create view work.W1MOEVV1 as
      select
         VALID_FROM_DTTM,
         (&ETL_SCD_FUTURE_DTTM) as VALID_TO_DTTM length = 8
            format = DATETIME20.
            informat = DATETIME20.
            label = 'VALID_TO_DTTM',
         ('MID') as SOURCE_SYSTEM_CD length = 3
            format = $3.
            informat = $3.
            label = 'SOURCE_SYSTEM_CD',
         (ifc(missing(KONDOR_A), '', cats(KONDOR_A))) as ACCOUNT_REGISTRATION_NM length = 100
            format = $100.
            informat = $100.
            label = 'ACCOUNT_REGISTRATION_NM',
         (ifc(missing(ARM302P_ID), '', cats(FXMM_ID, '_', ARM302P_ID))) as ALTERNATE_ACCOUNT_NM length = 40
            format = $40.
            informat = $40.
            label = 'ALTERNATE_ACCOUNT_NM',
         ('DRV') as FINANCIAL_ACCOUNT_TYPE_CD length = 3
            format = $3.
            informat = $3.
            label = 'FINANCIAL_ACCOUNT_TYPE_CD',
         BRCA,
         (ifc(IRB_INSTR_STATUS_CD1 = 'DUM' or IRB_INSTR_STATUS_CD2 = 'DUM', 'DUM', 
              ifc(IRB_INSTR_STATUS_CD1 = 'AUT' or IRB_INSTR_STATUS_CD2 = 'AUT', 'AUT', 
                ifc(IRB_INSTR_STATUS_CD1 = 'REV' or IRB_INSTR_STATUS_CD2 = 'REV', 'REV', 'MAT')))) as ACCOUNT_STATUS_CD length = 3
            format = $3.
            informat = $3.
            label = 'ACCOUNT_STATUS_CD',
         DDAT as OPEN_DT   
            label = 'OPEN_DT',
         (ifn( coalesce(MDAT, 0) <> 0, MDAT, 
              ifn( coalesce(LNKDN, 0) = 0, ., 
                dhms(input( substr(put(LNKDN, z6.), 1, 4) || '20' || substr(put(LNKDN, z6.), 5, 2), ddmmyy8.), 0, 0, 0) ))) as CLOSE_DT_MAT length = 8
            format = DATETIME20.
            informat = DATETIME20.
            label = 'CLOSE_DT',
         (ifn( coalesce(MDAT, 0) <> 0, min(MDAT, LCD),  
              ifn( coalesce(LNKDN, 0) = 0, LCD,  
                min( dhms(input( substr(put(LNKDN, z6.), 1, 4) || '20' || substr(put(LNKDN, z6.), 5, 2), ddmmyy8.), 0, 0, 0), LCD ) ))) as CLOSE_DT_REV length = 8
            format = DATETIME20.
            informat = DATETIME20.
            label = 'CLOSE_DT',
         (coalesce(CURRENCY_CD, 'DUM')) as CURRENCY_CD length = 3
            format = $3.
            informat = $3.
            label = 'CURRENCY_CD',
         "" as DAY_BASIS_CD length = 10
            format = $10.
            informat = $10.
            label = 'DAY_BASIS_CD',
         "" as INTEREST_PAYMENT_TYPE_CD length = 3
            format = $3.
            informat = $3.
            label = 'INTEREST_PAYMENT_TYPE_CD',
         IRB_SRC_ACCOUNT_ID,
         FINANCIAL_INSTRUMENT_TYPE_CD,
         (put(CNUM, z8.)) as CUSTOMER_NO length = 9
            format = $9.
            informat = $9.
            label = 'CNUM',
         IRB_DUMMY_TYPE_CD,
         SETTLEMENT_TYPE_CD
   from &SYSLAST
   ;
quit;

%let SYSLAST = work.W1MOEVV1;

%global etls_sql_pushDown;
%let etls_sql_pushDown = &sys_sql_ip_all;

%rcSet(&sqlrc); 



/**  Step end Готовим данные для FINANCIAL_ACCOUNT **/

/*==========================================================================* 
 * Step:            Генерация BK                          A5Y50FNE.AQ0009PL * 
 * Transform:       Генерация BK                                            * 
 * Description:                                                             * 
 *                                                                          * 
 * Source Table:    Extract - work.W1MOEVV1               A5Y50FNE.AO0005FI * 
 * Target Table:    Генерация BKtpOut - work.W1MHBF25     A5Y50FNE.AO0005FJ * 
 *==========================================================================*/ 

%let transformID = %quote(A5Y50FNE.AQ0009PL);
%let trans_rc = 0;
%let etls_stepStartTime = %sysfunc(datetime(), datetime20.); 

%let etls_recnt = -1;
%let SYSLAST = %nrquote(work.W1MOEVV1); 

%let _INPUT_count = 1; 
%let _INPUT = work.W1MOEVV1;
%let _INPUT_connect = ;
%let _INPUT_engine = ;
%let _INPUT_memtype = VIEW;
%let _INPUT_options = %nrquote();
%let _INPUT_alter = %nrquote();
%let _INPUT_path = %nrquote(/Extract_A5Y50FNE.AO0005FI%(WorkTable%));
%let _INPUT_type = 1;
%let _INPUT_label = %nrquote();

%let tpIn = work.W1MOEVV1;
%let tpIn_connect = ;
%let tpIn_engine = ;
%let tpIn_memtype = VIEW;
%let tpIn_options = %nrquote();
%let tpIn_alter = %nrquote();
%let tpIn_path = %nrquote(/Extract_A5Y50FNE.AO0005FI%(WorkTable%));
%let tpIn_type = 1;
%let tpIn_label = %nrquote();

%let _OUTPUT_count = 1; 
%let _OUTPUT = work.W1MHBF25;
%let _OUTPUT_connect = ;
%let _OUTPUT_engine = ;
%let _OUTPUT_memtype = DATA;
%let _OUTPUT_options = %nrquote();
%let _OUTPUT_alter = %nrquote();
%let _OUTPUT_path = %nrquote(/Генерация BKtpOut_A5Y50FNE.AO0005FJ%(WorkTable%));
%let _OUTPUT_type = 1;
%let _OUTPUT_label = %nrquote();
/* List of target columns to keep  */ 
%let _OUTPUT_keep = DRV_ACCOUNT_ID VALID_FROM_DTTM VALID_TO_DTTM SOURCE_SYSTEM_CD 
        ACCOUNT_REGISTRATION_NM ALTERNATE_ACCOUNT_NM FINANCIAL_ACCOUNT_TYPE_CD 
        ACCOUNT_STATUS_CD OPEN_DT CLOSE_DT_MAT CLOSE_DT_REV CURRENCY_CD 
        DAY_BASIS_CD INTEREST_PAYMENT_TYPE_CD IRB_SRC_ACCOUNT_ID 
        MID_FINANCIAL_UNIT_ID_BRCA FCC_COUNTERPARTY_ID BRCA 
        FINANCIAL_INSTRUMENT_TYPE_CD IRB_DUMMY_TYPE_CD SETTLEMENT_TYPE_CD;

%let tpOut = work.W1MHBF25;
%let tpOut_connect = ;
%let tpOut_engine = ;
%let tpOut_memtype = DATA;
%let tpOut_options = %nrquote();
%let tpOut_alter = %nrquote();
%let tpOut_path = %nrquote(/Генерация BKtpOut_A5Y50FNE.AO0005FJ%(WorkTable%));
%let tpOut_type = 1;
%let tpOut_label = %nrquote();
/* List of target columns to keep  */ 
%let tpOut_keep = DRV_ACCOUNT_ID VALID_FROM_DTTM VALID_TO_DTTM SOURCE_SYSTEM_CD 
        ACCOUNT_REGISTRATION_NM ALTERNATE_ACCOUNT_NM FINANCIAL_ACCOUNT_TYPE_CD 
        ACCOUNT_STATUS_CD OPEN_DT CLOSE_DT_MAT CLOSE_DT_REV CURRENCY_CD 
        DAY_BASIS_CD INTEREST_PAYMENT_TYPE_CD IRB_SRC_ACCOUNT_ID 
        MID_FINANCIAL_UNIT_ID_BRCA FCC_COUNTERPARTY_ID BRCA 
        FINANCIAL_INSTRUMENT_TYPE_CD IRB_DUMMY_TYPE_CD SETTLEMENT_TYPE_CD;


proc datasets lib=work nolist nowarn memtype = (data view);
   delete W1MHBF25;
quit;

%let tpBK = %nrquote(FINANCIAL_ACCOUNT_DRV           );
%let tpBK0 = %nrquote(3);
%let tpBK1 = %nrquote(FINANCIAL_ACCOUNT_DRV           );
%let tpBK2 = %nrquote(FINANCIAL_UNIT_MID_BRCA         );
%let tpBK3 = %nrquote(FCC_COUNTERPARTY_FCC            );
%let tpBK_count = %nrquote(3);
%let tpOptionalBK_count = %nrquote(0);
%let tpOptionalBK = ;

/* List of target columns to keep  */ 
%let _keep = DRV_ACCOUNT_ID VALID_FROM_DTTM VALID_TO_DTTM SOURCE_SYSTEM_CD 
        ACCOUNT_REGISTRATION_NM ALTERNATE_ACCOUNT_NM FINANCIAL_ACCOUNT_TYPE_CD 
        ACCOUNT_STATUS_CD OPEN_DT CLOSE_DT_MAT CLOSE_DT_REV CURRENCY_CD 
        DAY_BASIS_CD INTEREST_PAYMENT_TYPE_CD IRB_SRC_ACCOUNT_ID 
        MID_FINANCIAL_UNIT_ID_BRCA FCC_COUNTERPARTY_ID BRCA 
        FINANCIAL_INSTRUMENT_TYPE_CD IRB_DUMMY_TYPE_CD SETTLEMENT_TYPE_CD;
/* List of target columns to keep  */ 
%let keep = DRV_ACCOUNT_ID VALID_FROM_DTTM VALID_TO_DTTM SOURCE_SYSTEM_CD 
        ACCOUNT_REGISTRATION_NM ALTERNATE_ACCOUNT_NM FINANCIAL_ACCOUNT_TYPE_CD 
        ACCOUNT_STATUS_CD OPEN_DT CLOSE_DT_MAT CLOSE_DT_REV CURRENCY_CD 
        DAY_BASIS_CD INTEREST_PAYMENT_TYPE_CD IRB_SRC_ACCOUNT_ID 
        MID_FINANCIAL_UNIT_ID_BRCA FCC_COUNTERPARTY_ID BRCA 
        FINANCIAL_INSTRUMENT_TYPE_CD IRB_DUMMY_TYPE_CD SETTLEMENT_TYPE_CD;
/*****************************************************************
* ВЕРСИЯ:
*     $Id: transform_generate_bk.sas 4889 2013-04-04 09:14:07Z nesterenok $
*
******************************************************************
* НАЗНАЧЕНИЕ:
*     Генерирует бизнес-ключи в таблице по списку.
*
* ПАРАМЕТРЫ:
*     tpIn                    +  имя входного набора
*     tpBK                    +  список кодов обязательных для генерации бизнес-ключей, разделенный пробелами
*                                Такой бизнес-ключ станет дамми, если заполнены не все поля, его составляющие
*                                FK к ETL_SYS.ETL_BK.BK_CD
*     tpOptionalBK            +  список кодов НЕобязательных для генерации бизнес-ключей, разделенный пробелами
*                                Такой бизнес-ключ останется пустым, если заполнены не все поля, его составляющие
*     tpOut                   +  имя выходного набора
*
******************************************************************/

%macro transform_generate_bk;
   %let tpBK_count         = %unquote(&tpBK_count);
   %let tpOptionalBK_count = %unquote(&tpOptionalBK_count);

   %local lmvDummyRows lmvFieldDummyCount lmvDummyRequired;
   %let lmvDummyRows       = work.tr_gen_bk_dummy_rows;
   %let lmvFieldDummyCount = etl_dummy_count;
   %let lmvDummyRequired   = %eval (&tpBK_count gt 0);

   /* Макросы для генерации одного ключа */
   %macro sm_trans_gen_bk_required;
      %etl_generate_bk (
         mpFieldBK=&bk_field_nm, mpLengthBK=%sysfunc(inputn(&bk_type_cd, bkt_cd_len.)),
         mpColumnList=&bk_column_list_txt, mpFormat=&bk_format_txt,
         mpFieldDummy=&lmvFieldDummy, mpFieldDummyCount=&lmvFieldDummyCount
      );
   %mend;
   %macro sm_trans_gen_bk_optional;
      %etl_generate_bk (
         mpFieldBK=&bk_field_nm, mpLengthBK=%sysfunc(inputn(&bk_type_cd, bkt_cd_len.)),
         mpColumnList=&bk_column_list_txt, mpFormat=&bk_format_txt,
         mpFieldDummy=
      );
   %mend;

   /* Макрос для подстановки в дамми-ключ уникального номера */
   %macro sm_trans_gen_bk_dummy;
      if &lmvFieldDummy gt 0 then do;
         set &lmvDummyIds (keep=OBJECT_ID rename=(OBJECT_ID=&lmvFieldDummy._no)) point=&lmvFieldDummy;
         &bk_field_nm = cats (&bk_field_nm, "_", &lmvFieldDummy._no);

         %error_check;
      end;
   %mend;


   /* Создаем выходной набор итерацией по всем заявленным бизнес-ключам */
   /* Считаем необходимое кол-во дамми-ключей */
   %local lmvBkIndex lmvFieldDummy lmvDummyCount;
   %let lmvDummyCount   = 0;
   data
      %if &lmvDummyRequired %then %do;
         &tpOut (drop= etl_dummy_:)
         &lmvDummyRows
      %end;
      %else %do;
         &tpOut
      %end;
   ;
      set &tpIn end=ds_end;

      /* Генерация необязательных ключей */
      %do lmvBkIndex=1 %to &tpOptionalBK_count;
         %util_loop_data (mpLoopMacro=sm_trans_gen_bk_optional, mpData=ETL_SYS.ETL_BK,
                          mpWhere=BK_CD eq %util_quote(&&tpOptionalBK&lmvBkIndex)
         );
      %end;

      %if &lmvDummyRequired %then %do;
         length &lmvFieldDummyCount 8;
         drop &lmvFieldDummyCount;
         retain &lmvFieldDummyCount 0;

         /* Генерация обязательных ключей */
         %do lmvBkIndex=1 %to &tpBK_count;
            %let lmvFieldDummy = etl_dummy_&lmvBkIndex.;

            %util_loop_data (mpLoopMacro=sm_trans_gen_bk_required, mpData=ETL_SYS.ETL_BK,
                             mpWhere=BK_CD eq %util_quote(&&tpBK&lmvBkIndex)
            );
         %end;

         /* Если в какой-то записи есть дамми, то не выводим ее сразу */
         if sum (of etl_dummy_1-etl_dummy_&tpBK_count) = 0 then
            output &tpOut;
         else do;
            output &lmvDummyRows;
         end;

         if ds_end then call symputx ("lmvDummyCount", &lmvFieldDummyCount);
      %end;
      %else %do;
         output &tpOut;
      %end;
   run;
   %error_check (mpStepType=DATA);

   /* Если дамми нет, то всё */
   %if (not &lmvDummyRequired) or (&lmvDummyCount eq 0) %then %return;


   /* Для каждого дамми генерируем уникальный номер */
   %local lmvDummyIds;
   %let lmvDummyIds = work.tr_gen_bk_dummy_ids;
   %unique_ids (mpIdCount=&lmvDummyCount, mpOut=&lmvDummyIds, mpSequenceName=ETL_DUMMY_SEQ);

   /* Добавляем номер к дамми */
   data &lmvDummyRows._id (drop= etl_dummy_:);
      set &lmvDummyRows;

      %do lmvBkIndex=1 %to &tpBK_count;
         %let lmvFieldDummy = etl_dummy_&lmvBkIndex.;

         %util_loop_data (mpLoopMacro=sm_trans_gen_bk_dummy, mpData=ETL_SYS.ETL_BK,
                          mpWhere=BK_CD eq %util_quote(&&tpBK&lmvBkIndex)
         );
      %end;
   run;
   %error_check (mpStepType=DATA);


   /* Добавляем дамми-строки к выходному набору */
   proc append base=&tpOut data=&lmvDummyRows._id;
   run;
   %error_check (mpStepType=DATA);

%mend transform_generate_bk;

%transform_generate_bk;

%rcSet(&syserr); 
%rcSet(&sysrc); 
%rcSet(&sqlrc); 



/**  Step end Генерация BK **/

/*==========================================================================* 
 * Step:            Table Loader                          A5Y50FNE.AQ0009PM * 
 * Transform:       Table Loader (Version 2.1)                              * 
 * Description:                                                             * 
 *                                                                          * 
 * Source Table:    Генерация BKtpOut - work.W1MHBF25     A5Y50FNE.AO0005FJ * 
 * Target Table:    CUSTOMER_X_FIN_ACC_CIS_BK -           A5Y50FNE.AE00011L * 
 *                   work_ia.CUSTOMER_X_FIN_ACC_CIS_BK                      * 
 *==========================================================================*/ 

%let transformID = %quote(A5Y50FNE.AQ0009PM);
%let trans_rc = 0;
%let etls_stepStartTime = %sysfunc(datetime(), datetime20.); 

%let SYSLAST = %nrquote(work.W1MHBF25); 

%let SYS_SQL_IP_SPEEDO = Y;
%let SYS_SQL_MAPPUTTO = sas_put;
%let SYS_SQLREDUCEPUT = DBMS;
%global etls_sql_pushDown;
%let etls_sql_pushDown = -1;
option DBIDIRECTEXEC;

%global etls_tableExist;
%global etls_numIndex;
%global etls_lastTable;
%let etls_tableExist = -1; 
%let etls_numIndex = -1; 
%let etls_lastTable = &SYSLAST; 

/*---- Define load data macro  ----*/ 

/* --------------------------------------------------------------
   Load Technique Selection: Replace - EntireTable
   Constraint and index action selections: 'INIT','ASIS','ASIS','ASIS'
   Additional options selections... 
      Set unmapped to missing on updates: false 
   -------------------------------------------------------------- */
%macro etls_loader;

   %let etls_tableOptions = ;
   
   /*---- Map the columns  ----*/ 
   proc datasets lib = work nolist nowarn memtype = (data view);
      delete WIRO0UM;
   quit;
   
   data _null_;
      put "NOTE: The following column(s) do not have a column mapping, so the"
           " value(s) will be set to missing: RELSHP_TO_PRIMARY_CD,"
           " EFFECTIVE_FROM_DTTM, EFFECTIVE_TO_DTTM";
   run;
   
   %put %str(NOTE: Mapping columns ...);
   proc sql;
      create view work.WIRO0UM as
         select
            FCC_COUNTERPARTY_ID as CUSTOMER_ID,
            DRV_ACCOUNT_ID as ACCOUNT_ID,
            VALID_FROM_DTTM,
            VALID_TO_DTTM,
            "" as RELSHP_TO_PRIMARY_CD length = 3
               format = $3.
               informat = $3.,
            ('DDC') as RELATIONSHIP_TO_ACCOUNT_CD length = 3
               format = $3.
               informat = $3.,
            . as EFFECTIVE_FROM_DTTM length = 8
               format = DATETIME20.
               informat = DATETIME20.,
            . as EFFECTIVE_TO_DTTM length = 8
               format = DATETIME20.
               informat = DATETIME20.
      from &etls_lastTable
      ;
   quit;
   
   %let SYSLAST = work.WIRO0UM;
   
   %let etls_lastTable = &SYSLAST; 
   %let etls_tableOptions = ; 
   
   /* Determine if the target table exists  */ 
   %let etls_tableExist = %eval(%sysfunc(exist(work_ia.CUSTOMER_X_FIN_ACC_CIS_BK, DATA)) or 
         %sysfunc(exist(work_ia.CUSTOMER_X_FIN_ACC_CIS_BK, VIEW))); 
   
   %if &etls_tableExist %then 
   %do;/* table exists  */ 
      %let etls_hasPreExistingConstraint=0; 
      
      proc datasets lib = work nolist nowarn memtype = (data view);
         delete etls_commands etls_commands_F;
      quit;
      
      %let etls_otherTablesReferToThisTable=0;
      
      %macro etls_CIContents(table=,workTableOut=,inDSOptions=);
         %put NOTE: Building table listing Constraints and Indexes for: &table;
         proc datasets lib=work nolist; delete &workTableOut; quit;
         proc contents data=&table&inDSOptions out2=&workTableOut noprint; run;
         
         data &workTableOut;
            length name $60 type $20 icown idxUnique idxNoMiss $3 recreate $600;
            set &workTableOut;
            type=upcase(type);
            if type eq 'REFERENTIAL' then
            do;
               put "WARNING%QUOTE(:) Target table is referenced by constraints in"
                    " another table: " ref;
               call symput('etls_otherTablesReferToThisTable','1');
               delete;
            end;
            if type='INDEX' and ICOwn eq 'YES' then delete;
         run;
         %rcSet(&syserr); 
         
      %mend etls_CIContents;
      
      %etls_CIContents(table=work_ia.CUSTOMER_X_FIN_ACC_CIS_BK, workTableOut=etls_commands, inDSOptions=);
      
      %if &etls_otherTablesReferToThisTable %then 
         %put WARNING%QUOTE(:) Replacing entire table will fail. Consider an alternate load technique or revising constraints.; 
      %else 
      %do; /* okay - remove foreign keys  */ 
      
         data etls_commands_F; 
            set etls_commands; 
            if upcase(type)="FOREIGN KEY" then 
            do; 
               command='ic delete '||trim(name)||';';
               output etls_commands_F; 
            end; 
         run; 
         
         %put %str(NOTE: Removing foreign keys before dropping table...);
         data _null_;
            set etls_commands_F;
            %rcSet(&syserr); 
            
      %end; /* okay - remove foreign keys  */ 
      
      proc datasets lib = work nolist nowarn memtype = (data view);
         delete etls_commands etls_commands_F;
      quit;
      
      /*---- Drop a table  ----*/ 
      %put %str(NOTE: Dropping table ...);
      proc datasets lib = work_ia nolist nowarn memtype = (data view);
         delete CUSTOMER_X_FIN_ACC_CIS_BK;
      quit;
      
      %rcSet(&syserr); 
      
      %let etls_tableExist = 0;
      
   %end; /* table exists  */ 
   
   /*---- Create a new table  ----*/ 
   %if (&etls_tableExist eq 0) %then 
   %do;  /* if table does not exist  */ 
   
      %put %str(NOTE: Creating table ...);
      
      data work_ia.CUSTOMER_X_FIN_ACC_CIS_BK;
         attrib CUSTOMER_ID length = $32
            format = $32.
            informat = $32.
            label = 'CUSTOMER_ID'; 
         attrib ACCOUNT_ID length = $32
            format = $32.
            informat = $32.
            label = 'ACCOUNT_ID'; 
         attrib VALID_FROM_DTTM length = 8
            format = DATETIME20.
            informat = DATETIME20.
            label = 'VALID_FROM_DTTM'; 
         attrib VALID_TO_DTTM length = 8
            format = DATETIME20.
            informat = DATETIME20.
            label = 'VALID_TO_DTTM'; 
         attrib RELSHP_TO_PRIMARY_CD length = $3
            format = $3.
            informat = $3.
            label = 'RELSHP_TO_PRIMARY_CD'; 
         attrib RELATIONSHIP_TO_ACCOUNT_CD length = $3
            format = $3.
            informat = $3.
            label = 'RELATIONSHIP_TO_ACCOUNT_CD'; 
         attrib EFFECTIVE_FROM_DTTM length = 8
            format = DATETIME20.
            informat = DATETIME20.
            label = 'EFFECTIVE_FROM_DTTM'; 
         attrib EFFECTIVE_TO_DTTM length = 8
            format = DATETIME20.
            informat = DATETIME20.
            label = 'EFFECTIVE_TO_DTTM'; 
         call missing(of _all_);
         stop;
      run;
      
      %rcSet(&syserr); 
      
      /*---- Create the integrity constraints for a table  ----*/ 
      %put %str(NOTE: Creating integrity constraints ...);
      proc datasets library=work_ia nolist;
         modify CUSTOMER_X_FIN_ACC_CIS_BK;
            ic create not null (CUSTOMER_ID);
            ic create not null (ACCOUNT_ID);
            ic create not null (VALID_FROM_DTTM);
            ic create not null (VALID_TO_DTTM);
            ic create not null (RELATIONSHIP_TO_ACCOUNT_CD);
            ic create Index1 = primary key (CUSTOMER_ID ACCOUNT_ID VALID_FROM_DTTM 
                           RELATIONSHIP_TO_ACCOUNT_CD);
      quit;
      
      %rcSet(&syserr); 
      
   %end;  /* if table does not exist  */ 
   
   /*---- Append  ----*/ 
   %put %str(NOTE: Appending data ...);
   
   proc append base = work_ia.CUSTOMER_X_FIN_ACC_CIS_BK 
      data = &etls_lastTable (&etls_tableOptions)  force ; 
    run; 
   
   %rcSet(&syserr); 
   
   proc datasets lib = work nolist nowarn memtype = (data view);
      delete WIRO0UM;
   quit;
   
%mend etls_loader;
%etls_loader;

%let etls_recCheckExist = 0; 
%let etls_recnt = 0; 
%macro etls_recordCheck; 
   %let etls_recCheckExist = %eval(%sysfunc(exist(work_ia.CUSTOMER_X_FIN_ACC_CIS_BK, DATA)) or 
         %sysfunc(exist(work_ia.CUSTOMER_X_FIN_ACC_CIS_BK, VIEW))); 
   
   %if (&etls_recCheckExist) %then
   %do;
      %local etls_syntaxcheck; 
      %let etls_syntaxcheck = %sysfunc(getoption(syntaxcheck)); 
      /* Turn off syntaxcheck option to perform following steps  */ 
      options nosyntaxcheck;
      
      proc contents data = work_ia.CUSTOMER_X_FIN_ACC_CIS_BK out = work.etls_contents(keep = nobs) noprint; 
      run; 
      
      data _null_; 
         set work.etls_contents (obs = 1); 
         call symput("etls_recnt", left(put(nobs,32.))); 
      run;
      
      proc datasets lib = work nolist nowarn memtype = (data view);
         delete etls_contents;
      quit;
      
      /* Reset syntaxcheck option to previous setting  */ 
      options &etls_syntaxcheck; 
   %end;
%mend etls_recordCheck;
%etls_recordCheck;



/**  Step end Table Loader **/

/*==========================================================================* 
 * Step:            Вяжем актуальные записи ног со        A5Y50FNE.AQ0009PN * 
 *                   сделкой                                                * 
 * Transform:       Join                                                    * 
 * Description:                                                             * 
 *                                                                          * 
 * Source Tables:   actual1 recs - work.W1BAZY4C          A5Y50FNE.AO0005FD * 
 *                  Генерация BKtpOut - work.W1MHBF25     A5Y50FNE.AO0005FJ * 
 * Target Table:    SQL Join - work.WFBG6LA               A5Y50FNE.AO0005FK * 
 *==========================================================================*/ 

%let transformID = %quote(A5Y50FNE.AQ0009PN);
%let trans_rc = 0;
%let etls_stepStartTime = %sysfunc(datetime(), datetime20.); 

%let etls_recCheckExist = 0; 
%let etls_recnt = 0; 
%macro etls_recordCheck; 
   %let etls_recCheckExist = %eval(%sysfunc(exist(work.W1BAZY4C, DATA)) or 
         %sysfunc(exist(work.W1BAZY4C, VIEW))); 
   
   %if (&etls_recCheckExist) %then
   %do;
      %local etls_syntaxcheck; 
      %let etls_syntaxcheck = %sysfunc(getoption(syntaxcheck)); 
      /* Turn off syntaxcheck option to perform following steps  */ 
      options nosyntaxcheck;
      
      proc contents data = work.W1BAZY4C out = work.etls_contents(keep = nobs) noprint; 
      run; 
      
      data _null_; 
         set work.etls_contents (obs = 1); 
         call symput("etls_recnt", left(put(nobs,32.))); 
      run;
      
      proc datasets lib = work nolist nowarn memtype = (data view);
         delete etls_contents;
      quit;
      
      /* Reset syntaxcheck option to previous setting  */ 
      options &etls_syntaxcheck; 
   %end;
%mend etls_recordCheck;
%etls_recordCheck;

%let SYS_SQL_IP_SPEEDO = Y;
%let SYS_SQL_MAPPUTTO = sas_put;
%let SYS_SQLREDUCEPUT = DBMS;
%global etls_sql_pushDown;
%let etls_sql_pushDown = -1;
option DBIDIRECTEXEC;

proc datasets lib = work nolist nowarn memtype = (data view);
   delete WFBG6LA;
quit;

proc sql;
   create view work.WFBG6LA as
   select
      W1BAZY4C.FINANCIAL_INSTRUMENT_ID length = 32   
         format = $32.
         informat = $32.
         label = 'FINANCIAL_INSTRUMENT_ID',
      W1MHBF25.DRV_ACCOUNT_ID length = 32   
         format = $32.
         informat = $32.
         label = 'ACCOUNT_ID',
      W1MHBF25.VALID_FROM_DTTM length = 8   
         format = DATETIME20.
         informat = DATETIME20.
         label = 'VALID_FROM_DTTM',
      W1MHBF25.VALID_TO_DTTM length = 8   
         format = DATETIME20.
         informat = DATETIME20.
         label = 'VALID_TO_DTTM'
   from
      work.W1BAZY4C inner join 
      work.W1MHBF25
         on
         (
            W1BAZY4C.IRB_SRC_ACCOUNT_ID = W1MHBF25.IRB_SRC_ACCOUNT_ID
         )
   ;
quit;

%global etls_sql_pushDown;
%let etls_sql_pushDown = &sys_sql_ip_all;

%rcSet(&sqlrc); 



/**  Step end Вяжем актуальные записи ног со сделкой **/

/*==========================================================================* 
 * Step:            Вяжем актуальные записи ног со        A5Y50FNE.AQ0009PO * 
 *                   сделкой                                                * 
 * Transform:       Join                                                    * 
 * Description:                                                             * 
 *                                                                          * 
 * Source Tables:   actual2 recs - work.W1BB1D6X          A5Y50FNE.AO0005FE * 
 *                  Генерация BKtpOut - work.W1MHBF25     A5Y50FNE.AO0005FJ * 
 * Target Table:    SQL Join - work.WFBH9I3               A5Y50FNE.AO0005FL * 
 *==========================================================================*/ 

%let transformID = %quote(A5Y50FNE.AQ0009PO);
%let trans_rc = 0;
%let etls_stepStartTime = %sysfunc(datetime(), datetime20.); 

%let etls_recCheckExist = 0; 
%let etls_recnt = 0; 
%macro etls_recordCheck; 
   %let etls_recCheckExist = %eval(%sysfunc(exist(work.W1BB1D6X, DATA)) or 
         %sysfunc(exist(work.W1BB1D6X, VIEW))); 
   
   %if (&etls_recCheckExist) %then
   %do;
      %local etls_syntaxcheck; 
      %let etls_syntaxcheck = %sysfunc(getoption(syntaxcheck)); 
      /* Turn off syntaxcheck option to perform following steps  */ 
      options nosyntaxcheck;
      
      proc contents data = work.W1BB1D6X out = work.etls_contents(keep = nobs) noprint; 
      run; 
      
      data _null_; 
         set work.etls_contents (obs = 1); 
         call symput("etls_recnt", left(put(nobs,32.))); 
      run;
      
      proc datasets lib = work nolist nowarn memtype = (data view);
         delete etls_contents;
      quit;
      
      /* Reset syntaxcheck option to previous setting  */ 
      options &etls_syntaxcheck; 
   %end;
%mend etls_recordCheck;
%etls_recordCheck;

%let SYS_SQL_IP_SPEEDO = Y;
%let SYS_SQL_MAPPUTTO = sas_put;
%let SYS_SQLREDUCEPUT = DBMS;
%global etls_sql_pushDown;
%let etls_sql_pushDown = -1;
option DBIDIRECTEXEC;

proc datasets lib = work nolist nowarn memtype = (data view);
   delete WFBH9I3;
quit;

proc sql;
   create view work.WFBH9I3 as
   select
      W1BB1D6X.FINANCIAL_INSTRUMENT_ID length = 32   
         format = $32.
         informat = $32.
         label = 'FINANCIAL_INSTRUMENT_ID',
      W1MHBF25.DRV_ACCOUNT_ID length = 32   
         format = $32.
         informat = $32.
         label = 'ACCOUNT_ID',
      W1MHBF25.VALID_FROM_DTTM length = 8   
         format = DATETIME20.
         informat = DATETIME20.
         label = 'VALID_FROM_DTTM',
      W1MHBF25.VALID_TO_DTTM length = 8   
         format = DATETIME20.
         informat = DATETIME20.
         label = 'VALID_TO_DTTM'
   from
      work.W1BB1D6X inner join 
      work.W1MHBF25
         on
         (
            W1BB1D6X.IRB_SRC_ACCOUNT_ID = W1MHBF25.IRB_SRC_ACCOUNT_ID
         )
   ;
quit;

%global etls_sql_pushDown;
%let etls_sql_pushDown = &sys_sql_ip_all;

%rcSet(&sqlrc); 



/**  Step end Вяжем актуальные записи ног со сделкой **/

/*==========================================================================* 
 * Step:            Append                                A5Y50FNE.AQ0009PP * 
 * Transform:       Append                                                  * 
 * Description:                                                             * 
 *                                                                          * 
 * Source Tables:   SQL Join - work.WFBG6LA               A5Y50FNE.AO0005FK * 
 *                  SQL Join - work.WFBH9I3               A5Y50FNE.AO0005FL * 
 * Target Table:    Append - work.WFD6IQ0                 A5Y50FNE.AO0005FM * 
 *==========================================================================*/ 

%let transformID = %quote(A5Y50FNE.AQ0009PP);
%let trans_rc = 0;
%let etls_stepStartTime = %sysfunc(datetime(), datetime20.); 

%let etls_recnt = -1;
%let dbxrc = %eval(%sysfunc(exist(work.WFBG6LA, DATA)) or 
      %sysfunc(exist(work.WFBG6LA, VIEW))); 

/*---- Map the columns  ----*/ 
proc datasets lib = work nolist nowarn memtype = (data view);
   delete WIRO0YH;
quit;

%put %str(NOTE: Mapping columns ...);
proc sql;
   create view work.WIRO0YH as
      select
         VALID_FROM_DTTM,
         VALID_TO_DTTM,
         FINANCIAL_INSTRUMENT_ID,
         DRV_ACCOUNT_ID as REFERENCE_ACCOUNT_ID   
            label = 'FINANCIAL_ACCOUNT_ID'
   from work.WFBG6LA
   ;
quit;

%let SYSLAST = work.WIRO0YH;

%let dbxrc = %eval(%sysfunc(exist(work.WFBH9I3, DATA)) or 
      %sysfunc(exist(work.WFBH9I3, VIEW))); 

/*---- Map the columns  ----*/ 
proc datasets lib = work nolist nowarn memtype = (data view);
   delete WIRO0YN;
quit;

%put %str(NOTE: Mapping columns ...);
proc sql;
   create view work.WIRO0YN as
      select
         VALID_FROM_DTTM,
         VALID_TO_DTTM,
         FINANCIAL_INSTRUMENT_ID,
         DRV_ACCOUNT_ID as REFERENCE_ACCOUNT_ID   
            label = 'FINANCIAL_ACCOUNT_ID'
   from work.WFBH9I3
   ;
quit;

%let SYSLAST = work.WIRO0YN;

proc datasets lib = work nolist nowarn memtype = (data view);
   delete WFD6IQ0;
quit;

data work.WFD6IQ0 / view=work.WFD6IQ0;
   set work.WIRO0YH
       work.WIRO0YN;
   keep VALID_FROM_DTTM VALID_TO_DTTM FINANCIAL_INSTRUMENT_ID REFERENCE_ACCOUNT_ID; 
run;

%rcSet(&syserr); 



/**  Step end Append **/

/*==========================================================================* 
 * Step:            Table Loader                          A5Y50FNE.AQ0009PQ * 
 * Transform:       Table Loader (Version 2.1)                              * 
 * Description:                                                             * 
 *                                                                          * 
 * Source Table:    Генерация BKtpOut - work.W1MHBF25     A5Y50FNE.AO0005FJ * 
 * Target Table:    FINANCIAL_ACCOUNT_CIS_BK -            A5Y50FNE.AE00012F * 
 *                   work_ia.FINANCIAL_ACCOUNT_CIS_BK                       * 
 *==========================================================================*/ 

%let transformID = %quote(A5Y50FNE.AQ0009PQ);
%let trans_rc = 0;
%let etls_stepStartTime = %sysfunc(datetime(), datetime20.); 

%let SYSLAST = %nrquote(work.W1MHBF25); 

%let SYS_SQL_IP_SPEEDO = Y;
%let SYS_SQL_MAPPUTTO = sas_put;
%let SYS_SQLREDUCEPUT = DBMS;
%global etls_sql_pushDown;
%let etls_sql_pushDown = -1;
option DBIDIRECTEXEC;

%global etls_tableExist;
%global etls_numIndex;
%global etls_lastTable;
%let etls_tableExist = -1; 
%let etls_numIndex = -1; 
%let etls_lastTable = &SYSLAST; 

/*---- Define load data macro  ----*/ 

/* --------------------------------------------------------------
   Load Technique Selection: Replace - EntireTable
   Constraint and index action selections: 'INIT','ASIS','ASIS','ASIS'
   Additional options selections... 
      Set unmapped to missing on updates: false 
   -------------------------------------------------------------- */
%macro etls_loader;

   %let etls_tableOptions = ;
   
   /*---- Map the columns  ----*/ 
   proc datasets lib = work nolist nowarn memtype = (data view);
      delete WIRO0ZK;
   quit;
   
   data _null_;
      put "NOTE: The following column(s) do not have a column mapping, so the"
           " value(s) will be set to missing: AUTO_DEBIT_ACCOUNT_TYPE_CD,"
           " ACCOUNT_REGISTRATION_TYPE_CD, CLOSE_REASON_CD,    ACCOUNT_TAX_ID,"
           " EXPECTED_LOSS_PCT, INDIVIDUAL_ORGANIZATION_CD, SOURCE_CD,   "
           " OPENING_CHANNEL_CD, PREFERRED_CHANNEL_CD, PRIMARY_PHONE_NO,   "
           " PRIMARY_PHONE_TYPE_CD, SECONDARY_PHONE_NO, SECONDARY_PHONE_TYPE_CD,"
           "    MAILABLE_FLG, TELEPHONABLE_FLG, EMAIL_FLG, SMS_FLG,"
           " DO_NOT_CONTACT_FLG,    EMPLOYEE_RK, CURRENCY_BASED_ACCOUNT_FLG,"
           " FEE_BASED_FLG, ANNUAL_FEES_AMT,    MONTHLY_FEES_AMT, CAMPAIGN_CD,"
           " COMMUNICATION_CD, REGISTERED_ONLINE_DT,    FIRST_LOGIN_DT,"
           " ONLINE_BILL_PAYMENT_FLG, ID_VERIFICATION_TYPE_CD,   "
           " PREVIOUS_ACCOUNT_ID, OPEN_BRANCH_FINANCIAL_UNIT_ID,   "
           " FINANCIAL_APPLICATION_ID, CREDIT_FACILITY_ID,"
           " FUTURE_MARGIN_INCOME_AMT,    IN_DEFAULT_FLG, FINANCIAL_BOOK_ID,"
           " IRRECOVERABLE_FLG,    OWNED_BY_INTERNAL_ORG_ID,"
           " PREVIOUS_BANK_EXTERNAL_ORG_ID, NETTING_SET_ID,    REVOLVING_FLG,"
           " SOURCE_CHANNEL_CD, GRACE_PERIOD_DAYS_CNT,    REMARGINING_DAYS_CNT,"
           " FINANCIAL_CALENDAR_ID, PORTFOLIO_ID,    SECURITIZATION_POOL_ID,"
           " RECEIVABLES_POOL_ID, ACCOUNT_USAGE_TYPE_CD,    RISK_ALARM_FLG,"
           " LOW_PROFITABILITY_FLG, ACCOUNT_LIFECYCLE_STG_CD,   "
           " ATTRITION_ALARM_FLG, BALANCE_FROZEN_FLG, BALANCE_FROZEN_DT,   "
           " ACCOUNT_BLOCK_REASON_CD, TAXATION_STATE_CD,"
           " EFFECTIVE_MATURITY_YEAR_NO,    GL_ACCOUNT_ID,"
           " FROM_OTHER_INSTITUTION_FLG, ACCOUNT_RENEWAL_CNT,   "
           " BALANCE_TRANSFER_DT, BALANCE_TRANSFER_AMT, BALANCE_TRANSFER_CNT,   "
           " BASE_LONG_TERM_APR_RT, BROKER_FLG, MULT_RATE_FLG,"
           " AUTO_DEBIT_ACCOUNT_NO,    WORST_STATUS_LAST_12_MTH_CD,"
           " WORST_STATUS_LAST_12_MTH_DT,    BALANCE_TRNSF_OTHER_ACCT_CNT,"
           " EFFECTIVE_FROM_DTTM, EFFECTIVE_TO_DTTM,    COUNTERPARTY_ID,"
           " INSURED_BY_COUNTERPARTY_ID, STATEMENT_FREQUENCY_CD,   "
           " SECURITY_DEPOSIT_AMT, SECURITY_DEPOSIT_REFUND_AMT,"
           " FIRST_PAYMENT_DT,    LAST_PAYMENT_DT, FIRST_RESET_DT,"
           " LAST_RESET_DT, RESETS_PER_ANNUM_NO,    PRINCIPAL_PAYMENT_TYPE_CD,"
           " PRINCIPAL_PAYMENT_AMT, RATE_POLICY_ID, SPREAD_RT,   "
           " DISCOUNT_SPREAD_RT, INITIAL_CONTRACT_RT,"
           " FIXED_MONTHLY_PREPAYMENT_RT,    CAPITAL_ALLOCATION_ID,"
           " CAPITAL_COST_ID, SEGMENT_ID,    NEAR_BRANCH_FINANCIAL_UNIT_ID,"
           " STATEMENT_OPT_FLG, VALUE_SCALING_FACTOR_RT,   "
           " INTERNAL_REPORTING_CATEGORY_CD, CONVEXITY_ADJUSTMENT_FLG,   "
           " ARREARS_PAYMENT_CD, QUANTO_FEATURE_ID, CASH_INTENSIVE_BUSINESS_FLG,"
           "    LETTER_OF_CREDIT_ONFILE_FLG, TRADE_FINANCE_FLG,"
           " ANNUITY_PAYMENT_TYPE_CD,    INTEREST_PAYMENT_TIME_FREQ_CD,"
           " LIQUIDITY_CATEGORY_TYPE_CD,    HOLIDAY_DATE_ROLL_CONV_CD,"
           " WEEKEND_DATE_ROLL_CONV_CD, EXPENSE_ALLOCATION_ID,   "
           " FIRST_INTEREST_PAYMENT_DT, LAST_INTEREST_PAYMENT_DT";
   run;
   
   %put %str(NOTE: Mapping columns ...);
   proc sql;
      create view work.WIRO0ZK as
         select
            DRV_ACCOUNT_ID as ACCOUNT_ID,
            VALID_FROM_DTTM,
            VALID_TO_DTTM,
            SOURCE_SYSTEM_CD,
            ACCOUNT_REGISTRATION_NM,
            ALTERNATE_ACCOUNT_NM,
            FINANCIAL_ACCOUNT_TYPE_CD,
            "" as AUTO_DEBIT_ACCOUNT_TYPE_CD length = 3
               format = $3.
               informat = $3.,
            "" as ACCOUNT_REGISTRATION_TYPE_CD length = 3
               format = $3.
               informat = $3.,
            ACCOUNT_STATUS_CD,
            OPEN_DT,
            (case (ACCOUNT_STATUS_CD) 
               when 'MAT' then CLOSE_DT_MAT 
               when 'REV' then CLOSE_DT_REV 
               else . 
               end) as CLOSE_DT length = 8
               format = DATETIME20.
               informat = DATETIME20.,
            "" as CLOSE_REASON_CD length = 3
               format = $3.
               informat = $3.,
            "" as ACCOUNT_TAX_ID length = 32
               format = $32.
               informat = $32.,
            . as EXPECTED_LOSS_PCT length = 8
               format = 11.4
               informat = 11.4,
            "" as INDIVIDUAL_ORGANIZATION_CD length = 3
               format = $3.
               informat = $3.,
            "" as SOURCE_CD length = 5
               format = $5.
               informat = $5.,
            "" as OPENING_CHANNEL_CD length = 3
               format = $3.
               informat = $3.,
            "" as PREFERRED_CHANNEL_CD length = 3
               format = $3.
               informat = $3.,
            CURRENCY_CD,
            "" as PRIMARY_PHONE_NO length = 20
               format = $20.
               informat = $20.,
            "" as PRIMARY_PHONE_TYPE_CD length = 3
               format = $3.
               informat = $3.,
            "" as SECONDARY_PHONE_NO length = 20
               format = $20.
               informat = $20.,
            "" as SECONDARY_PHONE_TYPE_CD length = 3
               format = $3.
               informat = $3.,
            "" as MAILABLE_FLG length = 1
               format = $1.
               informat = $1.,
            "" as TELEPHONABLE_FLG length = 1
               format = $1.
               informat = $1.,
            "" as EMAIL_FLG length = 1
               format = $1.
               informat = $1.,
            "" as SMS_FLG length = 1
               format = $1.
               informat = $1.,
            "" as DO_NOT_CONTACT_FLG length = 1
               format = $1.
               informat = $1.,
            . as EMPLOYEE_RK length = 8
               format = 11.
               informat = 11.,
            "" as CURRENCY_BASED_ACCOUNT_FLG length = 1
               format = $1.
               informat = $1.,
            "" as FEE_BASED_FLG length = 1
               format = $1.
               informat = $1.,
            . as ANNUAL_FEES_AMT length = 8
               format = 20.5
               informat = 20.5,
            . as MONTHLY_FEES_AMT length = 8
               format = 20.5
               informat = 20.5,
            "" as CAMPAIGN_CD length = 30
               format = $30.
               informat = $30.,
            "" as COMMUNICATION_CD length = 30
               format = $30.
               informat = $30.,
            . as REGISTERED_ONLINE_DT length = 8
               format = DATETIME20.
               informat = DATETIME20.,
            . as FIRST_LOGIN_DT length = 8
               format = DATETIME20.
               informat = DATETIME20.,
            "" as ONLINE_BILL_PAYMENT_FLG length = 1
               format = $1.
               informat = $1.,
            "" as ID_VERIFICATION_TYPE_CD length = 3
               format = $3.
               informat = $3.,
            "" as PREVIOUS_ACCOUNT_ID length = 32
               format = $32.
               informat = $32.,
            "" as OPEN_BRANCH_FINANCIAL_UNIT_ID length = 32
               format = $32.
               informat = $32.,
            MID_FINANCIAL_UNIT_ID_BRCA as PRIM_BRANCH_FINANCIAL_UNIT_ID,
            "" as FINANCIAL_APPLICATION_ID length = 32
               format = $32.
               informat = $32.,
            "" as CREDIT_FACILITY_ID length = 40
               format = $40.
               informat = $40.,
            . as FUTURE_MARGIN_INCOME_AMT length = 8
               format = 20.5
               informat = 20.5,
            "" as IN_DEFAULT_FLG length = 1
               format = $1.
               informat = $1.,
            "" as FINANCIAL_BOOK_ID length = 32
               format = $32.
               informat = $32.,
            "" as IRRECOVERABLE_FLG length = 1
               format = $1.
               informat = $1.,
            "" as OWNED_BY_INTERNAL_ORG_ID length = 32
               format = $32.
               informat = $32.,
            "" as PREVIOUS_BANK_EXTERNAL_ORG_ID length = 32
               format = $32.
               informat = $32.,
            "" as NETTING_SET_ID length = 32
               format = $32.
               informat = $32.,
            "" as REVOLVING_FLG length = 1
               format = $1.
               informat = $1.,
            "" as SOURCE_CHANNEL_CD length = 3
               format = $3.
               informat = $3.,
            . as GRACE_PERIOD_DAYS_CNT length = 8
               format = 7.
               informat = 7.,
            . as REMARGINING_DAYS_CNT length = 8
               format = 7.
               informat = 7.,
            "" as FINANCIAL_CALENDAR_ID length = 32
               format = $32.
               informat = $32.,
            DAY_BASIS_CD,
            "" as PORTFOLIO_ID length = 32
               format = $32.
               informat = $32.,
            "" as SECURITIZATION_POOL_ID length = 32
               format = $32.
               informat = $32.,
            "" as RECEIVABLES_POOL_ID length = 32
               format = $32.
               informat = $32.,
            "" as ACCOUNT_USAGE_TYPE_CD length = 3
               format = $3.
               informat = $3.,
            "" as RISK_ALARM_FLG length = 1
               format = $1.
               informat = $1.,
            "" as LOW_PROFITABILITY_FLG length = 1
               format = $1.
               informat = $1.,
            "" as ACCOUNT_LIFECYCLE_STG_CD length = 3
               format = $3.
               informat = $3.,
            "" as ATTRITION_ALARM_FLG length = 1
               format = $1.
               informat = $1.,
            "" as BALANCE_FROZEN_FLG length = 1
               format = $1.
               informat = $1.,
            . as BALANCE_FROZEN_DT length = 8
               format = DATETIME20.
               informat = DATETIME20.,
            "" as ACCOUNT_BLOCK_REASON_CD length = 3
               format = $3.
               informat = $3.,
            "" as TAXATION_STATE_CD length = 4
               format = $4.
               informat = $4.,
            . as EFFECTIVE_MATURITY_YEAR_NO length = 8
               format = 9.3
               informat = 9.3,
            "" as GL_ACCOUNT_ID length = 32
               format = $32.
               informat = $32.,
            "" as FROM_OTHER_INSTITUTION_FLG length = 1
               format = $1.
               informat = $1.,
            . as ACCOUNT_RENEWAL_CNT length = 8
               format = 7.
               informat = 7.,
            . as BALANCE_TRANSFER_DT length = 8
               format = DATETIME20.
               informat = DATETIME20.,
            . as BALANCE_TRANSFER_AMT length = 8
               format = 20.5
               informat = 20.5,
            . as BALANCE_TRANSFER_CNT length = 8
               format = 7.
               informat = 7.,
            . as BASE_LONG_TERM_APR_RT length = 8
               format = 11.4
               informat = 11.4,
            "" as BROKER_FLG length = 1
               format = $1.
               informat = $1.,
            "" as MULT_RATE_FLG length = 1
               format = $1.
               informat = $1.,
            "" as AUTO_DEBIT_ACCOUNT_NO length = 32
               format = $32.
               informat = $32.,
            "" as WORST_STATUS_LAST_12_MTH_CD length = 3
               format = $3.
               informat = $3.,
            . as WORST_STATUS_LAST_12_MTH_DT length = 8
               format = DATETIME20.
               informat = DATETIME20.,
            . as BALANCE_TRNSF_OTHER_ACCT_CNT length = 8
               format = 7.
               informat = 7.,
            . as EFFECTIVE_FROM_DTTM length = 8
               format = DATETIME20.
               informat = DATETIME20.,
            . as EFFECTIVE_TO_DTTM length = 8
               format = DATETIME20.
               informat = DATETIME20.,
            "" as COUNTERPARTY_ID length = 32
               format = $32.
               informat = $32.,
            "" as INSURED_BY_COUNTERPARTY_ID length = 32
               format = $32.
               informat = $32.,
            "" as STATEMENT_FREQUENCY_CD length = 3
               format = $3.
               informat = $3.,
            . as SECURITY_DEPOSIT_AMT length = 8
               format = 20.5
               informat = 20.5,
            . as SECURITY_DEPOSIT_REFUND_AMT length = 8
               format = 20.5
               informat = 20.5,
            . as FIRST_PAYMENT_DT length = 8
               format = DATETIME20.
               informat = DATETIME20.,
            . as LAST_PAYMENT_DT length = 8
               format = DATETIME20.
               informat = DATETIME20.,
            . as FIRST_RESET_DT length = 8
               format = DATETIME20.
               informat = DATETIME20.,
            . as LAST_RESET_DT length = 8
               format = DATETIME20.
               informat = DATETIME20.,
            . as RESETS_PER_ANNUM_NO length = 8
               format = 6.
               informat = 6.,
            "" as PRINCIPAL_PAYMENT_TYPE_CD length = 3
               format = $3.
               informat = $3.,
            . as PRINCIPAL_PAYMENT_AMT length = 8
               format = 20.5
               informat = 20.5,
            "" as RATE_POLICY_ID length = 32
               format = $32.
               informat = $32.,
            . as SPREAD_RT length = 8
               format = 11.4
               informat = 11.4,
            . as DISCOUNT_SPREAD_RT length = 8
               format = 11.4
               informat = 11.4,
            . as INITIAL_CONTRACT_RT length = 8
               format = 11.4
               informat = 11.4,
            . as FIXED_MONTHLY_PREPAYMENT_RT length = 8
               format = 11.4
               informat = 11.4,
            "" as CAPITAL_ALLOCATION_ID length = 32
               format = $32.
               informat = $32.,
            "" as CAPITAL_COST_ID length = 32
               format = $32.
               informat = $32.,
            "" as SEGMENT_ID length = 32
               format = $32.
               informat = $32.,
            "" as NEAR_BRANCH_FINANCIAL_UNIT_ID length = 32
               format = $32.
               informat = $32.,
            "" as STATEMENT_OPT_FLG length = 1
               format = $1.
               informat = $1.,
            . as VALUE_SCALING_FACTOR_RT length = 8
               format = 11.4
               informat = 11.4,
            "" as INTERNAL_REPORTING_CATEGORY_CD length = 3
               format = $3.
               informat = $3.,
            "" as CONVEXITY_ADJUSTMENT_FLG length = 1
               format = $1.
               informat = $1.,
            "" as ARREARS_PAYMENT_CD length = 3
               format = $3.
               informat = $3.,
            "" as QUANTO_FEATURE_ID length = 32
               format = $32.
               informat = $32.,
            "" as CASH_INTENSIVE_BUSINESS_FLG length = 1
               format = $1.
               informat = $1.,
            "" as LETTER_OF_CREDIT_ONFILE_FLG length = 1
               format = $1.
               informat = $1.,
            "" as TRADE_FINANCE_FLG length = 1
               format = $1.
               informat = $1.,
            "" as ANNUITY_PAYMENT_TYPE_CD length = 3
               format = $3.
               informat = $3.,
            INTEREST_PAYMENT_TYPE_CD,
            "" as INTEREST_PAYMENT_TIME_FREQ_CD length = 3
               format = $3.
               informat = $3.,
            "" as LIQUIDITY_CATEGORY_TYPE_CD length = 3
               format = $3.
               informat = $3.,
            "" as HOLIDAY_DATE_ROLL_CONV_CD length = 3
               format = $3.
               informat = $3.,
            "" as WEEKEND_DATE_ROLL_CONV_CD length = 3
               format = $3.
               informat = $3.,
            "" as EXPENSE_ALLOCATION_ID length = 32
               format = $32.
               informat = $32.,
            . as FIRST_INTEREST_PAYMENT_DT length = 8
               format = DATETIME20.
               informat = DATETIME20.,
            . as LAST_INTEREST_PAYMENT_DT length = 8
               format = DATETIME20.
               informat = DATETIME20.,
            IRB_DUMMY_TYPE_CD,
            IRB_SRC_ACCOUNT_ID,
            BRCA,
            SETTLEMENT_TYPE_CD,
            FINANCIAL_INSTRUMENT_TYPE_CD
      from &etls_lastTable
      ;
   quit;
   
   %let SYSLAST = work.WIRO0ZK;
   
   %let etls_lastTable = &SYSLAST; 
   %let etls_tableOptions = ; 
   
   /* Determine if the target table exists  */ 
   %let etls_tableExist = %eval(%sysfunc(exist(work_ia.FINANCIAL_ACCOUNT_CIS_BK, DATA)) or 
         %sysfunc(exist(work_ia.FINANCIAL_ACCOUNT_CIS_BK, VIEW))); 
   
   %if &etls_tableExist %then 
   %do;/* table exists  */ 
      %let etls_hasPreExistingConstraint=0; 
      
      proc datasets lib = work nolist nowarn memtype = (data view);
         delete etls_commands etls_commands_F;
      quit;
      
      %let etls_otherTablesReferToThisTable=0;
      
      %macro etls_CIContents(table=,workTableOut=,inDSOptions=);
         %put NOTE: Building table listing Constraints and Indexes for: &table;
         proc datasets lib=work nolist; delete &workTableOut; quit;
         proc contents data=&table&inDSOptions out2=&workTableOut noprint; run;
         
         data &workTableOut;
            length name $60 type $20 icown idxUnique idxNoMiss $3 recreate $600;
            set &workTableOut;
            type=upcase(type);
            if type eq 'REFERENTIAL' then
            do;
               put "WARNING%QUOTE(:) Target table is referenced by constraints in"
                    " another table: " ref;
               call symput('etls_otherTablesReferToThisTable','1');
               delete;
            end;
            if type='INDEX' and ICOwn eq 'YES' then delete;
         run;
         %rcSet(&syserr); 
         
      %mend etls_CIContents;
      
      %etls_CIContents(table=work_ia.FINANCIAL_ACCOUNT_CIS_BK, workTableOut=etls_commands, inDSOptions=);
      
      %if &etls_otherTablesReferToThisTable %then 
         %put WARNING%QUOTE(:) Replacing entire table will fail. Consider an alternate load technique or revising constraints.; 
      %else 
      %do; /* okay - remove foreign keys  */ 
      
         data etls_commands_F; 
            set etls_commands; 
            if upcase(type)="FOREIGN KEY" then 
            do; 
               command='ic delete '||trim(name)||';';
               output etls_commands_F; 
            end; 
         run; 
         
         %put %str(NOTE: Removing foreign keys before dropping table...);
         data _null_;
            set etls_commands_F;
            %rcSet(&syserr); 
            
      %end; /* okay - remove foreign keys  */ 
      
      proc datasets lib = work nolist nowarn memtype = (data view);
         delete etls_commands etls_commands_F;
      quit;
      
      /*---- Drop a table  ----*/ 
      %put %str(NOTE: Dropping table ...);
      proc datasets lib = work_ia nolist nowarn memtype = (data view);
         delete FINANCIAL_ACCOUNT_CIS_BK;
      quit;
      
      %rcSet(&syserr); 
      
      %let etls_tableExist = 0;
      
   %end; /* table exists  */ 
   
   /*---- Create a new table  ----*/ 
   %if (&etls_tableExist eq 0) %then 
   %do;  /* if table does not exist  */ 
   
      %put %str(NOTE: Creating table ...);
      
      data work_ia.FINANCIAL_ACCOUNT_CIS_BK;
         attrib ACCOUNT_ID length = $32
            format = $32.
            informat = $32.
            label = 'ACCOUNT_ID'; 
         attrib VALID_FROM_DTTM length = 8
            format = DATETIME20.
            informat = DATETIME20.
            label = 'VALID_FROM_DTTM'; 
         attrib VALID_TO_DTTM length = 8
            format = DATETIME20.
            informat = DATETIME20.
            label = 'VALID_TO_DTTM'; 
         attrib SOURCE_SYSTEM_CD length = $3
            format = $3.
            informat = $3.
            label = 'SOURCE_SYSTEM_CD'; 
         attrib ACCOUNT_REGISTRATION_NM length = $100
            format = $100.
            informat = $100.
            label = 'ACCOUNT_REGISTRATION_NM'; 
         attrib ALTERNATE_ACCOUNT_NM length = $40
            format = $40.
            informat = $40.
            label = 'ALTERNATE_ACCOUNT_NM'; 
         attrib FINANCIAL_ACCOUNT_TYPE_CD length = $3
            format = $3.
            informat = $3.
            label = 'FINANCIAL_ACCOUNT_TYPE_CD'; 
         attrib AUTO_DEBIT_ACCOUNT_TYPE_CD length = $3
            format = $3.
            informat = $3.
            label = 'AUTO_DEBIT_ACCOUNT_TYPE_CD'; 
         attrib ACCOUNT_REGISTRATION_TYPE_CD length = $3
            format = $3.
            informat = $3.
            label = 'ACCOUNT_REGISTRATION_TYPE_CD'; 
         attrib ACCOUNT_STATUS_CD length = $3
            format = $3.
            informat = $3.
            label = 'ACCOUNT_STATUS_CD'; 
         attrib OPEN_DT length = 8
            format = DATETIME20.
            informat = DATETIME20.
            label = 'OPEN_DT'; 
         attrib CLOSE_DT length = 8
            format = DATETIME20.
            informat = DATETIME20.
            label = 'CLOSE_DT'; 
         attrib CLOSE_REASON_CD length = $3
            format = $3.
            informat = $3.
            label = 'CLOSE_REASON_CD'; 
         attrib ACCOUNT_TAX_ID length = $32
            format = $32.
            informat = $32.
            label = 'ACCOUNT_TAX_ID'; 
         attrib EXPECTED_LOSS_PCT length = 8
            format = 11.4
            informat = 11.4
            label = 'EXPECTED_LOSS_PCT'; 
         attrib INDIVIDUAL_ORGANIZATION_CD length = $3
            format = $3.
            informat = $3.
            label = 'INDIVIDUAL_ORGANIZATION_CD'; 
         attrib SOURCE_CD length = $5
            format = $5.
            informat = $5.
            label = 'SOURCE_CD'; 
         attrib OPENING_CHANNEL_CD length = $3
            format = $3.
            informat = $3.
            label = 'OPENING_CHANNEL_CD'; 
         attrib PREFERRED_CHANNEL_CD length = $3
            format = $3.
            informat = $3.
            label = 'PREFERRED_CHANNEL_CD'; 
         attrib CURRENCY_CD length = $3
            format = $3.
            informat = $3.
            label = 'CURRENCY_CD'; 
         attrib PRIMARY_PHONE_NO length = $20
            format = $20.
            informat = $20.
            label = 'PRIMARY_PHONE_NO'; 
         attrib PRIMARY_PHONE_TYPE_CD length = $3
            format = $3.
            informat = $3.
            label = 'PRIMARY_PHONE_TYPE_CD'; 
         attrib SECONDARY_PHONE_NO length = $20
            format = $20.
            informat = $20.
            label = 'SECONDARY_PHONE_NO'; 
         attrib SECONDARY_PHONE_TYPE_CD length = $3
            format = $3.
            informat = $3.
            label = 'SECONDARY_PHONE_TYPE_CD'; 
         attrib MAILABLE_FLG length = $1
            format = $1.
            informat = $1.
            label = 'MAILABLE_FLG'; 
         attrib TELEPHONABLE_FLG length = $1
            format = $1.
            informat = $1.
            label = 'TELEPHONABLE_FLG'; 
         attrib EMAIL_FLG length = $1
            format = $1.
            informat = $1.
            label = 'EMAIL_FLG'; 
         attrib SMS_FLG length = $1
            format = $1.
            informat = $1.
            label = 'SMS_FLG'; 
         attrib DO_NOT_CONTACT_FLG length = $1
            format = $1.
            informat = $1.
            label = 'DO_NOT_CONTACT_FLG'; 
         attrib EMPLOYEE_RK length = 8
            format = 11.
            informat = 11.
            label = 'EMPLOYEE_RK'; 
         attrib CURRENCY_BASED_ACCOUNT_FLG length = $1
            format = $1.
            informat = $1.
            label = 'CURRENCY_BASED_ACCOUNT_FLG'; 
         attrib FEE_BASED_FLG length = $1
            format = $1.
            informat = $1.
            label = 'FEE_BASED_FLG'; 
         attrib ANNUAL_FEES_AMT length = 8
            format = 20.5
            informat = 20.5
            label = 'ANNUAL_FEES_AMT'; 
         attrib MONTHLY_FEES_AMT length = 8
            format = 20.5
            informat = 20.5
            label = 'MONTHLY_FEES_AMT'; 
         attrib CAMPAIGN_CD length = $30
            format = $30.
            informat = $30.
            label = 'CAMPAIGN_CD'; 
         attrib COMMUNICATION_CD length = $30
            format = $30.
            informat = $30.
            label = 'COMMUNICATION_CD'; 
         attrib REGISTERED_ONLINE_DT length = 8
            format = DATETIME20.
            informat = DATETIME20.
            label = 'REGISTERED_ONLINE_DT'; 
         attrib FIRST_LOGIN_DT length = 8
            format = DATETIME20.
            informat = DATETIME20.
            label = 'FIRST_LOGIN_DT'; 
         attrib ONLINE_BILL_PAYMENT_FLG length = $1
            format = $1.
            informat = $1.
            label = 'ONLINE_BILL_PAYMENT_FLG'; 
         attrib ID_VERIFICATION_TYPE_CD length = $3
            format = $3.
            informat = $3.
            label = 'ID_VERIFICATION_TYPE_CD'; 
         attrib PREVIOUS_ACCOUNT_ID length = $32
            format = $32.
            informat = $32.
            label = 'PREVIOUS_ACCOUNT_ID'; 
         attrib OPEN_BRANCH_FINANCIAL_UNIT_ID length = $32
            format = $32.
            informat = $32.
            label = 'OPEN_BRANCH_FINANCIAL_UNIT_ID'; 
         attrib PRIM_BRANCH_FINANCIAL_UNIT_ID length = $32
            format = $32.
            informat = $32.
            label = 'PRIM_BRANCH_FINANCIAL_UNIT_ID'; 
         attrib FINANCIAL_APPLICATION_ID length = $32
            format = $32.
            informat = $32.
            label = 'FINANCIAL_APPLICATION_ID'; 
         attrib CREDIT_FACILITY_ID length = $40
            format = $40.
            informat = $40.
            label = 'CREDIT_FACILITY_ID'; 
         attrib FUTURE_MARGIN_INCOME_AMT length = 8
            format = 20.5
            informat = 20.5
            label = 'FUTURE_MARGIN_INCOME_AMT'; 
         attrib IN_DEFAULT_FLG length = $1
            format = $1.
            informat = $1.
            label = 'IN_DEFAULT_FLG'; 
         attrib FINANCIAL_BOOK_ID length = $32
            format = $32.
            informat = $32.
            label = 'FINANCIAL_BOOK_ID'; 
         attrib IRRECOVERABLE_FLG length = $1
            format = $1.
            informat = $1.
            label = 'IRRECOVERABLE_FLG'; 
         attrib OWNED_BY_INTERNAL_ORG_ID length = $32
            format = $32.
            informat = $32.
            label = 'OWNED_BY_INTERNAL_ORG_ID'; 
         attrib PREVIOUS_BANK_EXTERNAL_ORG_ID length = $32
            format = $32.
            informat = $32.
            label = 'PREVIOUS_BANK_EXTERNAL_ORG_ID'; 
         attrib NETTING_SET_ID length = $32
            format = $32.
            informat = $32.
            label = 'NETTING_SET_ID'; 
         attrib REVOLVING_FLG length = $1
            format = $1.
            informat = $1.
            label = 'REVOLVING_FLG'; 
         attrib SOURCE_CHANNEL_CD length = $3
            format = $3.
            informat = $3.
            label = 'SOURCE_CHANNEL_CD'; 
         attrib GRACE_PERIOD_DAYS_CNT length = 8
            format = 7.
            informat = 7.
            label = 'GRACE_PERIOD_DAYS_CNT'; 
         attrib REMARGINING_DAYS_CNT length = 8
            format = 7.
            informat = 7.
            label = 'REMARGINING_DAYS_CNT'; 
         attrib FINANCIAL_CALENDAR_ID length = $32
            format = $32.
            informat = $32.
            label = 'FINANCIAL_CALENDAR_ID'; 
         attrib DAY_BASIS_CD length = $10
            format = $10.
            informat = $10.
            label = 'DAY_BASIS_CD'; 
         attrib PORTFOLIO_ID length = $32
            format = $32.
            informat = $32.
            label = 'PORTFOLIO_ID'; 
         attrib SECURITIZATION_POOL_ID length = $32
            format = $32.
            informat = $32.
            label = 'SECURITIZATION_POOL_ID'; 
         attrib RECEIVABLES_POOL_ID length = $32
            format = $32.
            informat = $32.
            label = 'RECEIVABLES_POOL_ID'; 
         attrib ACCOUNT_USAGE_TYPE_CD length = $3
            format = $3.
            informat = $3.
            label = 'ACCOUNT_USAGE_TYPE_CD'; 
         attrib RISK_ALARM_FLG length = $1
            format = $1.
            informat = $1.
            label = 'RISK_ALARM_FLG'; 
         attrib LOW_PROFITABILITY_FLG length = $1
            format = $1.
            informat = $1.
            label = 'LOW_PROFITABILITY_FLG'; 
         attrib ACCOUNT_LIFECYCLE_STG_CD length = $3
            format = $3.
            informat = $3.
            label = 'ACCOUNT_LIFECYCLE_STG_CD'; 
         attrib ATTRITION_ALARM_FLG length = $1
            format = $1.
            informat = $1.
            label = 'ATTRITION_ALARM_FLG'; 
         attrib BALANCE_FROZEN_FLG length = $1
            format = $1.
            informat = $1.
            label = 'BALANCE_FROZEN_FLG'; 
         attrib BALANCE_FROZEN_DT length = 8
            format = DATETIME20.
            informat = DATETIME20.
            label = 'BALANCE_FROZEN_DT'; 
         attrib ACCOUNT_BLOCK_REASON_CD length = $3
            format = $3.
            informat = $3.
            label = 'ACCOUNT_BLOCK_REASON_CD'; 
         attrib TAXATION_STATE_CD length = $4
            format = $4.
            informat = $4.
            label = 'TAXATION_STATE_CD'; 
         attrib EFFECTIVE_MATURITY_YEAR_NO length = 8
            format = 9.3
            informat = 9.3
            label = 'EFFECTIVE_MATURITY_YEAR_NO'; 
         attrib GL_ACCOUNT_ID length = $32
            format = $32.
            informat = $32.
            label = 'GL_ACCOUNT_ID'; 
         attrib FROM_OTHER_INSTITUTION_FLG length = $1
            format = $1.
            informat = $1.
            label = 'FROM_OTHER_INSTITUTION_FLG'; 
         attrib ACCOUNT_RENEWAL_CNT length = 8
            format = 7.
            informat = 7.
            label = 'ACCOUNT_RENEWAL_CNT'; 
         attrib BALANCE_TRANSFER_DT length = 8
            format = DATETIME20.
            informat = DATETIME20.
            label = 'BALANCE_TRANSFER_DT'; 
         attrib BALANCE_TRANSFER_AMT length = 8
            format = 20.5
            informat = 20.5
            label = 'BALANCE_TRANSFER_AMT'; 
         attrib BALANCE_TRANSFER_CNT length = 8
            format = 7.
            informat = 7.
            label = 'BALANCE_TRANSFER_CNT'; 
         attrib BASE_LONG_TERM_APR_RT length = 8
            format = 11.4
            informat = 11.4
            label = 'BASE_LONG_TERM_APR_RT'; 
         attrib BROKER_FLG length = $1
            format = $1.
            informat = $1.
            label = 'BROKER_FLG'; 
         attrib MULT_RATE_FLG length = $1
            format = $1.
            informat = $1.
            label = 'MULT_RATE_FLG'; 
         attrib AUTO_DEBIT_ACCOUNT_NO length = $32
            format = $32.
            informat = $32.
            label = 'AUTO_DEBIT_ACCOUNT_NO'; 
         attrib WORST_STATUS_LAST_12_MTH_CD length = $3
            format = $3.
            informat = $3.
            label = 'WORST_STATUS_LAST_12_MTH_CD'; 
         attrib WORST_STATUS_LAST_12_MTH_DT length = 8
            format = DATETIME20.
            informat = DATETIME20.
            label = 'WORST_STATUS_LAST_12_MTH_DT'; 
         attrib BALANCE_TRNSF_OTHER_ACCT_CNT length = 8
            format = 7.
            informat = 7.
            label = 'BALANCE_TRNSF_OTHER_ACCT_CNT'; 
         attrib EFFECTIVE_FROM_DTTM length = 8
            format = DATETIME20.
            informat = DATETIME20.
            label = 'EFFECTIVE_FROM_DTTM'; 
         attrib EFFECTIVE_TO_DTTM length = 8
            format = DATETIME20.
            informat = DATETIME20.
            label = 'EFFECTIVE_TO_DTTM'; 
         attrib COUNTERPARTY_ID length = $32
            format = $32.
            informat = $32.
            label = 'COUNTERPARTY_ID'; 
         attrib INSURED_BY_COUNTERPARTY_ID length = $32
            format = $32.
            informat = $32.
            label = 'INSURED_BY_COUNTERPARTY_ID'; 
         attrib STATEMENT_FREQUENCY_CD length = $3
            format = $3.
            informat = $3.
            label = 'STATEMENT_FREQUENCY_CD'; 
         attrib SECURITY_DEPOSIT_AMT length = 8
            format = 20.5
            informat = 20.5
            label = 'SECURITY_DEPOSIT_AMT'; 
         attrib SECURITY_DEPOSIT_REFUND_AMT length = 8
            format = 20.5
            informat = 20.5
            label = 'SECURITY_DEPOSIT_REFUND_AMT'; 
         attrib FIRST_PAYMENT_DT length = 8
            format = DATETIME20.
            informat = DATETIME20.
            label = 'FIRST_PAYMENT_DT'; 
         attrib LAST_PAYMENT_DT length = 8
            format = DATETIME20.
            informat = DATETIME20.
            label = 'LAST_PAYMENT_DT'; 
         attrib FIRST_RESET_DT length = 8
            format = DATETIME20.
            informat = DATETIME20.
            label = 'FIRST_RESET_DT'; 
         attrib LAST_RESET_DT length = 8
            format = DATETIME20.
            informat = DATETIME20.
            label = 'LAST_RESET_DT'; 
         attrib RESETS_PER_ANNUM_NO length = 8
            format = 6.
            informat = 6.
            label = 'RESETS_PER_ANNUM_NO'; 
         attrib PRINCIPAL_PAYMENT_TYPE_CD length = $3
            format = $3.
            informat = $3.
            label = 'PRINCIPAL_PAYMENT_TYPE_CD'; 
         attrib PRINCIPAL_PAYMENT_AMT length = 8
            format = 20.5
            informat = 20.5
            label = 'PRINCIPAL_PAYMENT_AMT'; 
         attrib RATE_POLICY_ID length = $32
            format = $32.
            informat = $32.
            label = 'RATE_POLICY_ID'; 
         attrib SPREAD_RT length = 8
            format = 11.4
            informat = 11.4
            label = 'SPREAD_RT'; 
         attrib DISCOUNT_SPREAD_RT length = 8
            format = 11.4
            informat = 11.4
            label = 'DISCOUNT_SPREAD_RT'; 
         attrib INITIAL_CONTRACT_RT length = 8
            format = 11.4
            informat = 11.4
            label = 'INITIAL_CONTRACT_RT'; 
         attrib FIXED_MONTHLY_PREPAYMENT_RT length = 8
            format = 11.4
            informat = 11.4
            label = 'FIXED_MONTHLY_PREPAYMENT_RT'; 
         attrib CAPITAL_ALLOCATION_ID length = $32
            format = $32.
            informat = $32.
            label = 'CAPITAL_ALLOCATION_ID'; 
         attrib CAPITAL_COST_ID length = $32
            format = $32.
            informat = $32.
            label = 'CAPITAL_COST_ID'; 
         attrib SEGMENT_ID length = $32
            format = $32.
            informat = $32.
            label = 'SEGMENT_ID'; 
         attrib NEAR_BRANCH_FINANCIAL_UNIT_ID length = $32
            format = $32.
            informat = $32.
            label = 'NEAR_BRANCH_FINANCIAL_UNIT_ID'; 
         attrib STATEMENT_OPT_FLG length = $1
            format = $1.
            informat = $1.
            label = 'STATEMENT_OPT_FLG'; 
         attrib VALUE_SCALING_FACTOR_RT length = 8
            format = 11.4
            informat = 11.4
            label = 'VALUE_SCALING_FACTOR_RT'; 
         attrib INTERNAL_REPORTING_CATEGORY_CD length = $3
            format = $3.
            informat = $3.
            label = 'INTERNAL_REPORTING_CATEGORY_CD'; 
         attrib CONVEXITY_ADJUSTMENT_FLG length = $1
            format = $1.
            informat = $1.
            label = 'CONVEXITY_ADJUSTMENT_FLG'; 
         attrib ARREARS_PAYMENT_CD length = $3
            format = $3.
            informat = $3.
            label = 'ARREARS_PAYMENT_CD'; 
         attrib QUANTO_FEATURE_ID length = $32
            format = $32.
            informat = $32.
            label = 'QUANTO_FEATURE_ID'; 
         attrib CASH_INTENSIVE_BUSINESS_FLG length = $1
            format = $1.
            informat = $1.
            label = 'CASH_INTENSIVE_BUSINESS_FLG'; 
         attrib LETTER_OF_CREDIT_ONFILE_FLG length = $1
            format = $1.
            informat = $1.
            label = 'LETTER_OF_CREDIT_ONFILE_FLG'; 
         attrib TRADE_FINANCE_FLG length = $1
            format = $1.
            informat = $1.
            label = 'TRADE_FINANCE_FLG'; 
         attrib ANNUITY_PAYMENT_TYPE_CD length = $3
            format = $3.
            informat = $3.
            label = 'ANNUITY_PAYMENT_TYPE_CD'; 
         attrib INTEREST_PAYMENT_TYPE_CD length = $3
            format = $3.
            informat = $3.
            label = 'INTEREST_PAYMENT_TYPE_CD'; 
         attrib INTEREST_PAYMENT_TIME_FREQ_CD length = $3
            format = $3.
            informat = $3.
            label = 'INTEREST_PAYMENT_TIME_FREQ_CD'; 
         attrib LIQUIDITY_CATEGORY_TYPE_CD length = $3
            format = $3.
            informat = $3.
            label = 'LIQUIDITY_CATEGORY_TYPE_CD'; 
         attrib HOLIDAY_DATE_ROLL_CONV_CD length = $3
            format = $3.
            informat = $3.
            label = 'HOLIDAY_DATE_ROLL_CONV_CD'; 
         attrib WEEKEND_DATE_ROLL_CONV_CD length = $3
            format = $3.
            informat = $3.
            label = 'WEEKEND_DATE_ROLL_CONV_CD'; 
         attrib EXPENSE_ALLOCATION_ID length = $32
            format = $32.
            informat = $32.
            label = 'EXPENSE_ALLOCATION_ID'; 
         attrib FIRST_INTEREST_PAYMENT_DT length = 8
            format = DATETIME20.
            informat = DATETIME20.
            label = 'FIRST_INTEREST_PAYMENT_DT'; 
         attrib LAST_INTEREST_PAYMENT_DT length = 8
            format = DATETIME20.
            informat = DATETIME20.
            label = 'LAST_INTEREST_PAYMENT_DT'; 
         attrib IRB_DUMMY_TYPE_CD length = $3
            format = $3.
            informat = $3.
            label = 'IRB_DUMMY_TYPE_CD'; 
         attrib IRB_SRC_ACCOUNT_ID length = $32
            format = $32.
            informat = $32.
            label = 'IRB_SRC_ACCOUNT_ID'; 
         attrib BRCA length = $3
            format = $3.
            informat = $3.
            label = 'BRCA'; 
         attrib SETTLEMENT_TYPE_CD length = $3
            format = $3.
            informat = $3.
            label = 'SETTLEMENT_TYPE_CD'; 
         attrib FINANCIAL_INSTRUMENT_TYPE_CD length = $3
            format = $3.
            informat = $3.
            label = 'FINANCIAL_INSTRUMENT_TYPE_CD'; 
         call missing(of _all_);
         stop;
      run;
      
      %rcSet(&syserr); 
      
      /*---- Create the integrity constraints for a table  ----*/ 
      %put %str(NOTE: Creating integrity constraints ...);
      proc datasets library=work_ia nolist;
         modify FINANCIAL_ACCOUNT_CIS_BK;
            ic create not null (ACCOUNT_ID);
            ic create not null (SOURCE_SYSTEM_CD);
            ic create not null (FINANCIAL_ACCOUNT_TYPE_CD);
            ic create not null (ACCOUNT_STATUS_CD);
            ic create not null (CURRENCY_CD);
            ic create not null (PRIM_BRANCH_FINANCIAL_UNIT_ID);
            ic create not null (BRCA);
            ic create Index1 = primary key (ACCOUNT_ID VALID_FROM_DTTM);
      quit;
      
      %rcSet(&syserr); 
      
   %end;  /* if table does not exist  */ 
   
   /*---- Append  ----*/ 
   %put %str(NOTE: Appending data ...);
   
   proc append base = work_ia.FINANCIAL_ACCOUNT_CIS_BK 
      data = &etls_lastTable (&etls_tableOptions)  force ; 
    run; 
   
   %rcSet(&syserr); 
   
   proc datasets lib = work nolist nowarn memtype = (data view);
      delete WIRO0ZK;
   quit;
   
%mend etls_loader;
%etls_loader;

%let etls_recCheckExist = 0; 
%let etls_recnt = 0; 
%macro etls_recordCheck; 
   %let etls_recCheckExist = %eval(%sysfunc(exist(work_ia.FINANCIAL_ACCOUNT_CIS_BK, DATA)) or 
         %sysfunc(exist(work_ia.FINANCIAL_ACCOUNT_CIS_BK, VIEW))); 
   
   %if (&etls_recCheckExist) %then
   %do;
      %local etls_syntaxcheck; 
      %let etls_syntaxcheck = %sysfunc(getoption(syntaxcheck)); 
      /* Turn off syntaxcheck option to perform following steps  */ 
      options nosyntaxcheck;
      
      proc contents data = work_ia.FINANCIAL_ACCOUNT_CIS_BK out = work.etls_contents(keep = nobs) noprint; 
      run; 
      
      data _null_; 
         set work.etls_contents (obs = 1); 
         call symput("etls_recnt", left(put(nobs,32.))); 
      run;
      
      proc datasets lib = work nolist nowarn memtype = (data view);
         delete etls_contents;
      quit;
      
      /* Reset syntaxcheck option to previous setting  */ 
      options &etls_syntaxcheck; 
   %end;
%mend etls_recordCheck;
%etls_recordCheck;



/**  Step end Table Loader **/

/*==========================================================================* 
 * Step:            Table Loader                          A5Y50FNE.AQ0009PR * 
 * Transform:       Table Loader (Version 2.1)                              * 
 * Description:                                                             * 
 *                                                                          * 
 * Source Table:    Append - work.WFD6IQ0                 A5Y50FNE.AO0005FM * 
 * Target Table:    FIN_INSTR_ASSOC_CIS_BK -              A5Y50FNE.AE00011Z * 
 *                   work_ia.FIN_INSTR_ASSOC_CIS_BK                         * 
 *==========================================================================*/ 

%let transformID = %quote(A5Y50FNE.AQ0009PR);
%let trans_rc = 0;
%let etls_stepStartTime = %sysfunc(datetime(), datetime20.); 

%let SYSLAST = %nrquote(work.WFD6IQ0); 

%let SYS_SQL_IP_SPEEDO = Y;
%let SYS_SQL_MAPPUTTO = sas_put;
%let SYS_SQLREDUCEPUT = DBMS;
%global etls_sql_pushDown;
%let etls_sql_pushDown = -1;
option DBIDIRECTEXEC;

%global etls_tableExist;
%global etls_numIndex;
%global etls_lastTable;
%let etls_tableExist = -1; 
%let etls_numIndex = -1; 
%let etls_lastTable = &SYSLAST; 

/*---- Define load data macro  ----*/ 

/* --------------------------------------------------------------
   Load Technique Selection: Replace - EntireTable
   Constraint and index action selections: 'INIT','ASIS','ASIS','ASIS'
   Additional options selections... 
      Set unmapped to missing on updates: false 
   -------------------------------------------------------------- */
%macro etls_loader;

   %let etls_tableOptions = ;
   
   /*---- Map the columns  ----*/ 
   proc datasets lib = work nolist nowarn memtype = (data view);
      delete WIRO157;
   quit;
   
   %put %str(NOTE: Mapping columns ...);
   proc sql;
      create view work.WIRO157 as
         select
            FINANCIAL_INSTRUMENT_ID as FINANCIAL_INSTRUMENT_ASSOC_ID,
            VALID_FROM_DTTM,
            VALID_TO_DTTM,
            ('DRV') as FINANCIAL_INSTR_ASSOC_TYPE_CD length = 3
               format = $3.
               informat = $3.,
            FINANCIAL_INSTRUMENT_ID,
            REFERENCE_ACCOUNT_ID
      from &etls_lastTable
      ;
   quit;
   
   %let SYSLAST = work.WIRO157;
   
   %let etls_lastTable = &SYSLAST; 
   %let etls_tableOptions = ; 
   
   /* Determine if the target table exists  */ 
   %let etls_tableExist = %eval(%sysfunc(exist(work_ia.FIN_INSTR_ASSOC_CIS_BK, DATA)) or 
         %sysfunc(exist(work_ia.FIN_INSTR_ASSOC_CIS_BK, VIEW))); 
   
   %if &etls_tableExist %then 
   %do;/* table exists  */ 
      %let etls_hasPreExistingConstraint=0; 
      
      proc datasets lib = work nolist nowarn memtype = (data view);
         delete etls_commands etls_commands_F;
      quit;
      
      %let etls_otherTablesReferToThisTable=0;
      
      %macro etls_CIContents(table=,workTableOut=,inDSOptions=);
         %put NOTE: Building table listing Constraints and Indexes for: &table;
         proc datasets lib=work nolist; delete &workTableOut; quit;
         proc contents data=&table&inDSOptions out2=&workTableOut noprint; run;
         
         data &workTableOut;
            length name $60 type $20 icown idxUnique idxNoMiss $3 recreate $600;
            set &workTableOut;
            type=upcase(type);
            if type eq 'REFERENTIAL' then
            do;
               put "WARNING%QUOTE(:) Target table is referenced by constraints in"
                    " another table: " ref;
               call symput('etls_otherTablesReferToThisTable','1');
               delete;
            end;
            if type='INDEX' and ICOwn eq 'YES' then delete;
         run;
         %rcSet(&syserr); 
         
      %mend etls_CIContents;
      
      %etls_CIContents(table=work_ia.FIN_INSTR_ASSOC_CIS_BK, workTableOut=etls_commands, inDSOptions=);
      
      %if &etls_otherTablesReferToThisTable %then 
         %put WARNING%QUOTE(:) Replacing entire table will fail. Consider an alternate load technique or revising constraints.; 
      %else 
      %do; /* okay - remove foreign keys  */ 
      
         data etls_commands_F; 
            set etls_commands; 
            if upcase(type)="FOREIGN KEY" then 
            do; 
               command='ic delete '||trim(name)||';';
               output etls_commands_F; 
            end; 
         run; 
         
         %put %str(NOTE: Removing foreign keys before dropping table...);
         data _null_;
            set etls_commands_F;
            %rcSet(&syserr); 
            
      %end; /* okay - remove foreign keys  */ 
      
      proc datasets lib = work nolist nowarn memtype = (data view);
         delete etls_commands etls_commands_F;
      quit;
      
      /*---- Drop a table  ----*/ 
      %put %str(NOTE: Dropping table ...);
      proc datasets lib = work_ia nolist nowarn memtype = (data view);
         delete FIN_INSTR_ASSOC_CIS_BK;
      quit;
      
      %rcSet(&syserr); 
      
      %let etls_tableExist = 0;
      
   %end; /* table exists  */ 
   
   /*---- Create a new table  ----*/ 
   %if (&etls_tableExist eq 0) %then 
   %do;  /* if table does not exist  */ 
   
      %put %str(NOTE: Creating table ...);
      
      data work_ia.FIN_INSTR_ASSOC_CIS_BK;
         attrib FINANCIAL_INSTRUMENT_ASSOC_ID length = $32
            format = $32.
            informat = $32.
            label = 'FINANCIAL_INSTRUMENT_ASSOC_ID'; 
         attrib VALID_FROM_DTTM length = 8
            format = DATETIME20.
            informat = DATETIME20.
            label = 'VALID_FROM_DTTM'; 
         attrib VALID_TO_DTTM length = 8
            format = DATETIME20.
            informat = DATETIME20.
            label = 'VALID_TO_DTTM'; 
         attrib FINANCIAL_INSTR_ASSOC_TYPE_CD length = $3
            format = $3.
            informat = $3.
            label = 'FINANCIAL_INSTR_ASSOC_TYPE_CD'; 
         attrib FINANCIAL_INSTRUMENT_ID length = $32
            format = $32.
            informat = $32.
            label = 'FINANCIAL_INSTRUMENT_ID'; 
         attrib REFERENCE_ACCOUNT_ID length = $32
            format = $32.
            informat = $32.
            label = 'FINANCIAL_ACCOUNT_ID'; 
         call missing(of _all_);
         stop;
      run;
      
      %rcSet(&syserr); 
      
      /*---- Create the integrity constraints for a table  ----*/ 
      %put %str(NOTE: Creating integrity constraints ...);
      proc datasets library=work_ia nolist;
         modify FIN_INSTR_ASSOC_CIS_BK;
            ic create not null (FINANCIAL_INSTRUMENT_ASSOC_ID);
            ic create not null (VALID_FROM_DTTM);
            ic create not null (VALID_TO_DTTM);
            ic create not null (FINANCIAL_INSTR_ASSOC_TYPE_CD);
            ic create not null (FINANCIAL_INSTRUMENT_ID);
            ic create not null (REFERENCE_ACCOUNT_ID);
            ic create pk_index = primary key (FINANCIAL_INSTRUMENT_ASSOC_ID VALID_FROM_DTTM);
      quit;
      
      %rcSet(&syserr); 
      
   %end;  /* if table does not exist  */ 
   
   /*---- Append  ----*/ 
   %put %str(NOTE: Appending data ...);
   
   proc append base = work_ia.FIN_INSTR_ASSOC_CIS_BK 
      data = &etls_lastTable (&etls_tableOptions)  force ; 
    run; 
   
   %rcSet(&syserr); 
   
   proc datasets lib = work nolist nowarn memtype = (data view);
      delete WIRO157;
   quit;
   
%mend etls_loader;
%etls_loader;

%let etls_recCheckExist = 0; 
%let etls_recnt = 0; 
%macro etls_recordCheck; 
   %let etls_recCheckExist = %eval(%sysfunc(exist(work_ia.FIN_INSTR_ASSOC_CIS_BK, DATA)) or 
         %sysfunc(exist(work_ia.FIN_INSTR_ASSOC_CIS_BK, VIEW))); 
   
   %if (&etls_recCheckExist) %then
   %do;
      %local etls_syntaxcheck; 
      %let etls_syntaxcheck = %sysfunc(getoption(syntaxcheck)); 
      /* Turn off syntaxcheck option to perform following steps  */ 
      options nosyntaxcheck;
      
      proc contents data = work_ia.FIN_INSTR_ASSOC_CIS_BK out = work.etls_contents(keep = nobs) noprint; 
      run; 
      
      data _null_; 
         set work.etls_contents (obs = 1); 
         call symput("etls_recnt", left(put(nobs,32.))); 
      run;
      
      proc datasets lib = work nolist nowarn memtype = (data view);
         delete etls_contents;
      quit;
      
      /* Reset syntaxcheck option to previous setting  */ 
      options &etls_syntaxcheck; 
   %end;
%mend etls_recordCheck;
%etls_recordCheck;



/**  Step end Table Loader **/

/*==========================================================================* 
 * Step:            Завершить модуль                      A5Y50FNE.AQ0009PS * 
 * Transform:       Завершить модуль                                        * 
 * Description:                                                             * 
 *==========================================================================*/ 

%let transformID = %quote(A5Y50FNE.AQ0009PS);
%let trans_rc = 0;
%let etls_stepStartTime = %sysfunc(datetime(), datetime20.); 

%let _INPUT_count = 0; 
%let _OUTPUT_count = 0; 


/*****************************************************************
* ВЕРСИЯ:
*   $Id: transform_job_finish.sas 247 2012-04-03 07:31:10Z nesterenok $
*
******************************************************************
* НАЗНАЧЕНИЕ:
*   Регистрирует конец модуля ETL.
*
* ПАРАМЕТРЫ:
*   нет
*
******************************************************************/

%macro transform_job_finish;

   /* Продолжаем модуль */
   %job_continue_reg(mpJobType=JOB, mpJobName=&ETLS_JobName., mpPostEvent=N);

   /* Завершаем модуль */
   %job_finish_reg(mpJobType=JOB);

%mend transform_job_finish;

%transform_job_finish;


%rcSet(&syserr); 
%rcSet(&sysrc); 
%rcSet(&sqlrc); 



/**  Step end Завершить модуль **/

%let etls_endTime = %sysfunc(datetime(),datetime.);



/**  Job end 042_932_Structure_FINANCIAL_ACCOUNT_CIS_BK **/

/* Reset jobid and name */
%let jobID = %quote(A569C89V.AQ0000CK);
%let etls_jobName = %nrquote(090_364_Stream_Midas_Fin_Account_BK);

/**************************************************************************** 
 * Job:             042_933_Structure_FINANCIAL_ACCOUNT_  A5Y50FNE.AN0000VH * 
 *                  CAP_FLR_BK                                              * 
 * Description:                                                             * 
 *                                                                          * 
 * Metadata Server: bravo14                                                 * 
 * Port:            8561                                                    * 
 * Location:        /DWH_DWHDDS_IA/Jobs/042_Structure/Financial_Account     * 
 *                                                                          * 
 * Server:          SASApp                                A5C46MZY.AQ000002 * 
 *                                                                          * 
 * Source Table:    FINANCIAL_INSTRUMENT_CAP_FLR_BK -     A5Y50FNE.AE00013R * 
 *                  work_ia.FINANCIAL_INSTRUMENT_CAP_FL                     * 
 *                  R_BK                                                    * 
 * Target Tables:   FINANCIAL_ACCOUNT_CAP_FLR_BK -        A5Y50FNE.AE00012E * 
 *                   work_ia.FINANCIAL_ACCOUNT_CAP_FLR_BK                   * 
 *                  FIN_INSTR_ASSOC_CAP_FLR_BK -          A5Y50FNE.AE00011Y * 
 *                   work_ia.FIN_INSTR_ASSOC_CAP_FLR_BK                     * 
 *                  CUSTOMER_X_FIN_ACC_CAP_FLR_BK -       A5Y50FNE.AE00011K * 
 *                  work_ia.CUSTOMER_X_FIN_ACC_CAP_FLR_                     * 
 *                  BK                                                      * 
 *                                                                          * 
 * Generated on:    16 Июль 2013 г. 17:14:43 MSD                            * 
 * Generated by:    sasdwh                                                  * 
 * Version:         SAS Data Integration Studio 4.5                         * 
 ****************************************************************************/ 

/* General macro variables  */ 
%let jobID = %quote(A5Y50FNE.AN0000VH);
%let etls_jobName = %nrquote(042_933_Structure_FINANCIAL_ACCOUNT_CAP_FLR_BK);
%let etls_userID = %nrquote(sasdwh);


/* Create metadata macro variables */
%let IOMServer      = %nrquote(SASApp);
%let metaPort       = %nrquote(8561);
%let metaServer     = %nrquote(bravo14);

/* Set metadata options */
options metaport       = &metaPort 
        metaserver     = "&metaServer"; 

/* Setup for capturing job status  */ 
%let etls_startTime = %sysfunc(datetime(),datetime.);
%let etls_recordsBefore = 0;
%let etls_recordsAfter = 0;
%let etls_lib = 0;
%let etls_table = 0;

%global etls_debug; 
%macro etls_setDebug; 
   %if %str(&etls_debug) ne 0 %then 
      OPTIONS MPRINT%str(;); 
%mend; 
%etls_setDebug; 

/*==========================================================================* 
 * Step:            Начать модуль                         A5Y50FNE.AQ00087B * 
 * Transform:       Начать модуль                                           * 
 * Description:                                                             * 
 *==========================================================================*/ 

%let transformID = %quote(A5Y50FNE.AQ00087B);
%let trans_rc = 0;
%let etls_stepStartTime = %sysfunc(datetime(), datetime20.); 

%let _INPUT_count = 0; 
%let _OUTPUT_count = 0; 


/*****************************************************************
* ВЕРСИЯ:
*   $Id: transform_job_start.sas 1747 2012-08-01 11:26:13Z nesterenok $
*
******************************************************************
* НАЗНАЧЕНИЕ:
*   Регистрирует начало модуля ETL.
*
* ПАРАМЕТРЫ:
*   нет
*
******************************************************************/

%macro transform_job_start;

   /* Продолжаем поток (или создаем новый) */
   %local lmvStreamName;
   %if %sysfunc(sysexist(LSB_JOBNAME)) %then
      %let lmvStreamName = %scan(%sysfunc(sysget(LSB_JOBNAME)), 3, :);
   %else
      %let lmvStreamName = ;

   %job_continue_reg(mpJobType=STREAM, mpJobName=&lmvStreamName, mpPostEvent=N, mpForcedStart=Y);

   /* Для DI, начинаем поток заново, если старый был начат не сегодня */
   %if %length(&lmvStreamName) eq 0 and &STREAM_START_DT ne %sysfunc(today()) %then %do;
      %job_start_reg(mpJobType=STREAM, mpParentJobId=, mpJobName=&lmvStreamName.);
   %end;

   /* Начинаем модуль */
   %job_start_reg(mpJobType=JOB, mpParentJobId=&STREAM_ID, mpJobName=&ETLS_JobName.);

%mend transform_job_start;

%transform_job_start;


%rcSet(&syserr); 
%rcSet(&sysrc); 
%rcSet(&sqlrc); 



/**  Step end Начать модуль **/

/*==========================================================================* 
 * Step:            Отбор первых и актуальных записей с   A5Y50FNE.AQ00087C * 
 *                   учетом ног                                             * 
 * Transform:       Splitter                                                * 
 * Description:                                                             * 
 *                                                                          * 
 * Source Table:    FINANCIAL_INSTRUMENT_CAP_FLR_BK -     A5Y50FNE.AE00013R * 
 *                  work_ia.FINANCIAL_INSTRUMENT_CAP_FL                     * 
 *                  R_BK                                                    * 
 * Target Tables:   first recs - work.W1B87YYR            A5Y50FNE.AO0004MX * 
 *                  actual recs - work.W1BAZY4C           A5Y50FNE.AO0004MY * 
 *==========================================================================*/ 

%let transformID = %quote(A5Y50FNE.AQ00087C);
%let trans_rc = 0;
%let etls_stepStartTime = %sysfunc(datetime(), datetime20.); 

%let etls_recCheckExist = 0; 
%let etls_recnt = 0; 
%macro etls_recordCheck; 
   %let etls_recCheckExist = %eval(%sysfunc(exist(work_ia.FINANCIAL_INSTRUMENT_CAP_FLR_BK, DATA)) or 
         %sysfunc(exist(work_ia.FINANCIAL_INSTRUMENT_CAP_FLR_BK, VIEW))); 
   
   %if (&etls_recCheckExist) %then
   %do;
      %local etls_syntaxcheck; 
      %let etls_syntaxcheck = %sysfunc(getoption(syntaxcheck)); 
      /* Turn off syntaxcheck option to perform following steps  */ 
      options nosyntaxcheck;
      
      proc contents data = work_ia.FINANCIAL_INSTRUMENT_CAP_FLR_BK out = work.etls_contents(keep = nobs) noprint; 
      run; 
      
      data _null_; 
         set work.etls_contents (obs = 1); 
         call symput("etls_recnt", left(put(nobs,32.))); 
      run;
      
      proc datasets lib = work nolist nowarn memtype = (data view);
         delete etls_contents;
      quit;
      
      /* Reset syntaxcheck option to previous setting  */ 
      options &etls_syntaxcheck; 
   %end;
%mend etls_recordCheck;
%etls_recordCheck;

%let SYSLAST = %nrquote(work_ia.FINANCIAL_INSTRUMENT_CAP_FLR_BK); 

proc datasets lib=work nolist nowarn memtype = (data view);
   delete W1B87YYR;
   delete W1BAZY4C;
quit;

data 
     work.W1B87YYR
     work.W1BAZY4C;
   set &SYSLAST;
   if FSRT=1 then 
      output work.W1B87YYR;
   if VALID_TO_DTTM = &ETL_SCD_FUTURE_DTTM then 
      output work.W1BAZY4C;
run;

%rcSet(&syserr); 

/*---- Map the columns  ----*/ 
proc datasets lib = work nolist nowarn memtype = (data view);
   delete etls_mapped;
quit;

%put %str(NOTE: Mapping columns ...);
proc sql;
   create table work.etls_mapped as
      select
         VALID_FROM_DTTM,
         FINANCIAL_INSTRUMENT_ID,
         IRB_SRC_ACCOUNT_ID,
         DDAT,
         LCD
   from work.W1B87YYR
   ;
quit;

%let SYSLAST = work.etls_mapped;

data work.W1B87YYR;
  set work.etls_mapped;
run;

proc datasets lib = work nolist nowarn memtype = (data view);
   delete etls_mapped;
quit;

%rcSet(&syscc); 

/*---- Map the columns  ----*/ 
proc datasets lib = work nolist nowarn memtype = (data view);
   delete etls_mapped;
quit;

%put %str(NOTE: Mapping columns ...);
proc sql;
   create table work.etls_mapped as
      select
         FINANCIAL_INSTRUMENT_ID,
         IRB_INSTR_STATUS_CD,
         IRB_SRC_ACCOUNT_ID,
         KONDOR_A,
         ARM302P_ID,
         FXMM_ID,
         LNKDN,
         BRCA,
         FINANCIAL_INSTRUMENT_TYPE_CD,
         CURRENCY_CD,
         CNUM,
         MDAT,
         LCD,
         DDAT as DDAT_ACTUAL
   from work.W1BAZY4C
   ;
quit;

%let SYSLAST = work.etls_mapped;

data work.W1BAZY4C;
  set work.etls_mapped;
run;

proc datasets lib = work nolist nowarn memtype = (data view);
   delete etls_mapped;
quit;

%rcSet(&syscc); 



/**  Step end Отбор первых и актуальных записей с учетом ног **/

/*==========================================================================* 
 * Step:            Собираем данные по сделке             A5Y50FNE.AQ00087D * 
 * Transform:       Join                                                    * 
 * Description:                                                             * 
 *                                                                          * 
 * Source Tables:   actual recs - work.W1BAZY4C           A5Y50FNE.AO0004MY * 
 *                  first recs - work.W1B87YYR            A5Y50FNE.AO0004MX * 
 * Target Table:    SQL Join - work.W1B4DNDN              A5Y50FNE.AO0004MZ * 
 *==========================================================================*/ 

%let transformID = %quote(A5Y50FNE.AQ00087D);
%let trans_rc = 0;
%let etls_stepStartTime = %sysfunc(datetime(), datetime20.); 

%let etls_recCheckExist = 0; 
%let etls_recnt = 0; 
%macro etls_recordCheck; 
   %let etls_recCheckExist = %eval(%sysfunc(exist(work.W1BAZY4C, DATA)) or 
         %sysfunc(exist(work.W1BAZY4C, VIEW))); 
   
   %if (&etls_recCheckExist) %then
   %do;
      %local etls_syntaxcheck; 
      %let etls_syntaxcheck = %sysfunc(getoption(syntaxcheck)); 
      /* Turn off syntaxcheck option to perform following steps  */ 
      options nosyntaxcheck;
      
      proc contents data = work.W1BAZY4C out = work.etls_contents(keep = nobs) noprint; 
      run; 
      
      data _null_; 
         set work.etls_contents (obs = 1); 
         call symput("etls_recnt", left(put(nobs,32.))); 
      run;
      
      proc datasets lib = work nolist nowarn memtype = (data view);
         delete etls_contents;
      quit;
      
      /* Reset syntaxcheck option to previous setting  */ 
      options &etls_syntaxcheck; 
   %end;
%mend etls_recordCheck;
%etls_recordCheck;

%let SYS_SQL_IP_SPEEDO = Y;
%let SYS_SQL_MAPPUTTO = sas_put;
%let SYS_SQLREDUCEPUT = DBMS;
%global etls_sql_pushDown;
%let etls_sql_pushDown = -1;
option DBIDIRECTEXEC;

proc datasets lib = work nolist nowarn memtype = (data view);
   delete W1B4DNDN;
quit;

proc sql;
   create view work.W1B4DNDN as
   select
      W1B87YYR.VALID_FROM_DTTM length = 8   
         format = DATETIME20.
         informat = DATETIME20.
         label = 'VALID_FROM_DTTM',
      W1B87YYR.IRB_SRC_ACCOUNT_ID length = 32   
         format = $32.
         informat = $32.
         label = 'IRB_SRC_ACCOUNT_ID',
      W1BAZY4C.DDAT_ACTUAL as DDAT length = 8   
         format = DATETIME20.
         informat = DATETIME20.
         label = 'DDAT',
      W1BAZY4C.IRB_INSTR_STATUS_CD length = 3   
         format = $3.
         informat = $3.
         label = 'IRB_INSTR_STATUS_CD',
      W1BAZY4C.KONDOR_A length = 8   
         format = 11.
         informat = 11.
         label = 'KONDOR_A',
      W1BAZY4C.ARM302P_ID length = 8   
         format = 11.
         informat = 11.
         label = 'ARM302P_ID',
      W1BAZY4C.FXMM_ID length = 8   
         format = 11.
         informat = 11.
         label = 'FXMM_ID',
      W1BAZY4C.LNKDN length = 8   
         format = 7.
         informat = 7.
         label = 'LNKDN',
      W1BAZY4C.BRCA length = 3   
         format = $3.
         informat = $3.
         label = 'BRCA',
      W1BAZY4C.FINANCIAL_INSTRUMENT_TYPE_CD length = 3   
         format = $3.
         informat = $3.
         label = 'FINANCIAL_INSTRUMENT_TYPE_CD',
      W1BAZY4C.CURRENCY_CD length = 3   
         format = $3.
         informat = $3.
         label = 'CURRENCY_CD',
      W1BAZY4C.CNUM length = 8   
         format = 7.
         informat = 7.
         label = 'CNUM',
      W1BAZY4C.MDAT length = 8   
         format = DATETIME20.
         informat = DATETIME20.
         label = 'MDAT',
      W1BAZY4C.LCD length = 8   
         format = 6.
         informat = 6.
         label = 'LCD'
   from
      work.W1B87YYR, 
      work.W1BAZY4C
   where
      W1B87YYR.IRB_SRC_ACCOUNT_ID = W1BAZY4C.IRB_SRC_ACCOUNT_ID
   ;
quit;

%global etls_sql_pushDown;
%let etls_sql_pushDown = &sys_sql_ip_all;

%rcSet(&sqlrc); 



/**  Step end Собираем данные по сделке **/

/*==========================================================================* 
 * Step:            Extract                               A5Y50FNE.AQ00087E * 
 * Transform:       Extract                                                 * 
 * Description:                                                             * 
 *                                                                          * 
 * Source Table:    SQL Join - work.W1B4DNDN              A5Y50FNE.AO0004MZ * 
 * Target Table:    Extract - work.W1MOEVV1               A5Y50FNE.AO0004N0 * 
 *==========================================================================*/ 

%let transformID = %quote(A5Y50FNE.AQ00087E);
%let trans_rc = 0;
%let etls_stepStartTime = %sysfunc(datetime(), datetime20.); 

%let etls_recnt = -1;
%let SYSLAST = %nrquote(work.W1B4DNDN); 

%let SYS_SQL_IP_SPEEDO = Y;
%let SYS_SQL_MAPPUTTO = sas_put;
%let SYS_SQLREDUCEPUT = DBMS;
%global etls_sql_pushDown;
%let etls_sql_pushDown = -1;
option DBIDIRECTEXEC;

/*---- Map the columns  ----*/ 
proc datasets lib = work nolist nowarn memtype = (data view);
   delete W1MOEVV1;
quit;

data _null_;
   put "NOTE: The following column(s) do not have a column mapping, so the"
        " value(s) will be set to missing: DAY_BASIS_CD,"
        " INTEREST_PAYMENT_TYPE_CD";
run;

%put %str(NOTE: Mapping columns ...);
proc sql;
   create view work.W1MOEVV1 as
      select
         VALID_FROM_DTTM,
         (&ETL_SCD_FUTURE_DTTM) as VALID_TO_DTTM length = 8
            format = DATETIME20.
            informat = DATETIME20.
            label = 'VALID_TO_DTTM',
         ('MID') as SOURCE_SYSTEM_CD length = 3
            format = $3.
            informat = $3.
            label = 'SOURCE_SYSTEM_CD',
         (ifc(missing(KONDOR_A), '', cats(KONDOR_A))) as ACCOUNT_REGISTRATION_NM length = 100
            format = $100.
            informat = $100.
            label = 'ACCOUNT_REGISTRATION_NM',
         (ifc(missing(ARM302P_ID), '', cats(FXMM_ID, '_', ARM302P_ID))) as ALTERNATE_ACCOUNT_NM length = 40
            format = $40.
            informat = $40.
            label = 'ALTERNATE_ACCOUNT_NM',
         ('DRV') as FINANCIAL_ACCOUNT_TYPE_CD length = 3
            format = $3.
            informat = $3.
            label = 'FINANCIAL_ACCOUNT_TYPE_CD',
         BRCA,
         IRB_INSTR_STATUS_CD as ACCOUNT_STATUS_CD   
            label = 'ACCOUNT_STATUS_CD',
         DDAT as OPEN_DT   
            label = 'OPEN_DT',
         (ifn( missing(LNKDN), MDAT , dhms(input( substr(put(LNKDN, z6.), 1, 4) || '20' || substr(put(LNKDN, z6.), 5, 2), ddmmyy8.), 0, 0, 0) )) as CLOSE_DT length = 8
            format = DATETIME20.
            informat = DATETIME20.
            label = 'corrected later',
         CURRENCY_CD,
         "" as DAY_BASIS_CD length = 10
            format = $10.
            informat = $10.
            label = 'DAY_BASIS_CD',
         "" as INTEREST_PAYMENT_TYPE_CD length = 3
            format = $3.
            informat = $3.
            label = 'INTEREST_PAYMENT_TYPE_CD',
         IRB_SRC_ACCOUNT_ID,
         ("CFL") as FINANCIAL_INSTRUMENT_TYPE_CD length = 3
            format = $3.
            informat = $3.
            label = 'FINANCIAL_INSTRUMENT_TYPE_CD',
         (put(CNUM, z8.)) as CUSTOMER_NO length = 9
            format = $9.
            informat = $9.
            label = 'CUSTOMER_NO',
         MDAT,
         LCD,
         LNKDN,
         FINANCIAL_INSTRUMENT_TYPE_CD as FINANCIAL_INSTRUMENT_TYPE_CD_ORI
   from &SYSLAST
   ;
quit;

%let SYSLAST = work.W1MOEVV1;

%global etls_sql_pushDown;
%let etls_sql_pushDown = &sys_sql_ip_all;

%rcSet(&sqlrc); 



/**  Step end Extract **/

/*==========================================================================* 
 * Step:            Генерация BK                          A5Y50FNE.AQ00087F * 
 * Transform:       Генерация BK                                            * 
 * Description:                                                             * 
 *                                                                          * 
 * Source Table:    Extract - work.W1MOEVV1               A5Y50FNE.AO0004N0 * 
 * Target Table:    Генерация BKtpOut - work.W1MHBF25     A5Y50FNE.AO0004N1 * 
 *==========================================================================*/ 

%let transformID = %quote(A5Y50FNE.AQ00087F);
%let trans_rc = 0;
%let etls_stepStartTime = %sysfunc(datetime(), datetime20.); 

%let etls_recnt = -1;
%let SYSLAST = %nrquote(work.W1MOEVV1); 

%let _INPUT_count = 1; 
%let _INPUT = work.W1MOEVV1;
%let _INPUT_connect = ;
%let _INPUT_engine = ;
%let _INPUT_memtype = VIEW;
%let _INPUT_options = %nrquote();
%let _INPUT_alter = %nrquote();
%let _INPUT_path = %nrquote(/Extract_A5Y50FNE.AO0004N0%(WorkTable%));
%let _INPUT_type = 1;
%let _INPUT_label = %nrquote();

%let tpIn = work.W1MOEVV1;
%let tpIn_connect = ;
%let tpIn_engine = ;
%let tpIn_memtype = VIEW;
%let tpIn_options = %nrquote();
%let tpIn_alter = %nrquote();
%let tpIn_path = %nrquote(/Extract_A5Y50FNE.AO0004N0%(WorkTable%));
%let tpIn_type = 1;
%let tpIn_label = %nrquote();

%let _OUTPUT_count = 1; 
%let _OUTPUT = work.W1MHBF25;
%let _OUTPUT_connect = ;
%let _OUTPUT_engine = ;
%let _OUTPUT_memtype = DATA;
%let _OUTPUT_options = %nrquote();
%let _OUTPUT_alter = %nrquote();
%let _OUTPUT_path = %nrquote(/Генерация BKtpOut_A5Y50FNE.AO0004N1%(WorkTable%));
%let _OUTPUT_type = 1;
%let _OUTPUT_label = %nrquote();
/* List of target columns to keep  */ 
%let _OUTPUT_keep = DRV_ACCOUNT_ID VALID_FROM_DTTM VALID_TO_DTTM SOURCE_SYSTEM_CD 
        ACCOUNT_REGISTRATION_NM ALTERNATE_ACCOUNT_NM FINANCIAL_ACCOUNT_TYPE_CD 
        ACCOUNT_STATUS_CD OPEN_DT CLOSE_DT CURRENCY_CD DAY_BASIS_CD 
        INTEREST_PAYMENT_TYPE_CD IRB_SRC_ACCOUNT_ID MID_FINANCIAL_UNIT_ID_BRCA 
        FCC_COUNTERPARTY_ID BRCA FINANCIAL_INSTRUMENT_TYPE_CD MDAT LCD LNKDN 
        FINANCIAL_INSTRUMENT_TYPE_CD_ORI;

%let tpOut = work.W1MHBF25;
%let tpOut_connect = ;
%let tpOut_engine = ;
%let tpOut_memtype = DATA;
%let tpOut_options = %nrquote();
%let tpOut_alter = %nrquote();
%let tpOut_path = %nrquote(/Генерация BKtpOut_A5Y50FNE.AO0004N1%(WorkTable%));
%let tpOut_type = 1;
%let tpOut_label = %nrquote();
/* List of target columns to keep  */ 
%let tpOut_keep = DRV_ACCOUNT_ID VALID_FROM_DTTM VALID_TO_DTTM SOURCE_SYSTEM_CD 
        ACCOUNT_REGISTRATION_NM ALTERNATE_ACCOUNT_NM FINANCIAL_ACCOUNT_TYPE_CD 
        ACCOUNT_STATUS_CD OPEN_DT CLOSE_DT CURRENCY_CD DAY_BASIS_CD 
        INTEREST_PAYMENT_TYPE_CD IRB_SRC_ACCOUNT_ID MID_FINANCIAL_UNIT_ID_BRCA 
        FCC_COUNTERPARTY_ID BRCA FINANCIAL_INSTRUMENT_TYPE_CD MDAT LCD LNKDN 
        FINANCIAL_INSTRUMENT_TYPE_CD_ORI;


proc datasets lib=work nolist nowarn memtype = (data view);
   delete W1MHBF25;
quit;

%let tpBK = %nrquote(FINANCIAL_ACCOUNT_DRV           );
%let tpBK0 = %nrquote(3);
%let tpBK1 = %nrquote(FINANCIAL_ACCOUNT_DRV           );
%let tpBK2 = %nrquote(FINANCIAL_UNIT_MID_BRCA         );
%let tpBK3 = %nrquote(FCC_COUNTERPARTY_FCC            );
%let tpBK_count = %nrquote(3);
%let tpOptionalBK_count = %nrquote(0);
%let tpOptionalBK = ;

/* List of target columns to keep  */ 
%let _keep = DRV_ACCOUNT_ID VALID_FROM_DTTM VALID_TO_DTTM SOURCE_SYSTEM_CD 
        ACCOUNT_REGISTRATION_NM ALTERNATE_ACCOUNT_NM FINANCIAL_ACCOUNT_TYPE_CD 
        ACCOUNT_STATUS_CD OPEN_DT CLOSE_DT CURRENCY_CD DAY_BASIS_CD 
        INTEREST_PAYMENT_TYPE_CD IRB_SRC_ACCOUNT_ID MID_FINANCIAL_UNIT_ID_BRCA 
        FCC_COUNTERPARTY_ID BRCA FINANCIAL_INSTRUMENT_TYPE_CD MDAT LCD LNKDN 
        FINANCIAL_INSTRUMENT_TYPE_CD_ORI;
/* List of target columns to keep  */ 
%let keep = DRV_ACCOUNT_ID VALID_FROM_DTTM VALID_TO_DTTM SOURCE_SYSTEM_CD 
        ACCOUNT_REGISTRATION_NM ALTERNATE_ACCOUNT_NM FINANCIAL_ACCOUNT_TYPE_CD 
        ACCOUNT_STATUS_CD OPEN_DT CLOSE_DT CURRENCY_CD DAY_BASIS_CD 
        INTEREST_PAYMENT_TYPE_CD IRB_SRC_ACCOUNT_ID MID_FINANCIAL_UNIT_ID_BRCA 
        FCC_COUNTERPARTY_ID BRCA FINANCIAL_INSTRUMENT_TYPE_CD MDAT LCD LNKDN 
        FINANCIAL_INSTRUMENT_TYPE_CD_ORI;
/*****************************************************************
* ВЕРСИЯ:
*     $Id: transform_generate_bk.sas 4889 2013-04-04 09:14:07Z nesterenok $
*
******************************************************************
* НАЗНАЧЕНИЕ:
*     Генерирует бизнес-ключи в таблице по списку.
*
* ПАРАМЕТРЫ:
*     tpIn                    +  имя входного набора
*     tpBK                    +  список кодов обязательных для генерации бизнес-ключей, разделенный пробелами
*                                Такой бизнес-ключ станет дамми, если заполнены не все поля, его составляющие
*                                FK к ETL_SYS.ETL_BK.BK_CD
*     tpOptionalBK            +  список кодов НЕобязательных для генерации бизнес-ключей, разделенный пробелами
*                                Такой бизнес-ключ останется пустым, если заполнены не все поля, его составляющие
*     tpOut                   +  имя выходного набора
*
******************************************************************/

%macro transform_generate_bk;
   %let tpBK_count         = %unquote(&tpBK_count);
   %let tpOptionalBK_count = %unquote(&tpOptionalBK_count);

   %local lmvDummyRows lmvFieldDummyCount lmvDummyRequired;
   %let lmvDummyRows       = work.tr_gen_bk_dummy_rows;
   %let lmvFieldDummyCount = etl_dummy_count;
   %let lmvDummyRequired   = %eval (&tpBK_count gt 0);

   /* Макросы для генерации одного ключа */
   %macro sm_trans_gen_bk_required;
      %etl_generate_bk (
         mpFieldBK=&bk_field_nm, mpLengthBK=%sysfunc(inputn(&bk_type_cd, bkt_cd_len.)),
         mpColumnList=&bk_column_list_txt, mpFormat=&bk_format_txt,
         mpFieldDummy=&lmvFieldDummy, mpFieldDummyCount=&lmvFieldDummyCount
      );
   %mend;
   %macro sm_trans_gen_bk_optional;
      %etl_generate_bk (
         mpFieldBK=&bk_field_nm, mpLengthBK=%sysfunc(inputn(&bk_type_cd, bkt_cd_len.)),
         mpColumnList=&bk_column_list_txt, mpFormat=&bk_format_txt,
         mpFieldDummy=
      );
   %mend;

   /* Макрос для подстановки в дамми-ключ уникального номера */
   %macro sm_trans_gen_bk_dummy;
      if &lmvFieldDummy gt 0 then do;
         set &lmvDummyIds (keep=OBJECT_ID rename=(OBJECT_ID=&lmvFieldDummy._no)) point=&lmvFieldDummy;
         &bk_field_nm = cats (&bk_field_nm, "_", &lmvFieldDummy._no);

         %error_check;
      end;
   %mend;


   /* Создаем выходной набор итерацией по всем заявленным бизнес-ключам */
   /* Считаем необходимое кол-во дамми-ключей */
   %local lmvBkIndex lmvFieldDummy lmvDummyCount;
   %let lmvDummyCount   = 0;
   data
      %if &lmvDummyRequired %then %do;
         &tpOut (drop= etl_dummy_:)
         &lmvDummyRows
      %end;
      %else %do;
         &tpOut
      %end;
   ;
      set &tpIn end=ds_end;

      /* Генерация необязательных ключей */
      %do lmvBkIndex=1 %to &tpOptionalBK_count;
         %util_loop_data (mpLoopMacro=sm_trans_gen_bk_optional, mpData=ETL_SYS.ETL_BK,
                          mpWhere=BK_CD eq %util_quote(&&tpOptionalBK&lmvBkIndex)
         );
      %end;

      %if &lmvDummyRequired %then %do;
         length &lmvFieldDummyCount 8;
         drop &lmvFieldDummyCount;
         retain &lmvFieldDummyCount 0;

         /* Генерация обязательных ключей */
         %do lmvBkIndex=1 %to &tpBK_count;
            %let lmvFieldDummy = etl_dummy_&lmvBkIndex.;

            %util_loop_data (mpLoopMacro=sm_trans_gen_bk_required, mpData=ETL_SYS.ETL_BK,
                             mpWhere=BK_CD eq %util_quote(&&tpBK&lmvBkIndex)
            );
         %end;

         /* Если в какой-то записи есть дамми, то не выводим ее сразу */
         if sum (of etl_dummy_1-etl_dummy_&tpBK_count) = 0 then
            output &tpOut;
         else do;
            output &lmvDummyRows;
         end;

         if ds_end then call symputx ("lmvDummyCount", &lmvFieldDummyCount);
      %end;
      %else %do;
         output &tpOut;
      %end;
   run;
   %error_check (mpStepType=DATA);

   /* Если дамми нет, то всё */
   %if (not &lmvDummyRequired) or (&lmvDummyCount eq 0) %then %return;


   /* Для каждого дамми генерируем уникальный номер */
   %local lmvDummyIds;
   %let lmvDummyIds = work.tr_gen_bk_dummy_ids;
   %unique_ids (mpIdCount=&lmvDummyCount, mpOut=&lmvDummyIds, mpSequenceName=ETL_DUMMY_SEQ);

   /* Добавляем номер к дамми */
   data &lmvDummyRows._id (drop= etl_dummy_:);
      set &lmvDummyRows;

      %do lmvBkIndex=1 %to &tpBK_count;
         %let lmvFieldDummy = etl_dummy_&lmvBkIndex.;

         %util_loop_data (mpLoopMacro=sm_trans_gen_bk_dummy, mpData=ETL_SYS.ETL_BK,
                          mpWhere=BK_CD eq %util_quote(&&tpBK&lmvBkIndex)
         );
      %end;
   run;
   %error_check (mpStepType=DATA);


   /* Добавляем дамми-строки к выходному набору */
   proc append base=&tpOut data=&lmvDummyRows._id;
   run;
   %error_check (mpStepType=DATA);

%mend transform_generate_bk;

%transform_generate_bk;

%rcSet(&syserr); 
%rcSet(&sysrc); 
%rcSet(&sqlrc); 



/**  Step end Генерация BK **/

/*==========================================================================* 
 * Step:            Table Loader                          A5Y50FNE.AQ00087G * 
 * Transform:       Table Loader (Version 2.1)                              * 
 * Description:                                                             * 
 *                                                                          * 
 * Source Table:    Генерация BKtpOut - work.W1MHBF25     A5Y50FNE.AO0004N1 * 
 * Target Table:    CUSTOMER_X_FIN_ACC_CAP_FLR_BK -       A5Y50FNE.AE00011K * 
 *                  work_ia.CUSTOMER_X_FIN_ACC_CAP_FLR_                     * 
 *                  BK                                                      * 
 *==========================================================================*/ 

%let transformID = %quote(A5Y50FNE.AQ00087G);
%let trans_rc = 0;
%let etls_stepStartTime = %sysfunc(datetime(), datetime20.); 

%let SYSLAST = %nrquote(work.W1MHBF25); 

%let SYS_SQL_IP_SPEEDO = Y;
%let SYS_SQL_MAPPUTTO = sas_put;
%let SYS_SQLREDUCEPUT = DBMS;
%global etls_sql_pushDown;
%let etls_sql_pushDown = -1;
option DBIDIRECTEXEC;

%global etls_tableExist;
%global etls_numIndex;
%global etls_lastTable;
%let etls_tableExist = -1; 
%let etls_numIndex = -1; 
%let etls_lastTable = &SYSLAST; 

/*---- Define load data macro  ----*/ 

/* --------------------------------------------------------------
   Load Technique Selection: Replace - EntireTable
   Constraint and index action selections: 'INIT','ASIS','ASIS','ASIS'
   Additional options selections... 
      Set unmapped to missing on updates: false 
   -------------------------------------------------------------- */
%macro etls_loader;

   %let etls_tableOptions = ;
   
   /*---- Map the columns  ----*/ 
   proc datasets lib = work nolist nowarn memtype = (data view);
      delete WIRO5VF;
   quit;
   
   data _null_;
      put "NOTE: The following column(s) do not have a column mapping, so the"
           " value(s) will be set to missing: RELSHP_TO_PRIMARY_CD,"
           " EFFECTIVE_FROM_DTTM, EFFECTIVE_TO_DTTM";
   run;
   
   %put %str(NOTE: Mapping columns ...);
   proc sql;
      create view work.WIRO5VF as
         select
            FCC_COUNTERPARTY_ID as CUSTOMER_ID,
            DRV_ACCOUNT_ID as ACCOUNT_ID,
            VALID_FROM_DTTM,
            VALID_TO_DTTM,
            "" as RELSHP_TO_PRIMARY_CD length = 3
               format = $3.
               informat = $3.,
            ('DDC') as RELATIONSHIP_TO_ACCOUNT_CD length = 3
               format = $3.
               informat = $3.,
            . as EFFECTIVE_FROM_DTTM length = 8
               format = DATETIME20.
               informat = DATETIME20.,
            . as EFFECTIVE_TO_DTTM length = 8
               format = DATETIME20.
               informat = DATETIME20.
      from &etls_lastTable
      ;
   quit;
   
   %let SYSLAST = work.WIRO5VF;
   
   %let etls_lastTable = &SYSLAST; 
   %let etls_tableOptions = ; 
   
   /* Determine if the target table exists  */ 
   %let etls_tableExist = %eval(%sysfunc(exist(work_ia.CUSTOMER_X_FIN_ACC_CAP_FLR_BK, DATA)) or 
         %sysfunc(exist(work_ia.CUSTOMER_X_FIN_ACC_CAP_FLR_BK, VIEW))); 
   
   %if &etls_tableExist %then 
   %do;/* table exists  */ 
      %let etls_hasPreExistingConstraint=0; 
      
      proc datasets lib = work nolist nowarn memtype = (data view);
         delete etls_commands etls_commands_F;
      quit;
      
      %let etls_otherTablesReferToThisTable=0;
      
      %macro etls_CIContents(table=,workTableOut=,inDSOptions=);
         %put NOTE: Building table listing Constraints and Indexes for: &table;
         proc datasets lib=work nolist; delete &workTableOut; quit;
         proc contents data=&table&inDSOptions out2=&workTableOut noprint; run;
         
         data &workTableOut;
            length name $60 type $20 icown idxUnique idxNoMiss $3 recreate $600;
            set &workTableOut;
            type=upcase(type);
            if type eq 'REFERENTIAL' then
            do;
               put "WARNING%QUOTE(:) Target table is referenced by constraints in"
                    " another table: " ref;
               call symput('etls_otherTablesReferToThisTable','1');
               delete;
            end;
            if type='INDEX' and ICOwn eq 'YES' then delete;
         run;
         %rcSet(&syserr); 
         
      %mend etls_CIContents;
      
      %etls_CIContents(table=work_ia.CUSTOMER_X_FIN_ACC_CAP_FLR_BK, workTableOut=etls_commands, inDSOptions=);
      
      %if &etls_otherTablesReferToThisTable %then 
         %put WARNING%QUOTE(:) Replacing entire table will fail. Consider an alternate load technique or revising constraints.; 
      %else 
      %do; /* okay - remove foreign keys  */ 
      
         data etls_commands_F; 
            set etls_commands; 
            if upcase(type)="FOREIGN KEY" then 
            do; 
               command='ic delete '||trim(name)||';';
               output etls_commands_F; 
            end; 
         run; 
         
         %put %str(NOTE: Removing foreign keys before dropping table...);
         data _null_;
            set etls_commands_F;
            %rcSet(&syserr); 
            
      %end; /* okay - remove foreign keys  */ 
      
      proc datasets lib = work nolist nowarn memtype = (data view);
         delete etls_commands etls_commands_F;
      quit;
      
      /*---- Drop a table  ----*/ 
      %put %str(NOTE: Dropping table ...);
      proc datasets lib = work_ia nolist nowarn memtype = (data view);
         delete CUSTOMER_X_FIN_ACC_CAP_FLR_BK;
      quit;
      
      %rcSet(&syserr); 
      
      %let etls_tableExist = 0;
      
   %end; /* table exists  */ 
   
   /*---- Create a new table  ----*/ 
   %if (&etls_tableExist eq 0) %then 
   %do;  /* if table does not exist  */ 
   
      %put %str(NOTE: Creating table ...);
      
      data work_ia.CUSTOMER_X_FIN_ACC_CAP_FLR_BK;
         attrib CUSTOMER_ID length = $32
            format = $32.
            informat = $32.
            label = 'CUSTOMER_ID'; 
         attrib ACCOUNT_ID length = $32
            format = $32.
            informat = $32.
            label = 'ACCOUNT_ID'; 
         attrib VALID_FROM_DTTM length = 8
            format = DATETIME20.
            informat = DATETIME20.
            label = 'VALID_FROM_DTTM'; 
         attrib VALID_TO_DTTM length = 8
            format = DATETIME20.
            informat = DATETIME20.
            label = 'VALID_TO_DTTM'; 
         attrib RELSHP_TO_PRIMARY_CD length = $3
            format = $3.
            informat = $3.
            label = 'RELSHP_TO_PRIMARY_CD'; 
         attrib RELATIONSHIP_TO_ACCOUNT_CD length = $3
            format = $3.
            informat = $3.
            label = 'RELATIONSHIP_TO_ACCOUNT_CD'; 
         attrib EFFECTIVE_FROM_DTTM length = 8
            format = DATETIME20.
            informat = DATETIME20.
            label = 'EFFECTIVE_FROM_DTTM'; 
         attrib EFFECTIVE_TO_DTTM length = 8
            format = DATETIME20.
            informat = DATETIME20.
            label = 'EFFECTIVE_TO_DTTM'; 
         call missing(of _all_);
         stop;
      run;
      
      %rcSet(&syserr); 
      
      /*---- Create the integrity constraints for a table  ----*/ 
      %put %str(NOTE: Creating integrity constraints ...);
      proc datasets library=work_ia nolist;
         modify CUSTOMER_X_FIN_ACC_CAP_FLR_BK;
            ic create not null (CUSTOMER_ID);
            ic create not null (ACCOUNT_ID);
            ic create not null (VALID_FROM_DTTM);
            ic create not null (VALID_TO_DTTM);
            ic create not null (RELATIONSHIP_TO_ACCOUNT_CD);
            ic create Index1 = primary key (CUSTOMER_ID ACCOUNT_ID VALID_FROM_DTTM 
                           RELATIONSHIP_TO_ACCOUNT_CD);
      quit;
      
      %rcSet(&syserr); 
      
   %end;  /* if table does not exist  */ 
   
   /*---- Append  ----*/ 
   %put %str(NOTE: Appending data ...);
   
   proc append base = work_ia.CUSTOMER_X_FIN_ACC_CAP_FLR_BK 
      data = &etls_lastTable (&etls_tableOptions)  force ; 
    run; 
   
   %rcSet(&syserr); 
   
   proc datasets lib = work nolist nowarn memtype = (data view);
      delete WIRO5VF;
   quit;
   
%mend etls_loader;
%etls_loader;

%let etls_recCheckExist = 0; 
%let etls_recnt = 0; 
%macro etls_recordCheck; 
   %let etls_recCheckExist = %eval(%sysfunc(exist(work_ia.CUSTOMER_X_FIN_ACC_CAP_FLR_BK, DATA)) or 
         %sysfunc(exist(work_ia.CUSTOMER_X_FIN_ACC_CAP_FLR_BK, VIEW))); 
   
   %if (&etls_recCheckExist) %then
   %do;
      %local etls_syntaxcheck; 
      %let etls_syntaxcheck = %sysfunc(getoption(syntaxcheck)); 
      /* Turn off syntaxcheck option to perform following steps  */ 
      options nosyntaxcheck;
      
      proc contents data = work_ia.CUSTOMER_X_FIN_ACC_CAP_FLR_BK out = work.etls_contents(keep = nobs) noprint; 
      run; 
      
      data _null_; 
         set work.etls_contents (obs = 1); 
         call symput("etls_recnt", left(put(nobs,32.))); 
      run;
      
      proc datasets lib = work nolist nowarn memtype = (data view);
         delete etls_contents;
      quit;
      
      /* Reset syntaxcheck option to previous setting  */ 
      options &etls_syntaxcheck; 
   %end;
%mend etls_recordCheck;
%etls_recordCheck;



/**  Step end Table Loader **/

/*==========================================================================* 
 * Step:            Table Loader                          A5Y50FNE.AQ00087H * 
 * Transform:       Table Loader (Version 2.1)                              * 
 * Description:                                                             * 
 *                                                                          * 
 * Source Table:    Генерация BKtpOut - work.W1MHBF25     A5Y50FNE.AO0004N1 * 
 * Target Table:    FINANCIAL_ACCOUNT_CAP_FLR_BK -        A5Y50FNE.AE00012E * 
 *                   work_ia.FINANCIAL_ACCOUNT_CAP_FLR_BK                   * 
 *==========================================================================*/ 

%let transformID = %quote(A5Y50FNE.AQ00087H);
%let trans_rc = 0;
%let etls_stepStartTime = %sysfunc(datetime(), datetime20.); 

%let SYSLAST = %nrquote(work.W1MHBF25); 

%let SYS_SQL_IP_SPEEDO = Y;
%let SYS_SQL_MAPPUTTO = sas_put;
%let SYS_SQLREDUCEPUT = DBMS;
%global etls_sql_pushDown;
%let etls_sql_pushDown = -1;
option DBIDIRECTEXEC;

%global etls_tableExist;
%global etls_numIndex;
%global etls_lastTable;
%let etls_tableExist = -1; 
%let etls_numIndex = -1; 
%let etls_lastTable = &SYSLAST; 

/*---- Define load data macro  ----*/ 

/* --------------------------------------------------------------
   Load Technique Selection: Replace - EntireTable
   Constraint and index action selections: 'INIT','ASIS','ASIS','ASIS'
   Additional options selections... 
      Set unmapped to missing on updates: false 
   -------------------------------------------------------------- */
%macro etls_loader;

   %let etls_tableOptions = ;
   
   /*---- Map the columns  ----*/ 
   proc datasets lib = work nolist nowarn memtype = (data view);
      delete WIRO5W6;
   quit;
   
   data _null_;
      put "NOTE: The following column(s) do not have a column mapping, so the"
           " value(s) will be set to missing: AUTO_DEBIT_ACCOUNT_TYPE_CD,"
           " ACCOUNT_REGISTRATION_TYPE_CD, CLOSE_REASON_CD,    ACCOUNT_TAX_ID,"
           " EXPECTED_LOSS_PCT, INDIVIDUAL_ORGANIZATION_CD, SOURCE_CD,   "
           " OPENING_CHANNEL_CD, PREFERRED_CHANNEL_CD, PRIMARY_PHONE_NO,   "
           " PRIMARY_PHONE_TYPE_CD, SECONDARY_PHONE_NO, SECONDARY_PHONE_TYPE_CD,"
           "    MAILABLE_FLG, TELEPHONABLE_FLG, EMAIL_FLG, SMS_FLG,"
           " DO_NOT_CONTACT_FLG,    EMPLOYEE_RK, CURRENCY_BASED_ACCOUNT_FLG,"
           " FEE_BASED_FLG, ANNUAL_FEES_AMT,    MONTHLY_FEES_AMT, CAMPAIGN_CD,"
           " COMMUNICATION_CD, REGISTERED_ONLINE_DT,    FIRST_LOGIN_DT,"
           " ONLINE_BILL_PAYMENT_FLG, ID_VERIFICATION_TYPE_CD,   "
           " PREVIOUS_ACCOUNT_ID, OPEN_BRANCH_FINANCIAL_UNIT_ID,   "
           " FINANCIAL_APPLICATION_ID, CREDIT_FACILITY_ID,"
           " FUTURE_MARGIN_INCOME_AMT,    IN_DEFAULT_FLG, FINANCIAL_BOOK_ID,"
           " IRRECOVERABLE_FLG,    OWNED_BY_INTERNAL_ORG_ID,"
           " PREVIOUS_BANK_EXTERNAL_ORG_ID, NETTING_SET_ID,    REVOLVING_FLG,"
           " SOURCE_CHANNEL_CD, GRACE_PERIOD_DAYS_CNT,    REMARGINING_DAYS_CNT,"
           " FINANCIAL_CALENDAR_ID, PORTFOLIO_ID,    SECURITIZATION_POOL_ID,"
           " RECEIVABLES_POOL_ID, ACCOUNT_USAGE_TYPE_CD,    RISK_ALARM_FLG,"
           " LOW_PROFITABILITY_FLG, ACCOUNT_LIFECYCLE_STG_CD,   "
           " ATTRITION_ALARM_FLG, BALANCE_FROZEN_FLG, BALANCE_FROZEN_DT,   "
           " ACCOUNT_BLOCK_REASON_CD, TAXATION_STATE_CD,"
           " EFFECTIVE_MATURITY_YEAR_NO,    GL_ACCOUNT_ID,"
           " FROM_OTHER_INSTITUTION_FLG, ACCOUNT_RENEWAL_CNT,   "
           " BALANCE_TRANSFER_DT, BALANCE_TRANSFER_AMT, BALANCE_TRANSFER_CNT,   "
           " BASE_LONG_TERM_APR_RT, BROKER_FLG, MULT_RATE_FLG,"
           " AUTO_DEBIT_ACCOUNT_NO,    WORST_STATUS_LAST_12_MTH_CD,"
           " WORST_STATUS_LAST_12_MTH_DT,    BALANCE_TRNSF_OTHER_ACCT_CNT,"
           " EFFECTIVE_FROM_DTTM, EFFECTIVE_TO_DTTM,    COUNTERPARTY_ID,"
           " INSURED_BY_COUNTERPARTY_ID, STATEMENT_FREQUENCY_CD,   "
           " SECURITY_DEPOSIT_AMT, SECURITY_DEPOSIT_REFUND_AMT,"
           " FIRST_PAYMENT_DT,    LAST_PAYMENT_DT, FIRST_RESET_DT,"
           " LAST_RESET_DT, RESETS_PER_ANNUM_NO,    PRINCIPAL_PAYMENT_TYPE_CD,"
           " PRINCIPAL_PAYMENT_AMT, RATE_POLICY_ID, SPREAD_RT,   "
           " DISCOUNT_SPREAD_RT, INITIAL_CONTRACT_RT,"
           " FIXED_MONTHLY_PREPAYMENT_RT,    CAPITAL_ALLOCATION_ID,"
           " CAPITAL_COST_ID, SEGMENT_ID,    NEAR_BRANCH_FINANCIAL_UNIT_ID,"
           " STATEMENT_OPT_FLG, VALUE_SCALING_FACTOR_RT,   "
           " INTERNAL_REPORTING_CATEGORY_CD, CONVEXITY_ADJUSTMENT_FLG,   "
           " ARREARS_PAYMENT_CD, QUANTO_FEATURE_ID, CASH_INTENSIVE_BUSINESS_FLG,"
           "    LETTER_OF_CREDIT_ONFILE_FLG, TRADE_FINANCE_FLG,"
           " ANNUITY_PAYMENT_TYPE_CD,    INTEREST_PAYMENT_TIME_FREQ_CD,"
           " LIQUIDITY_CATEGORY_TYPE_CD,    HOLIDAY_DATE_ROLL_CONV_CD,"
           " WEEKEND_DATE_ROLL_CONV_CD, EXPENSE_ALLOCATION_ID,   "
           " FIRST_INTEREST_PAYMENT_DT, LAST_INTEREST_PAYMENT_DT,"
           " IRB_DUMMY_TYPE_CD";
   run;
   
   %put %str(NOTE: Mapping columns ...);
   proc sql;
      create view work.WIRO5W6 as
         select
            DRV_ACCOUNT_ID as ACCOUNT_ID,
            VALID_FROM_DTTM,
            VALID_TO_DTTM,
            SOURCE_SYSTEM_CD,
            ACCOUNT_REGISTRATION_NM,
            ALTERNATE_ACCOUNT_NM,
            FINANCIAL_ACCOUNT_TYPE_CD,
            "" as AUTO_DEBIT_ACCOUNT_TYPE_CD length = 3
               format = $3.
               informat = $3.,
            "" as ACCOUNT_REGISTRATION_TYPE_CD length = 3
               format = $3.
               informat = $3.,
            ACCOUNT_STATUS_CD,
            OPEN_DT,
            (case when ACCOUNT_STATUS_CD='AUT' then .
                       when ACCOUNT_STATUS_CD='MAT' then 
                             ifn(coalesce(MDAT, 0) <> 0, MDAT,
                                ifn( coalesce(LNKDN, 0) = 0, ., 
                                    dhms(input( substr(put(LNKDN, z6.), 1, 4) || '20' || substr(put(LNKDN, z6.), 5, 2), ddmmyy8.), 0, 0, 0) )) 
                       when ACCOUNT_STATUS_CD='REV' then 
                            ifn( coalesce(MDAT, 0) <> 0, min(MDAT, LCD), 
                                    ifn( coalesce(LNKDN, 0) = 0, LCD, 
                                        min( dhms(input( substr(put(LNKDN, z6.), 1, 4) || '20' || substr(put(LNKDN, z6.), 5, 2), ddmmyy8.), 0, 0, 0), LCD ) ))
               end) as CLOSE_DT length = 8
               format = DATETIME20.
               informat = DATETIME20.,
            "" as CLOSE_REASON_CD length = 3
               format = $3.
               informat = $3.,
            "" as ACCOUNT_TAX_ID length = 32
               format = $32.
               informat = $32.,
            . as EXPECTED_LOSS_PCT length = 8
               format = 11.4
               informat = 11.4,
            "" as INDIVIDUAL_ORGANIZATION_CD length = 3
               format = $3.
               informat = $3.,
            "" as SOURCE_CD length = 5
               format = $5.
               informat = $5.,
            "" as OPENING_CHANNEL_CD length = 3
               format = $3.
               informat = $3.,
            "" as PREFERRED_CHANNEL_CD length = 3
               format = $3.
               informat = $3.,
            CURRENCY_CD,
            "" as PRIMARY_PHONE_NO length = 20
               format = $20.
               informat = $20.,
            "" as PRIMARY_PHONE_TYPE_CD length = 3
               format = $3.
               informat = $3.,
            "" as SECONDARY_PHONE_NO length = 20
               format = $20.
               informat = $20.,
            "" as SECONDARY_PHONE_TYPE_CD length = 3
               format = $3.
               informat = $3.,
            "" as MAILABLE_FLG length = 1
               format = $1.
               informat = $1.,
            "" as TELEPHONABLE_FLG length = 1
               format = $1.
               informat = $1.,
            "" as EMAIL_FLG length = 1
               format = $1.
               informat = $1.,
            "" as SMS_FLG length = 1
               format = $1.
               informat = $1.,
            "" as DO_NOT_CONTACT_FLG length = 1
               format = $1.
               informat = $1.,
            . as EMPLOYEE_RK length = 8
               format = 11.
               informat = 11.,
            "" as CURRENCY_BASED_ACCOUNT_FLG length = 1
               format = $1.
               informat = $1.,
            "" as FEE_BASED_FLG length = 1
               format = $1.
               informat = $1.,
            . as ANNUAL_FEES_AMT length = 8
               format = 20.5
               informat = 20.5,
            . as MONTHLY_FEES_AMT length = 8
               format = 20.5
               informat = 20.5,
            "" as CAMPAIGN_CD length = 30
               format = $30.
               informat = $30.,
            "" as COMMUNICATION_CD length = 30
               format = $30.
               informat = $30.,
            . as REGISTERED_ONLINE_DT length = 8
               format = DATETIME20.
               informat = DATETIME20.,
            . as FIRST_LOGIN_DT length = 8
               format = DATETIME20.
               informat = DATETIME20.,
            "" as ONLINE_BILL_PAYMENT_FLG length = 1
               format = $1.
               informat = $1.,
            "" as ID_VERIFICATION_TYPE_CD length = 3
               format = $3.
               informat = $3.,
            "" as PREVIOUS_ACCOUNT_ID length = 32
               format = $32.
               informat = $32.,
            "" as OPEN_BRANCH_FINANCIAL_UNIT_ID length = 32
               format = $32.
               informat = $32.,
            MID_FINANCIAL_UNIT_ID_BRCA as PRIM_BRANCH_FINANCIAL_UNIT_ID,
            "" as FINANCIAL_APPLICATION_ID length = 32
               format = $32.
               informat = $32.,
            "" as CREDIT_FACILITY_ID length = 40
               format = $40.
               informat = $40.,
            . as FUTURE_MARGIN_INCOME_AMT length = 8
               format = 20.5
               informat = 20.5,
            "" as IN_DEFAULT_FLG length = 1
               format = $1.
               informat = $1.,
            "" as FINANCIAL_BOOK_ID length = 32
               format = $32.
               informat = $32.,
            "" as IRRECOVERABLE_FLG length = 1
               format = $1.
               informat = $1.,
            "" as OWNED_BY_INTERNAL_ORG_ID length = 32
               format = $32.
               informat = $32.,
            "" as PREVIOUS_BANK_EXTERNAL_ORG_ID length = 32
               format = $32.
               informat = $32.,
            "" as NETTING_SET_ID length = 32
               format = $32.
               informat = $32.,
            "" as REVOLVING_FLG length = 1
               format = $1.
               informat = $1.,
            "" as SOURCE_CHANNEL_CD length = 3
               format = $3.
               informat = $3.,
            . as GRACE_PERIOD_DAYS_CNT length = 8
               format = 7.
               informat = 7.,
            . as REMARGINING_DAYS_CNT length = 8
               format = 7.
               informat = 7.,
            "" as FINANCIAL_CALENDAR_ID length = 32
               format = $32.
               informat = $32.,
            DAY_BASIS_CD,
            "" as PORTFOLIO_ID length = 32
               format = $32.
               informat = $32.,
            "" as SECURITIZATION_POOL_ID length = 32
               format = $32.
               informat = $32.,
            "" as RECEIVABLES_POOL_ID length = 32
               format = $32.
               informat = $32.,
            "" as ACCOUNT_USAGE_TYPE_CD length = 3
               format = $3.
               informat = $3.,
            "" as RISK_ALARM_FLG length = 1
               format = $1.
               informat = $1.,
            "" as LOW_PROFITABILITY_FLG length = 1
               format = $1.
               informat = $1.,
            "" as ACCOUNT_LIFECYCLE_STG_CD length = 3
               format = $3.
               informat = $3.,
            "" as ATTRITION_ALARM_FLG length = 1
               format = $1.
               informat = $1.,
            "" as BALANCE_FROZEN_FLG length = 1
               format = $1.
               informat = $1.,
            . as BALANCE_FROZEN_DT length = 8
               format = DATETIME20.
               informat = DATETIME20.,
            "" as ACCOUNT_BLOCK_REASON_CD length = 3
               format = $3.
               informat = $3.,
            "" as TAXATION_STATE_CD length = 4
               format = $4.
               informat = $4.,
            . as EFFECTIVE_MATURITY_YEAR_NO length = 8
               format = 9.3
               informat = 9.3,
            "" as GL_ACCOUNT_ID length = 32
               format = $32.
               informat = $32.,
            "" as FROM_OTHER_INSTITUTION_FLG length = 1
               format = $1.
               informat = $1.,
            . as ACCOUNT_RENEWAL_CNT length = 8
               format = 7.
               informat = 7.,
            . as BALANCE_TRANSFER_DT length = 8
               format = DATETIME20.
               informat = DATETIME20.,
            . as BALANCE_TRANSFER_AMT length = 8
               format = 20.5
               informat = 20.5,
            . as BALANCE_TRANSFER_CNT length = 8
               format = 7.
               informat = 7.,
            . as BASE_LONG_TERM_APR_RT length = 8
               format = 11.4
               informat = 11.4,
            "" as BROKER_FLG length = 1
               format = $1.
               informat = $1.,
            "" as MULT_RATE_FLG length = 1
               format = $1.
               informat = $1.,
            "" as AUTO_DEBIT_ACCOUNT_NO length = 32
               format = $32.
               informat = $32.,
            "" as WORST_STATUS_LAST_12_MTH_CD length = 3
               format = $3.
               informat = $3.,
            . as WORST_STATUS_LAST_12_MTH_DT length = 8
               format = DATETIME20.
               informat = DATETIME20.,
            . as BALANCE_TRNSF_OTHER_ACCT_CNT length = 8
               format = 7.
               informat = 7.,
            . as EFFECTIVE_FROM_DTTM length = 8
               format = DATETIME20.
               informat = DATETIME20.,
            . as EFFECTIVE_TO_DTTM length = 8
               format = DATETIME20.
               informat = DATETIME20.,
            "" as COUNTERPARTY_ID length = 32
               format = $32.
               informat = $32.,
            "" as INSURED_BY_COUNTERPARTY_ID length = 32
               format = $32.
               informat = $32.,
            "" as STATEMENT_FREQUENCY_CD length = 3
               format = $3.
               informat = $3.,
            . as SECURITY_DEPOSIT_AMT length = 8
               format = 20.5
               informat = 20.5,
            . as SECURITY_DEPOSIT_REFUND_AMT length = 8
               format = 20.5
               informat = 20.5,
            . as FIRST_PAYMENT_DT length = 8
               format = DATETIME20.
               informat = DATETIME20.,
            . as LAST_PAYMENT_DT length = 8
               format = DATETIME20.
               informat = DATETIME20.,
            . as FIRST_RESET_DT length = 8
               format = DATETIME20.
               informat = DATETIME20.,
            . as LAST_RESET_DT length = 8
               format = DATETIME20.
               informat = DATETIME20.,
            . as RESETS_PER_ANNUM_NO length = 8
               format = 6.
               informat = 6.,
            "" as PRINCIPAL_PAYMENT_TYPE_CD length = 3
               format = $3.
               informat = $3.,
            . as PRINCIPAL_PAYMENT_AMT length = 8
               format = 20.5
               informat = 20.5,
            "" as RATE_POLICY_ID length = 32
               format = $32.
               informat = $32.,
            . as SPREAD_RT length = 8
               format = 11.4
               informat = 11.4,
            . as DISCOUNT_SPREAD_RT length = 8
               format = 11.4
               informat = 11.4,
            . as INITIAL_CONTRACT_RT length = 8
               format = 11.4
               informat = 11.4,
            . as FIXED_MONTHLY_PREPAYMENT_RT length = 8
               format = 11.4
               informat = 11.4,
            "" as CAPITAL_ALLOCATION_ID length = 32
               format = $32.
               informat = $32.,
            "" as CAPITAL_COST_ID length = 32
               format = $32.
               informat = $32.,
            "" as SEGMENT_ID length = 32
               format = $32.
               informat = $32.,
            "" as NEAR_BRANCH_FINANCIAL_UNIT_ID length = 32
               format = $32.
               informat = $32.,
            "" as STATEMENT_OPT_FLG length = 1
               format = $1.
               informat = $1.,
            . as VALUE_SCALING_FACTOR_RT length = 8
               format = 11.4
               informat = 11.4,
            "" as INTERNAL_REPORTING_CATEGORY_CD length = 3
               format = $3.
               informat = $3.,
            "" as CONVEXITY_ADJUSTMENT_FLG length = 1
               format = $1.
               informat = $1.,
            "" as ARREARS_PAYMENT_CD length = 3
               format = $3.
               informat = $3.,
            "" as QUANTO_FEATURE_ID length = 32
               format = $32.
               informat = $32.,
            "" as CASH_INTENSIVE_BUSINESS_FLG length = 1
               format = $1.
               informat = $1.,
            "" as LETTER_OF_CREDIT_ONFILE_FLG length = 1
               format = $1.
               informat = $1.,
            "" as TRADE_FINANCE_FLG length = 1
               format = $1.
               informat = $1.,
            "" as ANNUITY_PAYMENT_TYPE_CD length = 3
               format = $3.
               informat = $3.,
            INTEREST_PAYMENT_TYPE_CD,
            "" as INTEREST_PAYMENT_TIME_FREQ_CD length = 3
               format = $3.
               informat = $3.,
            "" as LIQUIDITY_CATEGORY_TYPE_CD length = 3
               format = $3.
               informat = $3.,
            "" as HOLIDAY_DATE_ROLL_CONV_CD length = 3
               format = $3.
               informat = $3.,
            "" as WEEKEND_DATE_ROLL_CONV_CD length = 3
               format = $3.
               informat = $3.,
            "" as EXPENSE_ALLOCATION_ID length = 32
               format = $32.
               informat = $32.,
            . as FIRST_INTEREST_PAYMENT_DT length = 8
               format = DATETIME20.
               informat = DATETIME20.,
            . as LAST_INTEREST_PAYMENT_DT length = 8
               format = DATETIME20.
               informat = DATETIME20.,
            "" as IRB_DUMMY_TYPE_CD length = 3
               format = $3.
               informat = $3.,
            IRB_SRC_ACCOUNT_ID,
            BRCA,
            FINANCIAL_INSTRUMENT_TYPE_CD_ORI as FINANCIAL_INSTRUMENT_TYPE_CD
      from &etls_lastTable
      ;
   quit;
   
   %let SYSLAST = work.WIRO5W6;
   
   %let etls_lastTable = &SYSLAST; 
   %let etls_tableOptions = ; 
   
   /* Determine if the target table exists  */ 
   %let etls_tableExist = %eval(%sysfunc(exist(work_ia.FINANCIAL_ACCOUNT_CAP_FLR_BK, DATA)) or 
         %sysfunc(exist(work_ia.FINANCIAL_ACCOUNT_CAP_FLR_BK, VIEW))); 
   
   %if &etls_tableExist %then 
   %do;/* table exists  */ 
      %let etls_hasPreExistingConstraint=0; 
      
      proc datasets lib = work nolist nowarn memtype = (data view);
         delete etls_commands etls_commands_F;
      quit;
      
      %let etls_otherTablesReferToThisTable=0;
      
      %macro etls_CIContents(table=,workTableOut=,inDSOptions=);
         %put NOTE: Building table listing Constraints and Indexes for: &table;
         proc datasets lib=work nolist; delete &workTableOut; quit;
         proc contents data=&table&inDSOptions out2=&workTableOut noprint; run;
         
         data &workTableOut;
            length name $60 type $20 icown idxUnique idxNoMiss $3 recreate $600;
            set &workTableOut;
            type=upcase(type);
            if type eq 'REFERENTIAL' then
            do;
               put "WARNING%QUOTE(:) Target table is referenced by constraints in"
                    " another table: " ref;
               call symput('etls_otherTablesReferToThisTable','1');
               delete;
            end;
            if type='INDEX' and ICOwn eq 'YES' then delete;
         run;
         %rcSet(&syserr); 
         
      %mend etls_CIContents;
      
      %etls_CIContents(table=work_ia.FINANCIAL_ACCOUNT_CAP_FLR_BK, workTableOut=etls_commands, inDSOptions=);
      
      %if &etls_otherTablesReferToThisTable %then 
         %put WARNING%QUOTE(:) Replacing entire table will fail. Consider an alternate load technique or revising constraints.; 
      %else 
      %do; /* okay - remove foreign keys  */ 
      
         data etls_commands_F; 
            set etls_commands; 
            if upcase(type)="FOREIGN KEY" then 
            do; 
               command='ic delete '||trim(name)||';';
               output etls_commands_F; 
            end; 
         run; 
         
         %put %str(NOTE: Removing foreign keys before dropping table...);
         data _null_;
            set etls_commands_F;
            %rcSet(&syserr); 
            
      %end; /* okay - remove foreign keys  */ 
      
      proc datasets lib = work nolist nowarn memtype = (data view);
         delete etls_commands etls_commands_F;
      quit;
      
      /*---- Drop a table  ----*/ 
      %put %str(NOTE: Dropping table ...);
      proc datasets lib = work_ia nolist nowarn memtype = (data view);
         delete FINANCIAL_ACCOUNT_CAP_FLR_BK;
      quit;
      
      %rcSet(&syserr); 
      
      %let etls_tableExist = 0;
      
   %end; /* table exists  */ 
   
   /*---- Create a new table  ----*/ 
   %if (&etls_tableExist eq 0) %then 
   %do;  /* if table does not exist  */ 
   
      %put %str(NOTE: Creating table ...);
      
      data work_ia.FINANCIAL_ACCOUNT_CAP_FLR_BK;
         attrib ACCOUNT_ID length = $32
            format = $32.
            informat = $32.
            label = 'ACCOUNT_ID'; 
         attrib VALID_FROM_DTTM length = 8
            format = DATETIME20.
            informat = DATETIME20.
            label = 'VALID_FROM_DTTM'; 
         attrib VALID_TO_DTTM length = 8
            format = DATETIME20.
            informat = DATETIME20.
            label = 'VALID_TO_DTTM'; 
         attrib SOURCE_SYSTEM_CD length = $3
            format = $3.
            informat = $3.
            label = 'SOURCE_SYSTEM_CD'; 
         attrib ACCOUNT_REGISTRATION_NM length = $100
            format = $100.
            informat = $100.
            label = 'ACCOUNT_REGISTRATION_NM'; 
         attrib ALTERNATE_ACCOUNT_NM length = $40
            format = $40.
            informat = $40.
            label = 'ALTERNATE_ACCOUNT_NM'; 
         attrib FINANCIAL_ACCOUNT_TYPE_CD length = $3
            format = $3.
            informat = $3.
            label = 'FINANCIAL_ACCOUNT_TYPE_CD'; 
         attrib AUTO_DEBIT_ACCOUNT_TYPE_CD length = $3
            format = $3.
            informat = $3.
            label = 'AUTO_DEBIT_ACCOUNT_TYPE_CD'; 
         attrib ACCOUNT_REGISTRATION_TYPE_CD length = $3
            format = $3.
            informat = $3.
            label = 'ACCOUNT_REGISTRATION_TYPE_CD'; 
         attrib ACCOUNT_STATUS_CD length = $3
            format = $3.
            informat = $3.
            label = 'ACCOUNT_STATUS_CD'; 
         attrib OPEN_DT length = 8
            format = DATETIME20.
            informat = DATETIME20.
            label = 'OPEN_DT'; 
         attrib CLOSE_DT length = 8
            format = DATETIME20.
            informat = DATETIME20.
            label = 'CLOSE_DT'; 
         attrib CLOSE_REASON_CD length = $3
            format = $3.
            informat = $3.
            label = 'CLOSE_REASON_CD'; 
         attrib ACCOUNT_TAX_ID length = $32
            format = $32.
            informat = $32.
            label = 'ACCOUNT_TAX_ID'; 
         attrib EXPECTED_LOSS_PCT length = 8
            format = 11.4
            informat = 11.4
            label = 'EXPECTED_LOSS_PCT'; 
         attrib INDIVIDUAL_ORGANIZATION_CD length = $3
            format = $3.
            informat = $3.
            label = 'INDIVIDUAL_ORGANIZATION_CD'; 
         attrib SOURCE_CD length = $5
            format = $5.
            informat = $5.
            label = 'SOURCE_CD'; 
         attrib OPENING_CHANNEL_CD length = $3
            format = $3.
            informat = $3.
            label = 'OPENING_CHANNEL_CD'; 
         attrib PREFERRED_CHANNEL_CD length = $3
            format = $3.
            informat = $3.
            label = 'PREFERRED_CHANNEL_CD'; 
         attrib CURRENCY_CD length = $3
            format = $3.
            informat = $3.
            label = 'CURRENCY_CD'; 
         attrib PRIMARY_PHONE_NO length = $20
            format = $20.
            informat = $20.
            label = 'PRIMARY_PHONE_NO'; 
         attrib PRIMARY_PHONE_TYPE_CD length = $3
            format = $3.
            informat = $3.
            label = 'PRIMARY_PHONE_TYPE_CD'; 
         attrib SECONDARY_PHONE_NO length = $20
            format = $20.
            informat = $20.
            label = 'SECONDARY_PHONE_NO'; 
         attrib SECONDARY_PHONE_TYPE_CD length = $3
            format = $3.
            informat = $3.
            label = 'SECONDARY_PHONE_TYPE_CD'; 
         attrib MAILABLE_FLG length = $1
            format = $1.
            informat = $1.
            label = 'MAILABLE_FLG'; 
         attrib TELEPHONABLE_FLG length = $1
            format = $1.
            informat = $1.
            label = 'TELEPHONABLE_FLG'; 
         attrib EMAIL_FLG length = $1
            format = $1.
            informat = $1.
            label = 'EMAIL_FLG'; 
         attrib SMS_FLG length = $1
            format = $1.
            informat = $1.
            label = 'SMS_FLG'; 
         attrib DO_NOT_CONTACT_FLG length = $1
            format = $1.
            informat = $1.
            label = 'DO_NOT_CONTACT_FLG'; 
         attrib EMPLOYEE_RK length = 8
            format = 11.
            informat = 11.
            label = 'EMPLOYEE_RK'; 
         attrib CURRENCY_BASED_ACCOUNT_FLG length = $1
            format = $1.
            informat = $1.
            label = 'CURRENCY_BASED_ACCOUNT_FLG'; 
         attrib FEE_BASED_FLG length = $1
            format = $1.
            informat = $1.
            label = 'FEE_BASED_FLG'; 
         attrib ANNUAL_FEES_AMT length = 8
            format = 20.5
            informat = 20.5
            label = 'ANNUAL_FEES_AMT'; 
         attrib MONTHLY_FEES_AMT length = 8
            format = 20.5
            informat = 20.5
            label = 'MONTHLY_FEES_AMT'; 
         attrib CAMPAIGN_CD length = $30
            format = $30.
            informat = $30.
            label = 'CAMPAIGN_CD'; 
         attrib COMMUNICATION_CD length = $30
            format = $30.
            informat = $30.
            label = 'COMMUNICATION_CD'; 
         attrib REGISTERED_ONLINE_DT length = 8
            format = DATETIME20.
            informat = DATETIME20.
            label = 'REGISTERED_ONLINE_DT'; 
         attrib FIRST_LOGIN_DT length = 8
            format = DATETIME20.
            informat = DATETIME20.
            label = 'FIRST_LOGIN_DT'; 
         attrib ONLINE_BILL_PAYMENT_FLG length = $1
            format = $1.
            informat = $1.
            label = 'ONLINE_BILL_PAYMENT_FLG'; 
         attrib ID_VERIFICATION_TYPE_CD length = $3
            format = $3.
            informat = $3.
            label = 'ID_VERIFICATION_TYPE_CD'; 
         attrib PREVIOUS_ACCOUNT_ID length = $32
            format = $32.
            informat = $32.
            label = 'PREVIOUS_ACCOUNT_ID'; 
         attrib OPEN_BRANCH_FINANCIAL_UNIT_ID length = $32
            format = $32.
            informat = $32.
            label = 'OPEN_BRANCH_FINANCIAL_UNIT_ID'; 
         attrib PRIM_BRANCH_FINANCIAL_UNIT_ID length = $32
            format = $32.
            informat = $32.
            label = 'PRIM_BRANCH_FINANCIAL_UNIT_ID'; 
         attrib FINANCIAL_APPLICATION_ID length = $32
            format = $32.
            informat = $32.
            label = 'FINANCIAL_APPLICATION_ID'; 
         attrib CREDIT_FACILITY_ID length = $40
            format = $40.
            informat = $40.
            label = 'CREDIT_FACILITY_ID'; 
         attrib FUTURE_MARGIN_INCOME_AMT length = 8
            format = 20.5
            informat = 20.5
            label = 'FUTURE_MARGIN_INCOME_AMT'; 
         attrib IN_DEFAULT_FLG length = $1
            format = $1.
            informat = $1.
            label = 'IN_DEFAULT_FLG'; 
         attrib FINANCIAL_BOOK_ID length = $32
            format = $32.
            informat = $32.
            label = 'FINANCIAL_BOOK_ID'; 
         attrib IRRECOVERABLE_FLG length = $1
            format = $1.
            informat = $1.
            label = 'IRRECOVERABLE_FLG'; 
         attrib OWNED_BY_INTERNAL_ORG_ID length = $32
            format = $32.
            informat = $32.
            label = 'OWNED_BY_INTERNAL_ORG_ID'; 
         attrib PREVIOUS_BANK_EXTERNAL_ORG_ID length = $32
            format = $32.
            informat = $32.
            label = 'PREVIOUS_BANK_EXTERNAL_ORG_ID'; 
         attrib NETTING_SET_ID length = $32
            format = $32.
            informat = $32.
            label = 'NETTING_SET_ID'; 
         attrib REVOLVING_FLG length = $1
            format = $1.
            informat = $1.
            label = 'REVOLVING_FLG'; 
         attrib SOURCE_CHANNEL_CD length = $3
            format = $3.
            informat = $3.
            label = 'SOURCE_CHANNEL_CD'; 
         attrib GRACE_PERIOD_DAYS_CNT length = 8
            format = 7.
            informat = 7.
            label = 'GRACE_PERIOD_DAYS_CNT'; 
         attrib REMARGINING_DAYS_CNT length = 8
            format = 7.
            informat = 7.
            label = 'REMARGINING_DAYS_CNT'; 
         attrib FINANCIAL_CALENDAR_ID length = $32
            format = $32.
            informat = $32.
            label = 'FINANCIAL_CALENDAR_ID'; 
         attrib DAY_BASIS_CD length = $10
            format = $10.
            informat = $10.
            label = 'DAY_BASIS_CD'; 
         attrib PORTFOLIO_ID length = $32
            format = $32.
            informat = $32.
            label = 'PORTFOLIO_ID'; 
         attrib SECURITIZATION_POOL_ID length = $32
            format = $32.
            informat = $32.
            label = 'SECURITIZATION_POOL_ID'; 
         attrib RECEIVABLES_POOL_ID length = $32
            format = $32.
            informat = $32.
            label = 'RECEIVABLES_POOL_ID'; 
         attrib ACCOUNT_USAGE_TYPE_CD length = $3
            format = $3.
            informat = $3.
            label = 'ACCOUNT_USAGE_TYPE_CD'; 
         attrib RISK_ALARM_FLG length = $1
            format = $1.
            informat = $1.
            label = 'RISK_ALARM_FLG'; 
         attrib LOW_PROFITABILITY_FLG length = $1
            format = $1.
            informat = $1.
            label = 'LOW_PROFITABILITY_FLG'; 
         attrib ACCOUNT_LIFECYCLE_STG_CD length = $3
            format = $3.
            informat = $3.
            label = 'ACCOUNT_LIFECYCLE_STG_CD'; 
         attrib ATTRITION_ALARM_FLG length = $1
            format = $1.
            informat = $1.
            label = 'ATTRITION_ALARM_FLG'; 
         attrib BALANCE_FROZEN_FLG length = $1
            format = $1.
            informat = $1.
            label = 'BALANCE_FROZEN_FLG'; 
         attrib BALANCE_FROZEN_DT length = 8
            format = DATETIME20.
            informat = DATETIME20.
            label = 'BALANCE_FROZEN_DT'; 
         attrib ACCOUNT_BLOCK_REASON_CD length = $3
            format = $3.
            informat = $3.
            label = 'ACCOUNT_BLOCK_REASON_CD'; 
         attrib TAXATION_STATE_CD length = $4
            format = $4.
            informat = $4.
            label = 'TAXATION_STATE_CD'; 
         attrib EFFECTIVE_MATURITY_YEAR_NO length = 8
            format = 9.3
            informat = 9.3
            label = 'EFFECTIVE_MATURITY_YEAR_NO'; 
         attrib GL_ACCOUNT_ID length = $32
            format = $32.
            informat = $32.
            label = 'GL_ACCOUNT_ID'; 
         attrib FROM_OTHER_INSTITUTION_FLG length = $1
            format = $1.
            informat = $1.
            label = 'FROM_OTHER_INSTITUTION_FLG'; 
         attrib ACCOUNT_RENEWAL_CNT length = 8
            format = 7.
            informat = 7.
            label = 'ACCOUNT_RENEWAL_CNT'; 
         attrib BALANCE_TRANSFER_DT length = 8
            format = DATETIME20.
            informat = DATETIME20.
            label = 'BALANCE_TRANSFER_DT'; 
         attrib BALANCE_TRANSFER_AMT length = 8
            format = 20.5
            informat = 20.5
            label = 'BALANCE_TRANSFER_AMT'; 
         attrib BALANCE_TRANSFER_CNT length = 8
            format = 7.
            informat = 7.
            label = 'BALANCE_TRANSFER_CNT'; 
         attrib BASE_LONG_TERM_APR_RT length = 8
            format = 11.4
            informat = 11.4
            label = 'BASE_LONG_TERM_APR_RT'; 
         attrib BROKER_FLG length = $1
            format = $1.
            informat = $1.
            label = 'BROKER_FLG'; 
         attrib MULT_RATE_FLG length = $1
            format = $1.
            informat = $1.
            label = 'MULT_RATE_FLG'; 
         attrib AUTO_DEBIT_ACCOUNT_NO length = $32
            format = $32.
            informat = $32.
            label = 'AUTO_DEBIT_ACCOUNT_NO'; 
         attrib WORST_STATUS_LAST_12_MTH_CD length = $3
            format = $3.
            informat = $3.
            label = 'WORST_STATUS_LAST_12_MTH_CD'; 
         attrib WORST_STATUS_LAST_12_MTH_DT length = 8
            format = DATETIME20.
            informat = DATETIME20.
            label = 'WORST_STATUS_LAST_12_MTH_DT'; 
         attrib BALANCE_TRNSF_OTHER_ACCT_CNT length = 8
            format = 7.
            informat = 7.
            label = 'BALANCE_TRNSF_OTHER_ACCT_CNT'; 
         attrib EFFECTIVE_FROM_DTTM length = 8
            format = DATETIME20.
            informat = DATETIME20.
            label = 'EFFECTIVE_FROM_DTTM'; 
         attrib EFFECTIVE_TO_DTTM length = 8
            format = DATETIME20.
            informat = DATETIME20.
            label = 'EFFECTIVE_TO_DTTM'; 
         attrib COUNTERPARTY_ID length = $32
            format = $32.
            informat = $32.
            label = 'COUNTERPARTY_ID'; 
         attrib INSURED_BY_COUNTERPARTY_ID length = $32
            format = $32.
            informat = $32.
            label = 'INSURED_BY_COUNTERPARTY_ID'; 
         attrib STATEMENT_FREQUENCY_CD length = $3
            format = $3.
            informat = $3.
            label = 'STATEMENT_FREQUENCY_CD'; 
         attrib SECURITY_DEPOSIT_AMT length = 8
            format = 20.5
            informat = 20.5
            label = 'SECURITY_DEPOSIT_AMT'; 
         attrib SECURITY_DEPOSIT_REFUND_AMT length = 8
            format = 20.5
            informat = 20.5
            label = 'SECURITY_DEPOSIT_REFUND_AMT'; 
         attrib FIRST_PAYMENT_DT length = 8
            format = DATETIME20.
            informat = DATETIME20.
            label = 'FIRST_PAYMENT_DT'; 
         attrib LAST_PAYMENT_DT length = 8
            format = DATETIME20.
            informat = DATETIME20.
            label = 'LAST_PAYMENT_DT'; 
         attrib FIRST_RESET_DT length = 8
            format = DATETIME20.
            informat = DATETIME20.
            label = 'FIRST_RESET_DT'; 
         attrib LAST_RESET_DT length = 8
            format = DATETIME20.
            informat = DATETIME20.
            label = 'LAST_RESET_DT'; 
         attrib RESETS_PER_ANNUM_NO length = 8
            format = 6.
            informat = 6.
            label = 'RESETS_PER_ANNUM_NO'; 
         attrib PRINCIPAL_PAYMENT_TYPE_CD length = $3
            format = $3.
            informat = $3.
            label = 'PRINCIPAL_PAYMENT_TYPE_CD'; 
         attrib PRINCIPAL_PAYMENT_AMT length = 8
            format = 20.5
            informat = 20.5
            label = 'PRINCIPAL_PAYMENT_AMT'; 
         attrib RATE_POLICY_ID length = $32
            format = $32.
            informat = $32.
            label = 'RATE_POLICY_ID'; 
         attrib SPREAD_RT length = 8
            format = 11.4
            informat = 11.4
            label = 'SPREAD_RT'; 
         attrib DISCOUNT_SPREAD_RT length = 8
            format = 11.4
            informat = 11.4
            label = 'DISCOUNT_SPREAD_RT'; 
         attrib INITIAL_CONTRACT_RT length = 8
            format = 11.4
            informat = 11.4
            label = 'INITIAL_CONTRACT_RT'; 
         attrib FIXED_MONTHLY_PREPAYMENT_RT length = 8
            format = 11.4
            informat = 11.4
            label = 'FIXED_MONTHLY_PREPAYMENT_RT'; 
         attrib CAPITAL_ALLOCATION_ID length = $32
            format = $32.
            informat = $32.
            label = 'CAPITAL_ALLOCATION_ID'; 
         attrib CAPITAL_COST_ID length = $32
            format = $32.
            informat = $32.
            label = 'CAPITAL_COST_ID'; 
         attrib SEGMENT_ID length = $32
            format = $32.
            informat = $32.
            label = 'SEGMENT_ID'; 
         attrib NEAR_BRANCH_FINANCIAL_UNIT_ID length = $32
            format = $32.
            informat = $32.
            label = 'NEAR_BRANCH_FINANCIAL_UNIT_ID'; 
         attrib STATEMENT_OPT_FLG length = $1
            format = $1.
            informat = $1.
            label = 'STATEMENT_OPT_FLG'; 
         attrib VALUE_SCALING_FACTOR_RT length = 8
            format = 11.4
            informat = 11.4
            label = 'VALUE_SCALING_FACTOR_RT'; 
         attrib INTERNAL_REPORTING_CATEGORY_CD length = $3
            format = $3.
            informat = $3.
            label = 'INTERNAL_REPORTING_CATEGORY_CD'; 
         attrib CONVEXITY_ADJUSTMENT_FLG length = $1
            format = $1.
            informat = $1.
            label = 'CONVEXITY_ADJUSTMENT_FLG'; 
         attrib ARREARS_PAYMENT_CD length = $3
            format = $3.
            informat = $3.
            label = 'ARREARS_PAYMENT_CD'; 
         attrib QUANTO_FEATURE_ID length = $32
            format = $32.
            informat = $32.
            label = 'QUANTO_FEATURE_ID'; 
         attrib CASH_INTENSIVE_BUSINESS_FLG length = $1
            format = $1.
            informat = $1.
            label = 'CASH_INTENSIVE_BUSINESS_FLG'; 
         attrib LETTER_OF_CREDIT_ONFILE_FLG length = $1
            format = $1.
            informat = $1.
            label = 'LETTER_OF_CREDIT_ONFILE_FLG'; 
         attrib TRADE_FINANCE_FLG length = $1
            format = $1.
            informat = $1.
            label = 'TRADE_FINANCE_FLG'; 
         attrib ANNUITY_PAYMENT_TYPE_CD length = $3
            format = $3.
            informat = $3.
            label = 'ANNUITY_PAYMENT_TYPE_CD'; 
         attrib INTEREST_PAYMENT_TYPE_CD length = $3
            format = $3.
            informat = $3.
            label = 'INTEREST_PAYMENT_TYPE_CD'; 
         attrib INTEREST_PAYMENT_TIME_FREQ_CD length = $3
            format = $3.
            informat = $3.
            label = 'INTEREST_PAYMENT_TIME_FREQ_CD'; 
         attrib LIQUIDITY_CATEGORY_TYPE_CD length = $3
            format = $3.
            informat = $3.
            label = 'LIQUIDITY_CATEGORY_TYPE_CD'; 
         attrib HOLIDAY_DATE_ROLL_CONV_CD length = $3
            format = $3.
            informat = $3.
            label = 'HOLIDAY_DATE_ROLL_CONV_CD'; 
         attrib WEEKEND_DATE_ROLL_CONV_CD length = $3
            format = $3.
            informat = $3.
            label = 'WEEKEND_DATE_ROLL_CONV_CD'; 
         attrib EXPENSE_ALLOCATION_ID length = $32
            format = $32.
            informat = $32.
            label = 'EXPENSE_ALLOCATION_ID'; 
         attrib FIRST_INTEREST_PAYMENT_DT length = 8
            format = DATETIME20.
            informat = DATETIME20.
            label = 'FIRST_INTEREST_PAYMENT_DT'; 
         attrib LAST_INTEREST_PAYMENT_DT length = 8
            format = DATETIME20.
            informat = DATETIME20.
            label = 'LAST_INTEREST_PAYMENT_DT'; 
         attrib IRB_DUMMY_TYPE_CD length = $3
            format = $3.
            informat = $3.
            label = 'IRB_DUMMY_TYPE_CD'; 
         attrib IRB_SRC_ACCOUNT_ID length = $32
            format = $32.
            informat = $32.
            label = 'IRB_SRC_ACCOUNT_ID'; 
         attrib BRCA length = $3
            format = $3.
            informat = $3.
            label = 'BRCA'; 
         attrib FINANCIAL_INSTRUMENT_TYPE_CD length = $3
            format = $3.
            informat = $3.
            label = 'FINANCIAL_INSTRUMENT_TYPE_CD'; 
         call missing(of _all_);
         stop;
      run;
      
      %rcSet(&syserr); 
      
      /*---- Create the integrity constraints for a table  ----*/ 
      %put %str(NOTE: Creating integrity constraints ...);
      proc datasets library=work_ia nolist;
         modify FINANCIAL_ACCOUNT_CAP_FLR_BK;
            ic create not null (ACCOUNT_ID);
            ic create not null (SOURCE_SYSTEM_CD);
            ic create not null (FINANCIAL_ACCOUNT_TYPE_CD);
            ic create not null (ACCOUNT_STATUS_CD);
            ic create not null (CURRENCY_CD);
            ic create not null (PRIM_BRANCH_FINANCIAL_UNIT_ID);
            ic create not null (BRCA);
            ic create Index1 = primary key (ACCOUNT_ID VALID_FROM_DTTM);
      quit;
      
      %rcSet(&syserr); 
      
   %end;  /* if table does not exist  */ 
   
   /*---- Append  ----*/ 
   %put %str(NOTE: Appending data ...);
   
   proc append base = work_ia.FINANCIAL_ACCOUNT_CAP_FLR_BK 
      data = &etls_lastTable (&etls_tableOptions)  force ; 
    run; 
   
   %rcSet(&syserr); 
   
   proc datasets lib = work nolist nowarn memtype = (data view);
      delete WIRO5W6;
   quit;
   
%mend etls_loader;
%etls_loader;

%let etls_recCheckExist = 0; 
%let etls_recnt = 0; 
%macro etls_recordCheck; 
   %let etls_recCheckExist = %eval(%sysfunc(exist(work_ia.FINANCIAL_ACCOUNT_CAP_FLR_BK, DATA)) or 
         %sysfunc(exist(work_ia.FINANCIAL_ACCOUNT_CAP_FLR_BK, VIEW))); 
   
   %if (&etls_recCheckExist) %then
   %do;
      %local etls_syntaxcheck; 
      %let etls_syntaxcheck = %sysfunc(getoption(syntaxcheck)); 
      /* Turn off syntaxcheck option to perform following steps  */ 
      options nosyntaxcheck;
      
      proc contents data = work_ia.FINANCIAL_ACCOUNT_CAP_FLR_BK out = work.etls_contents(keep = nobs) noprint; 
      run; 
      
      data _null_; 
         set work.etls_contents (obs = 1); 
         call symput("etls_recnt", left(put(nobs,32.))); 
      run;
      
      proc datasets lib = work nolist nowarn memtype = (data view);
         delete etls_contents;
      quit;
      
      /* Reset syntaxcheck option to previous setting  */ 
      options &etls_syntaxcheck; 
   %end;
%mend etls_recordCheck;
%etls_recordCheck;



/**  Step end Table Loader **/

/*==========================================================================* 
 * Step:            Вяжем актуальные записи со сделками   A5Y50FNE.AQ00087I * 
 * Transform:       Join                                                    * 
 * Description:                                                             * 
 *                                                                          * 
 * Source Tables:   actual recs - work.W1BAZY4C           A5Y50FNE.AO0004MY * 
 *                  Генерация BKtpOut - work.W1MHBF25     A5Y50FNE.AO0004N1 * 
 * Target Table:    SQL Join - work.WGCL2RJ               A5Y50FNE.AO0004N2 * 
 *==========================================================================*/ 

%let transformID = %quote(A5Y50FNE.AQ00087I);
%let trans_rc = 0;
%let etls_stepStartTime = %sysfunc(datetime(), datetime20.); 

%let etls_recCheckExist = 0; 
%let etls_recnt = 0; 
%macro etls_recordCheck; 
   %let etls_recCheckExist = %eval(%sysfunc(exist(work.W1BAZY4C, DATA)) or 
         %sysfunc(exist(work.W1BAZY4C, VIEW))); 
   
   %if (&etls_recCheckExist) %then
   %do;
      %local etls_syntaxcheck; 
      %let etls_syntaxcheck = %sysfunc(getoption(syntaxcheck)); 
      /* Turn off syntaxcheck option to perform following steps  */ 
      options nosyntaxcheck;
      
      proc contents data = work.W1BAZY4C out = work.etls_contents(keep = nobs) noprint; 
      run; 
      
      data _null_; 
         set work.etls_contents (obs = 1); 
         call symput("etls_recnt", left(put(nobs,32.))); 
      run;
      
      proc datasets lib = work nolist nowarn memtype = (data view);
         delete etls_contents;
      quit;
      
      /* Reset syntaxcheck option to previous setting  */ 
      options &etls_syntaxcheck; 
   %end;
%mend etls_recordCheck;
%etls_recordCheck;

%let SYS_SQL_IP_SPEEDO = Y;
%let SYS_SQL_MAPPUTTO = sas_put;
%let SYS_SQLREDUCEPUT = DBMS;
%global etls_sql_pushDown;
%let etls_sql_pushDown = -1;
option DBIDIRECTEXEC;

proc datasets lib = work nolist nowarn memtype = (data view);
   delete WGCL2RJ;
quit;

proc sql;
   create view work.WGCL2RJ as
   select
      W1MHBF25.VALID_FROM_DTTM length = 8   
         format = DATETIME20.
         informat = DATETIME20.
         label = 'VALID_FROM_DTTM',
      W1MHBF25.VALID_TO_DTTM length = 8   
         format = DATETIME20.
         informat = DATETIME20.
         label = 'VALID_TO_DTTM',
      W1BAZY4C.FINANCIAL_INSTRUMENT_ID length = 32   
         format = $32.
         informat = $32.
         label = 'FINANCIAL_INSTRUMENT_ID',
      W1MHBF25.DRV_ACCOUNT_ID as REFERENCE_ACCOUNT_ID length = 32   
         format = $32.
         informat = $32.
         label = 'FINANCIAL_ACCOUNT_ID'
   from
      work.W1BAZY4C inner join 
      work.W1MHBF25
         on
         (
            W1BAZY4C.IRB_SRC_ACCOUNT_ID = W1MHBF25.IRB_SRC_ACCOUNT_ID
         )
   ;
quit;

%global etls_sql_pushDown;
%let etls_sql_pushDown = &sys_sql_ip_all;

%rcSet(&sqlrc); 



/**  Step end Вяжем актуальные записи со сделками **/

/*==========================================================================* 
 * Step:            Table Loader                          A5Y50FNE.AQ00087J * 
 * Transform:       Table Loader (Version 2.1)                              * 
 * Description:                                                             * 
 *                                                                          * 
 * Source Table:    SQL Join - work.WGCL2RJ               A5Y50FNE.AO0004N2 * 
 * Target Table:    FIN_INSTR_ASSOC_CAP_FLR_BK -          A5Y50FNE.AE00011Y * 
 *                   work_ia.FIN_INSTR_ASSOC_CAP_FLR_BK                     * 
 *==========================================================================*/ 

%let transformID = %quote(A5Y50FNE.AQ00087J);
%let trans_rc = 0;
%let etls_stepStartTime = %sysfunc(datetime(), datetime20.); 

%let SYSLAST = %nrquote(work.WGCL2RJ); 

%let SYS_SQL_IP_SPEEDO = Y;
%let SYS_SQL_MAPPUTTO = sas_put;
%let SYS_SQLREDUCEPUT = DBMS;
%global etls_sql_pushDown;
%let etls_sql_pushDown = -1;
option DBIDIRECTEXEC;

%global etls_tableExist;
%global etls_numIndex;
%global etls_lastTable;
%let etls_tableExist = -1; 
%let etls_numIndex = -1; 
%let etls_lastTable = &SYSLAST; 

/*---- Define load data macro  ----*/ 

/* --------------------------------------------------------------
   Load Technique Selection: Replace - EntireTable
   Constraint and index action selections: 'INIT','ASIS','ASIS','ASIS'
   Additional options selections... 
      Set unmapped to missing on updates: false 
   -------------------------------------------------------------- */
%macro etls_loader;

   %let etls_tableOptions = ;
   
   /*---- Map the columns  ----*/ 
   proc datasets lib = work nolist nowarn memtype = (data view);
      delete WIRO5YS;
   quit;
   
   %put %str(NOTE: Mapping columns ...);
   proc sql;
      create view work.WIRO5YS as
         select
            FINANCIAL_INSTRUMENT_ID as FINANCIAL_INSTRUMENT_ASSOC_ID,
            VALID_FROM_DTTM,
            VALID_TO_DTTM,
            ('DRV') as FINANCIAL_INSTR_ASSOC_TYPE_CD length = 3
               format = $3.
               informat = $3.,
            FINANCIAL_INSTRUMENT_ID,
            REFERENCE_ACCOUNT_ID
      from &etls_lastTable
      ;
   quit;
   
   %let SYSLAST = work.WIRO5YS;
   
   %let etls_lastTable = &SYSLAST; 
   %let etls_tableOptions = ; 
   
   /* Determine if the target table exists  */ 
   %let etls_tableExist = %eval(%sysfunc(exist(work_ia.FIN_INSTR_ASSOC_CAP_FLR_BK, DATA)) or 
         %sysfunc(exist(work_ia.FIN_INSTR_ASSOC_CAP_FLR_BK, VIEW))); 
   
   %if &etls_tableExist %then 
   %do;/* table exists  */ 
      %let etls_hasPreExistingConstraint=0; 
      
      proc datasets lib = work nolist nowarn memtype = (data view);
         delete etls_commands etls_commands_F;
      quit;
      
      %let etls_otherTablesReferToThisTable=0;
      
      %macro etls_CIContents(table=,workTableOut=,inDSOptions=);
         %put NOTE: Building table listing Constraints and Indexes for: &table;
         proc datasets lib=work nolist; delete &workTableOut; quit;
         proc contents data=&table&inDSOptions out2=&workTableOut noprint; run;
         
         data &workTableOut;
            length name $60 type $20 icown idxUnique idxNoMiss $3 recreate $600;
            set &workTableOut;
            type=upcase(type);
            if type eq 'REFERENTIAL' then
            do;
               put "WARNING%QUOTE(:) Target table is referenced by constraints in"
                    " another table: " ref;
               call symput('etls_otherTablesReferToThisTable','1');
               delete;
            end;
            if type='INDEX' and ICOwn eq 'YES' then delete;
         run;
         %rcSet(&syserr); 
         
      %mend etls_CIContents;
      
      %etls_CIContents(table=work_ia.FIN_INSTR_ASSOC_CAP_FLR_BK, workTableOut=etls_commands, inDSOptions=);
      
      %if &etls_otherTablesReferToThisTable %then 
         %put WARNING%QUOTE(:) Replacing entire table will fail. Consider an alternate load technique or revising constraints.; 
      %else 
      %do; /* okay - remove foreign keys  */ 
      
         data etls_commands_F; 
            set etls_commands; 
            if upcase(type)="FOREIGN KEY" then 
            do; 
               command='ic delete '||trim(name)||';';
               output etls_commands_F; 
            end; 
         run; 
         
         %put %str(NOTE: Removing foreign keys before dropping table...);
         data _null_;
            set etls_commands_F;
            %rcSet(&syserr); 
            
      %end; /* okay - remove foreign keys  */ 
      
      proc datasets lib = work nolist nowarn memtype = (data view);
         delete etls_commands etls_commands_F;
      quit;
      
      /*---- Drop a table  ----*/ 
      %put %str(NOTE: Dropping table ...);
      proc datasets lib = work_ia nolist nowarn memtype = (data view);
         delete FIN_INSTR_ASSOC_CAP_FLR_BK;
      quit;
      
      %rcSet(&syserr); 
      
      %let etls_tableExist = 0;
      
   %end; /* table exists  */ 
   
   /*---- Create a new table  ----*/ 
   %if (&etls_tableExist eq 0) %then 
   %do;  /* if table does not exist  */ 
   
      %put %str(NOTE: Creating table ...);
      
      data work_ia.FIN_INSTR_ASSOC_CAP_FLR_BK;
         attrib FINANCIAL_INSTRUMENT_ASSOC_ID length = $32
            format = $32.
            informat = $32.
            label = 'FINANCIAL_INSTRUMENT_ASSOC_ID'; 
         attrib VALID_FROM_DTTM length = 8
            format = DATETIME20.
            informat = DATETIME20.
            label = 'VALID_FROM_DTTM'; 
         attrib VALID_TO_DTTM length = 8
            format = DATETIME20.
            informat = DATETIME20.
            label = 'VALID_TO_DTTM'; 
         attrib FINANCIAL_INSTR_ASSOC_TYPE_CD length = $3
            format = $3.
            informat = $3.
            label = 'FINANCIAL_INSTR_ASSOC_TYPE_CD'; 
         attrib FINANCIAL_INSTRUMENT_ID length = $32
            format = $32.
            informat = $32.
            label = 'FINANCIAL_INSTRUMENT_ID'; 
         attrib REFERENCE_ACCOUNT_ID length = $32
            format = $32.
            informat = $32.
            label = 'FINANCIAL_ACCOUNT_ID'; 
         call missing(of _all_);
         stop;
      run;
      
      %rcSet(&syserr); 
      
      /*---- Create the integrity constraints for a table  ----*/ 
      %put %str(NOTE: Creating integrity constraints ...);
      proc datasets library=work_ia nolist;
         modify FIN_INSTR_ASSOC_CAP_FLR_BK;
            ic create not null (FINANCIAL_INSTRUMENT_ASSOC_ID);
            ic create not null (VALID_FROM_DTTM);
            ic create not null (VALID_TO_DTTM);
            ic create not null (FINANCIAL_INSTR_ASSOC_TYPE_CD);
            ic create not null (FINANCIAL_INSTRUMENT_ID);
            ic create not null (REFERENCE_ACCOUNT_ID);
            ic create pk_index = primary key (FINANCIAL_INSTRUMENT_ASSOC_ID VALID_FROM_DTTM);
      quit;
      
      %rcSet(&syserr); 
      
   %end;  /* if table does not exist  */ 
   
   /*---- Append  ----*/ 
   %put %str(NOTE: Appending data ...);
   
   proc append base = work_ia.FIN_INSTR_ASSOC_CAP_FLR_BK 
      data = &etls_lastTable (&etls_tableOptions)  force ; 
    run; 
   
   %rcSet(&syserr); 
   
   proc datasets lib = work nolist nowarn memtype = (data view);
      delete WIRO5YS;
   quit;
   
%mend etls_loader;
%etls_loader;

%let etls_recCheckExist = 0; 
%let etls_recnt = 0; 
%macro etls_recordCheck; 
   %let etls_recCheckExist = %eval(%sysfunc(exist(work_ia.FIN_INSTR_ASSOC_CAP_FLR_BK, DATA)) or 
         %sysfunc(exist(work_ia.FIN_INSTR_ASSOC_CAP_FLR_BK, VIEW))); 
   
   %if (&etls_recCheckExist) %then
   %do;
      %local etls_syntaxcheck; 
      %let etls_syntaxcheck = %sysfunc(getoption(syntaxcheck)); 
      /* Turn off syntaxcheck option to perform following steps  */ 
      options nosyntaxcheck;
      
      proc contents data = work_ia.FIN_INSTR_ASSOC_CAP_FLR_BK out = work.etls_contents(keep = nobs) noprint; 
      run; 
      
      data _null_; 
         set work.etls_contents (obs = 1); 
         call symput("etls_recnt", left(put(nobs,32.))); 
      run;
      
      proc datasets lib = work nolist nowarn memtype = (data view);
         delete etls_contents;
      quit;
      
      /* Reset syntaxcheck option to previous setting  */ 
      options &etls_syntaxcheck; 
   %end;
%mend etls_recordCheck;
%etls_recordCheck;



/**  Step end Table Loader **/

/*==========================================================================* 
 * Step:            Завершить модуль                      A5Y50FNE.AQ00087K * 
 * Transform:       Завершить модуль                                        * 
 * Description:                                                             * 
 *==========================================================================*/ 

%let transformID = %quote(A5Y50FNE.AQ00087K);
%let trans_rc = 0;
%let etls_stepStartTime = %sysfunc(datetime(), datetime20.); 

%let _INPUT_count = 0; 
%let _OUTPUT_count = 0; 


/*****************************************************************
* ВЕРСИЯ:
*   $Id: transform_job_finish.sas 247 2012-04-03 07:31:10Z nesterenok $
*
******************************************************************
* НАЗНАЧЕНИЕ:
*   Регистрирует конец модуля ETL.
*
* ПАРАМЕТРЫ:
*   нет
*
******************************************************************/

%macro transform_job_finish;

   /* Продолжаем модуль */
   %job_continue_reg(mpJobType=JOB, mpJobName=&ETLS_JobName., mpPostEvent=N);

   /* Завершаем модуль */
   %job_finish_reg(mpJobType=JOB);

%mend transform_job_finish;

%transform_job_finish;


%rcSet(&syserr); 
%rcSet(&sysrc); 
%rcSet(&sqlrc); 



/**  Step end Завершить модуль **/

%let etls_endTime = %sysfunc(datetime(),datetime.);



/**  Job end 042_933_Structure_FINANCIAL_ACCOUNT_CAP_FLR_BK **/

/* Reset jobid and name */
%let jobID = %quote(A569C89V.AQ0000CK);
%let etls_jobName = %nrquote(090_364_Stream_Midas_Fin_Account_BK);

/**************************************************************************** 
 * Job:             042_935_Structure_FINANCIAL_ACCOUNT_  A5Y50FNE.AN0000VI * 
 *                  FRA_BK                                                  * 
 * Description:                                                             * 
 *                                                                          * 
 * Metadata Server: bravo14                                                 * 
 * Port:            8561                                                    * 
 * Location:        /DWH_DWHDDS_IA/Jobs/042_Structure/Financial_Account     * 
 *                                                                          * 
 * Server:          SASApp                                A5C46MZY.AQ000002 * 
 *                                                                          * 
 * Source Table:    FINANCIAL_INSTRUMENT_FRA_BK -         A5Y50FNE.AE00013V * 
 *                   work_ia.FINANCIAL_INSTRUMENT_FRA_BK                    * 
 * Target Tables:   FINANCIAL_ACCOUNT_FRA_BK -            A5Y50FNE.AE00012L * 
 *                   work_ia.FINANCIAL_ACCOUNT_FRA_BK                       * 
 *                  FIN_INSTR_ASSOC_FRA_BK -              A5Y50FNE.AE000123 * 
 *                   work_ia.FIN_INSTR_ASSOC_FRA_BK                         * 
 *                  CUSTOMER_X_FIN_ACC_FRA_BK -           A5Y50FNE.AE00011P * 
 *                   work_ia.CUSTOMER_X_FIN_ACC_FRA_BK                      * 
 *                                                                          * 
 * Generated on:    16 Июль 2013 г. 17:14:44 MSD                            * 
 * Generated by:    sasdwh                                                  * 
 * Version:         SAS Data Integration Studio 4.5                         * 
 ****************************************************************************/ 

/* General macro variables  */ 
%let jobID = %quote(A5Y50FNE.AN0000VI);
%let etls_jobName = %nrquote(042_935_Structure_FINANCIAL_ACCOUNT_FRA_BK);
%let etls_userID = %nrquote(sasdwh);


/* Create metadata macro variables */
%let IOMServer      = %nrquote(SASApp);
%let metaPort       = %nrquote(8561);
%let metaServer     = %nrquote(bravo14);

/* Set metadata options */
options metaport       = &metaPort 
        metaserver     = "&metaServer"; 

/* Setup for capturing job status  */ 
%let etls_startTime = %sysfunc(datetime(),datetime.);
%let etls_recordsBefore = 0;
%let etls_recordsAfter = 0;
%let etls_lib = 0;
%let etls_table = 0;

%global etls_debug; 
%macro etls_setDebug; 
   %if %str(&etls_debug) ne 0 %then 
      OPTIONS MPRINT%str(;); 
%mend; 
%etls_setDebug; 

/*==========================================================================* 
 * Step:            Начать модуль                         A5Y50FNE.AQ00087L * 
 * Transform:       Начать модуль                                           * 
 * Description:                                                             * 
 *==========================================================================*/ 

%let transformID = %quote(A5Y50FNE.AQ00087L);
%let trans_rc = 0;
%let etls_stepStartTime = %sysfunc(datetime(), datetime20.); 

%let _INPUT_count = 0; 
%let _OUTPUT_count = 0; 


/*****************************************************************
* ВЕРСИЯ:
*   $Id: transform_job_start.sas 1747 2012-08-01 11:26:13Z nesterenok $
*
******************************************************************
* НАЗНАЧЕНИЕ:
*   Регистрирует начало модуля ETL.
*
* ПАРАМЕТРЫ:
*   нет
*
******************************************************************/

%macro transform_job_start;

   /* Продолжаем поток (или создаем новый) */
   %local lmvStreamName;
   %if %sysfunc(sysexist(LSB_JOBNAME)) %then
      %let lmvStreamName = %scan(%sysfunc(sysget(LSB_JOBNAME)), 3, :);
   %else
      %let lmvStreamName = ;

   %job_continue_reg(mpJobType=STREAM, mpJobName=&lmvStreamName, mpPostEvent=N, mpForcedStart=Y);

   /* Для DI, начинаем поток заново, если старый был начат не сегодня */
   %if %length(&lmvStreamName) eq 0 and &STREAM_START_DT ne %sysfunc(today()) %then %do;
      %job_start_reg(mpJobType=STREAM, mpParentJobId=, mpJobName=&lmvStreamName.);
   %end;

   /* Начинаем модуль */
   %job_start_reg(mpJobType=JOB, mpParentJobId=&STREAM_ID, mpJobName=&ETLS_JobName.);

%mend transform_job_start;

%transform_job_start;


%rcSet(&syserr); 
%rcSet(&sysrc); 
%rcSet(&sqlrc); 



/**  Step end Начать модуль **/

/*==========================================================================* 
 * Step:            Отбор первых и актуальных записей с   A5Y50FNE.AQ00087M * 
 *                   учетом ног                                             * 
 * Transform:       Splitter                                                * 
 * Description:                                                             * 
 *                                                                          * 
 * Source Table:    FINANCIAL_INSTRUMENT_FRA_BK -         A5Y50FNE.AE00013V * 
 *                   work_ia.FINANCIAL_INSTRUMENT_FRA_BK                    * 
 * Target Tables:   first recs - work.W1B87YYR            A5Y50FNE.AO0004N3 * 
 *                  actual recs - work.W1BAZY4C           A5Y50FNE.AO0004N4 * 
 *==========================================================================*/ 

%let transformID = %quote(A5Y50FNE.AQ00087M);
%let trans_rc = 0;
%let etls_stepStartTime = %sysfunc(datetime(), datetime20.); 

%let etls_recCheckExist = 0; 
%let etls_recnt = 0; 
%macro etls_recordCheck; 
   %let etls_recCheckExist = %eval(%sysfunc(exist(work_ia.FINANCIAL_INSTRUMENT_FRA_BK, DATA)) or 
         %sysfunc(exist(work_ia.FINANCIAL_INSTRUMENT_FRA_BK, VIEW))); 
   
   %if (&etls_recCheckExist) %then
   %do;
      %local etls_syntaxcheck; 
      %let etls_syntaxcheck = %sysfunc(getoption(syntaxcheck)); 
      /* Turn off syntaxcheck option to perform following steps  */ 
      options nosyntaxcheck;
      
      proc contents data = work_ia.FINANCIAL_INSTRUMENT_FRA_BK out = work.etls_contents(keep = nobs) noprint; 
      run; 
      
      data _null_; 
         set work.etls_contents (obs = 1); 
         call symput("etls_recnt", left(put(nobs,32.))); 
      run;
      
      proc datasets lib = work nolist nowarn memtype = (data view);
         delete etls_contents;
      quit;
      
      /* Reset syntaxcheck option to previous setting  */ 
      options &etls_syntaxcheck; 
   %end;
%mend etls_recordCheck;
%etls_recordCheck;

%let SYSLAST = %nrquote(work_ia.FINANCIAL_INSTRUMENT_FRA_BK); 

proc datasets lib=work nolist nowarn memtype = (data view);
   delete W1B87YYR;
   delete W1BAZY4C;
quit;

data 
     work.W1B87YYR
     work.W1BAZY4C;
   set &SYSLAST;
   if FSRT=1 then 
      output work.W1B87YYR;
   if VALID_TO_DTTM = &ETL_SCD_FUTURE_DTTM then 
      output work.W1BAZY4C;
run;

%rcSet(&syserr); 

/*---- Map the columns  ----*/ 
proc datasets lib = work nolist nowarn memtype = (data view);
   delete etls_mapped;
quit;

%put %str(NOTE: Mapping columns ...);
proc sql;
   create table work.etls_mapped as
      select
         VALID_FROM_DTTM,
         FINANCIAL_INSTRUMENT_ID,
         IRB_SRC_ACCOUNT_ID,
         DDAT
   from work.W1B87YYR
   ;
quit;

%let SYSLAST = work.etls_mapped;

data work.W1B87YYR;
  set work.etls_mapped;
run;

proc datasets lib = work nolist nowarn memtype = (data view);
   delete etls_mapped;
quit;

%rcSet(&syscc); 

/*---- Map the columns  ----*/ 
proc datasets lib = work nolist nowarn memtype = (data view);
   delete etls_mapped;
quit;

%put %str(NOTE: Mapping columns ...);
proc sql;
   create table work.etls_mapped as
      select
         FINANCIAL_INSTRUMENT_ID,
         FIRST_PAYMENT_DT,
         FINANCIAL_INSTRUMENT_TYPE_CD,
         CURRENCY_CD,
         IRB_INSTR_STATUS_CD,
         IRB_SRC_ACCOUNT_ID,
         KONDOR_A,
         ARM302P_ID,
         FXMM_ID,
         BRCA,
         CNUM,
         VDAT,
         LCD,
         DDAT as DDAT_ACTUAL
   from work.W1BAZY4C
   ;
quit;

%let SYSLAST = work.etls_mapped;

data work.W1BAZY4C;
  set work.etls_mapped;
run;

proc datasets lib = work nolist nowarn memtype = (data view);
   delete etls_mapped;
quit;

%rcSet(&syscc); 



/**  Step end Отбор первых и актуальных записей с учетом ног **/

/*==========================================================================* 
 * Step:            Собираем данные по сделке             A5Y50FNE.AQ00087N * 
 * Transform:       Join                                                    * 
 * Description:                                                             * 
 *                                                                          * 
 * Source Tables:   actual recs - work.W1BAZY4C           A5Y50FNE.AO0004N4 * 
 *                  first recs - work.W1B87YYR            A5Y50FNE.AO0004N3 * 
 * Target Table:    SQL Join - work.W1B4DNDN              A5Y50FNE.AO0004N5 * 
 *==========================================================================*/ 

%let transformID = %quote(A5Y50FNE.AQ00087N);
%let trans_rc = 0;
%let etls_stepStartTime = %sysfunc(datetime(), datetime20.); 

%let etls_recCheckExist = 0; 
%let etls_recnt = 0; 
%macro etls_recordCheck; 
   %let etls_recCheckExist = %eval(%sysfunc(exist(work.W1BAZY4C, DATA)) or 
         %sysfunc(exist(work.W1BAZY4C, VIEW))); 
   
   %if (&etls_recCheckExist) %then
   %do;
      %local etls_syntaxcheck; 
      %let etls_syntaxcheck = %sysfunc(getoption(syntaxcheck)); 
      /* Turn off syntaxcheck option to perform following steps  */ 
      options nosyntaxcheck;
      
      proc contents data = work.W1BAZY4C out = work.etls_contents(keep = nobs) noprint; 
      run; 
      
      data _null_; 
         set work.etls_contents (obs = 1); 
         call symput("etls_recnt", left(put(nobs,32.))); 
      run;
      
      proc datasets lib = work nolist nowarn memtype = (data view);
         delete etls_contents;
      quit;
      
      /* Reset syntaxcheck option to previous setting  */ 
      options &etls_syntaxcheck; 
   %end;
%mend etls_recordCheck;
%etls_recordCheck;

%let SYS_SQL_IP_SPEEDO = Y;
%let SYS_SQL_MAPPUTTO = sas_put;
%let SYS_SQLREDUCEPUT = DBMS;
%global etls_sql_pushDown;
%let etls_sql_pushDown = -1;
option DBIDIRECTEXEC;

proc datasets lib = work nolist nowarn memtype = (data view);
   delete W1B4DNDN;
quit;

proc sql;
   create view work.W1B4DNDN as
   select
      W1B87YYR.VALID_FROM_DTTM length = 8   
         format = DATETIME20.
         informat = DATETIME20.
         label = 'VALID_FROM_DTTM',
      W1B87YYR.IRB_SRC_ACCOUNT_ID length = 32   
         format = $32.
         informat = $32.
         label = 'IRB_SRC_ACCOUNT_ID',
      W1BAZY4C.DDAT_ACTUAL as DDAT length = 8   
         format = DATETIME20.
         informat = DATETIME20.
         label = 'DDAT',
      W1BAZY4C.FIRST_PAYMENT_DT length = 8   
         format = DATETIME20.
         informat = DATETIME20.
         label = 'FIRST_PAYMENT_DT',
      W1BAZY4C.FINANCIAL_INSTRUMENT_TYPE_CD length = 3   
         format = $3.
         informat = $3.
         label = 'FINANCIAL_INSTRUMENT_TYPE_CD',
      W1BAZY4C.CURRENCY_CD length = 3   
         format = $3.
         informat = $3.
         label = 'CURRENCY_CD',
      W1BAZY4C.IRB_INSTR_STATUS_CD length = 3   
         format = $3.
         informat = $3.
         label = 'IRB_INSTR_STATUS_CD',
      W1BAZY4C.KONDOR_A length = 8   
         format = 11.
         informat = 11.
         label = 'KONDOR_A',
      W1BAZY4C.ARM302P_ID length = 8   
         format = 11.
         informat = 11.
         label = 'ARM302P_ID',
      W1BAZY4C.FXMM_ID length = 8   
         format = 11.
         informat = 11.
         label = 'FXMM_ID',
      W1BAZY4C.BRCA length = 3   
         format = $3.
         informat = $3.
         label = 'BRCA',
      W1BAZY4C.CNUM length = 8   
         format = 7.
         informat = 7.
         label = 'CNUM',
      W1BAZY4C.VDAT length = 8   
         format = DATETIME20.
         informat = DATETIME20.
         label = 'VDAT',
      W1BAZY4C.LCD length = 8   
         format = DATETIME20.
         informat = DATETIME20.
         label = 'LCD'
   from
      work.W1B87YYR, 
      work.W1BAZY4C
   where
      W1B87YYR.IRB_SRC_ACCOUNT_ID = W1BAZY4C.IRB_SRC_ACCOUNT_ID
   ;
quit;

%global etls_sql_pushDown;
%let etls_sql_pushDown = &sys_sql_ip_all;

%rcSet(&sqlrc); 



/**  Step end Собираем данные по сделке **/

/*==========================================================================* 
 * Step:            Extract                               A5Y50FNE.AQ00087O * 
 * Transform:       Extract                                                 * 
 * Description:                                                             * 
 *                                                                          * 
 * Source Table:    SQL Join - work.W1B4DNDN              A5Y50FNE.AO0004N5 * 
 * Target Table:    Extract - work.W1MOEVV1               A5Y50FNE.AO0004N6 * 
 *==========================================================================*/ 

%let transformID = %quote(A5Y50FNE.AQ00087O);
%let trans_rc = 0;
%let etls_stepStartTime = %sysfunc(datetime(), datetime20.); 

%let etls_recnt = -1;
%let SYSLAST = %nrquote(work.W1B4DNDN); 

%let SYS_SQL_IP_SPEEDO = Y;
%let SYS_SQL_MAPPUTTO = sas_put;
%let SYS_SQLREDUCEPUT = DBMS;
%global etls_sql_pushDown;
%let etls_sql_pushDown = -1;
option DBIDIRECTEXEC;

/*---- Map the columns  ----*/ 
proc datasets lib = work nolist nowarn memtype = (data view);
   delete W1MOEVV1;
quit;

data _null_;
   put "NOTE: The following column(s) do not have a column mapping, so the"
        " value(s) will be set to missing: DAY_BASIS_CD,"
        " INTEREST_PAYMENT_TYPE_CD";
run;

%put %str(NOTE: Mapping columns ...);
proc sql;
   create view work.W1MOEVV1 as
      select
         VALID_FROM_DTTM,
         (&ETL_SCD_FUTURE_DTTM) as VALID_TO_DTTM length = 8
            format = DATETIME20.
            informat = DATETIME20.
            label = 'VALID_TO_DTTM',
         IRB_SRC_ACCOUNT_ID,
         ('MID') as SOURCE_SYSTEM_CD length = 3
            format = $3.
            informat = $3.
            label = 'SOURCE_SYSTEM_CD',
         (ifc(missing(KONDOR_A), '', cats(KONDOR_A))) as ACCOUNT_REGISTRATION_NM length = 100
            format = $100.
            informat = $100.
            label = 'ACCOUNT_REGISTRATION_NM',
         (ifc(missing(ARM302P_ID), '', cats(FXMM_ID, '_', ARM302P_ID))) as ALTERNATE_ACCOUNT_NM length = 40
            format = $40.
            informat = $40.
            label = 'ALTERNATE_ACCOUNT_NM',
         ('DRV') as FINANCIAL_ACCOUNT_TYPE_CD length = 3
            format = $3.
            informat = $3.
            label = 'FINANCIAL_ACCOUNT_TYPE_CD',
         BRCA,
         IRB_INSTR_STATUS_CD as ACCOUNT_STATUS_CD   
            label = 'ACCOUNT_STATUS_CD',
         DDAT as OPEN_DT   
            label = 'OPEN_DT',
         FIRST_PAYMENT_DT as CLOSE_DT   
            label = 'corrected later',
         CURRENCY_CD,
         "" as DAY_BASIS_CD length = 10
            format = $10.
            informat = $10.
            label = 'DAY_BASIS_CD',
         "" as INTEREST_PAYMENT_TYPE_CD length = 3
            format = $3.
            informat = $3.
            label = 'INTEREST_PAYMENT_TYPE_CD',
         FINANCIAL_INSTRUMENT_TYPE_CD,
         (put(CNUM, z8.)) as CUSTOMER_NO length = 9
            format = $9.
            informat = $9.
            label = 'CUSTOMER_NO',
         VDAT,
         LCD
   from &SYSLAST
   ;
quit;

%let SYSLAST = work.W1MOEVV1;

%global etls_sql_pushDown;
%let etls_sql_pushDown = &sys_sql_ip_all;

%rcSet(&sqlrc); 



/**  Step end Extract **/

/*==========================================================================* 
 * Step:            Генерация BK                          A5Y50FNE.AQ00087P * 
 * Transform:       Генерация BK                                            * 
 * Description:                                                             * 
 *                                                                          * 
 * Source Table:    Extract - work.W1MOEVV1               A5Y50FNE.AO0004N6 * 
 * Target Table:    Генерация BKtpOut - work.W1MHBF25     A5Y50FNE.AO0004N7 * 
 *==========================================================================*/ 

%let transformID = %quote(A5Y50FNE.AQ00087P);
%let trans_rc = 0;
%let etls_stepStartTime = %sysfunc(datetime(), datetime20.); 

%let etls_recnt = -1;
%let SYSLAST = %nrquote(work.W1MOEVV1); 

%let _INPUT_count = 1; 
%let _INPUT = work.W1MOEVV1;
%let _INPUT_connect = ;
%let _INPUT_engine = ;
%let _INPUT_memtype = VIEW;
%let _INPUT_options = %nrquote();
%let _INPUT_alter = %nrquote();
%let _INPUT_path = %nrquote(/Extract_A5Y50FNE.AO0004N6%(WorkTable%));
%let _INPUT_type = 1;
%let _INPUT_label = %nrquote();

%let tpIn = work.W1MOEVV1;
%let tpIn_connect = ;
%let tpIn_engine = ;
%let tpIn_memtype = VIEW;
%let tpIn_options = %nrquote();
%let tpIn_alter = %nrquote();
%let tpIn_path = %nrquote(/Extract_A5Y50FNE.AO0004N6%(WorkTable%));
%let tpIn_type = 1;
%let tpIn_label = %nrquote();

%let _OUTPUT_count = 1; 
%let _OUTPUT = work.W1MHBF25;
%let _OUTPUT_connect = ;
%let _OUTPUT_engine = ;
%let _OUTPUT_memtype = DATA;
%let _OUTPUT_options = %nrquote();
%let _OUTPUT_alter = %nrquote();
%let _OUTPUT_path = %nrquote(/Генерация BKtpOut_A5Y50FNE.AO0004N7%(WorkTable%));
%let _OUTPUT_type = 1;
%let _OUTPUT_label = %nrquote();
/* List of target columns to keep  */ 
%let _OUTPUT_keep = DRV_ACCOUNT_ID VALID_FROM_DTTM VALID_TO_DTTM SOURCE_SYSTEM_CD 
        ACCOUNT_REGISTRATION_NM ALTERNATE_ACCOUNT_NM FINANCIAL_ACCOUNT_TYPE_CD 
        ACCOUNT_STATUS_CD OPEN_DT CLOSE_DT CURRENCY_CD DAY_BASIS_CD 
        INTEREST_PAYMENT_TYPE_CD IRB_SRC_ACCOUNT_ID MID_FINANCIAL_UNIT_ID_BRCA 
        FCC_COUNTERPARTY_ID BRCA FINANCIAL_INSTRUMENT_TYPE_CD VDAT LCD;

%let tpOut = work.W1MHBF25;
%let tpOut_connect = ;
%let tpOut_engine = ;
%let tpOut_memtype = DATA;
%let tpOut_options = %nrquote();
%let tpOut_alter = %nrquote();
%let tpOut_path = %nrquote(/Генерация BKtpOut_A5Y50FNE.AO0004N7%(WorkTable%));
%let tpOut_type = 1;
%let tpOut_label = %nrquote();
/* List of target columns to keep  */ 
%let tpOut_keep = DRV_ACCOUNT_ID VALID_FROM_DTTM VALID_TO_DTTM SOURCE_SYSTEM_CD 
        ACCOUNT_REGISTRATION_NM ALTERNATE_ACCOUNT_NM FINANCIAL_ACCOUNT_TYPE_CD 
        ACCOUNT_STATUS_CD OPEN_DT CLOSE_DT CURRENCY_CD DAY_BASIS_CD 
        INTEREST_PAYMENT_TYPE_CD IRB_SRC_ACCOUNT_ID MID_FINANCIAL_UNIT_ID_BRCA 
        FCC_COUNTERPARTY_ID BRCA FINANCIAL_INSTRUMENT_TYPE_CD VDAT LCD;


proc datasets lib=work nolist nowarn memtype = (data view);
   delete W1MHBF25;
quit;

%let tpBK = %nrquote(FINANCIAL_ACCOUNT_DRV           );
%let tpBK0 = %nrquote(3);
%let tpBK1 = %nrquote(FINANCIAL_ACCOUNT_DRV           );
%let tpBK2 = %nrquote(FINANCIAL_UNIT_MID_BRCA         );
%let tpBK3 = %nrquote(FCC_COUNTERPARTY_FCC            );
%let tpBK_count = %nrquote(3);
%let tpOptionalBK_count = %nrquote(0);
%let tpOptionalBK = ;

/* List of target columns to keep  */ 
%let _keep = DRV_ACCOUNT_ID VALID_FROM_DTTM VALID_TO_DTTM SOURCE_SYSTEM_CD 
        ACCOUNT_REGISTRATION_NM ALTERNATE_ACCOUNT_NM FINANCIAL_ACCOUNT_TYPE_CD 
        ACCOUNT_STATUS_CD OPEN_DT CLOSE_DT CURRENCY_CD DAY_BASIS_CD 
        INTEREST_PAYMENT_TYPE_CD IRB_SRC_ACCOUNT_ID MID_FINANCIAL_UNIT_ID_BRCA 
        FCC_COUNTERPARTY_ID BRCA FINANCIAL_INSTRUMENT_TYPE_CD VDAT LCD;
/* List of target columns to keep  */ 
%let keep = DRV_ACCOUNT_ID VALID_FROM_DTTM VALID_TO_DTTM SOURCE_SYSTEM_CD 
        ACCOUNT_REGISTRATION_NM ALTERNATE_ACCOUNT_NM FINANCIAL_ACCOUNT_TYPE_CD 
        ACCOUNT_STATUS_CD OPEN_DT CLOSE_DT CURRENCY_CD DAY_BASIS_CD 
        INTEREST_PAYMENT_TYPE_CD IRB_SRC_ACCOUNT_ID MID_FINANCIAL_UNIT_ID_BRCA 
        FCC_COUNTERPARTY_ID BRCA FINANCIAL_INSTRUMENT_TYPE_CD VDAT LCD;
/*****************************************************************
* ВЕРСИЯ:
*     $Id: transform_generate_bk.sas 4889 2013-04-04 09:14:07Z nesterenok $
*
******************************************************************
* НАЗНАЧЕНИЕ:
*     Генерирует бизнес-ключи в таблице по списку.
*
* ПАРАМЕТРЫ:
*     tpIn                    +  имя входного набора
*     tpBK                    +  список кодов обязательных для генерации бизнес-ключей, разделенный пробелами
*                                Такой бизнес-ключ станет дамми, если заполнены не все поля, его составляющие
*                                FK к ETL_SYS.ETL_BK.BK_CD
*     tpOptionalBK            +  список кодов НЕобязательных для генерации бизнес-ключей, разделенный пробелами
*                                Такой бизнес-ключ останется пустым, если заполнены не все поля, его составляющие
*     tpOut                   +  имя выходного набора
*
******************************************************************/

%macro transform_generate_bk;
   %let tpBK_count         = %unquote(&tpBK_count);
   %let tpOptionalBK_count = %unquote(&tpOptionalBK_count);

   %local lmvDummyRows lmvFieldDummyCount lmvDummyRequired;
   %let lmvDummyRows       = work.tr_gen_bk_dummy_rows;
   %let lmvFieldDummyCount = etl_dummy_count;
   %let lmvDummyRequired   = %eval (&tpBK_count gt 0);

   /* Макросы для генерации одного ключа */
   %macro sm_trans_gen_bk_required;
      %etl_generate_bk (
         mpFieldBK=&bk_field_nm, mpLengthBK=%sysfunc(inputn(&bk_type_cd, bkt_cd_len.)),
         mpColumnList=&bk_column_list_txt, mpFormat=&bk_format_txt,
         mpFieldDummy=&lmvFieldDummy, mpFieldDummyCount=&lmvFieldDummyCount
      );
   %mend;
   %macro sm_trans_gen_bk_optional;
      %etl_generate_bk (
         mpFieldBK=&bk_field_nm, mpLengthBK=%sysfunc(inputn(&bk_type_cd, bkt_cd_len.)),
         mpColumnList=&bk_column_list_txt, mpFormat=&bk_format_txt,
         mpFieldDummy=
      );
   %mend;

   /* Макрос для подстановки в дамми-ключ уникального номера */
   %macro sm_trans_gen_bk_dummy;
      if &lmvFieldDummy gt 0 then do;
         set &lmvDummyIds (keep=OBJECT_ID rename=(OBJECT_ID=&lmvFieldDummy._no)) point=&lmvFieldDummy;
         &bk_field_nm = cats (&bk_field_nm, "_", &lmvFieldDummy._no);

         %error_check;
      end;
   %mend;


   /* Создаем выходной набор итерацией по всем заявленным бизнес-ключам */
   /* Считаем необходимое кол-во дамми-ключей */
   %local lmvBkIndex lmvFieldDummy lmvDummyCount;
   %let lmvDummyCount   = 0;
   data
      %if &lmvDummyRequired %then %do;
         &tpOut (drop= etl_dummy_:)
         &lmvDummyRows
      %end;
      %else %do;
         &tpOut
      %end;
   ;
      set &tpIn end=ds_end;

      /* Генерация необязательных ключей */
      %do lmvBkIndex=1 %to &tpOptionalBK_count;
         %util_loop_data (mpLoopMacro=sm_trans_gen_bk_optional, mpData=ETL_SYS.ETL_BK,
                          mpWhere=BK_CD eq %util_quote(&&tpOptionalBK&lmvBkIndex)
         );
      %end;

      %if &lmvDummyRequired %then %do;
         length &lmvFieldDummyCount 8;
         drop &lmvFieldDummyCount;
         retain &lmvFieldDummyCount 0;

         /* Генерация обязательных ключей */
         %do lmvBkIndex=1 %to &tpBK_count;
            %let lmvFieldDummy = etl_dummy_&lmvBkIndex.;

            %util_loop_data (mpLoopMacro=sm_trans_gen_bk_required, mpData=ETL_SYS.ETL_BK,
                             mpWhere=BK_CD eq %util_quote(&&tpBK&lmvBkIndex)
            );
         %end;

         /* Если в какой-то записи есть дамми, то не выводим ее сразу */
         if sum (of etl_dummy_1-etl_dummy_&tpBK_count) = 0 then
            output &tpOut;
         else do;
            output &lmvDummyRows;
         end;

         if ds_end then call symputx ("lmvDummyCount", &lmvFieldDummyCount);
      %end;
      %else %do;
         output &tpOut;
      %end;
   run;
   %error_check (mpStepType=DATA);

   /* Если дамми нет, то всё */
   %if (not &lmvDummyRequired) or (&lmvDummyCount eq 0) %then %return;


   /* Для каждого дамми генерируем уникальный номер */
   %local lmvDummyIds;
   %let lmvDummyIds = work.tr_gen_bk_dummy_ids;
   %unique_ids (mpIdCount=&lmvDummyCount, mpOut=&lmvDummyIds, mpSequenceName=ETL_DUMMY_SEQ);

   /* Добавляем номер к дамми */
   data &lmvDummyRows._id (drop= etl_dummy_:);
      set &lmvDummyRows;

      %do lmvBkIndex=1 %to &tpBK_count;
         %let lmvFieldDummy = etl_dummy_&lmvBkIndex.;

         %util_loop_data (mpLoopMacro=sm_trans_gen_bk_dummy, mpData=ETL_SYS.ETL_BK,
                          mpWhere=BK_CD eq %util_quote(&&tpBK&lmvBkIndex)
         );
      %end;
   run;
   %error_check (mpStepType=DATA);


   /* Добавляем дамми-строки к выходному набору */
   proc append base=&tpOut data=&lmvDummyRows._id;
   run;
   %error_check (mpStepType=DATA);

%mend transform_generate_bk;

%transform_generate_bk;

%rcSet(&syserr); 
%rcSet(&sysrc); 
%rcSet(&sqlrc); 



/**  Step end Генерация BK **/

/*==========================================================================* 
 * Step:            Table Loader                          A5Y50FNE.AQ00087Q * 
 * Transform:       Table Loader (Version 2.1)                              * 
 * Description:                                                             * 
 *                                                                          * 
 * Source Table:    Генерация BKtpOut - work.W1MHBF25     A5Y50FNE.AO0004N7 * 
 * Target Table:    CUSTOMER_X_FIN_ACC_FRA_BK -           A5Y50FNE.AE00011P * 
 *                   work_ia.CUSTOMER_X_FIN_ACC_FRA_BK                      * 
 *==========================================================================*/ 

%let transformID = %quote(A5Y50FNE.AQ00087Q);
%let trans_rc = 0;
%let etls_stepStartTime = %sysfunc(datetime(), datetime20.); 

%let SYSLAST = %nrquote(work.W1MHBF25); 

%let SYS_SQL_IP_SPEEDO = Y;
%let SYS_SQL_MAPPUTTO = sas_put;
%let SYS_SQLREDUCEPUT = DBMS;
%global etls_sql_pushDown;
%let etls_sql_pushDown = -1;
option DBIDIRECTEXEC;

%global etls_tableExist;
%global etls_numIndex;
%global etls_lastTable;
%let etls_tableExist = -1; 
%let etls_numIndex = -1; 
%let etls_lastTable = &SYSLAST; 

/*---- Define load data macro  ----*/ 

/* --------------------------------------------------------------
   Load Technique Selection: Replace - EntireTable
   Constraint and index action selections: 'INIT','ASIS','ASIS','ASIS'
   Additional options selections... 
      Set unmapped to missing on updates: false 
   -------------------------------------------------------------- */
%macro etls_loader;

   %let etls_tableOptions = ;
   
   /*---- Map the columns  ----*/ 
   proc datasets lib = work nolist nowarn memtype = (data view);
      delete WIROA3M;
   quit;
   
   data _null_;
      put "NOTE: The following column(s) do not have a column mapping, so the"
           " value(s) will be set to missing: RELSHP_TO_PRIMARY_CD,"
           " EFFECTIVE_FROM_DTTM, EFFECTIVE_TO_DTTM";
   run;
   
   %put %str(NOTE: Mapping columns ...);
   proc sql;
      create view work.WIROA3M as
         select
            FCC_COUNTERPARTY_ID as CUSTOMER_ID,
            DRV_ACCOUNT_ID as ACCOUNT_ID,
            VALID_FROM_DTTM,
            VALID_TO_DTTM,
            "" as RELSHP_TO_PRIMARY_CD length = 3
               format = $3.
               informat = $3.,
            ('DDC') as RELATIONSHIP_TO_ACCOUNT_CD length = 3
               format = $3.
               informat = $3.,
            . as EFFECTIVE_FROM_DTTM length = 8
               format = DATETIME20.
               informat = DATETIME20.,
            . as EFFECTIVE_TO_DTTM length = 8
               format = DATETIME20.
               informat = DATETIME20.
      from &etls_lastTable
      ;
   quit;
   
   %let SYSLAST = work.WIROA3M;
   
   %let etls_lastTable = &SYSLAST; 
   %let etls_tableOptions = ; 
   
   /* Determine if the target table exists  */ 
   %let etls_tableExist = %eval(%sysfunc(exist(work_ia.CUSTOMER_X_FIN_ACC_FRA_BK, DATA)) or 
         %sysfunc(exist(work_ia.CUSTOMER_X_FIN_ACC_FRA_BK, VIEW))); 
   
   %if &etls_tableExist %then 
   %do;/* table exists  */ 
      %let etls_hasPreExistingConstraint=0; 
      
      proc datasets lib = work nolist nowarn memtype = (data view);
         delete etls_commands etls_commands_F;
      quit;
      
      %let etls_otherTablesReferToThisTable=0;
      
      %macro etls_CIContents(table=,workTableOut=,inDSOptions=);
         %put NOTE: Building table listing Constraints and Indexes for: &table;
         proc datasets lib=work nolist; delete &workTableOut; quit;
         proc contents data=&table&inDSOptions out2=&workTableOut noprint; run;
         
         data &workTableOut;
            length name $60 type $20 icown idxUnique idxNoMiss $3 recreate $600;
            set &workTableOut;
            type=upcase(type);
            if type eq 'REFERENTIAL' then
            do;
               put "WARNING%QUOTE(:) Target table is referenced by constraints in"
                    " another table: " ref;
               call symput('etls_otherTablesReferToThisTable','1');
               delete;
            end;
            if type='INDEX' and ICOwn eq 'YES' then delete;
         run;
         %rcSet(&syserr); 
         
      %mend etls_CIContents;
      
      %etls_CIContents(table=work_ia.CUSTOMER_X_FIN_ACC_FRA_BK, workTableOut=etls_commands, inDSOptions=);
      
      %if &etls_otherTablesReferToThisTable %then 
         %put WARNING%QUOTE(:) Replacing entire table will fail. Consider an alternate load technique or revising constraints.; 
      %else 
      %do; /* okay - remove foreign keys  */ 
      
         data etls_commands_F; 
            set etls_commands; 
            if upcase(type)="FOREIGN KEY" then 
            do; 
               command='ic delete '||trim(name)||';';
               output etls_commands_F; 
            end; 
         run; 
         
         %put %str(NOTE: Removing foreign keys before dropping table...);
         data _null_;
            set etls_commands_F;
            %rcSet(&syserr); 
            
      %end; /* okay - remove foreign keys  */ 
      
      proc datasets lib = work nolist nowarn memtype = (data view);
         delete etls_commands etls_commands_F;
      quit;
      
      /*---- Drop a table  ----*/ 
      %put %str(NOTE: Dropping table ...);
      proc datasets lib = work_ia nolist nowarn memtype = (data view);
         delete CUSTOMER_X_FIN_ACC_FRA_BK;
      quit;
      
      %rcSet(&syserr); 
      
      %let etls_tableExist = 0;
      
   %end; /* table exists  */ 
   
   /*---- Create a new table  ----*/ 
   %if (&etls_tableExist eq 0) %then 
   %do;  /* if table does not exist  */ 
   
      %put %str(NOTE: Creating table ...);
      
      data work_ia.CUSTOMER_X_FIN_ACC_FRA_BK;
         attrib CUSTOMER_ID length = $32
            format = $32.
            informat = $32.
            label = 'CUSTOMER_ID'; 
         attrib ACCOUNT_ID length = $32
            format = $32.
            informat = $32.
            label = 'ACCOUNT_ID'; 
         attrib VALID_FROM_DTTM length = 8
            format = DATETIME20.
            informat = DATETIME20.
            label = 'VALID_FROM_DTTM'; 
         attrib VALID_TO_DTTM length = 8
            format = DATETIME20.
            informat = DATETIME20.
            label = 'VALID_TO_DTTM'; 
         attrib RELSHP_TO_PRIMARY_CD length = $3
            format = $3.
            informat = $3.
            label = 'RELSHP_TO_PRIMARY_CD'; 
         attrib RELATIONSHIP_TO_ACCOUNT_CD length = $3
            format = $3.
            informat = $3.
            label = 'RELATIONSHIP_TO_ACCOUNT_CD'; 
         attrib EFFECTIVE_FROM_DTTM length = 8
            format = DATETIME20.
            informat = DATETIME20.
            label = 'EFFECTIVE_FROM_DTTM'; 
         attrib EFFECTIVE_TO_DTTM length = 8
            format = DATETIME20.
            informat = DATETIME20.
            label = 'EFFECTIVE_TO_DTTM'; 
         call missing(of _all_);
         stop;
      run;
      
      %rcSet(&syserr); 
      
      /*---- Create the integrity constraints for a table  ----*/ 
      %put %str(NOTE: Creating integrity constraints ...);
      proc datasets library=work_ia nolist;
         modify CUSTOMER_X_FIN_ACC_FRA_BK;
            ic create not null (CUSTOMER_ID);
            ic create not null (ACCOUNT_ID);
            ic create not null (VALID_FROM_DTTM);
            ic create not null (VALID_TO_DTTM);
            ic create not null (RELATIONSHIP_TO_ACCOUNT_CD);
            ic create Index1 = primary key (CUSTOMER_ID ACCOUNT_ID VALID_FROM_DTTM 
                           RELATIONSHIP_TO_ACCOUNT_CD);
      quit;
      
      %rcSet(&syserr); 
      
   %end;  /* if table does not exist  */ 
   
   /*---- Append  ----*/ 
   %put %str(NOTE: Appending data ...);
   
   proc append base = work_ia.CUSTOMER_X_FIN_ACC_FRA_BK 
      data = &etls_lastTable (&etls_tableOptions)  force ; 
    run; 
   
   %rcSet(&syserr); 
   
   proc datasets lib = work nolist nowarn memtype = (data view);
      delete WIROA3M;
   quit;
   
%mend etls_loader;
%etls_loader;

%let etls_recCheckExist = 0; 
%let etls_recnt = 0; 
%macro etls_recordCheck; 
   %let etls_recCheckExist = %eval(%sysfunc(exist(work_ia.CUSTOMER_X_FIN_ACC_FRA_BK, DATA)) or 
         %sysfunc(exist(work_ia.CUSTOMER_X_FIN_ACC_FRA_BK, VIEW))); 
   
   %if (&etls_recCheckExist) %then
   %do;
      %local etls_syntaxcheck; 
      %let etls_syntaxcheck = %sysfunc(getoption(syntaxcheck)); 
      /* Turn off syntaxcheck option to perform following steps  */ 
      options nosyntaxcheck;
      
      proc contents data = work_ia.CUSTOMER_X_FIN_ACC_FRA_BK out = work.etls_contents(keep = nobs) noprint; 
      run; 
      
      data _null_; 
         set work.etls_contents (obs = 1); 
         call symput("etls_recnt", left(put(nobs,32.))); 
      run;
      
      proc datasets lib = work nolist nowarn memtype = (data view);
         delete etls_contents;
      quit;
      
      /* Reset syntaxcheck option to previous setting  */ 
      options &etls_syntaxcheck; 
   %end;
%mend etls_recordCheck;
%etls_recordCheck;



/**  Step end Table Loader **/

/*==========================================================================* 
 * Step:            Table Loader                          A5Y50FNE.AQ00087R * 
 * Transform:       Table Loader (Version 2.1)                              * 
 * Description:                                                             * 
 *                                                                          * 
 * Source Table:    Генерация BKtpOut - work.W1MHBF25     A5Y50FNE.AO0004N7 * 
 * Target Table:    FINANCIAL_ACCOUNT_FRA_BK -            A5Y50FNE.AE00012L * 
 *                   work_ia.FINANCIAL_ACCOUNT_FRA_BK                       * 
 *==========================================================================*/ 

%let transformID = %quote(A5Y50FNE.AQ00087R);
%let trans_rc = 0;
%let etls_stepStartTime = %sysfunc(datetime(), datetime20.); 

%let SYSLAST = %nrquote(work.W1MHBF25); 

%let SYS_SQL_IP_SPEEDO = Y;
%let SYS_SQL_MAPPUTTO = sas_put;
%let SYS_SQLREDUCEPUT = DBMS;
%global etls_sql_pushDown;
%let etls_sql_pushDown = -1;
option DBIDIRECTEXEC;

%global etls_tableExist;
%global etls_numIndex;
%global etls_lastTable;
%let etls_tableExist = -1; 
%let etls_numIndex = -1; 
%let etls_lastTable = &SYSLAST; 

/*---- Define load data macro  ----*/ 

/* --------------------------------------------------------------
   Load Technique Selection: Replace - EntireTable
   Constraint and index action selections: 'INIT','ASIS','ASIS','ASIS'
   Additional options selections... 
      Set unmapped to missing on updates: false 
   -------------------------------------------------------------- */
%macro etls_loader;

   %let etls_tableOptions = ;
   
   /*---- Map the columns  ----*/ 
   proc datasets lib = work nolist nowarn memtype = (data view);
      delete WIROA5P;
   quit;
   
   data _null_;
      put "NOTE: The following column(s) do not have a column mapping, so the"
           " value(s) will be set to missing: AUTO_DEBIT_ACCOUNT_TYPE_CD,"
           " ACCOUNT_REGISTRATION_TYPE_CD, CLOSE_REASON_CD,    ACCOUNT_TAX_ID,"
           " EXPECTED_LOSS_PCT, INDIVIDUAL_ORGANIZATION_CD, SOURCE_CD,   "
           " OPENING_CHANNEL_CD, PREFERRED_CHANNEL_CD, PRIMARY_PHONE_NO,   "
           " PRIMARY_PHONE_TYPE_CD, SECONDARY_PHONE_NO, SECONDARY_PHONE_TYPE_CD,"
           "    MAILABLE_FLG, TELEPHONABLE_FLG, EMAIL_FLG, SMS_FLG,"
           " DO_NOT_CONTACT_FLG,    EMPLOYEE_RK, CURRENCY_BASED_ACCOUNT_FLG,"
           " FEE_BASED_FLG, ANNUAL_FEES_AMT,    MONTHLY_FEES_AMT, CAMPAIGN_CD,"
           " COMMUNICATION_CD, REGISTERED_ONLINE_DT,    FIRST_LOGIN_DT,"
           " ONLINE_BILL_PAYMENT_FLG, ID_VERIFICATION_TYPE_CD,   "
           " PREVIOUS_ACCOUNT_ID, OPEN_BRANCH_FINANCIAL_UNIT_ID,   "
           " FINANCIAL_APPLICATION_ID, CREDIT_FACILITY_ID,"
           " FUTURE_MARGIN_INCOME_AMT,    IN_DEFAULT_FLG, FINANCIAL_BOOK_ID,"
           " IRRECOVERABLE_FLG,    OWNED_BY_INTERNAL_ORG_ID,"
           " PREVIOUS_BANK_EXTERNAL_ORG_ID, NETTING_SET_ID,    REVOLVING_FLG,"
           " SOURCE_CHANNEL_CD, GRACE_PERIOD_DAYS_CNT,    REMARGINING_DAYS_CNT,"
           " FINANCIAL_CALENDAR_ID, PORTFOLIO_ID,    SECURITIZATION_POOL_ID,"
           " RECEIVABLES_POOL_ID, ACCOUNT_USAGE_TYPE_CD,    RISK_ALARM_FLG,"
           " LOW_PROFITABILITY_FLG, ACCOUNT_LIFECYCLE_STG_CD,   "
           " ATTRITION_ALARM_FLG, BALANCE_FROZEN_FLG, BALANCE_FROZEN_DT,   "
           " ACCOUNT_BLOCK_REASON_CD, TAXATION_STATE_CD,"
           " EFFECTIVE_MATURITY_YEAR_NO,    GL_ACCOUNT_ID,"
           " FROM_OTHER_INSTITUTION_FLG, ACCOUNT_RENEWAL_CNT,   "
           " BALANCE_TRANSFER_DT, BALANCE_TRANSFER_AMT, BALANCE_TRANSFER_CNT,   "
           " BASE_LONG_TERM_APR_RT, BROKER_FLG, MULT_RATE_FLG,"
           " AUTO_DEBIT_ACCOUNT_NO,    WORST_STATUS_LAST_12_MTH_CD,"
           " WORST_STATUS_LAST_12_MTH_DT,    BALANCE_TRNSF_OTHER_ACCT_CNT,"
           " EFFECTIVE_FROM_DTTM, EFFECTIVE_TO_DTTM,    COUNTERPARTY_ID,"
           " INSURED_BY_COUNTERPARTY_ID, STATEMENT_FREQUENCY_CD,   "
           " SECURITY_DEPOSIT_AMT, SECURITY_DEPOSIT_REFUND_AMT,"
           " FIRST_PAYMENT_DT,    LAST_PAYMENT_DT, FIRST_RESET_DT,"
           " LAST_RESET_DT, RESETS_PER_ANNUM_NO,    PRINCIPAL_PAYMENT_TYPE_CD,"
           " PRINCIPAL_PAYMENT_AMT, RATE_POLICY_ID, SPREAD_RT,   "
           " DISCOUNT_SPREAD_RT, INITIAL_CONTRACT_RT,"
           " FIXED_MONTHLY_PREPAYMENT_RT,    CAPITAL_ALLOCATION_ID,"
           " CAPITAL_COST_ID, SEGMENT_ID,    NEAR_BRANCH_FINANCIAL_UNIT_ID,"
           " STATEMENT_OPT_FLG, VALUE_SCALING_FACTOR_RT,   "
           " INTERNAL_REPORTING_CATEGORY_CD, CONVEXITY_ADJUSTMENT_FLG,   "
           " ARREARS_PAYMENT_CD, QUANTO_FEATURE_ID, CASH_INTENSIVE_BUSINESS_FLG,"
           "    LETTER_OF_CREDIT_ONFILE_FLG, TRADE_FINANCE_FLG,"
           " ANNUITY_PAYMENT_TYPE_CD,    INTEREST_PAYMENT_TIME_FREQ_CD,"
           " LIQUIDITY_CATEGORY_TYPE_CD,    HOLIDAY_DATE_ROLL_CONV_CD,"
           " WEEKEND_DATE_ROLL_CONV_CD, EXPENSE_ALLOCATION_ID,   "
           " FIRST_INTEREST_PAYMENT_DT, LAST_INTEREST_PAYMENT_DT,"
           " IRB_DUMMY_TYPE_CD";
   run;
   
   %put %str(NOTE: Mapping columns ...);
   proc sql;
      create view work.WIROA5P as
         select
            DRV_ACCOUNT_ID as ACCOUNT_ID,
            VALID_FROM_DTTM,
            VALID_TO_DTTM,
            SOURCE_SYSTEM_CD,
            ACCOUNT_REGISTRATION_NM,
            ALTERNATE_ACCOUNT_NM,
            FINANCIAL_ACCOUNT_TYPE_CD,
            "" as AUTO_DEBIT_ACCOUNT_TYPE_CD length = 3
               format = $3.
               informat = $3.,
            "" as ACCOUNT_REGISTRATION_TYPE_CD length = 3
               format = $3.
               informat = $3.,
            ACCOUNT_STATUS_CD,
            OPEN_DT,
            (case when ACCOUNT_STATUS_CD='AUT' then .
                       when ACCOUNT_STATUS_CD='MAT' then VDAT
                       when ACCOUNT_STATUS_CD='REV' then min(LCD,VDAT)
               end
               
               /*ifn(ACCOUNT_STATUS_CD = 'AUT', ., CLOSE_DT) старый вариант*/) as CLOSE_DT length = 8
               format = DATETIME20.
               informat = DATETIME20.,
            "" as CLOSE_REASON_CD length = 3
               format = $3.
               informat = $3.,
            "" as ACCOUNT_TAX_ID length = 32
               format = $32.
               informat = $32.,
            . as EXPECTED_LOSS_PCT length = 8
               format = 11.4
               informat = 11.4,
            "" as INDIVIDUAL_ORGANIZATION_CD length = 3
               format = $3.
               informat = $3.,
            "" as SOURCE_CD length = 5
               format = $5.
               informat = $5.,
            "" as OPENING_CHANNEL_CD length = 3
               format = $3.
               informat = $3.,
            "" as PREFERRED_CHANNEL_CD length = 3
               format = $3.
               informat = $3.,
            CURRENCY_CD,
            "" as PRIMARY_PHONE_NO length = 20
               format = $20.
               informat = $20.,
            "" as PRIMARY_PHONE_TYPE_CD length = 3
               format = $3.
               informat = $3.,
            "" as SECONDARY_PHONE_NO length = 20
               format = $20.
               informat = $20.,
            "" as SECONDARY_PHONE_TYPE_CD length = 3
               format = $3.
               informat = $3.,
            "" as MAILABLE_FLG length = 1
               format = $1.
               informat = $1.,
            "" as TELEPHONABLE_FLG length = 1
               format = $1.
               informat = $1.,
            "" as EMAIL_FLG length = 1
               format = $1.
               informat = $1.,
            "" as SMS_FLG length = 1
               format = $1.
               informat = $1.,
            "" as DO_NOT_CONTACT_FLG length = 1
               format = $1.
               informat = $1.,
            . as EMPLOYEE_RK length = 8
               format = 11.
               informat = 11.,
            "" as CURRENCY_BASED_ACCOUNT_FLG length = 1
               format = $1.
               informat = $1.,
            "" as FEE_BASED_FLG length = 1
               format = $1.
               informat = $1.,
            . as ANNUAL_FEES_AMT length = 8
               format = 20.5
               informat = 20.5,
            . as MONTHLY_FEES_AMT length = 8
               format = 20.5
               informat = 20.5,
            "" as CAMPAIGN_CD length = 30
               format = $30.
               informat = $30.,
            "" as COMMUNICATION_CD length = 30
               format = $30.
               informat = $30.,
            . as REGISTERED_ONLINE_DT length = 8
               format = DATETIME20.
               informat = DATETIME20.,
            . as FIRST_LOGIN_DT length = 8
               format = DATETIME20.
               informat = DATETIME20.,
            "" as ONLINE_BILL_PAYMENT_FLG length = 1
               format = $1.
               informat = $1.,
            "" as ID_VERIFICATION_TYPE_CD length = 3
               format = $3.
               informat = $3.,
            "" as PREVIOUS_ACCOUNT_ID length = 32
               format = $32.
               informat = $32.,
            "" as OPEN_BRANCH_FINANCIAL_UNIT_ID length = 32
               format = $32.
               informat = $32.,
            MID_FINANCIAL_UNIT_ID_BRCA as PRIM_BRANCH_FINANCIAL_UNIT_ID,
            "" as FINANCIAL_APPLICATION_ID length = 32
               format = $32.
               informat = $32.,
            "" as CREDIT_FACILITY_ID length = 40
               format = $40.
               informat = $40.,
            . as FUTURE_MARGIN_INCOME_AMT length = 8
               format = 20.5
               informat = 20.5,
            "" as IN_DEFAULT_FLG length = 1
               format = $1.
               informat = $1.,
            "" as FINANCIAL_BOOK_ID length = 32
               format = $32.
               informat = $32.,
            "" as IRRECOVERABLE_FLG length = 1
               format = $1.
               informat = $1.,
            "" as OWNED_BY_INTERNAL_ORG_ID length = 32
               format = $32.
               informat = $32.,
            "" as PREVIOUS_BANK_EXTERNAL_ORG_ID length = 32
               format = $32.
               informat = $32.,
            "" as NETTING_SET_ID length = 32
               format = $32.
               informat = $32.,
            "" as REVOLVING_FLG length = 1
               format = $1.
               informat = $1.,
            "" as SOURCE_CHANNEL_CD length = 3
               format = $3.
               informat = $3.,
            . as GRACE_PERIOD_DAYS_CNT length = 8
               format = 7.
               informat = 7.,
            . as REMARGINING_DAYS_CNT length = 8
               format = 7.
               informat = 7.,
            "" as FINANCIAL_CALENDAR_ID length = 32
               format = $32.
               informat = $32.,
            DAY_BASIS_CD,
            "" as PORTFOLIO_ID length = 32
               format = $32.
               informat = $32.,
            "" as SECURITIZATION_POOL_ID length = 32
               format = $32.
               informat = $32.,
            "" as RECEIVABLES_POOL_ID length = 32
               format = $32.
               informat = $32.,
            "" as ACCOUNT_USAGE_TYPE_CD length = 3
               format = $3.
               informat = $3.,
            "" as RISK_ALARM_FLG length = 1
               format = $1.
               informat = $1.,
            "" as LOW_PROFITABILITY_FLG length = 1
               format = $1.
               informat = $1.,
            "" as ACCOUNT_LIFECYCLE_STG_CD length = 3
               format = $3.
               informat = $3.,
            "" as ATTRITION_ALARM_FLG length = 1
               format = $1.
               informat = $1.,
            "" as BALANCE_FROZEN_FLG length = 1
               format = $1.
               informat = $1.,
            . as BALANCE_FROZEN_DT length = 8
               format = DATETIME20.
               informat = DATETIME20.,
            "" as ACCOUNT_BLOCK_REASON_CD length = 3
               format = $3.
               informat = $3.,
            "" as TAXATION_STATE_CD length = 4
               format = $4.
               informat = $4.,
            . as EFFECTIVE_MATURITY_YEAR_NO length = 8
               format = 9.3
               informat = 9.3,
            "" as GL_ACCOUNT_ID length = 32
               format = $32.
               informat = $32.,
            "" as FROM_OTHER_INSTITUTION_FLG length = 1
               format = $1.
               informat = $1.,
            . as ACCOUNT_RENEWAL_CNT length = 8
               format = 7.
               informat = 7.,
            . as BALANCE_TRANSFER_DT length = 8
               format = DATETIME20.
               informat = DATETIME20.,
            . as BALANCE_TRANSFER_AMT length = 8
               format = 20.5
               informat = 20.5,
            . as BALANCE_TRANSFER_CNT length = 8
               format = 7.
               informat = 7.,
            . as BASE_LONG_TERM_APR_RT length = 8
               format = 11.4
               informat = 11.4,
            "" as BROKER_FLG length = 1
               format = $1.
               informat = $1.,
            "" as MULT_RATE_FLG length = 1
               format = $1.
               informat = $1.,
            "" as AUTO_DEBIT_ACCOUNT_NO length = 32
               format = $32.
               informat = $32.,
            "" as WORST_STATUS_LAST_12_MTH_CD length = 3
               format = $3.
               informat = $3.,
            . as WORST_STATUS_LAST_12_MTH_DT length = 8
               format = DATETIME20.
               informat = DATETIME20.,
            . as BALANCE_TRNSF_OTHER_ACCT_CNT length = 8
               format = 7.
               informat = 7.,
            . as EFFECTIVE_FROM_DTTM length = 8
               format = DATETIME20.
               informat = DATETIME20.,
            . as EFFECTIVE_TO_DTTM length = 8
               format = DATETIME20.
               informat = DATETIME20.,
            "" as COUNTERPARTY_ID length = 32
               format = $32.
               informat = $32.,
            "" as INSURED_BY_COUNTERPARTY_ID length = 32
               format = $32.
               informat = $32.,
            "" as STATEMENT_FREQUENCY_CD length = 3
               format = $3.
               informat = $3.,
            . as SECURITY_DEPOSIT_AMT length = 8
               format = 20.5
               informat = 20.5,
            . as SECURITY_DEPOSIT_REFUND_AMT length = 8
               format = 20.5
               informat = 20.5,
            . as FIRST_PAYMENT_DT length = 8
               format = DATETIME20.
               informat = DATETIME20.,
            . as LAST_PAYMENT_DT length = 8
               format = DATETIME20.
               informat = DATETIME20.,
            . as FIRST_RESET_DT length = 8
               format = DATETIME20.
               informat = DATETIME20.,
            . as LAST_RESET_DT length = 8
               format = DATETIME20.
               informat = DATETIME20.,
            . as RESETS_PER_ANNUM_NO length = 8
               format = 6.
               informat = 6.,
            "" as PRINCIPAL_PAYMENT_TYPE_CD length = 3
               format = $3.
               informat = $3.,
            . as PRINCIPAL_PAYMENT_AMT length = 8
               format = 20.5
               informat = 20.5,
            "" as RATE_POLICY_ID length = 32
               format = $32.
               informat = $32.,
            . as SPREAD_RT length = 8
               format = 11.4
               informat = 11.4,
            . as DISCOUNT_SPREAD_RT length = 8
               format = 11.4
               informat = 11.4,
            . as INITIAL_CONTRACT_RT length = 8
               format = 11.4
               informat = 11.4,
            . as FIXED_MONTHLY_PREPAYMENT_RT length = 8
               format = 11.4
               informat = 11.4,
            "" as CAPITAL_ALLOCATION_ID length = 32
               format = $32.
               informat = $32.,
            "" as CAPITAL_COST_ID length = 32
               format = $32.
               informat = $32.,
            "" as SEGMENT_ID length = 32
               format = $32.
               informat = $32.,
            "" as NEAR_BRANCH_FINANCIAL_UNIT_ID length = 32
               format = $32.
               informat = $32.,
            "" as STATEMENT_OPT_FLG length = 1
               format = $1.
               informat = $1.,
            . as VALUE_SCALING_FACTOR_RT length = 8
               format = 11.4
               informat = 11.4,
            "" as INTERNAL_REPORTING_CATEGORY_CD length = 3
               format = $3.
               informat = $3.,
            "" as CONVEXITY_ADJUSTMENT_FLG length = 1
               format = $1.
               informat = $1.,
            "" as ARREARS_PAYMENT_CD length = 3
               format = $3.
               informat = $3.,
            "" as QUANTO_FEATURE_ID length = 32
               format = $32.
               informat = $32.,
            "" as CASH_INTENSIVE_BUSINESS_FLG length = 1
               format = $1.
               informat = $1.,
            "" as LETTER_OF_CREDIT_ONFILE_FLG length = 1
               format = $1.
               informat = $1.,
            "" as TRADE_FINANCE_FLG length = 1
               format = $1.
               informat = $1.,
            "" as ANNUITY_PAYMENT_TYPE_CD length = 3
               format = $3.
               informat = $3.,
            INTEREST_PAYMENT_TYPE_CD,
            "" as INTEREST_PAYMENT_TIME_FREQ_CD length = 3
               format = $3.
               informat = $3.,
            "" as LIQUIDITY_CATEGORY_TYPE_CD length = 3
               format = $3.
               informat = $3.,
            "" as HOLIDAY_DATE_ROLL_CONV_CD length = 3
               format = $3.
               informat = $3.,
            "" as WEEKEND_DATE_ROLL_CONV_CD length = 3
               format = $3.
               informat = $3.,
            "" as EXPENSE_ALLOCATION_ID length = 32
               format = $32.
               informat = $32.,
            . as FIRST_INTEREST_PAYMENT_DT length = 8
               format = DATETIME20.
               informat = DATETIME20.,
            . as LAST_INTEREST_PAYMENT_DT length = 8
               format = DATETIME20.
               informat = DATETIME20.,
            "" as IRB_DUMMY_TYPE_CD length = 3
               format = $3.
               informat = $3.,
            IRB_SRC_ACCOUNT_ID,
            BRCA,
            FINANCIAL_INSTRUMENT_TYPE_CD
      from &etls_lastTable
      ;
   quit;
   
   %let SYSLAST = work.WIROA5P;
   
   %let etls_lastTable = &SYSLAST; 
   %let etls_tableOptions = ; 
   
   /* Determine if the target table exists  */ 
   %let etls_tableExist = %eval(%sysfunc(exist(work_ia.FINANCIAL_ACCOUNT_FRA_BK, DATA)) or 
         %sysfunc(exist(work_ia.FINANCIAL_ACCOUNT_FRA_BK, VIEW))); 
   
   %if &etls_tableExist %then 
   %do;/* table exists  */ 
      %let etls_hasPreExistingConstraint=0; 
      
      proc datasets lib = work nolist nowarn memtype = (data view);
         delete etls_commands etls_commands_F;
      quit;
      
      %let etls_otherTablesReferToThisTable=0;
      
      %macro etls_CIContents(table=,workTableOut=,inDSOptions=);
         %put NOTE: Building table listing Constraints and Indexes for: &table;
         proc datasets lib=work nolist; delete &workTableOut; quit;
         proc contents data=&table&inDSOptions out2=&workTableOut noprint; run;
         
         data &workTableOut;
            length name $60 type $20 icown idxUnique idxNoMiss $3 recreate $600;
            set &workTableOut;
            type=upcase(type);
            if type eq 'REFERENTIAL' then
            do;
               put "WARNING%QUOTE(:) Target table is referenced by constraints in"
                    " another table: " ref;
               call symput('etls_otherTablesReferToThisTable','1');
               delete;
            end;
            if type='INDEX' and ICOwn eq 'YES' then delete;
         run;
         %rcSet(&syserr); 
         
      %mend etls_CIContents;
      
      %etls_CIContents(table=work_ia.FINANCIAL_ACCOUNT_FRA_BK, workTableOut=etls_commands, inDSOptions=);
      
      %if &etls_otherTablesReferToThisTable %then 
         %put WARNING%QUOTE(:) Replacing entire table will fail. Consider an alternate load technique or revising constraints.; 
      %else 
      %do; /* okay - remove foreign keys  */ 
      
         data etls_commands_F; 
            set etls_commands; 
            if upcase(type)="FOREIGN KEY" then 
            do; 
               command='ic delete '||trim(name)||';';
               output etls_commands_F; 
            end; 
         run; 
         
         %put %str(NOTE: Removing foreign keys before dropping table...);
         data _null_;
            set etls_commands_F;
            %rcSet(&syserr); 
            
      %end; /* okay - remove foreign keys  */ 
      
      proc datasets lib = work nolist nowarn memtype = (data view);
         delete etls_commands etls_commands_F;
      quit;
      
      /*---- Drop a table  ----*/ 
      %put %str(NOTE: Dropping table ...);
      proc datasets lib = work_ia nolist nowarn memtype = (data view);
         delete FINANCIAL_ACCOUNT_FRA_BK;
      quit;
      
      %rcSet(&syserr); 
      
      %let etls_tableExist = 0;
      
   %end; /* table exists  */ 
   
   /*---- Create a new table  ----*/ 
   %if (&etls_tableExist eq 0) %then 
   %do;  /* if table does not exist  */ 
   
      %put %str(NOTE: Creating table ...);
      
      data work_ia.FINANCIAL_ACCOUNT_FRA_BK;
         attrib ACCOUNT_ID length = $32
            format = $32.
            informat = $32.
            label = 'ACCOUNT_ID'; 
         attrib VALID_FROM_DTTM length = 8
            format = DATETIME20.
            informat = DATETIME20.
            label = 'VALID_FROM_DTTM'; 
         attrib VALID_TO_DTTM length = 8
            format = DATETIME20.
            informat = DATETIME20.
            label = 'VALID_TO_DTTM'; 
         attrib SOURCE_SYSTEM_CD length = $3
            format = $3.
            informat = $3.
            label = 'SOURCE_SYSTEM_CD'; 
         attrib ACCOUNT_REGISTRATION_NM length = $100
            format = $100.
            informat = $100.
            label = 'ACCOUNT_REGISTRATION_NM'; 
         attrib ALTERNATE_ACCOUNT_NM length = $40
            format = $40.
            informat = $40.
            label = 'ALTERNATE_ACCOUNT_NM'; 
         attrib FINANCIAL_ACCOUNT_TYPE_CD length = $3
            format = $3.
            informat = $3.
            label = 'FINANCIAL_ACCOUNT_TYPE_CD'; 
         attrib AUTO_DEBIT_ACCOUNT_TYPE_CD length = $3
            format = $3.
            informat = $3.
            label = 'AUTO_DEBIT_ACCOUNT_TYPE_CD'; 
         attrib ACCOUNT_REGISTRATION_TYPE_CD length = $3
            format = $3.
            informat = $3.
            label = 'ACCOUNT_REGISTRATION_TYPE_CD'; 
         attrib ACCOUNT_STATUS_CD length = $3
            format = $3.
            informat = $3.
            label = 'ACCOUNT_STATUS_CD'; 
         attrib OPEN_DT length = 8
            format = DATETIME20.
            informat = DATETIME20.
            label = 'OPEN_DT'; 
         attrib CLOSE_DT length = 8
            format = DATETIME20.
            informat = DATETIME20.
            label = 'CLOSE_DT'; 
         attrib CLOSE_REASON_CD length = $3
            format = $3.
            informat = $3.
            label = 'CLOSE_REASON_CD'; 
         attrib ACCOUNT_TAX_ID length = $32
            format = $32.
            informat = $32.
            label = 'ACCOUNT_TAX_ID'; 
         attrib EXPECTED_LOSS_PCT length = 8
            format = 11.4
            informat = 11.4
            label = 'EXPECTED_LOSS_PCT'; 
         attrib INDIVIDUAL_ORGANIZATION_CD length = $3
            format = $3.
            informat = $3.
            label = 'INDIVIDUAL_ORGANIZATION_CD'; 
         attrib SOURCE_CD length = $5
            format = $5.
            informat = $5.
            label = 'SOURCE_CD'; 
         attrib OPENING_CHANNEL_CD length = $3
            format = $3.
            informat = $3.
            label = 'OPENING_CHANNEL_CD'; 
         attrib PREFERRED_CHANNEL_CD length = $3
            format = $3.
            informat = $3.
            label = 'PREFERRED_CHANNEL_CD'; 
         attrib CURRENCY_CD length = $3
            format = $3.
            informat = $3.
            label = 'CURRENCY_CD'; 
         attrib PRIMARY_PHONE_NO length = $20
            format = $20.
            informat = $20.
            label = 'PRIMARY_PHONE_NO'; 
         attrib PRIMARY_PHONE_TYPE_CD length = $3
            format = $3.
            informat = $3.
            label = 'PRIMARY_PHONE_TYPE_CD'; 
         attrib SECONDARY_PHONE_NO length = $20
            format = $20.
            informat = $20.
            label = 'SECONDARY_PHONE_NO'; 
         attrib SECONDARY_PHONE_TYPE_CD length = $3
            format = $3.
            informat = $3.
            label = 'SECONDARY_PHONE_TYPE_CD'; 
         attrib MAILABLE_FLG length = $1
            format = $1.
            informat = $1.
            label = 'MAILABLE_FLG'; 
         attrib TELEPHONABLE_FLG length = $1
            format = $1.
            informat = $1.
            label = 'TELEPHONABLE_FLG'; 
         attrib EMAIL_FLG length = $1
            format = $1.
            informat = $1.
            label = 'EMAIL_FLG'; 
         attrib SMS_FLG length = $1
            format = $1.
            informat = $1.
            label = 'SMS_FLG'; 
         attrib DO_NOT_CONTACT_FLG length = $1
            format = $1.
            informat = $1.
            label = 'DO_NOT_CONTACT_FLG'; 
         attrib EMPLOYEE_RK length = 8
            format = 11.
            informat = 11.
            label = 'EMPLOYEE_RK'; 
         attrib CURRENCY_BASED_ACCOUNT_FLG length = $1
            format = $1.
            informat = $1.
            label = 'CURRENCY_BASED_ACCOUNT_FLG'; 
         attrib FEE_BASED_FLG length = $1
            format = $1.
            informat = $1.
            label = 'FEE_BASED_FLG'; 
         attrib ANNUAL_FEES_AMT length = 8
            format = 20.5
            informat = 20.5
            label = 'ANNUAL_FEES_AMT'; 
         attrib MONTHLY_FEES_AMT length = 8
            format = 20.5
            informat = 20.5
            label = 'MONTHLY_FEES_AMT'; 
         attrib CAMPAIGN_CD length = $30
            format = $30.
            informat = $30.
            label = 'CAMPAIGN_CD'; 
         attrib COMMUNICATION_CD length = $30
            format = $30.
            informat = $30.
            label = 'COMMUNICATION_CD'; 
         attrib REGISTERED_ONLINE_DT length = 8
            format = DATETIME20.
            informat = DATETIME20.
            label = 'REGISTERED_ONLINE_DT'; 
         attrib FIRST_LOGIN_DT length = 8
            format = DATETIME20.
            informat = DATETIME20.
            label = 'FIRST_LOGIN_DT'; 
         attrib ONLINE_BILL_PAYMENT_FLG length = $1
            format = $1.
            informat = $1.
            label = 'ONLINE_BILL_PAYMENT_FLG'; 
         attrib ID_VERIFICATION_TYPE_CD length = $3
            format = $3.
            informat = $3.
            label = 'ID_VERIFICATION_TYPE_CD'; 
         attrib PREVIOUS_ACCOUNT_ID length = $32
            format = $32.
            informat = $32.
            label = 'PREVIOUS_ACCOUNT_ID'; 
         attrib OPEN_BRANCH_FINANCIAL_UNIT_ID length = $32
            format = $32.
            informat = $32.
            label = 'OPEN_BRANCH_FINANCIAL_UNIT_ID'; 
         attrib PRIM_BRANCH_FINANCIAL_UNIT_ID length = $32
            format = $32.
            informat = $32.
            label = 'PRIM_BRANCH_FINANCIAL_UNIT_ID'; 
         attrib FINANCIAL_APPLICATION_ID length = $32
            format = $32.
            informat = $32.
            label = 'FINANCIAL_APPLICATION_ID'; 
         attrib CREDIT_FACILITY_ID length = $40
            format = $40.
            informat = $40.
            label = 'CREDIT_FACILITY_ID'; 
         attrib FUTURE_MARGIN_INCOME_AMT length = 8
            format = 20.5
            informat = 20.5
            label = 'FUTURE_MARGIN_INCOME_AMT'; 
         attrib IN_DEFAULT_FLG length = $1
            format = $1.
            informat = $1.
            label = 'IN_DEFAULT_FLG'; 
         attrib FINANCIAL_BOOK_ID length = $32
            format = $32.
            informat = $32.
            label = 'FINANCIAL_BOOK_ID'; 
         attrib IRRECOVERABLE_FLG length = $1
            format = $1.
            informat = $1.
            label = 'IRRECOVERABLE_FLG'; 
         attrib OWNED_BY_INTERNAL_ORG_ID length = $32
            format = $32.
            informat = $32.
            label = 'OWNED_BY_INTERNAL_ORG_ID'; 
         attrib PREVIOUS_BANK_EXTERNAL_ORG_ID length = $32
            format = $32.
            informat = $32.
            label = 'PREVIOUS_BANK_EXTERNAL_ORG_ID'; 
         attrib NETTING_SET_ID length = $32
            format = $32.
            informat = $32.
            label = 'NETTING_SET_ID'; 
         attrib REVOLVING_FLG length = $1
            format = $1.
            informat = $1.
            label = 'REVOLVING_FLG'; 
         attrib SOURCE_CHANNEL_CD length = $3
            format = $3.
            informat = $3.
            label = 'SOURCE_CHANNEL_CD'; 
         attrib GRACE_PERIOD_DAYS_CNT length = 8
            format = 7.
            informat = 7.
            label = 'GRACE_PERIOD_DAYS_CNT'; 
         attrib REMARGINING_DAYS_CNT length = 8
            format = 7.
            informat = 7.
            label = 'REMARGINING_DAYS_CNT'; 
         attrib FINANCIAL_CALENDAR_ID length = $32
            format = $32.
            informat = $32.
            label = 'FINANCIAL_CALENDAR_ID'; 
         attrib DAY_BASIS_CD length = $10
            format = $10.
            informat = $10.
            label = 'DAY_BASIS_CD'; 
         attrib PORTFOLIO_ID length = $32
            format = $32.
            informat = $32.
            label = 'PORTFOLIO_ID'; 
         attrib SECURITIZATION_POOL_ID length = $32
            format = $32.
            informat = $32.
            label = 'SECURITIZATION_POOL_ID'; 
         attrib RECEIVABLES_POOL_ID length = $32
            format = $32.
            informat = $32.
            label = 'RECEIVABLES_POOL_ID'; 
         attrib ACCOUNT_USAGE_TYPE_CD length = $3
            format = $3.
            informat = $3.
            label = 'ACCOUNT_USAGE_TYPE_CD'; 
         attrib RISK_ALARM_FLG length = $1
            format = $1.
            informat = $1.
            label = 'RISK_ALARM_FLG'; 
         attrib LOW_PROFITABILITY_FLG length = $1
            format = $1.
            informat = $1.
            label = 'LOW_PROFITABILITY_FLG'; 
         attrib ACCOUNT_LIFECYCLE_STG_CD length = $3
            format = $3.
            informat = $3.
            label = 'ACCOUNT_LIFECYCLE_STG_CD'; 
         attrib ATTRITION_ALARM_FLG length = $1
            format = $1.
            informat = $1.
            label = 'ATTRITION_ALARM_FLG'; 
         attrib BALANCE_FROZEN_FLG length = $1
            format = $1.
            informat = $1.
            label = 'BALANCE_FROZEN_FLG'; 
         attrib BALANCE_FROZEN_DT length = 8
            format = DATETIME20.
            informat = DATETIME20.
            label = 'BALANCE_FROZEN_DT'; 
         attrib ACCOUNT_BLOCK_REASON_CD length = $3
            format = $3.
            informat = $3.
            label = 'ACCOUNT_BLOCK_REASON_CD'; 
         attrib TAXATION_STATE_CD length = $4
            format = $4.
            informat = $4.
            label = 'TAXATION_STATE_CD'; 
         attrib EFFECTIVE_MATURITY_YEAR_NO length = 8
            format = 9.3
            informat = 9.3
            label = 'EFFECTIVE_MATURITY_YEAR_NO'; 
         attrib GL_ACCOUNT_ID length = $32
            format = $32.
            informat = $32.
            label = 'GL_ACCOUNT_ID'; 
         attrib FROM_OTHER_INSTITUTION_FLG length = $1
            format = $1.
            informat = $1.
            label = 'FROM_OTHER_INSTITUTION_FLG'; 
         attrib ACCOUNT_RENEWAL_CNT length = 8
            format = 7.
            informat = 7.
            label = 'ACCOUNT_RENEWAL_CNT'; 
         attrib BALANCE_TRANSFER_DT length = 8
            format = DATETIME20.
            informat = DATETIME20.
            label = 'BALANCE_TRANSFER_DT'; 
         attrib BALANCE_TRANSFER_AMT length = 8
            format = 20.5
            informat = 20.5
            label = 'BALANCE_TRANSFER_AMT'; 
         attrib BALANCE_TRANSFER_CNT length = 8
            format = 7.
            informat = 7.
            label = 'BALANCE_TRANSFER_CNT'; 
         attrib BASE_LONG_TERM_APR_RT length = 8
            format = 11.4
            informat = 11.4
            label = 'BASE_LONG_TERM_APR_RT'; 
         attrib BROKER_FLG length = $1
            format = $1.
            informat = $1.
            label = 'BROKER_FLG'; 
         attrib MULT_RATE_FLG length = $1
            format = $1.
            informat = $1.
            label = 'MULT_RATE_FLG'; 
         attrib AUTO_DEBIT_ACCOUNT_NO length = $32
            format = $32.
            informat = $32.
            label = 'AUTO_DEBIT_ACCOUNT_NO'; 
         attrib WORST_STATUS_LAST_12_MTH_CD length = $3
            format = $3.
            informat = $3.
            label = 'WORST_STATUS_LAST_12_MTH_CD'; 
         attrib WORST_STATUS_LAST_12_MTH_DT length = 8
            format = DATETIME20.
            informat = DATETIME20.
            label = 'WORST_STATUS_LAST_12_MTH_DT'; 
         attrib BALANCE_TRNSF_OTHER_ACCT_CNT length = 8
            format = 7.
            informat = 7.
            label = 'BALANCE_TRNSF_OTHER_ACCT_CNT'; 
         attrib EFFECTIVE_FROM_DTTM length = 8
            format = DATETIME20.
            informat = DATETIME20.
            label = 'EFFECTIVE_FROM_DTTM'; 
         attrib EFFECTIVE_TO_DTTM length = 8
            format = DATETIME20.
            informat = DATETIME20.
            label = 'EFFECTIVE_TO_DTTM'; 
         attrib COUNTERPARTY_ID length = $32
            format = $32.
            informat = $32.
            label = 'COUNTERPARTY_ID'; 
         attrib INSURED_BY_COUNTERPARTY_ID length = $32
            format = $32.
            informat = $32.
            label = 'INSURED_BY_COUNTERPARTY_ID'; 
         attrib STATEMENT_FREQUENCY_CD length = $3
            format = $3.
            informat = $3.
            label = 'STATEMENT_FREQUENCY_CD'; 
         attrib SECURITY_DEPOSIT_AMT length = 8
            format = 20.5
            informat = 20.5
            label = 'SECURITY_DEPOSIT_AMT'; 
         attrib SECURITY_DEPOSIT_REFUND_AMT length = 8
            format = 20.5
            informat = 20.5
            label = 'SECURITY_DEPOSIT_REFUND_AMT'; 
         attrib FIRST_PAYMENT_DT length = 8
            format = DATETIME20.
            informat = DATETIME20.
            label = 'FIRST_PAYMENT_DT'; 
         attrib LAST_PAYMENT_DT length = 8
            format = DATETIME20.
            informat = DATETIME20.
            label = 'LAST_PAYMENT_DT'; 
         attrib FIRST_RESET_DT length = 8
            format = DATETIME20.
            informat = DATETIME20.
            label = 'FIRST_RESET_DT'; 
         attrib LAST_RESET_DT length = 8
            format = DATETIME20.
            informat = DATETIME20.
            label = 'LAST_RESET_DT'; 
         attrib RESETS_PER_ANNUM_NO length = 8
            format = 6.
            informat = 6.
            label = 'RESETS_PER_ANNUM_NO'; 
         attrib PRINCIPAL_PAYMENT_TYPE_CD length = $3
            format = $3.
            informat = $3.
            label = 'PRINCIPAL_PAYMENT_TYPE_CD'; 
         attrib PRINCIPAL_PAYMENT_AMT length = 8
            format = 20.5
            informat = 20.5
            label = 'PRINCIPAL_PAYMENT_AMT'; 
         attrib RATE_POLICY_ID length = $32
            format = $32.
            informat = $32.
            label = 'RATE_POLICY_ID'; 
         attrib SPREAD_RT length = 8
            format = 11.4
            informat = 11.4
            label = 'SPREAD_RT'; 
         attrib DISCOUNT_SPREAD_RT length = 8
            format = 11.4
            informat = 11.4
            label = 'DISCOUNT_SPREAD_RT'; 
         attrib INITIAL_CONTRACT_RT length = 8
            format = 11.4
            informat = 11.4
            label = 'INITIAL_CONTRACT_RT'; 
         attrib FIXED_MONTHLY_PREPAYMENT_RT length = 8
            format = 11.4
            informat = 11.4
            label = 'FIXED_MONTHLY_PREPAYMENT_RT'; 
         attrib CAPITAL_ALLOCATION_ID length = $32
            format = $32.
            informat = $32.
            label = 'CAPITAL_ALLOCATION_ID'; 
         attrib CAPITAL_COST_ID length = $32
            format = $32.
            informat = $32.
            label = 'CAPITAL_COST_ID'; 
         attrib SEGMENT_ID length = $32
            format = $32.
            informat = $32.
            label = 'SEGMENT_ID'; 
         attrib NEAR_BRANCH_FINANCIAL_UNIT_ID length = $32
            format = $32.
            informat = $32.
            label = 'NEAR_BRANCH_FINANCIAL_UNIT_ID'; 
         attrib STATEMENT_OPT_FLG length = $1
            format = $1.
            informat = $1.
            label = 'STATEMENT_OPT_FLG'; 
         attrib VALUE_SCALING_FACTOR_RT length = 8
            format = 11.4
            informat = 11.4
            label = 'VALUE_SCALING_FACTOR_RT'; 
         attrib INTERNAL_REPORTING_CATEGORY_CD length = $3
            format = $3.
            informat = $3.
            label = 'INTERNAL_REPORTING_CATEGORY_CD'; 
         attrib CONVEXITY_ADJUSTMENT_FLG length = $1
            format = $1.
            informat = $1.
            label = 'CONVEXITY_ADJUSTMENT_FLG'; 
         attrib ARREARS_PAYMENT_CD length = $3
            format = $3.
            informat = $3.
            label = 'ARREARS_PAYMENT_CD'; 
         attrib QUANTO_FEATURE_ID length = $32
            format = $32.
            informat = $32.
            label = 'QUANTO_FEATURE_ID'; 
         attrib CASH_INTENSIVE_BUSINESS_FLG length = $1
            format = $1.
            informat = $1.
            label = 'CASH_INTENSIVE_BUSINESS_FLG'; 
         attrib LETTER_OF_CREDIT_ONFILE_FLG length = $1
            format = $1.
            informat = $1.
            label = 'LETTER_OF_CREDIT_ONFILE_FLG'; 
         attrib TRADE_FINANCE_FLG length = $1
            format = $1.
            informat = $1.
            label = 'TRADE_FINANCE_FLG'; 
         attrib ANNUITY_PAYMENT_TYPE_CD length = $3
            format = $3.
            informat = $3.
            label = 'ANNUITY_PAYMENT_TYPE_CD'; 
         attrib INTEREST_PAYMENT_TYPE_CD length = $3
            format = $3.
            informat = $3.
            label = 'INTEREST_PAYMENT_TYPE_CD'; 
         attrib INTEREST_PAYMENT_TIME_FREQ_CD length = $3
            format = $3.
            informat = $3.
            label = 'INTEREST_PAYMENT_TIME_FREQ_CD'; 
         attrib LIQUIDITY_CATEGORY_TYPE_CD length = $3
            format = $3.
            informat = $3.
            label = 'LIQUIDITY_CATEGORY_TYPE_CD'; 
         attrib HOLIDAY_DATE_ROLL_CONV_CD length = $3
            format = $3.
            informat = $3.
            label = 'HOLIDAY_DATE_ROLL_CONV_CD'; 
         attrib WEEKEND_DATE_ROLL_CONV_CD length = $3
            format = $3.
            informat = $3.
            label = 'WEEKEND_DATE_ROLL_CONV_CD'; 
         attrib EXPENSE_ALLOCATION_ID length = $32
            format = $32.
            informat = $32.
            label = 'EXPENSE_ALLOCATION_ID'; 
         attrib FIRST_INTEREST_PAYMENT_DT length = 8
            format = DATETIME20.
            informat = DATETIME20.
            label = 'FIRST_INTEREST_PAYMENT_DT'; 
         attrib LAST_INTEREST_PAYMENT_DT length = 8
            format = DATETIME20.
            informat = DATETIME20.
            label = 'LAST_INTEREST_PAYMENT_DT'; 
         attrib IRB_DUMMY_TYPE_CD length = $3
            format = $3.
            informat = $3.
            label = 'IRB_DUMMY_TYPE_CD'; 
         attrib IRB_SRC_ACCOUNT_ID length = $32
            format = $32.
            informat = $32.
            label = 'IRB_SRC_ACCOUNT_ID'; 
         attrib BRCA length = $3
            format = $3.
            informat = $3.
            label = 'BRCA'; 
         attrib FINANCIAL_INSTRUMENT_TYPE_CD length = $3
            format = $3.
            informat = $3.
            label = 'FINANCIAL_INSTRUMENT_TYPE_CD'; 
         call missing(of _all_);
         stop;
      run;
      
      %rcSet(&syserr); 
      
      /*---- Create the integrity constraints for a table  ----*/ 
      %put %str(NOTE: Creating integrity constraints ...);
      proc datasets library=work_ia nolist;
         modify FINANCIAL_ACCOUNT_FRA_BK;
            ic create not null (ACCOUNT_ID);
            ic create not null (SOURCE_SYSTEM_CD);
            ic create not null (FINANCIAL_ACCOUNT_TYPE_CD);
            ic create not null (ACCOUNT_STATUS_CD);
            ic create not null (CURRENCY_CD);
            ic create not null (PRIM_BRANCH_FINANCIAL_UNIT_ID);
            ic create not null (BRCA);
            ic create Index1 = primary key (ACCOUNT_ID VALID_FROM_DTTM);
      quit;
      
      %rcSet(&syserr); 
      
   %end;  /* if table does not exist  */ 
   
   /*---- Append  ----*/ 
   %put %str(NOTE: Appending data ...);
   
   proc append base = work_ia.FINANCIAL_ACCOUNT_FRA_BK 
      data = &etls_lastTable (&etls_tableOptions)  force ; 
    run; 
   
   %rcSet(&syserr); 
   
   proc datasets lib = work nolist nowarn memtype = (data view);
      delete WIROA5P;
   quit;
   
%mend etls_loader;
%etls_loader;

%let etls_recCheckExist = 0; 
%let etls_recnt = 0; 
%macro etls_recordCheck; 
   %let etls_recCheckExist = %eval(%sysfunc(exist(work_ia.FINANCIAL_ACCOUNT_FRA_BK, DATA)) or 
         %sysfunc(exist(work_ia.FINANCIAL_ACCOUNT_FRA_BK, VIEW))); 
   
   %if (&etls_recCheckExist) %then
   %do;
      %local etls_syntaxcheck; 
      %let etls_syntaxcheck = %sysfunc(getoption(syntaxcheck)); 
      /* Turn off syntaxcheck option to perform following steps  */ 
      options nosyntaxcheck;
      
      proc contents data = work_ia.FINANCIAL_ACCOUNT_FRA_BK out = work.etls_contents(keep = nobs) noprint; 
      run; 
      
      data _null_; 
         set work.etls_contents (obs = 1); 
         call symput("etls_recnt", left(put(nobs,32.))); 
      run;
      
      proc datasets lib = work nolist nowarn memtype = (data view);
         delete etls_contents;
      quit;
      
      /* Reset syntaxcheck option to previous setting  */ 
      options &etls_syntaxcheck; 
   %end;
%mend etls_recordCheck;
%etls_recordCheck;



/**  Step end Table Loader **/

/*==========================================================================* 
 * Step:            Вяжем актуальные записи со сделками   A5Y50FNE.AQ00087S * 
 * Transform:       Join                                                    * 
 * Description:                                                             * 
 *                                                                          * 
 * Source Tables:   Генерация BKtpOut - work.W1MHBF25     A5Y50FNE.AO0004N7 * 
 *                  actual recs - work.W1BAZY4C           A5Y50FNE.AO0004N4 * 
 * Target Table:    SQL Join - work.WTEM9K4               A5Y50FNE.AO0004N8 * 
 *==========================================================================*/ 

%let transformID = %quote(A5Y50FNE.AQ00087S);
%let trans_rc = 0;
%let etls_stepStartTime = %sysfunc(datetime(), datetime20.); 

%let etls_recCheckExist = 0; 
%let etls_recnt = 0; 
%macro etls_recordCheck; 
   %let etls_recCheckExist = %eval(%sysfunc(exist(work.W1MHBF25, DATA)) or 
         %sysfunc(exist(work.W1MHBF25, VIEW))); 
   
   %if (&etls_recCheckExist) %then
   %do;
      %local etls_syntaxcheck; 
      %let etls_syntaxcheck = %sysfunc(getoption(syntaxcheck)); 
      /* Turn off syntaxcheck option to perform following steps  */ 
      options nosyntaxcheck;
      
      proc contents data = work.W1MHBF25 out = work.etls_contents(keep = nobs) noprint; 
      run; 
      
      data _null_; 
         set work.etls_contents (obs = 1); 
         call symput("etls_recnt", left(put(nobs,32.))); 
      run;
      
      proc datasets lib = work nolist nowarn memtype = (data view);
         delete etls_contents;
      quit;
      
      /* Reset syntaxcheck option to previous setting  */ 
      options &etls_syntaxcheck; 
   %end;
%mend etls_recordCheck;
%etls_recordCheck;

%let SYS_SQL_IP_SPEEDO = Y;
%let SYS_SQL_MAPPUTTO = sas_put;
%let SYS_SQLREDUCEPUT = DBMS;
%global etls_sql_pushDown;
%let etls_sql_pushDown = -1;
option DBIDIRECTEXEC;

proc datasets lib = work nolist nowarn memtype = (data view);
   delete WTEM9K4;
quit;

proc sql;
   create view work.WTEM9K4 as
   select
      W1MHBF25.VALID_FROM_DTTM length = 8   
         format = DATETIME20.
         informat = DATETIME20.
         label = 'VALID_FROM_DTTM',
      W1MHBF25.VALID_TO_DTTM length = 8   
         format = DATETIME20.
         informat = DATETIME20.
         label = 'VALID_TO_DTTM',
      W1BAZY4C.FINANCIAL_INSTRUMENT_ID length = 32   
         format = $32.
         informat = $32.
         label = 'FINANCIAL_INSTRUMENT_ID',
      W1MHBF25.DRV_ACCOUNT_ID as REFERENCE_ACCOUNT_ID length = 32   
         format = $32.
         informat = $32.
         label = 'FINANCIAL_ACCOUNT_ID'
   from
      work.W1MHBF25 inner join 
      work.W1BAZY4C
         on
         (
            W1MHBF25.IRB_SRC_ACCOUNT_ID = W1BAZY4C.IRB_SRC_ACCOUNT_ID
         )
   ;
quit;

%global etls_sql_pushDown;
%let etls_sql_pushDown = &sys_sql_ip_all;

%rcSet(&sqlrc); 



/**  Step end Вяжем актуальные записи со сделками **/

/*==========================================================================* 
 * Step:            Table Loader                          A5Y50FNE.AQ00087T * 
 * Transform:       Table Loader (Version 2.1)                              * 
 * Description:                                                             * 
 *                                                                          * 
 * Source Table:    SQL Join - work.WTEM9K4               A5Y50FNE.AO0004N8 * 
 * Target Table:    FIN_INSTR_ASSOC_FRA_BK -              A5Y50FNE.AE000123 * 
 *                   work_ia.FIN_INSTR_ASSOC_FRA_BK                         * 
 *==========================================================================*/ 

%let transformID = %quote(A5Y50FNE.AQ00087T);
%let trans_rc = 0;
%let etls_stepStartTime = %sysfunc(datetime(), datetime20.); 

%let SYSLAST = %nrquote(work.WTEM9K4); 

%let SYS_SQL_IP_SPEEDO = Y;
%let SYS_SQL_MAPPUTTO = sas_put;
%let SYS_SQLREDUCEPUT = DBMS;
%global etls_sql_pushDown;
%let etls_sql_pushDown = -1;
option DBIDIRECTEXEC;

%global etls_tableExist;
%global etls_numIndex;
%global etls_lastTable;
%let etls_tableExist = -1; 
%let etls_numIndex = -1; 
%let etls_lastTable = &SYSLAST; 

/*---- Define load data macro  ----*/ 

/* --------------------------------------------------------------
   Load Technique Selection: Replace - EntireTable
   Constraint and index action selections: 'INIT','ASIS','ASIS','ASIS'
   Additional options selections... 
      Set unmapped to missing on updates: false 
   -------------------------------------------------------------- */
%macro etls_loader;

   %let etls_tableOptions = ;
   
   /*---- Map the columns  ----*/ 
   proc datasets lib = work nolist nowarn memtype = (data view);
      delete WIROB5R;
   quit;
   
   %put %str(NOTE: Mapping columns ...);
   proc sql;
      create view work.WIROB5R as
         select
            FINANCIAL_INSTRUMENT_ID as FINANCIAL_INSTRUMENT_ASSOC_ID,
            VALID_FROM_DTTM,
            VALID_TO_DTTM,
            ('DRV') as FINANCIAL_INSTR_ASSOC_TYPE_CD length = 3
               format = $3.
               informat = $3.,
            FINANCIAL_INSTRUMENT_ID,
            REFERENCE_ACCOUNT_ID
      from &etls_lastTable
      ;
   quit;
   
   %let SYSLAST = work.WIROB5R;
   
   %let etls_lastTable = &SYSLAST; 
   %let etls_tableOptions = ; 
   
   /* Determine if the target table exists  */ 
   %let etls_tableExist = %eval(%sysfunc(exist(work_ia.FIN_INSTR_ASSOC_FRA_BK, DATA)) or 
         %sysfunc(exist(work_ia.FIN_INSTR_ASSOC_FRA_BK, VIEW))); 
   
   %if &etls_tableExist %then 
   %do;/* table exists  */ 
      %let etls_hasPreExistingConstraint=0; 
      
      proc datasets lib = work nolist nowarn memtype = (data view);
         delete etls_commands etls_commands_F;
      quit;
      
      %let etls_otherTablesReferToThisTable=0;
      
      %macro etls_CIContents(table=,workTableOut=,inDSOptions=);
         %put NOTE: Building table listing Constraints and Indexes for: &table;
         proc datasets lib=work nolist; delete &workTableOut; quit;
         proc contents data=&table&inDSOptions out2=&workTableOut noprint; run;
         
         data &workTableOut;
            length name $60 type $20 icown idxUnique idxNoMiss $3 recreate $600;
            set &workTableOut;
            type=upcase(type);
            if type eq 'REFERENTIAL' then
            do;
               put "WARNING%QUOTE(:) Target table is referenced by constraints in"
                    " another table: " ref;
               call symput('etls_otherTablesReferToThisTable','1');
               delete;
            end;
            if type='INDEX' and ICOwn eq 'YES' then delete;
         run;
         %rcSet(&syserr); 
         
      %mend etls_CIContents;
      
      %etls_CIContents(table=work_ia.FIN_INSTR_ASSOC_FRA_BK, workTableOut=etls_commands, inDSOptions=);
      
      %if &etls_otherTablesReferToThisTable %then 
         %put WARNING%QUOTE(:) Replacing entire table will fail. Consider an alternate load technique or revising constraints.; 
      %else 
      %do; /* okay - remove foreign keys  */ 
      
         data etls_commands_F; 
            set etls_commands; 
            if upcase(type)="FOREIGN KEY" then 
            do; 
               command='ic delete '||trim(name)||';';
               output etls_commands_F; 
            end; 
         run; 
         
         %put %str(NOTE: Removing foreign keys before dropping table...);
         data _null_;
            set etls_commands_F;
            %rcSet(&syserr); 
            
      %end; /* okay - remove foreign keys  */ 
      
      proc datasets lib = work nolist nowarn memtype = (data view);
         delete etls_commands etls_commands_F;
      quit;
      
      /*---- Drop a table  ----*/ 
      %put %str(NOTE: Dropping table ...);
      proc datasets lib = work_ia nolist nowarn memtype = (data view);
         delete FIN_INSTR_ASSOC_FRA_BK;
      quit;
      
      %rcSet(&syserr); 
      
      %let etls_tableExist = 0;
      
   %end; /* table exists  */ 
   
   /*---- Create a new table  ----*/ 
   %if (&etls_tableExist eq 0) %then 
   %do;  /* if table does not exist  */ 
   
      %put %str(NOTE: Creating table ...);
      
      data work_ia.FIN_INSTR_ASSOC_FRA_BK;
         attrib FINANCIAL_INSTRUMENT_ASSOC_ID length = $32
            format = $32.
            informat = $32.
            label = 'FINANCIAL_INSTRUMENT_ASSOC_ID'; 
         attrib VALID_FROM_DTTM length = 8
            format = DATETIME20.
            informat = DATETIME20.
            label = 'VALID_FROM_DTTM'; 
         attrib VALID_TO_DTTM length = 8
            format = DATETIME20.
            informat = DATETIME20.
            label = 'VALID_TO_DTTM'; 
         attrib FINANCIAL_INSTR_ASSOC_TYPE_CD length = $3
            format = $3.
            informat = $3.
            label = 'FINANCIAL_INSTR_ASSOC_TYPE_CD'; 
         attrib FINANCIAL_INSTRUMENT_ID length = $32
            format = $32.
            informat = $32.
            label = 'FINANCIAL_INSTRUMENT_ID'; 
         attrib REFERENCE_ACCOUNT_ID length = $32
            format = $32.
            informat = $32.
            label = 'FINANCIAL_ACCOUNT_ID'; 
         call missing(of _all_);
         stop;
      run;
      
      %rcSet(&syserr); 
      
      /*---- Create the integrity constraints for a table  ----*/ 
      %put %str(NOTE: Creating integrity constraints ...);
      proc datasets library=work_ia nolist;
         modify FIN_INSTR_ASSOC_FRA_BK;
            ic create not null (FINANCIAL_INSTRUMENT_ASSOC_ID);
            ic create not null (VALID_FROM_DTTM);
            ic create not null (VALID_TO_DTTM);
            ic create not null (FINANCIAL_INSTR_ASSOC_TYPE_CD);
            ic create not null (FINANCIAL_INSTRUMENT_ID);
            ic create not null (REFERENCE_ACCOUNT_ID);
            ic create pk_index = primary key (FINANCIAL_INSTRUMENT_ASSOC_ID VALID_FROM_DTTM);
      quit;
      
      %rcSet(&syserr); 
      
   %end;  /* if table does not exist  */ 
   
   /*---- Append  ----*/ 
   %put %str(NOTE: Appending data ...);
   
   proc append base = work_ia.FIN_INSTR_ASSOC_FRA_BK 
      data = &etls_lastTable (&etls_tableOptions)  force ; 
    run; 
   
   %rcSet(&syserr); 
   
   proc datasets lib = work nolist nowarn memtype = (data view);
      delete WIROB5R;
   quit;
   
%mend etls_loader;
%etls_loader;

%let etls_recCheckExist = 0; 
%let etls_recnt = 0; 
%macro etls_recordCheck; 
   %let etls_recCheckExist = %eval(%sysfunc(exist(work_ia.FIN_INSTR_ASSOC_FRA_BK, DATA)) or 
         %sysfunc(exist(work_ia.FIN_INSTR_ASSOC_FRA_BK, VIEW))); 
   
   %if (&etls_recCheckExist) %then
   %do;
      %local etls_syntaxcheck; 
      %let etls_syntaxcheck = %sysfunc(getoption(syntaxcheck)); 
      /* Turn off syntaxcheck option to perform following steps  */ 
      options nosyntaxcheck;
      
      proc contents data = work_ia.FIN_INSTR_ASSOC_FRA_BK out = work.etls_contents(keep = nobs) noprint; 
      run; 
      
      data _null_; 
         set work.etls_contents (obs = 1); 
         call symput("etls_recnt", left(put(nobs,32.))); 
      run;
      
      proc datasets lib = work nolist nowarn memtype = (data view);
         delete etls_contents;
      quit;
      
      /* Reset syntaxcheck option to previous setting  */ 
      options &etls_syntaxcheck; 
   %end;
%mend etls_recordCheck;
%etls_recordCheck;



/**  Step end Table Loader **/

/*==========================================================================* 
 * Step:            Завершить модуль                      A5Y50FNE.AQ00087U * 
 * Transform:       Завершить модуль                                        * 
 * Description:                                                             * 
 *==========================================================================*/ 

%let transformID = %quote(A5Y50FNE.AQ00087U);
%let trans_rc = 0;
%let etls_stepStartTime = %sysfunc(datetime(), datetime20.); 

%let _INPUT_count = 0; 
%let _OUTPUT_count = 0; 


/*****************************************************************
* ВЕРСИЯ:
*   $Id: transform_job_finish.sas 247 2012-04-03 07:31:10Z nesterenok $
*
******************************************************************
* НАЗНАЧЕНИЕ:
*   Регистрирует конец модуля ETL.
*
* ПАРАМЕТРЫ:
*   нет
*
******************************************************************/

%macro transform_job_finish;

   /* Продолжаем модуль */
   %job_continue_reg(mpJobType=JOB, mpJobName=&ETLS_JobName., mpPostEvent=N);

   /* Завершаем модуль */
   %job_finish_reg(mpJobType=JOB);

%mend transform_job_finish;

%transform_job_finish;


%rcSet(&syserr); 
%rcSet(&sysrc); 
%rcSet(&sqlrc); 



/**  Step end Завершить модуль **/

%let etls_endTime = %sysfunc(datetime(),datetime.);



/**  Job end 042_935_Structure_FINANCIAL_ACCOUNT_FRA_BK **/

/* Reset jobid and name */
%let jobID = %quote(A569C89V.AQ0000CK);
%let etls_jobName = %nrquote(090_364_Stream_Midas_Fin_Account_BK);

/**************************************************************************** 
 * Job:             042_942_Structure_FINANCIAL_ACCOUNT_  A5Y50FNE.AN0000VK * 
 *                  NDF_BK                                                  * 
 * Description:                                                             * 
 *                                                                          * 
 * Metadata Server: bravo14                                                 * 
 * Port:            8561                                                    * 
 * Location:        /DWH_DWHDDS_IA/Jobs/042_Structure/Financial_Account     * 
 *                                                                          * 
 * Server:          SASApp                                A5C46MZY.AQ000002 * 
 *                                                                          * 
 * Source Table:    FINANCIAL_INSTRUMENT_NDF_BK -         A5Y50FNE.AE00013Z * 
 *                   work_ia.FINANCIAL_INSTRUMENT_NDF_BK                    * 
 * Target Tables:   FINANCIAL_ACCOUNT_NDF_BK -            A5Y50FNE.AE00012P * 
 *                   work_ia.FINANCIAL_ACCOUNT_NDF_BK                       * 
 *                  FIN_INSTR_ASSOC_NDF_BK -              A5Y50FNE.AE000127 * 
 *                   work_ia.FIN_INSTR_ASSOC_NDF_BK                         * 
 *                  CUSTOMER_X_FIN_ACC_NDF_BK -           A5Y50FNE.AE00011T * 
 *                   work_ia.CUSTOMER_X_FIN_ACC_NDF_BK                      * 
 *                                                                          * 
 * Generated on:    16 Июль 2013 г. 17:14:44 MSD                            * 
 * Generated by:    sasdwh                                                  * 
 * Version:         SAS Data Integration Studio 4.5                         * 
 ****************************************************************************/ 

/* General macro variables  */ 
%let jobID = %quote(A5Y50FNE.AN0000VK);
%let etls_jobName = %nrquote(042_942_Structure_FINANCIAL_ACCOUNT_NDF_BK);
%let etls_userID = %nrquote(sasdwh);


/* Create metadata macro variables */
%let IOMServer      = %nrquote(SASApp);
%let metaPort       = %nrquote(8561);
%let metaServer     = %nrquote(bravo14);

/* Set metadata options */
options metaport       = &metaPort 
        metaserver     = "&metaServer"; 

/* Setup for capturing job status  */ 
%let etls_startTime = %sysfunc(datetime(),datetime.);
%let etls_recordsBefore = 0;
%let etls_recordsAfter = 0;
%let etls_lib = 0;
%let etls_table = 0;

%global etls_debug; 
%macro etls_setDebug; 
   %if %str(&etls_debug) ne 0 %then 
      OPTIONS MPRINT%str(;); 
%mend; 
%etls_setDebug; 

/*==========================================================================* 
 * Step:            Начать модуль                         A5Y50FNE.AQ000880 * 
 * Transform:       Начать модуль                                           * 
 * Description:                                                             * 
 *==========================================================================*/ 

%let transformID = %quote(A5Y50FNE.AQ000880);
%let trans_rc = 0;
%let etls_stepStartTime = %sysfunc(datetime(), datetime20.); 

%let _INPUT_count = 0; 
%let _OUTPUT_count = 0; 


/*****************************************************************
* ВЕРСИЯ:
*   $Id: transform_job_start.sas 1747 2012-08-01 11:26:13Z nesterenok $
*
******************************************************************
* НАЗНАЧЕНИЕ:
*   Регистрирует начало модуля ETL.
*
* ПАРАМЕТРЫ:
*   нет
*
******************************************************************/

%macro transform_job_start;

   /* Продолжаем поток (или создаем новый) */
   %local lmvStreamName;
   %if %sysfunc(sysexist(LSB_JOBNAME)) %then
      %let lmvStreamName = %scan(%sysfunc(sysget(LSB_JOBNAME)), 3, :);
   %else
      %let lmvStreamName = ;

   %job_continue_reg(mpJobType=STREAM, mpJobName=&lmvStreamName, mpPostEvent=N, mpForcedStart=Y);

   /* Для DI, начинаем поток заново, если старый был начат не сегодня */
   %if %length(&lmvStreamName) eq 0 and &STREAM_START_DT ne %sysfunc(today()) %then %do;
      %job_start_reg(mpJobType=STREAM, mpParentJobId=, mpJobName=&lmvStreamName.);
   %end;

   /* Начинаем модуль */
   %job_start_reg(mpJobType=JOB, mpParentJobId=&STREAM_ID, mpJobName=&ETLS_JobName.);

%mend transform_job_start;

%transform_job_start;


%rcSet(&syserr); 
%rcSet(&sysrc); 
%rcSet(&sqlrc); 



/**  Step end Начать модуль **/

/*==========================================================================* 
 * Step:            Отбор первых и актуальных записей с   A5Y50FNE.AQ000881 * 
 *                   учетом ног                                             * 
 * Transform:       Splitter                                                * 
 * Description:                                                             * 
 *                                                                          * 
 * Source Table:    FINANCIAL_INSTRUMENT_NDF_BK -         A5Y50FNE.AE00013Z * 
 *                   work_ia.FINANCIAL_INSTRUMENT_NDF_BK                    * 
 * Target Tables:   first recs - work.W1B87YYR            A5Y50FNE.AO0004NB * 
 *                  actual recs - work.W1BAZY4C           A5Y50FNE.AO0004NC * 
 *==========================================================================*/ 

%let transformID = %quote(A5Y50FNE.AQ000881);
%let trans_rc = 0;
%let etls_stepStartTime = %sysfunc(datetime(), datetime20.); 

%let etls_recCheckExist = 0; 
%let etls_recnt = 0; 
%macro etls_recordCheck; 
   %let etls_recCheckExist = %eval(%sysfunc(exist(work_ia.FINANCIAL_INSTRUMENT_NDF_BK, DATA)) or 
         %sysfunc(exist(work_ia.FINANCIAL_INSTRUMENT_NDF_BK, VIEW))); 
   
   %if (&etls_recCheckExist) %then
   %do;
      %local etls_syntaxcheck; 
      %let etls_syntaxcheck = %sysfunc(getoption(syntaxcheck)); 
      /* Turn off syntaxcheck option to perform following steps  */ 
      options nosyntaxcheck;
      
      proc contents data = work_ia.FINANCIAL_INSTRUMENT_NDF_BK out = work.etls_contents(keep = nobs) noprint; 
      run; 
      
      data _null_; 
         set work.etls_contents (obs = 1); 
         call symput("etls_recnt", left(put(nobs,32.))); 
      run;
      
      proc datasets lib = work nolist nowarn memtype = (data view);
         delete etls_contents;
      quit;
      
      /* Reset syntaxcheck option to previous setting  */ 
      options &etls_syntaxcheck; 
   %end;
%mend etls_recordCheck;
%etls_recordCheck;

%let SYSLAST = %nrquote(work_ia.FINANCIAL_INSTRUMENT_NDF_BK); 

proc datasets lib=work nolist nowarn memtype = (data view);
   delete W1B87YYR;
   delete W1BAZY4C;
quit;

data 
     work.W1B87YYR
     work.W1BAZY4C;
   set &SYSLAST;
   if FSRT=1 then 
      output work.W1B87YYR;
   if VALID_TO_DTTM = &ETL_SCD_FUTURE_DTTM then 
      output work.W1BAZY4C;
run;

%rcSet(&syserr); 

/*---- Map the columns  ----*/ 
proc datasets lib = work nolist nowarn memtype = (data view);
   delete etls_mapped;
quit;

%put %str(NOTE: Mapping columns ...);
proc sql;
   create table work.etls_mapped as
      select
         VALID_FROM_DTTM,
         FINANCIAL_INSTRUMENT_ID,
         IRB_SRC_ACCOUNT_ID,
         DDAT
   from work.W1B87YYR
   ;
quit;

%let SYSLAST = work.etls_mapped;

data work.W1B87YYR;
  set work.etls_mapped;
run;

proc datasets lib = work nolist nowarn memtype = (data view);
   delete etls_mapped;
quit;

%rcSet(&syscc); 

/*---- Map the columns  ----*/ 
proc datasets lib = work nolist nowarn memtype = (data view);
   delete etls_mapped;
quit;

%put %str(NOTE: Mapping columns ...);
proc sql;
   create table work.etls_mapped as
      select
         FINANCIAL_INSTRUMENT_ID,
         FIRST_PAYMENT_DT,
         FINANCIAL_INSTRUMENT_TYPE_CD,
         CURRENCY_CD,
         IRB_INSTR_STATUS_CD,
         IRB_SRC_ACCOUNT_ID,
         KONDOR_A   
            format = 11.
            informat = 11.,
         ARM302P_ID,
         FXMM_ID,
         BRCA,
         CNUM,
         LCD,
         VDAT
   from work.W1BAZY4C
   ;
quit;

%let SYSLAST = work.etls_mapped;

data work.W1BAZY4C;
  set work.etls_mapped;
run;

proc datasets lib = work nolist nowarn memtype = (data view);
   delete etls_mapped;
quit;

%rcSet(&syscc); 



/**  Step end Отбор первых и актуальных записей с учетом ног **/

/*==========================================================================* 
 * Step:            Собираем данные по сделке             A5Y50FNE.AQ000882 * 
 * Transform:       Join                                                    * 
 * Description:                                                             * 
 *                                                                          * 
 * Source Tables:   actual recs - work.W1BAZY4C           A5Y50FNE.AO0004NC * 
 *                  first recs - work.W1B87YYR            A5Y50FNE.AO0004NB * 
 * Target Table:    SQL Join - work.W1B4DNDN              A5Y50FNE.AO0004ND * 
 *==========================================================================*/ 

%let transformID = %quote(A5Y50FNE.AQ000882);
%let trans_rc = 0;
%let etls_stepStartTime = %sysfunc(datetime(), datetime20.); 

%let etls_recCheckExist = 0; 
%let etls_recnt = 0; 
%macro etls_recordCheck; 
   %let etls_recCheckExist = %eval(%sysfunc(exist(work.W1BAZY4C, DATA)) or 
         %sysfunc(exist(work.W1BAZY4C, VIEW))); 
   
   %if (&etls_recCheckExist) %then
   %do;
      %local etls_syntaxcheck; 
      %let etls_syntaxcheck = %sysfunc(getoption(syntaxcheck)); 
      /* Turn off syntaxcheck option to perform following steps  */ 
      options nosyntaxcheck;
      
      proc contents data = work.W1BAZY4C out = work.etls_contents(keep = nobs) noprint; 
      run; 
      
      data _null_; 
         set work.etls_contents (obs = 1); 
         call symput("etls_recnt", left(put(nobs,32.))); 
      run;
      
      proc datasets lib = work nolist nowarn memtype = (data view);
         delete etls_contents;
      quit;
      
      /* Reset syntaxcheck option to previous setting  */ 
      options &etls_syntaxcheck; 
   %end;
%mend etls_recordCheck;
%etls_recordCheck;

%let SYS_SQL_IP_SPEEDO = Y;
%let SYS_SQL_MAPPUTTO = sas_put;
%let SYS_SQLREDUCEPUT = DBMS;
%global etls_sql_pushDown;
%let etls_sql_pushDown = -1;
option DBIDIRECTEXEC;

proc datasets lib = work nolist nowarn memtype = (data view);
   delete W1B4DNDN;
quit;

proc sql;
   create view work.W1B4DNDN as
   select
      W1B87YYR.VALID_FROM_DTTM length = 8   
         format = DATETIME20.
         informat = DATETIME20.
         label = 'VALID_FROM_DTTM',
      W1B87YYR.IRB_SRC_ACCOUNT_ID length = 32   
         format = $32.
         informat = $32.
         label = 'IRB_SRC_ACCOUNT_ID',
      W1B87YYR.DDAT length = 8   
         format = DATETIME20.
         informat = DATETIME20.
         label = 'DDAT',
      W1BAZY4C.FIRST_PAYMENT_DT length = 8   
         format = DATETIME20.
         informat = DATETIME20.
         label = 'FIRST_PAYMENT_DT',
      W1BAZY4C.FINANCIAL_INSTRUMENT_TYPE_CD length = 3   
         format = $3.
         informat = $3.
         label = 'FINANCIAL_INSTRUMENT_TYPE_CD',
      W1BAZY4C.CURRENCY_CD length = 3   
         format = $3.
         informat = $3.
         label = 'CURRENCY_CD',
      W1BAZY4C.IRB_INSTR_STATUS_CD length = 3   
         format = $3.
         informat = $3.
         label = 'IRB_INSTR_STATUS_CD',
      W1BAZY4C.KONDOR_A length = 8   
         format = 11.
         informat = 11.
         label = 'KONDOR_A',
      W1BAZY4C.ARM302P_ID length = 8   
         format = 11.
         informat = 11.
         label = 'ARM302P_ID',
      W1BAZY4C.FXMM_ID length = 8   
         format = 11.
         informat = 11.
         label = 'FXMM_ID',
      W1BAZY4C.BRCA length = 3   
         format = $3.
         informat = $3.
         label = 'BRCA',
      W1BAZY4C.CNUM length = 8   
         format = 7.
         informat = 7.
         label = 'CNUM',
      W1BAZY4C.LCD length = 8   
         format = 6.
         informat = 6.
         label = 'LCD',
      W1BAZY4C.VDAT length = 8   
         format = DATETIME20.
         informat = DATETIME20.
         label = 'VDAT'
   from
      work.W1B87YYR, 
      work.W1BAZY4C
   where
      W1B87YYR.IRB_SRC_ACCOUNT_ID = W1BAZY4C.IRB_SRC_ACCOUNT_ID
   ;
quit;

%global etls_sql_pushDown;
%let etls_sql_pushDown = &sys_sql_ip_all;

%rcSet(&sqlrc); 



/**  Step end Собираем данные по сделке **/

/*==========================================================================* 
 * Step:            Extract                               A5Y50FNE.AQ000883 * 
 * Transform:       Extract                                                 * 
 * Description:                                                             * 
 *                                                                          * 
 * Source Table:    SQL Join - work.W1B4DNDN              A5Y50FNE.AO0004ND * 
 * Target Table:    Extract - work.W1MOEVV1               A5Y50FNE.AO0004NE * 
 *==========================================================================*/ 

%let transformID = %quote(A5Y50FNE.AQ000883);
%let trans_rc = 0;
%let etls_stepStartTime = %sysfunc(datetime(), datetime20.); 

%let etls_recnt = -1;
%let SYSLAST = %nrquote(work.W1B4DNDN); 

%let SYS_SQL_IP_SPEEDO = Y;
%let SYS_SQL_MAPPUTTO = sas_put;
%let SYS_SQLREDUCEPUT = DBMS;
%global etls_sql_pushDown;
%let etls_sql_pushDown = -1;
option DBIDIRECTEXEC;

/*---- Map the columns  ----*/ 
proc datasets lib = work nolist nowarn memtype = (data view);
   delete W1MOEVV1;
quit;

data _null_;
   put "NOTE: The following column(s) do not have a column mapping, so the"
        " value(s) will be set to missing: DAY_BASIS_CD,"
        " INTEREST_PAYMENT_TYPE_CD";
run;

%put %str(NOTE: Mapping columns ...);
proc sql;
   create view work.W1MOEVV1 as
      select
         VALID_FROM_DTTM,
         (&ETL_SCD_FUTURE_DTTM) as VALID_TO_DTTM length = 8
            format = DATETIME20.
            informat = DATETIME20.
            label = 'VALID_TO_DTTM',
         IRB_SRC_ACCOUNT_ID,
         ('MID') as SOURCE_SYSTEM_CD length = 3
            format = $3.
            informat = $3.
            label = 'SOURCE_SYSTEM_CD',
         (ifc(missing(KONDOR_A), '', cats(KONDOR_A))) as ACCOUNT_REGISTRATION_NM length = 100
            format = $100.
            informat = $100.
            label = 'ACCOUNT_REGISTRATION_NM',
         (ifc(missing(ARM302P_ID), '', cats(FXMM_ID, '_', ARM302P_ID))) as ALTERNATE_ACCOUNT_NM length = 40
            format = $40.
            informat = $40.
            label = 'ALTERNATE_ACCOUNT_NM',
         ('DRV') as FINANCIAL_ACCOUNT_TYPE_CD length = 3
            format = $3.
            informat = $3.
            label = 'FINANCIAL_ACCOUNT_TYPE_CD',
         BRCA,
         IRB_INSTR_STATUS_CD as ACCOUNT_STATUS_CD   
            label = 'ACCOUNT_STATUS_CD',
         DDAT as OPEN_DT   
            label = 'OPEN_DT',
         FIRST_PAYMENT_DT as CLOSE_DT   
            label = 'corrected later',
         CURRENCY_CD,
         "" as DAY_BASIS_CD length = 10
            format = $10.
            informat = $10.
            label = 'DAY_BASIS_CD',
         "" as INTEREST_PAYMENT_TYPE_CD length = 3
            format = $3.
            informat = $3.
            label = 'INTEREST_PAYMENT_TYPE_CD',
         FINANCIAL_INSTRUMENT_TYPE_CD,
         (put(CNUM ,z8.)) as CUSTOMER_NO length = 8
            label = 'CUSTOMER_NO',
         LCD,
         VDAT
   from &SYSLAST
   ;
quit;

%let SYSLAST = work.W1MOEVV1;

%global etls_sql_pushDown;
%let etls_sql_pushDown = &sys_sql_ip_all;

%rcSet(&sqlrc); 



/**  Step end Extract **/

/*==========================================================================* 
 * Step:            Генерация BK                          A5Y50FNE.AQ000884 * 
 * Transform:       Генерация BK                                            * 
 * Description:                                                             * 
 *                                                                          * 
 * Source Table:    Extract - work.W1MOEVV1               A5Y50FNE.AO0004NE * 
 * Target Table:    Генерация BKtpOut - work.W1MHBF25     A5Y50FNE.AO0004NF * 
 *==========================================================================*/ 

%let transformID = %quote(A5Y50FNE.AQ000884);
%let trans_rc = 0;
%let etls_stepStartTime = %sysfunc(datetime(), datetime20.); 

%let etls_recnt = -1;
%let SYSLAST = %nrquote(work.W1MOEVV1); 

%let _INPUT_count = 1; 
%let _INPUT = work.W1MOEVV1;
%let _INPUT_connect = ;
%let _INPUT_engine = ;
%let _INPUT_memtype = VIEW;
%let _INPUT_options = %nrquote();
%let _INPUT_alter = %nrquote();
%let _INPUT_path = %nrquote(/Extract_A5Y50FNE.AO0004NE%(WorkTable%));
%let _INPUT_type = 1;
%let _INPUT_label = %nrquote();

%let tpIn = work.W1MOEVV1;
%let tpIn_connect = ;
%let tpIn_engine = ;
%let tpIn_memtype = VIEW;
%let tpIn_options = %nrquote();
%let tpIn_alter = %nrquote();
%let tpIn_path = %nrquote(/Extract_A5Y50FNE.AO0004NE%(WorkTable%));
%let tpIn_type = 1;
%let tpIn_label = %nrquote();

%let _OUTPUT_count = 1; 
%let _OUTPUT = work.W1MHBF25;
%let _OUTPUT_connect = ;
%let _OUTPUT_engine = ;
%let _OUTPUT_memtype = DATA;
%let _OUTPUT_options = %nrquote();
%let _OUTPUT_alter = %nrquote();
%let _OUTPUT_path = %nrquote(/Генерация BKtpOut_A5Y50FNE.AO0004NF%(WorkTable%));
%let _OUTPUT_type = 1;
%let _OUTPUT_label = %nrquote();
/* List of target columns to keep  */ 
%let _OUTPUT_keep = DRV_ACCOUNT_ID FCC_COUNTERPARTY_ID VALID_FROM_DTTM VALID_TO_DTTM 
        SOURCE_SYSTEM_CD ACCOUNT_REGISTRATION_NM ALTERNATE_ACCOUNT_NM 
        FINANCIAL_ACCOUNT_TYPE_CD ACCOUNT_STATUS_CD OPEN_DT CLOSE_DT 
        CURRENCY_CD DAY_BASIS_CD INTEREST_PAYMENT_TYPE_CD IRB_SRC_ACCOUNT_ID 
        MID_FINANCIAL_UNIT_ID_BRCA BRCA FINANCIAL_INSTRUMENT_TYPE_CD LCD VDAT;

%let tpOut = work.W1MHBF25;
%let tpOut_connect = ;
%let tpOut_engine = ;
%let tpOut_memtype = DATA;
%let tpOut_options = %nrquote();
%let tpOut_alter = %nrquote();
%let tpOut_path = %nrquote(/Генерация BKtpOut_A5Y50FNE.AO0004NF%(WorkTable%));
%let tpOut_type = 1;
%let tpOut_label = %nrquote();
/* List of target columns to keep  */ 
%let tpOut_keep = DRV_ACCOUNT_ID FCC_COUNTERPARTY_ID VALID_FROM_DTTM VALID_TO_DTTM 
        SOURCE_SYSTEM_CD ACCOUNT_REGISTRATION_NM ALTERNATE_ACCOUNT_NM 
        FINANCIAL_ACCOUNT_TYPE_CD ACCOUNT_STATUS_CD OPEN_DT CLOSE_DT 
        CURRENCY_CD DAY_BASIS_CD INTEREST_PAYMENT_TYPE_CD IRB_SRC_ACCOUNT_ID 
        MID_FINANCIAL_UNIT_ID_BRCA BRCA FINANCIAL_INSTRUMENT_TYPE_CD LCD VDAT;


proc datasets lib=work nolist nowarn memtype = (data view);
   delete W1MHBF25;
quit;

%let tpBK = %nrquote(FINANCIAL_ACCOUNT_DRV           );
%let tpBK0 = %nrquote(3);
%let tpBK1 = %nrquote(FINANCIAL_ACCOUNT_DRV           );
%let tpBK2 = %nrquote(FINANCIAL_UNIT_MID_BRCA         );
%let tpBK3 = %nrquote(FCC_COUNTERPARTY_FCC            );
%let tpBK_count = %nrquote(3);
%let tpOptionalBK_count = %nrquote(0);
%let tpOptionalBK = ;

/* List of target columns to keep  */ 
%let _keep = DRV_ACCOUNT_ID FCC_COUNTERPARTY_ID VALID_FROM_DTTM VALID_TO_DTTM 
        SOURCE_SYSTEM_CD ACCOUNT_REGISTRATION_NM ALTERNATE_ACCOUNT_NM 
        FINANCIAL_ACCOUNT_TYPE_CD ACCOUNT_STATUS_CD OPEN_DT CLOSE_DT 
        CURRENCY_CD DAY_BASIS_CD INTEREST_PAYMENT_TYPE_CD IRB_SRC_ACCOUNT_ID 
        MID_FINANCIAL_UNIT_ID_BRCA BRCA FINANCIAL_INSTRUMENT_TYPE_CD LCD VDAT;
/* List of target columns to keep  */ 
%let keep = DRV_ACCOUNT_ID FCC_COUNTERPARTY_ID VALID_FROM_DTTM VALID_TO_DTTM 
        SOURCE_SYSTEM_CD ACCOUNT_REGISTRATION_NM ALTERNATE_ACCOUNT_NM 
        FINANCIAL_ACCOUNT_TYPE_CD ACCOUNT_STATUS_CD OPEN_DT CLOSE_DT 
        CURRENCY_CD DAY_BASIS_CD INTEREST_PAYMENT_TYPE_CD IRB_SRC_ACCOUNT_ID 
        MID_FINANCIAL_UNIT_ID_BRCA BRCA FINANCIAL_INSTRUMENT_TYPE_CD LCD VDAT;
/*****************************************************************
* ВЕРСИЯ:
*     $Id: transform_generate_bk.sas 4889 2013-04-04 09:14:07Z nesterenok $
*
******************************************************************
* НАЗНАЧЕНИЕ:
*     Генерирует бизнес-ключи в таблице по списку.
*
* ПАРАМЕТРЫ:
*     tpIn                    +  имя входного набора
*     tpBK                    +  список кодов обязательных для генерации бизнес-ключей, разделенный пробелами
*                                Такой бизнес-ключ станет дамми, если заполнены не все поля, его составляющие
*                                FK к ETL_SYS.ETL_BK.BK_CD
*     tpOptionalBK            +  список кодов НЕобязательных для генерации бизнес-ключей, разделенный пробелами
*                                Такой бизнес-ключ останется пустым, если заполнены не все поля, его составляющие
*     tpOut                   +  имя выходного набора
*
******************************************************************/

%macro transform_generate_bk;
   %let tpBK_count         = %unquote(&tpBK_count);
   %let tpOptionalBK_count = %unquote(&tpOptionalBK_count);

   %local lmvDummyRows lmvFieldDummyCount lmvDummyRequired;
   %let lmvDummyRows       = work.tr_gen_bk_dummy_rows;
   %let lmvFieldDummyCount = etl_dummy_count;
   %let lmvDummyRequired   = %eval (&tpBK_count gt 0);

   /* Макросы для генерации одного ключа */
   %macro sm_trans_gen_bk_required;
      %etl_generate_bk (
         mpFieldBK=&bk_field_nm, mpLengthBK=%sysfunc(inputn(&bk_type_cd, bkt_cd_len.)),
         mpColumnList=&bk_column_list_txt, mpFormat=&bk_format_txt,
         mpFieldDummy=&lmvFieldDummy, mpFieldDummyCount=&lmvFieldDummyCount
      );
   %mend;
   %macro sm_trans_gen_bk_optional;
      %etl_generate_bk (
         mpFieldBK=&bk_field_nm, mpLengthBK=%sysfunc(inputn(&bk_type_cd, bkt_cd_len.)),
         mpColumnList=&bk_column_list_txt, mpFormat=&bk_format_txt,
         mpFieldDummy=
      );
   %mend;

   /* Макрос для подстановки в дамми-ключ уникального номера */
   %macro sm_trans_gen_bk_dummy;
      if &lmvFieldDummy gt 0 then do;
         set &lmvDummyIds (keep=OBJECT_ID rename=(OBJECT_ID=&lmvFieldDummy._no)) point=&lmvFieldDummy;
         &bk_field_nm = cats (&bk_field_nm, "_", &lmvFieldDummy._no);

         %error_check;
      end;
   %mend;


   /* Создаем выходной набор итерацией по всем заявленным бизнес-ключам */
   /* Считаем необходимое кол-во дамми-ключей */
   %local lmvBkIndex lmvFieldDummy lmvDummyCount;
   %let lmvDummyCount   = 0;
   data
      %if &lmvDummyRequired %then %do;
         &tpOut (drop= etl_dummy_:)
         &lmvDummyRows
      %end;
      %else %do;
         &tpOut
      %end;
   ;
      set &tpIn end=ds_end;

      /* Генерация необязательных ключей */
      %do lmvBkIndex=1 %to &tpOptionalBK_count;
         %util_loop_data (mpLoopMacro=sm_trans_gen_bk_optional, mpData=ETL_SYS.ETL_BK,
                          mpWhere=BK_CD eq %util_quote(&&tpOptionalBK&lmvBkIndex)
         );
      %end;

      %if &lmvDummyRequired %then %do;
         length &lmvFieldDummyCount 8;
         drop &lmvFieldDummyCount;
         retain &lmvFieldDummyCount 0;

         /* Генерация обязательных ключей */
         %do lmvBkIndex=1 %to &tpBK_count;
            %let lmvFieldDummy = etl_dummy_&lmvBkIndex.;

            %util_loop_data (mpLoopMacro=sm_trans_gen_bk_required, mpData=ETL_SYS.ETL_BK,
                             mpWhere=BK_CD eq %util_quote(&&tpBK&lmvBkIndex)
            );
         %end;

         /* Если в какой-то записи есть дамми, то не выводим ее сразу */
         if sum (of etl_dummy_1-etl_dummy_&tpBK_count) = 0 then
            output &tpOut;
         else do;
            output &lmvDummyRows;
         end;

         if ds_end then call symputx ("lmvDummyCount", &lmvFieldDummyCount);
      %end;
      %else %do;
         output &tpOut;
      %end;
   run;
   %error_check (mpStepType=DATA);

   /* Если дамми нет, то всё */
   %if (not &lmvDummyRequired) or (&lmvDummyCount eq 0) %then %return;


   /* Для каждого дамми генерируем уникальный номер */
   %local lmvDummyIds;
   %let lmvDummyIds = work.tr_gen_bk_dummy_ids;
   %unique_ids (mpIdCount=&lmvDummyCount, mpOut=&lmvDummyIds, mpSequenceName=ETL_DUMMY_SEQ);

   /* Добавляем номер к дамми */
   data &lmvDummyRows._id (drop= etl_dummy_:);
      set &lmvDummyRows;

      %do lmvBkIndex=1 %to &tpBK_count;
         %let lmvFieldDummy = etl_dummy_&lmvBkIndex.;

         %util_loop_data (mpLoopMacro=sm_trans_gen_bk_dummy, mpData=ETL_SYS.ETL_BK,
                          mpWhere=BK_CD eq %util_quote(&&tpBK&lmvBkIndex)
         );
      %end;
   run;
   %error_check (mpStepType=DATA);


   /* Добавляем дамми-строки к выходному набору */
   proc append base=&tpOut data=&lmvDummyRows._id;
   run;
   %error_check (mpStepType=DATA);

%mend transform_generate_bk;

%transform_generate_bk;

%rcSet(&syserr); 
%rcSet(&sysrc); 
%rcSet(&sqlrc); 



/**  Step end Генерация BK **/

/*==========================================================================* 
 * Step:            Table Loader                          A5Y50FNE.AQ000885 * 
 * Transform:       Table Loader (Version 2.1)                              * 
 * Description:                                                             * 
 *                                                                          * 
 * Source Table:    Генерация BKtpOut - work.W1MHBF25     A5Y50FNE.AO0004NF * 
 * Target Table:    CUSTOMER_X_FIN_ACC_NDF_BK -           A5Y50FNE.AE00011T * 
 *                   work_ia.CUSTOMER_X_FIN_ACC_NDF_BK                      * 
 *==========================================================================*/ 

%let transformID = %quote(A5Y50FNE.AQ000885);
%let trans_rc = 0;
%let etls_stepStartTime = %sysfunc(datetime(), datetime20.); 

%let SYSLAST = %nrquote(work.W1MHBF25); 

%let SYS_SQL_IP_SPEEDO = Y;
%let SYS_SQL_MAPPUTTO = sas_put;
%let SYS_SQLREDUCEPUT = DBMS;
%global etls_sql_pushDown;
%let etls_sql_pushDown = -1;
option DBIDIRECTEXEC;

%global etls_tableExist;
%global etls_numIndex;
%global etls_lastTable;
%let etls_tableExist = -1; 
%let etls_numIndex = -1; 
%let etls_lastTable = &SYSLAST; 

/*---- Define load data macro  ----*/ 

/* --------------------------------------------------------------
   Load Technique Selection: Replace - EntireTable
   Constraint and index action selections: 'INIT','ASIS','ASIS','ASIS'
   Additional options selections... 
      Set unmapped to missing on updates: false 
   -------------------------------------------------------------- */
%macro etls_loader;

   %let etls_tableOptions = ;
   
   /*---- Map the columns  ----*/ 
   proc datasets lib = work nolist nowarn memtype = (data view);
      delete WIROFML;
   quit;
   
   data _null_;
      put "NOTE: The following column(s) do not have a column mapping, so the"
           " value(s) will be set to missing: RELSHP_TO_PRIMARY_CD,"
           " EFFECTIVE_FROM_DTTM, EFFECTIVE_TO_DTTM";
   run;
   
   %put %str(NOTE: Mapping columns ...);
   proc sql;
      create view work.WIROFML as
         select
            FCC_COUNTERPARTY_ID as CUSTOMER_ID,
            DRV_ACCOUNT_ID as ACCOUNT_ID,
            VALID_FROM_DTTM,
            VALID_TO_DTTM,
            "" as RELSHP_TO_PRIMARY_CD length = 3
               format = $3.
               informat = $3.,
            ('DDC') as RELATIONSHIP_TO_ACCOUNT_CD length = 3
               format = $3.
               informat = $3.,
            . as EFFECTIVE_FROM_DTTM length = 8
               format = DATETIME20.
               informat = DATETIME20.,
            . as EFFECTIVE_TO_DTTM length = 8
               format = DATETIME20.
               informat = DATETIME20.
      from &etls_lastTable
      ;
   quit;
   
   %let SYSLAST = work.WIROFML;
   
   %let etls_lastTable = &SYSLAST; 
   %let etls_tableOptions = ; 
   
   /* Determine if the target table exists  */ 
   %let etls_tableExist = %eval(%sysfunc(exist(work_ia.CUSTOMER_X_FIN_ACC_NDF_BK, DATA)) or 
         %sysfunc(exist(work_ia.CUSTOMER_X_FIN_ACC_NDF_BK, VIEW))); 
   
   %if &etls_tableExist %then 
   %do;/* table exists  */ 
      %let etls_hasPreExistingConstraint=0; 
      
      proc datasets lib = work nolist nowarn memtype = (data view);
         delete etls_commands etls_commands_F;
      quit;
      
      %let etls_otherTablesReferToThisTable=0;
      
      %macro etls_CIContents(table=,workTableOut=,inDSOptions=);
         %put NOTE: Building table listing Constraints and Indexes for: &table;
         proc datasets lib=work nolist; delete &workTableOut; quit;
         proc contents data=&table&inDSOptions out2=&workTableOut noprint; run;
         
         data &workTableOut;
            length name $60 type $20 icown idxUnique idxNoMiss $3 recreate $600;
            set &workTableOut;
            type=upcase(type);
            if type eq 'REFERENTIAL' then
            do;
               put "WARNING%QUOTE(:) Target table is referenced by constraints in"
                    " another table: " ref;
               call symput('etls_otherTablesReferToThisTable','1');
               delete;
            end;
            if type='INDEX' and ICOwn eq 'YES' then delete;
         run;
         %rcSet(&syserr); 
         
      %mend etls_CIContents;
      
      %etls_CIContents(table=work_ia.CUSTOMER_X_FIN_ACC_NDF_BK, workTableOut=etls_commands, inDSOptions=);
      
      %if &etls_otherTablesReferToThisTable %then 
         %put WARNING%QUOTE(:) Replacing entire table will fail. Consider an alternate load technique or revising constraints.; 
      %else 
      %do; /* okay - remove foreign keys  */ 
      
         data etls_commands_F; 
            set etls_commands; 
            if upcase(type)="FOREIGN KEY" then 
            do; 
               command='ic delete '||trim(name)||';';
               output etls_commands_F; 
            end; 
         run; 
         
         %put %str(NOTE: Removing foreign keys before dropping table...);
         data _null_;
            set etls_commands_F;
            %rcSet(&syserr); 
            
      %end; /* okay - remove foreign keys  */ 
      
      proc datasets lib = work nolist nowarn memtype = (data view);
         delete etls_commands etls_commands_F;
      quit;
      
      /*---- Drop a table  ----*/ 
      %put %str(NOTE: Dropping table ...);
      proc datasets lib = work_ia nolist nowarn memtype = (data view);
         delete CUSTOMER_X_FIN_ACC_NDF_BK;
      quit;
      
      %rcSet(&syserr); 
      
      %let etls_tableExist = 0;
      
   %end; /* table exists  */ 
   
   /*---- Create a new table  ----*/ 
   %if (&etls_tableExist eq 0) %then 
   %do;  /* if table does not exist  */ 
   
      %put %str(NOTE: Creating table ...);
      
      data work_ia.CUSTOMER_X_FIN_ACC_NDF_BK;
         attrib CUSTOMER_ID length = $32
            format = $32.
            informat = $32.
            label = 'CUSTOMER_ID'; 
         attrib ACCOUNT_ID length = $32
            format = $32.
            informat = $32.
            label = 'ACCOUNT_ID'; 
         attrib VALID_FROM_DTTM length = 8
            format = DATETIME20.
            informat = DATETIME20.
            label = 'VALID_FROM_DTTM'; 
         attrib VALID_TO_DTTM length = 8
            format = DATETIME20.
            informat = DATETIME20.
            label = 'VALID_TO_DTTM'; 
         attrib RELSHP_TO_PRIMARY_CD length = $3
            format = $3.
            informat = $3.
            label = 'RELSHP_TO_PRIMARY_CD'; 
         attrib RELATIONSHIP_TO_ACCOUNT_CD length = $3
            format = $3.
            informat = $3.
            label = 'RELATIONSHIP_TO_ACCOUNT_CD'; 
         attrib EFFECTIVE_FROM_DTTM length = 8
            format = DATETIME20.
            informat = DATETIME20.
            label = 'EFFECTIVE_FROM_DTTM'; 
         attrib EFFECTIVE_TO_DTTM length = 8
            format = DATETIME20.
            informat = DATETIME20.
            label = 'EFFECTIVE_TO_DTTM'; 
         call missing(of _all_);
         stop;
      run;
      
      %rcSet(&syserr); 
      
      /*---- Create the integrity constraints for a table  ----*/ 
      %put %str(NOTE: Creating integrity constraints ...);
      proc datasets library=work_ia nolist;
         modify CUSTOMER_X_FIN_ACC_NDF_BK;
            ic create not null (CUSTOMER_ID);
            ic create not null (ACCOUNT_ID);
            ic create not null (VALID_FROM_DTTM);
            ic create not null (VALID_TO_DTTM);
            ic create not null (RELATIONSHIP_TO_ACCOUNT_CD);
            ic create Index1 = primary key (CUSTOMER_ID ACCOUNT_ID VALID_FROM_DTTM 
                           RELATIONSHIP_TO_ACCOUNT_CD);
      quit;
      
      %rcSet(&syserr); 
      
   %end;  /* if table does not exist  */ 
   
   /*---- Append  ----*/ 
   %put %str(NOTE: Appending data ...);
   
   proc append base = work_ia.CUSTOMER_X_FIN_ACC_NDF_BK 
      data = &etls_lastTable (&etls_tableOptions)  force ; 
    run; 
   
   %rcSet(&syserr); 
   
   proc datasets lib = work nolist nowarn memtype = (data view);
      delete WIROFML;
   quit;
   
%mend etls_loader;
%etls_loader;

%let etls_recCheckExist = 0; 
%let etls_recnt = 0; 
%macro etls_recordCheck; 
   %let etls_recCheckExist = %eval(%sysfunc(exist(work_ia.CUSTOMER_X_FIN_ACC_NDF_BK, DATA)) or 
         %sysfunc(exist(work_ia.CUSTOMER_X_FIN_ACC_NDF_BK, VIEW))); 
   
   %if (&etls_recCheckExist) %then
   %do;
      %local etls_syntaxcheck; 
      %let etls_syntaxcheck = %sysfunc(getoption(syntaxcheck)); 
      /* Turn off syntaxcheck option to perform following steps  */ 
      options nosyntaxcheck;
      
      proc contents data = work_ia.CUSTOMER_X_FIN_ACC_NDF_BK out = work.etls_contents(keep = nobs) noprint; 
      run; 
      
      data _null_; 
         set work.etls_contents (obs = 1); 
         call symput("etls_recnt", left(put(nobs,32.))); 
      run;
      
      proc datasets lib = work nolist nowarn memtype = (data view);
         delete etls_contents;
      quit;
      
      /* Reset syntaxcheck option to previous setting  */ 
      options &etls_syntaxcheck; 
   %end;
%mend etls_recordCheck;
%etls_recordCheck;



/**  Step end Table Loader **/

/*==========================================================================* 
 * Step:            Table Loader                          A5Y50FNE.AQ000886 * 
 * Transform:       Table Loader (Version 2.1)                              * 
 * Description:                                                             * 
 *                                                                          * 
 * Source Table:    Генерация BKtpOut - work.W1MHBF25     A5Y50FNE.AO0004NF * 
 * Target Table:    FINANCIAL_ACCOUNT_NDF_BK -            A5Y50FNE.AE00012P * 
 *                   work_ia.FINANCIAL_ACCOUNT_NDF_BK                       * 
 *==========================================================================*/ 

%let transformID = %quote(A5Y50FNE.AQ000886);
%let trans_rc = 0;
%let etls_stepStartTime = %sysfunc(datetime(), datetime20.); 

%let SYSLAST = %nrquote(work.W1MHBF25); 

%let SYS_SQL_IP_SPEEDO = Y;
%let SYS_SQL_MAPPUTTO = sas_put;
%let SYS_SQLREDUCEPUT = DBMS;
%global etls_sql_pushDown;
%let etls_sql_pushDown = -1;
option DBIDIRECTEXEC;

%global etls_tableExist;
%global etls_numIndex;
%global etls_lastTable;
%let etls_tableExist = -1; 
%let etls_numIndex = -1; 
%let etls_lastTable = &SYSLAST; 

/*---- Define load data macro  ----*/ 

/* --------------------------------------------------------------
   Load Technique Selection: Replace - EntireTable
   Constraint and index action selections: 'INIT','ASIS','ASIS','ASIS'
   Additional options selections... 
      Set unmapped to missing on updates: false 
   -------------------------------------------------------------- */
%macro etls_loader;

   %let etls_tableOptions = ;
   
   /*---- Map the columns  ----*/ 
   proc datasets lib = work nolist nowarn memtype = (data view);
      delete WIROFOH;
   quit;
   
   data _null_;
      put "NOTE: The following column(s) do not have a column mapping, so the"
           " value(s) will be set to missing: AUTO_DEBIT_ACCOUNT_TYPE_CD,"
           " ACCOUNT_REGISTRATION_TYPE_CD, CLOSE_REASON_CD,    ACCOUNT_TAX_ID,"
           " EXPECTED_LOSS_PCT, INDIVIDUAL_ORGANIZATION_CD, SOURCE_CD,   "
           " OPENING_CHANNEL_CD, PREFERRED_CHANNEL_CD, PRIMARY_PHONE_NO,   "
           " PRIMARY_PHONE_TYPE_CD, SECONDARY_PHONE_NO, SECONDARY_PHONE_TYPE_CD,"
           "    MAILABLE_FLG, TELEPHONABLE_FLG, EMAIL_FLG, SMS_FLG,"
           " DO_NOT_CONTACT_FLG,    EMPLOYEE_RK, CURRENCY_BASED_ACCOUNT_FLG,"
           " FEE_BASED_FLG, ANNUAL_FEES_AMT,    MONTHLY_FEES_AMT, CAMPAIGN_CD,"
           " COMMUNICATION_CD, REGISTERED_ONLINE_DT,    FIRST_LOGIN_DT,"
           " ONLINE_BILL_PAYMENT_FLG, ID_VERIFICATION_TYPE_CD,   "
           " PREVIOUS_ACCOUNT_ID, OPEN_BRANCH_FINANCIAL_UNIT_ID,   "
           " FINANCIAL_APPLICATION_ID, CREDIT_FACILITY_ID,"
           " FUTURE_MARGIN_INCOME_AMT,    IN_DEFAULT_FLG, FINANCIAL_BOOK_ID,"
           " IRRECOVERABLE_FLG,    OWNED_BY_INTERNAL_ORG_ID,"
           " PREVIOUS_BANK_EXTERNAL_ORG_ID, NETTING_SET_ID,    REVOLVING_FLG,"
           " SOURCE_CHANNEL_CD, GRACE_PERIOD_DAYS_CNT,    REMARGINING_DAYS_CNT,"
           " FINANCIAL_CALENDAR_ID, PORTFOLIO_ID,    SECURITIZATION_POOL_ID,"
           " RECEIVABLES_POOL_ID, ACCOUNT_USAGE_TYPE_CD,    RISK_ALARM_FLG,"
           " LOW_PROFITABILITY_FLG, ACCOUNT_LIFECYCLE_STG_CD,   "
           " ATTRITION_ALARM_FLG, BALANCE_FROZEN_FLG, BALANCE_FROZEN_DT,   "
           " ACCOUNT_BLOCK_REASON_CD, TAXATION_STATE_CD,"
           " EFFECTIVE_MATURITY_YEAR_NO,    GL_ACCOUNT_ID,"
           " FROM_OTHER_INSTITUTION_FLG, ACCOUNT_RENEWAL_CNT,   "
           " BALANCE_TRANSFER_DT, BALANCE_TRANSFER_AMT, BALANCE_TRANSFER_CNT,   "
           " BASE_LONG_TERM_APR_RT, BROKER_FLG, MULT_RATE_FLG,"
           " AUTO_DEBIT_ACCOUNT_NO,    WORST_STATUS_LAST_12_MTH_CD,"
           " WORST_STATUS_LAST_12_MTH_DT,    BALANCE_TRNSF_OTHER_ACCT_CNT,"
           " EFFECTIVE_FROM_DTTM, EFFECTIVE_TO_DTTM,    COUNTERPARTY_ID,"
           " INSURED_BY_COUNTERPARTY_ID, STATEMENT_FREQUENCY_CD,   "
           " SECURITY_DEPOSIT_AMT, SECURITY_DEPOSIT_REFUND_AMT,"
           " FIRST_PAYMENT_DT,    LAST_PAYMENT_DT, FIRST_RESET_DT,"
           " LAST_RESET_DT, RESETS_PER_ANNUM_NO,    PRINCIPAL_PAYMENT_TYPE_CD,"
           " PRINCIPAL_PAYMENT_AMT, RATE_POLICY_ID, SPREAD_RT,   "
           " DISCOUNT_SPREAD_RT, INITIAL_CONTRACT_RT,"
           " FIXED_MONTHLY_PREPAYMENT_RT,    CAPITAL_ALLOCATION_ID,"
           " CAPITAL_COST_ID, SEGMENT_ID,    NEAR_BRANCH_FINANCIAL_UNIT_ID,"
           " STATEMENT_OPT_FLG, VALUE_SCALING_FACTOR_RT,   "
           " INTERNAL_REPORTING_CATEGORY_CD, CONVEXITY_ADJUSTMENT_FLG,   "
           " ARREARS_PAYMENT_CD, QUANTO_FEATURE_ID, CASH_INTENSIVE_BUSINESS_FLG,"
           "    LETTER_OF_CREDIT_ONFILE_FLG, TRADE_FINANCE_FLG,"
           " ANNUITY_PAYMENT_TYPE_CD,    INTEREST_PAYMENT_TIME_FREQ_CD,"
           " LIQUIDITY_CATEGORY_TYPE_CD,    HOLIDAY_DATE_ROLL_CONV_CD,"
           " WEEKEND_DATE_ROLL_CONV_CD, EXPENSE_ALLOCATION_ID,   "
           " FIRST_INTEREST_PAYMENT_DT, LAST_INTEREST_PAYMENT_DT,"
           " IRB_DUMMY_TYPE_CD";
   run;
   
   %put %str(NOTE: Mapping columns ...);
   proc sql;
      create view work.WIROFOH as
         select
            DRV_ACCOUNT_ID as ACCOUNT_ID,
            VALID_FROM_DTTM,
            VALID_TO_DTTM,
            SOURCE_SYSTEM_CD,
            ACCOUNT_REGISTRATION_NM,
            ALTERNATE_ACCOUNT_NM,
            FINANCIAL_ACCOUNT_TYPE_CD,
            "" as AUTO_DEBIT_ACCOUNT_TYPE_CD length = 3
               format = $3.
               informat = $3.,
            "" as ACCOUNT_REGISTRATION_TYPE_CD length = 3
               format = $3.
               informat = $3.,
            ACCOUNT_STATUS_CD,
            OPEN_DT,
            (case when ACCOUNT_STATUS_CD='AUT' then .
                       when ACCOUNT_STATUS_CD='MAT' then VDAT
                       when ACCOUNT_STATUS_CD='REV' then min(LCD,VDAT)
               end
               
               /*ifn(ACCOUNT_STATUS_CD = 'AUT', ., CLOSE_DT) старый вариант*/) as CLOSE_DT length = 8
               format = DATETIME20.
               informat = DATETIME20.,
            "" as CLOSE_REASON_CD length = 3
               format = $3.
               informat = $3.,
            "" as ACCOUNT_TAX_ID length = 32
               format = $32.
               informat = $32.,
            . as EXPECTED_LOSS_PCT length = 8
               format = 11.4
               informat = 11.4,
            "" as INDIVIDUAL_ORGANIZATION_CD length = 3
               format = $3.
               informat = $3.,
            "" as SOURCE_CD length = 5
               format = $5.
               informat = $5.,
            "" as OPENING_CHANNEL_CD length = 3
               format = $3.
               informat = $3.,
            "" as PREFERRED_CHANNEL_CD length = 3
               format = $3.
               informat = $3.,
            CURRENCY_CD,
            "" as PRIMARY_PHONE_NO length = 20
               format = $20.
               informat = $20.,
            "" as PRIMARY_PHONE_TYPE_CD length = 3
               format = $3.
               informat = $3.,
            "" as SECONDARY_PHONE_NO length = 20
               format = $20.
               informat = $20.,
            "" as SECONDARY_PHONE_TYPE_CD length = 3
               format = $3.
               informat = $3.,
            "" as MAILABLE_FLG length = 1
               format = $1.
               informat = $1.,
            "" as TELEPHONABLE_FLG length = 1
               format = $1.
               informat = $1.,
            "" as EMAIL_FLG length = 1
               format = $1.
               informat = $1.,
            "" as SMS_FLG length = 1
               format = $1.
               informat = $1.,
            "" as DO_NOT_CONTACT_FLG length = 1
               format = $1.
               informat = $1.,
            . as EMPLOYEE_RK length = 8
               format = 11.
               informat = 11.,
            "" as CURRENCY_BASED_ACCOUNT_FLG length = 1
               format = $1.
               informat = $1.,
            "" as FEE_BASED_FLG length = 1
               format = $1.
               informat = $1.,
            . as ANNUAL_FEES_AMT length = 8
               format = 20.5
               informat = 20.5,
            . as MONTHLY_FEES_AMT length = 8
               format = 20.5
               informat = 20.5,
            "" as CAMPAIGN_CD length = 30
               format = $30.
               informat = $30.,
            "" as COMMUNICATION_CD length = 30
               format = $30.
               informat = $30.,
            . as REGISTERED_ONLINE_DT length = 8
               format = DATETIME20.
               informat = DATETIME20.,
            . as FIRST_LOGIN_DT length = 8
               format = DATETIME20.
               informat = DATETIME20.,
            "" as ONLINE_BILL_PAYMENT_FLG length = 1
               format = $1.
               informat = $1.,
            "" as ID_VERIFICATION_TYPE_CD length = 3
               format = $3.
               informat = $3.,
            "" as PREVIOUS_ACCOUNT_ID length = 32
               format = $32.
               informat = $32.,
            "" as OPEN_BRANCH_FINANCIAL_UNIT_ID length = 32
               format = $32.
               informat = $32.,
            MID_FINANCIAL_UNIT_ID_BRCA as PRIM_BRANCH_FINANCIAL_UNIT_ID,
            "" as FINANCIAL_APPLICATION_ID length = 32
               format = $32.
               informat = $32.,
            "" as CREDIT_FACILITY_ID length = 40
               format = $40.
               informat = $40.,
            . as FUTURE_MARGIN_INCOME_AMT length = 8
               format = 20.5
               informat = 20.5,
            "" as IN_DEFAULT_FLG length = 1
               format = $1.
               informat = $1.,
            "" as FINANCIAL_BOOK_ID length = 32
               format = $32.
               informat = $32.,
            "" as IRRECOVERABLE_FLG length = 1
               format = $1.
               informat = $1.,
            "" as OWNED_BY_INTERNAL_ORG_ID length = 32
               format = $32.
               informat = $32.,
            "" as PREVIOUS_BANK_EXTERNAL_ORG_ID length = 32
               format = $32.
               informat = $32.,
            "" as NETTING_SET_ID length = 32
               format = $32.
               informat = $32.,
            "" as REVOLVING_FLG length = 1
               format = $1.
               informat = $1.,
            "" as SOURCE_CHANNEL_CD length = 3
               format = $3.
               informat = $3.,
            . as GRACE_PERIOD_DAYS_CNT length = 8
               format = 7.
               informat = 7.,
            . as REMARGINING_DAYS_CNT length = 8
               format = 7.
               informat = 7.,
            "" as FINANCIAL_CALENDAR_ID length = 32
               format = $32.
               informat = $32.,
            DAY_BASIS_CD,
            "" as PORTFOLIO_ID length = 32
               format = $32.
               informat = $32.,
            "" as SECURITIZATION_POOL_ID length = 32
               format = $32.
               informat = $32.,
            "" as RECEIVABLES_POOL_ID length = 32
               format = $32.
               informat = $32.,
            "" as ACCOUNT_USAGE_TYPE_CD length = 3
               format = $3.
               informat = $3.,
            "" as RISK_ALARM_FLG length = 1
               format = $1.
               informat = $1.,
            "" as LOW_PROFITABILITY_FLG length = 1
               format = $1.
               informat = $1.,
            "" as ACCOUNT_LIFECYCLE_STG_CD length = 3
               format = $3.
               informat = $3.,
            "" as ATTRITION_ALARM_FLG length = 1
               format = $1.
               informat = $1.,
            "" as BALANCE_FROZEN_FLG length = 1
               format = $1.
               informat = $1.,
            . as BALANCE_FROZEN_DT length = 8
               format = DATETIME20.
               informat = DATETIME20.,
            "" as ACCOUNT_BLOCK_REASON_CD length = 3
               format = $3.
               informat = $3.,
            "" as TAXATION_STATE_CD length = 4
               format = $4.
               informat = $4.,
            . as EFFECTIVE_MATURITY_YEAR_NO length = 8
               format = 9.3
               informat = 9.3,
            "" as GL_ACCOUNT_ID length = 32
               format = $32.
               informat = $32.,
            "" as FROM_OTHER_INSTITUTION_FLG length = 1
               format = $1.
               informat = $1.,
            . as ACCOUNT_RENEWAL_CNT length = 8
               format = 7.
               informat = 7.,
            . as BALANCE_TRANSFER_DT length = 8
               format = DATETIME20.
               informat = DATETIME20.,
            . as BALANCE_TRANSFER_AMT length = 8
               format = 20.5
               informat = 20.5,
            . as BALANCE_TRANSFER_CNT length = 8
               format = 7.
               informat = 7.,
            . as BASE_LONG_TERM_APR_RT length = 8
               format = 11.4
               informat = 11.4,
            "" as BROKER_FLG length = 1
               format = $1.
               informat = $1.,
            "" as MULT_RATE_FLG length = 1
               format = $1.
               informat = $1.,
            "" as AUTO_DEBIT_ACCOUNT_NO length = 32
               format = $32.
               informat = $32.,
            "" as WORST_STATUS_LAST_12_MTH_CD length = 3
               format = $3.
               informat = $3.,
            . as WORST_STATUS_LAST_12_MTH_DT length = 8
               format = DATETIME20.
               informat = DATETIME20.,
            . as BALANCE_TRNSF_OTHER_ACCT_CNT length = 8
               format = 7.
               informat = 7.,
            . as EFFECTIVE_FROM_DTTM length = 8
               format = DATETIME20.
               informat = DATETIME20.,
            . as EFFECTIVE_TO_DTTM length = 8
               format = DATETIME20.
               informat = DATETIME20.,
            "" as COUNTERPARTY_ID length = 32
               format = $32.
               informat = $32.,
            "" as INSURED_BY_COUNTERPARTY_ID length = 32
               format = $32.
               informat = $32.,
            "" as STATEMENT_FREQUENCY_CD length = 3
               format = $3.
               informat = $3.,
            . as SECURITY_DEPOSIT_AMT length = 8
               format = 20.5
               informat = 20.5,
            . as SECURITY_DEPOSIT_REFUND_AMT length = 8
               format = 20.5
               informat = 20.5,
            . as FIRST_PAYMENT_DT length = 8
               format = DATETIME20.
               informat = DATETIME20.,
            . as LAST_PAYMENT_DT length = 8
               format = DATETIME20.
               informat = DATETIME20.,
            . as FIRST_RESET_DT length = 8
               format = DATETIME20.
               informat = DATETIME20.,
            . as LAST_RESET_DT length = 8
               format = DATETIME20.
               informat = DATETIME20.,
            . as RESETS_PER_ANNUM_NO length = 8
               format = 6.
               informat = 6.,
            "" as PRINCIPAL_PAYMENT_TYPE_CD length = 3
               format = $3.
               informat = $3.,
            . as PRINCIPAL_PAYMENT_AMT length = 8
               format = 20.5
               informat = 20.5,
            "" as RATE_POLICY_ID length = 32
               format = $32.
               informat = $32.,
            . as SPREAD_RT length = 8
               format = 11.4
               informat = 11.4,
            . as DISCOUNT_SPREAD_RT length = 8
               format = 11.4
               informat = 11.4,
            . as INITIAL_CONTRACT_RT length = 8
               format = 11.4
               informat = 11.4,
            . as FIXED_MONTHLY_PREPAYMENT_RT length = 8
               format = 11.4
               informat = 11.4,
            "" as CAPITAL_ALLOCATION_ID length = 32
               format = $32.
               informat = $32.,
            "" as CAPITAL_COST_ID length = 32
               format = $32.
               informat = $32.,
            "" as SEGMENT_ID length = 32
               format = $32.
               informat = $32.,
            "" as NEAR_BRANCH_FINANCIAL_UNIT_ID length = 32
               format = $32.
               informat = $32.,
            "" as STATEMENT_OPT_FLG length = 1
               format = $1.
               informat = $1.,
            . as VALUE_SCALING_FACTOR_RT length = 8
               format = 11.4
               informat = 11.4,
            "" as INTERNAL_REPORTING_CATEGORY_CD length = 3
               format = $3.
               informat = $3.,
            "" as CONVEXITY_ADJUSTMENT_FLG length = 1
               format = $1.
               informat = $1.,
            "" as ARREARS_PAYMENT_CD length = 3
               format = $3.
               informat = $3.,
            "" as QUANTO_FEATURE_ID length = 32
               format = $32.
               informat = $32.,
            "" as CASH_INTENSIVE_BUSINESS_FLG length = 1
               format = $1.
               informat = $1.,
            "" as LETTER_OF_CREDIT_ONFILE_FLG length = 1
               format = $1.
               informat = $1.,
            "" as TRADE_FINANCE_FLG length = 1
               format = $1.
               informat = $1.,
            "" as ANNUITY_PAYMENT_TYPE_CD length = 3
               format = $3.
               informat = $3.,
            INTEREST_PAYMENT_TYPE_CD,
            "" as INTEREST_PAYMENT_TIME_FREQ_CD length = 3
               format = $3.
               informat = $3.,
            "" as LIQUIDITY_CATEGORY_TYPE_CD length = 3
               format = $3.
               informat = $3.,
            "" as HOLIDAY_DATE_ROLL_CONV_CD length = 3
               format = $3.
               informat = $3.,
            "" as WEEKEND_DATE_ROLL_CONV_CD length = 3
               format = $3.
               informat = $3.,
            "" as EXPENSE_ALLOCATION_ID length = 32
               format = $32.
               informat = $32.,
            . as FIRST_INTEREST_PAYMENT_DT length = 8
               format = DATETIME20.
               informat = DATETIME20.,
            . as LAST_INTEREST_PAYMENT_DT length = 8
               format = DATETIME20.
               informat = DATETIME20.,
            "" as IRB_DUMMY_TYPE_CD length = 3
               format = $3.
               informat = $3.,
            IRB_SRC_ACCOUNT_ID,
            BRCA,
            FINANCIAL_INSTRUMENT_TYPE_CD
      from &etls_lastTable
      ;
   quit;
   
   %let SYSLAST = work.WIROFOH;
   
   %let etls_lastTable = &SYSLAST; 
   %let etls_tableOptions = ; 
   
   /* Determine if the target table exists  */ 
   %let etls_tableExist = %eval(%sysfunc(exist(work_ia.FINANCIAL_ACCOUNT_NDF_BK, DATA)) or 
         %sysfunc(exist(work_ia.FINANCIAL_ACCOUNT_NDF_BK, VIEW))); 
   
   %if &etls_tableExist %then 
   %do;/* table exists  */ 
      %let etls_hasPreExistingConstraint=0; 
      
      proc datasets lib = work nolist nowarn memtype = (data view);
         delete etls_commands etls_commands_F;
      quit;
      
      %let etls_otherTablesReferToThisTable=0;
      
      %macro etls_CIContents(table=,workTableOut=,inDSOptions=);
         %put NOTE: Building table listing Constraints and Indexes for: &table;
         proc datasets lib=work nolist; delete &workTableOut; quit;
         proc contents data=&table&inDSOptions out2=&workTableOut noprint; run;
         
         data &workTableOut;
            length name $60 type $20 icown idxUnique idxNoMiss $3 recreate $600;
            set &workTableOut;
            type=upcase(type);
            if type eq 'REFERENTIAL' then
            do;
               put "WARNING%QUOTE(:) Target table is referenced by constraints in"
                    " another table: " ref;
               call symput('etls_otherTablesReferToThisTable','1');
               delete;
            end;
            if type='INDEX' and ICOwn eq 'YES' then delete;
         run;
         %rcSet(&syserr); 
         
      %mend etls_CIContents;
      
      %etls_CIContents(table=work_ia.FINANCIAL_ACCOUNT_NDF_BK, workTableOut=etls_commands, inDSOptions=);
      
      %if &etls_otherTablesReferToThisTable %then 
         %put WARNING%QUOTE(:) Replacing entire table will fail. Consider an alternate load technique or revising constraints.; 
      %else 
      %do; /* okay - remove foreign keys  */ 
      
         data etls_commands_F; 
            set etls_commands; 
            if upcase(type)="FOREIGN KEY" then 
            do; 
               command='ic delete '||trim(name)||';';
               output etls_commands_F; 
            end; 
         run; 
         
         %put %str(NOTE: Removing foreign keys before dropping table...);
         data _null_;
            set etls_commands_F;
            %rcSet(&syserr); 
            
      %end; /* okay - remove foreign keys  */ 
      
      proc datasets lib = work nolist nowarn memtype = (data view);
         delete etls_commands etls_commands_F;
      quit;
      
      /*---- Drop a table  ----*/ 
      %put %str(NOTE: Dropping table ...);
      proc datasets lib = work_ia nolist nowarn memtype = (data view);
         delete FINANCIAL_ACCOUNT_NDF_BK;
      quit;
      
      %rcSet(&syserr); 
      
      %let etls_tableExist = 0;
      
   %end; /* table exists  */ 
   
   /*---- Create a new table  ----*/ 
   %if (&etls_tableExist eq 0) %then 
   %do;  /* if table does not exist  */ 
   
      %put %str(NOTE: Creating table ...);
      
      data work_ia.FINANCIAL_ACCOUNT_NDF_BK;
         attrib ACCOUNT_ID length = $32
            format = $32.
            informat = $32.
            label = 'ACCOUNT_ID'; 
         attrib VALID_FROM_DTTM length = 8
            format = DATETIME20.
            informat = DATETIME20.
            label = 'VALID_FROM_DTTM'; 
         attrib VALID_TO_DTTM length = 8
            format = DATETIME20.
            informat = DATETIME20.
            label = 'VALID_TO_DTTM'; 
         attrib SOURCE_SYSTEM_CD length = $3
            format = $3.
            informat = $3.
            label = 'SOURCE_SYSTEM_CD'; 
         attrib ACCOUNT_REGISTRATION_NM length = $100
            format = $100.
            informat = $100.
            label = 'ACCOUNT_REGISTRATION_NM'; 
         attrib ALTERNATE_ACCOUNT_NM length = $40
            format = $40.
            informat = $40.
            label = 'ALTERNATE_ACCOUNT_NM'; 
         attrib FINANCIAL_ACCOUNT_TYPE_CD length = $3
            format = $3.
            informat = $3.
            label = 'FINANCIAL_ACCOUNT_TYPE_CD'; 
         attrib AUTO_DEBIT_ACCOUNT_TYPE_CD length = $3
            format = $3.
            informat = $3.
            label = 'AUTO_DEBIT_ACCOUNT_TYPE_CD'; 
         attrib ACCOUNT_REGISTRATION_TYPE_CD length = $3
            format = $3.
            informat = $3.
            label = 'ACCOUNT_REGISTRATION_TYPE_CD'; 
         attrib ACCOUNT_STATUS_CD length = $3
            format = $3.
            informat = $3.
            label = 'ACCOUNT_STATUS_CD'; 
         attrib OPEN_DT length = 8
            format = DATETIME20.
            informat = DATETIME20.
            label = 'OPEN_DT'; 
         attrib CLOSE_DT length = 8
            format = DATETIME20.
            informat = DATETIME20.
            label = 'CLOSE_DT'; 
         attrib CLOSE_REASON_CD length = $3
            format = $3.
            informat = $3.
            label = 'CLOSE_REASON_CD'; 
         attrib ACCOUNT_TAX_ID length = $32
            format = $32.
            informat = $32.
            label = 'ACCOUNT_TAX_ID'; 
         attrib EXPECTED_LOSS_PCT length = 8
            format = 11.4
            informat = 11.4
            label = 'EXPECTED_LOSS_PCT'; 
         attrib INDIVIDUAL_ORGANIZATION_CD length = $3
            format = $3.
            informat = $3.
            label = 'INDIVIDUAL_ORGANIZATION_CD'; 
         attrib SOURCE_CD length = $5
            format = $5.
            informat = $5.
            label = 'SOURCE_CD'; 
         attrib OPENING_CHANNEL_CD length = $3
            format = $3.
            informat = $3.
            label = 'OPENING_CHANNEL_CD'; 
         attrib PREFERRED_CHANNEL_CD length = $3
            format = $3.
            informat = $3.
            label = 'PREFERRED_CHANNEL_CD'; 
         attrib CURRENCY_CD length = $3
            format = $3.
            informat = $3.
            label = 'CURRENCY_CD'; 
         attrib PRIMARY_PHONE_NO length = $20
            format = $20.
            informat = $20.
            label = 'PRIMARY_PHONE_NO'; 
         attrib PRIMARY_PHONE_TYPE_CD length = $3
            format = $3.
            informat = $3.
            label = 'PRIMARY_PHONE_TYPE_CD'; 
         attrib SECONDARY_PHONE_NO length = $20
            format = $20.
            informat = $20.
            label = 'SECONDARY_PHONE_NO'; 
         attrib SECONDARY_PHONE_TYPE_CD length = $3
            format = $3.
            informat = $3.
            label = 'SECONDARY_PHONE_TYPE_CD'; 
         attrib MAILABLE_FLG length = $1
            format = $1.
            informat = $1.
            label = 'MAILABLE_FLG'; 
         attrib TELEPHONABLE_FLG length = $1
            format = $1.
            informat = $1.
            label = 'TELEPHONABLE_FLG'; 
         attrib EMAIL_FLG length = $1
            format = $1.
            informat = $1.
            label = 'EMAIL_FLG'; 
         attrib SMS_FLG length = $1
            format = $1.
            informat = $1.
            label = 'SMS_FLG'; 
         attrib DO_NOT_CONTACT_FLG length = $1
            format = $1.
            informat = $1.
            label = 'DO_NOT_CONTACT_FLG'; 
         attrib EMPLOYEE_RK length = 8
            format = 11.
            informat = 11.
            label = 'EMPLOYEE_RK'; 
         attrib CURRENCY_BASED_ACCOUNT_FLG length = $1
            format = $1.
            informat = $1.
            label = 'CURRENCY_BASED_ACCOUNT_FLG'; 
         attrib FEE_BASED_FLG length = $1
            format = $1.
            informat = $1.
            label = 'FEE_BASED_FLG'; 
         attrib ANNUAL_FEES_AMT length = 8
            format = 20.5
            informat = 20.5
            label = 'ANNUAL_FEES_AMT'; 
         attrib MONTHLY_FEES_AMT length = 8
            format = 20.5
            informat = 20.5
            label = 'MONTHLY_FEES_AMT'; 
         attrib CAMPAIGN_CD length = $30
            format = $30.
            informat = $30.
            label = 'CAMPAIGN_CD'; 
         attrib COMMUNICATION_CD length = $30
            format = $30.
            informat = $30.
            label = 'COMMUNICATION_CD'; 
         attrib REGISTERED_ONLINE_DT length = 8
            format = DATETIME20.
            informat = DATETIME20.
            label = 'REGISTERED_ONLINE_DT'; 
         attrib FIRST_LOGIN_DT length = 8
            format = DATETIME20.
            informat = DATETIME20.
            label = 'FIRST_LOGIN_DT'; 
         attrib ONLINE_BILL_PAYMENT_FLG length = $1
            format = $1.
            informat = $1.
            label = 'ONLINE_BILL_PAYMENT_FLG'; 
         attrib ID_VERIFICATION_TYPE_CD length = $3
            format = $3.
            informat = $3.
            label = 'ID_VERIFICATION_TYPE_CD'; 
         attrib PREVIOUS_ACCOUNT_ID length = $32
            format = $32.
            informat = $32.
            label = 'PREVIOUS_ACCOUNT_ID'; 
         attrib OPEN_BRANCH_FINANCIAL_UNIT_ID length = $32
            format = $32.
            informat = $32.
            label = 'OPEN_BRANCH_FINANCIAL_UNIT_ID'; 
         attrib PRIM_BRANCH_FINANCIAL_UNIT_ID length = $32
            format = $32.
            informat = $32.
            label = 'PRIM_BRANCH_FINANCIAL_UNIT_ID'; 
         attrib FINANCIAL_APPLICATION_ID length = $32
            format = $32.
            informat = $32.
            label = 'FINANCIAL_APPLICATION_ID'; 
         attrib CREDIT_FACILITY_ID length = $40
            format = $40.
            informat = $40.
            label = 'CREDIT_FACILITY_ID'; 
         attrib FUTURE_MARGIN_INCOME_AMT length = 8
            format = 20.5
            informat = 20.5
            label = 'FUTURE_MARGIN_INCOME_AMT'; 
         attrib IN_DEFAULT_FLG length = $1
            format = $1.
            informat = $1.
            label = 'IN_DEFAULT_FLG'; 
         attrib FINANCIAL_BOOK_ID length = $32
            format = $32.
            informat = $32.
            label = 'FINANCIAL_BOOK_ID'; 
         attrib IRRECOVERABLE_FLG length = $1
            format = $1.
            informat = $1.
            label = 'IRRECOVERABLE_FLG'; 
         attrib OWNED_BY_INTERNAL_ORG_ID length = $32
            format = $32.
            informat = $32.
            label = 'OWNED_BY_INTERNAL_ORG_ID'; 
         attrib PREVIOUS_BANK_EXTERNAL_ORG_ID length = $32
            format = $32.
            informat = $32.
            label = 'PREVIOUS_BANK_EXTERNAL_ORG_ID'; 
         attrib NETTING_SET_ID length = $32
            format = $32.
            informat = $32.
            label = 'NETTING_SET_ID'; 
         attrib REVOLVING_FLG length = $1
            format = $1.
            informat = $1.
            label = 'REVOLVING_FLG'; 
         attrib SOURCE_CHANNEL_CD length = $3
            format = $3.
            informat = $3.
            label = 'SOURCE_CHANNEL_CD'; 
         attrib GRACE_PERIOD_DAYS_CNT length = 8
            format = 7.
            informat = 7.
            label = 'GRACE_PERIOD_DAYS_CNT'; 
         attrib REMARGINING_DAYS_CNT length = 8
            format = 7.
            informat = 7.
            label = 'REMARGINING_DAYS_CNT'; 
         attrib FINANCIAL_CALENDAR_ID length = $32
            format = $32.
            informat = $32.
            label = 'FINANCIAL_CALENDAR_ID'; 
         attrib DAY_BASIS_CD length = $10
            format = $10.
            informat = $10.
            label = 'DAY_BASIS_CD'; 
         attrib PORTFOLIO_ID length = $32
            format = $32.
            informat = $32.
            label = 'PORTFOLIO_ID'; 
         attrib SECURITIZATION_POOL_ID length = $32
            format = $32.
            informat = $32.
            label = 'SECURITIZATION_POOL_ID'; 
         attrib RECEIVABLES_POOL_ID length = $32
            format = $32.
            informat = $32.
            label = 'RECEIVABLES_POOL_ID'; 
         attrib ACCOUNT_USAGE_TYPE_CD length = $3
            format = $3.
            informat = $3.
            label = 'ACCOUNT_USAGE_TYPE_CD'; 
         attrib RISK_ALARM_FLG length = $1
            format = $1.
            informat = $1.
            label = 'RISK_ALARM_FLG'; 
         attrib LOW_PROFITABILITY_FLG length = $1
            format = $1.
            informat = $1.
            label = 'LOW_PROFITABILITY_FLG'; 
         attrib ACCOUNT_LIFECYCLE_STG_CD length = $3
            format = $3.
            informat = $3.
            label = 'ACCOUNT_LIFECYCLE_STG_CD'; 
         attrib ATTRITION_ALARM_FLG length = $1
            format = $1.
            informat = $1.
            label = 'ATTRITION_ALARM_FLG'; 
         attrib BALANCE_FROZEN_FLG length = $1
            format = $1.
            informat = $1.
            label = 'BALANCE_FROZEN_FLG'; 
         attrib BALANCE_FROZEN_DT length = 8
            format = DATETIME20.
            informat = DATETIME20.
            label = 'BALANCE_FROZEN_DT'; 
         attrib ACCOUNT_BLOCK_REASON_CD length = $3
            format = $3.
            informat = $3.
            label = 'ACCOUNT_BLOCK_REASON_CD'; 
         attrib TAXATION_STATE_CD length = $4
            format = $4.
            informat = $4.
            label = 'TAXATION_STATE_CD'; 
         attrib EFFECTIVE_MATURITY_YEAR_NO length = 8
            format = 9.3
            informat = 9.3
            label = 'EFFECTIVE_MATURITY_YEAR_NO'; 
         attrib GL_ACCOUNT_ID length = $32
            format = $32.
            informat = $32.
            label = 'GL_ACCOUNT_ID'; 
         attrib FROM_OTHER_INSTITUTION_FLG length = $1
            format = $1.
            informat = $1.
            label = 'FROM_OTHER_INSTITUTION_FLG'; 
         attrib ACCOUNT_RENEWAL_CNT length = 8
            format = 7.
            informat = 7.
            label = 'ACCOUNT_RENEWAL_CNT'; 
         attrib BALANCE_TRANSFER_DT length = 8
            format = DATETIME20.
            informat = DATETIME20.
            label = 'BALANCE_TRANSFER_DT'; 
         attrib BALANCE_TRANSFER_AMT length = 8
            format = 20.5
            informat = 20.5
            label = 'BALANCE_TRANSFER_AMT'; 
         attrib BALANCE_TRANSFER_CNT length = 8
            format = 7.
            informat = 7.
            label = 'BALANCE_TRANSFER_CNT'; 
         attrib BASE_LONG_TERM_APR_RT length = 8
            format = 11.4
            informat = 11.4
            label = 'BASE_LONG_TERM_APR_RT'; 
         attrib BROKER_FLG length = $1
            format = $1.
            informat = $1.
            label = 'BROKER_FLG'; 
         attrib MULT_RATE_FLG length = $1
            format = $1.
            informat = $1.
            label = 'MULT_RATE_FLG'; 
         attrib AUTO_DEBIT_ACCOUNT_NO length = $32
            format = $32.
            informat = $32.
            label = 'AUTO_DEBIT_ACCOUNT_NO'; 
         attrib WORST_STATUS_LAST_12_MTH_CD length = $3
            format = $3.
            informat = $3.
            label = 'WORST_STATUS_LAST_12_MTH_CD'; 
         attrib WORST_STATUS_LAST_12_MTH_DT length = 8
            format = DATETIME20.
            informat = DATETIME20.
            label = 'WORST_STATUS_LAST_12_MTH_DT'; 
         attrib BALANCE_TRNSF_OTHER_ACCT_CNT length = 8
            format = 7.
            informat = 7.
            label = 'BALANCE_TRNSF_OTHER_ACCT_CNT'; 
         attrib EFFECTIVE_FROM_DTTM length = 8
            format = DATETIME20.
            informat = DATETIME20.
            label = 'EFFECTIVE_FROM_DTTM'; 
         attrib EFFECTIVE_TO_DTTM length = 8
            format = DATETIME20.
            informat = DATETIME20.
            label = 'EFFECTIVE_TO_DTTM'; 
         attrib COUNTERPARTY_ID length = $32
            format = $32.
            informat = $32.
            label = 'COUNTERPARTY_ID'; 
         attrib INSURED_BY_COUNTERPARTY_ID length = $32
            format = $32.
            informat = $32.
            label = 'INSURED_BY_COUNTERPARTY_ID'; 
         attrib STATEMENT_FREQUENCY_CD length = $3
            format = $3.
            informat = $3.
            label = 'STATEMENT_FREQUENCY_CD'; 
         attrib SECURITY_DEPOSIT_AMT length = 8
            format = 20.5
            informat = 20.5
            label = 'SECURITY_DEPOSIT_AMT'; 
         attrib SECURITY_DEPOSIT_REFUND_AMT length = 8
            format = 20.5
            informat = 20.5
            label = 'SECURITY_DEPOSIT_REFUND_AMT'; 
         attrib FIRST_PAYMENT_DT length = 8
            format = DATETIME20.
            informat = DATETIME20.
            label = 'FIRST_PAYMENT_DT'; 
         attrib LAST_PAYMENT_DT length = 8
            format = DATETIME20.
            informat = DATETIME20.
            label = 'LAST_PAYMENT_DT'; 
         attrib FIRST_RESET_DT length = 8
            format = DATETIME20.
            informat = DATETIME20.
            label = 'FIRST_RESET_DT'; 
         attrib LAST_RESET_DT length = 8
            format = DATETIME20.
            informat = DATETIME20.
            label = 'LAST_RESET_DT'; 
         attrib RESETS_PER_ANNUM_NO length = 8
            format = 6.
            informat = 6.
            label = 'RESETS_PER_ANNUM_NO'; 
         attrib PRINCIPAL_PAYMENT_TYPE_CD length = $3
            format = $3.
            informat = $3.
            label = 'PRINCIPAL_PAYMENT_TYPE_CD'; 
         attrib PRINCIPAL_PAYMENT_AMT length = 8
            format = 20.5
            informat = 20.5
            label = 'PRINCIPAL_PAYMENT_AMT'; 
         attrib RATE_POLICY_ID length = $32
            format = $32.
            informat = $32.
            label = 'RATE_POLICY_ID'; 
         attrib SPREAD_RT length = 8
            format = 11.4
            informat = 11.4
            label = 'SPREAD_RT'; 
         attrib DISCOUNT_SPREAD_RT length = 8
            format = 11.4
            informat = 11.4
            label = 'DISCOUNT_SPREAD_RT'; 
         attrib INITIAL_CONTRACT_RT length = 8
            format = 11.4
            informat = 11.4
            label = 'INITIAL_CONTRACT_RT'; 
         attrib FIXED_MONTHLY_PREPAYMENT_RT length = 8
            format = 11.4
            informat = 11.4
            label = 'FIXED_MONTHLY_PREPAYMENT_RT'; 
         attrib CAPITAL_ALLOCATION_ID length = $32
            format = $32.
            informat = $32.
            label = 'CAPITAL_ALLOCATION_ID'; 
         attrib CAPITAL_COST_ID length = $32
            format = $32.
            informat = $32.
            label = 'CAPITAL_COST_ID'; 
         attrib SEGMENT_ID length = $32
            format = $32.
            informat = $32.
            label = 'SEGMENT_ID'; 
         attrib NEAR_BRANCH_FINANCIAL_UNIT_ID length = $32
            format = $32.
            informat = $32.
            label = 'NEAR_BRANCH_FINANCIAL_UNIT_ID'; 
         attrib STATEMENT_OPT_FLG length = $1
            format = $1.
            informat = $1.
            label = 'STATEMENT_OPT_FLG'; 
         attrib VALUE_SCALING_FACTOR_RT length = 8
            format = 11.4
            informat = 11.4
            label = 'VALUE_SCALING_FACTOR_RT'; 
         attrib INTERNAL_REPORTING_CATEGORY_CD length = $3
            format = $3.
            informat = $3.
            label = 'INTERNAL_REPORTING_CATEGORY_CD'; 
         attrib CONVEXITY_ADJUSTMENT_FLG length = $1
            format = $1.
            informat = $1.
            label = 'CONVEXITY_ADJUSTMENT_FLG'; 
         attrib ARREARS_PAYMENT_CD length = $3
            format = $3.
            informat = $3.
            label = 'ARREARS_PAYMENT_CD'; 
         attrib QUANTO_FEATURE_ID length = $32
            format = $32.
            informat = $32.
            label = 'QUANTO_FEATURE_ID'; 
         attrib CASH_INTENSIVE_BUSINESS_FLG length = $1
            format = $1.
            informat = $1.
            label = 'CASH_INTENSIVE_BUSINESS_FLG'; 
         attrib LETTER_OF_CREDIT_ONFILE_FLG length = $1
            format = $1.
            informat = $1.
            label = 'LETTER_OF_CREDIT_ONFILE_FLG'; 
         attrib TRADE_FINANCE_FLG length = $1
            format = $1.
            informat = $1.
            label = 'TRADE_FINANCE_FLG'; 
         attrib ANNUITY_PAYMENT_TYPE_CD length = $3
            format = $3.
            informat = $3.
            label = 'ANNUITY_PAYMENT_TYPE_CD'; 
         attrib INTEREST_PAYMENT_TYPE_CD length = $3
            format = $3.
            informat = $3.
            label = 'INTEREST_PAYMENT_TYPE_CD'; 
         attrib INTEREST_PAYMENT_TIME_FREQ_CD length = $3
            format = $3.
            informat = $3.
            label = 'INTEREST_PAYMENT_TIME_FREQ_CD'; 
         attrib LIQUIDITY_CATEGORY_TYPE_CD length = $3
            format = $3.
            informat = $3.
            label = 'LIQUIDITY_CATEGORY_TYPE_CD'; 
         attrib HOLIDAY_DATE_ROLL_CONV_CD length = $3
            format = $3.
            informat = $3.
            label = 'HOLIDAY_DATE_ROLL_CONV_CD'; 
         attrib WEEKEND_DATE_ROLL_CONV_CD length = $3
            format = $3.
            informat = $3.
            label = 'WEEKEND_DATE_ROLL_CONV_CD'; 
         attrib EXPENSE_ALLOCATION_ID length = $32
            format = $32.
            informat = $32.
            label = 'EXPENSE_ALLOCATION_ID'; 
         attrib FIRST_INTEREST_PAYMENT_DT length = 8
            format = DATETIME20.
            informat = DATETIME20.
            label = 'FIRST_INTEREST_PAYMENT_DT'; 
         attrib LAST_INTEREST_PAYMENT_DT length = 8
            format = DATETIME20.
            informat = DATETIME20.
            label = 'LAST_INTEREST_PAYMENT_DT'; 
         attrib IRB_DUMMY_TYPE_CD length = $3
            format = $3.
            informat = $3.
            label = 'IRB_DUMMY_TYPE_CD'; 
         attrib IRB_SRC_ACCOUNT_ID length = $32
            format = $32.
            informat = $32.
            label = 'IRB_SRC_ACCOUNT_ID'; 
         attrib BRCA length = $3
            format = $3.
            informat = $3.
            label = 'BRCA'; 
         attrib FINANCIAL_INSTRUMENT_TYPE_CD length = $3
            format = $3.
            informat = $3.
            label = 'FINANCIAL_INSTRUMENT_TYPE_CD'; 
         call missing(of _all_);
         stop;
      run;
      
      %rcSet(&syserr); 
      
      /*---- Create the integrity constraints for a table  ----*/ 
      %put %str(NOTE: Creating integrity constraints ...);
      proc datasets library=work_ia nolist;
         modify FINANCIAL_ACCOUNT_NDF_BK;
            ic create not null (ACCOUNT_ID);
            ic create not null (SOURCE_SYSTEM_CD);
            ic create not null (FINANCIAL_ACCOUNT_TYPE_CD);
            ic create not null (ACCOUNT_STATUS_CD);
            ic create not null (CURRENCY_CD);
            ic create not null (PRIM_BRANCH_FINANCIAL_UNIT_ID);
            ic create not null (BRCA);
            ic create Index1 = primary key (ACCOUNT_ID VALID_FROM_DTTM);
      quit;
      
      %rcSet(&syserr); 
      
   %end;  /* if table does not exist  */ 
   
   /*---- Append  ----*/ 
   %put %str(NOTE: Appending data ...);
   
   proc append base = work_ia.FINANCIAL_ACCOUNT_NDF_BK 
      data = &etls_lastTable (&etls_tableOptions)  force ; 
    run; 
   
   %rcSet(&syserr); 
   
   proc datasets lib = work nolist nowarn memtype = (data view);
      delete WIROFOH;
   quit;
   
%mend etls_loader;
%etls_loader;

%let etls_recCheckExist = 0; 
%let etls_recnt = 0; 
%macro etls_recordCheck; 
   %let etls_recCheckExist = %eval(%sysfunc(exist(work_ia.FINANCIAL_ACCOUNT_NDF_BK, DATA)) or 
         %sysfunc(exist(work_ia.FINANCIAL_ACCOUNT_NDF_BK, VIEW))); 
   
   %if (&etls_recCheckExist) %then
   %do;
      %local etls_syntaxcheck; 
      %let etls_syntaxcheck = %sysfunc(getoption(syntaxcheck)); 
      /* Turn off syntaxcheck option to perform following steps  */ 
      options nosyntaxcheck;
      
      proc contents data = work_ia.FINANCIAL_ACCOUNT_NDF_BK out = work.etls_contents(keep = nobs) noprint; 
      run; 
      
      data _null_; 
         set work.etls_contents (obs = 1); 
         call symput("etls_recnt", left(put(nobs,32.))); 
      run;
      
      proc datasets lib = work nolist nowarn memtype = (data view);
         delete etls_contents;
      quit;
      
      /* Reset syntaxcheck option to previous setting  */ 
      options &etls_syntaxcheck; 
   %end;
%mend etls_recordCheck;
%etls_recordCheck;



/**  Step end Table Loader **/

/*==========================================================================* 
 * Step:            Вяжем актуальные записи со сделками   A5Y50FNE.AQ000887 * 
 * Transform:       Join                                                    * 
 * Description:                                                             * 
 *                                                                          * 
 * Source Tables:   Генерация BKtpOut - work.W1MHBF25     A5Y50FNE.AO0004NF * 
 *                  actual recs - work.W1BAZY4C           A5Y50FNE.AO0004NC * 
 * Target Table:    SQL Join - work.WUO3DHR               A5Y50FNE.AO0004NG * 
 *==========================================================================*/ 

%let transformID = %quote(A5Y50FNE.AQ000887);
%let trans_rc = 0;
%let etls_stepStartTime = %sysfunc(datetime(), datetime20.); 

%let etls_recCheckExist = 0; 
%let etls_recnt = 0; 
%macro etls_recordCheck; 
   %let etls_recCheckExist = %eval(%sysfunc(exist(work.W1MHBF25, DATA)) or 
         %sysfunc(exist(work.W1MHBF25, VIEW))); 
   
   %if (&etls_recCheckExist) %then
   %do;
      %local etls_syntaxcheck; 
      %let etls_syntaxcheck = %sysfunc(getoption(syntaxcheck)); 
      /* Turn off syntaxcheck option to perform following steps  */ 
      options nosyntaxcheck;
      
      proc contents data = work.W1MHBF25 out = work.etls_contents(keep = nobs) noprint; 
      run; 
      
      data _null_; 
         set work.etls_contents (obs = 1); 
         call symput("etls_recnt", left(put(nobs,32.))); 
      run;
      
      proc datasets lib = work nolist nowarn memtype = (data view);
         delete etls_contents;
      quit;
      
      /* Reset syntaxcheck option to previous setting  */ 
      options &etls_syntaxcheck; 
   %end;
%mend etls_recordCheck;
%etls_recordCheck;

%let SYS_SQL_IP_SPEEDO = Y;
%let SYS_SQL_MAPPUTTO = sas_put;
%let SYS_SQLREDUCEPUT = DBMS;
%global etls_sql_pushDown;
%let etls_sql_pushDown = -1;
option DBIDIRECTEXEC;

proc datasets lib = work nolist nowarn memtype = (data view);
   delete WUO3DHR;
quit;

proc sql;
   create view work.WUO3DHR as
   select
      W1MHBF25.VALID_FROM_DTTM length = 8   
         format = DATETIME20.
         informat = DATETIME20.
         label = 'VALID_FROM_DTTM',
      W1MHBF25.VALID_TO_DTTM length = 8   
         format = DATETIME20.
         informat = DATETIME20.
         label = 'VALID_TO_DTTM',
      W1BAZY4C.FINANCIAL_INSTRUMENT_ID length = 32   
         format = $32.
         informat = $32.
         label = 'FINANCIAL_INSTRUMENT_ID',
      W1MHBF25.DRV_ACCOUNT_ID as REFERENCE_ACCOUNT_ID length = 32   
         format = $32.
         informat = $32.
         label = 'FINANCIAL_ACCOUNT_ID'
   from
      work.W1MHBF25 inner join 
      work.W1BAZY4C
         on
         (
            W1MHBF25.IRB_SRC_ACCOUNT_ID = W1BAZY4C.IRB_SRC_ACCOUNT_ID
         )
   ;
quit;

%global etls_sql_pushDown;
%let etls_sql_pushDown = &sys_sql_ip_all;

%rcSet(&sqlrc); 



/**  Step end Вяжем актуальные записи со сделками **/

/*==========================================================================* 
 * Step:            Table Loader                          A5Y50FNE.AQ000888 * 
 * Transform:       Table Loader (Version 2.1)                              * 
 * Description:                                                             * 
 *                                                                          * 
 * Source Table:    SQL Join - work.WUO3DHR               A5Y50FNE.AO0004NG * 
 * Target Table:    FIN_INSTR_ASSOC_NDF_BK -              A5Y50FNE.AE000127 * 
 *                   work_ia.FIN_INSTR_ASSOC_NDF_BK                         * 
 *==========================================================================*/ 

%let transformID = %quote(A5Y50FNE.AQ000888);
%let trans_rc = 0;
%let etls_stepStartTime = %sysfunc(datetime(), datetime20.); 

%let SYSLAST = %nrquote(work.WUO3DHR); 

%let SYS_SQL_IP_SPEEDO = Y;
%let SYS_SQL_MAPPUTTO = sas_put;
%let SYS_SQLREDUCEPUT = DBMS;
%global etls_sql_pushDown;
%let etls_sql_pushDown = -1;
option DBIDIRECTEXEC;

%global etls_tableExist;
%global etls_numIndex;
%global etls_lastTable;
%let etls_tableExist = -1; 
%let etls_numIndex = -1; 
%let etls_lastTable = &SYSLAST; 

/*---- Define load data macro  ----*/ 

/* --------------------------------------------------------------
   Load Technique Selection: Replace - EntireTable
   Constraint and index action selections: 'INIT','ASIS','ASIS','ASIS'
   Additional options selections... 
      Set unmapped to missing on updates: false 
   -------------------------------------------------------------- */
%macro etls_loader;

   %let etls_tableOptions = ;
   
   /*---- Map the columns  ----*/ 
   proc datasets lib = work nolist nowarn memtype = (data view);
      delete WIROFV4;
   quit;
   
   %put %str(NOTE: Mapping columns ...);
   proc sql;
      create view work.WIROFV4 as
         select
            FINANCIAL_INSTRUMENT_ID as FINANCIAL_INSTRUMENT_ASSOC_ID,
            VALID_FROM_DTTM,
            VALID_TO_DTTM,
            ('DRV') as FINANCIAL_INSTR_ASSOC_TYPE_CD length = 3
               format = $3.
               informat = $3.,
            FINANCIAL_INSTRUMENT_ID,
            REFERENCE_ACCOUNT_ID
      from &etls_lastTable
      ;
   quit;
   
   %let SYSLAST = work.WIROFV4;
   
   %let etls_lastTable = &SYSLAST; 
   %let etls_tableOptions = ; 
   
   /* Determine if the target table exists  */ 
   %let etls_tableExist = %eval(%sysfunc(exist(work_ia.FIN_INSTR_ASSOC_NDF_BK, DATA)) or 
         %sysfunc(exist(work_ia.FIN_INSTR_ASSOC_NDF_BK, VIEW))); 
   
   %if &etls_tableExist %then 
   %do;/* table exists  */ 
      %let etls_hasPreExistingConstraint=0; 
      
      proc datasets lib = work nolist nowarn memtype = (data view);
         delete etls_commands etls_commands_F;
      quit;
      
      %let etls_otherTablesReferToThisTable=0;
      
      %macro etls_CIContents(table=,workTableOut=,inDSOptions=);
         %put NOTE: Building table listing Constraints and Indexes for: &table;
         proc datasets lib=work nolist; delete &workTableOut; quit;
         proc contents data=&table&inDSOptions out2=&workTableOut noprint; run;
         
         data &workTableOut;
            length name $60 type $20 icown idxUnique idxNoMiss $3 recreate $600;
            set &workTableOut;
            type=upcase(type);
            if type eq 'REFERENTIAL' then
            do;
               put "WARNING%QUOTE(:) Target table is referenced by constraints in"
                    " another table: " ref;
               call symput('etls_otherTablesReferToThisTable','1');
               delete;
            end;
            if type='INDEX' and ICOwn eq 'YES' then delete;
         run;
         %rcSet(&syserr); 
         
      %mend etls_CIContents;
      
      %etls_CIContents(table=work_ia.FIN_INSTR_ASSOC_NDF_BK, workTableOut=etls_commands, inDSOptions=);
      
      %if &etls_otherTablesReferToThisTable %then 
         %put WARNING%QUOTE(:) Replacing entire table will fail. Consider an alternate load technique or revising constraints.; 
      %else 
      %do; /* okay - remove foreign keys  */ 
      
         data etls_commands_F; 
            set etls_commands; 
            if upcase(type)="FOREIGN KEY" then 
            do; 
               command='ic delete '||trim(name)||';';
               output etls_commands_F; 
            end; 
         run; 
         
         %put %str(NOTE: Removing foreign keys before dropping table...);
         data _null_;
            set etls_commands_F;
            %rcSet(&syserr); 
            
      %end; /* okay - remove foreign keys  */ 
      
      proc datasets lib = work nolist nowarn memtype = (data view);
         delete etls_commands etls_commands_F;
      quit;
      
      /*---- Drop a table  ----*/ 
      %put %str(NOTE: Dropping table ...);
      proc datasets lib = work_ia nolist nowarn memtype = (data view);
         delete FIN_INSTR_ASSOC_NDF_BK;
      quit;
      
      %rcSet(&syserr); 
      
      %let etls_tableExist = 0;
      
   %end; /* table exists  */ 
   
   /*---- Create a new table  ----*/ 
   %if (&etls_tableExist eq 0) %then 
   %do;  /* if table does not exist  */ 
   
      %put %str(NOTE: Creating table ...);
      
      data work_ia.FIN_INSTR_ASSOC_NDF_BK;
         attrib FINANCIAL_INSTRUMENT_ASSOC_ID length = $32
            format = $32.
            informat = $32.
            label = 'FINANCIAL_INSTRUMENT_ASSOC_ID'; 
         attrib VALID_FROM_DTTM length = 8
            format = DATETIME20.
            informat = DATETIME20.
            label = 'VALID_FROM_DTTM'; 
         attrib VALID_TO_DTTM length = 8
            format = DATETIME20.
            informat = DATETIME20.
            label = 'VALID_TO_DTTM'; 
         attrib FINANCIAL_INSTR_ASSOC_TYPE_CD length = $3
            format = $3.
            informat = $3.
            label = 'FINANCIAL_INSTR_ASSOC_TYPE_CD'; 
         attrib FINANCIAL_INSTRUMENT_ID length = $32
            format = $32.
            informat = $32.
            label = 'FINANCIAL_INSTRUMENT_ID'; 
         attrib REFERENCE_ACCOUNT_ID length = $32
            format = $32.
            informat = $32.
            label = 'FINANCIAL_ACCOUNT_ID'; 
         call missing(of _all_);
         stop;
      run;
      
      %rcSet(&syserr); 
      
      /*---- Create the integrity constraints for a table  ----*/ 
      %put %str(NOTE: Creating integrity constraints ...);
      proc datasets library=work_ia nolist;
         modify FIN_INSTR_ASSOC_NDF_BK;
            ic create not null (FINANCIAL_INSTRUMENT_ASSOC_ID);
            ic create not null (VALID_FROM_DTTM);
            ic create not null (VALID_TO_DTTM);
            ic create not null (FINANCIAL_INSTR_ASSOC_TYPE_CD);
            ic create not null (FINANCIAL_INSTRUMENT_ID);
            ic create not null (REFERENCE_ACCOUNT_ID);
            ic create pk_index = primary key (FINANCIAL_INSTRUMENT_ASSOC_ID VALID_FROM_DTTM);
      quit;
      
      %rcSet(&syserr); 
      
   %end;  /* if table does not exist  */ 
   
   /*---- Append  ----*/ 
   %put %str(NOTE: Appending data ...);
   
   proc append base = work_ia.FIN_INSTR_ASSOC_NDF_BK 
      data = &etls_lastTable (&etls_tableOptions)  force ; 
    run; 
   
   %rcSet(&syserr); 
   
   proc datasets lib = work nolist nowarn memtype = (data view);
      delete WIROFV4;
   quit;
   
%mend etls_loader;
%etls_loader;

%let etls_recCheckExist = 0; 
%let etls_recnt = 0; 
%macro etls_recordCheck; 
   %let etls_recCheckExist = %eval(%sysfunc(exist(work_ia.FIN_INSTR_ASSOC_NDF_BK, DATA)) or 
         %sysfunc(exist(work_ia.FIN_INSTR_ASSOC_NDF_BK, VIEW))); 
   
   %if (&etls_recCheckExist) %then
   %do;
      %local etls_syntaxcheck; 
      %let etls_syntaxcheck = %sysfunc(getoption(syntaxcheck)); 
      /* Turn off syntaxcheck option to perform following steps  */ 
      options nosyntaxcheck;
      
      proc contents data = work_ia.FIN_INSTR_ASSOC_NDF_BK out = work.etls_contents(keep = nobs) noprint; 
      run; 
      
      data _null_; 
         set work.etls_contents (obs = 1); 
         call symput("etls_recnt", left(put(nobs,32.))); 
      run;
      
      proc datasets lib = work nolist nowarn memtype = (data view);
         delete etls_contents;
      quit;
      
      /* Reset syntaxcheck option to previous setting  */ 
      options &etls_syntaxcheck; 
   %end;
%mend etls_recordCheck;
%etls_recordCheck;



/**  Step end Table Loader **/

/*==========================================================================* 
 * Step:            Завершить модуль                      A5Y50FNE.AQ000889 * 
 * Transform:       Завершить модуль                                        * 
 * Description:                                                             * 
 *==========================================================================*/ 

%let transformID = %quote(A5Y50FNE.AQ000889);
%let trans_rc = 0;
%let etls_stepStartTime = %sysfunc(datetime(), datetime20.); 

%let _INPUT_count = 0; 
%let _OUTPUT_count = 0; 


/*****************************************************************
* ВЕРСИЯ:
*   $Id: transform_job_finish.sas 247 2012-04-03 07:31:10Z nesterenok $
*
******************************************************************
* НАЗНАЧЕНИЕ:
*   Регистрирует конец модуля ETL.
*
* ПАРАМЕТРЫ:
*   нет
*
******************************************************************/

%macro transform_job_finish;

   /* Продолжаем модуль */
   %job_continue_reg(mpJobType=JOB, mpJobName=&ETLS_JobName., mpPostEvent=N);

   /* Завершаем модуль */
   %job_finish_reg(mpJobType=JOB);

%mend transform_job_finish;

%transform_job_finish;


%rcSet(&syserr); 
%rcSet(&sysrc); 
%rcSet(&sqlrc); 



/**  Step end Завершить модуль **/

%let etls_endTime = %sysfunc(datetime(),datetime.);



/**  Job end 042_942_Structure_FINANCIAL_ACCOUNT_NDF_BK **/

/* Reset jobid and name */
%let jobID = %quote(A569C89V.AQ0000CK);
%let etls_jobName = %nrquote(090_364_Stream_Midas_Fin_Account_BK);

/**************************************************************************** 
 * Job:             042_948_Structure_FINANCIAL_ACCOUNT_  A5Y50FNE.AN0000VQ * 
 *                  FWD_BK                                                  * 
 * Description:                                                             * 
 *                                                                          * 
 * Metadata Server: bravo14                                                 * 
 * Port:            8561                                                    * 
 * Location:        /DWH_DWHDDS_IA/Jobs/042_Structure/Financial_Account     * 
 *                                                                          * 
 * Server:          SASApp                                A5C46MZY.AQ000002 * 
 *                                                                          * 
 * Source Table:    FINANCIAL_INSTRUMENT_FWD_BK -         A5Y50FNE.AE00013X * 
 *                   work_ia.FINANCIAL_INSTRUMENT_FWD_BK                    * 
 * Target Tables:   FINANCIAL_ACCOUNT_FWD_BK -            A5Y50FNE.AE00012N * 
 *                   work_ia.FINANCIAL_ACCOUNT_FWD_BK                       * 
 *                  FIN_INSTR_ASSOC_FWD_BK -              A5Y50FNE.AE000125 * 
 *                   work_ia.FIN_INSTR_ASSOC_FWD_BK                         * 
 *                  CUSTOMER_X_FIN_ACC_FWD_BK -           A5Y50FNE.AE00011R * 
 *                   work_ia.CUSTOMER_X_FIN_ACC_FWD_BK                      * 
 *                                                                          * 
 * Generated on:    16 Июль 2013 г. 17:14:45 MSD                            * 
 * Generated by:    sasdwh                                                  * 
 * Version:         SAS Data Integration Studio 4.5                         * 
 ****************************************************************************/ 

/* General macro variables  */ 
%let jobID = %quote(A5Y50FNE.AN0000VQ);
%let etls_jobName = %nrquote(042_948_Structure_FINANCIAL_ACCOUNT_FWD_BK);
%let etls_userID = %nrquote(sasdwh);


/* Create metadata macro variables */
%let IOMServer      = %nrquote(SASApp);
%let metaPort       = %nrquote(8561);
%let metaServer     = %nrquote(bravo14);

/* Set metadata options */
options metaport       = &metaPort 
        metaserver     = "&metaServer"; 

/* Setup for capturing job status  */ 
%let etls_startTime = %sysfunc(datetime(),datetime.);
%let etls_recordsBefore = 0;
%let etls_recordsAfter = 0;
%let etls_lib = 0;
%let etls_table = 0;

%global etls_debug; 
%macro etls_setDebug; 
   %if %str(&etls_debug) ne 0 %then 
      OPTIONS MPRINT%str(;); 
%mend; 
%etls_setDebug; 

/*==========================================================================* 
 * Step:            Начать модуль                         A5Y50FNE.AQ00089W * 
 * Transform:       Начать модуль                                           * 
 * Description:                                                             * 
 *==========================================================================*/ 

%let transformID = %quote(A5Y50FNE.AQ00089W);
%let trans_rc = 0;
%let etls_stepStartTime = %sysfunc(datetime(), datetime20.); 

%let _INPUT_count = 0; 
%let _OUTPUT_count = 0; 


/*****************************************************************
* ВЕРСИЯ:
*   $Id: transform_job_start.sas 1747 2012-08-01 11:26:13Z nesterenok $
*
******************************************************************
* НАЗНАЧЕНИЕ:
*   Регистрирует начало модуля ETL.
*
* ПАРАМЕТРЫ:
*   нет
*
******************************************************************/

%macro transform_job_start;

   /* Продолжаем поток (или создаем новый) */
   %local lmvStreamName;
   %if %sysfunc(sysexist(LSB_JOBNAME)) %then
      %let lmvStreamName = %scan(%sysfunc(sysget(LSB_JOBNAME)), 3, :);
   %else
      %let lmvStreamName = ;

   %job_continue_reg(mpJobType=STREAM, mpJobName=&lmvStreamName, mpPostEvent=N, mpForcedStart=Y);

   /* Для DI, начинаем поток заново, если старый был начат не сегодня */
   %if %length(&lmvStreamName) eq 0 and &STREAM_START_DT ne %sysfunc(today()) %then %do;
      %job_start_reg(mpJobType=STREAM, mpParentJobId=, mpJobName=&lmvStreamName.);
   %end;

   /* Начинаем модуль */
   %job_start_reg(mpJobType=JOB, mpParentJobId=&STREAM_ID, mpJobName=&ETLS_JobName.);

%mend transform_job_start;

%transform_job_start;


%rcSet(&syserr); 
%rcSet(&sysrc); 
%rcSet(&sqlrc); 



/**  Step end Начать модуль **/

/*==========================================================================* 
 * Step:            Отбор первых и актуальных записей с   A5Y50FNE.AQ00089X * 
 *                   учетом ног                                             * 
 * Transform:       Splitter                                                * 
 * Description:                                                             * 
 *                                                                          * 
 * Source Table:    FINANCIAL_INSTRUMENT_FWD_BK -         A5Y50FNE.AE00013X * 
 *                   work_ia.FINANCIAL_INSTRUMENT_FWD_BK                    * 
 * Target Tables:   first recs - work.W1B87YYR            A5Y50FNE.AO0004OI * 
 *                  actual recs - work.W1BAZY4C           A5Y50FNE.AO0004OJ * 
 *==========================================================================*/ 

%let transformID = %quote(A5Y50FNE.AQ00089X);
%let trans_rc = 0;
%let etls_stepStartTime = %sysfunc(datetime(), datetime20.); 

%let etls_recCheckExist = 0; 
%let etls_recnt = 0; 
%macro etls_recordCheck; 
   %let etls_recCheckExist = %eval(%sysfunc(exist(work_ia.FINANCIAL_INSTRUMENT_FWD_BK, DATA)) or 
         %sysfunc(exist(work_ia.FINANCIAL_INSTRUMENT_FWD_BK, VIEW))); 
   
   %if (&etls_recCheckExist) %then
   %do;
      %local etls_syntaxcheck; 
      %let etls_syntaxcheck = %sysfunc(getoption(syntaxcheck)); 
      /* Turn off syntaxcheck option to perform following steps  */ 
      options nosyntaxcheck;
      
      proc contents data = work_ia.FINANCIAL_INSTRUMENT_FWD_BK out = work.etls_contents(keep = nobs) noprint; 
      run; 
      
      data _null_; 
         set work.etls_contents (obs = 1); 
         call symput("etls_recnt", left(put(nobs,32.))); 
      run;
      
      proc datasets lib = work nolist nowarn memtype = (data view);
         delete etls_contents;
      quit;
      
      /* Reset syntaxcheck option to previous setting  */ 
      options &etls_syntaxcheck; 
   %end;
%mend etls_recordCheck;
%etls_recordCheck;

%let SYSLAST = %nrquote(work_ia.FINANCIAL_INSTRUMENT_FWD_BK); 

proc datasets lib=work nolist nowarn memtype = (data view);
   delete W1B87YYR;
   delete W1BAZY4C;
quit;

data 
     work.W1B87YYR
     work.W1BAZY4C;
   set &SYSLAST;
   if FSRT=1 then 
      output work.W1B87YYR;
   if VALID_TO_DTTM = &ETL_SCD_FUTURE_DTTM then 
      output work.W1BAZY4C;
run;

%rcSet(&syserr); 

/*---- Map the columns  ----*/ 
proc datasets lib = work nolist nowarn memtype = (data view);
   delete etls_mapped;
quit;

%put %str(NOTE: Mapping columns ...);
proc sql;
   create table work.etls_mapped as
      select
         VALID_FROM_DTTM,
         FINANCIAL_INSTRUMENT_ID,
         IRB_SRC_ACCOUNT_ID,
         DDAT,
         KONDOR_A
   from work.W1B87YYR
   ;
quit;

%let SYSLAST = work.etls_mapped;

data work.W1B87YYR;
  set work.etls_mapped;
run;

proc datasets lib = work nolist nowarn memtype = (data view);
   delete etls_mapped;
quit;

%rcSet(&syscc); 

/*---- Map the columns  ----*/ 
proc datasets lib = work nolist nowarn memtype = (data view);
   delete etls_mapped;
quit;

%put %str(NOTE: Mapping columns ...);
proc sql;
   create table work.etls_mapped as
      select
         FINANCIAL_INSTRUMENT_ID,
         FIRST_PAYMENT_DT,
         FINANCIAL_INSTRUMENT_TYPE_CD,
         CURRENCY_CD,
         IRB_INSTR_STATUS_CD,
         IRB_SRC_ACCOUNT_ID,
         KONDOR_A   
            format = 11.
            informat = 11.,
         ARM302P_ID,
         FXMM_ID,
         BRCA,
         CNUM,
         LCD,
         VDAT,
         DDAT as DDAT_ACTUAL
   from work.W1BAZY4C
   ;
quit;

%let SYSLAST = work.etls_mapped;

data work.W1BAZY4C;
  set work.etls_mapped;
run;

proc datasets lib = work nolist nowarn memtype = (data view);
   delete etls_mapped;
quit;

%rcSet(&syscc); 



/**  Step end Отбор первых и актуальных записей с учетом ног **/

/*==========================================================================* 
 * Step:            Собираем данные по сделке             A5Y50FNE.AQ00089Y * 
 * Transform:       Join                                                    * 
 * Description:                                                             * 
 *                                                                          * 
 * Source Tables:   actual recs - work.W1BAZY4C           A5Y50FNE.AO0004OJ * 
 *                  first recs - work.W1B87YYR            A5Y50FNE.AO0004OI * 
 * Target Table:    SQL Join - work.W1B4DNDN              A5Y50FNE.AO0004OK * 
 *==========================================================================*/ 

%let transformID = %quote(A5Y50FNE.AQ00089Y);
%let trans_rc = 0;
%let etls_stepStartTime = %sysfunc(datetime(), datetime20.); 

%let etls_recCheckExist = 0; 
%let etls_recnt = 0; 
%macro etls_recordCheck; 
   %let etls_recCheckExist = %eval(%sysfunc(exist(work.W1BAZY4C, DATA)) or 
         %sysfunc(exist(work.W1BAZY4C, VIEW))); 
   
   %if (&etls_recCheckExist) %then
   %do;
      %local etls_syntaxcheck; 
      %let etls_syntaxcheck = %sysfunc(getoption(syntaxcheck)); 
      /* Turn off syntaxcheck option to perform following steps  */ 
      options nosyntaxcheck;
      
      proc contents data = work.W1BAZY4C out = work.etls_contents(keep = nobs) noprint; 
      run; 
      
      data _null_; 
         set work.etls_contents (obs = 1); 
         call symput("etls_recnt", left(put(nobs,32.))); 
      run;
      
      proc datasets lib = work nolist nowarn memtype = (data view);
         delete etls_contents;
      quit;
      
      /* Reset syntaxcheck option to previous setting  */ 
      options &etls_syntaxcheck; 
   %end;
%mend etls_recordCheck;
%etls_recordCheck;

%let SYS_SQL_IP_SPEEDO = Y;
%let SYS_SQL_MAPPUTTO = sas_put;
%let SYS_SQLREDUCEPUT = DBMS;
%global etls_sql_pushDown;
%let etls_sql_pushDown = -1;
option DBIDIRECTEXEC;

proc datasets lib = work nolist nowarn memtype = (data view);
   delete W1B4DNDN;
quit;

proc sql;
   create view work.W1B4DNDN as
   select
      W1B87YYR.VALID_FROM_DTTM length = 8   
         format = DATETIME20.
         informat = DATETIME20.
         label = 'VALID_FROM_DTTM',
      W1B87YYR.IRB_SRC_ACCOUNT_ID length = 32   
         format = $32.
         informat = $32.
         label = 'IRB_SRC_ACCOUNT_ID',
      W1BAZY4C.DDAT_ACTUAL as DDAT length = 8   
         format = DATETIME20.
         informat = DATETIME20.
         label = 'DDAT',
      W1BAZY4C.FIRST_PAYMENT_DT length = 8   
         format = DATETIME20.
         informat = DATETIME20.
         label = 'FIRST_PAYMENT_DT',
      W1BAZY4C.FINANCIAL_INSTRUMENT_TYPE_CD length = 3   
         format = $3.
         informat = $3.
         label = 'FINANCIAL_INSTRUMENT_TYPE_CD',
      W1BAZY4C.CURRENCY_CD length = 3   
         format = $3.
         informat = $3.
         label = 'CURRENCY_CD',
      W1BAZY4C.IRB_INSTR_STATUS_CD length = 3   
         format = $3.
         informat = $3.
         label = 'IRB_INSTR_STATUS_CD',
      W1BAZY4C.KONDOR_A length = 8   
         format = 11.
         informat = 11.
         label = 'KONDOR_A',
      W1BAZY4C.ARM302P_ID length = 8   
         format = 11.
         informat = 11.
         label = 'ARM302P_ID',
      W1BAZY4C.FXMM_ID length = 8   
         format = 11.
         informat = 11.
         label = 'FXMM_ID',
      W1BAZY4C.BRCA length = 3   
         format = $3.
         informat = $3.
         label = 'BRCA',
      W1BAZY4C.CNUM length = 8   
         format = 7.
         informat = 7.
         label = 'CNUM',
      W1BAZY4C.LCD length = 8   
         format = 6.
         informat = 6.
         label = 'LCD',
      W1BAZY4C.VDAT length = 8   
         format = DATETIME20.
         informat = DATETIME20.
         label = 'VDAT'
   from
      work.W1B87YYR, 
      work.W1BAZY4C
   where
      W1B87YYR.IRB_SRC_ACCOUNT_ID = W1BAZY4C.IRB_SRC_ACCOUNT_ID
   ;
quit;

%global etls_sql_pushDown;
%let etls_sql_pushDown = &sys_sql_ip_all;

%rcSet(&sqlrc); 



/**  Step end Собираем данные по сделке **/

/*==========================================================================* 
 * Step:            Extract                               A5Y50FNE.AQ00089Z * 
 * Transform:       Extract                                                 * 
 * Description:                                                             * 
 *                                                                          * 
 * Source Table:    SQL Join - work.W1B4DNDN              A5Y50FNE.AO0004OK * 
 * Target Table:    Extract - work.W1MOEVV1               A5Y50FNE.AO0004OL * 
 *==========================================================================*/ 

%let transformID = %quote(A5Y50FNE.AQ00089Z);
%let trans_rc = 0;
%let etls_stepStartTime = %sysfunc(datetime(), datetime20.); 

%let etls_recnt = -1;
%let SYSLAST = %nrquote(work.W1B4DNDN); 

%let SYS_SQL_IP_SPEEDO = Y;
%let SYS_SQL_MAPPUTTO = sas_put;
%let SYS_SQLREDUCEPUT = DBMS;
%global etls_sql_pushDown;
%let etls_sql_pushDown = -1;
option DBIDIRECTEXEC;

/*---- Map the columns  ----*/ 
proc datasets lib = work nolist nowarn memtype = (data view);
   delete W1MOEVV1;
quit;

data _null_;
   put "NOTE: The following column(s) do not have a column mapping, so the"
        " value(s) will be set to missing: DAY_BASIS_CD,"
        " INTEREST_PAYMENT_TYPE_CD";
run;

%put %str(NOTE: Mapping columns ...);
proc sql;
   create view work.W1MOEVV1 as
      select
         VALID_FROM_DTTM,
         (&ETL_SCD_FUTURE_DTTM) as VALID_TO_DTTM length = 8
            format = DATETIME20.
            informat = DATETIME20.
            label = 'VALID_TO_DTTM',
         IRB_SRC_ACCOUNT_ID,
         ('MID') as SOURCE_SYSTEM_CD length = 3
            format = $3.
            informat = $3.
            label = 'SOURCE_SYSTEM_CD',
         (ifc(missing(KONDOR_A), '', cats(KONDOR_A))) as ACCOUNT_REGISTRATION_NM length = 100
            format = $100.
            informat = $100.
            label = 'ACCOUNT_REGISTRATION_NM',
         (ifc(missing(ARM302P_ID), '', cats(FXMM_ID, '_', ARM302P_ID))) as ALTERNATE_ACCOUNT_NM length = 40
            format = $40.
            informat = $40.
            label = 'ALTERNATE_ACCOUNT_NM',
         ('DRV') as FINANCIAL_ACCOUNT_TYPE_CD length = 3
            format = $3.
            informat = $3.
            label = 'FINANCIAL_ACCOUNT_TYPE_CD',
         BRCA,
         IRB_INSTR_STATUS_CD as ACCOUNT_STATUS_CD   
            label = 'ACCOUNT_STATUS_CD',
         DDAT as OPEN_DT   
            label = 'OPEN_DT',
         FIRST_PAYMENT_DT as CLOSE_DT   
            label = 'corrected later',
         CURRENCY_CD,
         "" as DAY_BASIS_CD length = 10
            format = $10.
            informat = $10.
            label = 'DAY_BASIS_CD',
         "" as INTEREST_PAYMENT_TYPE_CD length = 3
            format = $3.
            informat = $3.
            label = 'INTEREST_PAYMENT_TYPE_CD',
         FINANCIAL_INSTRUMENT_TYPE_CD,
         (put(CNUM,z8.)) as CUSTOMER_NO length = 8,
         LCD,
         VDAT
   from &SYSLAST
   ;
quit;

%let SYSLAST = work.W1MOEVV1;

%global etls_sql_pushDown;
%let etls_sql_pushDown = &sys_sql_ip_all;

%rcSet(&sqlrc); 



/**  Step end Extract **/

/*==========================================================================* 
 * Step:            Генерация BK                          A5Y50FNE.AQ0008A0 * 
 * Transform:       Генерация BK                                            * 
 * Description:                                                             * 
 *                                                                          * 
 * Source Table:    Extract - work.W1MOEVV1               A5Y50FNE.AO0004OL * 
 * Target Table:    Генерация BKtpOut - work.W1MHBF25     A5Y50FNE.AO0004OM * 
 *==========================================================================*/ 

%let transformID = %quote(A5Y50FNE.AQ0008A0);
%let trans_rc = 0;
%let etls_stepStartTime = %sysfunc(datetime(), datetime20.); 

%let etls_recnt = -1;
%let SYSLAST = %nrquote(work.W1MOEVV1); 

%let _INPUT_count = 1; 
%let _INPUT = work.W1MOEVV1;
%let _INPUT_connect = ;
%let _INPUT_engine = ;
%let _INPUT_memtype = VIEW;
%let _INPUT_options = %nrquote();
%let _INPUT_alter = %nrquote();
%let _INPUT_path = %nrquote(/Extract_A5Y50FNE.AO0004OL%(WorkTable%));
%let _INPUT_type = 1;
%let _INPUT_label = %nrquote();

%let tpIn = work.W1MOEVV1;
%let tpIn_connect = ;
%let tpIn_engine = ;
%let tpIn_memtype = VIEW;
%let tpIn_options = %nrquote();
%let tpIn_alter = %nrquote();
%let tpIn_path = %nrquote(/Extract_A5Y50FNE.AO0004OL%(WorkTable%));
%let tpIn_type = 1;
%let tpIn_label = %nrquote();

%let _OUTPUT_count = 1; 
%let _OUTPUT = work.W1MHBF25;
%let _OUTPUT_connect = ;
%let _OUTPUT_engine = ;
%let _OUTPUT_memtype = DATA;
%let _OUTPUT_options = %nrquote();
%let _OUTPUT_alter = %nrquote();
%let _OUTPUT_path = %nrquote(/Генерация BKtpOut_A5Y50FNE.AO0004OM%(WorkTable%));
%let _OUTPUT_type = 1;
%let _OUTPUT_label = %nrquote();
/* List of target columns to keep  */ 
%let _OUTPUT_keep = DRV_ACCOUNT_ID FCC_COUNTERPARTY_ID VALID_FROM_DTTM VALID_TO_DTTM 
        SOURCE_SYSTEM_CD ACCOUNT_REGISTRATION_NM ALTERNATE_ACCOUNT_NM 
        FINANCIAL_ACCOUNT_TYPE_CD ACCOUNT_STATUS_CD OPEN_DT CLOSE_DT 
        CURRENCY_CD DAY_BASIS_CD INTEREST_PAYMENT_TYPE_CD IRB_SRC_ACCOUNT_ID 
        MID_FINANCIAL_UNIT_ID_BRCA BRCA FINANCIAL_INSTRUMENT_TYPE_CD LCD VDAT;

%let tpOut = work.W1MHBF25;
%let tpOut_connect = ;
%let tpOut_engine = ;
%let tpOut_memtype = DATA;
%let tpOut_options = %nrquote();
%let tpOut_alter = %nrquote();
%let tpOut_path = %nrquote(/Генерация BKtpOut_A5Y50FNE.AO0004OM%(WorkTable%));
%let tpOut_type = 1;
%let tpOut_label = %nrquote();
/* List of target columns to keep  */ 
%let tpOut_keep = DRV_ACCOUNT_ID FCC_COUNTERPARTY_ID VALID_FROM_DTTM VALID_TO_DTTM 
        SOURCE_SYSTEM_CD ACCOUNT_REGISTRATION_NM ALTERNATE_ACCOUNT_NM 
        FINANCIAL_ACCOUNT_TYPE_CD ACCOUNT_STATUS_CD OPEN_DT CLOSE_DT 
        CURRENCY_CD DAY_BASIS_CD INTEREST_PAYMENT_TYPE_CD IRB_SRC_ACCOUNT_ID 
        MID_FINANCIAL_UNIT_ID_BRCA BRCA FINANCIAL_INSTRUMENT_TYPE_CD LCD VDAT;


proc datasets lib=work nolist nowarn memtype = (data view);
   delete W1MHBF25;
quit;

%let tpBK = %nrquote(FINANCIAL_ACCOUNT_DRV           );
%let tpBK0 = %nrquote(3);
%let tpBK1 = %nrquote(FINANCIAL_ACCOUNT_DRV           );
%let tpBK2 = %nrquote(FINANCIAL_UNIT_MID_BRCA         );
%let tpBK3 = %nrquote(FCC_COUNTERPARTY_FCC            );
%let tpBK_count = %nrquote(3);
%let tpOptionalBK_count = %nrquote(0);
%let tpOptionalBK = ;

/* List of target columns to keep  */ 
%let _keep = DRV_ACCOUNT_ID FCC_COUNTERPARTY_ID VALID_FROM_DTTM VALID_TO_DTTM 
        SOURCE_SYSTEM_CD ACCOUNT_REGISTRATION_NM ALTERNATE_ACCOUNT_NM 
        FINANCIAL_ACCOUNT_TYPE_CD ACCOUNT_STATUS_CD OPEN_DT CLOSE_DT 
        CURRENCY_CD DAY_BASIS_CD INTEREST_PAYMENT_TYPE_CD IRB_SRC_ACCOUNT_ID 
        MID_FINANCIAL_UNIT_ID_BRCA BRCA FINANCIAL_INSTRUMENT_TYPE_CD LCD VDAT;
/* List of target columns to keep  */ 
%let keep = DRV_ACCOUNT_ID FCC_COUNTERPARTY_ID VALID_FROM_DTTM VALID_TO_DTTM 
        SOURCE_SYSTEM_CD ACCOUNT_REGISTRATION_NM ALTERNATE_ACCOUNT_NM 
        FINANCIAL_ACCOUNT_TYPE_CD ACCOUNT_STATUS_CD OPEN_DT CLOSE_DT 
        CURRENCY_CD DAY_BASIS_CD INTEREST_PAYMENT_TYPE_CD IRB_SRC_ACCOUNT_ID 
        MID_FINANCIAL_UNIT_ID_BRCA BRCA FINANCIAL_INSTRUMENT_TYPE_CD LCD VDAT;
/*****************************************************************
* ВЕРСИЯ:
*     $Id: transform_generate_bk.sas 4889 2013-04-04 09:14:07Z nesterenok $
*
******************************************************************
* НАЗНАЧЕНИЕ:
*     Генерирует бизнес-ключи в таблице по списку.
*
* ПАРАМЕТРЫ:
*     tpIn                    +  имя входного набора
*     tpBK                    +  список кодов обязательных для генерации бизнес-ключей, разделенный пробелами
*                                Такой бизнес-ключ станет дамми, если заполнены не все поля, его составляющие
*                                FK к ETL_SYS.ETL_BK.BK_CD
*     tpOptionalBK            +  список кодов НЕобязательных для генерации бизнес-ключей, разделенный пробелами
*                                Такой бизнес-ключ останется пустым, если заполнены не все поля, его составляющие
*     tpOut                   +  имя выходного набора
*
******************************************************************/

%macro transform_generate_bk;
   %let tpBK_count         = %unquote(&tpBK_count);
   %let tpOptionalBK_count = %unquote(&tpOptionalBK_count);

   %local lmvDummyRows lmvFieldDummyCount lmvDummyRequired;
   %let lmvDummyRows       = work.tr_gen_bk_dummy_rows;
   %let lmvFieldDummyCount = etl_dummy_count;
   %let lmvDummyRequired   = %eval (&tpBK_count gt 0);

   /* Макросы для генерации одного ключа */
   %macro sm_trans_gen_bk_required;
      %etl_generate_bk (
         mpFieldBK=&bk_field_nm, mpLengthBK=%sysfunc(inputn(&bk_type_cd, bkt_cd_len.)),
         mpColumnList=&bk_column_list_txt, mpFormat=&bk_format_txt,
         mpFieldDummy=&lmvFieldDummy, mpFieldDummyCount=&lmvFieldDummyCount
      );
   %mend;
   %macro sm_trans_gen_bk_optional;
      %etl_generate_bk (
         mpFieldBK=&bk_field_nm, mpLengthBK=%sysfunc(inputn(&bk_type_cd, bkt_cd_len.)),
         mpColumnList=&bk_column_list_txt, mpFormat=&bk_format_txt,
         mpFieldDummy=
      );
   %mend;

   /* Макрос для подстановки в дамми-ключ уникального номера */
   %macro sm_trans_gen_bk_dummy;
      if &lmvFieldDummy gt 0 then do;
         set &lmvDummyIds (keep=OBJECT_ID rename=(OBJECT_ID=&lmvFieldDummy._no)) point=&lmvFieldDummy;
         &bk_field_nm = cats (&bk_field_nm, "_", &lmvFieldDummy._no);

         %error_check;
      end;
   %mend;


   /* Создаем выходной набор итерацией по всем заявленным бизнес-ключам */
   /* Считаем необходимое кол-во дамми-ключей */
   %local lmvBkIndex lmvFieldDummy lmvDummyCount;
   %let lmvDummyCount   = 0;
   data
      %if &lmvDummyRequired %then %do;
         &tpOut (drop= etl_dummy_:)
         &lmvDummyRows
      %end;
      %else %do;
         &tpOut
      %end;
   ;
      set &tpIn end=ds_end;

      /* Генерация необязательных ключей */
      %do lmvBkIndex=1 %to &tpOptionalBK_count;
         %util_loop_data (mpLoopMacro=sm_trans_gen_bk_optional, mpData=ETL_SYS.ETL_BK,
                          mpWhere=BK_CD eq %util_quote(&&tpOptionalBK&lmvBkIndex)
         );
      %end;

      %if &lmvDummyRequired %then %do;
         length &lmvFieldDummyCount 8;
         drop &lmvFieldDummyCount;
         retain &lmvFieldDummyCount 0;

         /* Генерация обязательных ключей */
         %do lmvBkIndex=1 %to &tpBK_count;
            %let lmvFieldDummy = etl_dummy_&lmvBkIndex.;

            %util_loop_data (mpLoopMacro=sm_trans_gen_bk_required, mpData=ETL_SYS.ETL_BK,
                             mpWhere=BK_CD eq %util_quote(&&tpBK&lmvBkIndex)
            );
         %end;

         /* Если в какой-то записи есть дамми, то не выводим ее сразу */
         if sum (of etl_dummy_1-etl_dummy_&tpBK_count) = 0 then
            output &tpOut;
         else do;
            output &lmvDummyRows;
         end;

         if ds_end then call symputx ("lmvDummyCount", &lmvFieldDummyCount);
      %end;
      %else %do;
         output &tpOut;
      %end;
   run;
   %error_check (mpStepType=DATA);

   /* Если дамми нет, то всё */
   %if (not &lmvDummyRequired) or (&lmvDummyCount eq 0) %then %return;


   /* Для каждого дамми генерируем уникальный номер */
   %local lmvDummyIds;
   %let lmvDummyIds = work.tr_gen_bk_dummy_ids;
   %unique_ids (mpIdCount=&lmvDummyCount, mpOut=&lmvDummyIds, mpSequenceName=ETL_DUMMY_SEQ);

   /* Добавляем номер к дамми */
   data &lmvDummyRows._id (drop= etl_dummy_:);
      set &lmvDummyRows;

      %do lmvBkIndex=1 %to &tpBK_count;
         %let lmvFieldDummy = etl_dummy_&lmvBkIndex.;

         %util_loop_data (mpLoopMacro=sm_trans_gen_bk_dummy, mpData=ETL_SYS.ETL_BK,
                          mpWhere=BK_CD eq %util_quote(&&tpBK&lmvBkIndex)
         );
      %end;
   run;
   %error_check (mpStepType=DATA);


   /* Добавляем дамми-строки к выходному набору */
   proc append base=&tpOut data=&lmvDummyRows._id;
   run;
   %error_check (mpStepType=DATA);

%mend transform_generate_bk;

%transform_generate_bk;

%rcSet(&syserr); 
%rcSet(&sysrc); 
%rcSet(&sqlrc); 



/**  Step end Генерация BK **/

/*==========================================================================* 
 * Step:            Table Loader                          A5Y50FNE.AQ0008A1 * 
 * Transform:       Table Loader (Version 2.1)                              * 
 * Description:                                                             * 
 *                                                                          * 
 * Source Table:    Генерация BKtpOut - work.W1MHBF25     A5Y50FNE.AO0004OM * 
 * Target Table:    CUSTOMER_X_FIN_ACC_FWD_BK -           A5Y50FNE.AE00011R * 
 *                   work_ia.CUSTOMER_X_FIN_ACC_FWD_BK                      * 
 *==========================================================================*/ 

%let transformID = %quote(A5Y50FNE.AQ0008A1);
%let trans_rc = 0;
%let etls_stepStartTime = %sysfunc(datetime(), datetime20.); 

%let SYSLAST = %nrquote(work.W1MHBF25); 

%let SYS_SQL_IP_SPEEDO = Y;
%let SYS_SQL_MAPPUTTO = sas_put;
%let SYS_SQLREDUCEPUT = DBMS;
%global etls_sql_pushDown;
%let etls_sql_pushDown = -1;
option DBIDIRECTEXEC;

%global etls_tableExist;
%global etls_numIndex;
%global etls_lastTable;
%let etls_tableExist = -1; 
%let etls_numIndex = -1; 
%let etls_lastTable = &SYSLAST; 

/*---- Define load data macro  ----*/ 

/* --------------------------------------------------------------
   Load Technique Selection: Replace - EntireTable
   Constraint and index action selections: 'INIT','ASIS','ASIS','ASIS'
   Additional options selections... 
      Set unmapped to missing on updates: false 
   -------------------------------------------------------------- */
%macro etls_loader;

   %let etls_tableOptions = ;
   
   /*---- Map the columns  ----*/ 
   proc datasets lib = work nolist nowarn memtype = (data view);
      delete WIROKAW;
   quit;
   
   data _null_;
      put "NOTE: The following column(s) do not have a column mapping, so the"
           " value(s) will be set to missing: RELSHP_TO_PRIMARY_CD,"
           " EFFECTIVE_FROM_DTTM, EFFECTIVE_TO_DTTM";
   run;
   
   %put %str(NOTE: Mapping columns ...);
   proc sql;
      create view work.WIROKAW as
         select
            FCC_COUNTERPARTY_ID as CUSTOMER_ID,
            DRV_ACCOUNT_ID as ACCOUNT_ID,
            VALID_FROM_DTTM,
            VALID_TO_DTTM,
            "" as RELSHP_TO_PRIMARY_CD length = 3
               format = $3.
               informat = $3.,
            ('DDC') as RELATIONSHIP_TO_ACCOUNT_CD length = 3
               format = $3.
               informat = $3.,
            . as EFFECTIVE_FROM_DTTM length = 8
               format = DATETIME20.
               informat = DATETIME20.,
            . as EFFECTIVE_TO_DTTM length = 8
               format = DATETIME20.
               informat = DATETIME20.
      from &etls_lastTable
      ;
   quit;
   
   %let SYSLAST = work.WIROKAW;
   
   %let etls_lastTable = &SYSLAST; 
   %let etls_tableOptions = ; 
   
   /* Determine if the target table exists  */ 
   %let etls_tableExist = %eval(%sysfunc(exist(work_ia.CUSTOMER_X_FIN_ACC_FWD_BK, DATA)) or 
         %sysfunc(exist(work_ia.CUSTOMER_X_FIN_ACC_FWD_BK, VIEW))); 
   
   %if &etls_tableExist %then 
   %do;/* table exists  */ 
      %let etls_hasPreExistingConstraint=0; 
      
      proc datasets lib = work nolist nowarn memtype = (data view);
         delete etls_commands etls_commands_F;
      quit;
      
      %let etls_otherTablesReferToThisTable=0;
      
      %macro etls_CIContents(table=,workTableOut=,inDSOptions=);
         %put NOTE: Building table listing Constraints and Indexes for: &table;
         proc datasets lib=work nolist; delete &workTableOut; quit;
         proc contents data=&table&inDSOptions out2=&workTableOut noprint; run;
         
         data &workTableOut;
            length name $60 type $20 icown idxUnique idxNoMiss $3 recreate $600;
            set &workTableOut;
            type=upcase(type);
            if type eq 'REFERENTIAL' then
            do;
               put "WARNING%QUOTE(:) Target table is referenced by constraints in"
                    " another table: " ref;
               call symput('etls_otherTablesReferToThisTable','1');
               delete;
            end;
            if type='INDEX' and ICOwn eq 'YES' then delete;
         run;
         %rcSet(&syserr); 
         
      %mend etls_CIContents;
      
      %etls_CIContents(table=work_ia.CUSTOMER_X_FIN_ACC_FWD_BK, workTableOut=etls_commands, inDSOptions=);
      
      %if &etls_otherTablesReferToThisTable %then 
         %put WARNING%QUOTE(:) Replacing entire table will fail. Consider an alternate load technique or revising constraints.; 
      %else 
      %do; /* okay - remove foreign keys  */ 
      
         data etls_commands_F; 
            set etls_commands; 
            if upcase(type)="FOREIGN KEY" then 
            do; 
               command='ic delete '||trim(name)||';';
               output etls_commands_F; 
            end; 
         run; 
         
         %put %str(NOTE: Removing foreign keys before dropping table...);
         data _null_;
            set etls_commands_F;
            %rcSet(&syserr); 
            
      %end; /* okay - remove foreign keys  */ 
      
      proc datasets lib = work nolist nowarn memtype = (data view);
         delete etls_commands etls_commands_F;
      quit;
      
      /*---- Drop a table  ----*/ 
      %put %str(NOTE: Dropping table ...);
      proc datasets lib = work_ia nolist nowarn memtype = (data view);
         delete CUSTOMER_X_FIN_ACC_FWD_BK;
      quit;
      
      %rcSet(&syserr); 
      
      %let etls_tableExist = 0;
      
   %end; /* table exists  */ 
   
   /*---- Create a new table  ----*/ 
   %if (&etls_tableExist eq 0) %then 
   %do;  /* if table does not exist  */ 
   
      %put %str(NOTE: Creating table ...);
      
      data work_ia.CUSTOMER_X_FIN_ACC_FWD_BK;
         attrib CUSTOMER_ID length = $32
            format = $32.
            informat = $32.
            label = 'CUSTOMER_ID'; 
         attrib ACCOUNT_ID length = $32
            format = $32.
            informat = $32.
            label = 'ACCOUNT_ID'; 
         attrib VALID_FROM_DTTM length = 8
            format = DATETIME20.
            informat = DATETIME20.
            label = 'VALID_FROM_DTTM'; 
         attrib VALID_TO_DTTM length = 8
            format = DATETIME20.
            informat = DATETIME20.
            label = 'VALID_TO_DTTM'; 
         attrib RELSHP_TO_PRIMARY_CD length = $3
            format = $3.
            informat = $3.
            label = 'RELSHP_TO_PRIMARY_CD'; 
         attrib RELATIONSHIP_TO_ACCOUNT_CD length = $3
            format = $3.
            informat = $3.
            label = 'RELATIONSHIP_TO_ACCOUNT_CD'; 
         attrib EFFECTIVE_FROM_DTTM length = 8
            format = DATETIME20.
            informat = DATETIME20.
            label = 'EFFECTIVE_FROM_DTTM'; 
         attrib EFFECTIVE_TO_DTTM length = 8
            format = DATETIME20.
            informat = DATETIME20.
            label = 'EFFECTIVE_TO_DTTM'; 
         call missing(of _all_);
         stop;
      run;
      
      %rcSet(&syserr); 
      
      /*---- Create the integrity constraints for a table  ----*/ 
      %put %str(NOTE: Creating integrity constraints ...);
      proc datasets library=work_ia nolist;
         modify CUSTOMER_X_FIN_ACC_FWD_BK;
            ic create not null (CUSTOMER_ID);
            ic create not null (ACCOUNT_ID);
            ic create not null (VALID_FROM_DTTM);
            ic create not null (VALID_TO_DTTM);
            ic create not null (RELATIONSHIP_TO_ACCOUNT_CD);
            ic create Index1 = primary key (CUSTOMER_ID ACCOUNT_ID VALID_FROM_DTTM 
                           RELATIONSHIP_TO_ACCOUNT_CD);
      quit;
      
      %rcSet(&syserr); 
      
   %end;  /* if table does not exist  */ 
   
   /*---- Append  ----*/ 
   %put %str(NOTE: Appending data ...);
   
   proc append base = work_ia.CUSTOMER_X_FIN_ACC_FWD_BK 
      data = &etls_lastTable (&etls_tableOptions)  force ; 
    run; 
   
   %rcSet(&syserr); 
   
   proc datasets lib = work nolist nowarn memtype = (data view);
      delete WIROKAW;
   quit;
   
%mend etls_loader;
%etls_loader;

%let etls_recCheckExist = 0; 
%let etls_recnt = 0; 
%macro etls_recordCheck; 
   %let etls_recCheckExist = %eval(%sysfunc(exist(work_ia.CUSTOMER_X_FIN_ACC_FWD_BK, DATA)) or 
         %sysfunc(exist(work_ia.CUSTOMER_X_FIN_ACC_FWD_BK, VIEW))); 
   
   %if (&etls_recCheckExist) %then
   %do;
      %local etls_syntaxcheck; 
      %let etls_syntaxcheck = %sysfunc(getoption(syntaxcheck)); 
      /* Turn off syntaxcheck option to perform following steps  */ 
      options nosyntaxcheck;
      
      proc contents data = work_ia.CUSTOMER_X_FIN_ACC_FWD_BK out = work.etls_contents(keep = nobs) noprint; 
      run; 
      
      data _null_; 
         set work.etls_contents (obs = 1); 
         call symput("etls_recnt", left(put(nobs,32.))); 
      run;
      
      proc datasets lib = work nolist nowarn memtype = (data view);
         delete etls_contents;
      quit;
      
      /* Reset syntaxcheck option to previous setting  */ 
      options &etls_syntaxcheck; 
   %end;
%mend etls_recordCheck;
%etls_recordCheck;



/**  Step end Table Loader **/

/*==========================================================================* 
 * Step:            Вяжем актуальнгые записи со сделками  A5Y50FNE.AQ0008A2 * 
 * Transform:       Join                                                    * 
 * Description:                                                             * 
 *                                                                          * 
 * Source Tables:   Генерация BKtpOut - work.W1MHBF25     A5Y50FNE.AO0004OM * 
 *                  actual recs - work.W1BAZY4C           A5Y50FNE.AO0004OJ * 
 * Target Table:    SQL Join - work.WVCS481               A5Y50FNE.AO0004ON * 
 *==========================================================================*/ 

%let transformID = %quote(A5Y50FNE.AQ0008A2);
%let trans_rc = 0;
%let etls_stepStartTime = %sysfunc(datetime(), datetime20.); 

%let etls_recCheckExist = 0; 
%let etls_recnt = 0; 
%macro etls_recordCheck; 
   %let etls_recCheckExist = %eval(%sysfunc(exist(work.W1MHBF25, DATA)) or 
         %sysfunc(exist(work.W1MHBF25, VIEW))); 
   
   %if (&etls_recCheckExist) %then
   %do;
      %local etls_syntaxcheck; 
      %let etls_syntaxcheck = %sysfunc(getoption(syntaxcheck)); 
      /* Turn off syntaxcheck option to perform following steps  */ 
      options nosyntaxcheck;
      
      proc contents data = work.W1MHBF25 out = work.etls_contents(keep = nobs) noprint; 
      run; 
      
      data _null_; 
         set work.etls_contents (obs = 1); 
         call symput("etls_recnt", left(put(nobs,32.))); 
      run;
      
      proc datasets lib = work nolist nowarn memtype = (data view);
         delete etls_contents;
      quit;
      
      /* Reset syntaxcheck option to previous setting  */ 
      options &etls_syntaxcheck; 
   %end;
%mend etls_recordCheck;
%etls_recordCheck;

%let SYS_SQL_IP_SPEEDO = Y;
%let SYS_SQL_MAPPUTTO = sas_put;
%let SYS_SQLREDUCEPUT = DBMS;
%global etls_sql_pushDown;
%let etls_sql_pushDown = -1;
option DBIDIRECTEXEC;

proc datasets lib = work nolist nowarn memtype = (data view);
   delete WVCS481;
quit;

proc sql;
   create view work.WVCS481 as
   select
      W1MHBF25.VALID_FROM_DTTM length = 8   
         format = DATETIME20.
         informat = DATETIME20.
         label = 'VALID_FROM_DTTM',
      W1MHBF25.VALID_TO_DTTM length = 8   
         format = DATETIME20.
         informat = DATETIME20.
         label = 'VALID_TO_DTTM',
      W1BAZY4C.FINANCIAL_INSTRUMENT_ID length = 32   
         format = $32.
         informat = $32.
         label = 'FINANCIAL_INSTRUMENT_ID',
      W1MHBF25.DRV_ACCOUNT_ID as REFERENCE_ACCOUNT_ID length = 32   
         format = $32.
         informat = $32.
         label = 'FINANCIAL_ACCOUNT_ID'
   from
      work.W1MHBF25 inner join 
      work.W1BAZY4C
         on
         (
            W1MHBF25.IRB_SRC_ACCOUNT_ID = W1BAZY4C.IRB_SRC_ACCOUNT_ID
         )
   ;
quit;

%global etls_sql_pushDown;
%let etls_sql_pushDown = &sys_sql_ip_all;

%rcSet(&sqlrc); 



/**  Step end Вяжем актуальнгые записи со сделками **/

/*==========================================================================* 
 * Step:            Table Loader                          A5Y50FNE.AQ0008A3 * 
 * Transform:       Table Loader (Version 2.1)                              * 
 * Description:                                                             * 
 *                                                                          * 
 * Source Table:    Генерация BKtpOut - work.W1MHBF25     A5Y50FNE.AO0004OM * 
 * Target Table:    FINANCIAL_ACCOUNT_FWD_BK -            A5Y50FNE.AE00012N * 
 *                   work_ia.FINANCIAL_ACCOUNT_FWD_BK                       * 
 *==========================================================================*/ 

%let transformID = %quote(A5Y50FNE.AQ0008A3);
%let trans_rc = 0;
%let etls_stepStartTime = %sysfunc(datetime(), datetime20.); 

%let SYSLAST = %nrquote(work.W1MHBF25); 

%let SYS_SQL_IP_SPEEDO = Y;
%let SYS_SQL_MAPPUTTO = sas_put;
%let SYS_SQLREDUCEPUT = DBMS;
%global etls_sql_pushDown;
%let etls_sql_pushDown = -1;
option DBIDIRECTEXEC;

%global etls_tableExist;
%global etls_numIndex;
%global etls_lastTable;
%let etls_tableExist = -1; 
%let etls_numIndex = -1; 
%let etls_lastTable = &SYSLAST; 

/*---- Define load data macro  ----*/ 

/* --------------------------------------------------------------
   Load Technique Selection: Replace - EntireTable
   Constraint and index action selections: 'INIT','ASIS','ASIS','ASIS'
   Additional options selections... 
      Set unmapped to missing on updates: false 
   -------------------------------------------------------------- */
%macro etls_loader;

   %let etls_tableOptions = ;
   
   /*---- Map the columns  ----*/ 
   proc datasets lib = work nolist nowarn memtype = (data view);
      delete WIROKDV;
   quit;
   
   data _null_;
      put "NOTE: The following column(s) do not have a column mapping, so the"
           " value(s) will be set to missing: AUTO_DEBIT_ACCOUNT_TYPE_CD,"
           " ACCOUNT_REGISTRATION_TYPE_CD, CLOSE_REASON_CD,    ACCOUNT_TAX_ID,"
           " EXPECTED_LOSS_PCT, INDIVIDUAL_ORGANIZATION_CD, SOURCE_CD,   "
           " OPENING_CHANNEL_CD, PREFERRED_CHANNEL_CD, PRIMARY_PHONE_NO,   "
           " PRIMARY_PHONE_TYPE_CD, SECONDARY_PHONE_NO, SECONDARY_PHONE_TYPE_CD,"
           "    MAILABLE_FLG, TELEPHONABLE_FLG, EMAIL_FLG, SMS_FLG,"
           " DO_NOT_CONTACT_FLG,    EMPLOYEE_RK, CURRENCY_BASED_ACCOUNT_FLG,"
           " FEE_BASED_FLG, ANNUAL_FEES_AMT,    MONTHLY_FEES_AMT, CAMPAIGN_CD,"
           " COMMUNICATION_CD, REGISTERED_ONLINE_DT,    FIRST_LOGIN_DT,"
           " ONLINE_BILL_PAYMENT_FLG, ID_VERIFICATION_TYPE_CD,   "
           " PREVIOUS_ACCOUNT_ID, OPEN_BRANCH_FINANCIAL_UNIT_ID,   "
           " FINANCIAL_APPLICATION_ID, CREDIT_FACILITY_ID,"
           " FUTURE_MARGIN_INCOME_AMT,    IN_DEFAULT_FLG, FINANCIAL_BOOK_ID,"
           " IRRECOVERABLE_FLG,    OWNED_BY_INTERNAL_ORG_ID,"
           " PREVIOUS_BANK_EXTERNAL_ORG_ID, NETTING_SET_ID,    REVOLVING_FLG,"
           " SOURCE_CHANNEL_CD, GRACE_PERIOD_DAYS_CNT,    REMARGINING_DAYS_CNT,"
           " FINANCIAL_CALENDAR_ID, PORTFOLIO_ID,    SECURITIZATION_POOL_ID,"
           " RECEIVABLES_POOL_ID, ACCOUNT_USAGE_TYPE_CD,    RISK_ALARM_FLG,"
           " LOW_PROFITABILITY_FLG, ACCOUNT_LIFECYCLE_STG_CD,   "
           " ATTRITION_ALARM_FLG, BALANCE_FROZEN_FLG, BALANCE_FROZEN_DT,   "
           " ACCOUNT_BLOCK_REASON_CD, TAXATION_STATE_CD,"
           " EFFECTIVE_MATURITY_YEAR_NO,    GL_ACCOUNT_ID,"
           " FROM_OTHER_INSTITUTION_FLG, ACCOUNT_RENEWAL_CNT,   "
           " BALANCE_TRANSFER_DT, BALANCE_TRANSFER_AMT, BALANCE_TRANSFER_CNT,   "
           " BASE_LONG_TERM_APR_RT, BROKER_FLG, MULT_RATE_FLG,"
           " AUTO_DEBIT_ACCOUNT_NO,    WORST_STATUS_LAST_12_MTH_CD,"
           " WORST_STATUS_LAST_12_MTH_DT,    BALANCE_TRNSF_OTHER_ACCT_CNT,"
           " EFFECTIVE_FROM_DTTM, EFFECTIVE_TO_DTTM,    COUNTERPARTY_ID,"
           " INSURED_BY_COUNTERPARTY_ID, STATEMENT_FREQUENCY_CD,   "
           " SECURITY_DEPOSIT_AMT, SECURITY_DEPOSIT_REFUND_AMT,"
           " FIRST_PAYMENT_DT,    LAST_PAYMENT_DT, FIRST_RESET_DT,"
           " LAST_RESET_DT, RESETS_PER_ANNUM_NO,    PRINCIPAL_PAYMENT_TYPE_CD,"
           " PRINCIPAL_PAYMENT_AMT, RATE_POLICY_ID, SPREAD_RT,   "
           " DISCOUNT_SPREAD_RT, INITIAL_CONTRACT_RT,"
           " FIXED_MONTHLY_PREPAYMENT_RT,    CAPITAL_ALLOCATION_ID,"
           " CAPITAL_COST_ID, SEGMENT_ID,    NEAR_BRANCH_FINANCIAL_UNIT_ID,"
           " STATEMENT_OPT_FLG, VALUE_SCALING_FACTOR_RT,   "
           " INTERNAL_REPORTING_CATEGORY_CD, CONVEXITY_ADJUSTMENT_FLG,   "
           " ARREARS_PAYMENT_CD, QUANTO_FEATURE_ID, CASH_INTENSIVE_BUSINESS_FLG,"
           "    LETTER_OF_CREDIT_ONFILE_FLG, TRADE_FINANCE_FLG,"
           " ANNUITY_PAYMENT_TYPE_CD,    INTEREST_PAYMENT_TIME_FREQ_CD,"
           " LIQUIDITY_CATEGORY_TYPE_CD,    HOLIDAY_DATE_ROLL_CONV_CD,"
           " WEEKEND_DATE_ROLL_CONV_CD, EXPENSE_ALLOCATION_ID,   "
           " FIRST_INTEREST_PAYMENT_DT, LAST_INTEREST_PAYMENT_DT,"
           " IRB_DUMMY_TYPE_CD";
   run;
   
   %put %str(NOTE: Mapping columns ...);
   proc sql;
      create view work.WIROKDV as
         select
            DRV_ACCOUNT_ID as ACCOUNT_ID,
            VALID_FROM_DTTM,
            VALID_TO_DTTM,
            SOURCE_SYSTEM_CD,
            ACCOUNT_REGISTRATION_NM,
            ALTERNATE_ACCOUNT_NM,
            FINANCIAL_ACCOUNT_TYPE_CD,
            "" as AUTO_DEBIT_ACCOUNT_TYPE_CD length = 3
               format = $3.
               informat = $3.,
            "" as ACCOUNT_REGISTRATION_TYPE_CD length = 3
               format = $3.
               informat = $3.,
            ACCOUNT_STATUS_CD,
            OPEN_DT,
            (case when ACCOUNT_STATUS_CD='AUT' then .
                       when ACCOUNT_STATUS_CD='MAT' then VDAT
                       when ACCOUNT_STATUS_CD='REV' then min(LCD,VDAT)
               end
               
               /*ifn(ACCOUNT_STATUS_CD = 'AUT', ., CLOSE_DT) старый вариант*/) as CLOSE_DT length = 8
               format = DATETIME20.
               informat = DATETIME20.,
            "" as CLOSE_REASON_CD length = 3
               format = $3.
               informat = $3.,
            "" as ACCOUNT_TAX_ID length = 32
               format = $32.
               informat = $32.,
            . as EXPECTED_LOSS_PCT length = 8
               format = 11.4
               informat = 11.4,
            "" as INDIVIDUAL_ORGANIZATION_CD length = 3
               format = $3.
               informat = $3.,
            "" as SOURCE_CD length = 5
               format = $5.
               informat = $5.,
            "" as OPENING_CHANNEL_CD length = 3
               format = $3.
               informat = $3.,
            "" as PREFERRED_CHANNEL_CD length = 3
               format = $3.
               informat = $3.,
            CURRENCY_CD,
            "" as PRIMARY_PHONE_NO length = 20
               format = $20.
               informat = $20.,
            "" as PRIMARY_PHONE_TYPE_CD length = 3
               format = $3.
               informat = $3.,
            "" as SECONDARY_PHONE_NO length = 20
               format = $20.
               informat = $20.,
            "" as SECONDARY_PHONE_TYPE_CD length = 3
               format = $3.
               informat = $3.,
            "" as MAILABLE_FLG length = 1
               format = $1.
               informat = $1.,
            "" as TELEPHONABLE_FLG length = 1
               format = $1.
               informat = $1.,
            "" as EMAIL_FLG length = 1
               format = $1.
               informat = $1.,
            "" as SMS_FLG length = 1
               format = $1.
               informat = $1.,
            "" as DO_NOT_CONTACT_FLG length = 1
               format = $1.
               informat = $1.,
            . as EMPLOYEE_RK length = 8
               format = 11.
               informat = 11.,
            "" as CURRENCY_BASED_ACCOUNT_FLG length = 1
               format = $1.
               informat = $1.,
            "" as FEE_BASED_FLG length = 1
               format = $1.
               informat = $1.,
            . as ANNUAL_FEES_AMT length = 8
               format = 20.5
               informat = 20.5,
            . as MONTHLY_FEES_AMT length = 8
               format = 20.5
               informat = 20.5,
            "" as CAMPAIGN_CD length = 30
               format = $30.
               informat = $30.,
            "" as COMMUNICATION_CD length = 30
               format = $30.
               informat = $30.,
            . as REGISTERED_ONLINE_DT length = 8
               format = DATETIME20.
               informat = DATETIME20.,
            . as FIRST_LOGIN_DT length = 8
               format = DATETIME20.
               informat = DATETIME20.,
            "" as ONLINE_BILL_PAYMENT_FLG length = 1
               format = $1.
               informat = $1.,
            "" as ID_VERIFICATION_TYPE_CD length = 3
               format = $3.
               informat = $3.,
            "" as PREVIOUS_ACCOUNT_ID length = 32
               format = $32.
               informat = $32.,
            "" as OPEN_BRANCH_FINANCIAL_UNIT_ID length = 32
               format = $32.
               informat = $32.,
            MID_FINANCIAL_UNIT_ID_BRCA as PRIM_BRANCH_FINANCIAL_UNIT_ID,
            "" as FINANCIAL_APPLICATION_ID length = 32
               format = $32.
               informat = $32.,
            "" as CREDIT_FACILITY_ID length = 40
               format = $40.
               informat = $40.,
            . as FUTURE_MARGIN_INCOME_AMT length = 8
               format = 20.5
               informat = 20.5,
            "" as IN_DEFAULT_FLG length = 1
               format = $1.
               informat = $1.,
            "" as FINANCIAL_BOOK_ID length = 32
               format = $32.
               informat = $32.,
            "" as IRRECOVERABLE_FLG length = 1
               format = $1.
               informat = $1.,
            "" as OWNED_BY_INTERNAL_ORG_ID length = 32
               format = $32.
               informat = $32.,
            "" as PREVIOUS_BANK_EXTERNAL_ORG_ID length = 32
               format = $32.
               informat = $32.,
            "" as NETTING_SET_ID length = 32
               format = $32.
               informat = $32.,
            "" as REVOLVING_FLG length = 1
               format = $1.
               informat = $1.,
            "" as SOURCE_CHANNEL_CD length = 3
               format = $3.
               informat = $3.,
            . as GRACE_PERIOD_DAYS_CNT length = 8
               format = 7.
               informat = 7.,
            . as REMARGINING_DAYS_CNT length = 8
               format = 7.
               informat = 7.,
            "" as FINANCIAL_CALENDAR_ID length = 32
               format = $32.
               informat = $32.,
            DAY_BASIS_CD,
            "" as PORTFOLIO_ID length = 32
               format = $32.
               informat = $32.,
            "" as SECURITIZATION_POOL_ID length = 32
               format = $32.
               informat = $32.,
            "" as RECEIVABLES_POOL_ID length = 32
               format = $32.
               informat = $32.,
            "" as ACCOUNT_USAGE_TYPE_CD length = 3
               format = $3.
               informat = $3.,
            "" as RISK_ALARM_FLG length = 1
               format = $1.
               informat = $1.,
            "" as LOW_PROFITABILITY_FLG length = 1
               format = $1.
               informat = $1.,
            "" as ACCOUNT_LIFECYCLE_STG_CD length = 3
               format = $3.
               informat = $3.,
            "" as ATTRITION_ALARM_FLG length = 1
               format = $1.
               informat = $1.,
            "" as BALANCE_FROZEN_FLG length = 1
               format = $1.
               informat = $1.,
            . as BALANCE_FROZEN_DT length = 8
               format = DATETIME20.
               informat = DATETIME20.,
            "" as ACCOUNT_BLOCK_REASON_CD length = 3
               format = $3.
               informat = $3.,
            "" as TAXATION_STATE_CD length = 4
               format = $4.
               informat = $4.,
            . as EFFECTIVE_MATURITY_YEAR_NO length = 8
               format = 9.3
               informat = 9.3,
            "" as GL_ACCOUNT_ID length = 32
               format = $32.
               informat = $32.,
            "" as FROM_OTHER_INSTITUTION_FLG length = 1
               format = $1.
               informat = $1.,
            . as ACCOUNT_RENEWAL_CNT length = 8
               format = 7.
               informat = 7.,
            . as BALANCE_TRANSFER_DT length = 8
               format = DATETIME20.
               informat = DATETIME20.,
            . as BALANCE_TRANSFER_AMT length = 8
               format = 20.5
               informat = 20.5,
            . as BALANCE_TRANSFER_CNT length = 8
               format = 7.
               informat = 7.,
            . as BASE_LONG_TERM_APR_RT length = 8
               format = 11.4
               informat = 11.4,
            "" as BROKER_FLG length = 1
               format = $1.
               informat = $1.,
            "" as MULT_RATE_FLG length = 1
               format = $1.
               informat = $1.,
            "" as AUTO_DEBIT_ACCOUNT_NO length = 32
               format = $32.
               informat = $32.,
            "" as WORST_STATUS_LAST_12_MTH_CD length = 3
               format = $3.
               informat = $3.,
            . as WORST_STATUS_LAST_12_MTH_DT length = 8
               format = DATETIME20.
               informat = DATETIME20.,
            . as BALANCE_TRNSF_OTHER_ACCT_CNT length = 8
               format = 7.
               informat = 7.,
            . as EFFECTIVE_FROM_DTTM length = 8
               format = DATETIME20.
               informat = DATETIME20.,
            . as EFFECTIVE_TO_DTTM length = 8
               format = DATETIME20.
               informat = DATETIME20.,
            "" as COUNTERPARTY_ID length = 32
               format = $32.
               informat = $32.,
            "" as INSURED_BY_COUNTERPARTY_ID length = 32
               format = $32.
               informat = $32.,
            "" as STATEMENT_FREQUENCY_CD length = 3
               format = $3.
               informat = $3.,
            . as SECURITY_DEPOSIT_AMT length = 8
               format = 20.5
               informat = 20.5,
            . as SECURITY_DEPOSIT_REFUND_AMT length = 8
               format = 20.5
               informat = 20.5,
            . as FIRST_PAYMENT_DT length = 8
               format = DATETIME20.
               informat = DATETIME20.,
            . as LAST_PAYMENT_DT length = 8
               format = DATETIME20.
               informat = DATETIME20.,
            . as FIRST_RESET_DT length = 8
               format = DATETIME20.
               informat = DATETIME20.,
            . as LAST_RESET_DT length = 8
               format = DATETIME20.
               informat = DATETIME20.,
            . as RESETS_PER_ANNUM_NO length = 8
               format = 6.
               informat = 6.,
            "" as PRINCIPAL_PAYMENT_TYPE_CD length = 3
               format = $3.
               informat = $3.,
            . as PRINCIPAL_PAYMENT_AMT length = 8
               format = 20.5
               informat = 20.5,
            "" as RATE_POLICY_ID length = 32
               format = $32.
               informat = $32.,
            . as SPREAD_RT length = 8
               format = 11.4
               informat = 11.4,
            . as DISCOUNT_SPREAD_RT length = 8
               format = 11.4
               informat = 11.4,
            . as INITIAL_CONTRACT_RT length = 8
               format = 11.4
               informat = 11.4,
            . as FIXED_MONTHLY_PREPAYMENT_RT length = 8
               format = 11.4
               informat = 11.4,
            "" as CAPITAL_ALLOCATION_ID length = 32
               format = $32.
               informat = $32.,
            "" as CAPITAL_COST_ID length = 32
               format = $32.
               informat = $32.,
            "" as SEGMENT_ID length = 32
               format = $32.
               informat = $32.,
            "" as NEAR_BRANCH_FINANCIAL_UNIT_ID length = 32
               format = $32.
               informat = $32.,
            "" as STATEMENT_OPT_FLG length = 1
               format = $1.
               informat = $1.,
            . as VALUE_SCALING_FACTOR_RT length = 8
               format = 11.4
               informat = 11.4,
            "" as INTERNAL_REPORTING_CATEGORY_CD length = 3
               format = $3.
               informat = $3.,
            "" as CONVEXITY_ADJUSTMENT_FLG length = 1
               format = $1.
               informat = $1.,
            "" as ARREARS_PAYMENT_CD length = 3
               format = $3.
               informat = $3.,
            "" as QUANTO_FEATURE_ID length = 32
               format = $32.
               informat = $32.,
            "" as CASH_INTENSIVE_BUSINESS_FLG length = 1
               format = $1.
               informat = $1.,
            "" as LETTER_OF_CREDIT_ONFILE_FLG length = 1
               format = $1.
               informat = $1.,
            "" as TRADE_FINANCE_FLG length = 1
               format = $1.
               informat = $1.,
            "" as ANNUITY_PAYMENT_TYPE_CD length = 3
               format = $3.
               informat = $3.,
            INTEREST_PAYMENT_TYPE_CD,
            "" as INTEREST_PAYMENT_TIME_FREQ_CD length = 3
               format = $3.
               informat = $3.,
            "" as LIQUIDITY_CATEGORY_TYPE_CD length = 3
               format = $3.
               informat = $3.,
            "" as HOLIDAY_DATE_ROLL_CONV_CD length = 3
               format = $3.
               informat = $3.,
            "" as WEEKEND_DATE_ROLL_CONV_CD length = 3
               format = $3.
               informat = $3.,
            "" as EXPENSE_ALLOCATION_ID length = 32
               format = $32.
               informat = $32.,
            . as FIRST_INTEREST_PAYMENT_DT length = 8
               format = DATETIME20.
               informat = DATETIME20.,
            . as LAST_INTEREST_PAYMENT_DT length = 8
               format = DATETIME20.
               informat = DATETIME20.,
            "" as IRB_DUMMY_TYPE_CD length = 3
               format = $3.
               informat = $3.,
            IRB_SRC_ACCOUNT_ID,
            BRCA,
            FINANCIAL_INSTRUMENT_TYPE_CD
      from &etls_lastTable
      ;
   quit;
   
   %let SYSLAST = work.WIROKDV;
   
   %let etls_lastTable = &SYSLAST; 
   %let etls_tableOptions = ; 
   
   /* Determine if the target table exists  */ 
   %let etls_tableExist = %eval(%sysfunc(exist(work_ia.FINANCIAL_ACCOUNT_FWD_BK, DATA)) or 
         %sysfunc(exist(work_ia.FINANCIAL_ACCOUNT_FWD_BK, VIEW))); 
   
   %if &etls_tableExist %then 
   %do;/* table exists  */ 
      %let etls_hasPreExistingConstraint=0; 
      
      proc datasets lib = work nolist nowarn memtype = (data view);
         delete etls_commands etls_commands_F;
      quit;
      
      %let etls_otherTablesReferToThisTable=0;
      
      %macro etls_CIContents(table=,workTableOut=,inDSOptions=);
         %put NOTE: Building table listing Constraints and Indexes for: &table;
         proc datasets lib=work nolist; delete &workTableOut; quit;
         proc contents data=&table&inDSOptions out2=&workTableOut noprint; run;
         
         data &workTableOut;
            length name $60 type $20 icown idxUnique idxNoMiss $3 recreate $600;
            set &workTableOut;
            type=upcase(type);
            if type eq 'REFERENTIAL' then
            do;
               put "WARNING%QUOTE(:) Target table is referenced by constraints in"
                    " another table: " ref;
               call symput('etls_otherTablesReferToThisTable','1');
               delete;
            end;
            if type='INDEX' and ICOwn eq 'YES' then delete;
         run;
         %rcSet(&syserr); 
         
      %mend etls_CIContents;
      
      %etls_CIContents(table=work_ia.FINANCIAL_ACCOUNT_FWD_BK, workTableOut=etls_commands, inDSOptions=);
      
      %if &etls_otherTablesReferToThisTable %then 
         %put WARNING%QUOTE(:) Replacing entire table will fail. Consider an alternate load technique or revising constraints.; 
      %else 
      %do; /* okay - remove foreign keys  */ 
      
         data etls_commands_F; 
            set etls_commands; 
            if upcase(type)="FOREIGN KEY" then 
            do; 
               command='ic delete '||trim(name)||';';
               output etls_commands_F; 
            end; 
         run; 
         
         %put %str(NOTE: Removing foreign keys before dropping table...);
         data _null_;
            set etls_commands_F;
            %rcSet(&syserr); 
            
      %end; /* okay - remove foreign keys  */ 
      
      proc datasets lib = work nolist nowarn memtype = (data view);
         delete etls_commands etls_commands_F;
      quit;
      
      /*---- Drop a table  ----*/ 
      %put %str(NOTE: Dropping table ...);
      proc datasets lib = work_ia nolist nowarn memtype = (data view);
         delete FINANCIAL_ACCOUNT_FWD_BK;
      quit;
      
      %rcSet(&syserr); 
      
      %let etls_tableExist = 0;
      
   %end; /* table exists  */ 
   
   /*---- Create a new table  ----*/ 
   %if (&etls_tableExist eq 0) %then 
   %do;  /* if table does not exist  */ 
   
      %put %str(NOTE: Creating table ...);
      
      data work_ia.FINANCIAL_ACCOUNT_FWD_BK;
         attrib ACCOUNT_ID length = $32
            format = $32.
            informat = $32.
            label = 'ACCOUNT_ID'; 
         attrib VALID_FROM_DTTM length = 8
            format = DATETIME20.
            informat = DATETIME20.
            label = 'VALID_FROM_DTTM'; 
         attrib VALID_TO_DTTM length = 8
            format = DATETIME20.
            informat = DATETIME20.
            label = 'VALID_TO_DTTM'; 
         attrib SOURCE_SYSTEM_CD length = $3
            format = $3.
            informat = $3.
            label = 'SOURCE_SYSTEM_CD'; 
         attrib ACCOUNT_REGISTRATION_NM length = $100
            format = $100.
            informat = $100.
            label = 'ACCOUNT_REGISTRATION_NM'; 
         attrib ALTERNATE_ACCOUNT_NM length = $40
            format = $40.
            informat = $40.
            label = 'ALTERNATE_ACCOUNT_NM'; 
         attrib FINANCIAL_ACCOUNT_TYPE_CD length = $3
            format = $3.
            informat = $3.
            label = 'FINANCIAL_ACCOUNT_TYPE_CD'; 
         attrib AUTO_DEBIT_ACCOUNT_TYPE_CD length = $3
            format = $3.
            informat = $3.
            label = 'AUTO_DEBIT_ACCOUNT_TYPE_CD'; 
         attrib ACCOUNT_REGISTRATION_TYPE_CD length = $3
            format = $3.
            informat = $3.
            label = 'ACCOUNT_REGISTRATION_TYPE_CD'; 
         attrib ACCOUNT_STATUS_CD length = $3
            format = $3.
            informat = $3.
            label = 'ACCOUNT_STATUS_CD'; 
         attrib OPEN_DT length = 8
            format = DATETIME20.
            informat = DATETIME20.
            label = 'OPEN_DT'; 
         attrib CLOSE_DT length = 8
            format = DATETIME20.
            informat = DATETIME20.
            label = 'CLOSE_DT'; 
         attrib CLOSE_REASON_CD length = $3
            format = $3.
            informat = $3.
            label = 'CLOSE_REASON_CD'; 
         attrib ACCOUNT_TAX_ID length = $32
            format = $32.
            informat = $32.
            label = 'ACCOUNT_TAX_ID'; 
         attrib EXPECTED_LOSS_PCT length = 8
            format = 11.4
            informat = 11.4
            label = 'EXPECTED_LOSS_PCT'; 
         attrib INDIVIDUAL_ORGANIZATION_CD length = $3
            format = $3.
            informat = $3.
            label = 'INDIVIDUAL_ORGANIZATION_CD'; 
         attrib SOURCE_CD length = $5
            format = $5.
            informat = $5.
            label = 'SOURCE_CD'; 
         attrib OPENING_CHANNEL_CD length = $3
            format = $3.
            informat = $3.
            label = 'OPENING_CHANNEL_CD'; 
         attrib PREFERRED_CHANNEL_CD length = $3
            format = $3.
            informat = $3.
            label = 'PREFERRED_CHANNEL_CD'; 
         attrib CURRENCY_CD length = $3
            format = $3.
            informat = $3.
            label = 'CURRENCY_CD'; 
         attrib PRIMARY_PHONE_NO length = $20
            format = $20.
            informat = $20.
            label = 'PRIMARY_PHONE_NO'; 
         attrib PRIMARY_PHONE_TYPE_CD length = $3
            format = $3.
            informat = $3.
            label = 'PRIMARY_PHONE_TYPE_CD'; 
         attrib SECONDARY_PHONE_NO length = $20
            format = $20.
            informat = $20.
            label = 'SECONDARY_PHONE_NO'; 
         attrib SECONDARY_PHONE_TYPE_CD length = $3
            format = $3.
            informat = $3.
            label = 'SECONDARY_PHONE_TYPE_CD'; 
         attrib MAILABLE_FLG length = $1
            format = $1.
            informat = $1.
            label = 'MAILABLE_FLG'; 
         attrib TELEPHONABLE_FLG length = $1
            format = $1.
            informat = $1.
            label = 'TELEPHONABLE_FLG'; 
         attrib EMAIL_FLG length = $1
            format = $1.
            informat = $1.
            label = 'EMAIL_FLG'; 
         attrib SMS_FLG length = $1
            format = $1.
            informat = $1.
            label = 'SMS_FLG'; 
         attrib DO_NOT_CONTACT_FLG length = $1
            format = $1.
            informat = $1.
            label = 'DO_NOT_CONTACT_FLG'; 
         attrib EMPLOYEE_RK length = 8
            format = 11.
            informat = 11.
            label = 'EMPLOYEE_RK'; 
         attrib CURRENCY_BASED_ACCOUNT_FLG length = $1
            format = $1.
            informat = $1.
            label = 'CURRENCY_BASED_ACCOUNT_FLG'; 
         attrib FEE_BASED_FLG length = $1
            format = $1.
            informat = $1.
            label = 'FEE_BASED_FLG'; 
         attrib ANNUAL_FEES_AMT length = 8
            format = 20.5
            informat = 20.5
            label = 'ANNUAL_FEES_AMT'; 
         attrib MONTHLY_FEES_AMT length = 8
            format = 20.5
            informat = 20.5
            label = 'MONTHLY_FEES_AMT'; 
         attrib CAMPAIGN_CD length = $30
            format = $30.
            informat = $30.
            label = 'CAMPAIGN_CD'; 
         attrib COMMUNICATION_CD length = $30
            format = $30.
            informat = $30.
            label = 'COMMUNICATION_CD'; 
         attrib REGISTERED_ONLINE_DT length = 8
            format = DATETIME20.
            informat = DATETIME20.
            label = 'REGISTERED_ONLINE_DT'; 
         attrib FIRST_LOGIN_DT length = 8
            format = DATETIME20.
            informat = DATETIME20.
            label = 'FIRST_LOGIN_DT'; 
         attrib ONLINE_BILL_PAYMENT_FLG length = $1
            format = $1.
            informat = $1.
            label = 'ONLINE_BILL_PAYMENT_FLG'; 
         attrib ID_VERIFICATION_TYPE_CD length = $3
            format = $3.
            informat = $3.
            label = 'ID_VERIFICATION_TYPE_CD'; 
         attrib PREVIOUS_ACCOUNT_ID length = $32
            format = $32.
            informat = $32.
            label = 'PREVIOUS_ACCOUNT_ID'; 
         attrib OPEN_BRANCH_FINANCIAL_UNIT_ID length = $32
            format = $32.
            informat = $32.
            label = 'OPEN_BRANCH_FINANCIAL_UNIT_ID'; 
         attrib PRIM_BRANCH_FINANCIAL_UNIT_ID length = $32
            format = $32.
            informat = $32.
            label = 'PRIM_BRANCH_FINANCIAL_UNIT_ID'; 
         attrib FINANCIAL_APPLICATION_ID length = $32
            format = $32.
            informat = $32.
            label = 'FINANCIAL_APPLICATION_ID'; 
         attrib CREDIT_FACILITY_ID length = $40
            format = $40.
            informat = $40.
            label = 'CREDIT_FACILITY_ID'; 
         attrib FUTURE_MARGIN_INCOME_AMT length = 8
            format = 20.5
            informat = 20.5
            label = 'FUTURE_MARGIN_INCOME_AMT'; 
         attrib IN_DEFAULT_FLG length = $1
            format = $1.
            informat = $1.
            label = 'IN_DEFAULT_FLG'; 
         attrib FINANCIAL_BOOK_ID length = $32
            format = $32.
            informat = $32.
            label = 'FINANCIAL_BOOK_ID'; 
         attrib IRRECOVERABLE_FLG length = $1
            format = $1.
            informat = $1.
            label = 'IRRECOVERABLE_FLG'; 
         attrib OWNED_BY_INTERNAL_ORG_ID length = $32
            format = $32.
            informat = $32.
            label = 'OWNED_BY_INTERNAL_ORG_ID'; 
         attrib PREVIOUS_BANK_EXTERNAL_ORG_ID length = $32
            format = $32.
            informat = $32.
            label = 'PREVIOUS_BANK_EXTERNAL_ORG_ID'; 
         attrib NETTING_SET_ID length = $32
            format = $32.
            informat = $32.
            label = 'NETTING_SET_ID'; 
         attrib REVOLVING_FLG length = $1
            format = $1.
            informat = $1.
            label = 'REVOLVING_FLG'; 
         attrib SOURCE_CHANNEL_CD length = $3
            format = $3.
            informat = $3.
            label = 'SOURCE_CHANNEL_CD'; 
         attrib GRACE_PERIOD_DAYS_CNT length = 8
            format = 7.
            informat = 7.
            label = 'GRACE_PERIOD_DAYS_CNT'; 
         attrib REMARGINING_DAYS_CNT length = 8
            format = 7.
            informat = 7.
            label = 'REMARGINING_DAYS_CNT'; 
         attrib FINANCIAL_CALENDAR_ID length = $32
            format = $32.
            informat = $32.
            label = 'FINANCIAL_CALENDAR_ID'; 
         attrib DAY_BASIS_CD length = $10
            format = $10.
            informat = $10.
            label = 'DAY_BASIS_CD'; 
         attrib PORTFOLIO_ID length = $32
            format = $32.
            informat = $32.
            label = 'PORTFOLIO_ID'; 
         attrib SECURITIZATION_POOL_ID length = $32
            format = $32.
            informat = $32.
            label = 'SECURITIZATION_POOL_ID'; 
         attrib RECEIVABLES_POOL_ID length = $32
            format = $32.
            informat = $32.
            label = 'RECEIVABLES_POOL_ID'; 
         attrib ACCOUNT_USAGE_TYPE_CD length = $3
            format = $3.
            informat = $3.
            label = 'ACCOUNT_USAGE_TYPE_CD'; 
         attrib RISK_ALARM_FLG length = $1
            format = $1.
            informat = $1.
            label = 'RISK_ALARM_FLG'; 
         attrib LOW_PROFITABILITY_FLG length = $1
            format = $1.
            informat = $1.
            label = 'LOW_PROFITABILITY_FLG'; 
         attrib ACCOUNT_LIFECYCLE_STG_CD length = $3
            format = $3.
            informat = $3.
            label = 'ACCOUNT_LIFECYCLE_STG_CD'; 
         attrib ATTRITION_ALARM_FLG length = $1
            format = $1.
            informat = $1.
            label = 'ATTRITION_ALARM_FLG'; 
         attrib BALANCE_FROZEN_FLG length = $1
            format = $1.
            informat = $1.
            label = 'BALANCE_FROZEN_FLG'; 
         attrib BALANCE_FROZEN_DT length = 8
            format = DATETIME20.
            informat = DATETIME20.
            label = 'BALANCE_FROZEN_DT'; 
         attrib ACCOUNT_BLOCK_REASON_CD length = $3
            format = $3.
            informat = $3.
            label = 'ACCOUNT_BLOCK_REASON_CD'; 
         attrib TAXATION_STATE_CD length = $4
            format = $4.
            informat = $4.
            label = 'TAXATION_STATE_CD'; 
         attrib EFFECTIVE_MATURITY_YEAR_NO length = 8
            format = 9.3
            informat = 9.3
            label = 'EFFECTIVE_MATURITY_YEAR_NO'; 
         attrib GL_ACCOUNT_ID length = $32
            format = $32.
            informat = $32.
            label = 'GL_ACCOUNT_ID'; 
         attrib FROM_OTHER_INSTITUTION_FLG length = $1
            format = $1.
            informat = $1.
            label = 'FROM_OTHER_INSTITUTION_FLG'; 
         attrib ACCOUNT_RENEWAL_CNT length = 8
            format = 7.
            informat = 7.
            label = 'ACCOUNT_RENEWAL_CNT'; 
         attrib BALANCE_TRANSFER_DT length = 8
            format = DATETIME20.
            informat = DATETIME20.
            label = 'BALANCE_TRANSFER_DT'; 
         attrib BALANCE_TRANSFER_AMT length = 8
            format = 20.5
            informat = 20.5
            label = 'BALANCE_TRANSFER_AMT'; 
         attrib BALANCE_TRANSFER_CNT length = 8
            format = 7.
            informat = 7.
            label = 'BALANCE_TRANSFER_CNT'; 
         attrib BASE_LONG_TERM_APR_RT length = 8
            format = 11.4
            informat = 11.4
            label = 'BASE_LONG_TERM_APR_RT'; 
         attrib BROKER_FLG length = $1
            format = $1.
            informat = $1.
            label = 'BROKER_FLG'; 
         attrib MULT_RATE_FLG length = $1
            format = $1.
            informat = $1.
            label = 'MULT_RATE_FLG'; 
         attrib AUTO_DEBIT_ACCOUNT_NO length = $32
            format = $32.
            informat = $32.
            label = 'AUTO_DEBIT_ACCOUNT_NO'; 
         attrib WORST_STATUS_LAST_12_MTH_CD length = $3
            format = $3.
            informat = $3.
            label = 'WORST_STATUS_LAST_12_MTH_CD'; 
         attrib WORST_STATUS_LAST_12_MTH_DT length = 8
            format = DATETIME20.
            informat = DATETIME20.
            label = 'WORST_STATUS_LAST_12_MTH_DT'; 
         attrib BALANCE_TRNSF_OTHER_ACCT_CNT length = 8
            format = 7.
            informat = 7.
            label = 'BALANCE_TRNSF_OTHER_ACCT_CNT'; 
         attrib EFFECTIVE_FROM_DTTM length = 8
            format = DATETIME20.
            informat = DATETIME20.
            label = 'EFFECTIVE_FROM_DTTM'; 
         attrib EFFECTIVE_TO_DTTM length = 8
            format = DATETIME20.
            informat = DATETIME20.
            label = 'EFFECTIVE_TO_DTTM'; 
         attrib COUNTERPARTY_ID length = $32
            format = $32.
            informat = $32.
            label = 'COUNTERPARTY_ID'; 
         attrib INSURED_BY_COUNTERPARTY_ID length = $32
            format = $32.
            informat = $32.
            label = 'INSURED_BY_COUNTERPARTY_ID'; 
         attrib STATEMENT_FREQUENCY_CD length = $3
            format = $3.
            informat = $3.
            label = 'STATEMENT_FREQUENCY_CD'; 
         attrib SECURITY_DEPOSIT_AMT length = 8
            format = 20.5
            informat = 20.5
            label = 'SECURITY_DEPOSIT_AMT'; 
         attrib SECURITY_DEPOSIT_REFUND_AMT length = 8
            format = 20.5
            informat = 20.5
            label = 'SECURITY_DEPOSIT_REFUND_AMT'; 
         attrib FIRST_PAYMENT_DT length = 8
            format = DATETIME20.
            informat = DATETIME20.
            label = 'FIRST_PAYMENT_DT'; 
         attrib LAST_PAYMENT_DT length = 8
            format = DATETIME20.
            informat = DATETIME20.
            label = 'LAST_PAYMENT_DT'; 
         attrib FIRST_RESET_DT length = 8
            format = DATETIME20.
            informat = DATETIME20.
            label = 'FIRST_RESET_DT'; 
         attrib LAST_RESET_DT length = 8
            format = DATETIME20.
            informat = DATETIME20.
            label = 'LAST_RESET_DT'; 
         attrib RESETS_PER_ANNUM_NO length = 8
            format = 6.
            informat = 6.
            label = 'RESETS_PER_ANNUM_NO'; 
         attrib PRINCIPAL_PAYMENT_TYPE_CD length = $3
            format = $3.
            informat = $3.
            label = 'PRINCIPAL_PAYMENT_TYPE_CD'; 
         attrib PRINCIPAL_PAYMENT_AMT length = 8
            format = 20.5
            informat = 20.5
            label = 'PRINCIPAL_PAYMENT_AMT'; 
         attrib RATE_POLICY_ID length = $32
            format = $32.
            informat = $32.
            label = 'RATE_POLICY_ID'; 
         attrib SPREAD_RT length = 8
            format = 11.4
            informat = 11.4
            label = 'SPREAD_RT'; 
         attrib DISCOUNT_SPREAD_RT length = 8
            format = 11.4
            informat = 11.4
            label = 'DISCOUNT_SPREAD_RT'; 
         attrib INITIAL_CONTRACT_RT length = 8
            format = 11.4
            informat = 11.4
            label = 'INITIAL_CONTRACT_RT'; 
         attrib FIXED_MONTHLY_PREPAYMENT_RT length = 8
            format = 11.4
            informat = 11.4
            label = 'FIXED_MONTHLY_PREPAYMENT_RT'; 
         attrib CAPITAL_ALLOCATION_ID length = $32
            format = $32.
            informat = $32.
            label = 'CAPITAL_ALLOCATION_ID'; 
         attrib CAPITAL_COST_ID length = $32
            format = $32.
            informat = $32.
            label = 'CAPITAL_COST_ID'; 
         attrib SEGMENT_ID length = $32
            format = $32.
            informat = $32.
            label = 'SEGMENT_ID'; 
         attrib NEAR_BRANCH_FINANCIAL_UNIT_ID length = $32
            format = $32.
            informat = $32.
            label = 'NEAR_BRANCH_FINANCIAL_UNIT_ID'; 
         attrib STATEMENT_OPT_FLG length = $1
            format = $1.
            informat = $1.
            label = 'STATEMENT_OPT_FLG'; 
         attrib VALUE_SCALING_FACTOR_RT length = 8
            format = 11.4
            informat = 11.4
            label = 'VALUE_SCALING_FACTOR_RT'; 
         attrib INTERNAL_REPORTING_CATEGORY_CD length = $3
            format = $3.
            informat = $3.
            label = 'INTERNAL_REPORTING_CATEGORY_CD'; 
         attrib CONVEXITY_ADJUSTMENT_FLG length = $1
            format = $1.
            informat = $1.
            label = 'CONVEXITY_ADJUSTMENT_FLG'; 
         attrib ARREARS_PAYMENT_CD length = $3
            format = $3.
            informat = $3.
            label = 'ARREARS_PAYMENT_CD'; 
         attrib QUANTO_FEATURE_ID length = $32
            format = $32.
            informat = $32.
            label = 'QUANTO_FEATURE_ID'; 
         attrib CASH_INTENSIVE_BUSINESS_FLG length = $1
            format = $1.
            informat = $1.
            label = 'CASH_INTENSIVE_BUSINESS_FLG'; 
         attrib LETTER_OF_CREDIT_ONFILE_FLG length = $1
            format = $1.
            informat = $1.
            label = 'LETTER_OF_CREDIT_ONFILE_FLG'; 
         attrib TRADE_FINANCE_FLG length = $1
            format = $1.
            informat = $1.
            label = 'TRADE_FINANCE_FLG'; 
         attrib ANNUITY_PAYMENT_TYPE_CD length = $3
            format = $3.
            informat = $3.
            label = 'ANNUITY_PAYMENT_TYPE_CD'; 
         attrib INTEREST_PAYMENT_TYPE_CD length = $3
            format = $3.
            informat = $3.
            label = 'INTEREST_PAYMENT_TYPE_CD'; 
         attrib INTEREST_PAYMENT_TIME_FREQ_CD length = $3
            format = $3.
            informat = $3.
            label = 'INTEREST_PAYMENT_TIME_FREQ_CD'; 
         attrib LIQUIDITY_CATEGORY_TYPE_CD length = $3
            format = $3.
            informat = $3.
            label = 'LIQUIDITY_CATEGORY_TYPE_CD'; 
         attrib HOLIDAY_DATE_ROLL_CONV_CD length = $3
            format = $3.
            informat = $3.
            label = 'HOLIDAY_DATE_ROLL_CONV_CD'; 
         attrib WEEKEND_DATE_ROLL_CONV_CD length = $3
            format = $3.
            informat = $3.
            label = 'WEEKEND_DATE_ROLL_CONV_CD'; 
         attrib EXPENSE_ALLOCATION_ID length = $32
            format = $32.
            informat = $32.
            label = 'EXPENSE_ALLOCATION_ID'; 
         attrib FIRST_INTEREST_PAYMENT_DT length = 8
            format = DATETIME20.
            informat = DATETIME20.
            label = 'FIRST_INTEREST_PAYMENT_DT'; 
         attrib LAST_INTEREST_PAYMENT_DT length = 8
            format = DATETIME20.
            informat = DATETIME20.
            label = 'LAST_INTEREST_PAYMENT_DT'; 
         attrib IRB_DUMMY_TYPE_CD length = $3
            format = $3.
            informat = $3.
            label = 'IRB_DUMMY_TYPE_CD'; 
         attrib IRB_SRC_ACCOUNT_ID length = $32
            format = $32.
            informat = $32.
            label = 'IRB_SRC_ACCOUNT_ID'; 
         attrib BRCA length = $3
            format = $3.
            informat = $3.
            label = 'BRCA'; 
         attrib FINANCIAL_INSTRUMENT_TYPE_CD length = $3
            format = $3.
            informat = $3.
            label = 'FINANCIAL_INSTRUMENT_TYPE_CD'; 
         call missing(of _all_);
         stop;
      run;
      
      %rcSet(&syserr); 
      
      /*---- Create the integrity constraints for a table  ----*/ 
      %put %str(NOTE: Creating integrity constraints ...);
      proc datasets library=work_ia nolist;
         modify FINANCIAL_ACCOUNT_FWD_BK;
            ic create not null (ACCOUNT_ID);
            ic create not null (SOURCE_SYSTEM_CD);
            ic create not null (FINANCIAL_ACCOUNT_TYPE_CD);
            ic create not null (ACCOUNT_STATUS_CD);
            ic create not null (CURRENCY_CD);
            ic create not null (PRIM_BRANCH_FINANCIAL_UNIT_ID);
            ic create not null (BRCA);
            ic create Index1 = primary key (ACCOUNT_ID VALID_FROM_DTTM);
      quit;
      
      %rcSet(&syserr); 
      
   %end;  /* if table does not exist  */ 
   
   /*---- Append  ----*/ 
   %put %str(NOTE: Appending data ...);
   
   proc append base = work_ia.FINANCIAL_ACCOUNT_FWD_BK 
      data = &etls_lastTable (&etls_tableOptions)  force ; 
    run; 
   
   %rcSet(&syserr); 
   
   proc datasets lib = work nolist nowarn memtype = (data view);
      delete WIROKDV;
   quit;
   
%mend etls_loader;
%etls_loader;

%let etls_recCheckExist = 0; 
%let etls_recnt = 0; 
%macro etls_recordCheck; 
   %let etls_recCheckExist = %eval(%sysfunc(exist(work_ia.FINANCIAL_ACCOUNT_FWD_BK, DATA)) or 
         %sysfunc(exist(work_ia.FINANCIAL_ACCOUNT_FWD_BK, VIEW))); 
   
   %if (&etls_recCheckExist) %then
   %do;
      %local etls_syntaxcheck; 
      %let etls_syntaxcheck = %sysfunc(getoption(syntaxcheck)); 
      /* Turn off syntaxcheck option to perform following steps  */ 
      options nosyntaxcheck;
      
      proc contents data = work_ia.FINANCIAL_ACCOUNT_FWD_BK out = work.etls_contents(keep = nobs) noprint; 
      run; 
      
      data _null_; 
         set work.etls_contents (obs = 1); 
         call symput("etls_recnt", left(put(nobs,32.))); 
      run;
      
      proc datasets lib = work nolist nowarn memtype = (data view);
         delete etls_contents;
      quit;
      
      /* Reset syntaxcheck option to previous setting  */ 
      options &etls_syntaxcheck; 
   %end;
%mend etls_recordCheck;
%etls_recordCheck;



/**  Step end Table Loader **/

/*==========================================================================* 
 * Step:            Table Loader                          A5Y50FNE.AQ0008A4 * 
 * Transform:       Table Loader (Version 2.1)                              * 
 * Description:                                                             * 
 *                                                                          * 
 * Source Table:    SQL Join - work.WVCS481               A5Y50FNE.AO0004ON * 
 * Target Table:    FIN_INSTR_ASSOC_FWD_BK -              A5Y50FNE.AE000125 * 
 *                   work_ia.FIN_INSTR_ASSOC_FWD_BK                         * 
 *==========================================================================*/ 

%let transformID = %quote(A5Y50FNE.AQ0008A4);
%let trans_rc = 0;
%let etls_stepStartTime = %sysfunc(datetime(), datetime20.); 

%let SYSLAST = %nrquote(work.WVCS481); 

%let SYS_SQL_IP_SPEEDO = Y;
%let SYS_SQL_MAPPUTTO = sas_put;
%let SYS_SQLREDUCEPUT = DBMS;
%global etls_sql_pushDown;
%let etls_sql_pushDown = -1;
option DBIDIRECTEXEC;

%global etls_tableExist;
%global etls_numIndex;
%global etls_lastTable;
%let etls_tableExist = -1; 
%let etls_numIndex = -1; 
%let etls_lastTable = &SYSLAST; 

/*---- Define load data macro  ----*/ 

/* --------------------------------------------------------------
   Load Technique Selection: Replace - EntireTable
   Constraint and index action selections: 'INIT','ASIS','ASIS','ASIS'
   Additional options selections... 
      Set unmapped to missing on updates: false 
   -------------------------------------------------------------- */
%macro etls_loader;

   %let etls_tableOptions = ;
   
   /*---- Map the columns  ----*/ 
   proc datasets lib = work nolist nowarn memtype = (data view);
      delete WIROKJK;
   quit;
   
   %put %str(NOTE: Mapping columns ...);
   proc sql;
      create view work.WIROKJK as
         select
            FINANCIAL_INSTRUMENT_ID as FINANCIAL_INSTRUMENT_ASSOC_ID,
            VALID_FROM_DTTM,
            VALID_TO_DTTM,
            ('DRV') as FINANCIAL_INSTR_ASSOC_TYPE_CD length = 3
               format = $3.
               informat = $3.,
            FINANCIAL_INSTRUMENT_ID,
            REFERENCE_ACCOUNT_ID
      from &etls_lastTable
      ;
   quit;
   
   %let SYSLAST = work.WIROKJK;
   
   %let etls_lastTable = &SYSLAST; 
   %let etls_tableOptions = ; 
   
   /* Determine if the target table exists  */ 
   %let etls_tableExist = %eval(%sysfunc(exist(work_ia.FIN_INSTR_ASSOC_FWD_BK, DATA)) or 
         %sysfunc(exist(work_ia.FIN_INSTR_ASSOC_FWD_BK, VIEW))); 
   
   %if &etls_tableExist %then 
   %do;/* table exists  */ 
      %let etls_hasPreExistingConstraint=0; 
      
      proc datasets lib = work nolist nowarn memtype = (data view);
         delete etls_commands etls_commands_F;
      quit;
      
      %let etls_otherTablesReferToThisTable=0;
      
      %macro etls_CIContents(table=,workTableOut=,inDSOptions=);
         %put NOTE: Building table listing Constraints and Indexes for: &table;
         proc datasets lib=work nolist; delete &workTableOut; quit;
         proc contents data=&table&inDSOptions out2=&workTableOut noprint; run;
         
         data &workTableOut;
            length name $60 type $20 icown idxUnique idxNoMiss $3 recreate $600;
            set &workTableOut;
            type=upcase(type);
            if type eq 'REFERENTIAL' then
            do;
               put "WARNING%QUOTE(:) Target table is referenced by constraints in"
                    " another table: " ref;
               call symput('etls_otherTablesReferToThisTable','1');
               delete;
            end;
            if type='INDEX' and ICOwn eq 'YES' then delete;
         run;
         %rcSet(&syserr); 
         
      %mend etls_CIContents;
      
      %etls_CIContents(table=work_ia.FIN_INSTR_ASSOC_FWD_BK, workTableOut=etls_commands, inDSOptions=);
      
      %if &etls_otherTablesReferToThisTable %then 
         %put WARNING%QUOTE(:) Replacing entire table will fail. Consider an alternate load technique or revising constraints.; 
      %else 
      %do; /* okay - remove foreign keys  */ 
      
         data etls_commands_F; 
            set etls_commands; 
            if upcase(type)="FOREIGN KEY" then 
            do; 
               command='ic delete '||trim(name)||';';
               output etls_commands_F; 
            end; 
         run; 
         
         %put %str(NOTE: Removing foreign keys before dropping table...);
         data _null_;
            set etls_commands_F;
            %rcSet(&syserr); 
            
      %end; /* okay - remove foreign keys  */ 
      
      proc datasets lib = work nolist nowarn memtype = (data view);
         delete etls_commands etls_commands_F;
      quit;
      
      /*---- Drop a table  ----*/ 
      %put %str(NOTE: Dropping table ...);
      proc datasets lib = work_ia nolist nowarn memtype = (data view);
         delete FIN_INSTR_ASSOC_FWD_BK;
      quit;
      
      %rcSet(&syserr); 
      
      %let etls_tableExist = 0;
      
   %end; /* table exists  */ 
   
   /*---- Create a new table  ----*/ 
   %if (&etls_tableExist eq 0) %then 
   %do;  /* if table does not exist  */ 
   
      %put %str(NOTE: Creating table ...);
      
      data work_ia.FIN_INSTR_ASSOC_FWD_BK;
         attrib FINANCIAL_INSTRUMENT_ASSOC_ID length = $32
            format = $32.
            informat = $32.
            label = 'FINANCIAL_INSTRUMENT_ASSOC_ID'; 
         attrib VALID_FROM_DTTM length = 8
            format = DATETIME20.
            informat = DATETIME20.
            label = 'VALID_FROM_DTTM'; 
         attrib VALID_TO_DTTM length = 8
            format = DATETIME20.
            informat = DATETIME20.
            label = 'VALID_TO_DTTM'; 
         attrib FINANCIAL_INSTR_ASSOC_TYPE_CD length = $3
            format = $3.
            informat = $3.
            label = 'FINANCIAL_INSTR_ASSOC_TYPE_CD'; 
         attrib FINANCIAL_INSTRUMENT_ID length = $32
            format = $32.
            informat = $32.
            label = 'FINANCIAL_INSTRUMENT_ID'; 
         attrib REFERENCE_ACCOUNT_ID length = $32
            format = $32.
            informat = $32.
            label = 'FINANCIAL_ACCOUNT_ID'; 
         call missing(of _all_);
         stop;
      run;
      
      %rcSet(&syserr); 
      
      /*---- Create the integrity constraints for a table  ----*/ 
      %put %str(NOTE: Creating integrity constraints ...);
      proc datasets library=work_ia nolist;
         modify FIN_INSTR_ASSOC_FWD_BK;
            ic create not null (FINANCIAL_INSTRUMENT_ASSOC_ID);
            ic create not null (VALID_FROM_DTTM);
            ic create not null (VALID_TO_DTTM);
            ic create not null (FINANCIAL_INSTR_ASSOC_TYPE_CD);
            ic create not null (FINANCIAL_INSTRUMENT_ID);
            ic create not null (REFERENCE_ACCOUNT_ID);
            ic create pk_index = primary key (FINANCIAL_INSTRUMENT_ASSOC_ID VALID_FROM_DTTM);
      quit;
      
      %rcSet(&syserr); 
      
   %end;  /* if table does not exist  */ 
   
   /*---- Append  ----*/ 
   %put %str(NOTE: Appending data ...);
   
   proc append base = work_ia.FIN_INSTR_ASSOC_FWD_BK 
      data = &etls_lastTable (&etls_tableOptions)  force ; 
    run; 
   
   %rcSet(&syserr); 
   
   proc datasets lib = work nolist nowarn memtype = (data view);
      delete WIROKJK;
   quit;
   
%mend etls_loader;
%etls_loader;

%let etls_recCheckExist = 0; 
%let etls_recnt = 0; 
%macro etls_recordCheck; 
   %let etls_recCheckExist = %eval(%sysfunc(exist(work_ia.FIN_INSTR_ASSOC_FWD_BK, DATA)) or 
         %sysfunc(exist(work_ia.FIN_INSTR_ASSOC_FWD_BK, VIEW))); 
   
   %if (&etls_recCheckExist) %then
   %do;
      %local etls_syntaxcheck; 
      %let etls_syntaxcheck = %sysfunc(getoption(syntaxcheck)); 
      /* Turn off syntaxcheck option to perform following steps  */ 
      options nosyntaxcheck;
      
      proc contents data = work_ia.FIN_INSTR_ASSOC_FWD_BK out = work.etls_contents(keep = nobs) noprint; 
      run; 
      
      data _null_; 
         set work.etls_contents (obs = 1); 
         call symput("etls_recnt", left(put(nobs,32.))); 
      run;
      
      proc datasets lib = work nolist nowarn memtype = (data view);
         delete etls_contents;
      quit;
      
      /* Reset syntaxcheck option to previous setting  */ 
      options &etls_syntaxcheck; 
   %end;
%mend etls_recordCheck;
%etls_recordCheck;



/**  Step end Table Loader **/

/*==========================================================================* 
 * Step:            Завершить модуль                      A5Y50FNE.AQ0008A5 * 
 * Transform:       Завершить модуль                                        * 
 * Description:                                                             * 
 *==========================================================================*/ 

%let transformID = %quote(A5Y50FNE.AQ0008A5);
%let trans_rc = 0;
%let etls_stepStartTime = %sysfunc(datetime(), datetime20.); 

%let _INPUT_count = 0; 
%let _OUTPUT_count = 0; 


/*****************************************************************
* ВЕРСИЯ:
*   $Id: transform_job_finish.sas 247 2012-04-03 07:31:10Z nesterenok $
*
******************************************************************
* НАЗНАЧЕНИЕ:
*   Регистрирует конец модуля ETL.
*
* ПАРАМЕТРЫ:
*   нет
*
******************************************************************/

%macro transform_job_finish;

   /* Продолжаем модуль */
   %job_continue_reg(mpJobType=JOB, mpJobName=&ETLS_JobName., mpPostEvent=N);

   /* Завершаем модуль */
   %job_finish_reg(mpJobType=JOB);

%mend transform_job_finish;

%transform_job_finish;


%rcSet(&syserr); 
%rcSet(&sysrc); 
%rcSet(&sqlrc); 



/**  Step end Завершить модуль **/

%let etls_endTime = %sysfunc(datetime(),datetime.);



/**  Job end 042_948_Structure_FINANCIAL_ACCOUNT_FWD_BK **/

/* Reset jobid and name */
%let jobID = %quote(A569C89V.AQ0000CK);
%let etls_jobName = %nrquote(090_364_Stream_Midas_Fin_Account_BK);

/**************************************************************************** 
 * Job:             042_943_Structure_FINANCIAL_ACCOUNT_  A5Y50FNE.AN0000VL * 
 *                  DCD_BK                                                  * 
 * Description:                                                             * 
 *                                                                          * 
 * Metadata Server: bravo14                                                 * 
 * Port:            8561                                                    * 
 * Location:        /DWH_DWHDDS_IA/Jobs/042_Structure/Financial_Account     * 
 *                                                                          * 
 * Server:          SASApp                                A5C46MZY.AQ000002 * 
 *                                                                          * 
 * Source Tables:   FINANCIAL_INSTRUMENT_DCD_BK -         A5Y50FNE.AE00013U * 
 *                   work_ia.FINANCIAL_INSTRUMENT_DCD_BK                    * 
 *                  FIN_INSTR_C_BK -                      A5Y50FNE.AE00013I * 
 *                   work_ia.FIN_INSTR_C_BK                                 * 
 *                  CURRENCY_SNAP - etl_ia.CURRENCY_SNAP  A5Y50FNE.AE0000X4 * 
 * Target Tables:   FIN_INSTR_ASSOC_DCD_BK -              A5Y50FNE.AE000121 * 
 *                   work_ia.FIN_INSTR_ASSOC_DCD_BK                         * 
 *                  CUSTOMER_X_FIN_ACC_DCD_BK -           A5Y50FNE.AE00011M * 
 *                   work_ia.CUSTOMER_X_FIN_ACC_DCD_BK                      * 
 *                  FINANCIAL_ACCOUNT_ASSOC_DRV_BK -      A5Y50FNE.AE00012C * 
 *                  work_ia.FINANCIAL_ACCOUNT_ASSOC_DRV                     * 
 *                  _BK                                                     * 
 *                  CUSTOMER_X_FIN_ACC_DCD_D2_BK -        A5Y50FNE.AE00011N * 
 *                   work_ia.CUSTOMER_X_FIN_ACC_DCD_D2_BK                   * 
 *                  FINANCIAL_ACCOUNT_DCD_BK -            A5Y50FNE.AE00012G * 
 *                   work_ia.FINANCIAL_ACCOUNT_DCD_BK                       * 
 *                                                                          * 
 * Generated on:    16 Июль 2013 г. 17:14:46 MSD                            * 
 * Generated by:    sasdwh                                                  * 
 * Version:         SAS Data Integration Studio 4.5                         * 
 ****************************************************************************/ 

/* General macro variables  */ 
%let jobID = %quote(A5Y50FNE.AN0000VL);
%let etls_jobName = %nrquote(042_943_Structure_FINANCIAL_ACCOUNT_DCD_BK);
%let etls_userID = %nrquote(sasdwh);


/* Create metadata macro variables */
%let IOMServer      = %nrquote(SASApp);
%let metaPort       = %nrquote(8561);
%let metaServer     = %nrquote(bravo14);

/* Set metadata options */
options metaport       = &metaPort 
        metaserver     = "&metaServer"; 

/* Setup for capturing job status  */ 
%let etls_startTime = %sysfunc(datetime(),datetime.);
%let etls_recordsBefore = 0;
%let etls_recordsAfter = 0;
%let etls_lib = 0;
%let etls_table = 0;

%global etls_debug; 
%macro etls_setDebug; 
   %if %str(&etls_debug) ne 0 %then 
      OPTIONS MPRINT%str(;); 
%mend; 
%etls_setDebug; 

/*==========================================================================* 
 * Step:            Начать модуль                         A5Y50FNE.AQ000AFM * 
 * Transform:       Начать модуль                                           * 
 * Description:                                                             * 
 *==========================================================================*/ 

%let transformID = %quote(A5Y50FNE.AQ000AFM);
%let trans_rc = 0;
%let etls_stepStartTime = %sysfunc(datetime(), datetime20.); 

%let _INPUT_count = 0; 
%let _OUTPUT_count = 0; 


/*****************************************************************
* ВЕРСИЯ:
*   $Id: transform_job_start.sas 1747 2012-08-01 11:26:13Z nesterenok $
*
******************************************************************
* НАЗНАЧЕНИЕ:
*   Регистрирует начало модуля ETL.
*
* ПАРАМЕТРЫ:
*   нет
*
******************************************************************/

%macro transform_job_start;

   /* Продолжаем поток (или создаем новый) */
   %local lmvStreamName;
   %if %sysfunc(sysexist(LSB_JOBNAME)) %then
      %let lmvStreamName = %scan(%sysfunc(sysget(LSB_JOBNAME)), 3, :);
   %else
      %let lmvStreamName = ;

   %job_continue_reg(mpJobType=STREAM, mpJobName=&lmvStreamName, mpPostEvent=N, mpForcedStart=Y);

   /* Для DI, начинаем поток заново, если старый был начат не сегодня */
   %if %length(&lmvStreamName) eq 0 and &STREAM_START_DT ne %sysfunc(today()) %then %do;
      %job_start_reg(mpJobType=STREAM, mpParentJobId=, mpJobName=&lmvStreamName.);
   %end;

   /* Начинаем модуль */
   %job_start_reg(mpJobType=JOB, mpParentJobId=&STREAM_ID, mpJobName=&ETLS_JobName.);

%mend transform_job_start;

%transform_job_start;


%rcSet(&syserr); 
%rcSet(&sysrc); 
%rcSet(&sqlrc); 



/**  Step end Начать модуль **/

/*==========================================================================* 
 * Step:            Отбор первых и актуальных записей с   A5Y50FNE.AQ000AFN * 
 *                   учетом ног                                             * 
 * Transform:       Splitter                                                * 
 * Description:                                                             * 
 *                                                                          * 
 * Source Table:    FINANCIAL_INSTRUMENT_DCD_BK -         A5Y50FNE.AE00013U * 
 *                   work_ia.FINANCIAL_INSTRUMENT_DCD_BK                    * 
 * Target Tables:   first recs - work.W1B87YYR            A5Y50FNE.AO0005UQ * 
 *                  actual recs - work.W1BAZY4C           A5Y50FNE.AO0005UR * 
 *==========================================================================*/ 

%let transformID = %quote(A5Y50FNE.AQ000AFN);
%let trans_rc = 0;
%let etls_stepStartTime = %sysfunc(datetime(), datetime20.); 

%let etls_recCheckExist = 0; 
%let etls_recnt = 0; 
%macro etls_recordCheck; 
   %let etls_recCheckExist = %eval(%sysfunc(exist(work_ia.FINANCIAL_INSTRUMENT_DCD_BK, DATA)) or 
         %sysfunc(exist(work_ia.FINANCIAL_INSTRUMENT_DCD_BK, VIEW))); 
   
   %if (&etls_recCheckExist) %then
   %do;
      %local etls_syntaxcheck; 
      %let etls_syntaxcheck = %sysfunc(getoption(syntaxcheck)); 
      /* Turn off syntaxcheck option to perform following steps  */ 
      options nosyntaxcheck;
      
      proc contents data = work_ia.FINANCIAL_INSTRUMENT_DCD_BK out = work.etls_contents(keep = nobs) noprint; 
      run; 
      
      data _null_; 
         set work.etls_contents (obs = 1); 
         call symput("etls_recnt", left(put(nobs,32.))); 
      run;
      
      proc datasets lib = work nolist nowarn memtype = (data view);
         delete etls_contents;
      quit;
      
      /* Reset syntaxcheck option to previous setting  */ 
      options &etls_syntaxcheck; 
   %end;
%mend etls_recordCheck;
%etls_recordCheck;

%let SYSLAST = %nrquote(work_ia.FINANCIAL_INSTRUMENT_DCD_BK); 

proc datasets lib=work nolist nowarn memtype = (data view);
   delete W1B87YYR;
   delete W1BAZY4C;
quit;

data 
     work.W1B87YYR
     work.W1BAZY4C;
   set &SYSLAST;
   if FSRT=1 then 
      output work.W1B87YYR;
   if VALID_TO_DTTM = &ETL_SCD_FUTURE_DTTM then 
      output work.W1BAZY4C;
run;

%rcSet(&syserr); 

/*---- Map the columns  ----*/ 
proc datasets lib = work nolist nowarn memtype = (data view);
   delete etls_mapped;
quit;

%put %str(NOTE: Mapping columns ...);
proc sql;
   create table work.etls_mapped as
      select
         VALID_FROM_DTTM,
         FINANCIAL_INSTRUMENT_ID,
         IRB_SRC_ACCOUNT_ID,
         DDAT
   from work.W1B87YYR
   ;
quit;

%let SYSLAST = work.etls_mapped;

data work.W1B87YYR;
  set work.etls_mapped;
run;

proc datasets lib = work nolist nowarn memtype = (data view);
   delete etls_mapped;
quit;

%rcSet(&syscc); 

/*---- Map the columns  ----*/ 
proc datasets lib = work nolist nowarn memtype = (data view);
   delete etls_mapped;
quit;

%put %str(NOTE: Mapping columns ...);
proc sql;
   create table work.etls_mapped as
      select
         FINANCIAL_INSTRUMENT_ID,
         FIRST_PAYMENT_DT,
         FINANCIAL_INSTRUMENT_TYPE_CD,
         CURRENCY_CD,
         IRB_INSTR_STATUS_CD,
         IRB_SRC_ACCOUNT_ID,
         KONDOR_A   
            format = 11.
            informat = 11.,
         ARM302P_ID,
         FXMM_ID,
         BRCA,
         CNUM,
         LNKDN,
         MDAT
   from work.W1BAZY4C
   ;
quit;

%let SYSLAST = work.etls_mapped;

data work.W1BAZY4C;
  set work.etls_mapped;
run;

proc datasets lib = work nolist nowarn memtype = (data view);
   delete etls_mapped;
quit;

%rcSet(&syscc); 



/**  Step end Отбор первых и актуальных записей с учетом ног **/

/*==========================================================================* 
 * Step:            Собираем данные по сделке             A5Y50FNE.AQ000AFO * 
 * Transform:       Join                                                    * 
 * Description:                                                             * 
 *                                                                          * 
 * Source Tables:   actual recs - work.W1BAZY4C           A5Y50FNE.AO0005UR * 
 *                  first recs - work.W1B87YYR            A5Y50FNE.AO0005UQ * 
 * Target Table:    SQL Join - work.W1B4DNDN              A5Y50FNE.AO0005US * 
 *==========================================================================*/ 

%let transformID = %quote(A5Y50FNE.AQ000AFO);
%let trans_rc = 0;
%let etls_stepStartTime = %sysfunc(datetime(), datetime20.); 

%let etls_recCheckExist = 0; 
%let etls_recnt = 0; 
%macro etls_recordCheck; 
   %let etls_recCheckExist = %eval(%sysfunc(exist(work.W1BAZY4C, DATA)) or 
         %sysfunc(exist(work.W1BAZY4C, VIEW))); 
   
   %if (&etls_recCheckExist) %then
   %do;
      %local etls_syntaxcheck; 
      %let etls_syntaxcheck = %sysfunc(getoption(syntaxcheck)); 
      /* Turn off syntaxcheck option to perform following steps  */ 
      options nosyntaxcheck;
      
      proc contents data = work.W1BAZY4C out = work.etls_contents(keep = nobs) noprint; 
      run; 
      
      data _null_; 
         set work.etls_contents (obs = 1); 
         call symput("etls_recnt", left(put(nobs,32.))); 
      run;
      
      proc datasets lib = work nolist nowarn memtype = (data view);
         delete etls_contents;
      quit;
      
      /* Reset syntaxcheck option to previous setting  */ 
      options &etls_syntaxcheck; 
   %end;
%mend etls_recordCheck;
%etls_recordCheck;

%let SYS_SQL_IP_SPEEDO = Y;
%let SYS_SQL_MAPPUTTO = sas_put;
%let SYS_SQLREDUCEPUT = DBMS;
%global etls_sql_pushDown;
%let etls_sql_pushDown = -1;
option DBIDIRECTEXEC;

proc datasets lib = work nolist nowarn memtype = (data view);
   delete W1B4DNDN;
quit;

proc sql;
   create view work.W1B4DNDN as
   select
      W1B87YYR.VALID_FROM_DTTM length = 8   
         format = DATETIME20.
         informat = DATETIME20.
         label = 'VALID_FROM_DTTM',
      W1BAZY4C.FINANCIAL_INSTRUMENT_ID length = 32   
         format = $32.
         informat = $32.
         label = 'FINANCIAL_INSTRUMENT_ID',
      W1B87YYR.IRB_SRC_ACCOUNT_ID length = 32   
         format = $32.
         informat = $32.
         label = 'IRB_SRC_ACCOUNT_ID',
      W1B87YYR.DDAT length = 8   
         format = DATETIME20.
         informat = DATETIME20.
         label = 'DDAT',
      W1BAZY4C.FIRST_PAYMENT_DT length = 8   
         format = DATETIME20.
         informat = DATETIME20.
         label = 'FIRST_PAYMENT_DT',
      W1BAZY4C.FINANCIAL_INSTRUMENT_TYPE_CD length = 3   
         format = $3.
         informat = $3.
         label = 'FINANCIAL_INSTRUMENT_TYPE_CD',
      W1BAZY4C.CURRENCY_CD length = 3   
         format = $3.
         informat = $3.
         label = 'CURRENCY_CD',
      W1BAZY4C.IRB_INSTR_STATUS_CD length = 3   
         format = $3.
         informat = $3.
         label = 'IRB_INSTR_STATUS_CD',
      W1BAZY4C.KONDOR_A length = 8   
         format = 11.
         informat = 11.
         label = 'KONDOR_A',
      W1BAZY4C.ARM302P_ID length = 8   
         format = 11.
         informat = 11.
         label = 'ARM302P_ID',
      W1BAZY4C.FXMM_ID length = 8   
         format = 11.
         informat = 11.
         label = 'FXMM_ID',
      W1BAZY4C.BRCA length = 3   
         format = $3.
         informat = $3.
         label = 'BRCA',
      W1BAZY4C.CNUM length = 8   
         format = 7.
         informat = 7.
         label = 'CNUM',
      W1BAZY4C.LNKDN length = 8   
         format = 7.
         informat = 7.
         label = 'LNKDN',
      W1BAZY4C.MDAT length = 8   
         format = DATETIME20.
         informat = DATETIME20.
         label = 'MDAT'
   from
      work.W1B87YYR, 
      work.W1BAZY4C
   where
      W1B87YYR.IRB_SRC_ACCOUNT_ID = W1BAZY4C.IRB_SRC_ACCOUNT_ID
   ;
quit;

%global etls_sql_pushDown;
%let etls_sql_pushDown = &sys_sql_ip_all;

%rcSet(&sqlrc); 



/**  Step end Собираем данные по сделке **/

/*==========================================================================* 
 * Step:            Extract                               A5Y50FNE.AQ000AFP * 
 * Transform:       Extract                                                 * 
 * Description:                                                             * 
 *                                                                          * 
 * Source Table:    SQL Join - work.W1B4DNDN              A5Y50FNE.AO0005US * 
 * Target Table:    Extract - work.W1MOEVV1               A5Y50FNE.AO0005UT * 
 *==========================================================================*/ 

%let transformID = %quote(A5Y50FNE.AQ000AFP);
%let trans_rc = 0;
%let etls_stepStartTime = %sysfunc(datetime(), datetime20.); 

%let etls_recnt = -1;
%let SYSLAST = %nrquote(work.W1B4DNDN); 

%let SYS_SQL_IP_SPEEDO = Y;
%let SYS_SQL_MAPPUTTO = sas_put;
%let SYS_SQLREDUCEPUT = DBMS;
%global etls_sql_pushDown;
%let etls_sql_pushDown = -1;
option DBIDIRECTEXEC;

/*---- Map the columns  ----*/ 
proc datasets lib = work nolist nowarn memtype = (data view);
   delete W1MOEVV1;
quit;

data _null_;
   put "NOTE: The following column(s) do not have a column mapping, so the"
        " value(s) will be set to missing: CLOSE_DT, DAY_BASIS_CD,"
        " INTEREST_PAYMENT_TYPE_CD";
run;

%put %str(NOTE: Mapping columns ...);
proc sql;
   create view work.W1MOEVV1 as
      select
         VALID_FROM_DTTM,
         FINANCIAL_INSTRUMENT_ID,
         (&ETL_SCD_FUTURE_DTTM) as VALID_TO_DTTM length = 8
            format = DATETIME20.
            informat = DATETIME20.
            label = 'VALID_TO_DTTM',
         IRB_SRC_ACCOUNT_ID,
         ('MID') as SOURCE_SYSTEM_CD length = 3
            format = $3.
            informat = $3.
            label = 'SOURCE_SYSTEM_CD',
         (ifc(missing(KONDOR_A), '', cats(KONDOR_A))) as ACCOUNT_REGISTRATION_NM length = 100
            format = $100.
            informat = $100.
            label = 'ACCOUNT_REGISTRATION_NM',
         (ifc(missing(ARM302P_ID), '', cats(FXMM_ID, '_', ARM302P_ID))) as ALTERNATE_ACCOUNT_NM length = 40
            format = $40.
            informat = $40.
            label = 'ALTERNATE_ACCOUNT_NM',
         ('DCD') as FINANCIAL_ACCOUNT_TYPE_CD length = 3
            format = $3.
            informat = $3.
            label = 'FINANCIAL_ACCOUNT_TYPE_CD',
         BRCA,
         IRB_INSTR_STATUS_CD as ACCOUNT_STATUS_CD   
            label = 'ACCOUNT_STATUS_CD',
         DDAT as OPEN_DT   
            label = 'OPEN_DT',
         . as CLOSE_DT length = 8
            format = DATETIME20.
            informat = DATETIME20.
            label = 'corrected later',
         CURRENCY_CD,
         "" as DAY_BASIS_CD length = 10
            format = $10.
            informat = $10.
            label = 'DAY_BASIS_CD',
         "" as INTEREST_PAYMENT_TYPE_CD length = 3
            format = $3.
            informat = $3.
            label = 'INTEREST_PAYMENT_TYPE_CD',
         FINANCIAL_INSTRUMENT_TYPE_CD,
         (put(CNUM ,z8.)) as CUSTOMER_NO length = 8,
         LNKDN
   from &SYSLAST
   ;
quit;

%let SYSLAST = work.W1MOEVV1;

%global etls_sql_pushDown;
%let etls_sql_pushDown = &sys_sql_ip_all;

%rcSet(&sqlrc); 



/**  Step end Extract **/

/*==========================================================================* 
 * Step:            Генерация BK                          A5Y50FNE.AQ000AFQ * 
 * Transform:       Генерация BK                                            * 
 * Description:                                                             * 
 *                                                                          * 
 * Source Table:    Extract - work.W1MOEVV1               A5Y50FNE.AO0005UT * 
 * Target Table:    dcd - work.W1MHBF25                   A5Y50FNE.AO0005UU * 
 *==========================================================================*/ 

%let transformID = %quote(A5Y50FNE.AQ000AFQ);
%let trans_rc = 0;
%let etls_stepStartTime = %sysfunc(datetime(), datetime20.); 

%let etls_recnt = -1;
%let SYSLAST = %nrquote(work.W1MOEVV1); 

%let _INPUT_count = 1; 
%let _INPUT = work.W1MOEVV1;
%let _INPUT_connect = ;
%let _INPUT_engine = ;
%let _INPUT_memtype = VIEW;
%let _INPUT_options = %nrquote();
%let _INPUT_alter = %nrquote();
%let _INPUT_path = %nrquote(/Extract_A5Y50FNE.AO0005UT%(WorkTable%));
%let _INPUT_type = 1;
%let _INPUT_label = %nrquote();

%let tpIn = work.W1MOEVV1;
%let tpIn_connect = ;
%let tpIn_engine = ;
%let tpIn_memtype = VIEW;
%let tpIn_options = %nrquote();
%let tpIn_alter = %nrquote();
%let tpIn_path = %nrquote(/Extract_A5Y50FNE.AO0005UT%(WorkTable%));
%let tpIn_type = 1;
%let tpIn_label = %nrquote();

%let _OUTPUT_count = 1; 
%let _OUTPUT = work.W1MHBF25;
%let _OUTPUT_connect = ;
%let _OUTPUT_engine = ;
%let _OUTPUT_memtype = DATA;
%let _OUTPUT_options = %nrquote();
%let _OUTPUT_alter = %nrquote();
%let _OUTPUT_path = %nrquote(/dcd_A5Y50FNE.AO0005UU%(WorkTable%));
%let _OUTPUT_type = 1;
%let _OUTPUT_label = %nrquote();
/* List of target columns to keep  */ 
%let _OUTPUT_keep = DRV_ACCOUNT_ID FCC_COUNTERPARTY_ID VALID_FROM_DTTM 
        FINANCIAL_INSTRUMENT_ID VALID_TO_DTTM SOURCE_SYSTEM_CD 
        ACCOUNT_REGISTRATION_NM ALTERNATE_ACCOUNT_NM FINANCIAL_ACCOUNT_TYPE_CD 
        ACCOUNT_STATUS_CD OPEN_DT CLOSE_DT CURRENCY_CD DAY_BASIS_CD 
        INTEREST_PAYMENT_TYPE_CD IRB_SRC_ACCOUNT_ID MID_FINANCIAL_UNIT_ID_BRCA 
        LNKDN BRCA;

%let tpOut = work.W1MHBF25;
%let tpOut_connect = ;
%let tpOut_engine = ;
%let tpOut_memtype = DATA;
%let tpOut_options = %nrquote();
%let tpOut_alter = %nrquote();
%let tpOut_path = %nrquote(/dcd_A5Y50FNE.AO0005UU%(WorkTable%));
%let tpOut_type = 1;
%let tpOut_label = %nrquote();
/* List of target columns to keep  */ 
%let tpOut_keep = DRV_ACCOUNT_ID FCC_COUNTERPARTY_ID VALID_FROM_DTTM 
        FINANCIAL_INSTRUMENT_ID VALID_TO_DTTM SOURCE_SYSTEM_CD 
        ACCOUNT_REGISTRATION_NM ALTERNATE_ACCOUNT_NM FINANCIAL_ACCOUNT_TYPE_CD 
        ACCOUNT_STATUS_CD OPEN_DT CLOSE_DT CURRENCY_CD DAY_BASIS_CD 
        INTEREST_PAYMENT_TYPE_CD IRB_SRC_ACCOUNT_ID MID_FINANCIAL_UNIT_ID_BRCA 
        LNKDN BRCA;


proc datasets lib=work nolist nowarn memtype = (data view);
   delete W1MHBF25;
quit;

%let tpBK = %nrquote(FINANCIAL_ACCOUNT_DRV           );
%let tpBK0 = %nrquote(3);
%let tpBK1 = %nrquote(FINANCIAL_ACCOUNT_DRV           );
%let tpBK2 = %nrquote(FINANCIAL_UNIT_MID_BRCA         );
%let tpBK3 = %nrquote(FCC_COUNTERPARTY_FCC            );
%let tpBK_count = %nrquote(3);
%let tpOptionalBK_count = %nrquote(0);
%let tpOptionalBK = ;

/* List of target columns to keep  */ 
%let _keep = DRV_ACCOUNT_ID FCC_COUNTERPARTY_ID VALID_FROM_DTTM 
        FINANCIAL_INSTRUMENT_ID VALID_TO_DTTM SOURCE_SYSTEM_CD 
        ACCOUNT_REGISTRATION_NM ALTERNATE_ACCOUNT_NM FINANCIAL_ACCOUNT_TYPE_CD 
        ACCOUNT_STATUS_CD OPEN_DT CLOSE_DT CURRENCY_CD DAY_BASIS_CD 
        INTEREST_PAYMENT_TYPE_CD IRB_SRC_ACCOUNT_ID MID_FINANCIAL_UNIT_ID_BRCA 
        LNKDN BRCA;
/* List of target columns to keep  */ 
%let keep = DRV_ACCOUNT_ID FCC_COUNTERPARTY_ID VALID_FROM_DTTM 
        FINANCIAL_INSTRUMENT_ID VALID_TO_DTTM SOURCE_SYSTEM_CD 
        ACCOUNT_REGISTRATION_NM ALTERNATE_ACCOUNT_NM FINANCIAL_ACCOUNT_TYPE_CD 
        ACCOUNT_STATUS_CD OPEN_DT CLOSE_DT CURRENCY_CD DAY_BASIS_CD 
        INTEREST_PAYMENT_TYPE_CD IRB_SRC_ACCOUNT_ID MID_FINANCIAL_UNIT_ID_BRCA 
        LNKDN BRCA;
/*****************************************************************
* ВЕРСИЯ:
*     $Id: transform_generate_bk.sas 4889 2013-04-04 09:14:07Z nesterenok $
*
******************************************************************
* НАЗНАЧЕНИЕ:
*     Генерирует бизнес-ключи в таблице по списку.
*
* ПАРАМЕТРЫ:
*     tpIn                    +  имя входного набора
*     tpBK                    +  список кодов обязательных для генерации бизнес-ключей, разделенный пробелами
*                                Такой бизнес-ключ станет дамми, если заполнены не все поля, его составляющие
*                                FK к ETL_SYS.ETL_BK.BK_CD
*     tpOptionalBK            +  список кодов НЕобязательных для генерации бизнес-ключей, разделенный пробелами
*                                Такой бизнес-ключ останется пустым, если заполнены не все поля, его составляющие
*     tpOut                   +  имя выходного набора
*
******************************************************************/

%macro transform_generate_bk;
   %let tpBK_count         = %unquote(&tpBK_count);
   %let tpOptionalBK_count = %unquote(&tpOptionalBK_count);

   %local lmvDummyRows lmvFieldDummyCount lmvDummyRequired;
   %let lmvDummyRows       = work.tr_gen_bk_dummy_rows;
   %let lmvFieldDummyCount = etl_dummy_count;
   %let lmvDummyRequired   = %eval (&tpBK_count gt 0);

   /* Макросы для генерации одного ключа */
   %macro sm_trans_gen_bk_required;
      %etl_generate_bk (
         mpFieldBK=&bk_field_nm, mpLengthBK=%sysfunc(inputn(&bk_type_cd, bkt_cd_len.)),
         mpColumnList=&bk_column_list_txt, mpFormat=&bk_format_txt,
         mpFieldDummy=&lmvFieldDummy, mpFieldDummyCount=&lmvFieldDummyCount
      );
   %mend;
   %macro sm_trans_gen_bk_optional;
      %etl_generate_bk (
         mpFieldBK=&bk_field_nm, mpLengthBK=%sysfunc(inputn(&bk_type_cd, bkt_cd_len.)),
         mpColumnList=&bk_column_list_txt, mpFormat=&bk_format_txt,
         mpFieldDummy=
      );
   %mend;

   /* Макрос для подстановки в дамми-ключ уникального номера */
   %macro sm_trans_gen_bk_dummy;
      if &lmvFieldDummy gt 0 then do;
         set &lmvDummyIds (keep=OBJECT_ID rename=(OBJECT_ID=&lmvFieldDummy._no)) point=&lmvFieldDummy;
         &bk_field_nm = cats (&bk_field_nm, "_", &lmvFieldDummy._no);

         %error_check;
      end;
   %mend;


   /* Создаем выходной набор итерацией по всем заявленным бизнес-ключам */
   /* Считаем необходимое кол-во дамми-ключей */
   %local lmvBkIndex lmvFieldDummy lmvDummyCount;
   %let lmvDummyCount   = 0;
   data
      %if &lmvDummyRequired %then %do;
         &tpOut (drop= etl_dummy_:)
         &lmvDummyRows
      %end;
      %else %do;
         &tpOut
      %end;
   ;
      set &tpIn end=ds_end;

      /* Генерация необязательных ключей */
      %do lmvBkIndex=1 %to &tpOptionalBK_count;
         %util_loop_data (mpLoopMacro=sm_trans_gen_bk_optional, mpData=ETL_SYS.ETL_BK,
                          mpWhere=BK_CD eq %util_quote(&&tpOptionalBK&lmvBkIndex)
         );
      %end;

      %if &lmvDummyRequired %then %do;
         length &lmvFieldDummyCount 8;
         drop &lmvFieldDummyCount;
         retain &lmvFieldDummyCount 0;

         /* Генерация обязательных ключей */
         %do lmvBkIndex=1 %to &tpBK_count;
            %let lmvFieldDummy = etl_dummy_&lmvBkIndex.;

            %util_loop_data (mpLoopMacro=sm_trans_gen_bk_required, mpData=ETL_SYS.ETL_BK,
                             mpWhere=BK_CD eq %util_quote(&&tpBK&lmvBkIndex)
            );
         %end;

         /* Если в какой-то записи есть дамми, то не выводим ее сразу */
         if sum (of etl_dummy_1-etl_dummy_&tpBK_count) = 0 then
            output &tpOut;
         else do;
            output &lmvDummyRows;
         end;

         if ds_end then call symputx ("lmvDummyCount", &lmvFieldDummyCount);
      %end;
      %else %do;
         output &tpOut;
      %end;
   run;
   %error_check (mpStepType=DATA);

   /* Если дамми нет, то всё */
   %if (not &lmvDummyRequired) or (&lmvDummyCount eq 0) %then %return;


   /* Для каждого дамми генерируем уникальный номер */
   %local lmvDummyIds;
   %let lmvDummyIds = work.tr_gen_bk_dummy_ids;
   %unique_ids (mpIdCount=&lmvDummyCount, mpOut=&lmvDummyIds, mpSequenceName=ETL_DUMMY_SEQ);

   /* Добавляем номер к дамми */
   data &lmvDummyRows._id (drop= etl_dummy_:);
      set &lmvDummyRows;

      %do lmvBkIndex=1 %to &tpBK_count;
         %let lmvFieldDummy = etl_dummy_&lmvBkIndex.;

         %util_loop_data (mpLoopMacro=sm_trans_gen_bk_dummy, mpData=ETL_SYS.ETL_BK,
                          mpWhere=BK_CD eq %util_quote(&&tpBK&lmvBkIndex)
         );
      %end;
   run;
   %error_check (mpStepType=DATA);


   /* Добавляем дамми-строки к выходному набору */
   proc append base=&tpOut data=&lmvDummyRows._id;
   run;
   %error_check (mpStepType=DATA);

%mend transform_generate_bk;

%transform_generate_bk;

%rcSet(&syserr); 
%rcSet(&sysrc); 
%rcSet(&sqlrc); 



/**  Step end Генерация BK **/

/*==========================================================================* 
 * Step:            Table Loader                          A5Y50FNE.AQ000AFR * 
 * Transform:       Table Loader (Version 2.1)                              * 
 * Description:                                                             * 
 *                                                                          * 
 * Source Table:    dcd - work.W1MHBF25                   A5Y50FNE.AO0005UU * 
 * Target Table:    CUSTOMER_X_FIN_ACC_DCD_BK -           A5Y50FNE.AE00011M * 
 *                   work_ia.CUSTOMER_X_FIN_ACC_DCD_BK                      * 
 *==========================================================================*/ 

%let transformID = %quote(A5Y50FNE.AQ000AFR);
%let trans_rc = 0;
%let etls_stepStartTime = %sysfunc(datetime(), datetime20.); 

%let SYSLAST = %nrquote(work.W1MHBF25); 

%let SYS_SQL_IP_SPEEDO = Y;
%let SYS_SQL_MAPPUTTO = sas_put;
%let SYS_SQLREDUCEPUT = DBMS;
%global etls_sql_pushDown;
%let etls_sql_pushDown = -1;
option DBIDIRECTEXEC;

%global etls_tableExist;
%global etls_numIndex;
%global etls_lastTable;
%let etls_tableExist = -1; 
%let etls_numIndex = -1; 
%let etls_lastTable = &SYSLAST; 

/*---- Define load data macro  ----*/ 

/* --------------------------------------------------------------
   Load Technique Selection: Replace - EntireTable
   Constraint and index action selections: 'INIT','ASIS','ASIS','ASIS'
   Additional options selections... 
      Set unmapped to missing on updates: false 
   -------------------------------------------------------------- */
%macro etls_loader;

   %let etls_tableOptions = ;
   
   /*---- Map the columns  ----*/ 
   proc datasets lib = work nolist nowarn memtype = (data view);
      delete WIROOT0;
   quit;
   
   data _null_;
      put "NOTE: The following column(s) do not have a column mapping, so the"
           " value(s) will be set to missing: RELSHP_TO_PRIMARY_CD,"
           " EFFECTIVE_FROM_DTTM, EFFECTIVE_TO_DTTM";
   run;
   
   %put %str(NOTE: Mapping columns ...);
   proc sql;
      create view work.WIROOT0 as
         select
            FCC_COUNTERPARTY_ID as CUSTOMER_ID,
            DRV_ACCOUNT_ID as ACCOUNT_ID,
            VALID_FROM_DTTM,
            VALID_TO_DTTM,
            "" as RELSHP_TO_PRIMARY_CD length = 3
               format = $3.
               informat = $3.,
            ('DDC') as RELATIONSHIP_TO_ACCOUNT_CD length = 3
               format = $3.
               informat = $3.,
            . as EFFECTIVE_FROM_DTTM length = 8
               format = DATETIME20.
               informat = DATETIME20.,
            . as EFFECTIVE_TO_DTTM length = 8
               format = DATETIME20.
               informat = DATETIME20.
      from &etls_lastTable
      ;
   quit;
   
   %let SYSLAST = work.WIROOT0;
   
   %let etls_lastTable = &SYSLAST; 
   %let etls_tableOptions = ; 
   
   /* Determine if the target table exists  */ 
   %let etls_tableExist = %eval(%sysfunc(exist(work_ia.CUSTOMER_X_FIN_ACC_DCD_BK, DATA)) or 
         %sysfunc(exist(work_ia.CUSTOMER_X_FIN_ACC_DCD_BK, VIEW))); 
   
   %if &etls_tableExist %then 
   %do;/* table exists  */ 
      %let etls_hasPreExistingConstraint=0; 
      
      proc datasets lib = work nolist nowarn memtype = (data view);
         delete etls_commands etls_commands_F;
      quit;
      
      %let etls_otherTablesReferToThisTable=0;
      
      %macro etls_CIContents(table=,workTableOut=,inDSOptions=);
         %put NOTE: Building table listing Constraints and Indexes for: &table;
         proc datasets lib=work nolist; delete &workTableOut; quit;
         proc contents data=&table&inDSOptions out2=&workTableOut noprint; run;
         
         data &workTableOut;
            length name $60 type $20 icown idxUnique idxNoMiss $3 recreate $600;
            set &workTableOut;
            type=upcase(type);
            if type eq 'REFERENTIAL' then
            do;
               put "WARNING%QUOTE(:) Target table is referenced by constraints in"
                    " another table: " ref;
               call symput('etls_otherTablesReferToThisTable','1');
               delete;
            end;
            if type='INDEX' and ICOwn eq 'YES' then delete;
         run;
         %rcSet(&syserr); 
         
      %mend etls_CIContents;
      
      %etls_CIContents(table=work_ia.CUSTOMER_X_FIN_ACC_DCD_BK, workTableOut=etls_commands, inDSOptions=);
      
      %if &etls_otherTablesReferToThisTable %then 
         %put WARNING%QUOTE(:) Replacing entire table will fail. Consider an alternate load technique or revising constraints.; 
      %else 
      %do; /* okay - remove foreign keys  */ 
      
         data etls_commands_F; 
            set etls_commands; 
            if upcase(type)="FOREIGN KEY" then 
            do; 
               command='ic delete '||trim(name)||';';
               output etls_commands_F; 
            end; 
         run; 
         
         %put %str(NOTE: Removing foreign keys before dropping table...);
         data _null_;
            set etls_commands_F;
            %rcSet(&syserr); 
            
      %end; /* okay - remove foreign keys  */ 
      
      proc datasets lib = work nolist nowarn memtype = (data view);
         delete etls_commands etls_commands_F;
      quit;
      
      /*---- Drop a table  ----*/ 
      %put %str(NOTE: Dropping table ...);
      proc datasets lib = work_ia nolist nowarn memtype = (data view);
         delete CUSTOMER_X_FIN_ACC_DCD_BK;
      quit;
      
      %rcSet(&syserr); 
      
      %let etls_tableExist = 0;
      
   %end; /* table exists  */ 
   
   /*---- Create a new table  ----*/ 
   %if (&etls_tableExist eq 0) %then 
   %do;  /* if table does not exist  */ 
   
      %put %str(NOTE: Creating table ...);
      
      data work_ia.CUSTOMER_X_FIN_ACC_DCD_BK;
         attrib CUSTOMER_ID length = $32
            format = $32.
            informat = $32.
            label = 'CUSTOMER_ID'; 
         attrib ACCOUNT_ID length = $32
            format = $32.
            informat = $32.
            label = 'ACCOUNT_ID'; 
         attrib VALID_FROM_DTTM length = 8
            format = DATETIME20.
            informat = DATETIME20.
            label = 'VALID_FROM_DTTM'; 
         attrib VALID_TO_DTTM length = 8
            format = DATETIME20.
            informat = DATETIME20.
            label = 'VALID_TO_DTTM'; 
         attrib RELSHP_TO_PRIMARY_CD length = $3
            format = $3.
            informat = $3.
            label = 'RELSHP_TO_PRIMARY_CD'; 
         attrib RELATIONSHIP_TO_ACCOUNT_CD length = $3
            format = $3.
            informat = $3.
            label = 'RELATIONSHIP_TO_ACCOUNT_CD'; 
         attrib EFFECTIVE_FROM_DTTM length = 8
            format = DATETIME20.
            informat = DATETIME20.
            label = 'EFFECTIVE_FROM_DTTM'; 
         attrib EFFECTIVE_TO_DTTM length = 8
            format = DATETIME20.
            informat = DATETIME20.
            label = 'EFFECTIVE_TO_DTTM'; 
         call missing(of _all_);
         stop;
      run;
      
      %rcSet(&syserr); 
      
      /*---- Create the integrity constraints for a table  ----*/ 
      %put %str(NOTE: Creating integrity constraints ...);
      proc datasets library=work_ia nolist;
         modify CUSTOMER_X_FIN_ACC_DCD_BK;
            ic create not null (CUSTOMER_ID);
            ic create not null (ACCOUNT_ID);
            ic create not null (VALID_FROM_DTTM);
            ic create not null (VALID_TO_DTTM);
            ic create not null (RELATIONSHIP_TO_ACCOUNT_CD);
            ic create Index1 = primary key (CUSTOMER_ID ACCOUNT_ID VALID_FROM_DTTM 
                           RELATIONSHIP_TO_ACCOUNT_CD);
      quit;
      
      %rcSet(&syserr); 
      
   %end;  /* if table does not exist  */ 
   
   /*---- Append  ----*/ 
   %put %str(NOTE: Appending data ...);
   
   proc append base = work_ia.CUSTOMER_X_FIN_ACC_DCD_BK 
      data = &etls_lastTable (&etls_tableOptions)  force ; 
    run; 
   
   %rcSet(&syserr); 
   
   proc datasets lib = work nolist nowarn memtype = (data view);
      delete WIROOT0;
   quit;
   
%mend etls_loader;
%etls_loader;

%let etls_recCheckExist = 0; 
%let etls_recnt = 0; 
%macro etls_recordCheck; 
   %let etls_recCheckExist = %eval(%sysfunc(exist(work_ia.CUSTOMER_X_FIN_ACC_DCD_BK, DATA)) or 
         %sysfunc(exist(work_ia.CUSTOMER_X_FIN_ACC_DCD_BK, VIEW))); 
   
   %if (&etls_recCheckExist) %then
   %do;
      %local etls_syntaxcheck; 
      %let etls_syntaxcheck = %sysfunc(getoption(syntaxcheck)); 
      /* Turn off syntaxcheck option to perform following steps  */ 
      options nosyntaxcheck;
      
      proc contents data = work_ia.CUSTOMER_X_FIN_ACC_DCD_BK out = work.etls_contents(keep = nobs) noprint; 
      run; 
      
      data _null_; 
         set work.etls_contents (obs = 1); 
         call symput("etls_recnt", left(put(nobs,32.))); 
      run;
      
      proc datasets lib = work nolist nowarn memtype = (data view);
         delete etls_contents;
      quit;
      
      /* Reset syntaxcheck option to previous setting  */ 
      options &etls_syntaxcheck; 
   %end;
%mend etls_recordCheck;
%etls_recordCheck;



/**  Step end Table Loader **/

/*==========================================================================* 
 * Step:            Вяжем актуальные записи со сделками   A5Y50FNE.AQ000AFS * 
 * Transform:       Join                                                    * 
 * Description:                                                             * 
 *                                                                          * 
 * Source Tables:   dcd - work.W1MHBF25                   A5Y50FNE.AO0005UU * 
 *                  actual recs - work.W1BAZY4C           A5Y50FNE.AO0005UR * 
 * Target Table:    SQL Join - work.WVCS481               A5Y50FNE.AO0005UV * 
 *==========================================================================*/ 

%let transformID = %quote(A5Y50FNE.AQ000AFS);
%let trans_rc = 0;
%let etls_stepStartTime = %sysfunc(datetime(), datetime20.); 

%let etls_recCheckExist = 0; 
%let etls_recnt = 0; 
%macro etls_recordCheck; 
   %let etls_recCheckExist = %eval(%sysfunc(exist(work.W1MHBF25, DATA)) or 
         %sysfunc(exist(work.W1MHBF25, VIEW))); 
   
   %if (&etls_recCheckExist) %then
   %do;
      %local etls_syntaxcheck; 
      %let etls_syntaxcheck = %sysfunc(getoption(syntaxcheck)); 
      /* Turn off syntaxcheck option to perform following steps  */ 
      options nosyntaxcheck;
      
      proc contents data = work.W1MHBF25 out = work.etls_contents(keep = nobs) noprint; 
      run; 
      
      data _null_; 
         set work.etls_contents (obs = 1); 
         call symput("etls_recnt", left(put(nobs,32.))); 
      run;
      
      proc datasets lib = work nolist nowarn memtype = (data view);
         delete etls_contents;
      quit;
      
      /* Reset syntaxcheck option to previous setting  */ 
      options &etls_syntaxcheck; 
   %end;
%mend etls_recordCheck;
%etls_recordCheck;

%let SYS_SQL_IP_SPEEDO = Y;
%let SYS_SQL_MAPPUTTO = sas_put;
%let SYS_SQLREDUCEPUT = DBMS;
%global etls_sql_pushDown;
%let etls_sql_pushDown = -1;
option DBIDIRECTEXEC;

proc datasets lib = work nolist nowarn memtype = (data view);
   delete WVCS481;
quit;

proc sql;
   create view work.WVCS481 as
   select
      W1MHBF25.VALID_FROM_DTTM length = 8   
         format = DATETIME20.
         informat = DATETIME20.
         label = 'VALID_FROM_DTTM',
      W1MHBF25.VALID_TO_DTTM length = 8   
         format = DATETIME20.
         informat = DATETIME20.
         label = 'VALID_TO_DTTM',
      W1BAZY4C.FINANCIAL_INSTRUMENT_ID length = 32   
         format = $32.
         informat = $32.
         label = 'FINANCIAL_INSTRUMENT_ID',
      W1MHBF25.DRV_ACCOUNT_ID as REFERENCE_ACCOUNT_ID length = 32   
         format = $32.
         informat = $32.
         label = 'FINANCIAL_ACCOUNT_ID'
   from
      work.W1MHBF25 inner join 
      work.W1BAZY4C
         on
         (
            W1MHBF25.IRB_SRC_ACCOUNT_ID = W1BAZY4C.IRB_SRC_ACCOUNT_ID
         )
   ;
quit;

%global etls_sql_pushDown;
%let etls_sql_pushDown = &sys_sql_ip_all;

%rcSet(&sqlrc); 



/**  Step end Вяжем актуальные записи со сделками **/

/*==========================================================================* 
 * Step:            Extract                               A5Y50FNE.AQ000AFT * 
 * Transform:       Extract                                                 * 
 * Description:                                                             * 
 *                                                                          * 
 * Source Table:    FIN_INSTR_C_BK -                      A5Y50FNE.AE00013I * 
 *                   work_ia.FIN_INSTR_C_BK                                 * 
 * Target Table:    Extract - work.WEJ38AB                A5Y50FNE.AO0005UW * 
 *==========================================================================*/ 

%let transformID = %quote(A5Y50FNE.AQ000AFT);
%let trans_rc = 0;
%let etls_stepStartTime = %sysfunc(datetime(), datetime20.); 

%let etls_recCheckExist = 0; 
%let etls_recnt = 0; 
%macro etls_recordCheck; 
   %let etls_recCheckExist = %eval(%sysfunc(exist(work_ia.FIN_INSTR_C_BK, DATA)) or 
         %sysfunc(exist(work_ia.FIN_INSTR_C_BK, VIEW))); 
   
   %if (&etls_recCheckExist) %then
   %do;
      %local etls_syntaxcheck; 
      %let etls_syntaxcheck = %sysfunc(getoption(syntaxcheck)); 
      /* Turn off syntaxcheck option to perform following steps  */ 
      options nosyntaxcheck;
      
      proc contents data = work_ia.FIN_INSTR_C_BK out = work.etls_contents(keep = nobs) noprint; 
      run; 
      
      data _null_; 
         set work.etls_contents (obs = 1); 
         call symput("etls_recnt", left(put(nobs,32.))); 
      run;
      
      proc datasets lib = work nolist nowarn memtype = (data view);
         delete etls_contents;
      quit;
      
      /* Reset syntaxcheck option to previous setting  */ 
      options &etls_syntaxcheck; 
   %end;
%mend etls_recordCheck;
%etls_recordCheck;

%let SYSLAST = %nrquote(work_ia.FIN_INSTR_C_BK); 

%let SYS_SQL_IP_SPEEDO = Y;
%let SYS_SQL_MAPPUTTO = sas_put;
%let SYS_SQLREDUCEPUT = DBMS;
%global etls_sql_pushDown;
%let etls_sql_pushDown = -1;
option DBIDIRECTEXEC;

/*---- Map the columns  ----*/ 
proc datasets lib = work nolist nowarn memtype = (data view);
   delete WEJ38AB;
quit;

%put %str(NOTE: Mapping columns ...);
proc sql;
   create view work.WEJ38AB as
      select
         DDAT,
         DLNO,
         ('MID') as SOURCE_SYSTEM_CD length = 3
            format = $3.
            informat = $3.
            label = 'SOURCE_SYSTEM_CD',
         ('DEP') as FINANCIAL_ACCOUNT_TYPE_CD length = 3
            format = $3.
            informat = $3.
            label = 'FINANCIAL_ACCOUNT_TYPE_CD',
         (ifc(~missing(KONDOR_A), "k"||put(KONDOR_A, z12.), "m"||put(DLNO, z12.))) as IRB_SRC_ACCOUNT_ID length = 32
            format = $32.
            informat = $32.
            label = 'IRB_SRC_ACCOUNT_ID',
         IRB_INSTR_STATUS_CD,
         IRB_DUMMY_TYPE_CD,
         KONDOR_A,
         FINANCIAL_INSTRUMENT_TYPE_CD,
         BRCA,
         CCY,
         FINANCIAL_INSTRUMENT_ID,
         CNUM,
         RECI,
         MDAT,
         AIPD
   from &SYSLAST
      where (RECI <> 'R' AND
         CDAS = 21  AND IRB_CURRORINT_FLG = 'P' AND FINANCIAL_INSTRUMENT_TYPE_CD = 'DCD') OR ((RECI = 'R' or missing(RECI)) and ~missing(IRB_DUMMY_TYPE_CD))
   ;
quit;

%let SYSLAST = work.WEJ38AB;

%global etls_sql_pushDown;
%let etls_sql_pushDown = &sys_sql_ip_all;

%rcSet(&sqlrc); 



/**  Step end Extract **/

/*==========================================================================* 
 * Step:            Генерация BK                          A5Y50FNE.AQ000AFU * 
 * Transform:       Генерация BK                                            * 
 * Description:                                                             * 
 *                                                                          * 
 * Source Table:    Extract - work.WEJ38AB                A5Y50FNE.AO0005UW * 
 * Target Table:    deposits - work.WEKZ91Y               A5Y50FNE.AO0005UX * 
 *==========================================================================*/ 

%let transformID = %quote(A5Y50FNE.AQ000AFU);
%let trans_rc = 0;
%let etls_stepStartTime = %sysfunc(datetime(), datetime20.); 

%let etls_recnt = -1;
%let SYSLAST = %nrquote(work.WEJ38AB); 

%let _INPUT_count = 1; 
%let _INPUT = work.WEJ38AB;
%let _INPUT_connect = ;
%let _INPUT_engine = ;
%let _INPUT_memtype = VIEW;
%let _INPUT_options = %nrquote();
%let _INPUT_alter = %nrquote();
%let _INPUT_path = %nrquote(/Extract_A5Y50FNE.AO0005UW%(WorkTable%));
%let _INPUT_type = 1;
%let _INPUT_label = %nrquote();

%let tpIn = work.WEJ38AB;
%let tpIn_connect = ;
%let tpIn_engine = ;
%let tpIn_memtype = VIEW;
%let tpIn_options = %nrquote();
%let tpIn_alter = %nrquote();
%let tpIn_path = %nrquote(/Extract_A5Y50FNE.AO0005UW%(WorkTable%));
%let tpIn_type = 1;
%let tpIn_label = %nrquote();

%let _OUTPUT_count = 1; 
%let _OUTPUT = work.WEKZ91Y;
%let _OUTPUT_connect = ;
%let _OUTPUT_engine = ;
%let _OUTPUT_memtype = DATA;
%let _OUTPUT_options = %nrquote();
%let _OUTPUT_alter = %nrquote();
%let _OUTPUT_path = %nrquote(/deposits_A5Y50FNE.AO0005UX%(WorkTable%));
%let _OUTPUT_type = 1;
%let _OUTPUT_label = %nrquote();
/* List of target columns to keep  */ 
%let _OUTPUT_keep = DEP_ACCOUNT_ID DDAT DLNO SOURCE_SYSTEM_CD FINANCIAL_ACCOUNT_TYPE_CD 
        IRB_SRC_ACCOUNT_ID IRB_INSTR_STATUS_CD IRB_DUMMY_TYPE_CD KONDOR_A 
        FINANCIAL_INSTRUMENT_TYPE_CD BRCA CCY FINANCIAL_INSTRUMENT_ID CNUM 
        RECI MDAT AIPD;

%let tpOut = work.WEKZ91Y;
%let tpOut_connect = ;
%let tpOut_engine = ;
%let tpOut_memtype = DATA;
%let tpOut_options = %nrquote();
%let tpOut_alter = %nrquote();
%let tpOut_path = %nrquote(/deposits_A5Y50FNE.AO0005UX%(WorkTable%));
%let tpOut_type = 1;
%let tpOut_label = %nrquote();
/* List of target columns to keep  */ 
%let tpOut_keep = DEP_ACCOUNT_ID DDAT DLNO SOURCE_SYSTEM_CD FINANCIAL_ACCOUNT_TYPE_CD 
        IRB_SRC_ACCOUNT_ID IRB_INSTR_STATUS_CD IRB_DUMMY_TYPE_CD KONDOR_A 
        FINANCIAL_INSTRUMENT_TYPE_CD BRCA CCY FINANCIAL_INSTRUMENT_ID CNUM 
        RECI MDAT AIPD;


proc datasets lib=work nolist nowarn memtype = (data view);
   delete WEKZ91Y;
quit;

%let tpBK_count = %nrquote(1);
%let tpBK = %nrquote(FINANCIAL_ACCOUNT_DEP           );
%let tpBK1 = %nrquote(FINANCIAL_ACCOUNT_DEP           );
%let tpOptionalBK_count = %nrquote(0);
%let tpOptionalBK = ;

/* List of target columns to keep  */ 
%let _keep = DEP_ACCOUNT_ID DDAT DLNO SOURCE_SYSTEM_CD FINANCIAL_ACCOUNT_TYPE_CD 
        IRB_SRC_ACCOUNT_ID IRB_INSTR_STATUS_CD IRB_DUMMY_TYPE_CD KONDOR_A 
        FINANCIAL_INSTRUMENT_TYPE_CD BRCA CCY FINANCIAL_INSTRUMENT_ID CNUM 
        RECI MDAT AIPD;
/* List of target columns to keep  */ 
%let keep = DEP_ACCOUNT_ID DDAT DLNO SOURCE_SYSTEM_CD FINANCIAL_ACCOUNT_TYPE_CD 
        IRB_SRC_ACCOUNT_ID IRB_INSTR_STATUS_CD IRB_DUMMY_TYPE_CD KONDOR_A 
        FINANCIAL_INSTRUMENT_TYPE_CD BRCA CCY FINANCIAL_INSTRUMENT_ID CNUM 
        RECI MDAT AIPD;
/*****************************************************************
* ВЕРСИЯ:
*     $Id: transform_generate_bk.sas 4889 2013-04-04 09:14:07Z nesterenok $
*
******************************************************************
* НАЗНАЧЕНИЕ:
*     Генерирует бизнес-ключи в таблице по списку.
*
* ПАРАМЕТРЫ:
*     tpIn                    +  имя входного набора
*     tpBK                    +  список кодов обязательных для генерации бизнес-ключей, разделенный пробелами
*                                Такой бизнес-ключ станет дамми, если заполнены не все поля, его составляющие
*                                FK к ETL_SYS.ETL_BK.BK_CD
*     tpOptionalBK            +  список кодов НЕобязательных для генерации бизнес-ключей, разделенный пробелами
*                                Такой бизнес-ключ останется пустым, если заполнены не все поля, его составляющие
*     tpOut                   +  имя выходного набора
*
******************************************************************/

%macro transform_generate_bk;
   %let tpBK_count         = %unquote(&tpBK_count);
   %let tpOptionalBK_count = %unquote(&tpOptionalBK_count);

   %local lmvDummyRows lmvFieldDummyCount lmvDummyRequired;
   %let lmvDummyRows       = work.tr_gen_bk_dummy_rows;
   %let lmvFieldDummyCount = etl_dummy_count;
   %let lmvDummyRequired   = %eval (&tpBK_count gt 0);

   /* Макросы для генерации одного ключа */
   %macro sm_trans_gen_bk_required;
      %etl_generate_bk (
         mpFieldBK=&bk_field_nm, mpLengthBK=%sysfunc(inputn(&bk_type_cd, bkt_cd_len.)),
         mpColumnList=&bk_column_list_txt, mpFormat=&bk_format_txt,
         mpFieldDummy=&lmvFieldDummy, mpFieldDummyCount=&lmvFieldDummyCount
      );
   %mend;
   %macro sm_trans_gen_bk_optional;
      %etl_generate_bk (
         mpFieldBK=&bk_field_nm, mpLengthBK=%sysfunc(inputn(&bk_type_cd, bkt_cd_len.)),
         mpColumnList=&bk_column_list_txt, mpFormat=&bk_format_txt,
         mpFieldDummy=
      );
   %mend;

   /* Макрос для подстановки в дамми-ключ уникального номера */
   %macro sm_trans_gen_bk_dummy;
      if &lmvFieldDummy gt 0 then do;
         set &lmvDummyIds (keep=OBJECT_ID rename=(OBJECT_ID=&lmvFieldDummy._no)) point=&lmvFieldDummy;
         &bk_field_nm = cats (&bk_field_nm, "_", &lmvFieldDummy._no);

         %error_check;
      end;
   %mend;


   /* Создаем выходной набор итерацией по всем заявленным бизнес-ключам */
   /* Считаем необходимое кол-во дамми-ключей */
   %local lmvBkIndex lmvFieldDummy lmvDummyCount;
   %let lmvDummyCount   = 0;
   data
      %if &lmvDummyRequired %then %do;
         &tpOut (drop= etl_dummy_:)
         &lmvDummyRows
      %end;
      %else %do;
         &tpOut
      %end;
   ;
      set &tpIn end=ds_end;

      /* Генерация необязательных ключей */
      %do lmvBkIndex=1 %to &tpOptionalBK_count;
         %util_loop_data (mpLoopMacro=sm_trans_gen_bk_optional, mpData=ETL_SYS.ETL_BK,
                          mpWhere=BK_CD eq %util_quote(&&tpOptionalBK&lmvBkIndex)
         );
      %end;

      %if &lmvDummyRequired %then %do;
         length &lmvFieldDummyCount 8;
         drop &lmvFieldDummyCount;
         retain &lmvFieldDummyCount 0;

         /* Генерация обязательных ключей */
         %do lmvBkIndex=1 %to &tpBK_count;
            %let lmvFieldDummy = etl_dummy_&lmvBkIndex.;

            %util_loop_data (mpLoopMacro=sm_trans_gen_bk_required, mpData=ETL_SYS.ETL_BK,
                             mpWhere=BK_CD eq %util_quote(&&tpBK&lmvBkIndex)
            );
         %end;

         /* Если в какой-то записи есть дамми, то не выводим ее сразу */
         if sum (of etl_dummy_1-etl_dummy_&tpBK_count) = 0 then
            output &tpOut;
         else do;
            output &lmvDummyRows;
         end;

         if ds_end then call symputx ("lmvDummyCount", &lmvFieldDummyCount);
      %end;
      %else %do;
         output &tpOut;
      %end;
   run;
   %error_check (mpStepType=DATA);

   /* Если дамми нет, то всё */
   %if (not &lmvDummyRequired) or (&lmvDummyCount eq 0) %then %return;


   /* Для каждого дамми генерируем уникальный номер */
   %local lmvDummyIds;
   %let lmvDummyIds = work.tr_gen_bk_dummy_ids;
   %unique_ids (mpIdCount=&lmvDummyCount, mpOut=&lmvDummyIds, mpSequenceName=ETL_DUMMY_SEQ);

   /* Добавляем номер к дамми */
   data &lmvDummyRows._id (drop= etl_dummy_:);
      set &lmvDummyRows;

      %do lmvBkIndex=1 %to &tpBK_count;
         %let lmvFieldDummy = etl_dummy_&lmvBkIndex.;

         %util_loop_data (mpLoopMacro=sm_trans_gen_bk_dummy, mpData=ETL_SYS.ETL_BK,
                          mpWhere=BK_CD eq %util_quote(&&tpBK&lmvBkIndex)
         );
      %end;
   run;
   %error_check (mpStepType=DATA);


   /* Добавляем дамми-строки к выходному набору */
   proc append base=&tpOut data=&lmvDummyRows._id;
   run;
   %error_check (mpStepType=DATA);

%mend transform_generate_bk;

%transform_generate_bk;

%rcSet(&syserr); 
%rcSet(&sysrc); 
%rcSet(&sqlrc); 



/**  Step end Генерация BK **/

/*==========================================================================* 
 * Step:            SQL Join                              A5Y50FNE.AQ000AFV * 
 * Transform:       Join                                                    * 
 * Description:                                                             * 
 *                                                                          * 
 * Source Tables:   deposits - work.WEKZ91Y               A5Y50FNE.AO0005UX * 
 *                  dcd - work.W1MHBF25                   A5Y50FNE.AO0005UU * 
 * Target Table:    SQL Join - work.W42Z2GQV              A5Y50FNE.AO0005UY * 
 *==========================================================================*/ 

%let transformID = %quote(A5Y50FNE.AQ000AFV);
%let trans_rc = 0;
%let etls_stepStartTime = %sysfunc(datetime(), datetime20.); 

%let etls_recCheckExist = 0; 
%let etls_recnt = 0; 
%macro etls_recordCheck; 
   %let etls_recCheckExist = %eval(%sysfunc(exist(work.WEKZ91Y, DATA)) or 
         %sysfunc(exist(work.WEKZ91Y, VIEW))); 
   
   %if (&etls_recCheckExist) %then
   %do;
      %local etls_syntaxcheck; 
      %let etls_syntaxcheck = %sysfunc(getoption(syntaxcheck)); 
      /* Turn off syntaxcheck option to perform following steps  */ 
      options nosyntaxcheck;
      
      proc contents data = work.WEKZ91Y out = work.etls_contents(keep = nobs) noprint; 
      run; 
      
      data _null_; 
         set work.etls_contents (obs = 1); 
         call symput("etls_recnt", left(put(nobs,32.))); 
      run;
      
      proc datasets lib = work nolist nowarn memtype = (data view);
         delete etls_contents;
      quit;
      
      /* Reset syntaxcheck option to previous setting  */ 
      options &etls_syntaxcheck; 
   %end;
%mend etls_recordCheck;
%etls_recordCheck;

%let SYS_SQL_IP_SPEEDO = Y;
%let SYS_SQL_MAPPUTTO = sas_put;
%let SYS_SQLREDUCEPUT = DBMS;
%global etls_sql_pushDown;
%let etls_sql_pushDown = -1;
option DBIDIRECTEXEC;

proc datasets lib = work nolist nowarn memtype = (data view);
   delete W42Z2GQV;
quit;

proc sql;
   create view work.W42Z2GQV as
   select
      W1MHBF25.DRV_ACCOUNT_ID as ACCOUNT_ID length = 32   
         format = $32.
         informat = $32.
         label = 'ACCOUNT_ID',
      WEKZ91Y.DEP_ACCOUNT_ID as REFERENCE_FINANCIAL_ACCOUNT_ID length = 32   
         format = $32.
         informat = $32.
         label = 'DEP_ACCOUNT_ID',
      'DCD' as FINANCIAL_ACCT_ASSOC_TYPE_CD length = 3   
         format = $3.
         informat = $3.
         label = 'FINANCIAL_ACCT_ASSOC_TYPE_CD',
      WEKZ91Y.DDAT as DDAT_C length = 8   
         format = DATETIME20.
         informat = DATETIME20.
         label = 'DDAT',
      W1MHBF25.OPEN_DT as DDAT_D length = 8   
         format = DATETIME20.
         informat = DATETIME20.
         label = 'OPEN_DT',
      WEKZ91Y.SOURCE_SYSTEM_CD length = 3   
         format = $3.
         informat = $3.
         label = 'SOURCE_SYSTEM_CD',
      W1MHBF25.VALID_FROM_DTTM length = 8   
         format = DATETIME20.
         informat = DATETIME20.
         label = 'VALID_FROM_DTTM',
      W1MHBF25.VALID_TO_DTTM length = 8   
         format = DATETIME20.
         informat = DATETIME20.
         label = 'VALID_TO_DTTM',
      W1MHBF25.ACCOUNT_REGISTRATION_NM length = 100   
         format = $100.
         informat = $100.
         label = 'ACCOUNT_REGISTRATION_NM',
      W1MHBF25.ALTERNATE_ACCOUNT_NM length = 40   
         format = $40.
         informat = $40.
         label = 'ALTERNATE_ACCOUNT_NM',
      W1MHBF25.FINANCIAL_ACCOUNT_TYPE_CD length = 3   
         format = $3.
         informat = $3.
         label = 'FINANCIAL_ACCOUNT_TYPE_CD',
      WEKZ91Y.MDAT as CLOSE_DT length = 8   
         format = DATETIME20.
         informat = DATETIME20.
         label = 'CLOSE_DT',
      W1MHBF25.CURRENCY_CD length = 3   
         format = $3.
         informat = $3.
         label = 'CURRENCY_CD',
      W1MHBF25.DAY_BASIS_CD length = 10   
         format = $10.
         informat = $10.
         label = 'DAY_BASIS_CD',
      W1MHBF25.INTEREST_PAYMENT_TYPE_CD length = 3   
         format = $3.
         informat = $3.
         label = 'INTEREST_PAYMENT_TYPE_CD',
      W1MHBF25.IRB_SRC_ACCOUNT_ID length = 32   
         format = $32.
         informat = $32.
         label = 'IRB_SRC_ACCOUNT_ID',
      W1MHBF25.MID_FINANCIAL_UNIT_ID_BRCA length = 32   
         format = $32.
         informat = $32.
         label = 'MID_FINANCIAL_UNIT_ID_BRCA',
      W1MHBF25.LNKDN length = 8   
         format = 7.
         informat = 7.
         label = 'LNKDN',
      W1MHBF25.BRCA length = 3   
         format = $3.
         informat = $3.
         label = 'BRCA',
      WEKZ91Y.IRB_INSTR_STATUS_CD length = 3   
         format = $3.
         informat = $3.
         label = 'IRB_INSTR_STATUS_CD',
      WEKZ91Y.IRB_DUMMY_TYPE_CD length = 3   
         format = $3.
         informat = $3.
         label = 'IRB_DUMMY_TYPE_CD',
      WEKZ91Y.KONDOR_A length = 8   
         format = 11.
         informat = 11.
         label = 'KONDOR_A',
      WEKZ91Y.DLNO length = 8   
         format = 7.
         informat = 7.
         label = 'DLNO',
      'DCD' as FINANCIAL_INSTRUMENT_TYPE_CD length = 3   
         format = $3.
         informat = $3.
         label = 'FINANCIAL_INSTRUMENT_TYPE_CD',
      WEKZ91Y.BRCA as BRCA_C length = 3   
         format = $3.
         informat = $3.
         label = 'BRCA_C',
      WEKZ91Y.CCY length = 3   
         format = $3.
         informat = $3.
         label = 'CCY',
      WEKZ91Y.FINANCIAL_INSTRUMENT_ID length = 32   
         format = $32.
         informat = $32.
         label = 'FINANCIAL_INSTRUMENT_ID',
      WEKZ91Y.CNUM length = 8   
         format = 7.
         informat = 7.
         label = 'CNUM',
      WEKZ91Y.RECI length = 1   
         format = $1.
         informat = $1.
         label = 'RECI',
      WEKZ91Y.AIPD length = 8   
         format = 20.5
         informat = 20.5
         label = 'AIPD'
   from
      work.WEKZ91Y left join 
      work.W1MHBF25
         on
         (
            WEKZ91Y.DLNO = W1MHBF25.LNKDN
         )
   ;
quit;

%global etls_sql_pushDown;
%let etls_sql_pushDown = &sys_sql_ip_all;

%rcSet(&sqlrc); 



/**  Step end SQL Join **/

/*==========================================================================* 
 * Step:            Splitter                              A5Y50FNE.AQ000AFW * 
 * Transform:       Splitter                                                * 
 * Description:     Делим на сязанные по DLNO и нет                         * 
 *                                                                          * 
 * Source Table:    SQL Join - work.W42Z2GQV              A5Y50FNE.AO0005UY * 
 * Target Tables:   Splitter 0 - work.W432HB42            A5Y50FNE.AO0005UZ * 
 *                  Splitter 1 - work.W432HED9            A5Y50FNE.AO0005V0 * 
 *==========================================================================*/ 

%let transformID = %quote(A5Y50FNE.AQ000AFW);
%let trans_rc = 0;
%let etls_stepStartTime = %sysfunc(datetime(), datetime20.); 

%let etls_recnt = -1;
%let SYSLAST = %nrquote(work.W42Z2GQV); 

proc datasets lib=work nolist nowarn memtype = (data view);
   delete W432HB42;
   delete W432HED9;
quit;

data 
     work.W432HB42
     work.W432HED9 ;
   set &SYSLAST;
   if ~missing(LNKDN) then 
      output work.W432HB42;
   if missing(LNKDN) then 
      output work.W432HED9;
run;

%rcSet(&syserr); 

/*---- Map the columns  ----*/ 
proc datasets lib = work nolist nowarn memtype = (data view);
   delete etls_mapped;
quit;

%put %str(NOTE: Mapping columns ...);
proc sql;
   create table work.etls_mapped as
      select
         ACCOUNT_ID,
         REFERENCE_FINANCIAL_ACCOUNT_ID,
         FINANCIAL_ACCT_ASSOC_TYPE_CD,
         DDAT_C,
         DDAT_D,
         SOURCE_SYSTEM_CD,
         VALID_FROM_DTTM,
         VALID_TO_DTTM,
         ACCOUNT_REGISTRATION_NM,
         ALTERNATE_ACCOUNT_NM,
         FINANCIAL_ACCOUNT_TYPE_CD,
         CLOSE_DT,
         CURRENCY_CD,
         DAY_BASIS_CD,
         INTEREST_PAYMENT_TYPE_CD,
         IRB_SRC_ACCOUNT_ID,
         MID_FINANCIAL_UNIT_ID_BRCA,
         LNKDN,
         BRCA,
         IRB_INSTR_STATUS_CD,
         IRB_DUMMY_TYPE_CD,
         KONDOR_A,
         CCY,
         AIPD,
         FINANCIAL_INSTRUMENT_TYPE_CD
   from work.W432HB42
   ;
quit;

%let SYSLAST = work.etls_mapped;

data work.W432HB42;
  set work.etls_mapped;
run;

proc datasets lib = work nolist nowarn memtype = (data view);
   delete etls_mapped;
quit;

%rcSet(&syscc); 



/**  Step end Splitter **/

/*==========================================================================* 
 * Step:            Extract                               A5Y50FNE.AQ000AFX * 
 * Transform:       Extract                                                 * 
 * Description:     Строим дамми для FA DCD                                 * 
 *                                                                          * 
 * Source Table:    Splitter 1 - work.W432HED9            A5Y50FNE.AO0005V0 * 
 * Target Table:    Extract - work.W436GUSP               A5Y50FNE.AO0005V1 * 
 *==========================================================================*/ 

%let transformID = %quote(A5Y50FNE.AQ000AFX);
%let trans_rc = 0;
%let etls_stepStartTime = %sysfunc(datetime(), datetime20.); 

%let etls_recCheckExist = 0; 
%let etls_recnt = 0; 
%macro etls_recordCheck; 
   %let etls_recCheckExist = %eval(%sysfunc(exist(work.W432HED9, DATA)) or 
         %sysfunc(exist(work.W432HED9, VIEW))); 
   
   %if (&etls_recCheckExist) %then
   %do;
      %local etls_syntaxcheck; 
      %let etls_syntaxcheck = %sysfunc(getoption(syntaxcheck)); 
      /* Turn off syntaxcheck option to perform following steps  */ 
      options nosyntaxcheck;
      
      proc contents data = work.W432HED9 out = work.etls_contents(keep = nobs) noprint; 
      run; 
      
      data _null_; 
         set work.etls_contents (obs = 1); 
         call symput("etls_recnt", left(put(nobs,32.))); 
      run;
      
      proc datasets lib = work nolist nowarn memtype = (data view);
         delete etls_contents;
      quit;
      
      /* Reset syntaxcheck option to previous setting  */ 
      options &etls_syntaxcheck; 
   %end;
%mend etls_recordCheck;
%etls_recordCheck;

%let SYSLAST = %nrquote(work.W432HED9); 

%let SYS_SQL_IP_SPEEDO = Y;
%let SYS_SQL_MAPPUTTO = sas_put;
%let SYS_SQLREDUCEPUT = DBMS;
%global etls_sql_pushDown;
%let etls_sql_pushDown = -1;
option DBIDIRECTEXEC;

/*---- Map the columns  ----*/ 
proc datasets lib = work nolist nowarn memtype = (data view);
   delete W436GUSP;
quit;

data _null_;
   put "NOTE: The following column(s) do not have a column mapping, so the"
        " value(s) will be set to missing: IRB_DUMMY_TYPE_CD,"
        " IRB_SRC_INSTRUMENT_ID";
run;

%put %str(NOTE: Mapping columns ...);
proc sql;
   create view work.W436GUSP as
      select
         REFERENCE_FINANCIAL_ACCOUNT_ID,
         FINANCIAL_ACCT_ASSOC_TYPE_CD,
         DDAT_C,
         DDAT_D,
         SOURCE_SYSTEM_CD,
         DDAT_C as VALID_FROM_DTTM   
            label = 'VALID_FROM_DTTM',
         (&ETL_SCD_FUTURE_DTTM) as VALID_TO_DTTM length = 8
            format = DATETIME20.
            informat = DATETIME20.
            label = 'VALID_TO_DTTM',
         ACCOUNT_REGISTRATION_NM,
         ALTERNATE_ACCOUNT_NM,
         ('DCD') as FINANCIAL_ACCOUNT_TYPE_CD length = 3
            format = $3.
            informat = $3.
            label = 'FINANCIAL_ACCOUNT_TYPE_CD',
         CLOSE_DT,
         CCY as CURRENCY_CD   
            label = 'CURRENCY_CD',
         DAY_BASIS_CD,
         INTEREST_PAYMENT_TYPE_CD,
         ("m"||put(DLNO, z12.)) as IRB_SRC_ACCOUNT_ID length = 32
            format = $32.
            informat = $32.
            label = 'IRB_SRC_ACCOUNT_ID',
         BRCA_C as MID_FINANCIAL_UNIT_ID_BRCA length = 32   
            format = $32.
            informat = $32.
            label = 'MID_FINANCIAL_UNIT_ID_BRCA',
         LNKDN,
         BRCA_C as BRCA   
            label = 'BRCA',
         IRB_INSTR_STATUS_CD,
         "" as IRB_DUMMY_TYPE_CD length = 3
            format = $3.
            informat = $3.
            label = 'IRB_DUMMY_TYPE_CD',
         KONDOR_A,
         FINANCIAL_INSTRUMENT_TYPE_CD,
         ('DCD') as EMBEDDED_OPTION_TYPE_CD length = 3
            format = $3.
            informat = $3.
            label = 'EMBEDDED_OPTION_TYPE_CD',
         "" as IRB_SRC_INSTRUMENT_ID length = 32
            format = $32.
            informat = $32.
            label = 'IRB_SRC_INSTRUMENT_ID',
         FINANCIAL_INSTRUMENT_ID,
         CNUM,
         RECI,
         DLNO,
         (put(CNUM ,z8.)) as CUSTOMER_NO length = 8,
         AIPD
   from &SYSLAST
   ;
quit;

%let SYSLAST = work.W436GUSP;

%global etls_sql_pushDown;
%let etls_sql_pushDown = &sys_sql_ip_all;

%rcSet(&sqlrc); 



/**  Step end Extract **/

/*==========================================================================* 
 * Step:            SQL Join                              A5Y50FNE.AQ000AFY * 
 * Transform:       Join                                                    * 
 * Description:     Подтягииваем размерность для дамми записей              * 
 *                                                                          * 
 * Source Tables:   CURRENCY_SNAP - etl_ia.CURRENCY_SNAP  A5Y50FNE.AE0000X4 * 
 *                  Extract - work.W436GUSP               A5Y50FNE.AO0005V1 * 
 * Target Table:    SQL Join - work.W402SK8H              A5Y50FNE.AO0005V2 * 
 *==========================================================================*/ 

%let transformID = %quote(A5Y50FNE.AQ000AFY);
%let trans_rc = 0;
%let etls_stepStartTime = %sysfunc(datetime(), datetime20.); 

%let etls_recnt = 0;
%macro etls_recordCheck; 
   %let etls_recCheckExist = %eval(%sysfunc(exist(etl_ia.CURRENCY_SNAP, DATA)) or 
         %sysfunc(exist(etl_ia.CURRENCY_SNAP, VIEW))); 
   
   %if (&etls_recCheckExist) %then
   %do;
      proc sql noprint;
         select count(*) into :etls_recnt from etl_ia.CURRENCY_SNAP;
      quit;
   %end;
%mend etls_recordCheck;
%etls_recordCheck;

%let SYS_SQL_IP_SPEEDO = Y;
%let SYS_SQL_MAPPUTTO = sas_put;
%let SYS_SQLREDUCEPUT = DBMS;
%global etls_sql_pushDown;
%let etls_sql_pushDown = -1;
option DBIDIRECTEXEC;

proc datasets lib = work nolist nowarn memtype = (data view);
   delete W402SK8H;
quit;

proc sql;
   create view work.W402SK8H as
   select
      W436GUSP.REFERENCE_FINANCIAL_ACCOUNT_ID length = 32   
         format = $32.
         informat = $32.
         label = 'DEP_ACCOUNT_ID',
      W436GUSP.FINANCIAL_ACCT_ASSOC_TYPE_CD length = 3   
         format = $3.
         informat = $3.
         label = 'FINANCIAL_ACCT_ASSOC_TYPE_CD',
      W436GUSP.DDAT_C length = 8   
         format = DATETIME20.
         informat = DATETIME20.
         label = 'DDAT',
      W436GUSP.DDAT_D length = 8   
         format = DATETIME20.
         informat = DATETIME20.
         label = 'OPEN_DT',
      W436GUSP.SOURCE_SYSTEM_CD length = 3   
         format = $3.
         informat = $3.
         label = 'SOURCE_SYSTEM_CD',
      W436GUSP.VALID_FROM_DTTM length = 8   
         format = DATETIME20.
         informat = DATETIME20.
         label = 'VALID_FROM_DTTM',
      W436GUSP.VALID_TO_DTTM length = 8   
         format = DATETIME20.
         informat = DATETIME20.
         label = 'VALID_TO_DTTM',
      W436GUSP.ACCOUNT_REGISTRATION_NM length = 100   
         format = $100.
         informat = $100.
         label = 'ACCOUNT_REGISTRATION_NM',
      W436GUSP.ALTERNATE_ACCOUNT_NM length = 40   
         format = $40.
         informat = $40.
         label = 'ALTERNATE_ACCOUNT_NM',
      W436GUSP.FINANCIAL_ACCOUNT_TYPE_CD length = 3   
         format = $3.
         informat = $3.
         label = 'FINANCIAL_ACCOUNT_TYPE_CD',
      W436GUSP.CLOSE_DT length = 8   
         format = DATETIME20.
         informat = DATETIME20.
         label = 'CLOSE_DT',
      W436GUSP.CURRENCY_CD length = 3   
         format = $3.
         informat = $3.
         label = 'CURRENCY_CD',
      W436GUSP.DAY_BASIS_CD length = 10   
         format = $10.
         informat = $10.
         label = 'DAY_BASIS_CD',
      W436GUSP.INTEREST_PAYMENT_TYPE_CD length = 3   
         format = $3.
         informat = $3.
         label = 'INTEREST_PAYMENT_TYPE_CD',
      W436GUSP.IRB_SRC_ACCOUNT_ID length = 32   
         format = $32.
         informat = $32.
         label = 'IRB_SRC_ACCOUNT_ID',
      W436GUSP.MID_FINANCIAL_UNIT_ID_BRCA length = 32   
         format = $32.
         informat = $32.
         label = 'MID_FINANCIAL_UNIT_ID_BRCA',
      W436GUSP.LNKDN length = 8   
         format = 7.
         informat = 7.
         label = 'LNKDN',
      W436GUSP.BRCA length = 3   
         format = $3.
         informat = $3.
         label = 'BRCA',
      W436GUSP.IRB_INSTR_STATUS_CD length = 3   
         format = $3.
         informat = $3.
         label = 'IRB_INSTR_STATUS_CD',
      W436GUSP.IRB_DUMMY_TYPE_CD length = 3   
         format = $3.
         informat = $3.
         label = 'IRB_DUMMY_TYPE_CD',
      W436GUSP.KONDOR_A length = 8   
         format = 11.
         informat = 11.
         label = 'KONDOR_A',
      W436GUSP.FINANCIAL_INSTRUMENT_TYPE_CD length = 3   
         format = $3.
         informat = $3.
         label = 'FINANCIAL_INSTRUMENT_TYPE_CD',
      W436GUSP.EMBEDDED_OPTION_TYPE_CD length = 3   
         format = $3.
         informat = $3.
         label = 'EMBEDDED_OPTION_TYPE_CD',
      W436GUSP.IRB_SRC_INSTRUMENT_ID length = 32   
         format = $32.
         informat = $32.
         label = 'IRB_SRC_INSTRUMENT_ID',
      W436GUSP.FINANCIAL_INSTRUMENT_ID length = 32   
         format = $32.
         informat = $32.
         label = 'FINANCIAL_INSTRUMENT_ID',
      W436GUSP.CNUM length = 8   
         format = 7.
         informat = 7.
         label = 'CNUM',
      W436GUSP.RECI length = 1   
         format = $1.
         informat = $1.
         label = 'RECI',
      W436GUSP.DLNO length = 8   
         format = 7.
         informat = 7.
         label = 'DLNO',
      W436GUSP.CUSTOMER_NO length = 8,
      W436GUSP.AIPD length = 8   
         format = 20.5
         informat = 20.5
         label = 'AIPD',
      CURRENCY_SNAP.IRB_CURRENCY_DECIMALS length = 8   
         format = 20.5
         informat = 20.5
         label = 'IRB_CURRENCY_DECIMALS'
   from
      work.W436GUSP left join 
      etl_ia.CURRENCY_SNAP
         on
         (
            W436GUSP.CURRENCY_CD = CURRENCY_SNAP.CURRENCY_CD
            and CURRENCY_SNAP.VALID_TO_DTTM = &ETL_SCD_FUTURE_DTTM
         )
   ;
quit;

%global etls_sql_pushDown;
%let etls_sql_pushDown = &sys_sql_ip_all;

%rcSet(&sqlrc); 



/**  Step end SQL Join **/

/*==========================================================================* 
 * Step:            Генерация BK                          A5Y50FNE.AQ000AFZ * 
 * Transform:       Генерация BK                                            * 
 * Description:     Достраиваем дамми по тому что есть                      * 
 *                                                                          * 
 * Source Table:    SQL Join - work.W402SK8H              A5Y50FNE.AO0005V2 * 
 * Target Table:    Генерация BKtpOut - work.W43LZYD8     A5Y50FNE.AO0005V3 * 
 *==========================================================================*/ 

%let transformID = %quote(A5Y50FNE.AQ000AFZ);
%let trans_rc = 0;
%let etls_stepStartTime = %sysfunc(datetime(), datetime20.); 

%let etls_recnt = -1;
%let SYSLAST = %nrquote(work.W402SK8H); 

%let _INPUT_count = 1; 
%let _INPUT = work.W402SK8H;
%let _INPUT_connect = ;
%let _INPUT_engine = ;
%let _INPUT_memtype = VIEW;
%let _INPUT_options = %nrquote();
%let _INPUT_alter = %nrquote();
%let _INPUT_path = %nrquote(/SQL Join_A5Y50FNE.AO0005V2%(WorkTable%));
%let _INPUT_type = 1;
%let _INPUT_label = %nrquote();

%let tpIn = work.W402SK8H;
%let tpIn_connect = ;
%let tpIn_engine = ;
%let tpIn_memtype = VIEW;
%let tpIn_options = %nrquote();
%let tpIn_alter = %nrquote();
%let tpIn_path = %nrquote(/SQL Join_A5Y50FNE.AO0005V2%(WorkTable%));
%let tpIn_type = 1;
%let tpIn_label = %nrquote();

%let _OUTPUT_count = 1; 
%let _OUTPUT = work.W43LZYD8;
%let _OUTPUT_connect = ;
%let _OUTPUT_engine = ;
%let _OUTPUT_memtype = DATA;
%let _OUTPUT_options = %nrquote();
%let _OUTPUT_alter = %nrquote();
%let _OUTPUT_path = %nrquote(/Генерация BKtpOut_A5Y50FNE.AO0005V3%(WorkTable%));
%let _OUTPUT_type = 1;
%let _OUTPUT_label = %nrquote();
/* List of target columns to keep  */ 
%let _OUTPUT_keep = DRV_ACCOUNT_ID EMBEDDED_OPTION_ID FCC_COUNTERPARTY_ID 
        REFERENCE_FINANCIAL_ACCOUNT_ID FINANCIAL_ACCT_ASSOC_TYPE_CD DDAT_C 
        DDAT_D SOURCE_SYSTEM_CD VALID_FROM_DTTM VALID_TO_DTTM 
        ACCOUNT_REGISTRATION_NM ALTERNATE_ACCOUNT_NM FINANCIAL_ACCOUNT_TYPE_CD 
        CLOSE_DT CURRENCY_CD DAY_BASIS_CD INTEREST_PAYMENT_TYPE_CD 
        IRB_SRC_ACCOUNT_ID MID_FINANCIAL_UNIT_ID_BRCA LNKDN BRCA 
        IRB_INSTR_STATUS_CD IRB_DUMMY_TYPE_CD KONDOR_A 
        FINANCIAL_INSTRUMENT_TYPE_CD EMBEDDED_OPTION_TYPE_CD 
        IRB_SRC_INSTRUMENT_ID FINANCIAL_INSTRUMENT_ID CNUM RECI DLNO 
        CUSTOMER_NO AIPD IRB_CURRENCY_DECIMALS;

%let tpOut = work.W43LZYD8;
%let tpOut_connect = ;
%let tpOut_engine = ;
%let tpOut_memtype = DATA;
%let tpOut_options = %nrquote();
%let tpOut_alter = %nrquote();
%let tpOut_path = %nrquote(/Генерация BKtpOut_A5Y50FNE.AO0005V3%(WorkTable%));
%let tpOut_type = 1;
%let tpOut_label = %nrquote();
/* List of target columns to keep  */ 
%let tpOut_keep = DRV_ACCOUNT_ID EMBEDDED_OPTION_ID FCC_COUNTERPARTY_ID 
        REFERENCE_FINANCIAL_ACCOUNT_ID FINANCIAL_ACCT_ASSOC_TYPE_CD DDAT_C 
        DDAT_D SOURCE_SYSTEM_CD VALID_FROM_DTTM VALID_TO_DTTM 
        ACCOUNT_REGISTRATION_NM ALTERNATE_ACCOUNT_NM FINANCIAL_ACCOUNT_TYPE_CD 
        CLOSE_DT CURRENCY_CD DAY_BASIS_CD INTEREST_PAYMENT_TYPE_CD 
        IRB_SRC_ACCOUNT_ID MID_FINANCIAL_UNIT_ID_BRCA LNKDN BRCA 
        IRB_INSTR_STATUS_CD IRB_DUMMY_TYPE_CD KONDOR_A 
        FINANCIAL_INSTRUMENT_TYPE_CD EMBEDDED_OPTION_TYPE_CD 
        IRB_SRC_INSTRUMENT_ID FINANCIAL_INSTRUMENT_ID CNUM RECI DLNO 
        CUSTOMER_NO AIPD IRB_CURRENCY_DECIMALS;


proc datasets lib=work nolist nowarn memtype = (data view);
   delete W43LZYD8;
quit;

%let tpBK = %nrquote(FINANCIAL_ACCOUNT_DRV           );
%let tpBK0 = %nrquote(4);
%let tpBK1 = %nrquote(FINANCIAL_ACCOUNT_DRV           );
%let tpBK2 = %nrquote(EMBEDDED_OPTION                 );
%let tpBK_count = %nrquote(4);
%let tpBK3 = %nrquote(FCC_COUNTERPARTY_FCC            );
%let tpBK4 = %nrquote(FINANCIAL_UNIT_MID_BRCA         );
%let tpOptionalBK_count = %nrquote(0);
%let tpOptionalBK = ;

/* List of target columns to keep  */ 
%let _keep = DRV_ACCOUNT_ID EMBEDDED_OPTION_ID FCC_COUNTERPARTY_ID 
        REFERENCE_FINANCIAL_ACCOUNT_ID FINANCIAL_ACCT_ASSOC_TYPE_CD DDAT_C 
        DDAT_D SOURCE_SYSTEM_CD VALID_FROM_DTTM VALID_TO_DTTM 
        ACCOUNT_REGISTRATION_NM ALTERNATE_ACCOUNT_NM FINANCIAL_ACCOUNT_TYPE_CD 
        CLOSE_DT CURRENCY_CD DAY_BASIS_CD INTEREST_PAYMENT_TYPE_CD 
        IRB_SRC_ACCOUNT_ID MID_FINANCIAL_UNIT_ID_BRCA LNKDN BRCA 
        IRB_INSTR_STATUS_CD IRB_DUMMY_TYPE_CD KONDOR_A 
        FINANCIAL_INSTRUMENT_TYPE_CD EMBEDDED_OPTION_TYPE_CD 
        IRB_SRC_INSTRUMENT_ID FINANCIAL_INSTRUMENT_ID CNUM RECI DLNO 
        CUSTOMER_NO AIPD IRB_CURRENCY_DECIMALS;
/* List of target columns to keep  */ 
%let keep = DRV_ACCOUNT_ID EMBEDDED_OPTION_ID FCC_COUNTERPARTY_ID 
        REFERENCE_FINANCIAL_ACCOUNT_ID FINANCIAL_ACCT_ASSOC_TYPE_CD DDAT_C 
        DDAT_D SOURCE_SYSTEM_CD VALID_FROM_DTTM VALID_TO_DTTM 
        ACCOUNT_REGISTRATION_NM ALTERNATE_ACCOUNT_NM FINANCIAL_ACCOUNT_TYPE_CD 
        CLOSE_DT CURRENCY_CD DAY_BASIS_CD INTEREST_PAYMENT_TYPE_CD 
        IRB_SRC_ACCOUNT_ID MID_FINANCIAL_UNIT_ID_BRCA LNKDN BRCA 
        IRB_INSTR_STATUS_CD IRB_DUMMY_TYPE_CD KONDOR_A 
        FINANCIAL_INSTRUMENT_TYPE_CD EMBEDDED_OPTION_TYPE_CD 
        IRB_SRC_INSTRUMENT_ID FINANCIAL_INSTRUMENT_ID CNUM RECI DLNO 
        CUSTOMER_NO AIPD IRB_CURRENCY_DECIMALS;
/*****************************************************************
* ВЕРСИЯ:
*     $Id: transform_generate_bk.sas 4889 2013-04-04 09:14:07Z nesterenok $
*
******************************************************************
* НАЗНАЧЕНИЕ:
*     Генерирует бизнес-ключи в таблице по списку.
*
* ПАРАМЕТРЫ:
*     tpIn                    +  имя входного набора
*     tpBK                    +  список кодов обязательных для генерации бизнес-ключей, разделенный пробелами
*                                Такой бизнес-ключ станет дамми, если заполнены не все поля, его составляющие
*                                FK к ETL_SYS.ETL_BK.BK_CD
*     tpOptionalBK            +  список кодов НЕобязательных для генерации бизнес-ключей, разделенный пробелами
*                                Такой бизнес-ключ останется пустым, если заполнены не все поля, его составляющие
*     tpOut                   +  имя выходного набора
*
******************************************************************/

%macro transform_generate_bk;
   %let tpBK_count         = %unquote(&tpBK_count);
   %let tpOptionalBK_count = %unquote(&tpOptionalBK_count);

   %local lmvDummyRows lmvFieldDummyCount lmvDummyRequired;
   %let lmvDummyRows       = work.tr_gen_bk_dummy_rows;
   %let lmvFieldDummyCount = etl_dummy_count;
   %let lmvDummyRequired   = %eval (&tpBK_count gt 0);

   /* Макросы для генерации одного ключа */
   %macro sm_trans_gen_bk_required;
      %etl_generate_bk (
         mpFieldBK=&bk_field_nm, mpLengthBK=%sysfunc(inputn(&bk_type_cd, bkt_cd_len.)),
         mpColumnList=&bk_column_list_txt, mpFormat=&bk_format_txt,
         mpFieldDummy=&lmvFieldDummy, mpFieldDummyCount=&lmvFieldDummyCount
      );
   %mend;
   %macro sm_trans_gen_bk_optional;
      %etl_generate_bk (
         mpFieldBK=&bk_field_nm, mpLengthBK=%sysfunc(inputn(&bk_type_cd, bkt_cd_len.)),
         mpColumnList=&bk_column_list_txt, mpFormat=&bk_format_txt,
         mpFieldDummy=
      );
   %mend;

   /* Макрос для подстановки в дамми-ключ уникального номера */
   %macro sm_trans_gen_bk_dummy;
      if &lmvFieldDummy gt 0 then do;
         set &lmvDummyIds (keep=OBJECT_ID rename=(OBJECT_ID=&lmvFieldDummy._no)) point=&lmvFieldDummy;
         &bk_field_nm = cats (&bk_field_nm, "_", &lmvFieldDummy._no);

         %error_check;
      end;
   %mend;


   /* Создаем выходной набор итерацией по всем заявленным бизнес-ключам */
   /* Считаем необходимое кол-во дамми-ключей */
   %local lmvBkIndex lmvFieldDummy lmvDummyCount;
   %let lmvDummyCount   = 0;
   data
      %if &lmvDummyRequired %then %do;
         &tpOut (drop= etl_dummy_:)
         &lmvDummyRows
      %end;
      %else %do;
         &tpOut
      %end;
   ;
      set &tpIn end=ds_end;

      /* Генерация необязательных ключей */
      %do lmvBkIndex=1 %to &tpOptionalBK_count;
         %util_loop_data (mpLoopMacro=sm_trans_gen_bk_optional, mpData=ETL_SYS.ETL_BK,
                          mpWhere=BK_CD eq %util_quote(&&tpOptionalBK&lmvBkIndex)
         );
      %end;

      %if &lmvDummyRequired %then %do;
         length &lmvFieldDummyCount 8;
         drop &lmvFieldDummyCount;
         retain &lmvFieldDummyCount 0;

         /* Генерация обязательных ключей */
         %do lmvBkIndex=1 %to &tpBK_count;
            %let lmvFieldDummy = etl_dummy_&lmvBkIndex.;

            %util_loop_data (mpLoopMacro=sm_trans_gen_bk_required, mpData=ETL_SYS.ETL_BK,
                             mpWhere=BK_CD eq %util_quote(&&tpBK&lmvBkIndex)
            );
         %end;

         /* Если в какой-то записи есть дамми, то не выводим ее сразу */
         if sum (of etl_dummy_1-etl_dummy_&tpBK_count) = 0 then
            output &tpOut;
         else do;
            output &lmvDummyRows;
         end;

         if ds_end then call symputx ("lmvDummyCount", &lmvFieldDummyCount);
      %end;
      %else %do;
         output &tpOut;
      %end;
   run;
   %error_check (mpStepType=DATA);

   /* Если дамми нет, то всё */
   %if (not &lmvDummyRequired) or (&lmvDummyCount eq 0) %then %return;


   /* Для каждого дамми генерируем уникальный номер */
   %local lmvDummyIds;
   %let lmvDummyIds = work.tr_gen_bk_dummy_ids;
   %unique_ids (mpIdCount=&lmvDummyCount, mpOut=&lmvDummyIds, mpSequenceName=ETL_DUMMY_SEQ);

   /* Добавляем номер к дамми */
   data &lmvDummyRows._id (drop= etl_dummy_:);
      set &lmvDummyRows;

      %do lmvBkIndex=1 %to &tpBK_count;
         %let lmvFieldDummy = etl_dummy_&lmvBkIndex.;

         %util_loop_data (mpLoopMacro=sm_trans_gen_bk_dummy, mpData=ETL_SYS.ETL_BK,
                          mpWhere=BK_CD eq %util_quote(&&tpBK&lmvBkIndex)
         );
      %end;
   run;
   %error_check (mpStepType=DATA);


   /* Добавляем дамми-строки к выходному набору */
   proc append base=&tpOut data=&lmvDummyRows._id;
   run;
   %error_check (mpStepType=DATA);

%mend transform_generate_bk;

%transform_generate_bk;

%rcSet(&syserr); 
%rcSet(&sysrc); 
%rcSet(&sqlrc); 



/**  Step end Генерация BK **/

/*==========================================================================* 
 * Step:            Table Loader                          A5Y50FNE.AQ000AG0 * 
 * Transform:       Table Loader (Version 2.1)                              * 
 * Description:                                                             * 
 *                                                                          * 
 * Source Table:    SQL Join - work.WVCS481               A5Y50FNE.AO0005UV * 
 * Target Table:    FIN_INSTR_ASSOC_DCD_BK -              A5Y50FNE.AE000121 * 
 *                   work_ia.FIN_INSTR_ASSOC_DCD_BK                         * 
 *==========================================================================*/ 

%let transformID = %quote(A5Y50FNE.AQ000AG0);
%let trans_rc = 0;
%let etls_stepStartTime = %sysfunc(datetime(), datetime20.); 

%let SYSLAST = %nrquote(work.WVCS481); 

%let SYS_SQL_IP_SPEEDO = Y;
%let SYS_SQL_MAPPUTTO = sas_put;
%let SYS_SQLREDUCEPUT = DBMS;
%global etls_sql_pushDown;
%let etls_sql_pushDown = -1;
option DBIDIRECTEXEC;

%global etls_tableExist;
%global etls_numIndex;
%global etls_lastTable;
%let etls_tableExist = -1; 
%let etls_numIndex = -1; 
%let etls_lastTable = &SYSLAST; 

/*---- Define load data macro  ----*/ 

/* --------------------------------------------------------------
   Load Technique Selection: Replace - EntireTable
   Constraint and index action selections: 'INIT','ASIS','ASIS','ASIS'
   Additional options selections... 
      Set unmapped to missing on updates: false 
   -------------------------------------------------------------- */
%macro etls_loader;

   %let etls_tableOptions = ;
   
   /*---- Map the columns  ----*/ 
   proc datasets lib = work nolist nowarn memtype = (data view);
      delete WIROR4Q;
   quit;
   
   %put %str(NOTE: Mapping columns ...);
   proc sql;
      create view work.WIROR4Q as
         select
            FINANCIAL_INSTRUMENT_ID as FINANCIAL_INSTRUMENT_ASSOC_ID,
            VALID_FROM_DTTM,
            VALID_TO_DTTM,
            ('DRV') as FINANCIAL_INSTR_ASSOC_TYPE_CD length = 3
               format = $3.
               informat = $3.,
            FINANCIAL_INSTRUMENT_ID,
            REFERENCE_ACCOUNT_ID
      from &etls_lastTable
      ;
   quit;
   
   %let SYSLAST = work.WIROR4Q;
   
   %let etls_lastTable = &SYSLAST; 
   %let etls_tableOptions = ; 
   
   /* Determine if the target table exists  */ 
   %let etls_tableExist = %eval(%sysfunc(exist(work_ia.FIN_INSTR_ASSOC_DCD_BK, DATA)) or 
         %sysfunc(exist(work_ia.FIN_INSTR_ASSOC_DCD_BK, VIEW))); 
   
   %if &etls_tableExist %then 
   %do;/* table exists  */ 
      %let etls_hasPreExistingConstraint=0; 
      
      proc datasets lib = work nolist nowarn memtype = (data view);
         delete etls_commands etls_commands_F;
      quit;
      
      %let etls_otherTablesReferToThisTable=0;
      
      %macro etls_CIContents(table=,workTableOut=,inDSOptions=);
         %put NOTE: Building table listing Constraints and Indexes for: &table;
         proc datasets lib=work nolist; delete &workTableOut; quit;
         proc contents data=&table&inDSOptions out2=&workTableOut noprint; run;
         
         data &workTableOut;
            length name $60 type $20 icown idxUnique idxNoMiss $3 recreate $600;
            set &workTableOut;
            type=upcase(type);
            if type eq 'REFERENTIAL' then
            do;
               put "WARNING%QUOTE(:) Target table is referenced by constraints in"
                    " another table: " ref;
               call symput('etls_otherTablesReferToThisTable','1');
               delete;
            end;
            if type='INDEX' and ICOwn eq 'YES' then delete;
         run;
         %rcSet(&syserr); 
         
      %mend etls_CIContents;
      
      %etls_CIContents(table=work_ia.FIN_INSTR_ASSOC_DCD_BK, workTableOut=etls_commands, inDSOptions=);
      
      %if &etls_otherTablesReferToThisTable %then 
         %put WARNING%QUOTE(:) Replacing entire table will fail. Consider an alternate load technique or revising constraints.; 
      %else 
      %do; /* okay - remove foreign keys  */ 
      
         data etls_commands_F; 
            set etls_commands; 
            if upcase(type)="FOREIGN KEY" then 
            do; 
               command='ic delete '||trim(name)||';';
               output etls_commands_F; 
            end; 
         run; 
         
         %put %str(NOTE: Removing foreign keys before dropping table...);
         data _null_;
            set etls_commands_F;
            %rcSet(&syserr); 
            
      %end; /* okay - remove foreign keys  */ 
      
      proc datasets lib = work nolist nowarn memtype = (data view);
         delete etls_commands etls_commands_F;
      quit;
      
      /*---- Drop a table  ----*/ 
      %put %str(NOTE: Dropping table ...);
      proc datasets lib = work_ia nolist nowarn memtype = (data view);
         delete FIN_INSTR_ASSOC_DCD_BK;
      quit;
      
      %rcSet(&syserr); 
      
      %let etls_tableExist = 0;
      
   %end; /* table exists  */ 
   
   /*---- Create a new table  ----*/ 
   %if (&etls_tableExist eq 0) %then 
   %do;  /* if table does not exist  */ 
   
      %put %str(NOTE: Creating table ...);
      
      data work_ia.FIN_INSTR_ASSOC_DCD_BK;
         attrib FINANCIAL_INSTRUMENT_ASSOC_ID length = $32
            format = $32.
            informat = $32.
            label = 'FINANCIAL_INSTRUMENT_ASSOC_ID'; 
         attrib VALID_FROM_DTTM length = 8
            format = DATETIME20.
            informat = DATETIME20.
            label = 'VALID_FROM_DTTM'; 
         attrib VALID_TO_DTTM length = 8
            format = DATETIME20.
            informat = DATETIME20.
            label = 'VALID_TO_DTTM'; 
         attrib FINANCIAL_INSTR_ASSOC_TYPE_CD length = $3
            format = $3.
            informat = $3.
            label = 'FINANCIAL_INSTR_ASSOC_TYPE_CD'; 
         attrib FINANCIAL_INSTRUMENT_ID length = $32
            format = $32.
            informat = $32.
            label = 'FINANCIAL_INSTRUMENT_ID'; 
         attrib REFERENCE_ACCOUNT_ID length = $32
            format = $32.
            informat = $32.
            label = 'FINANCIAL_ACCOUNT_ID'; 
         call missing(of _all_);
         stop;
      run;
      
      %rcSet(&syserr); 
      
      /*---- Create the integrity constraints for a table  ----*/ 
      %put %str(NOTE: Creating integrity constraints ...);
      proc datasets library=work_ia nolist;
         modify FIN_INSTR_ASSOC_DCD_BK;
            ic create not null (FINANCIAL_INSTRUMENT_ASSOC_ID);
            ic create not null (VALID_FROM_DTTM);
            ic create not null (VALID_TO_DTTM);
            ic create not null (FINANCIAL_INSTR_ASSOC_TYPE_CD);
            ic create not null (FINANCIAL_INSTRUMENT_ID);
            ic create not null (REFERENCE_ACCOUNT_ID);
            ic create pk_index = primary key (FINANCIAL_INSTRUMENT_ASSOC_ID VALID_FROM_DTTM);
      quit;
      
      %rcSet(&syserr); 
      
   %end;  /* if table does not exist  */ 
   
   /*---- Append  ----*/ 
   %put %str(NOTE: Appending data ...);
   
   proc append base = work_ia.FIN_INSTR_ASSOC_DCD_BK 
      data = &etls_lastTable (&etls_tableOptions)  force ; 
    run; 
   
   %rcSet(&syserr); 
   
   proc datasets lib = work nolist nowarn memtype = (data view);
      delete WIROR4Q;
   quit;
   
%mend etls_loader;
%etls_loader;

%let etls_recCheckExist = 0; 
%let etls_recnt = 0; 
%macro etls_recordCheck; 
   %let etls_recCheckExist = %eval(%sysfunc(exist(work_ia.FIN_INSTR_ASSOC_DCD_BK, DATA)) or 
         %sysfunc(exist(work_ia.FIN_INSTR_ASSOC_DCD_BK, VIEW))); 
   
   %if (&etls_recCheckExist) %then
   %do;
      %local etls_syntaxcheck; 
      %let etls_syntaxcheck = %sysfunc(getoption(syntaxcheck)); 
      /* Turn off syntaxcheck option to perform following steps  */ 
      options nosyntaxcheck;
      
      proc contents data = work_ia.FIN_INSTR_ASSOC_DCD_BK out = work.etls_contents(keep = nobs) noprint; 
      run; 
      
      data _null_; 
         set work.etls_contents (obs = 1); 
         call symput("etls_recnt", left(put(nobs,32.))); 
      run;
      
      proc datasets lib = work nolist nowarn memtype = (data view);
         delete etls_contents;
      quit;
      
      /* Reset syntaxcheck option to previous setting  */ 
      options &etls_syntaxcheck; 
   %end;
%mend etls_recordCheck;
%etls_recordCheck;



/**  Step end Table Loader **/

/*==========================================================================* 
 * Step:            Append                                A5Y50FNE.AQ000AG1 * 
 * Transform:       Append                                                  * 
 * Description:                                                             * 
 *                                                                          * 
 * Source Tables:   Splitter 0 - work.W432HB42            A5Y50FNE.AO0005UZ * 
 *                  Генерация BKtpOut - work.W43LZYD8     A5Y50FNE.AO0005V3 * 
 * Target Table:    Append - work.W1AFHY0U                A5Y50FNE.AO0005V4 * 
 *==========================================================================*/ 

%let transformID = %quote(A5Y50FNE.AQ000AG1);
%let trans_rc = 0;
%let etls_stepStartTime = %sysfunc(datetime(), datetime20.); 

%let etls_recCheckExist = 0; 
%let etls_recnt = 0; 
%macro etls_recordCheck; 
   %let etls_recCheckExist = %eval(%sysfunc(exist(work.W432HB42, DATA)) or 
         %sysfunc(exist(work.W432HB42, VIEW))); 
   
   %if (&etls_recCheckExist) %then
   %do;
      %local etls_syntaxcheck; 
      %let etls_syntaxcheck = %sysfunc(getoption(syntaxcheck)); 
      /* Turn off syntaxcheck option to perform following steps  */ 
      options nosyntaxcheck;
      
      proc contents data = work.W432HB42 out = work.etls_contents(keep = nobs) noprint; 
      run; 
      
      data _null_; 
         set work.etls_contents (obs = 1); 
         call symput("etls_recnt", left(put(nobs,32.))); 
      run;
      
      proc datasets lib = work nolist nowarn memtype = (data view);
         delete etls_contents;
      quit;
      
      /* Reset syntaxcheck option to previous setting  */ 
      options &etls_syntaxcheck; 
   %end;
%mend etls_recordCheck;
%etls_recordCheck;

%let dbxrc = %eval(%sysfunc(exist(work.W432HB42, DATA)) or 
      %sysfunc(exist(work.W432HB42, VIEW))); 

/*---- Map the columns  ----*/ 
proc datasets lib = work nolist nowarn memtype = (data view);
   delete WIROR6F;
quit;

data _null_;
   put "NOTE: The following column(s) do not have a column mapping, so the"
        " value(s) will be set to missing: AUTO_DEBIT_ACCOUNT_TYPE_CD,"
        " ACCOUNT_REGISTRATION_TYPE_CD, CLOSE_REASON_CD,    ACCOUNT_TAX_ID,"
        " EXPECTED_LOSS_PCT, INDIVIDUAL_ORGANIZATION_CD, SOURCE_CD,   "
        " OPENING_CHANNEL_CD, PREFERRED_CHANNEL_CD, PRIMARY_PHONE_NO,   "
        " PRIMARY_PHONE_TYPE_CD, SECONDARY_PHONE_NO, SECONDARY_PHONE_TYPE_CD,"
        "    MAILABLE_FLG, TELEPHONABLE_FLG, EMAIL_FLG, SMS_FLG,"
        " DO_NOT_CONTACT_FLG,    EMPLOYEE_RK, CURRENCY_BASED_ACCOUNT_FLG,"
        " FEE_BASED_FLG, ANNUAL_FEES_AMT,    MONTHLY_FEES_AMT, CAMPAIGN_CD,"
        " COMMUNICATION_CD, REGISTERED_ONLINE_DT,    FIRST_LOGIN_DT,"
        " ONLINE_BILL_PAYMENT_FLG, ID_VERIFICATION_TYPE_CD,   "
        " PREVIOUS_ACCOUNT_ID, OPEN_BRANCH_FINANCIAL_UNIT_ID,   "
        " FINANCIAL_APPLICATION_ID, CREDIT_FACILITY_ID,"
        " FUTURE_MARGIN_INCOME_AMT,    IN_DEFAULT_FLG, FINANCIAL_BOOK_ID,"
        " IRRECOVERABLE_FLG,    OWNED_BY_INTERNAL_ORG_ID,"
        " PREVIOUS_BANK_EXTERNAL_ORG_ID, NETTING_SET_ID,    REVOLVING_FLG,"
        " SOURCE_CHANNEL_CD, GRACE_PERIOD_DAYS_CNT,    REMARGINING_DAYS_CNT,"
        " FINANCIAL_CALENDAR_ID, PORTFOLIO_ID,    SECURITIZATION_POOL_ID,"
        " RECEIVABLES_POOL_ID, ACCOUNT_USAGE_TYPE_CD,    RISK_ALARM_FLG,"
        " LOW_PROFITABILITY_FLG, ACCOUNT_LIFECYCLE_STG_CD,   "
        " ATTRITION_ALARM_FLG, BALANCE_FROZEN_FLG, BALANCE_FROZEN_DT,   "
        " ACCOUNT_BLOCK_REASON_CD, TAXATION_STATE_CD,"
        " EFFECTIVE_MATURITY_YEAR_NO,    GL_ACCOUNT_ID,"
        " FROM_OTHER_INSTITUTION_FLG, ACCOUNT_RENEWAL_CNT,   "
        " BALANCE_TRANSFER_DT, BALANCE_TRANSFER_AMT, BALANCE_TRANSFER_CNT,   "
        " BASE_LONG_TERM_APR_RT, BROKER_FLG, MULT_RATE_FLG,"
        " AUTO_DEBIT_ACCOUNT_NO,    WORST_STATUS_LAST_12_MTH_CD,"
        " WORST_STATUS_LAST_12_MTH_DT,    BALANCE_TRNSF_OTHER_ACCT_CNT,"
        " EFFECTIVE_FROM_DTTM, EFFECTIVE_TO_DTTM,    COUNTERPARTY_ID,"
        " INSURED_BY_COUNTERPARTY_ID, STATEMENT_FREQUENCY_CD,   "
        " SECURITY_DEPOSIT_AMT, SECURITY_DEPOSIT_REFUND_AMT,"
        " FIRST_PAYMENT_DT,    LAST_PAYMENT_DT, FIRST_RESET_DT,"
        " LAST_RESET_DT, RESETS_PER_ANNUM_NO,    PRINCIPAL_PAYMENT_TYPE_CD,"
        " PRINCIPAL_PAYMENT_AMT, RATE_POLICY_ID, SPREAD_RT,   "
        " DISCOUNT_SPREAD_RT, INITIAL_CONTRACT_RT,"
        " FIXED_MONTHLY_PREPAYMENT_RT,    CAPITAL_ALLOCATION_ID,"
        " CAPITAL_COST_ID, SEGMENT_ID,    NEAR_BRANCH_FINANCIAL_UNIT_ID,"
        " STATEMENT_OPT_FLG, VALUE_SCALING_FACTOR_RT,   "
        " INTERNAL_REPORTING_CATEGORY_CD, CONVEXITY_ADJUSTMENT_FLG,   "
        " ARREARS_PAYMENT_CD, QUANTO_FEATURE_ID, CASH_INTENSIVE_BUSINESS_FLG,"
        "    LETTER_OF_CREDIT_ONFILE_FLG, TRADE_FINANCE_FLG,"
        " ANNUITY_PAYMENT_TYPE_CD,    INTEREST_PAYMENT_TIME_FREQ_CD,"
        " LIQUIDITY_CATEGORY_TYPE_CD,    HOLIDAY_DATE_ROLL_CONV_CD,"
        " WEEKEND_DATE_ROLL_CONV_CD, EXPENSE_ALLOCATION_ID,   "
        " FIRST_INTEREST_PAYMENT_DT, LAST_INTEREST_PAYMENT_DT";
run;

%put %str(NOTE: Mapping columns ...);
proc sql;
   create view work.WIROR6F as
      select
         ACCOUNT_ID,
         VALID_FROM_DTTM,
         VALID_TO_DTTM,
         SOURCE_SYSTEM_CD,
         ACCOUNT_REGISTRATION_NM,
         ALTERNATE_ACCOUNT_NM,
         FINANCIAL_ACCOUNT_TYPE_CD,
         "" as AUTO_DEBIT_ACCOUNT_TYPE_CD length = 3
            format = $3.
            informat = $3.
            label = 'AUTO_DEBIT_ACCOUNT_TYPE_CD',
         "" as ACCOUNT_REGISTRATION_TYPE_CD length = 3
            format = $3.
            informat = $3.
            label = 'ACCOUNT_REGISTRATION_TYPE_CD',
         IRB_INSTR_STATUS_CD as ACCOUNT_STATUS_CD   
            label = 'ACCOUNT_STATUS_CD',
         DDAT_C as OPEN_DT   
            label = 'OPEN_DT',
         CLOSE_DT,
         "" as CLOSE_REASON_CD length = 3
            format = $3.
            informat = $3.
            label = 'CLOSE_REASON_CD',
         "" as ACCOUNT_TAX_ID length = 32
            format = $32.
            informat = $32.
            label = 'ACCOUNT_TAX_ID',
         . as EXPECTED_LOSS_PCT length = 8
            format = 11.4
            informat = 11.4
            label = 'EXPECTED_LOSS_PCT',
         "" as INDIVIDUAL_ORGANIZATION_CD length = 3
            format = $3.
            informat = $3.
            label = 'INDIVIDUAL_ORGANIZATION_CD',
         "" as SOURCE_CD length = 5
            format = $5.
            informat = $5.
            label = 'SOURCE_CD',
         "" as OPENING_CHANNEL_CD length = 3
            format = $3.
            informat = $3.
            label = 'OPENING_CHANNEL_CD',
         "" as PREFERRED_CHANNEL_CD length = 3
            format = $3.
            informat = $3.
            label = 'PREFERRED_CHANNEL_CD',
         CCY as CURRENCY_CD   
            label = 'CURRENCY_CD',
         "" as PRIMARY_PHONE_NO length = 20
            format = $20.
            informat = $20.
            label = 'PRIMARY_PHONE_NO',
         "" as PRIMARY_PHONE_TYPE_CD length = 3
            format = $3.
            informat = $3.
            label = 'PRIMARY_PHONE_TYPE_CD',
         "" as SECONDARY_PHONE_NO length = 20
            format = $20.
            informat = $20.
            label = 'SECONDARY_PHONE_NO',
         "" as SECONDARY_PHONE_TYPE_CD length = 3
            format = $3.
            informat = $3.
            label = 'SECONDARY_PHONE_TYPE_CD',
         "" as MAILABLE_FLG length = 1
            format = $1.
            informat = $1.
            label = 'MAILABLE_FLG',
         "" as TELEPHONABLE_FLG length = 1
            format = $1.
            informat = $1.
            label = 'TELEPHONABLE_FLG',
         "" as EMAIL_FLG length = 1
            format = $1.
            informat = $1.
            label = 'EMAIL_FLG',
         "" as SMS_FLG length = 1
            format = $1.
            informat = $1.
            label = 'SMS_FLG',
         "" as DO_NOT_CONTACT_FLG length = 1
            format = $1.
            informat = $1.
            label = 'DO_NOT_CONTACT_FLG',
         . as EMPLOYEE_RK length = 8
            format = 11.
            informat = 11.
            label = 'EMPLOYEE_RK',
         "" as CURRENCY_BASED_ACCOUNT_FLG length = 1
            format = $1.
            informat = $1.
            label = 'CURRENCY_BASED_ACCOUNT_FLG',
         "" as FEE_BASED_FLG length = 1
            format = $1.
            informat = $1.
            label = 'FEE_BASED_FLG',
         . as ANNUAL_FEES_AMT length = 8
            format = 20.5
            informat = 20.5
            label = 'ANNUAL_FEES_AMT',
         . as MONTHLY_FEES_AMT length = 8
            format = 20.5
            informat = 20.5
            label = 'MONTHLY_FEES_AMT',
         "" as CAMPAIGN_CD length = 30
            format = $30.
            informat = $30.
            label = 'CAMPAIGN_CD',
         "" as COMMUNICATION_CD length = 30
            format = $30.
            informat = $30.
            label = 'COMMUNICATION_CD',
         . as REGISTERED_ONLINE_DT length = 8
            format = DATETIME20.
            informat = DATETIME20.
            label = 'REGISTERED_ONLINE_DT',
         . as FIRST_LOGIN_DT length = 8
            format = DATETIME20.
            informat = DATETIME20.
            label = 'FIRST_LOGIN_DT',
         "" as ONLINE_BILL_PAYMENT_FLG length = 1
            format = $1.
            informat = $1.
            label = 'ONLINE_BILL_PAYMENT_FLG',
         "" as ID_VERIFICATION_TYPE_CD length = 3
            format = $3.
            informat = $3.
            label = 'ID_VERIFICATION_TYPE_CD',
         "" as PREVIOUS_ACCOUNT_ID length = 32
            format = $32.
            informat = $32.
            label = 'PREVIOUS_ACCOUNT_ID',
         "" as OPEN_BRANCH_FINANCIAL_UNIT_ID length = 32
            format = $32.
            informat = $32.
            label = 'OPEN_BRANCH_FINANCIAL_UNIT_ID',
         MID_FINANCIAL_UNIT_ID_BRCA as PRIM_BRANCH_FINANCIAL_UNIT_ID   
            label = 'PRIM_BRANCH_FINANCIAL_UNIT_ID',
         "" as FINANCIAL_APPLICATION_ID length = 32
            format = $32.
            informat = $32.
            label = 'FINANCIAL_APPLICATION_ID',
         "" as CREDIT_FACILITY_ID length = 40
            format = $40.
            informat = $40.
            label = 'CREDIT_FACILITY_ID',
         . as FUTURE_MARGIN_INCOME_AMT length = 8
            format = 20.5
            informat = 20.5
            label = 'FUTURE_MARGIN_INCOME_AMT',
         "" as IN_DEFAULT_FLG length = 1
            format = $1.
            informat = $1.
            label = 'IN_DEFAULT_FLG',
         "" as FINANCIAL_BOOK_ID length = 32
            format = $32.
            informat = $32.
            label = 'FINANCIAL_BOOK_ID',
         "" as IRRECOVERABLE_FLG length = 1
            format = $1.
            informat = $1.
            label = 'IRRECOVERABLE_FLG',
         "" as OWNED_BY_INTERNAL_ORG_ID length = 32
            format = $32.
            informat = $32.
            label = 'OWNED_BY_INTERNAL_ORG_ID',
         "" as PREVIOUS_BANK_EXTERNAL_ORG_ID length = 32
            format = $32.
            informat = $32.
            label = 'PREVIOUS_BANK_EXTERNAL_ORG_ID',
         "" as NETTING_SET_ID length = 32
            format = $32.
            informat = $32.
            label = 'NETTING_SET_ID',
         "" as REVOLVING_FLG length = 1
            format = $1.
            informat = $1.
            label = 'REVOLVING_FLG',
         "" as SOURCE_CHANNEL_CD length = 3
            format = $3.
            informat = $3.
            label = 'SOURCE_CHANNEL_CD',
         . as GRACE_PERIOD_DAYS_CNT length = 8
            format = 7.
            informat = 7.
            label = 'GRACE_PERIOD_DAYS_CNT',
         . as REMARGINING_DAYS_CNT length = 8
            format = 7.
            informat = 7.
            label = 'REMARGINING_DAYS_CNT',
         "" as FINANCIAL_CALENDAR_ID length = 32
            format = $32.
            informat = $32.
            label = 'FINANCIAL_CALENDAR_ID',
         DAY_BASIS_CD,
         "" as PORTFOLIO_ID length = 32
            format = $32.
            informat = $32.
            label = 'PORTFOLIO_ID',
         "" as SECURITIZATION_POOL_ID length = 32
            format = $32.
            informat = $32.
            label = 'SECURITIZATION_POOL_ID',
         "" as RECEIVABLES_POOL_ID length = 32
            format = $32.
            informat = $32.
            label = 'RECEIVABLES_POOL_ID',
         "" as ACCOUNT_USAGE_TYPE_CD length = 3
            format = $3.
            informat = $3.
            label = 'ACCOUNT_USAGE_TYPE_CD',
         "" as RISK_ALARM_FLG length = 1
            format = $1.
            informat = $1.
            label = 'RISK_ALARM_FLG',
         "" as LOW_PROFITABILITY_FLG length = 1
            format = $1.
            informat = $1.
            label = 'LOW_PROFITABILITY_FLG',
         "" as ACCOUNT_LIFECYCLE_STG_CD length = 3
            format = $3.
            informat = $3.
            label = 'ACCOUNT_LIFECYCLE_STG_CD',
         "" as ATTRITION_ALARM_FLG length = 1
            format = $1.
            informat = $1.
            label = 'ATTRITION_ALARM_FLG',
         "" as BALANCE_FROZEN_FLG length = 1
            format = $1.
            informat = $1.
            label = 'BALANCE_FROZEN_FLG',
         . as BALANCE_FROZEN_DT length = 8
            format = DATETIME20.
            informat = DATETIME20.
            label = 'BALANCE_FROZEN_DT',
         "" as ACCOUNT_BLOCK_REASON_CD length = 3
            format = $3.
            informat = $3.
            label = 'ACCOUNT_BLOCK_REASON_CD',
         "" as TAXATION_STATE_CD length = 4
            format = $4.
            informat = $4.
            label = 'TAXATION_STATE_CD',
         . as EFFECTIVE_MATURITY_YEAR_NO length = 8
            format = 9.3
            informat = 9.3
            label = 'EFFECTIVE_MATURITY_YEAR_NO',
         "" as GL_ACCOUNT_ID length = 32
            format = $32.
            informat = $32.
            label = 'GL_ACCOUNT_ID',
         "" as FROM_OTHER_INSTITUTION_FLG length = 1
            format = $1.
            informat = $1.
            label = 'FROM_OTHER_INSTITUTION_FLG',
         . as ACCOUNT_RENEWAL_CNT length = 8
            format = 7.
            informat = 7.
            label = 'ACCOUNT_RENEWAL_CNT',
         . as BALANCE_TRANSFER_DT length = 8
            format = DATETIME20.
            informat = DATETIME20.
            label = 'BALANCE_TRANSFER_DT',
         . as BALANCE_TRANSFER_AMT length = 8
            format = 20.5
            informat = 20.5
            label = 'BALANCE_TRANSFER_AMT',
         . as BALANCE_TRANSFER_CNT length = 8
            format = 7.
            informat = 7.
            label = 'BALANCE_TRANSFER_CNT',
         . as BASE_LONG_TERM_APR_RT length = 8
            format = 11.4
            informat = 11.4
            label = 'BASE_LONG_TERM_APR_RT',
         "" as BROKER_FLG length = 1
            format = $1.
            informat = $1.
            label = 'BROKER_FLG',
         "" as MULT_RATE_FLG length = 1
            format = $1.
            informat = $1.
            label = 'MULT_RATE_FLG',
         "" as AUTO_DEBIT_ACCOUNT_NO length = 32
            format = $32.
            informat = $32.
            label = 'AUTO_DEBIT_ACCOUNT_NO',
         "" as WORST_STATUS_LAST_12_MTH_CD length = 3
            format = $3.
            informat = $3.
            label = 'WORST_STATUS_LAST_12_MTH_CD',
         . as WORST_STATUS_LAST_12_MTH_DT length = 8
            format = DATETIME20.
            informat = DATETIME20.
            label = 'WORST_STATUS_LAST_12_MTH_DT',
         . as BALANCE_TRNSF_OTHER_ACCT_CNT length = 8
            format = 7.
            informat = 7.
            label = 'BALANCE_TRNSF_OTHER_ACCT_CNT',
         . as EFFECTIVE_FROM_DTTM length = 8
            format = DATETIME20.
            informat = DATETIME20.
            label = 'EFFECTIVE_FROM_DTTM',
         . as EFFECTIVE_TO_DTTM length = 8
            format = DATETIME20.
            informat = DATETIME20.
            label = 'EFFECTIVE_TO_DTTM',
         "" as COUNTERPARTY_ID length = 32
            format = $32.
            informat = $32.
            label = 'COUNTERPARTY_ID',
         "" as INSURED_BY_COUNTERPARTY_ID length = 32
            format = $32.
            informat = $32.
            label = 'INSURED_BY_COUNTERPARTY_ID',
         "" as STATEMENT_FREQUENCY_CD length = 3
            format = $3.
            informat = $3.
            label = 'STATEMENT_FREQUENCY_CD',
         . as SECURITY_DEPOSIT_AMT length = 8
            format = 20.5
            informat = 20.5
            label = 'SECURITY_DEPOSIT_AMT',
         . as SECURITY_DEPOSIT_REFUND_AMT length = 8
            format = 20.5
            informat = 20.5
            label = 'SECURITY_DEPOSIT_REFUND_AMT',
         . as FIRST_PAYMENT_DT length = 8
            format = DATETIME20.
            informat = DATETIME20.
            label = 'FIRST_PAYMENT_DT',
         . as LAST_PAYMENT_DT length = 8
            format = DATETIME20.
            informat = DATETIME20.
            label = 'LAST_PAYMENT_DT',
         . as FIRST_RESET_DT length = 8
            format = DATETIME20.
            informat = DATETIME20.
            label = 'FIRST_RESET_DT',
         . as LAST_RESET_DT length = 8
            format = DATETIME20.
            informat = DATETIME20.
            label = 'LAST_RESET_DT',
         . as RESETS_PER_ANNUM_NO length = 8
            format = 6.
            informat = 6.
            label = 'RESETS_PER_ANNUM_NO',
         "" as PRINCIPAL_PAYMENT_TYPE_CD length = 3
            format = $3.
            informat = $3.
            label = 'PRINCIPAL_PAYMENT_TYPE_CD',
         . as PRINCIPAL_PAYMENT_AMT length = 8
            format = 20.5
            informat = 20.5
            label = 'PRINCIPAL_PAYMENT_AMT',
         "" as RATE_POLICY_ID length = 32
            format = $32.
            informat = $32.
            label = 'RATE_POLICY_ID',
         . as SPREAD_RT length = 8
            format = 11.4
            informat = 11.4
            label = 'SPREAD_RT',
         . as DISCOUNT_SPREAD_RT length = 8
            format = 11.4
            informat = 11.4
            label = 'DISCOUNT_SPREAD_RT',
         . as INITIAL_CONTRACT_RT length = 8
            format = 11.4
            informat = 11.4
            label = 'INITIAL_CONTRACT_RT',
         . as FIXED_MONTHLY_PREPAYMENT_RT length = 8
            format = 11.4
            informat = 11.4
            label = 'FIXED_MONTHLY_PREPAYMENT_RT',
         "" as CAPITAL_ALLOCATION_ID length = 32
            format = $32.
            informat = $32.
            label = 'CAPITAL_ALLOCATION_ID',
         "" as CAPITAL_COST_ID length = 32
            format = $32.
            informat = $32.
            label = 'CAPITAL_COST_ID',
         "" as SEGMENT_ID length = 32
            format = $32.
            informat = $32.
            label = 'SEGMENT_ID',
         "" as NEAR_BRANCH_FINANCIAL_UNIT_ID length = 32
            format = $32.
            informat = $32.
            label = 'NEAR_BRANCH_FINANCIAL_UNIT_ID',
         "" as STATEMENT_OPT_FLG length = 1
            format = $1.
            informat = $1.
            label = 'STATEMENT_OPT_FLG',
         . as VALUE_SCALING_FACTOR_RT length = 8
            format = 11.4
            informat = 11.4
            label = 'VALUE_SCALING_FACTOR_RT',
         "" as INTERNAL_REPORTING_CATEGORY_CD length = 3
            format = $3.
            informat = $3.
            label = 'INTERNAL_REPORTING_CATEGORY_CD',
         "" as CONVEXITY_ADJUSTMENT_FLG length = 1
            format = $1.
            informat = $1.
            label = 'CONVEXITY_ADJUSTMENT_FLG',
         "" as ARREARS_PAYMENT_CD length = 3
            format = $3.
            informat = $3.
            label = 'ARREARS_PAYMENT_CD',
         "" as QUANTO_FEATURE_ID length = 32
            format = $32.
            informat = $32.
            label = 'QUANTO_FEATURE_ID',
         "" as CASH_INTENSIVE_BUSINESS_FLG length = 1
            format = $1.
            informat = $1.
            label = 'CASH_INTENSIVE_BUSINESS_FLG',
         "" as LETTER_OF_CREDIT_ONFILE_FLG length = 1
            format = $1.
            informat = $1.
            label = 'LETTER_OF_CREDIT_ONFILE_FLG',
         "" as TRADE_FINANCE_FLG length = 1
            format = $1.
            informat = $1.
            label = 'TRADE_FINANCE_FLG',
         "" as ANNUITY_PAYMENT_TYPE_CD length = 3
            format = $3.
            informat = $3.
            label = 'ANNUITY_PAYMENT_TYPE_CD',
         INTEREST_PAYMENT_TYPE_CD,
         "" as INTEREST_PAYMENT_TIME_FREQ_CD length = 3
            format = $3.
            informat = $3.
            label = 'INTEREST_PAYMENT_TIME_FREQ_CD',
         "" as LIQUIDITY_CATEGORY_TYPE_CD length = 3
            format = $3.
            informat = $3.
            label = 'LIQUIDITY_CATEGORY_TYPE_CD',
         "" as HOLIDAY_DATE_ROLL_CONV_CD length = 3
            format = $3.
            informat = $3.
            label = 'HOLIDAY_DATE_ROLL_CONV_CD',
         "" as WEEKEND_DATE_ROLL_CONV_CD length = 3
            format = $3.
            informat = $3.
            label = 'WEEKEND_DATE_ROLL_CONV_CD',
         "" as EXPENSE_ALLOCATION_ID length = 32
            format = $32.
            informat = $32.
            label = 'EXPENSE_ALLOCATION_ID',
         . as FIRST_INTEREST_PAYMENT_DT length = 8
            format = DATETIME20.
            informat = DATETIME20.
            label = 'FIRST_INTEREST_PAYMENT_DT',
         . as LAST_INTEREST_PAYMENT_DT length = 8
            format = DATETIME20.
            informat = DATETIME20.
            label = 'LAST_INTEREST_PAYMENT_DT',
         IRB_DUMMY_TYPE_CD,
         IRB_SRC_ACCOUNT_ID,
         BRCA,
         AIPD,
         FINANCIAL_INSTRUMENT_TYPE_CD
   from work.W432HB42
   ;
quit;

%let SYSLAST = work.WIROR6F;

%let dbxrc = %eval(%sysfunc(exist(work.W43LZYD8, DATA)) or 
      %sysfunc(exist(work.W43LZYD8, VIEW))); 

/*---- Map the columns  ----*/ 
proc datasets lib = work nolist nowarn memtype = (data view);
   delete WIROR91;
quit;

data _null_;
   put "NOTE: The following column(s) do not have a column mapping, so the"
        " value(s) will be set to missing: AUTO_DEBIT_ACCOUNT_TYPE_CD,"
        " ACCOUNT_REGISTRATION_TYPE_CD, CLOSE_REASON_CD,    ACCOUNT_TAX_ID,"
        " EXPECTED_LOSS_PCT, INDIVIDUAL_ORGANIZATION_CD, SOURCE_CD,   "
        " OPENING_CHANNEL_CD, PREFERRED_CHANNEL_CD, PRIMARY_PHONE_NO,   "
        " PRIMARY_PHONE_TYPE_CD, SECONDARY_PHONE_NO, SECONDARY_PHONE_TYPE_CD,"
        "    MAILABLE_FLG, TELEPHONABLE_FLG, EMAIL_FLG, SMS_FLG,"
        " DO_NOT_CONTACT_FLG,    EMPLOYEE_RK, CURRENCY_BASED_ACCOUNT_FLG,"
        " FEE_BASED_FLG, ANNUAL_FEES_AMT,    MONTHLY_FEES_AMT, CAMPAIGN_CD,"
        " COMMUNICATION_CD, REGISTERED_ONLINE_DT,    FIRST_LOGIN_DT,"
        " ONLINE_BILL_PAYMENT_FLG, ID_VERIFICATION_TYPE_CD,   "
        " PREVIOUS_ACCOUNT_ID, OPEN_BRANCH_FINANCIAL_UNIT_ID,   "
        " FINANCIAL_APPLICATION_ID, CREDIT_FACILITY_ID,"
        " FUTURE_MARGIN_INCOME_AMT,    IN_DEFAULT_FLG, FINANCIAL_BOOK_ID,"
        " IRRECOVERABLE_FLG,    OWNED_BY_INTERNAL_ORG_ID,"
        " PREVIOUS_BANK_EXTERNAL_ORG_ID, NETTING_SET_ID,    REVOLVING_FLG,"
        " SOURCE_CHANNEL_CD, GRACE_PERIOD_DAYS_CNT,    REMARGINING_DAYS_CNT,"
        " FINANCIAL_CALENDAR_ID, PORTFOLIO_ID,    SECURITIZATION_POOL_ID,"
        " RECEIVABLES_POOL_ID, ACCOUNT_USAGE_TYPE_CD,    RISK_ALARM_FLG,"
        " LOW_PROFITABILITY_FLG, ACCOUNT_LIFECYCLE_STG_CD,   "
        " ATTRITION_ALARM_FLG, BALANCE_FROZEN_FLG, BALANCE_FROZEN_DT,   "
        " ACCOUNT_BLOCK_REASON_CD, TAXATION_STATE_CD,"
        " EFFECTIVE_MATURITY_YEAR_NO,    GL_ACCOUNT_ID,"
        " FROM_OTHER_INSTITUTION_FLG, ACCOUNT_RENEWAL_CNT,   "
        " BALANCE_TRANSFER_DT, BALANCE_TRANSFER_AMT, BALANCE_TRANSFER_CNT,   "
        " BASE_LONG_TERM_APR_RT, BROKER_FLG, MULT_RATE_FLG,"
        " AUTO_DEBIT_ACCOUNT_NO,    WORST_STATUS_LAST_12_MTH_CD,"
        " WORST_STATUS_LAST_12_MTH_DT,    BALANCE_TRNSF_OTHER_ACCT_CNT,"
        " EFFECTIVE_FROM_DTTM, EFFECTIVE_TO_DTTM,    COUNTERPARTY_ID,"
        " INSURED_BY_COUNTERPARTY_ID, STATEMENT_FREQUENCY_CD,   "
        " SECURITY_DEPOSIT_AMT, SECURITY_DEPOSIT_REFUND_AMT,"
        " FIRST_PAYMENT_DT,    LAST_PAYMENT_DT, FIRST_RESET_DT,"
        " LAST_RESET_DT, RESETS_PER_ANNUM_NO,    PRINCIPAL_PAYMENT_TYPE_CD,"
        " PRINCIPAL_PAYMENT_AMT, RATE_POLICY_ID, SPREAD_RT,   "
        " DISCOUNT_SPREAD_RT, INITIAL_CONTRACT_RT,"
        " FIXED_MONTHLY_PREPAYMENT_RT,    CAPITAL_ALLOCATION_ID,"
        " CAPITAL_COST_ID, SEGMENT_ID,    NEAR_BRANCH_FINANCIAL_UNIT_ID,"
        " STATEMENT_OPT_FLG, VALUE_SCALING_FACTOR_RT,   "
        " INTERNAL_REPORTING_CATEGORY_CD, CONVEXITY_ADJUSTMENT_FLG,   "
        " ARREARS_PAYMENT_CD, QUANTO_FEATURE_ID, CASH_INTENSIVE_BUSINESS_FLG,"
        "    LETTER_OF_CREDIT_ONFILE_FLG, TRADE_FINANCE_FLG,"
        " ANNUITY_PAYMENT_TYPE_CD,    INTEREST_PAYMENT_TIME_FREQ_CD,"
        " LIQUIDITY_CATEGORY_TYPE_CD,    HOLIDAY_DATE_ROLL_CONV_CD,"
        " WEEKEND_DATE_ROLL_CONV_CD, EXPENSE_ALLOCATION_ID,   "
        " FIRST_INTEREST_PAYMENT_DT, LAST_INTEREST_PAYMENT_DT";
run;

%put %str(NOTE: Mapping columns ...);
proc sql;
   create view work.WIROR91 as
      select
         DRV_ACCOUNT_ID as ACCOUNT_ID,
         VALID_FROM_DTTM,
         VALID_TO_DTTM,
         SOURCE_SYSTEM_CD,
         ACCOUNT_REGISTRATION_NM,
         ALTERNATE_ACCOUNT_NM,
         FINANCIAL_ACCOUNT_TYPE_CD,
         "" as AUTO_DEBIT_ACCOUNT_TYPE_CD length = 3
            format = $3.
            informat = $3.
            label = 'AUTO_DEBIT_ACCOUNT_TYPE_CD',
         "" as ACCOUNT_REGISTRATION_TYPE_CD length = 3
            format = $3.
            informat = $3.
            label = 'ACCOUNT_REGISTRATION_TYPE_CD',
         IRB_INSTR_STATUS_CD as ACCOUNT_STATUS_CD   
            label = 'ACCOUNT_STATUS_CD',
         DDAT_C as OPEN_DT   
            label = 'OPEN_DT',
         CLOSE_DT,
         "" as CLOSE_REASON_CD length = 3
            format = $3.
            informat = $3.
            label = 'CLOSE_REASON_CD',
         "" as ACCOUNT_TAX_ID length = 32
            format = $32.
            informat = $32.
            label = 'ACCOUNT_TAX_ID',
         . as EXPECTED_LOSS_PCT length = 8
            format = 11.4
            informat = 11.4
            label = 'EXPECTED_LOSS_PCT',
         "" as INDIVIDUAL_ORGANIZATION_CD length = 3
            format = $3.
            informat = $3.
            label = 'INDIVIDUAL_ORGANIZATION_CD',
         "" as SOURCE_CD length = 5
            format = $5.
            informat = $5.
            label = 'SOURCE_CD',
         "" as OPENING_CHANNEL_CD length = 3
            format = $3.
            informat = $3.
            label = 'OPENING_CHANNEL_CD',
         "" as PREFERRED_CHANNEL_CD length = 3
            format = $3.
            informat = $3.
            label = 'PREFERRED_CHANNEL_CD',
         CURRENCY_CD,
         "" as PRIMARY_PHONE_NO length = 20
            format = $20.
            informat = $20.
            label = 'PRIMARY_PHONE_NO',
         "" as PRIMARY_PHONE_TYPE_CD length = 3
            format = $3.
            informat = $3.
            label = 'PRIMARY_PHONE_TYPE_CD',
         "" as SECONDARY_PHONE_NO length = 20
            format = $20.
            informat = $20.
            label = 'SECONDARY_PHONE_NO',
         "" as SECONDARY_PHONE_TYPE_CD length = 3
            format = $3.
            informat = $3.
            label = 'SECONDARY_PHONE_TYPE_CD',
         "" as MAILABLE_FLG length = 1
            format = $1.
            informat = $1.
            label = 'MAILABLE_FLG',
         "" as TELEPHONABLE_FLG length = 1
            format = $1.
            informat = $1.
            label = 'TELEPHONABLE_FLG',
         "" as EMAIL_FLG length = 1
            format = $1.
            informat = $1.
            label = 'EMAIL_FLG',
         "" as SMS_FLG length = 1
            format = $1.
            informat = $1.
            label = 'SMS_FLG',
         "" as DO_NOT_CONTACT_FLG length = 1
            format = $1.
            informat = $1.
            label = 'DO_NOT_CONTACT_FLG',
         . as EMPLOYEE_RK length = 8
            format = 11.
            informat = 11.
            label = 'EMPLOYEE_RK',
         "" as CURRENCY_BASED_ACCOUNT_FLG length = 1
            format = $1.
            informat = $1.
            label = 'CURRENCY_BASED_ACCOUNT_FLG',
         "" as FEE_BASED_FLG length = 1
            format = $1.
            informat = $1.
            label = 'FEE_BASED_FLG',
         . as ANNUAL_FEES_AMT length = 8
            format = 20.5
            informat = 20.5
            label = 'ANNUAL_FEES_AMT',
         . as MONTHLY_FEES_AMT length = 8
            format = 20.5
            informat = 20.5
            label = 'MONTHLY_FEES_AMT',
         "" as CAMPAIGN_CD length = 30
            format = $30.
            informat = $30.
            label = 'CAMPAIGN_CD',
         "" as COMMUNICATION_CD length = 30
            format = $30.
            informat = $30.
            label = 'COMMUNICATION_CD',
         . as REGISTERED_ONLINE_DT length = 8
            format = DATETIME20.
            informat = DATETIME20.
            label = 'REGISTERED_ONLINE_DT',
         . as FIRST_LOGIN_DT length = 8
            format = DATETIME20.
            informat = DATETIME20.
            label = 'FIRST_LOGIN_DT',
         "" as ONLINE_BILL_PAYMENT_FLG length = 1
            format = $1.
            informat = $1.
            label = 'ONLINE_BILL_PAYMENT_FLG',
         "" as ID_VERIFICATION_TYPE_CD length = 3
            format = $3.
            informat = $3.
            label = 'ID_VERIFICATION_TYPE_CD',
         "" as PREVIOUS_ACCOUNT_ID length = 32
            format = $32.
            informat = $32.
            label = 'PREVIOUS_ACCOUNT_ID',
         "" as OPEN_BRANCH_FINANCIAL_UNIT_ID length = 32
            format = $32.
            informat = $32.
            label = 'OPEN_BRANCH_FINANCIAL_UNIT_ID',
         MID_FINANCIAL_UNIT_ID_BRCA as PRIM_BRANCH_FINANCIAL_UNIT_ID   
            label = 'PRIM_BRANCH_FINANCIAL_UNIT_ID',
         "" as FINANCIAL_APPLICATION_ID length = 32
            format = $32.
            informat = $32.
            label = 'FINANCIAL_APPLICATION_ID',
         "" as CREDIT_FACILITY_ID length = 40
            format = $40.
            informat = $40.
            label = 'CREDIT_FACILITY_ID',
         . as FUTURE_MARGIN_INCOME_AMT length = 8
            format = 20.5
            informat = 20.5
            label = 'FUTURE_MARGIN_INCOME_AMT',
         "" as IN_DEFAULT_FLG length = 1
            format = $1.
            informat = $1.
            label = 'IN_DEFAULT_FLG',
         "" as FINANCIAL_BOOK_ID length = 32
            format = $32.
            informat = $32.
            label = 'FINANCIAL_BOOK_ID',
         "" as IRRECOVERABLE_FLG length = 1
            format = $1.
            informat = $1.
            label = 'IRRECOVERABLE_FLG',
         "" as OWNED_BY_INTERNAL_ORG_ID length = 32
            format = $32.
            informat = $32.
            label = 'OWNED_BY_INTERNAL_ORG_ID',
         "" as PREVIOUS_BANK_EXTERNAL_ORG_ID length = 32
            format = $32.
            informat = $32.
            label = 'PREVIOUS_BANK_EXTERNAL_ORG_ID',
         "" as NETTING_SET_ID length = 32
            format = $32.
            informat = $32.
            label = 'NETTING_SET_ID',
         "" as REVOLVING_FLG length = 1
            format = $1.
            informat = $1.
            label = 'REVOLVING_FLG',
         "" as SOURCE_CHANNEL_CD length = 3
            format = $3.
            informat = $3.
            label = 'SOURCE_CHANNEL_CD',
         . as GRACE_PERIOD_DAYS_CNT length = 8
            format = 7.
            informat = 7.
            label = 'GRACE_PERIOD_DAYS_CNT',
         . as REMARGINING_DAYS_CNT length = 8
            format = 7.
            informat = 7.
            label = 'REMARGINING_DAYS_CNT',
         "" as FINANCIAL_CALENDAR_ID length = 32
            format = $32.
            informat = $32.
            label = 'FINANCIAL_CALENDAR_ID',
         DAY_BASIS_CD,
         "" as PORTFOLIO_ID length = 32
            format = $32.
            informat = $32.
            label = 'PORTFOLIO_ID',
         "" as SECURITIZATION_POOL_ID length = 32
            format = $32.
            informat = $32.
            label = 'SECURITIZATION_POOL_ID',
         "" as RECEIVABLES_POOL_ID length = 32
            format = $32.
            informat = $32.
            label = 'RECEIVABLES_POOL_ID',
         "" as ACCOUNT_USAGE_TYPE_CD length = 3
            format = $3.
            informat = $3.
            label = 'ACCOUNT_USAGE_TYPE_CD',
         "" as RISK_ALARM_FLG length = 1
            format = $1.
            informat = $1.
            label = 'RISK_ALARM_FLG',
         "" as LOW_PROFITABILITY_FLG length = 1
            format = $1.
            informat = $1.
            label = 'LOW_PROFITABILITY_FLG',
         "" as ACCOUNT_LIFECYCLE_STG_CD length = 3
            format = $3.
            informat = $3.
            label = 'ACCOUNT_LIFECYCLE_STG_CD',
         "" as ATTRITION_ALARM_FLG length = 1
            format = $1.
            informat = $1.
            label = 'ATTRITION_ALARM_FLG',
         "" as BALANCE_FROZEN_FLG length = 1
            format = $1.
            informat = $1.
            label = 'BALANCE_FROZEN_FLG',
         . as BALANCE_FROZEN_DT length = 8
            format = DATETIME20.
            informat = DATETIME20.
            label = 'BALANCE_FROZEN_DT',
         "" as ACCOUNT_BLOCK_REASON_CD length = 3
            format = $3.
            informat = $3.
            label = 'ACCOUNT_BLOCK_REASON_CD',
         "" as TAXATION_STATE_CD length = 4
            format = $4.
            informat = $4.
            label = 'TAXATION_STATE_CD',
         . as EFFECTIVE_MATURITY_YEAR_NO length = 8
            format = 9.3
            informat = 9.3
            label = 'EFFECTIVE_MATURITY_YEAR_NO',
         "" as GL_ACCOUNT_ID length = 32
            format = $32.
            informat = $32.
            label = 'GL_ACCOUNT_ID',
         "" as FROM_OTHER_INSTITUTION_FLG length = 1
            format = $1.
            informat = $1.
            label = 'FROM_OTHER_INSTITUTION_FLG',
         . as ACCOUNT_RENEWAL_CNT length = 8
            format = 7.
            informat = 7.
            label = 'ACCOUNT_RENEWAL_CNT',
         . as BALANCE_TRANSFER_DT length = 8
            format = DATETIME20.
            informat = DATETIME20.
            label = 'BALANCE_TRANSFER_DT',
         . as BALANCE_TRANSFER_AMT length = 8
            format = 20.5
            informat = 20.5
            label = 'BALANCE_TRANSFER_AMT',
         . as BALANCE_TRANSFER_CNT length = 8
            format = 7.
            informat = 7.
            label = 'BALANCE_TRANSFER_CNT',
         . as BASE_LONG_TERM_APR_RT length = 8
            format = 11.4
            informat = 11.4
            label = 'BASE_LONG_TERM_APR_RT',
         "" as BROKER_FLG length = 1
            format = $1.
            informat = $1.
            label = 'BROKER_FLG',
         "" as MULT_RATE_FLG length = 1
            format = $1.
            informat = $1.
            label = 'MULT_RATE_FLG',
         "" as AUTO_DEBIT_ACCOUNT_NO length = 32
            format = $32.
            informat = $32.
            label = 'AUTO_DEBIT_ACCOUNT_NO',
         "" as WORST_STATUS_LAST_12_MTH_CD length = 3
            format = $3.
            informat = $3.
            label = 'WORST_STATUS_LAST_12_MTH_CD',
         . as WORST_STATUS_LAST_12_MTH_DT length = 8
            format = DATETIME20.
            informat = DATETIME20.
            label = 'WORST_STATUS_LAST_12_MTH_DT',
         . as BALANCE_TRNSF_OTHER_ACCT_CNT length = 8
            format = 7.
            informat = 7.
            label = 'BALANCE_TRNSF_OTHER_ACCT_CNT',
         . as EFFECTIVE_FROM_DTTM length = 8
            format = DATETIME20.
            informat = DATETIME20.
            label = 'EFFECTIVE_FROM_DTTM',
         . as EFFECTIVE_TO_DTTM length = 8
            format = DATETIME20.
            informat = DATETIME20.
            label = 'EFFECTIVE_TO_DTTM',
         "" as COUNTERPARTY_ID length = 32
            format = $32.
            informat = $32.
            label = 'COUNTERPARTY_ID',
         "" as INSURED_BY_COUNTERPARTY_ID length = 32
            format = $32.
            informat = $32.
            label = 'INSURED_BY_COUNTERPARTY_ID',
         "" as STATEMENT_FREQUENCY_CD length = 3
            format = $3.
            informat = $3.
            label = 'STATEMENT_FREQUENCY_CD',
         . as SECURITY_DEPOSIT_AMT length = 8
            format = 20.5
            informat = 20.5
            label = 'SECURITY_DEPOSIT_AMT',
         . as SECURITY_DEPOSIT_REFUND_AMT length = 8
            format = 20.5
            informat = 20.5
            label = 'SECURITY_DEPOSIT_REFUND_AMT',
         . as FIRST_PAYMENT_DT length = 8
            format = DATETIME20.
            informat = DATETIME20.
            label = 'FIRST_PAYMENT_DT',
         . as LAST_PAYMENT_DT length = 8
            format = DATETIME20.
            informat = DATETIME20.
            label = 'LAST_PAYMENT_DT',
         . as FIRST_RESET_DT length = 8
            format = DATETIME20.
            informat = DATETIME20.
            label = 'FIRST_RESET_DT',
         . as LAST_RESET_DT length = 8
            format = DATETIME20.
            informat = DATETIME20.
            label = 'LAST_RESET_DT',
         . as RESETS_PER_ANNUM_NO length = 8
            format = 6.
            informat = 6.
            label = 'RESETS_PER_ANNUM_NO',
         "" as PRINCIPAL_PAYMENT_TYPE_CD length = 3
            format = $3.
            informat = $3.
            label = 'PRINCIPAL_PAYMENT_TYPE_CD',
         . as PRINCIPAL_PAYMENT_AMT length = 8
            format = 20.5
            informat = 20.5
            label = 'PRINCIPAL_PAYMENT_AMT',
         "" as RATE_POLICY_ID length = 32
            format = $32.
            informat = $32.
            label = 'RATE_POLICY_ID',
         . as SPREAD_RT length = 8
            format = 11.4
            informat = 11.4
            label = 'SPREAD_RT',
         . as DISCOUNT_SPREAD_RT length = 8
            format = 11.4
            informat = 11.4
            label = 'DISCOUNT_SPREAD_RT',
         . as INITIAL_CONTRACT_RT length = 8
            format = 11.4
            informat = 11.4
            label = 'INITIAL_CONTRACT_RT',
         . as FIXED_MONTHLY_PREPAYMENT_RT length = 8
            format = 11.4
            informat = 11.4
            label = 'FIXED_MONTHLY_PREPAYMENT_RT',
         "" as CAPITAL_ALLOCATION_ID length = 32
            format = $32.
            informat = $32.
            label = 'CAPITAL_ALLOCATION_ID',
         "" as CAPITAL_COST_ID length = 32
            format = $32.
            informat = $32.
            label = 'CAPITAL_COST_ID',
         "" as SEGMENT_ID length = 32
            format = $32.
            informat = $32.
            label = 'SEGMENT_ID',
         "" as NEAR_BRANCH_FINANCIAL_UNIT_ID length = 32
            format = $32.
            informat = $32.
            label = 'NEAR_BRANCH_FINANCIAL_UNIT_ID',
         "" as STATEMENT_OPT_FLG length = 1
            format = $1.
            informat = $1.
            label = 'STATEMENT_OPT_FLG',
         . as VALUE_SCALING_FACTOR_RT length = 8
            format = 11.4
            informat = 11.4
            label = 'VALUE_SCALING_FACTOR_RT',
         "" as INTERNAL_REPORTING_CATEGORY_CD length = 3
            format = $3.
            informat = $3.
            label = 'INTERNAL_REPORTING_CATEGORY_CD',
         "" as CONVEXITY_ADJUSTMENT_FLG length = 1
            format = $1.
            informat = $1.
            label = 'CONVEXITY_ADJUSTMENT_FLG',
         "" as ARREARS_PAYMENT_CD length = 3
            format = $3.
            informat = $3.
            label = 'ARREARS_PAYMENT_CD',
         "" as QUANTO_FEATURE_ID length = 32
            format = $32.
            informat = $32.
            label = 'QUANTO_FEATURE_ID',
         "" as CASH_INTENSIVE_BUSINESS_FLG length = 1
            format = $1.
            informat = $1.
            label = 'CASH_INTENSIVE_BUSINESS_FLG',
         "" as LETTER_OF_CREDIT_ONFILE_FLG length = 1
            format = $1.
            informat = $1.
            label = 'LETTER_OF_CREDIT_ONFILE_FLG',
         "" as TRADE_FINANCE_FLG length = 1
            format = $1.
            informat = $1.
            label = 'TRADE_FINANCE_FLG',
         "" as ANNUITY_PAYMENT_TYPE_CD length = 3
            format = $3.
            informat = $3.
            label = 'ANNUITY_PAYMENT_TYPE_CD',
         INTEREST_PAYMENT_TYPE_CD,
         "" as INTEREST_PAYMENT_TIME_FREQ_CD length = 3
            format = $3.
            informat = $3.
            label = 'INTEREST_PAYMENT_TIME_FREQ_CD',
         "" as LIQUIDITY_CATEGORY_TYPE_CD length = 3
            format = $3.
            informat = $3.
            label = 'LIQUIDITY_CATEGORY_TYPE_CD',
         "" as HOLIDAY_DATE_ROLL_CONV_CD length = 3
            format = $3.
            informat = $3.
            label = 'HOLIDAY_DATE_ROLL_CONV_CD',
         "" as WEEKEND_DATE_ROLL_CONV_CD length = 3
            format = $3.
            informat = $3.
            label = 'WEEKEND_DATE_ROLL_CONV_CD',
         "" as EXPENSE_ALLOCATION_ID length = 32
            format = $32.
            informat = $32.
            label = 'EXPENSE_ALLOCATION_ID',
         . as FIRST_INTEREST_PAYMENT_DT length = 8
            format = DATETIME20.
            informat = DATETIME20.
            label = 'FIRST_INTEREST_PAYMENT_DT',
         . as LAST_INTEREST_PAYMENT_DT length = 8
            format = DATETIME20.
            informat = DATETIME20.
            label = 'LAST_INTEREST_PAYMENT_DT',
         IRB_DUMMY_TYPE_CD,
         IRB_SRC_ACCOUNT_ID,
         BRCA,
         AIPD,
         FINANCIAL_INSTRUMENT_ID,
         FINANCIAL_INSTRUMENT_TYPE_CD
   from work.W43LZYD8
   ;
quit;

%let SYSLAST = work.WIROR91;

proc datasets lib = work nolist nowarn memtype = (data view);
   delete W1AFHY0U;
quit;

data work.W1AFHY0U / view=work.W1AFHY0U;
   set work.WIROR6F
       work.WIROR91;
   keep ACCOUNT_ID VALID_FROM_DTTM VALID_TO_DTTM SOURCE_SYSTEM_CD 
    ACCOUNT_REGISTRATION_NM ALTERNATE_ACCOUNT_NM FINANCIAL_ACCOUNT_TYPE_CD 
    AUTO_DEBIT_ACCOUNT_TYPE_CD ACCOUNT_REGISTRATION_TYPE_CD ACCOUNT_STATUS_CD 
    OPEN_DT CLOSE_DT CLOSE_REASON_CD ACCOUNT_TAX_ID EXPECTED_LOSS_PCT 
    INDIVIDUAL_ORGANIZATION_CD SOURCE_CD OPENING_CHANNEL_CD PREFERRED_CHANNEL_CD 
    CURRENCY_CD PRIMARY_PHONE_NO PRIMARY_PHONE_TYPE_CD SECONDARY_PHONE_NO 
    SECONDARY_PHONE_TYPE_CD MAILABLE_FLG TELEPHONABLE_FLG EMAIL_FLG SMS_FLG 
    DO_NOT_CONTACT_FLG EMPLOYEE_RK CURRENCY_BASED_ACCOUNT_FLG FEE_BASED_FLG 
    ANNUAL_FEES_AMT MONTHLY_FEES_AMT CAMPAIGN_CD COMMUNICATION_CD 
    REGISTERED_ONLINE_DT FIRST_LOGIN_DT ONLINE_BILL_PAYMENT_FLG 
    ID_VERIFICATION_TYPE_CD PREVIOUS_ACCOUNT_ID OPEN_BRANCH_FINANCIAL_UNIT_ID 
    PRIM_BRANCH_FINANCIAL_UNIT_ID FINANCIAL_APPLICATION_ID CREDIT_FACILITY_ID 
    FUTURE_MARGIN_INCOME_AMT IN_DEFAULT_FLG FINANCIAL_BOOK_ID IRRECOVERABLE_FLG 
    OWNED_BY_INTERNAL_ORG_ID PREVIOUS_BANK_EXTERNAL_ORG_ID NETTING_SET_ID 
    REVOLVING_FLG SOURCE_CHANNEL_CD GRACE_PERIOD_DAYS_CNT REMARGINING_DAYS_CNT 
    FINANCIAL_CALENDAR_ID DAY_BASIS_CD PORTFOLIO_ID SECURITIZATION_POOL_ID 
    RECEIVABLES_POOL_ID ACCOUNT_USAGE_TYPE_CD RISK_ALARM_FLG 
    LOW_PROFITABILITY_FLG ACCOUNT_LIFECYCLE_STG_CD ATTRITION_ALARM_FLG 
    BALANCE_FROZEN_FLG BALANCE_FROZEN_DT ACCOUNT_BLOCK_REASON_CD 
    TAXATION_STATE_CD EFFECTIVE_MATURITY_YEAR_NO GL_ACCOUNT_ID 
    FROM_OTHER_INSTITUTION_FLG ACCOUNT_RENEWAL_CNT BALANCE_TRANSFER_DT 
    BALANCE_TRANSFER_AMT BALANCE_TRANSFER_CNT BASE_LONG_TERM_APR_RT BROKER_FLG 
    MULT_RATE_FLG AUTO_DEBIT_ACCOUNT_NO WORST_STATUS_LAST_12_MTH_CD 
    WORST_STATUS_LAST_12_MTH_DT BALANCE_TRNSF_OTHER_ACCT_CNT EFFECTIVE_FROM_DTTM 
    EFFECTIVE_TO_DTTM COUNTERPARTY_ID INSURED_BY_COUNTERPARTY_ID 
    STATEMENT_FREQUENCY_CD SECURITY_DEPOSIT_AMT SECURITY_DEPOSIT_REFUND_AMT 
    FIRST_PAYMENT_DT LAST_PAYMENT_DT FIRST_RESET_DT LAST_RESET_DT 
    RESETS_PER_ANNUM_NO PRINCIPAL_PAYMENT_TYPE_CD PRINCIPAL_PAYMENT_AMT 
    RATE_POLICY_ID SPREAD_RT DISCOUNT_SPREAD_RT INITIAL_CONTRACT_RT 
    FIXED_MONTHLY_PREPAYMENT_RT CAPITAL_ALLOCATION_ID CAPITAL_COST_ID SEGMENT_ID 
    NEAR_BRANCH_FINANCIAL_UNIT_ID STATEMENT_OPT_FLG VALUE_SCALING_FACTOR_RT 
    INTERNAL_REPORTING_CATEGORY_CD CONVEXITY_ADJUSTMENT_FLG ARREARS_PAYMENT_CD 
    QUANTO_FEATURE_ID CASH_INTENSIVE_BUSINESS_FLG LETTER_OF_CREDIT_ONFILE_FLG 
    TRADE_FINANCE_FLG ANNUITY_PAYMENT_TYPE_CD INTEREST_PAYMENT_TYPE_CD 
    INTEREST_PAYMENT_TIME_FREQ_CD LIQUIDITY_CATEGORY_TYPE_CD 
    HOLIDAY_DATE_ROLL_CONV_CD WEEKEND_DATE_ROLL_CONV_CD EXPENSE_ALLOCATION_ID 
    FIRST_INTEREST_PAYMENT_DT LAST_INTEREST_PAYMENT_DT IRB_DUMMY_TYPE_CD 
    IRB_SRC_ACCOUNT_ID BRCA AIPD FINANCIAL_INSTRUMENT_ID 
    FINANCIAL_INSTRUMENT_TYPE_CD; 
run;

%rcSet(&syserr); 



/**  Step end Append **/

/*==========================================================================* 
 * Step:            Table Loader                          A5Y50FNE.AQ000AG2 * 
 * Transform:       Table Loader (Version 2.1)                              * 
 * Description:                                                             * 
 *                                                                          * 
 * Source Table:    Append - work.W1AFHY0U                A5Y50FNE.AO0005V4 * 
 * Target Table:    FINANCIAL_ACCOUNT_DCD_BK -            A5Y50FNE.AE00012G * 
 *                   work_ia.FINANCIAL_ACCOUNT_DCD_BK                       * 
 *==========================================================================*/ 

%let transformID = %quote(A5Y50FNE.AQ000AG2);
%let trans_rc = 0;
%let etls_stepStartTime = %sysfunc(datetime(), datetime20.); 

%let SYSLAST = %nrquote(work.W1AFHY0U); 

%let SYS_SQL_IP_SPEEDO = Y;
%let SYS_SQL_MAPPUTTO = sas_put;
%let SYS_SQLREDUCEPUT = DBMS;
%global etls_sql_pushDown;
%let etls_sql_pushDown = -1;
option DBIDIRECTEXEC;

%global etls_tableExist;
%global etls_numIndex;
%global etls_lastTable;
%let etls_tableExist = -1; 
%let etls_numIndex = -1; 
%let etls_lastTable = &SYSLAST; 

/*---- Define load data macro  ----*/ 

/* --------------------------------------------------------------
   Load Technique Selection: Replace - EntireTable
   Constraint and index action selections: 'INIT','ASIS','ASIS','ASIS'
   Additional options selections... 
      Set unmapped to missing on updates: false 
   -------------------------------------------------------------- */
%macro etls_loader;

   %let etls_tableOptions = ;
   
   /*---- Map the columns  ----*/ 
   proc datasets lib = work nolist nowarn memtype = (data view);
      delete WIRORCI;
   quit;
   
   %put %str(NOTE: Mapping columns ...);
   proc sql;
      create view work.WIRORCI as
         select
            ACCOUNT_ID,
            (min(VALID_FROM_DTTM, coalesce(OPEN_DT, VALID_FROM_DTTM))) as VALID_FROM_DTTM length = 8
               format = DATETIME20.
               informat = DATETIME20.,
            VALID_TO_DTTM,
            SOURCE_SYSTEM_CD,
            ACCOUNT_REGISTRATION_NM,
            ALTERNATE_ACCOUNT_NM,
            FINANCIAL_ACCOUNT_TYPE_CD,
            AUTO_DEBIT_ACCOUNT_TYPE_CD,
            ACCOUNT_REGISTRATION_TYPE_CD,
            ACCOUNT_STATUS_CD,
            OPEN_DT,
            (ifn(ACCOUNT_STATUS_CD = 'AUT', ., CLOSE_DT)) as CLOSE_DT length = 8
               format = DATETIME20.
               informat = DATETIME20.,
            CLOSE_REASON_CD,
            ACCOUNT_TAX_ID,
            EXPECTED_LOSS_PCT,
            INDIVIDUAL_ORGANIZATION_CD,
            SOURCE_CD,
            OPENING_CHANNEL_CD,
            PREFERRED_CHANNEL_CD,
            CURRENCY_CD,
            PRIMARY_PHONE_NO,
            PRIMARY_PHONE_TYPE_CD,
            SECONDARY_PHONE_NO,
            SECONDARY_PHONE_TYPE_CD,
            MAILABLE_FLG,
            TELEPHONABLE_FLG,
            EMAIL_FLG,
            SMS_FLG,
            DO_NOT_CONTACT_FLG,
            EMPLOYEE_RK,
            CURRENCY_BASED_ACCOUNT_FLG,
            FEE_BASED_FLG,
            ANNUAL_FEES_AMT,
            MONTHLY_FEES_AMT,
            CAMPAIGN_CD,
            COMMUNICATION_CD,
            REGISTERED_ONLINE_DT,
            FIRST_LOGIN_DT,
            ONLINE_BILL_PAYMENT_FLG,
            ID_VERIFICATION_TYPE_CD,
            PREVIOUS_ACCOUNT_ID,
            OPEN_BRANCH_FINANCIAL_UNIT_ID,
            PRIM_BRANCH_FINANCIAL_UNIT_ID,
            FINANCIAL_APPLICATION_ID,
            CREDIT_FACILITY_ID,
            FUTURE_MARGIN_INCOME_AMT,
            IN_DEFAULT_FLG,
            FINANCIAL_BOOK_ID,
            IRRECOVERABLE_FLG,
            OWNED_BY_INTERNAL_ORG_ID,
            PREVIOUS_BANK_EXTERNAL_ORG_ID,
            NETTING_SET_ID,
            REVOLVING_FLG,
            SOURCE_CHANNEL_CD,
            GRACE_PERIOD_DAYS_CNT,
            REMARGINING_DAYS_CNT,
            FINANCIAL_CALENDAR_ID,
            DAY_BASIS_CD,
            PORTFOLIO_ID,
            SECURITIZATION_POOL_ID,
            RECEIVABLES_POOL_ID,
            ACCOUNT_USAGE_TYPE_CD,
            RISK_ALARM_FLG,
            LOW_PROFITABILITY_FLG,
            ACCOUNT_LIFECYCLE_STG_CD,
            ATTRITION_ALARM_FLG,
            BALANCE_FROZEN_FLG,
            BALANCE_FROZEN_DT,
            ACCOUNT_BLOCK_REASON_CD,
            TAXATION_STATE_CD,
            EFFECTIVE_MATURITY_YEAR_NO,
            GL_ACCOUNT_ID,
            FROM_OTHER_INSTITUTION_FLG,
            ACCOUNT_RENEWAL_CNT,
            BALANCE_TRANSFER_DT,
            BALANCE_TRANSFER_AMT,
            BALANCE_TRANSFER_CNT,
            BASE_LONG_TERM_APR_RT,
            BROKER_FLG,
            MULT_RATE_FLG,
            AUTO_DEBIT_ACCOUNT_NO,
            WORST_STATUS_LAST_12_MTH_CD,
            WORST_STATUS_LAST_12_MTH_DT,
            BALANCE_TRNSF_OTHER_ACCT_CNT,
            EFFECTIVE_FROM_DTTM,
            EFFECTIVE_TO_DTTM,
            COUNTERPARTY_ID,
            INSURED_BY_COUNTERPARTY_ID,
            STATEMENT_FREQUENCY_CD,
            SECURITY_DEPOSIT_AMT,
            SECURITY_DEPOSIT_REFUND_AMT,
            FIRST_PAYMENT_DT,
            LAST_PAYMENT_DT,
            FIRST_RESET_DT,
            LAST_RESET_DT,
            RESETS_PER_ANNUM_NO,
            PRINCIPAL_PAYMENT_TYPE_CD,
            PRINCIPAL_PAYMENT_AMT,
            RATE_POLICY_ID,
            SPREAD_RT,
            DISCOUNT_SPREAD_RT,
            INITIAL_CONTRACT_RT,
            FIXED_MONTHLY_PREPAYMENT_RT,
            CAPITAL_ALLOCATION_ID,
            CAPITAL_COST_ID,
            SEGMENT_ID,
            NEAR_BRANCH_FINANCIAL_UNIT_ID,
            STATEMENT_OPT_FLG,
            VALUE_SCALING_FACTOR_RT,
            INTERNAL_REPORTING_CATEGORY_CD,
            CONVEXITY_ADJUSTMENT_FLG,
            ARREARS_PAYMENT_CD,
            QUANTO_FEATURE_ID,
            CASH_INTENSIVE_BUSINESS_FLG,
            LETTER_OF_CREDIT_ONFILE_FLG,
            TRADE_FINANCE_FLG,
            ANNUITY_PAYMENT_TYPE_CD,
            INTEREST_PAYMENT_TYPE_CD,
            INTEREST_PAYMENT_TIME_FREQ_CD,
            LIQUIDITY_CATEGORY_TYPE_CD,
            HOLIDAY_DATE_ROLL_CONV_CD,
            WEEKEND_DATE_ROLL_CONV_CD,
            EXPENSE_ALLOCATION_ID,
            FIRST_INTEREST_PAYMENT_DT,
            LAST_INTEREST_PAYMENT_DT,
            IRB_DUMMY_TYPE_CD,
            IRB_SRC_ACCOUNT_ID,
            BRCA,
            AIPD,
            FINANCIAL_INSTRUMENT_ID,
            FINANCIAL_INSTRUMENT_TYPE_CD
      from &etls_lastTable
      ;
   quit;
   
   %let SYSLAST = work.WIRORCI;
   
   %let etls_lastTable = &SYSLAST; 
   %let etls_tableOptions = ; 
   
   /* Determine if the target table exists  */ 
   %let etls_tableExist = %eval(%sysfunc(exist(work_ia.FINANCIAL_ACCOUNT_DCD_BK, DATA)) or 
         %sysfunc(exist(work_ia.FINANCIAL_ACCOUNT_DCD_BK, VIEW))); 
   
   %if &etls_tableExist %then 
   %do;/* table exists  */ 
      %let etls_hasPreExistingConstraint=0; 
      
      proc datasets lib = work nolist nowarn memtype = (data view);
         delete etls_commands etls_commands_F;
      quit;
      
      %let etls_otherTablesReferToThisTable=0;
      
      %macro etls_CIContents(table=,workTableOut=,inDSOptions=);
         %put NOTE: Building table listing Constraints and Indexes for: &table;
         proc datasets lib=work nolist; delete &workTableOut; quit;
         proc contents data=&table&inDSOptions out2=&workTableOut noprint; run;
         
         data &workTableOut;
            length name $60 type $20 icown idxUnique idxNoMiss $3 recreate $600;
            set &workTableOut;
            type=upcase(type);
            if type eq 'REFERENTIAL' then
            do;
               put "WARNING%QUOTE(:) Target table is referenced by constraints in"
                    " another table: " ref;
               call symput('etls_otherTablesReferToThisTable','1');
               delete;
            end;
            if type='INDEX' and ICOwn eq 'YES' then delete;
         run;
         %rcSet(&syserr); 
         
      %mend etls_CIContents;
      
      %etls_CIContents(table=work_ia.FINANCIAL_ACCOUNT_DCD_BK, workTableOut=etls_commands, inDSOptions=);
      
      %if &etls_otherTablesReferToThisTable %then 
         %put WARNING%QUOTE(:) Replacing entire table will fail. Consider an alternate load technique or revising constraints.; 
      %else 
      %do; /* okay - remove foreign keys  */ 
      
         data etls_commands_F; 
            set etls_commands; 
            if upcase(type)="FOREIGN KEY" then 
            do; 
               command='ic delete '||trim(name)||';';
               output etls_commands_F; 
            end; 
         run; 
         
         %put %str(NOTE: Removing foreign keys before dropping table...);
         data _null_;
            set etls_commands_F;
            %rcSet(&syserr); 
            
      %end; /* okay - remove foreign keys  */ 
      
      proc datasets lib = work nolist nowarn memtype = (data view);
         delete etls_commands etls_commands_F;
      quit;
      
      /*---- Drop a table  ----*/ 
      %put %str(NOTE: Dropping table ...);
      proc datasets lib = work_ia nolist nowarn memtype = (data view);
         delete FINANCIAL_ACCOUNT_DCD_BK;
      quit;
      
      %rcSet(&syserr); 
      
      %let etls_tableExist = 0;
      
   %end; /* table exists  */ 
   
   /*---- Create a new table  ----*/ 
   %if (&etls_tableExist eq 0) %then 
   %do;  /* if table does not exist  */ 
   
      %put %str(NOTE: Creating table ...);
      
      data work_ia.FINANCIAL_ACCOUNT_DCD_BK;
         attrib ACCOUNT_ID length = $32
            format = $32.
            informat = $32.
            label = 'ACCOUNT_ID'; 
         attrib VALID_FROM_DTTM length = 8
            format = DATETIME20.
            informat = DATETIME20.
            label = 'VALID_FROM_DTTM'; 
         attrib VALID_TO_DTTM length = 8
            format = DATETIME20.
            informat = DATETIME20.
            label = 'VALID_TO_DTTM'; 
         attrib SOURCE_SYSTEM_CD length = $3
            format = $3.
            informat = $3.
            label = 'SOURCE_SYSTEM_CD'; 
         attrib ACCOUNT_REGISTRATION_NM length = $100
            format = $100.
            informat = $100.
            label = 'ACCOUNT_REGISTRATION_NM'; 
         attrib ALTERNATE_ACCOUNT_NM length = $40
            format = $40.
            informat = $40.
            label = 'ALTERNATE_ACCOUNT_NM'; 
         attrib FINANCIAL_ACCOUNT_TYPE_CD length = $3
            format = $3.
            informat = $3.
            label = 'FINANCIAL_ACCOUNT_TYPE_CD'; 
         attrib AUTO_DEBIT_ACCOUNT_TYPE_CD length = $3
            format = $3.
            informat = $3.
            label = 'AUTO_DEBIT_ACCOUNT_TYPE_CD'; 
         attrib ACCOUNT_REGISTRATION_TYPE_CD length = $3
            format = $3.
            informat = $3.
            label = 'ACCOUNT_REGISTRATION_TYPE_CD'; 
         attrib ACCOUNT_STATUS_CD length = $3
            format = $3.
            informat = $3.
            label = 'ACCOUNT_STATUS_CD'; 
         attrib OPEN_DT length = 8
            format = DATETIME20.
            informat = DATETIME20.
            label = 'OPEN_DT'; 
         attrib CLOSE_DT length = 8
            format = DATETIME20.
            informat = DATETIME20.
            label = 'CLOSE_DT'; 
         attrib CLOSE_REASON_CD length = $3
            format = $3.
            informat = $3.
            label = 'CLOSE_REASON_CD'; 
         attrib ACCOUNT_TAX_ID length = $32
            format = $32.
            informat = $32.
            label = 'ACCOUNT_TAX_ID'; 
         attrib EXPECTED_LOSS_PCT length = 8
            format = 11.4
            informat = 11.4
            label = 'EXPECTED_LOSS_PCT'; 
         attrib INDIVIDUAL_ORGANIZATION_CD length = $3
            format = $3.
            informat = $3.
            label = 'INDIVIDUAL_ORGANIZATION_CD'; 
         attrib SOURCE_CD length = $5
            format = $5.
            informat = $5.
            label = 'SOURCE_CD'; 
         attrib OPENING_CHANNEL_CD length = $3
            format = $3.
            informat = $3.
            label = 'OPENING_CHANNEL_CD'; 
         attrib PREFERRED_CHANNEL_CD length = $3
            format = $3.
            informat = $3.
            label = 'PREFERRED_CHANNEL_CD'; 
         attrib CURRENCY_CD length = $3
            format = $3.
            informat = $3.
            label = 'CURRENCY_CD'; 
         attrib PRIMARY_PHONE_NO length = $20
            format = $20.
            informat = $20.
            label = 'PRIMARY_PHONE_NO'; 
         attrib PRIMARY_PHONE_TYPE_CD length = $3
            format = $3.
            informat = $3.
            label = 'PRIMARY_PHONE_TYPE_CD'; 
         attrib SECONDARY_PHONE_NO length = $20
            format = $20.
            informat = $20.
            label = 'SECONDARY_PHONE_NO'; 
         attrib SECONDARY_PHONE_TYPE_CD length = $3
            format = $3.
            informat = $3.
            label = 'SECONDARY_PHONE_TYPE_CD'; 
         attrib MAILABLE_FLG length = $1
            format = $1.
            informat = $1.
            label = 'MAILABLE_FLG'; 
         attrib TELEPHONABLE_FLG length = $1
            format = $1.
            informat = $1.
            label = 'TELEPHONABLE_FLG'; 
         attrib EMAIL_FLG length = $1
            format = $1.
            informat = $1.
            label = 'EMAIL_FLG'; 
         attrib SMS_FLG length = $1
            format = $1.
            informat = $1.
            label = 'SMS_FLG'; 
         attrib DO_NOT_CONTACT_FLG length = $1
            format = $1.
            informat = $1.
            label = 'DO_NOT_CONTACT_FLG'; 
         attrib EMPLOYEE_RK length = 8
            format = 11.
            informat = 11.
            label = 'EMPLOYEE_RK'; 
         attrib CURRENCY_BASED_ACCOUNT_FLG length = $1
            format = $1.
            informat = $1.
            label = 'CURRENCY_BASED_ACCOUNT_FLG'; 
         attrib FEE_BASED_FLG length = $1
            format = $1.
            informat = $1.
            label = 'FEE_BASED_FLG'; 
         attrib ANNUAL_FEES_AMT length = 8
            format = 20.5
            informat = 20.5
            label = 'ANNUAL_FEES_AMT'; 
         attrib MONTHLY_FEES_AMT length = 8
            format = 20.5
            informat = 20.5
            label = 'MONTHLY_FEES_AMT'; 
         attrib CAMPAIGN_CD length = $30
            format = $30.
            informat = $30.
            label = 'CAMPAIGN_CD'; 
         attrib COMMUNICATION_CD length = $30
            format = $30.
            informat = $30.
            label = 'COMMUNICATION_CD'; 
         attrib REGISTERED_ONLINE_DT length = 8
            format = DATETIME20.
            informat = DATETIME20.
            label = 'REGISTERED_ONLINE_DT'; 
         attrib FIRST_LOGIN_DT length = 8
            format = DATETIME20.
            informat = DATETIME20.
            label = 'FIRST_LOGIN_DT'; 
         attrib ONLINE_BILL_PAYMENT_FLG length = $1
            format = $1.
            informat = $1.
            label = 'ONLINE_BILL_PAYMENT_FLG'; 
         attrib ID_VERIFICATION_TYPE_CD length = $3
            format = $3.
            informat = $3.
            label = 'ID_VERIFICATION_TYPE_CD'; 
         attrib PREVIOUS_ACCOUNT_ID length = $32
            format = $32.
            informat = $32.
            label = 'PREVIOUS_ACCOUNT_ID'; 
         attrib OPEN_BRANCH_FINANCIAL_UNIT_ID length = $32
            format = $32.
            informat = $32.
            label = 'OPEN_BRANCH_FINANCIAL_UNIT_ID'; 
         attrib PRIM_BRANCH_FINANCIAL_UNIT_ID length = $32
            format = $32.
            informat = $32.
            label = 'PRIM_BRANCH_FINANCIAL_UNIT_ID'; 
         attrib FINANCIAL_APPLICATION_ID length = $32
            format = $32.
            informat = $32.
            label = 'FINANCIAL_APPLICATION_ID'; 
         attrib CREDIT_FACILITY_ID length = $40
            format = $40.
            informat = $40.
            label = 'CREDIT_FACILITY_ID'; 
         attrib FUTURE_MARGIN_INCOME_AMT length = 8
            format = 20.5
            informat = 20.5
            label = 'FUTURE_MARGIN_INCOME_AMT'; 
         attrib IN_DEFAULT_FLG length = $1
            format = $1.
            informat = $1.
            label = 'IN_DEFAULT_FLG'; 
         attrib FINANCIAL_BOOK_ID length = $32
            format = $32.
            informat = $32.
            label = 'FINANCIAL_BOOK_ID'; 
         attrib IRRECOVERABLE_FLG length = $1
            format = $1.
            informat = $1.
            label = 'IRRECOVERABLE_FLG'; 
         attrib OWNED_BY_INTERNAL_ORG_ID length = $32
            format = $32.
            informat = $32.
            label = 'OWNED_BY_INTERNAL_ORG_ID'; 
         attrib PREVIOUS_BANK_EXTERNAL_ORG_ID length = $32
            format = $32.
            informat = $32.
            label = 'PREVIOUS_BANK_EXTERNAL_ORG_ID'; 
         attrib NETTING_SET_ID length = $32
            format = $32.
            informat = $32.
            label = 'NETTING_SET_ID'; 
         attrib REVOLVING_FLG length = $1
            format = $1.
            informat = $1.
            label = 'REVOLVING_FLG'; 
         attrib SOURCE_CHANNEL_CD length = $3
            format = $3.
            informat = $3.
            label = 'SOURCE_CHANNEL_CD'; 
         attrib GRACE_PERIOD_DAYS_CNT length = 8
            format = 7.
            informat = 7.
            label = 'GRACE_PERIOD_DAYS_CNT'; 
         attrib REMARGINING_DAYS_CNT length = 8
            format = 7.
            informat = 7.
            label = 'REMARGINING_DAYS_CNT'; 
         attrib FINANCIAL_CALENDAR_ID length = $32
            format = $32.
            informat = $32.
            label = 'FINANCIAL_CALENDAR_ID'; 
         attrib DAY_BASIS_CD length = $10
            format = $10.
            informat = $10.
            label = 'DAY_BASIS_CD'; 
         attrib PORTFOLIO_ID length = $32
            format = $32.
            informat = $32.
            label = 'PORTFOLIO_ID'; 
         attrib SECURITIZATION_POOL_ID length = $32
            format = $32.
            informat = $32.
            label = 'SECURITIZATION_POOL_ID'; 
         attrib RECEIVABLES_POOL_ID length = $32
            format = $32.
            informat = $32.
            label = 'RECEIVABLES_POOL_ID'; 
         attrib ACCOUNT_USAGE_TYPE_CD length = $3
            format = $3.
            informat = $3.
            label = 'ACCOUNT_USAGE_TYPE_CD'; 
         attrib RISK_ALARM_FLG length = $1
            format = $1.
            informat = $1.
            label = 'RISK_ALARM_FLG'; 
         attrib LOW_PROFITABILITY_FLG length = $1
            format = $1.
            informat = $1.
            label = 'LOW_PROFITABILITY_FLG'; 
         attrib ACCOUNT_LIFECYCLE_STG_CD length = $3
            format = $3.
            informat = $3.
            label = 'ACCOUNT_LIFECYCLE_STG_CD'; 
         attrib ATTRITION_ALARM_FLG length = $1
            format = $1.
            informat = $1.
            label = 'ATTRITION_ALARM_FLG'; 
         attrib BALANCE_FROZEN_FLG length = $1
            format = $1.
            informat = $1.
            label = 'BALANCE_FROZEN_FLG'; 
         attrib BALANCE_FROZEN_DT length = 8
            format = DATETIME20.
            informat = DATETIME20.
            label = 'BALANCE_FROZEN_DT'; 
         attrib ACCOUNT_BLOCK_REASON_CD length = $3
            format = $3.
            informat = $3.
            label = 'ACCOUNT_BLOCK_REASON_CD'; 
         attrib TAXATION_STATE_CD length = $4
            format = $4.
            informat = $4.
            label = 'TAXATION_STATE_CD'; 
         attrib EFFECTIVE_MATURITY_YEAR_NO length = 8
            format = 9.3
            informat = 9.3
            label = 'EFFECTIVE_MATURITY_YEAR_NO'; 
         attrib GL_ACCOUNT_ID length = $32
            format = $32.
            informat = $32.
            label = 'GL_ACCOUNT_ID'; 
         attrib FROM_OTHER_INSTITUTION_FLG length = $1
            format = $1.
            informat = $1.
            label = 'FROM_OTHER_INSTITUTION_FLG'; 
         attrib ACCOUNT_RENEWAL_CNT length = 8
            format = 7.
            informat = 7.
            label = 'ACCOUNT_RENEWAL_CNT'; 
         attrib BALANCE_TRANSFER_DT length = 8
            format = DATETIME20.
            informat = DATETIME20.
            label = 'BALANCE_TRANSFER_DT'; 
         attrib BALANCE_TRANSFER_AMT length = 8
            format = 20.5
            informat = 20.5
            label = 'BALANCE_TRANSFER_AMT'; 
         attrib BALANCE_TRANSFER_CNT length = 8
            format = 7.
            informat = 7.
            label = 'BALANCE_TRANSFER_CNT'; 
         attrib BASE_LONG_TERM_APR_RT length = 8
            format = 11.4
            informat = 11.4
            label = 'BASE_LONG_TERM_APR_RT'; 
         attrib BROKER_FLG length = $1
            format = $1.
            informat = $1.
            label = 'BROKER_FLG'; 
         attrib MULT_RATE_FLG length = $1
            format = $1.
            informat = $1.
            label = 'MULT_RATE_FLG'; 
         attrib AUTO_DEBIT_ACCOUNT_NO length = $32
            format = $32.
            informat = $32.
            label = 'AUTO_DEBIT_ACCOUNT_NO'; 
         attrib WORST_STATUS_LAST_12_MTH_CD length = $3
            format = $3.
            informat = $3.
            label = 'WORST_STATUS_LAST_12_MTH_CD'; 
         attrib WORST_STATUS_LAST_12_MTH_DT length = 8
            format = DATETIME20.
            informat = DATETIME20.
            label = 'WORST_STATUS_LAST_12_MTH_DT'; 
         attrib BALANCE_TRNSF_OTHER_ACCT_CNT length = 8
            format = 7.
            informat = 7.
            label = 'BALANCE_TRNSF_OTHER_ACCT_CNT'; 
         attrib EFFECTIVE_FROM_DTTM length = 8
            format = DATETIME20.
            informat = DATETIME20.
            label = 'EFFECTIVE_FROM_DTTM'; 
         attrib EFFECTIVE_TO_DTTM length = 8
            format = DATETIME20.
            informat = DATETIME20.
            label = 'EFFECTIVE_TO_DTTM'; 
         attrib COUNTERPARTY_ID length = $32
            format = $32.
            informat = $32.
            label = 'COUNTERPARTY_ID'; 
         attrib INSURED_BY_COUNTERPARTY_ID length = $32
            format = $32.
            informat = $32.
            label = 'INSURED_BY_COUNTERPARTY_ID'; 
         attrib STATEMENT_FREQUENCY_CD length = $3
            format = $3.
            informat = $3.
            label = 'STATEMENT_FREQUENCY_CD'; 
         attrib SECURITY_DEPOSIT_AMT length = 8
            format = 20.5
            informat = 20.5
            label = 'SECURITY_DEPOSIT_AMT'; 
         attrib SECURITY_DEPOSIT_REFUND_AMT length = 8
            format = 20.5
            informat = 20.5
            label = 'SECURITY_DEPOSIT_REFUND_AMT'; 
         attrib FIRST_PAYMENT_DT length = 8
            format = DATETIME20.
            informat = DATETIME20.
            label = 'FIRST_PAYMENT_DT'; 
         attrib LAST_PAYMENT_DT length = 8
            format = DATETIME20.
            informat = DATETIME20.
            label = 'LAST_PAYMENT_DT'; 
         attrib FIRST_RESET_DT length = 8
            format = DATETIME20.
            informat = DATETIME20.
            label = 'FIRST_RESET_DT'; 
         attrib LAST_RESET_DT length = 8
            format = DATETIME20.
            informat = DATETIME20.
            label = 'LAST_RESET_DT'; 
         attrib RESETS_PER_ANNUM_NO length = 8
            format = 6.
            informat = 6.
            label = 'RESETS_PER_ANNUM_NO'; 
         attrib PRINCIPAL_PAYMENT_TYPE_CD length = $3
            format = $3.
            informat = $3.
            label = 'PRINCIPAL_PAYMENT_TYPE_CD'; 
         attrib PRINCIPAL_PAYMENT_AMT length = 8
            format = 20.5
            informat = 20.5
            label = 'PRINCIPAL_PAYMENT_AMT'; 
         attrib RATE_POLICY_ID length = $32
            format = $32.
            informat = $32.
            label = 'RATE_POLICY_ID'; 
         attrib SPREAD_RT length = 8
            format = 11.4
            informat = 11.4
            label = 'SPREAD_RT'; 
         attrib DISCOUNT_SPREAD_RT length = 8
            format = 11.4
            informat = 11.4
            label = 'DISCOUNT_SPREAD_RT'; 
         attrib INITIAL_CONTRACT_RT length = 8
            format = 11.4
            informat = 11.4
            label = 'INITIAL_CONTRACT_RT'; 
         attrib FIXED_MONTHLY_PREPAYMENT_RT length = 8
            format = 11.4
            informat = 11.4
            label = 'FIXED_MONTHLY_PREPAYMENT_RT'; 
         attrib CAPITAL_ALLOCATION_ID length = $32
            format = $32.
            informat = $32.
            label = 'CAPITAL_ALLOCATION_ID'; 
         attrib CAPITAL_COST_ID length = $32
            format = $32.
            informat = $32.
            label = 'CAPITAL_COST_ID'; 
         attrib SEGMENT_ID length = $32
            format = $32.
            informat = $32.
            label = 'SEGMENT_ID'; 
         attrib NEAR_BRANCH_FINANCIAL_UNIT_ID length = $32
            format = $32.
            informat = $32.
            label = 'NEAR_BRANCH_FINANCIAL_UNIT_ID'; 
         attrib STATEMENT_OPT_FLG length = $1
            format = $1.
            informat = $1.
            label = 'STATEMENT_OPT_FLG'; 
         attrib VALUE_SCALING_FACTOR_RT length = 8
            format = 11.4
            informat = 11.4
            label = 'VALUE_SCALING_FACTOR_RT'; 
         attrib INTERNAL_REPORTING_CATEGORY_CD length = $3
            format = $3.
            informat = $3.
            label = 'INTERNAL_REPORTING_CATEGORY_CD'; 
         attrib CONVEXITY_ADJUSTMENT_FLG length = $1
            format = $1.
            informat = $1.
            label = 'CONVEXITY_ADJUSTMENT_FLG'; 
         attrib ARREARS_PAYMENT_CD length = $3
            format = $3.
            informat = $3.
            label = 'ARREARS_PAYMENT_CD'; 
         attrib QUANTO_FEATURE_ID length = $32
            format = $32.
            informat = $32.
            label = 'QUANTO_FEATURE_ID'; 
         attrib CASH_INTENSIVE_BUSINESS_FLG length = $1
            format = $1.
            informat = $1.
            label = 'CASH_INTENSIVE_BUSINESS_FLG'; 
         attrib LETTER_OF_CREDIT_ONFILE_FLG length = $1
            format = $1.
            informat = $1.
            label = 'LETTER_OF_CREDIT_ONFILE_FLG'; 
         attrib TRADE_FINANCE_FLG length = $1
            format = $1.
            informat = $1.
            label = 'TRADE_FINANCE_FLG'; 
         attrib ANNUITY_PAYMENT_TYPE_CD length = $3
            format = $3.
            informat = $3.
            label = 'ANNUITY_PAYMENT_TYPE_CD'; 
         attrib INTEREST_PAYMENT_TYPE_CD length = $3
            format = $3.
            informat = $3.
            label = 'INTEREST_PAYMENT_TYPE_CD'; 
         attrib INTEREST_PAYMENT_TIME_FREQ_CD length = $3
            format = $3.
            informat = $3.
            label = 'INTEREST_PAYMENT_TIME_FREQ_CD'; 
         attrib LIQUIDITY_CATEGORY_TYPE_CD length = $3
            format = $3.
            informat = $3.
            label = 'LIQUIDITY_CATEGORY_TYPE_CD'; 
         attrib HOLIDAY_DATE_ROLL_CONV_CD length = $3
            format = $3.
            informat = $3.
            label = 'HOLIDAY_DATE_ROLL_CONV_CD'; 
         attrib WEEKEND_DATE_ROLL_CONV_CD length = $3
            format = $3.
            informat = $3.
            label = 'WEEKEND_DATE_ROLL_CONV_CD'; 
         attrib EXPENSE_ALLOCATION_ID length = $32
            format = $32.
            informat = $32.
            label = 'EXPENSE_ALLOCATION_ID'; 
         attrib FIRST_INTEREST_PAYMENT_DT length = 8
            format = DATETIME20.
            informat = DATETIME20.
            label = 'FIRST_INTEREST_PAYMENT_DT'; 
         attrib LAST_INTEREST_PAYMENT_DT length = 8
            format = DATETIME20.
            informat = DATETIME20.
            label = 'LAST_INTEREST_PAYMENT_DT'; 
         attrib IRB_DUMMY_TYPE_CD length = $3
            format = $3.
            informat = $3.
            label = 'IRB_DUMMY_TYPE_CD'; 
         attrib IRB_SRC_ACCOUNT_ID length = $32
            format = $32.
            informat = $32.
            label = 'IRB_SRC_ACCOUNT_ID'; 
         attrib BRCA length = $3
            format = $3.
            informat = $3.
            label = 'BRCA'; 
         attrib AIPD length = 8
            format = 20.5
            informat = 20.5
            label = 'AIPD'; 
         attrib FINANCIAL_INSTRUMENT_ID length = $32
            format = $32.
            informat = $32.
            label = 'FINANCIAL_INSTRUMENT_ID'; 
         attrib FINANCIAL_INSTRUMENT_TYPE_CD length = $3
            format = $3.
            informat = $3.
            label = 'FINANCIAL_INSTRUMENT_TYPE_CD'; 
         call missing(of _all_);
         stop;
      run;
      
      %rcSet(&syserr); 
      
      /*---- Create the integrity constraints for a table  ----*/ 
      %put %str(NOTE: Creating integrity constraints ...);
      proc datasets library=work_ia nolist;
         modify FINANCIAL_ACCOUNT_DCD_BK;
            ic create not null (ACCOUNT_ID);
            ic create not null (SOURCE_SYSTEM_CD);
            ic create not null (FINANCIAL_ACCOUNT_TYPE_CD);
            ic create not null (ACCOUNT_STATUS_CD);
            ic create not null (CURRENCY_CD);
            ic create not null (PRIM_BRANCH_FINANCIAL_UNIT_ID);
            ic create not null (BRCA);
            ic create not null (FINANCIAL_INSTRUMENT_TYPE_CD);
            ic create Index1 = primary key (ACCOUNT_ID VALID_FROM_DTTM);
      quit;
      
      %rcSet(&syserr); 
      
   %end;  /* if table does not exist  */ 
   
   /*---- Append  ----*/ 
   %put %str(NOTE: Appending data ...);
   
   proc append base = work_ia.FINANCIAL_ACCOUNT_DCD_BK 
      data = &etls_lastTable (&etls_tableOptions)  force ; 
    run; 
   
   %rcSet(&syserr); 
   
   proc datasets lib = work nolist nowarn memtype = (data view);
      delete WIRORCI;
   quit;
   
%mend etls_loader;
%etls_loader;

%let etls_recCheckExist = 0; 
%let etls_recnt = 0; 
%macro etls_recordCheck; 
   %let etls_recCheckExist = %eval(%sysfunc(exist(work_ia.FINANCIAL_ACCOUNT_DCD_BK, DATA)) or 
         %sysfunc(exist(work_ia.FINANCIAL_ACCOUNT_DCD_BK, VIEW))); 
   
   %if (&etls_recCheckExist) %then
   %do;
      %local etls_syntaxcheck; 
      %let etls_syntaxcheck = %sysfunc(getoption(syntaxcheck)); 
      /* Turn off syntaxcheck option to perform following steps  */ 
      options nosyntaxcheck;
      
      proc contents data = work_ia.FINANCIAL_ACCOUNT_DCD_BK out = work.etls_contents(keep = nobs) noprint; 
      run; 
      
      data _null_; 
         set work.etls_contents (obs = 1); 
         call symput("etls_recnt", left(put(nobs,32.))); 
      run;
      
      proc datasets lib = work nolist nowarn memtype = (data view);
         delete etls_contents;
      quit;
      
      /* Reset syntaxcheck option to previous setting  */ 
      options &etls_syntaxcheck; 
   %end;
%mend etls_recordCheck;
%etls_recordCheck;



/**  Step end Table Loader **/

/*==========================================================================* 
 * Step:            Append                                A5Y50FNE.AQ000AG3 * 
 * Transform:       Append                                                  * 
 * Description:                                                             * 
 *                                                                          * 
 * Source Tables:   Splitter 0 - work.W432HB42            A5Y50FNE.AO0005UZ * 
 *                  Генерация BKtpOut - work.W43LZYD8     A5Y50FNE.AO0005V3 * 
 * Target Table:    FINANCIAL_ACCOUNT_ASSOC_DRV_BK -      A5Y50FNE.AE00012C * 
 *                  work_ia.FINANCIAL_ACCOUNT_ASSOC_DRV                     * 
 *                  _BK                                                     * 
 *==========================================================================*/ 

%let transformID = %quote(A5Y50FNE.AQ000AG3);
%let trans_rc = 0;
%let etls_stepStartTime = %sysfunc(datetime(), datetime20.); 

%let etls_recCheckExist = 0; 
%let etls_recnt = 0; 
%macro etls_recordCheck; 
   %let etls_recCheckExist = %eval(%sysfunc(exist(work.W432HB42, DATA)) or 
         %sysfunc(exist(work.W432HB42, VIEW))); 
   
   %if (&etls_recCheckExist) %then
   %do;
      %local etls_syntaxcheck; 
      %let etls_syntaxcheck = %sysfunc(getoption(syntaxcheck)); 
      /* Turn off syntaxcheck option to perform following steps  */ 
      options nosyntaxcheck;
      
      proc contents data = work.W432HB42 out = work.etls_contents(keep = nobs) noprint; 
      run; 
      
      data _null_; 
         set work.etls_contents (obs = 1); 
         call symput("etls_recnt", left(put(nobs,32.))); 
      run;
      
      proc datasets lib = work nolist nowarn memtype = (data view);
         delete etls_contents;
      quit;
      
      /* Reset syntaxcheck option to previous setting  */ 
      options &etls_syntaxcheck; 
   %end;
%mend etls_recordCheck;
%etls_recordCheck;

%let dbxrc = %eval(%sysfunc(exist(work.W432HB42, DATA)) or 
      %sysfunc(exist(work.W432HB42, VIEW))); 

/*---- Map the columns  ----*/ 
proc datasets lib = work nolist nowarn memtype = (data view);
   delete WIRORI6;
quit;

%put %str(NOTE: Mapping columns ...);
proc sql;
   create view work.WIRORI6 as
      select
         ACCOUNT_ID,
         REFERENCE_FINANCIAL_ACCOUNT_ID   
            label = 'REFERENCE_FINANCIAL_ACCOUNT_ID',
         FINANCIAL_ACCT_ASSOC_TYPE_CD,
         VALID_FROM_DTTM,
         VALID_TO_DTTM,
         SOURCE_SYSTEM_CD
   from work.W432HB42
   ;
quit;

%let SYSLAST = work.WIRORI6;

%let dbxrc = %eval(%sysfunc(exist(work.W43LZYD8, DATA)) or 
      %sysfunc(exist(work.W43LZYD8, VIEW))); 

/*---- Map the columns  ----*/ 
proc datasets lib = work nolist nowarn memtype = (data view);
   delete WIRORID;
quit;

%put %str(NOTE: Mapping columns ...);
proc sql;
   create view work.WIRORID as
      select
         DRV_ACCOUNT_ID as ACCOUNT_ID,
         REFERENCE_FINANCIAL_ACCOUNT_ID   
            label = 'REFERENCE_FINANCIAL_ACCOUNT_ID',
         FINANCIAL_ACCT_ASSOC_TYPE_CD,
         VALID_FROM_DTTM,
         VALID_TO_DTTM,
         SOURCE_SYSTEM_CD
   from work.W43LZYD8
   ;
quit;

%let SYSLAST = work.WIRORID;

proc datasets lib = work_ia nolist nowarn memtype = (data view);
   delete FINANCIAL_ACCOUNT_ASSOC_DRV_BK;
quit;

data work_ia.FINANCIAL_ACCOUNT_ASSOC_DRV_BK;
   set work.WIRORI6
       work.WIRORID;
   keep ACCOUNT_ID REFERENCE_FINANCIAL_ACCOUNT_ID FINANCIAL_ACCT_ASSOC_TYPE_CD 
    VALID_FROM_DTTM VALID_TO_DTTM SOURCE_SYSTEM_CD; 
run;

%rcSet(&syserr); 



/**  Step end Append **/

/*==========================================================================* 
 * Step:            Table Loader                          A5Y50FNE.AQ000AG4 * 
 * Transform:       Table Loader (Version 2.1)                              * 
 * Description:                                                             * 
 *                                                                          * 
 * Source Table:    Генерация BKtpOut - work.W43LZYD8     A5Y50FNE.AO0005V3 * 
 * Target Table:    CUSTOMER_X_FIN_ACC_DCD_D2_BK -        A5Y50FNE.AE00011N * 
 *                   work_ia.CUSTOMER_X_FIN_ACC_DCD_D2_BK                   * 
 *==========================================================================*/ 

%let transformID = %quote(A5Y50FNE.AQ000AG4);
%let trans_rc = 0;
%let etls_stepStartTime = %sysfunc(datetime(), datetime20.); 

%let SYSLAST = %nrquote(work.W43LZYD8); 

%let SYS_SQL_IP_SPEEDO = Y;
%let SYS_SQL_MAPPUTTO = sas_put;
%let SYS_SQLREDUCEPUT = DBMS;
%global etls_sql_pushDown;
%let etls_sql_pushDown = -1;
option DBIDIRECTEXEC;

%global etls_tableExist;
%global etls_numIndex;
%global etls_lastTable;
%let etls_tableExist = -1; 
%let etls_numIndex = -1; 
%let etls_lastTable = &SYSLAST; 

/*---- Define load data macro  ----*/ 

/* --------------------------------------------------------------
   Load Technique Selection: Replace - EntireTable
   Constraint and index action selections: 'INIT','ASIS','ASIS','ASIS'
   Additional options selections... 
      Set unmapped to missing on updates: false 
   -------------------------------------------------------------- */
%macro etls_loader;

   %let etls_tableOptions = ;
   
   /*---- Map the columns  ----*/ 
   proc datasets lib = work nolist nowarn memtype = (data view);
      delete WIRORJF;
   quit;
   
   data _null_;
      put "NOTE: The following column(s) do not have a column mapping, so the"
           " value(s) will be set to missing: RELSHP_TO_PRIMARY_CD,"
           " EFFECTIVE_FROM_DTTM, EFFECTIVE_TO_DTTM";
   run;
   
   %put %str(NOTE: Mapping columns ...);
   proc sql;
      create view work.WIRORJF as
         select
            FCC_COUNTERPARTY_ID as CUSTOMER_ID,
            DRV_ACCOUNT_ID as ACCOUNT_ID,
            VALID_FROM_DTTM,
            VALID_TO_DTTM,
            "" as RELSHP_TO_PRIMARY_CD length = 3
               format = $3.
               informat = $3.,
            ('DDC') as RELATIONSHIP_TO_ACCOUNT_CD length = 3
               format = $3.
               informat = $3.,
            . as EFFECTIVE_FROM_DTTM length = 8
               format = DATETIME20.
               informat = DATETIME20.,
            . as EFFECTIVE_TO_DTTM length = 8
               format = DATETIME20.
               informat = DATETIME20.
      from &etls_lastTable
      ;
   quit;
   
   %let SYSLAST = work.WIRORJF;
   
   %let etls_lastTable = &SYSLAST; 
   %let etls_tableOptions = ; 
   
   /* Determine if the target table exists  */ 
   %let etls_tableExist = %eval(%sysfunc(exist(work_ia.CUSTOMER_X_FIN_ACC_DCD_D2_BK, DATA)) or 
         %sysfunc(exist(work_ia.CUSTOMER_X_FIN_ACC_DCD_D2_BK, VIEW))); 
   
   %if &etls_tableExist %then 
   %do;/* table exists  */ 
      %let etls_hasPreExistingConstraint=0; 
      
      proc datasets lib = work nolist nowarn memtype = (data view);
         delete etls_commands etls_commands_F;
      quit;
      
      %let etls_otherTablesReferToThisTable=0;
      
      %macro etls_CIContents(table=,workTableOut=,inDSOptions=);
         %put NOTE: Building table listing Constraints and Indexes for: &table;
         proc datasets lib=work nolist; delete &workTableOut; quit;
         proc contents data=&table&inDSOptions out2=&workTableOut noprint; run;
         
         data &workTableOut;
            length name $60 type $20 icown idxUnique idxNoMiss $3 recreate $600;
            set &workTableOut;
            type=upcase(type);
            if type eq 'REFERENTIAL' then
            do;
               put "WARNING%QUOTE(:) Target table is referenced by constraints in"
                    " another table: " ref;
               call symput('etls_otherTablesReferToThisTable','1');
               delete;
            end;
            if type='INDEX' and ICOwn eq 'YES' then delete;
         run;
         %rcSet(&syserr); 
         
      %mend etls_CIContents;
      
      %etls_CIContents(table=work_ia.CUSTOMER_X_FIN_ACC_DCD_D2_BK, workTableOut=etls_commands, inDSOptions=);
      
      %if &etls_otherTablesReferToThisTable %then 
         %put WARNING%QUOTE(:) Replacing entire table will fail. Consider an alternate load technique or revising constraints.; 
      %else 
      %do; /* okay - remove foreign keys  */ 
      
         data etls_commands_F; 
            set etls_commands; 
            if upcase(type)="FOREIGN KEY" then 
            do; 
               command='ic delete '||trim(name)||';';
               output etls_commands_F; 
            end; 
         run; 
         
         %put %str(NOTE: Removing foreign keys before dropping table...);
         data _null_;
            set etls_commands_F;
            %rcSet(&syserr); 
            
      %end; /* okay - remove foreign keys  */ 
      
      proc datasets lib = work nolist nowarn memtype = (data view);
         delete etls_commands etls_commands_F;
      quit;
      
      /*---- Drop a table  ----*/ 
      %put %str(NOTE: Dropping table ...);
      proc datasets lib = work_ia nolist nowarn memtype = (data view);
         delete CUSTOMER_X_FIN_ACC_DCD_D2_BK;
      quit;
      
      %rcSet(&syserr); 
      
      %let etls_tableExist = 0;
      
   %end; /* table exists  */ 
   
   /*---- Create a new table  ----*/ 
   %if (&etls_tableExist eq 0) %then 
   %do;  /* if table does not exist  */ 
   
      %put %str(NOTE: Creating table ...);
      
      data work_ia.CUSTOMER_X_FIN_ACC_DCD_D2_BK;
         attrib CUSTOMER_ID length = $32
            format = $32.
            informat = $32.
            label = 'CUSTOMER_ID'; 
         attrib ACCOUNT_ID length = $32
            format = $32.
            informat = $32.
            label = 'ACCOUNT_ID'; 
         attrib VALID_FROM_DTTM length = 8
            format = DATETIME20.
            informat = DATETIME20.
            label = 'VALID_FROM_DTTM'; 
         attrib VALID_TO_DTTM length = 8
            format = DATETIME20.
            informat = DATETIME20.
            label = 'VALID_TO_DTTM'; 
         attrib RELSHP_TO_PRIMARY_CD length = $3
            format = $3.
            informat = $3.
            label = 'RELSHP_TO_PRIMARY_CD'; 
         attrib RELATIONSHIP_TO_ACCOUNT_CD length = $3
            format = $3.
            informat = $3.
            label = 'RELATIONSHIP_TO_ACCOUNT_CD'; 
         attrib EFFECTIVE_FROM_DTTM length = 8
            format = DATETIME20.
            informat = DATETIME20.
            label = 'EFFECTIVE_FROM_DTTM'; 
         attrib EFFECTIVE_TO_DTTM length = 8
            format = DATETIME20.
            informat = DATETIME20.
            label = 'EFFECTIVE_TO_DTTM'; 
         call missing(of _all_);
         stop;
      run;
      
      %rcSet(&syserr); 
      
      /*---- Create the integrity constraints for a table  ----*/ 
      %put %str(NOTE: Creating integrity constraints ...);
      proc datasets library=work_ia nolist;
         modify CUSTOMER_X_FIN_ACC_DCD_D2_BK;
            ic create not null (CUSTOMER_ID);
            ic create not null (ACCOUNT_ID);
            ic create not null (VALID_FROM_DTTM);
            ic create not null (VALID_TO_DTTM);
            ic create not null (RELATIONSHIP_TO_ACCOUNT_CD);
            ic create Index1 = primary key (CUSTOMER_ID ACCOUNT_ID VALID_FROM_DTTM 
                           RELATIONSHIP_TO_ACCOUNT_CD);
      quit;
      
      %rcSet(&syserr); 
      
   %end;  /* if table does not exist  */ 
   
   /*---- Append  ----*/ 
   %put %str(NOTE: Appending data ...);
   
   proc append base = work_ia.CUSTOMER_X_FIN_ACC_DCD_D2_BK 
      data = &etls_lastTable (&etls_tableOptions)  force ; 
    run; 
   
   %rcSet(&syserr); 
   
   proc datasets lib = work nolist nowarn memtype = (data view);
      delete WIRORJF;
   quit;
   
%mend etls_loader;
%etls_loader;

%let etls_recCheckExist = 0; 
%let etls_recnt = 0; 
%macro etls_recordCheck; 
   %let etls_recCheckExist = %eval(%sysfunc(exist(work_ia.CUSTOMER_X_FIN_ACC_DCD_D2_BK, DATA)) or 
         %sysfunc(exist(work_ia.CUSTOMER_X_FIN_ACC_DCD_D2_BK, VIEW))); 
   
   %if (&etls_recCheckExist) %then
   %do;
      %local etls_syntaxcheck; 
      %let etls_syntaxcheck = %sysfunc(getoption(syntaxcheck)); 
      /* Turn off syntaxcheck option to perform following steps  */ 
      options nosyntaxcheck;
      
      proc contents data = work_ia.CUSTOMER_X_FIN_ACC_DCD_D2_BK out = work.etls_contents(keep = nobs) noprint; 
      run; 
      
      data _null_; 
         set work.etls_contents (obs = 1); 
         call symput("etls_recnt", left(put(nobs,32.))); 
      run;
      
      proc datasets lib = work nolist nowarn memtype = (data view);
         delete etls_contents;
      quit;
      
      /* Reset syntaxcheck option to previous setting  */ 
      options &etls_syntaxcheck; 
   %end;
%mend etls_recordCheck;
%etls_recordCheck;



/**  Step end Table Loader **/

/*==========================================================================* 
 * Step:            Завершить модуль                      A5Y50FNE.AQ000AG5 * 
 * Transform:       Завершить модуль                                        * 
 * Description:                                                             * 
 *==========================================================================*/ 

%let transformID = %quote(A5Y50FNE.AQ000AG5);
%let trans_rc = 0;
%let etls_stepStartTime = %sysfunc(datetime(), datetime20.); 

%let _INPUT_count = 0; 
%let _OUTPUT_count = 0; 


/*****************************************************************
* ВЕРСИЯ:
*   $Id: transform_job_finish.sas 247 2012-04-03 07:31:10Z nesterenok $
*
******************************************************************
* НАЗНАЧЕНИЕ:
*   Регистрирует конец модуля ETL.
*
* ПАРАМЕТРЫ:
*   нет
*
******************************************************************/

%macro transform_job_finish;

   /* Продолжаем модуль */
   %job_continue_reg(mpJobType=JOB, mpJobName=&ETLS_JobName., mpPostEvent=N);

   /* Завершаем модуль */
   %job_finish_reg(mpJobType=JOB);

%mend transform_job_finish;

%transform_job_finish;


%rcSet(&syserr); 
%rcSet(&sysrc); 
%rcSet(&sqlrc); 



/**  Step end Завершить модуль **/

%let etls_endTime = %sysfunc(datetime(),datetime.);



/**  Job end 042_943_Structure_FINANCIAL_ACCOUNT_DCD_BK **/

/* Reset jobid and name */
%let jobID = %quote(A569C89V.AQ0000CK);
%let etls_jobName = %nrquote(090_364_Stream_Midas_Fin_Account_BK);

/**************************************************************************** 
 * Job:             042_947_Structure_FINANCIAL_ACCOUNT_  A5Y50FNE.AN0000VP * 
 *                  FUT_BK                                                  * 
 * Description:                                                             * 
 *                                                                          * 
 * Metadata Server: bravo14                                                 * 
 * Port:            8561                                                    * 
 * Location:        /DWH_DWHDDS_IA/Jobs/042_Structure/Financial_Account     * 
 *                                                                          * 
 * Server:          SASApp                                A5C46MZY.AQ000002 * 
 *                                                                          * 
 * Source Table:    FINANCIAL_INSTRUMENT_FUT_BK -         A5Y50FNE.AE00013W * 
 *                   work_ia.FINANCIAL_INSTRUMENT_FUT_BK                    * 
 * Target Tables:   FINANCIAL_ACCOUNT_FUT_BK -            A5Y50FNE.AE00012M * 
 *                   work_ia.FINANCIAL_ACCOUNT_FUT_BK                       * 
 *                  FIN_INSTR_ASSOC_FUT_BK -              A5Y50FNE.AE000124 * 
 *                   work_ia.FIN_INSTR_ASSOC_FUT_BK                         * 
 *                  CUSTOMER_X_FIN_ACC_FUT_BK -           A5Y50FNE.AE00011Q * 
 *                   work_ia.CUSTOMER_X_FIN_ACC_FUT_BK                      * 
 *                                                                          * 
 * Generated on:    16 Июль 2013 г. 17:14:47 MSD                            * 
 * Generated by:    sasdwh                                                  * 
 * Version:         SAS Data Integration Studio 4.5                         * 
 ****************************************************************************/ 

/* General macro variables  */ 
%let jobID = %quote(A5Y50FNE.AN0000VP);
%let etls_jobName = %nrquote(042_947_Structure_FINANCIAL_ACCOUNT_FUT_BK);
%let etls_userID = %nrquote(sasdwh);


/* Create metadata macro variables */
%let IOMServer      = %nrquote(SASApp);
%let metaPort       = %nrquote(8561);
%let metaServer     = %nrquote(bravo14);

/* Set metadata options */
options metaport       = &metaPort 
        metaserver     = "&metaServer"; 

/* Setup for capturing job status  */ 
%let etls_startTime = %sysfunc(datetime(),datetime.);
%let etls_recordsBefore = 0;
%let etls_recordsAfter = 0;
%let etls_lib = 0;
%let etls_table = 0;

%global etls_debug; 
%macro etls_setDebug; 
   %if %str(&etls_debug) ne 0 %then 
      OPTIONS MPRINT%str(;); 
%mend; 
%etls_setDebug; 

/*==========================================================================* 
 * Step:            Начать модуль                         A5Y50FNE.AQ000A32 * 
 * Transform:       Начать модуль                                           * 
 * Description:                                                             * 
 *==========================================================================*/ 

%let transformID = %quote(A5Y50FNE.AQ000A32);
%let trans_rc = 0;
%let etls_stepStartTime = %sysfunc(datetime(), datetime20.); 

%let _INPUT_count = 0; 
%let _OUTPUT_count = 0; 


/*****************************************************************
* ВЕРСИЯ:
*   $Id: transform_job_start.sas 1747 2012-08-01 11:26:13Z nesterenok $
*
******************************************************************
* НАЗНАЧЕНИЕ:
*   Регистрирует начало модуля ETL.
*
* ПАРАМЕТРЫ:
*   нет
*
******************************************************************/

%macro transform_job_start;

   /* Продолжаем поток (или создаем новый) */
   %local lmvStreamName;
   %if %sysfunc(sysexist(LSB_JOBNAME)) %then
      %let lmvStreamName = %scan(%sysfunc(sysget(LSB_JOBNAME)), 3, :);
   %else
      %let lmvStreamName = ;

   %job_continue_reg(mpJobType=STREAM, mpJobName=&lmvStreamName, mpPostEvent=N, mpForcedStart=Y);

   /* Для DI, начинаем поток заново, если старый был начат не сегодня */
   %if %length(&lmvStreamName) eq 0 and &STREAM_START_DT ne %sysfunc(today()) %then %do;
      %job_start_reg(mpJobType=STREAM, mpParentJobId=, mpJobName=&lmvStreamName.);
   %end;

   /* Начинаем модуль */
   %job_start_reg(mpJobType=JOB, mpParentJobId=&STREAM_ID, mpJobName=&ETLS_JobName.);

%mend transform_job_start;

%transform_job_start;


%rcSet(&syserr); 
%rcSet(&sysrc); 
%rcSet(&sqlrc); 



/**  Step end Начать модуль **/

/*==========================================================================* 
 * Step:            Extract                               A5Y50FNE.AQ000A33 * 
 * Transform:       Extract                                                 * 
 * Description:                                                             * 
 *                                                                          * 
 * Source Table:    FINANCIAL_INSTRUMENT_FUT_BK -         A5Y50FNE.AE00013W * 
 *                   work_ia.FINANCIAL_INSTRUMENT_FUT_BK                    * 
 * Target Table:    Extract - work.W1MOEVV1               A5Y50FNE.AO0005NM * 
 *==========================================================================*/ 

%let transformID = %quote(A5Y50FNE.AQ000A33);
%let trans_rc = 0;
%let etls_stepStartTime = %sysfunc(datetime(), datetime20.); 

%let etls_recCheckExist = 0; 
%let etls_recnt = 0; 
%macro etls_recordCheck; 
   %let etls_recCheckExist = %eval(%sysfunc(exist(work_ia.FINANCIAL_INSTRUMENT_FUT_BK, DATA)) or 
         %sysfunc(exist(work_ia.FINANCIAL_INSTRUMENT_FUT_BK, VIEW))); 
   
   %if (&etls_recCheckExist) %then
   %do;
      %local etls_syntaxcheck; 
      %let etls_syntaxcheck = %sysfunc(getoption(syntaxcheck)); 
      /* Turn off syntaxcheck option to perform following steps  */ 
      options nosyntaxcheck;
      
      proc contents data = work_ia.FINANCIAL_INSTRUMENT_FUT_BK out = work.etls_contents(keep = nobs) noprint; 
      run; 
      
      data _null_; 
         set work.etls_contents (obs = 1); 
         call symput("etls_recnt", left(put(nobs,32.))); 
      run;
      
      proc datasets lib = work nolist nowarn memtype = (data view);
         delete etls_contents;
      quit;
      
      /* Reset syntaxcheck option to previous setting  */ 
      options &etls_syntaxcheck; 
   %end;
%mend etls_recordCheck;
%etls_recordCheck;

%let SYSLAST = %nrquote(work_ia.FINANCIAL_INSTRUMENT_FUT_BK); 

%let SYS_SQL_IP_SPEEDO = Y;
%let SYS_SQL_MAPPUTTO = sas_put;
%let SYS_SQLREDUCEPUT = DBMS;
%global etls_sql_pushDown;
%let etls_sql_pushDown = -1;
option DBIDIRECTEXEC;

/*---- Map the columns  ----*/ 
proc datasets lib = work nolist nowarn memtype = (data view);
   delete W1MOEVV1;
quit;

%put %str(NOTE: Mapping columns ...);
proc sql;
   create view work.W1MOEVV1 as
      select
         VALID_FROM_DTTM,
         VALID_TO_DTTM,
         (put(CNUM ,z8.)) as CUSTOMER_NO length = 8,
         IRB_SRC_ACCOUNT_ID,
         ('MID') as SOURCE_SYSTEM_CD length = 3
            format = $3.
            informat = $3.
            label = 'SOURCE_SYSTEM_CD',
         ('') as ACCOUNT_REGISTRATION_NM length = 100
            format = $100.
            informat = $100.
            label = 'ACCOUNT_REGISTRATION_NM',
         ('') as ALTERNATE_ACCOUNT_NM length = 40
            format = $40.
            informat = $40.
            label = 'ALTERNATE_ACCOUNT_NM',
         ('DRV') as FINANCIAL_ACCOUNT_TYPE_CD length = 3
            format = $3.
            informat = $3.
            label = 'FINANCIAL_ACCOUNT_TYPE_CD',
         BRCA,
         IRB_INSTR_STATUS_CD as ACCOUNT_STATUS_CD   
            label = 'ACCOUNT_STATUS_CD',
         DDAT as OPEN_DT   
            label = 'OPEN_DT',
         FIRST_PAYMENT_DT as CLOSE_DT   
            label = 'corrected later',
         CURRENCY_CD,
         DAY_BASIS_CD,
         INTEREST_PAYMENT_TYPE_CD,
         FINANCIAL_INSTRUMENT_TYPE_CD,
         FINANCIAL_INSTRUMENT_ID,
         LCD,
         VDAT
   from &SYSLAST
      where VALID_TO_DTTM=&ETL_SCD_FUTURE_DTTM
   ;
quit;

%let SYSLAST = work.W1MOEVV1;

%global etls_sql_pushDown;
%let etls_sql_pushDown = &sys_sql_ip_all;

%rcSet(&sqlrc); 



/**  Step end Extract **/

/*==========================================================================* 
 * Step:            Генерация BK                          A5Y50FNE.AQ000A34 * 
 * Transform:       Генерация BK                                            * 
 * Description:                                                             * 
 *                                                                          * 
 * Source Table:    Extract - work.W1MOEVV1               A5Y50FNE.AO0005NM * 
 * Target Table:    Генерация BKtpOut - work.W1MHBF25     A5Y50FNE.AO0005NN * 
 *==========================================================================*/ 

%let transformID = %quote(A5Y50FNE.AQ000A34);
%let trans_rc = 0;
%let etls_stepStartTime = %sysfunc(datetime(), datetime20.); 

%let etls_recnt = -1;
%let SYSLAST = %nrquote(work.W1MOEVV1); 

%let _INPUT_count = 1; 
%let _INPUT = work.W1MOEVV1;
%let _INPUT_connect = ;
%let _INPUT_engine = ;
%let _INPUT_memtype = VIEW;
%let _INPUT_options = %nrquote();
%let _INPUT_alter = %nrquote();
%let _INPUT_path = %nrquote(/Extract_A5Y50FNE.AO0005NM%(WorkTable%));
%let _INPUT_type = 1;
%let _INPUT_label = %nrquote();

%let tpIn = work.W1MOEVV1;
%let tpIn_connect = ;
%let tpIn_engine = ;
%let tpIn_memtype = VIEW;
%let tpIn_options = %nrquote();
%let tpIn_alter = %nrquote();
%let tpIn_path = %nrquote(/Extract_A5Y50FNE.AO0005NM%(WorkTable%));
%let tpIn_type = 1;
%let tpIn_label = %nrquote();

%let _OUTPUT_count = 1; 
%let _OUTPUT = work.W1MHBF25;
%let _OUTPUT_connect = ;
%let _OUTPUT_engine = ;
%let _OUTPUT_memtype = DATA;
%let _OUTPUT_options = %nrquote();
%let _OUTPUT_alter = %nrquote();
%let _OUTPUT_path = %nrquote(/Генерация BKtpOut_A5Y50FNE.AO0005NN%(WorkTable%));
%let _OUTPUT_type = 1;
%let _OUTPUT_label = %nrquote();
/* List of target columns to keep  */ 
%let _OUTPUT_keep = DRV_ACCOUNT_ID FCC_COUNTERPARTY_ID VALID_FROM_DTTM VALID_TO_DTTM 
        SOURCE_SYSTEM_CD ACCOUNT_REGISTRATION_NM ALTERNATE_ACCOUNT_NM 
        FINANCIAL_ACCOUNT_TYPE_CD ACCOUNT_STATUS_CD OPEN_DT CLOSE_DT 
        CURRENCY_CD DAY_BASIS_CD INTEREST_PAYMENT_TYPE_CD IRB_SRC_ACCOUNT_ID 
        MID_FINANCIAL_UNIT_ID_BRCA FINANCIAL_INSTRUMENT_ID BRCA 
        FINANCIAL_INSTRUMENT_TYPE_CD LCD VDAT;

%let tpOut = work.W1MHBF25;
%let tpOut_connect = ;
%let tpOut_engine = ;
%let tpOut_memtype = DATA;
%let tpOut_options = %nrquote();
%let tpOut_alter = %nrquote();
%let tpOut_path = %nrquote(/Генерация BKtpOut_A5Y50FNE.AO0005NN%(WorkTable%));
%let tpOut_type = 1;
%let tpOut_label = %nrquote();
/* List of target columns to keep  */ 
%let tpOut_keep = DRV_ACCOUNT_ID FCC_COUNTERPARTY_ID VALID_FROM_DTTM VALID_TO_DTTM 
        SOURCE_SYSTEM_CD ACCOUNT_REGISTRATION_NM ALTERNATE_ACCOUNT_NM 
        FINANCIAL_ACCOUNT_TYPE_CD ACCOUNT_STATUS_CD OPEN_DT CLOSE_DT 
        CURRENCY_CD DAY_BASIS_CD INTEREST_PAYMENT_TYPE_CD IRB_SRC_ACCOUNT_ID 
        MID_FINANCIAL_UNIT_ID_BRCA FINANCIAL_INSTRUMENT_ID BRCA 
        FINANCIAL_INSTRUMENT_TYPE_CD LCD VDAT;


proc datasets lib=work nolist nowarn memtype = (data view);
   delete W1MHBF25;
quit;

%let tpBK = %nrquote(FINANCIAL_ACCOUNT_DRV           );
%let tpBK0 = %nrquote(3);
%let tpBK1 = %nrquote(FINANCIAL_ACCOUNT_DRV           );
%let tpBK2 = %nrquote(FINANCIAL_UNIT_MID_BRCA         );
%let tpBK3 = %nrquote(FCC_COUNTERPARTY_FCC            );
%let tpBK_count = %nrquote(3);
%let tpOptionalBK_count = %nrquote(0);
%let tpOptionalBK = ;

/* List of target columns to keep  */ 
%let _keep = DRV_ACCOUNT_ID FCC_COUNTERPARTY_ID VALID_FROM_DTTM VALID_TO_DTTM 
        SOURCE_SYSTEM_CD ACCOUNT_REGISTRATION_NM ALTERNATE_ACCOUNT_NM 
        FINANCIAL_ACCOUNT_TYPE_CD ACCOUNT_STATUS_CD OPEN_DT CLOSE_DT 
        CURRENCY_CD DAY_BASIS_CD INTEREST_PAYMENT_TYPE_CD IRB_SRC_ACCOUNT_ID 
        MID_FINANCIAL_UNIT_ID_BRCA FINANCIAL_INSTRUMENT_ID BRCA 
        FINANCIAL_INSTRUMENT_TYPE_CD LCD VDAT;
/* List of target columns to keep  */ 
%let keep = DRV_ACCOUNT_ID FCC_COUNTERPARTY_ID VALID_FROM_DTTM VALID_TO_DTTM 
        SOURCE_SYSTEM_CD ACCOUNT_REGISTRATION_NM ALTERNATE_ACCOUNT_NM 
        FINANCIAL_ACCOUNT_TYPE_CD ACCOUNT_STATUS_CD OPEN_DT CLOSE_DT 
        CURRENCY_CD DAY_BASIS_CD INTEREST_PAYMENT_TYPE_CD IRB_SRC_ACCOUNT_ID 
        MID_FINANCIAL_UNIT_ID_BRCA FINANCIAL_INSTRUMENT_ID BRCA 
        FINANCIAL_INSTRUMENT_TYPE_CD LCD VDAT;
/*****************************************************************
* ВЕРСИЯ:
*     $Id: transform_generate_bk.sas 4889 2013-04-04 09:14:07Z nesterenok $
*
******************************************************************
* НАЗНАЧЕНИЕ:
*     Генерирует бизнес-ключи в таблице по списку.
*
* ПАРАМЕТРЫ:
*     tpIn                    +  имя входного набора
*     tpBK                    +  список кодов обязательных для генерации бизнес-ключей, разделенный пробелами
*                                Такой бизнес-ключ станет дамми, если заполнены не все поля, его составляющие
*                                FK к ETL_SYS.ETL_BK.BK_CD
*     tpOptionalBK            +  список кодов НЕобязательных для генерации бизнес-ключей, разделенный пробелами
*                                Такой бизнес-ключ останется пустым, если заполнены не все поля, его составляющие
*     tpOut                   +  имя выходного набора
*
******************************************************************/

%macro transform_generate_bk;
   %let tpBK_count         = %unquote(&tpBK_count);
   %let tpOptionalBK_count = %unquote(&tpOptionalBK_count);

   %local lmvDummyRows lmvFieldDummyCount lmvDummyRequired;
   %let lmvDummyRows       = work.tr_gen_bk_dummy_rows;
   %let lmvFieldDummyCount = etl_dummy_count;
   %let lmvDummyRequired   = %eval (&tpBK_count gt 0);

   /* Макросы для генерации одного ключа */
   %macro sm_trans_gen_bk_required;
      %etl_generate_bk (
         mpFieldBK=&bk_field_nm, mpLengthBK=%sysfunc(inputn(&bk_type_cd, bkt_cd_len.)),
         mpColumnList=&bk_column_list_txt, mpFormat=&bk_format_txt,
         mpFieldDummy=&lmvFieldDummy, mpFieldDummyCount=&lmvFieldDummyCount
      );
   %mend;
   %macro sm_trans_gen_bk_optional;
      %etl_generate_bk (
         mpFieldBK=&bk_field_nm, mpLengthBK=%sysfunc(inputn(&bk_type_cd, bkt_cd_len.)),
         mpColumnList=&bk_column_list_txt, mpFormat=&bk_format_txt,
         mpFieldDummy=
      );
   %mend;

   /* Макрос для подстановки в дамми-ключ уникального номера */
   %macro sm_trans_gen_bk_dummy;
      if &lmvFieldDummy gt 0 then do;
         set &lmvDummyIds (keep=OBJECT_ID rename=(OBJECT_ID=&lmvFieldDummy._no)) point=&lmvFieldDummy;
         &bk_field_nm = cats (&bk_field_nm, "_", &lmvFieldDummy._no);

         %error_check;
      end;
   %mend;


   /* Создаем выходной набор итерацией по всем заявленным бизнес-ключам */
   /* Считаем необходимое кол-во дамми-ключей */
   %local lmvBkIndex lmvFieldDummy lmvDummyCount;
   %let lmvDummyCount   = 0;
   data
      %if &lmvDummyRequired %then %do;
         &tpOut (drop= etl_dummy_:)
         &lmvDummyRows
      %end;
      %else %do;
         &tpOut
      %end;
   ;
      set &tpIn end=ds_end;

      /* Генерация необязательных ключей */
      %do lmvBkIndex=1 %to &tpOptionalBK_count;
         %util_loop_data (mpLoopMacro=sm_trans_gen_bk_optional, mpData=ETL_SYS.ETL_BK,
                          mpWhere=BK_CD eq %util_quote(&&tpOptionalBK&lmvBkIndex)
         );
      %end;

      %if &lmvDummyRequired %then %do;
         length &lmvFieldDummyCount 8;
         drop &lmvFieldDummyCount;
         retain &lmvFieldDummyCount 0;

         /* Генерация обязательных ключей */
         %do lmvBkIndex=1 %to &tpBK_count;
            %let lmvFieldDummy = etl_dummy_&lmvBkIndex.;

            %util_loop_data (mpLoopMacro=sm_trans_gen_bk_required, mpData=ETL_SYS.ETL_BK,
                             mpWhere=BK_CD eq %util_quote(&&tpBK&lmvBkIndex)
            );
         %end;

         /* Если в какой-то записи есть дамми, то не выводим ее сразу */
         if sum (of etl_dummy_1-etl_dummy_&tpBK_count) = 0 then
            output &tpOut;
         else do;
            output &lmvDummyRows;
         end;

         if ds_end then call symputx ("lmvDummyCount", &lmvFieldDummyCount);
      %end;
      %else %do;
         output &tpOut;
      %end;
   run;
   %error_check (mpStepType=DATA);

   /* Если дамми нет, то всё */
   %if (not &lmvDummyRequired) or (&lmvDummyCount eq 0) %then %return;


   /* Для каждого дамми генерируем уникальный номер */
   %local lmvDummyIds;
   %let lmvDummyIds = work.tr_gen_bk_dummy_ids;
   %unique_ids (mpIdCount=&lmvDummyCount, mpOut=&lmvDummyIds, mpSequenceName=ETL_DUMMY_SEQ);

   /* Добавляем номер к дамми */
   data &lmvDummyRows._id (drop= etl_dummy_:);
      set &lmvDummyRows;

      %do lmvBkIndex=1 %to &tpBK_count;
         %let lmvFieldDummy = etl_dummy_&lmvBkIndex.;

         %util_loop_data (mpLoopMacro=sm_trans_gen_bk_dummy, mpData=ETL_SYS.ETL_BK,
                          mpWhere=BK_CD eq %util_quote(&&tpBK&lmvBkIndex)
         );
      %end;
   run;
   %error_check (mpStepType=DATA);


   /* Добавляем дамми-строки к выходному набору */
   proc append base=&tpOut data=&lmvDummyRows._id;
   run;
   %error_check (mpStepType=DATA);

%mend transform_generate_bk;

%transform_generate_bk;

%rcSet(&syserr); 
%rcSet(&sysrc); 
%rcSet(&sqlrc); 



/**  Step end Генерация BK **/

/*==========================================================================* 
 * Step:            Table Loader                          A5Y50FNE.AQ000A35 * 
 * Transform:       Table Loader (Version 2.1)                              * 
 * Description:                                                             * 
 *                                                                          * 
 * Source Table:    Генерация BKtpOut - work.W1MHBF25     A5Y50FNE.AO0005NN * 
 * Target Table:    CUSTOMER_X_FIN_ACC_FUT_BK -           A5Y50FNE.AE00011Q * 
 *                   work_ia.CUSTOMER_X_FIN_ACC_FUT_BK                      * 
 *==========================================================================*/ 

%let transformID = %quote(A5Y50FNE.AQ000A35);
%let trans_rc = 0;
%let etls_stepStartTime = %sysfunc(datetime(), datetime20.); 

%let SYSLAST = %nrquote(work.W1MHBF25); 

%let SYS_SQL_IP_SPEEDO = Y;
%let SYS_SQL_MAPPUTTO = sas_put;
%let SYS_SQLREDUCEPUT = DBMS;
%global etls_sql_pushDown;
%let etls_sql_pushDown = -1;
option DBIDIRECTEXEC;

%global etls_tableExist;
%global etls_numIndex;
%global etls_lastTable;
%let etls_tableExist = -1; 
%let etls_numIndex = -1; 
%let etls_lastTable = &SYSLAST; 

/*---- Define load data macro  ----*/ 

/* --------------------------------------------------------------
   Load Technique Selection: Replace - EntireTable
   Constraint and index action selections: 'INIT','ASIS','ASIS','ASIS'
   Additional options selections... 
      Set unmapped to missing on updates: false 
   -------------------------------------------------------------- */
%macro etls_loader;

   %let etls_tableOptions = ;
   
   /*---- Map the columns  ----*/ 
   proc datasets lib = work nolist nowarn memtype = (data view);
      delete WIROS4Y;
   quit;
   
   data _null_;
      put "NOTE: The following column(s) do not have a column mapping, so the"
           " value(s) will be set to missing: RELSHP_TO_PRIMARY_CD,"
           " EFFECTIVE_FROM_DTTM, EFFECTIVE_TO_DTTM";
   run;
   
   %put %str(NOTE: Mapping columns ...);
   proc sql;
      create view work.WIROS4Y as
         select
            FCC_COUNTERPARTY_ID as CUSTOMER_ID,
            DRV_ACCOUNT_ID as ACCOUNT_ID,
            VALID_FROM_DTTM,
            VALID_TO_DTTM,
            "" as RELSHP_TO_PRIMARY_CD length = 3
               format = $3.
               informat = $3.,
            ('DDC') as RELATIONSHIP_TO_ACCOUNT_CD length = 3
               format = $3.
               informat = $3.,
            . as EFFECTIVE_FROM_DTTM length = 8
               format = DATETIME20.
               informat = DATETIME20.,
            . as EFFECTIVE_TO_DTTM length = 8
               format = DATETIME20.
               informat = DATETIME20.
      from &etls_lastTable
      ;
   quit;
   
   %let SYSLAST = work.WIROS4Y;
   
   %let etls_lastTable = &SYSLAST; 
   %let etls_tableOptions = ; 
   
   /* Determine if the target table exists  */ 
   %let etls_tableExist = %eval(%sysfunc(exist(work_ia.CUSTOMER_X_FIN_ACC_FUT_BK, DATA)) or 
         %sysfunc(exist(work_ia.CUSTOMER_X_FIN_ACC_FUT_BK, VIEW))); 
   
   %if &etls_tableExist %then 
   %do;/* table exists  */ 
      %let etls_hasPreExistingConstraint=0; 
      
      proc datasets lib = work nolist nowarn memtype = (data view);
         delete etls_commands etls_commands_F;
      quit;
      
      %let etls_otherTablesReferToThisTable=0;
      
      %macro etls_CIContents(table=,workTableOut=,inDSOptions=);
         %put NOTE: Building table listing Constraints and Indexes for: &table;
         proc datasets lib=work nolist; delete &workTableOut; quit;
         proc contents data=&table&inDSOptions out2=&workTableOut noprint; run;
         
         data &workTableOut;
            length name $60 type $20 icown idxUnique idxNoMiss $3 recreate $600;
            set &workTableOut;
            type=upcase(type);
            if type eq 'REFERENTIAL' then
            do;
               put "WARNING%QUOTE(:) Target table is referenced by constraints in"
                    " another table: " ref;
               call symput('etls_otherTablesReferToThisTable','1');
               delete;
            end;
            if type='INDEX' and ICOwn eq 'YES' then delete;
         run;
         %rcSet(&syserr); 
         
      %mend etls_CIContents;
      
      %etls_CIContents(table=work_ia.CUSTOMER_X_FIN_ACC_FUT_BK, workTableOut=etls_commands, inDSOptions=);
      
      %if &etls_otherTablesReferToThisTable %then 
         %put WARNING%QUOTE(:) Replacing entire table will fail. Consider an alternate load technique or revising constraints.; 
      %else 
      %do; /* okay - remove foreign keys  */ 
      
         data etls_commands_F; 
            set etls_commands; 
            if upcase(type)="FOREIGN KEY" then 
            do; 
               command='ic delete '||trim(name)||';';
               output etls_commands_F; 
            end; 
         run; 
         
         %put %str(NOTE: Removing foreign keys before dropping table...);
         data _null_;
            set etls_commands_F;
            %rcSet(&syserr); 
            
      %end; /* okay - remove foreign keys  */ 
      
      proc datasets lib = work nolist nowarn memtype = (data view);
         delete etls_commands etls_commands_F;
      quit;
      
      /*---- Drop a table  ----*/ 
      %put %str(NOTE: Dropping table ...);
      proc datasets lib = work_ia nolist nowarn memtype = (data view);
         delete CUSTOMER_X_FIN_ACC_FUT_BK;
      quit;
      
      %rcSet(&syserr); 
      
      %let etls_tableExist = 0;
      
   %end; /* table exists  */ 
   
   /*---- Create a new table  ----*/ 
   %if (&etls_tableExist eq 0) %then 
   %do;  /* if table does not exist  */ 
   
      %put %str(NOTE: Creating table ...);
      
      data work_ia.CUSTOMER_X_FIN_ACC_FUT_BK;
         attrib CUSTOMER_ID length = $32
            format = $32.
            informat = $32.
            label = 'CUSTOMER_ID'; 
         attrib ACCOUNT_ID length = $32
            format = $32.
            informat = $32.
            label = 'ACCOUNT_ID'; 
         attrib VALID_FROM_DTTM length = 8
            format = DATETIME20.
            informat = DATETIME20.
            label = 'VALID_FROM_DTTM'; 
         attrib VALID_TO_DTTM length = 8
            format = DATETIME20.
            informat = DATETIME20.
            label = 'VALID_TO_DTTM'; 
         attrib RELSHP_TO_PRIMARY_CD length = $3
            format = $3.
            informat = $3.
            label = 'RELSHP_TO_PRIMARY_CD'; 
         attrib RELATIONSHIP_TO_ACCOUNT_CD length = $3
            format = $3.
            informat = $3.
            label = 'RELATIONSHIP_TO_ACCOUNT_CD'; 
         attrib EFFECTIVE_FROM_DTTM length = 8
            format = DATETIME20.
            informat = DATETIME20.
            label = 'EFFECTIVE_FROM_DTTM'; 
         attrib EFFECTIVE_TO_DTTM length = 8
            format = DATETIME20.
            informat = DATETIME20.
            label = 'EFFECTIVE_TO_DTTM'; 
         call missing(of _all_);
         stop;
      run;
      
      %rcSet(&syserr); 
      
      /*---- Create the integrity constraints for a table  ----*/ 
      %put %str(NOTE: Creating integrity constraints ...);
      proc datasets library=work_ia nolist;
         modify CUSTOMER_X_FIN_ACC_FUT_BK;
            ic create not null (CUSTOMER_ID);
            ic create not null (ACCOUNT_ID);
            ic create not null (VALID_FROM_DTTM);
            ic create not null (VALID_TO_DTTM);
            ic create not null (RELATIONSHIP_TO_ACCOUNT_CD);
            ic create Index1 = primary key (CUSTOMER_ID ACCOUNT_ID VALID_FROM_DTTM 
                           RELATIONSHIP_TO_ACCOUNT_CD);
      quit;
      
      %rcSet(&syserr); 
      
   %end;  /* if table does not exist  */ 
   
   /*---- Append  ----*/ 
   %put %str(NOTE: Appending data ...);
   
   proc append base = work_ia.CUSTOMER_X_FIN_ACC_FUT_BK 
      data = &etls_lastTable (&etls_tableOptions)  force ; 
    run; 
   
   %rcSet(&syserr); 
   
   proc datasets lib = work nolist nowarn memtype = (data view);
      delete WIROS4Y;
   quit;
   
%mend etls_loader;
%etls_loader;

%let etls_recCheckExist = 0; 
%let etls_recnt = 0; 
%macro etls_recordCheck; 
   %let etls_recCheckExist = %eval(%sysfunc(exist(work_ia.CUSTOMER_X_FIN_ACC_FUT_BK, DATA)) or 
         %sysfunc(exist(work_ia.CUSTOMER_X_FIN_ACC_FUT_BK, VIEW))); 
   
   %if (&etls_recCheckExist) %then
   %do;
      %local etls_syntaxcheck; 
      %let etls_syntaxcheck = %sysfunc(getoption(syntaxcheck)); 
      /* Turn off syntaxcheck option to perform following steps  */ 
      options nosyntaxcheck;
      
      proc contents data = work_ia.CUSTOMER_X_FIN_ACC_FUT_BK out = work.etls_contents(keep = nobs) noprint; 
      run; 
      
      data _null_; 
         set work.etls_contents (obs = 1); 
         call symput("etls_recnt", left(put(nobs,32.))); 
      run;
      
      proc datasets lib = work nolist nowarn memtype = (data view);
         delete etls_contents;
      quit;
      
      /* Reset syntaxcheck option to previous setting  */ 
      options &etls_syntaxcheck; 
   %end;
%mend etls_recordCheck;
%etls_recordCheck;



/**  Step end Table Loader **/

/*==========================================================================* 
 * Step:            Table Loader                          A5Y50FNE.AQ000A36 * 
 * Transform:       Table Loader (Version 2.1)                              * 
 * Description:                                                             * 
 *                                                                          * 
 * Source Table:    Генерация BKtpOut - work.W1MHBF25     A5Y50FNE.AO0005NN * 
 * Target Table:    FINANCIAL_ACCOUNT_FUT_BK -            A5Y50FNE.AE00012M * 
 *                   work_ia.FINANCIAL_ACCOUNT_FUT_BK                       * 
 *==========================================================================*/ 

%let transformID = %quote(A5Y50FNE.AQ000A36);
%let trans_rc = 0;
%let etls_stepStartTime = %sysfunc(datetime(), datetime20.); 

%let SYSLAST = %nrquote(work.W1MHBF25); 

%let SYS_SQL_IP_SPEEDO = Y;
%let SYS_SQL_MAPPUTTO = sas_put;
%let SYS_SQLREDUCEPUT = DBMS;
%global etls_sql_pushDown;
%let etls_sql_pushDown = -1;
option DBIDIRECTEXEC;

%global etls_tableExist;
%global etls_numIndex;
%global etls_lastTable;
%let etls_tableExist = -1; 
%let etls_numIndex = -1; 
%let etls_lastTable = &SYSLAST; 

/*---- Define load data macro  ----*/ 

/* --------------------------------------------------------------
   Load Technique Selection: Replace - EntireTable
   Constraint and index action selections: 'INIT','ASIS','ASIS','ASIS'
   Additional options selections... 
      Set unmapped to missing on updates: false 
   -------------------------------------------------------------- */
%macro etls_loader;

   %let etls_tableOptions = ;
   
   /*---- Map the columns  ----*/ 
   proc datasets lib = work nolist nowarn memtype = (data view);
      delete WIROS5U;
   quit;
   
   data _null_;
      put "NOTE: The following column(s) do not have a column mapping, so the"
           " value(s) will be set to missing: AUTO_DEBIT_ACCOUNT_TYPE_CD,"
           " ACCOUNT_REGISTRATION_TYPE_CD, CLOSE_REASON_CD,    ACCOUNT_TAX_ID,"
           " EXPECTED_LOSS_PCT, INDIVIDUAL_ORGANIZATION_CD, SOURCE_CD,   "
           " OPENING_CHANNEL_CD, PREFERRED_CHANNEL_CD, PRIMARY_PHONE_NO,   "
           " PRIMARY_PHONE_TYPE_CD, SECONDARY_PHONE_NO, SECONDARY_PHONE_TYPE_CD,"
           "    MAILABLE_FLG, TELEPHONABLE_FLG, EMAIL_FLG, SMS_FLG,"
           " DO_NOT_CONTACT_FLG,    EMPLOYEE_RK, CURRENCY_BASED_ACCOUNT_FLG,"
           " FEE_BASED_FLG, ANNUAL_FEES_AMT,    MONTHLY_FEES_AMT, CAMPAIGN_CD,"
           " COMMUNICATION_CD, REGISTERED_ONLINE_DT,    FIRST_LOGIN_DT,"
           " ONLINE_BILL_PAYMENT_FLG, ID_VERIFICATION_TYPE_CD,   "
           " PREVIOUS_ACCOUNT_ID, OPEN_BRANCH_FINANCIAL_UNIT_ID,   "
           " FINANCIAL_APPLICATION_ID, CREDIT_FACILITY_ID,"
           " FUTURE_MARGIN_INCOME_AMT,    IN_DEFAULT_FLG, FINANCIAL_BOOK_ID,"
           " IRRECOVERABLE_FLG,    OWNED_BY_INTERNAL_ORG_ID,"
           " PREVIOUS_BANK_EXTERNAL_ORG_ID, NETTING_SET_ID,    REVOLVING_FLG,"
           " SOURCE_CHANNEL_CD, GRACE_PERIOD_DAYS_CNT,    REMARGINING_DAYS_CNT,"
           " FINANCIAL_CALENDAR_ID, PORTFOLIO_ID,    SECURITIZATION_POOL_ID,"
           " RECEIVABLES_POOL_ID, ACCOUNT_USAGE_TYPE_CD,    RISK_ALARM_FLG,"
           " LOW_PROFITABILITY_FLG, ACCOUNT_LIFECYCLE_STG_CD,   "
           " ATTRITION_ALARM_FLG, BALANCE_FROZEN_FLG, BALANCE_FROZEN_DT,   "
           " ACCOUNT_BLOCK_REASON_CD, TAXATION_STATE_CD,"
           " EFFECTIVE_MATURITY_YEAR_NO,    GL_ACCOUNT_ID,"
           " FROM_OTHER_INSTITUTION_FLG, ACCOUNT_RENEWAL_CNT,   "
           " BALANCE_TRANSFER_DT, BALANCE_TRANSFER_AMT, BALANCE_TRANSFER_CNT,   "
           " BASE_LONG_TERM_APR_RT, BROKER_FLG, MULT_RATE_FLG,"
           " AUTO_DEBIT_ACCOUNT_NO,    WORST_STATUS_LAST_12_MTH_CD,"
           " WORST_STATUS_LAST_12_MTH_DT,    BALANCE_TRNSF_OTHER_ACCT_CNT,"
           " EFFECTIVE_FROM_DTTM, EFFECTIVE_TO_DTTM,    COUNTERPARTY_ID,"
           " INSURED_BY_COUNTERPARTY_ID, STATEMENT_FREQUENCY_CD,   "
           " SECURITY_DEPOSIT_AMT, SECURITY_DEPOSIT_REFUND_AMT,"
           " FIRST_PAYMENT_DT,    LAST_PAYMENT_DT, FIRST_RESET_DT,"
           " LAST_RESET_DT, RESETS_PER_ANNUM_NO,    PRINCIPAL_PAYMENT_TYPE_CD,"
           " PRINCIPAL_PAYMENT_AMT, RATE_POLICY_ID, SPREAD_RT,   "
           " DISCOUNT_SPREAD_RT, INITIAL_CONTRACT_RT,"
           " FIXED_MONTHLY_PREPAYMENT_RT,    CAPITAL_ALLOCATION_ID,"
           " CAPITAL_COST_ID, SEGMENT_ID,    NEAR_BRANCH_FINANCIAL_UNIT_ID,"
           " STATEMENT_OPT_FLG, VALUE_SCALING_FACTOR_RT,   "
           " INTERNAL_REPORTING_CATEGORY_CD, CONVEXITY_ADJUSTMENT_FLG,   "
           " ARREARS_PAYMENT_CD, QUANTO_FEATURE_ID, CASH_INTENSIVE_BUSINESS_FLG,"
           "    LETTER_OF_CREDIT_ONFILE_FLG, TRADE_FINANCE_FLG,"
           " ANNUITY_PAYMENT_TYPE_CD,    INTEREST_PAYMENT_TIME_FREQ_CD,"
           " LIQUIDITY_CATEGORY_TYPE_CD,    HOLIDAY_DATE_ROLL_CONV_CD,"
           " WEEKEND_DATE_ROLL_CONV_CD, EXPENSE_ALLOCATION_ID,   "
           " FIRST_INTEREST_PAYMENT_DT, LAST_INTEREST_PAYMENT_DT,"
           " IRB_DUMMY_TYPE_CD";
   run;
   
   %put %str(NOTE: Mapping columns ...);
   proc sql;
      create view work.WIROS5U as
         select
            DRV_ACCOUNT_ID as ACCOUNT_ID,
            VALID_FROM_DTTM,
            VALID_TO_DTTM,
            SOURCE_SYSTEM_CD,
            ACCOUNT_REGISTRATION_NM,
            ALTERNATE_ACCOUNT_NM,
            FINANCIAL_ACCOUNT_TYPE_CD,
            "" as AUTO_DEBIT_ACCOUNT_TYPE_CD length = 3
               format = $3.
               informat = $3.,
            "" as ACCOUNT_REGISTRATION_TYPE_CD length = 3
               format = $3.
               informat = $3.,
            ACCOUNT_STATUS_CD,
            OPEN_DT,
            (case when ACCOUNT_STATUS_CD='AUT' then .
                       when ACCOUNT_STATUS_CD='MAT' then VDAT
                       when ACCOUNT_STATUS_CD='REV' then min(LCD,VDAT)
               end
               
               /*ifn(ACCOUNT_STATUS_CD = 'AUT', ., CLOSE_DT) старый вариант*/) as CLOSE_DT length = 8
               format = DATETIME20.
               informat = DATETIME20.,
            "" as CLOSE_REASON_CD length = 3
               format = $3.
               informat = $3.,
            "" as ACCOUNT_TAX_ID length = 32
               format = $32.
               informat = $32.,
            . as EXPECTED_LOSS_PCT length = 8
               format = 11.4
               informat = 11.4,
            "" as INDIVIDUAL_ORGANIZATION_CD length = 3
               format = $3.
               informat = $3.,
            "" as SOURCE_CD length = 5
               format = $5.
               informat = $5.,
            "" as OPENING_CHANNEL_CD length = 3
               format = $3.
               informat = $3.,
            "" as PREFERRED_CHANNEL_CD length = 3
               format = $3.
               informat = $3.,
            CURRENCY_CD,
            "" as PRIMARY_PHONE_NO length = 20
               format = $20.
               informat = $20.,
            "" as PRIMARY_PHONE_TYPE_CD length = 3
               format = $3.
               informat = $3.,
            "" as SECONDARY_PHONE_NO length = 20
               format = $20.
               informat = $20.,
            "" as SECONDARY_PHONE_TYPE_CD length = 3
               format = $3.
               informat = $3.,
            "" as MAILABLE_FLG length = 1
               format = $1.
               informat = $1.,
            "" as TELEPHONABLE_FLG length = 1
               format = $1.
               informat = $1.,
            "" as EMAIL_FLG length = 1
               format = $1.
               informat = $1.,
            "" as SMS_FLG length = 1
               format = $1.
               informat = $1.,
            "" as DO_NOT_CONTACT_FLG length = 1
               format = $1.
               informat = $1.,
            . as EMPLOYEE_RK length = 8
               format = 11.
               informat = 11.,
            "" as CURRENCY_BASED_ACCOUNT_FLG length = 1
               format = $1.
               informat = $1.,
            "" as FEE_BASED_FLG length = 1
               format = $1.
               informat = $1.,
            . as ANNUAL_FEES_AMT length = 8
               format = 20.5
               informat = 20.5,
            . as MONTHLY_FEES_AMT length = 8
               format = 20.5
               informat = 20.5,
            "" as CAMPAIGN_CD length = 30
               format = $30.
               informat = $30.,
            "" as COMMUNICATION_CD length = 30
               format = $30.
               informat = $30.,
            . as REGISTERED_ONLINE_DT length = 8
               format = DATETIME20.
               informat = DATETIME20.,
            . as FIRST_LOGIN_DT length = 8
               format = DATETIME20.
               informat = DATETIME20.,
            "" as ONLINE_BILL_PAYMENT_FLG length = 1
               format = $1.
               informat = $1.,
            "" as ID_VERIFICATION_TYPE_CD length = 3
               format = $3.
               informat = $3.,
            "" as PREVIOUS_ACCOUNT_ID length = 32
               format = $32.
               informat = $32.,
            "" as OPEN_BRANCH_FINANCIAL_UNIT_ID length = 32
               format = $32.
               informat = $32.,
            MID_FINANCIAL_UNIT_ID_BRCA as PRIM_BRANCH_FINANCIAL_UNIT_ID,
            "" as FINANCIAL_APPLICATION_ID length = 32
               format = $32.
               informat = $32.,
            "" as CREDIT_FACILITY_ID length = 40
               format = $40.
               informat = $40.,
            . as FUTURE_MARGIN_INCOME_AMT length = 8
               format = 20.5
               informat = 20.5,
            "" as IN_DEFAULT_FLG length = 1
               format = $1.
               informat = $1.,
            "" as FINANCIAL_BOOK_ID length = 32
               format = $32.
               informat = $32.,
            "" as IRRECOVERABLE_FLG length = 1
               format = $1.
               informat = $1.,
            "" as OWNED_BY_INTERNAL_ORG_ID length = 32
               format = $32.
               informat = $32.,
            "" as PREVIOUS_BANK_EXTERNAL_ORG_ID length = 32
               format = $32.
               informat = $32.,
            "" as NETTING_SET_ID length = 32
               format = $32.
               informat = $32.,
            "" as REVOLVING_FLG length = 1
               format = $1.
               informat = $1.,
            "" as SOURCE_CHANNEL_CD length = 3
               format = $3.
               informat = $3.,
            . as GRACE_PERIOD_DAYS_CNT length = 8
               format = 7.
               informat = 7.,
            . as REMARGINING_DAYS_CNT length = 8
               format = 7.
               informat = 7.,
            "" as FINANCIAL_CALENDAR_ID length = 32
               format = $32.
               informat = $32.,
            DAY_BASIS_CD,
            "" as PORTFOLIO_ID length = 32
               format = $32.
               informat = $32.,
            "" as SECURITIZATION_POOL_ID length = 32
               format = $32.
               informat = $32.,
            "" as RECEIVABLES_POOL_ID length = 32
               format = $32.
               informat = $32.,
            "" as ACCOUNT_USAGE_TYPE_CD length = 3
               format = $3.
               informat = $3.,
            "" as RISK_ALARM_FLG length = 1
               format = $1.
               informat = $1.,
            "" as LOW_PROFITABILITY_FLG length = 1
               format = $1.
               informat = $1.,
            "" as ACCOUNT_LIFECYCLE_STG_CD length = 3
               format = $3.
               informat = $3.,
            "" as ATTRITION_ALARM_FLG length = 1
               format = $1.
               informat = $1.,
            "" as BALANCE_FROZEN_FLG length = 1
               format = $1.
               informat = $1.,
            . as BALANCE_FROZEN_DT length = 8
               format = DATETIME20.
               informat = DATETIME20.,
            "" as ACCOUNT_BLOCK_REASON_CD length = 3
               format = $3.
               informat = $3.,
            "" as TAXATION_STATE_CD length = 4
               format = $4.
               informat = $4.,
            . as EFFECTIVE_MATURITY_YEAR_NO length = 8
               format = 9.3
               informat = 9.3,
            "" as GL_ACCOUNT_ID length = 32
               format = $32.
               informat = $32.,
            "" as FROM_OTHER_INSTITUTION_FLG length = 1
               format = $1.
               informat = $1.,
            . as ACCOUNT_RENEWAL_CNT length = 8
               format = 7.
               informat = 7.,
            . as BALANCE_TRANSFER_DT length = 8
               format = DATETIME20.
               informat = DATETIME20.,
            . as BALANCE_TRANSFER_AMT length = 8
               format = 20.5
               informat = 20.5,
            . as BALANCE_TRANSFER_CNT length = 8
               format = 7.
               informat = 7.,
            . as BASE_LONG_TERM_APR_RT length = 8
               format = 11.4
               informat = 11.4,
            "" as BROKER_FLG length = 1
               format = $1.
               informat = $1.,
            "" as MULT_RATE_FLG length = 1
               format = $1.
               informat = $1.,
            "" as AUTO_DEBIT_ACCOUNT_NO length = 32
               format = $32.
               informat = $32.,
            "" as WORST_STATUS_LAST_12_MTH_CD length = 3
               format = $3.
               informat = $3.,
            . as WORST_STATUS_LAST_12_MTH_DT length = 8
               format = DATETIME20.
               informat = DATETIME20.,
            . as BALANCE_TRNSF_OTHER_ACCT_CNT length = 8
               format = 7.
               informat = 7.,
            . as EFFECTIVE_FROM_DTTM length = 8
               format = DATETIME20.
               informat = DATETIME20.,
            . as EFFECTIVE_TO_DTTM length = 8
               format = DATETIME20.
               informat = DATETIME20.,
            "" as COUNTERPARTY_ID length = 32
               format = $32.
               informat = $32.,
            "" as INSURED_BY_COUNTERPARTY_ID length = 32
               format = $32.
               informat = $32.,
            "" as STATEMENT_FREQUENCY_CD length = 3
               format = $3.
               informat = $3.,
            . as SECURITY_DEPOSIT_AMT length = 8
               format = 20.5
               informat = 20.5,
            . as SECURITY_DEPOSIT_REFUND_AMT length = 8
               format = 20.5
               informat = 20.5,
            . as FIRST_PAYMENT_DT length = 8
               format = DATETIME20.
               informat = DATETIME20.,
            . as LAST_PAYMENT_DT length = 8
               format = DATETIME20.
               informat = DATETIME20.,
            . as FIRST_RESET_DT length = 8
               format = DATETIME20.
               informat = DATETIME20.,
            . as LAST_RESET_DT length = 8
               format = DATETIME20.
               informat = DATETIME20.,
            . as RESETS_PER_ANNUM_NO length = 8
               format = 6.
               informat = 6.,
            "" as PRINCIPAL_PAYMENT_TYPE_CD length = 3
               format = $3.
               informat = $3.,
            . as PRINCIPAL_PAYMENT_AMT length = 8
               format = 20.5
               informat = 20.5,
            "" as RATE_POLICY_ID length = 32
               format = $32.
               informat = $32.,
            . as SPREAD_RT length = 8
               format = 11.4
               informat = 11.4,
            . as DISCOUNT_SPREAD_RT length = 8
               format = 11.4
               informat = 11.4,
            . as INITIAL_CONTRACT_RT length = 8
               format = 11.4
               informat = 11.4,
            . as FIXED_MONTHLY_PREPAYMENT_RT length = 8
               format = 11.4
               informat = 11.4,
            "" as CAPITAL_ALLOCATION_ID length = 32
               format = $32.
               informat = $32.,
            "" as CAPITAL_COST_ID length = 32
               format = $32.
               informat = $32.,
            "" as SEGMENT_ID length = 32
               format = $32.
               informat = $32.,
            "" as NEAR_BRANCH_FINANCIAL_UNIT_ID length = 32
               format = $32.
               informat = $32.,
            "" as STATEMENT_OPT_FLG length = 1
               format = $1.
               informat = $1.,
            . as VALUE_SCALING_FACTOR_RT length = 8
               format = 11.4
               informat = 11.4,
            "" as INTERNAL_REPORTING_CATEGORY_CD length = 3
               format = $3.
               informat = $3.,
            "" as CONVEXITY_ADJUSTMENT_FLG length = 1
               format = $1.
               informat = $1.,
            "" as ARREARS_PAYMENT_CD length = 3
               format = $3.
               informat = $3.,
            "" as QUANTO_FEATURE_ID length = 32
               format = $32.
               informat = $32.,
            "" as CASH_INTENSIVE_BUSINESS_FLG length = 1
               format = $1.
               informat = $1.,
            "" as LETTER_OF_CREDIT_ONFILE_FLG length = 1
               format = $1.
               informat = $1.,
            "" as TRADE_FINANCE_FLG length = 1
               format = $1.
               informat = $1.,
            "" as ANNUITY_PAYMENT_TYPE_CD length = 3
               format = $3.
               informat = $3.,
            INTEREST_PAYMENT_TYPE_CD,
            "" as INTEREST_PAYMENT_TIME_FREQ_CD length = 3
               format = $3.
               informat = $3.,
            "" as LIQUIDITY_CATEGORY_TYPE_CD length = 3
               format = $3.
               informat = $3.,
            "" as HOLIDAY_DATE_ROLL_CONV_CD length = 3
               format = $3.
               informat = $3.,
            "" as WEEKEND_DATE_ROLL_CONV_CD length = 3
               format = $3.
               informat = $3.,
            "" as EXPENSE_ALLOCATION_ID length = 32
               format = $32.
               informat = $32.,
            . as FIRST_INTEREST_PAYMENT_DT length = 8
               format = DATETIME20.
               informat = DATETIME20.,
            . as LAST_INTEREST_PAYMENT_DT length = 8
               format = DATETIME20.
               informat = DATETIME20.,
            "" as IRB_DUMMY_TYPE_CD length = 3
               format = $3.
               informat = $3.,
            IRB_SRC_ACCOUNT_ID,
            BRCA,
            FINANCIAL_INSTRUMENT_TYPE_CD
      from &etls_lastTable
      ;
   quit;
   
   %let SYSLAST = work.WIROS5U;
   
   %let etls_lastTable = &SYSLAST; 
   %let etls_tableOptions = ; 
   
   /* Determine if the target table exists  */ 
   %let etls_tableExist = %eval(%sysfunc(exist(work_ia.FINANCIAL_ACCOUNT_FUT_BK, DATA)) or 
         %sysfunc(exist(work_ia.FINANCIAL_ACCOUNT_FUT_BK, VIEW))); 
   
   %if &etls_tableExist %then 
   %do;/* table exists  */ 
      %let etls_hasPreExistingConstraint=0; 
      
      proc datasets lib = work nolist nowarn memtype = (data view);
         delete etls_commands etls_commands_F;
      quit;
      
      %let etls_otherTablesReferToThisTable=0;
      
      %macro etls_CIContents(table=,workTableOut=,inDSOptions=);
         %put NOTE: Building table listing Constraints and Indexes for: &table;
         proc datasets lib=work nolist; delete &workTableOut; quit;
         proc contents data=&table&inDSOptions out2=&workTableOut noprint; run;
         
         data &workTableOut;
            length name $60 type $20 icown idxUnique idxNoMiss $3 recreate $600;
            set &workTableOut;
            type=upcase(type);
            if type eq 'REFERENTIAL' then
            do;
               put "WARNING%QUOTE(:) Target table is referenced by constraints in"
                    " another table: " ref;
               call symput('etls_otherTablesReferToThisTable','1');
               delete;
            end;
            if type='INDEX' and ICOwn eq 'YES' then delete;
         run;
         %rcSet(&syserr); 
         
      %mend etls_CIContents;
      
      %etls_CIContents(table=work_ia.FINANCIAL_ACCOUNT_FUT_BK, workTableOut=etls_commands, inDSOptions=);
      
      %if &etls_otherTablesReferToThisTable %then 
         %put WARNING%QUOTE(:) Replacing entire table will fail. Consider an alternate load technique or revising constraints.; 
      %else 
      %do; /* okay - remove foreign keys  */ 
      
         data etls_commands_F; 
            set etls_commands; 
            if upcase(type)="FOREIGN KEY" then 
            do; 
               command='ic delete '||trim(name)||';';
               output etls_commands_F; 
            end; 
         run; 
         
         %put %str(NOTE: Removing foreign keys before dropping table...);
         data _null_;
            set etls_commands_F;
            %rcSet(&syserr); 
            
      %end; /* okay - remove foreign keys  */ 
      
      proc datasets lib = work nolist nowarn memtype = (data view);
         delete etls_commands etls_commands_F;
      quit;
      
      /*---- Drop a table  ----*/ 
      %put %str(NOTE: Dropping table ...);
      proc datasets lib = work_ia nolist nowarn memtype = (data view);
         delete FINANCIAL_ACCOUNT_FUT_BK;
      quit;
      
      %rcSet(&syserr); 
      
      %let etls_tableExist = 0;
      
   %end; /* table exists  */ 
   
   /*---- Create a new table  ----*/ 
   %if (&etls_tableExist eq 0) %then 
   %do;  /* if table does not exist  */ 
   
      %put %str(NOTE: Creating table ...);
      
      data work_ia.FINANCIAL_ACCOUNT_FUT_BK;
         attrib ACCOUNT_ID length = $32
            format = $32.
            informat = $32.
            label = 'ACCOUNT_ID'; 
         attrib VALID_FROM_DTTM length = 8
            format = DATETIME20.
            informat = DATETIME20.
            label = 'VALID_FROM_DTTM'; 
         attrib VALID_TO_DTTM length = 8
            format = DATETIME20.
            informat = DATETIME20.
            label = 'VALID_TO_DTTM'; 
         attrib SOURCE_SYSTEM_CD length = $3
            format = $3.
            informat = $3.
            label = 'SOURCE_SYSTEM_CD'; 
         attrib ACCOUNT_REGISTRATION_NM length = $100
            format = $100.
            informat = $100.
            label = 'ACCOUNT_REGISTRATION_NM'; 
         attrib ALTERNATE_ACCOUNT_NM length = $40
            format = $40.
            informat = $40.
            label = 'ALTERNATE_ACCOUNT_NM'; 
         attrib FINANCIAL_ACCOUNT_TYPE_CD length = $3
            format = $3.
            informat = $3.
            label = 'FINANCIAL_ACCOUNT_TYPE_CD'; 
         attrib AUTO_DEBIT_ACCOUNT_TYPE_CD length = $3
            format = $3.
            informat = $3.
            label = 'AUTO_DEBIT_ACCOUNT_TYPE_CD'; 
         attrib ACCOUNT_REGISTRATION_TYPE_CD length = $3
            format = $3.
            informat = $3.
            label = 'ACCOUNT_REGISTRATION_TYPE_CD'; 
         attrib ACCOUNT_STATUS_CD length = $3
            format = $3.
            informat = $3.
            label = 'ACCOUNT_STATUS_CD'; 
         attrib OPEN_DT length = 8
            format = DATETIME20.
            informat = DATETIME20.
            label = 'OPEN_DT'; 
         attrib CLOSE_DT length = 8
            format = DATETIME20.
            informat = DATETIME20.
            label = 'CLOSE_DT'; 
         attrib CLOSE_REASON_CD length = $3
            format = $3.
            informat = $3.
            label = 'CLOSE_REASON_CD'; 
         attrib ACCOUNT_TAX_ID length = $32
            format = $32.
            informat = $32.
            label = 'ACCOUNT_TAX_ID'; 
         attrib EXPECTED_LOSS_PCT length = 8
            format = 11.4
            informat = 11.4
            label = 'EXPECTED_LOSS_PCT'; 
         attrib INDIVIDUAL_ORGANIZATION_CD length = $3
            format = $3.
            informat = $3.
            label = 'INDIVIDUAL_ORGANIZATION_CD'; 
         attrib SOURCE_CD length = $5
            format = $5.
            informat = $5.
            label = 'SOURCE_CD'; 
         attrib OPENING_CHANNEL_CD length = $3
            format = $3.
            informat = $3.
            label = 'OPENING_CHANNEL_CD'; 
         attrib PREFERRED_CHANNEL_CD length = $3
            format = $3.
            informat = $3.
            label = 'PREFERRED_CHANNEL_CD'; 
         attrib CURRENCY_CD length = $3
            format = $3.
            informat = $3.
            label = 'CURRENCY_CD'; 
         attrib PRIMARY_PHONE_NO length = $20
            format = $20.
            informat = $20.
            label = 'PRIMARY_PHONE_NO'; 
         attrib PRIMARY_PHONE_TYPE_CD length = $3
            format = $3.
            informat = $3.
            label = 'PRIMARY_PHONE_TYPE_CD'; 
         attrib SECONDARY_PHONE_NO length = $20
            format = $20.
            informat = $20.
            label = 'SECONDARY_PHONE_NO'; 
         attrib SECONDARY_PHONE_TYPE_CD length = $3
            format = $3.
            informat = $3.
            label = 'SECONDARY_PHONE_TYPE_CD'; 
         attrib MAILABLE_FLG length = $1
            format = $1.
            informat = $1.
            label = 'MAILABLE_FLG'; 
         attrib TELEPHONABLE_FLG length = $1
            format = $1.
            informat = $1.
            label = 'TELEPHONABLE_FLG'; 
         attrib EMAIL_FLG length = $1
            format = $1.
            informat = $1.
            label = 'EMAIL_FLG'; 
         attrib SMS_FLG length = $1
            format = $1.
            informat = $1.
            label = 'SMS_FLG'; 
         attrib DO_NOT_CONTACT_FLG length = $1
            format = $1.
            informat = $1.
            label = 'DO_NOT_CONTACT_FLG'; 
         attrib EMPLOYEE_RK length = 8
            format = 11.
            informat = 11.
            label = 'EMPLOYEE_RK'; 
         attrib CURRENCY_BASED_ACCOUNT_FLG length = $1
            format = $1.
            informat = $1.
            label = 'CURRENCY_BASED_ACCOUNT_FLG'; 
         attrib FEE_BASED_FLG length = $1
            format = $1.
            informat = $1.
            label = 'FEE_BASED_FLG'; 
         attrib ANNUAL_FEES_AMT length = 8
            format = 20.5
            informat = 20.5
            label = 'ANNUAL_FEES_AMT'; 
         attrib MONTHLY_FEES_AMT length = 8
            format = 20.5
            informat = 20.5
            label = 'MONTHLY_FEES_AMT'; 
         attrib CAMPAIGN_CD length = $30
            format = $30.
            informat = $30.
            label = 'CAMPAIGN_CD'; 
         attrib COMMUNICATION_CD length = $30
            format = $30.
            informat = $30.
            label = 'COMMUNICATION_CD'; 
         attrib REGISTERED_ONLINE_DT length = 8
            format = DATETIME20.
            informat = DATETIME20.
            label = 'REGISTERED_ONLINE_DT'; 
         attrib FIRST_LOGIN_DT length = 8
            format = DATETIME20.
            informat = DATETIME20.
            label = 'FIRST_LOGIN_DT'; 
         attrib ONLINE_BILL_PAYMENT_FLG length = $1
            format = $1.
            informat = $1.
            label = 'ONLINE_BILL_PAYMENT_FLG'; 
         attrib ID_VERIFICATION_TYPE_CD length = $3
            format = $3.
            informat = $3.
            label = 'ID_VERIFICATION_TYPE_CD'; 
         attrib PREVIOUS_ACCOUNT_ID length = $32
            format = $32.
            informat = $32.
            label = 'PREVIOUS_ACCOUNT_ID'; 
         attrib OPEN_BRANCH_FINANCIAL_UNIT_ID length = $32
            format = $32.
            informat = $32.
            label = 'OPEN_BRANCH_FINANCIAL_UNIT_ID'; 
         attrib PRIM_BRANCH_FINANCIAL_UNIT_ID length = $32
            format = $32.
            informat = $32.
            label = 'PRIM_BRANCH_FINANCIAL_UNIT_ID'; 
         attrib FINANCIAL_APPLICATION_ID length = $32
            format = $32.
            informat = $32.
            label = 'FINANCIAL_APPLICATION_ID'; 
         attrib CREDIT_FACILITY_ID length = $40
            format = $40.
            informat = $40.
            label = 'CREDIT_FACILITY_ID'; 
         attrib FUTURE_MARGIN_INCOME_AMT length = 8
            format = 20.5
            informat = 20.5
            label = 'FUTURE_MARGIN_INCOME_AMT'; 
         attrib IN_DEFAULT_FLG length = $1
            format = $1.
            informat = $1.
            label = 'IN_DEFAULT_FLG'; 
         attrib FINANCIAL_BOOK_ID length = $32
            format = $32.
            informat = $32.
            label = 'FINANCIAL_BOOK_ID'; 
         attrib IRRECOVERABLE_FLG length = $1
            format = $1.
            informat = $1.
            label = 'IRRECOVERABLE_FLG'; 
         attrib OWNED_BY_INTERNAL_ORG_ID length = $32
            format = $32.
            informat = $32.
            label = 'OWNED_BY_INTERNAL_ORG_ID'; 
         attrib PREVIOUS_BANK_EXTERNAL_ORG_ID length = $32
            format = $32.
            informat = $32.
            label = 'PREVIOUS_BANK_EXTERNAL_ORG_ID'; 
         attrib NETTING_SET_ID length = $32
            format = $32.
            informat = $32.
            label = 'NETTING_SET_ID'; 
         attrib REVOLVING_FLG length = $1
            format = $1.
            informat = $1.
            label = 'REVOLVING_FLG'; 
         attrib SOURCE_CHANNEL_CD length = $3
            format = $3.
            informat = $3.
            label = 'SOURCE_CHANNEL_CD'; 
         attrib GRACE_PERIOD_DAYS_CNT length = 8
            format = 7.
            informat = 7.
            label = 'GRACE_PERIOD_DAYS_CNT'; 
         attrib REMARGINING_DAYS_CNT length = 8
            format = 7.
            informat = 7.
            label = 'REMARGINING_DAYS_CNT'; 
         attrib FINANCIAL_CALENDAR_ID length = $32
            format = $32.
            informat = $32.
            label = 'FINANCIAL_CALENDAR_ID'; 
         attrib DAY_BASIS_CD length = $10
            format = $10.
            informat = $10.
            label = 'DAY_BASIS_CD'; 
         attrib PORTFOLIO_ID length = $32
            format = $32.
            informat = $32.
            label = 'PORTFOLIO_ID'; 
         attrib SECURITIZATION_POOL_ID length = $32
            format = $32.
            informat = $32.
            label = 'SECURITIZATION_POOL_ID'; 
         attrib RECEIVABLES_POOL_ID length = $32
            format = $32.
            informat = $32.
            label = 'RECEIVABLES_POOL_ID'; 
         attrib ACCOUNT_USAGE_TYPE_CD length = $3
            format = $3.
            informat = $3.
            label = 'ACCOUNT_USAGE_TYPE_CD'; 
         attrib RISK_ALARM_FLG length = $1
            format = $1.
            informat = $1.
            label = 'RISK_ALARM_FLG'; 
         attrib LOW_PROFITABILITY_FLG length = $1
            format = $1.
            informat = $1.
            label = 'LOW_PROFITABILITY_FLG'; 
         attrib ACCOUNT_LIFECYCLE_STG_CD length = $3
            format = $3.
            informat = $3.
            label = 'ACCOUNT_LIFECYCLE_STG_CD'; 
         attrib ATTRITION_ALARM_FLG length = $1
            format = $1.
            informat = $1.
            label = 'ATTRITION_ALARM_FLG'; 
         attrib BALANCE_FROZEN_FLG length = $1
            format = $1.
            informat = $1.
            label = 'BALANCE_FROZEN_FLG'; 
         attrib BALANCE_FROZEN_DT length = 8
            format = DATETIME20.
            informat = DATETIME20.
            label = 'BALANCE_FROZEN_DT'; 
         attrib ACCOUNT_BLOCK_REASON_CD length = $3
            format = $3.
            informat = $3.
            label = 'ACCOUNT_BLOCK_REASON_CD'; 
         attrib TAXATION_STATE_CD length = $4
            format = $4.
            informat = $4.
            label = 'TAXATION_STATE_CD'; 
         attrib EFFECTIVE_MATURITY_YEAR_NO length = 8
            format = 9.3
            informat = 9.3
            label = 'EFFECTIVE_MATURITY_YEAR_NO'; 
         attrib GL_ACCOUNT_ID length = $32
            format = $32.
            informat = $32.
            label = 'GL_ACCOUNT_ID'; 
         attrib FROM_OTHER_INSTITUTION_FLG length = $1
            format = $1.
            informat = $1.
            label = 'FROM_OTHER_INSTITUTION_FLG'; 
         attrib ACCOUNT_RENEWAL_CNT length = 8
            format = 7.
            informat = 7.
            label = 'ACCOUNT_RENEWAL_CNT'; 
         attrib BALANCE_TRANSFER_DT length = 8
            format = DATETIME20.
            informat = DATETIME20.
            label = 'BALANCE_TRANSFER_DT'; 
         attrib BALANCE_TRANSFER_AMT length = 8
            format = 20.5
            informat = 20.5
            label = 'BALANCE_TRANSFER_AMT'; 
         attrib BALANCE_TRANSFER_CNT length = 8
            format = 7.
            informat = 7.
            label = 'BALANCE_TRANSFER_CNT'; 
         attrib BASE_LONG_TERM_APR_RT length = 8
            format = 11.4
            informat = 11.4
            label = 'BASE_LONG_TERM_APR_RT'; 
         attrib BROKER_FLG length = $1
            format = $1.
            informat = $1.
            label = 'BROKER_FLG'; 
         attrib MULT_RATE_FLG length = $1
            format = $1.
            informat = $1.
            label = 'MULT_RATE_FLG'; 
         attrib AUTO_DEBIT_ACCOUNT_NO length = $32
            format = $32.
            informat = $32.
            label = 'AUTO_DEBIT_ACCOUNT_NO'; 
         attrib WORST_STATUS_LAST_12_MTH_CD length = $3
            format = $3.
            informat = $3.
            label = 'WORST_STATUS_LAST_12_MTH_CD'; 
         attrib WORST_STATUS_LAST_12_MTH_DT length = 8
            format = DATETIME20.
            informat = DATETIME20.
            label = 'WORST_STATUS_LAST_12_MTH_DT'; 
         attrib BALANCE_TRNSF_OTHER_ACCT_CNT length = 8
            format = 7.
            informat = 7.
            label = 'BALANCE_TRNSF_OTHER_ACCT_CNT'; 
         attrib EFFECTIVE_FROM_DTTM length = 8
            format = DATETIME20.
            informat = DATETIME20.
            label = 'EFFECTIVE_FROM_DTTM'; 
         attrib EFFECTIVE_TO_DTTM length = 8
            format = DATETIME20.
            informat = DATETIME20.
            label = 'EFFECTIVE_TO_DTTM'; 
         attrib COUNTERPARTY_ID length = $32
            format = $32.
            informat = $32.
            label = 'COUNTERPARTY_ID'; 
         attrib INSURED_BY_COUNTERPARTY_ID length = $32
            format = $32.
            informat = $32.
            label = 'INSURED_BY_COUNTERPARTY_ID'; 
         attrib STATEMENT_FREQUENCY_CD length = $3
            format = $3.
            informat = $3.
            label = 'STATEMENT_FREQUENCY_CD'; 
         attrib SECURITY_DEPOSIT_AMT length = 8
            format = 20.5
            informat = 20.5
            label = 'SECURITY_DEPOSIT_AMT'; 
         attrib SECURITY_DEPOSIT_REFUND_AMT length = 8
            format = 20.5
            informat = 20.5
            label = 'SECURITY_DEPOSIT_REFUND_AMT'; 
         attrib FIRST_PAYMENT_DT length = 8
            format = DATETIME20.
            informat = DATETIME20.
            label = 'FIRST_PAYMENT_DT'; 
         attrib LAST_PAYMENT_DT length = 8
            format = DATETIME20.
            informat = DATETIME20.
            label = 'LAST_PAYMENT_DT'; 
         attrib FIRST_RESET_DT length = 8
            format = DATETIME20.
            informat = DATETIME20.
            label = 'FIRST_RESET_DT'; 
         attrib LAST_RESET_DT length = 8
            format = DATETIME20.
            informat = DATETIME20.
            label = 'LAST_RESET_DT'; 
         attrib RESETS_PER_ANNUM_NO length = 8
            format = 6.
            informat = 6.
            label = 'RESETS_PER_ANNUM_NO'; 
         attrib PRINCIPAL_PAYMENT_TYPE_CD length = $3
            format = $3.
            informat = $3.
            label = 'PRINCIPAL_PAYMENT_TYPE_CD'; 
         attrib PRINCIPAL_PAYMENT_AMT length = 8
            format = 20.5
            informat = 20.5
            label = 'PRINCIPAL_PAYMENT_AMT'; 
         attrib RATE_POLICY_ID length = $32
            format = $32.
            informat = $32.
            label = 'RATE_POLICY_ID'; 
         attrib SPREAD_RT length = 8
            format = 11.4
            informat = 11.4
            label = 'SPREAD_RT'; 
         attrib DISCOUNT_SPREAD_RT length = 8
            format = 11.4
            informat = 11.4
            label = 'DISCOUNT_SPREAD_RT'; 
         attrib INITIAL_CONTRACT_RT length = 8
            format = 11.4
            informat = 11.4
            label = 'INITIAL_CONTRACT_RT'; 
         attrib FIXED_MONTHLY_PREPAYMENT_RT length = 8
            format = 11.4
            informat = 11.4
            label = 'FIXED_MONTHLY_PREPAYMENT_RT'; 
         attrib CAPITAL_ALLOCATION_ID length = $32
            format = $32.
            informat = $32.
            label = 'CAPITAL_ALLOCATION_ID'; 
         attrib CAPITAL_COST_ID length = $32
            format = $32.
            informat = $32.
            label = 'CAPITAL_COST_ID'; 
         attrib SEGMENT_ID length = $32
            format = $32.
            informat = $32.
            label = 'SEGMENT_ID'; 
         attrib NEAR_BRANCH_FINANCIAL_UNIT_ID length = $32
            format = $32.
            informat = $32.
            label = 'NEAR_BRANCH_FINANCIAL_UNIT_ID'; 
         attrib STATEMENT_OPT_FLG length = $1
            format = $1.
            informat = $1.
            label = 'STATEMENT_OPT_FLG'; 
         attrib VALUE_SCALING_FACTOR_RT length = 8
            format = 11.4
            informat = 11.4
            label = 'VALUE_SCALING_FACTOR_RT'; 
         attrib INTERNAL_REPORTING_CATEGORY_CD length = $3
            format = $3.
            informat = $3.
            label = 'INTERNAL_REPORTING_CATEGORY_CD'; 
         attrib CONVEXITY_ADJUSTMENT_FLG length = $1
            format = $1.
            informat = $1.
            label = 'CONVEXITY_ADJUSTMENT_FLG'; 
         attrib ARREARS_PAYMENT_CD length = $3
            format = $3.
            informat = $3.
            label = 'ARREARS_PAYMENT_CD'; 
         attrib QUANTO_FEATURE_ID length = $32
            format = $32.
            informat = $32.
            label = 'QUANTO_FEATURE_ID'; 
         attrib CASH_INTENSIVE_BUSINESS_FLG length = $1
            format = $1.
            informat = $1.
            label = 'CASH_INTENSIVE_BUSINESS_FLG'; 
         attrib LETTER_OF_CREDIT_ONFILE_FLG length = $1
            format = $1.
            informat = $1.
            label = 'LETTER_OF_CREDIT_ONFILE_FLG'; 
         attrib TRADE_FINANCE_FLG length = $1
            format = $1.
            informat = $1.
            label = 'TRADE_FINANCE_FLG'; 
         attrib ANNUITY_PAYMENT_TYPE_CD length = $3
            format = $3.
            informat = $3.
            label = 'ANNUITY_PAYMENT_TYPE_CD'; 
         attrib INTEREST_PAYMENT_TYPE_CD length = $3
            format = $3.
            informat = $3.
            label = 'INTEREST_PAYMENT_TYPE_CD'; 
         attrib INTEREST_PAYMENT_TIME_FREQ_CD length = $3
            format = $3.
            informat = $3.
            label = 'INTEREST_PAYMENT_TIME_FREQ_CD'; 
         attrib LIQUIDITY_CATEGORY_TYPE_CD length = $3
            format = $3.
            informat = $3.
            label = 'LIQUIDITY_CATEGORY_TYPE_CD'; 
         attrib HOLIDAY_DATE_ROLL_CONV_CD length = $3
            format = $3.
            informat = $3.
            label = 'HOLIDAY_DATE_ROLL_CONV_CD'; 
         attrib WEEKEND_DATE_ROLL_CONV_CD length = $3
            format = $3.
            informat = $3.
            label = 'WEEKEND_DATE_ROLL_CONV_CD'; 
         attrib EXPENSE_ALLOCATION_ID length = $32
            format = $32.
            informat = $32.
            label = 'EXPENSE_ALLOCATION_ID'; 
         attrib FIRST_INTEREST_PAYMENT_DT length = 8
            format = DATETIME20.
            informat = DATETIME20.
            label = 'FIRST_INTEREST_PAYMENT_DT'; 
         attrib LAST_INTEREST_PAYMENT_DT length = 8
            format = DATETIME20.
            informat = DATETIME20.
            label = 'LAST_INTEREST_PAYMENT_DT'; 
         attrib IRB_DUMMY_TYPE_CD length = $3
            format = $3.
            informat = $3.
            label = 'IRB_DUMMY_TYPE_CD'; 
         attrib IRB_SRC_ACCOUNT_ID length = $32
            format = $32.
            informat = $32.
            label = 'IRB_SRC_ACCOUNT_ID'; 
         attrib BRCA length = $3
            format = $3.
            informat = $3.
            label = 'BRCA'; 
         attrib FINANCIAL_INSTRUMENT_TYPE_CD length = $3
            format = $3.
            informat = $3.
            label = 'FINANCIAL_INSTRUMENT_TYPE_CD'; 
         call missing(of _all_);
         stop;
      run;
      
      %rcSet(&syserr); 
      
      /*---- Create the integrity constraints for a table  ----*/ 
      %put %str(NOTE: Creating integrity constraints ...);
      proc datasets library=work_ia nolist;
         modify FINANCIAL_ACCOUNT_FUT_BK;
            ic create not null (ACCOUNT_ID);
            ic create not null (SOURCE_SYSTEM_CD);
            ic create not null (FINANCIAL_ACCOUNT_TYPE_CD);
            ic create not null (ACCOUNT_STATUS_CD);
            ic create not null (CURRENCY_CD);
            ic create not null (PRIM_BRANCH_FINANCIAL_UNIT_ID);
            ic create not null (BRCA);
            ic create Index1 = primary key (ACCOUNT_ID VALID_FROM_DTTM);
      quit;
      
      %rcSet(&syserr); 
      
   %end;  /* if table does not exist  */ 
   
   /*---- Append  ----*/ 
   %put %str(NOTE: Appending data ...);
   
   proc append base = work_ia.FINANCIAL_ACCOUNT_FUT_BK 
      data = &etls_lastTable (&etls_tableOptions)  force ; 
    run; 
   
   %rcSet(&syserr); 
   
   proc datasets lib = work nolist nowarn memtype = (data view);
      delete WIROS5U;
   quit;
   
%mend etls_loader;
%etls_loader;

%let etls_recCheckExist = 0; 
%let etls_recnt = 0; 
%macro etls_recordCheck; 
   %let etls_recCheckExist = %eval(%sysfunc(exist(work_ia.FINANCIAL_ACCOUNT_FUT_BK, DATA)) or 
         %sysfunc(exist(work_ia.FINANCIAL_ACCOUNT_FUT_BK, VIEW))); 
   
   %if (&etls_recCheckExist) %then
   %do;
      %local etls_syntaxcheck; 
      %let etls_syntaxcheck = %sysfunc(getoption(syntaxcheck)); 
      /* Turn off syntaxcheck option to perform following steps  */ 
      options nosyntaxcheck;
      
      proc contents data = work_ia.FINANCIAL_ACCOUNT_FUT_BK out = work.etls_contents(keep = nobs) noprint; 
      run; 
      
      data _null_; 
         set work.etls_contents (obs = 1); 
         call symput("etls_recnt", left(put(nobs,32.))); 
      run;
      
      proc datasets lib = work nolist nowarn memtype = (data view);
         delete etls_contents;
      quit;
      
      /* Reset syntaxcheck option to previous setting  */ 
      options &etls_syntaxcheck; 
   %end;
%mend etls_recordCheck;
%etls_recordCheck;



/**  Step end Table Loader **/

/*==========================================================================* 
 * Step:            Table Loader                          A5Y50FNE.AQ000A37 * 
 * Transform:       Table Loader (Version 2.1)                              * 
 * Description:                                                             * 
 *                                                                          * 
 * Source Table:    Генерация BKtpOut - work.W1MHBF25     A5Y50FNE.AO0005NN * 
 * Target Table:    FIN_INSTR_ASSOC_FUT_BK -              A5Y50FNE.AE000124 * 
 *                   work_ia.FIN_INSTR_ASSOC_FUT_BK                         * 
 *==========================================================================*/ 

%let transformID = %quote(A5Y50FNE.AQ000A37);
%let trans_rc = 0;
%let etls_stepStartTime = %sysfunc(datetime(), datetime20.); 

%let SYSLAST = %nrquote(work.W1MHBF25); 

%let SYS_SQL_IP_SPEEDO = Y;
%let SYS_SQL_MAPPUTTO = sas_put;
%let SYS_SQLREDUCEPUT = DBMS;
%global etls_sql_pushDown;
%let etls_sql_pushDown = -1;
option DBIDIRECTEXEC;

%global etls_tableExist;
%global etls_numIndex;
%global etls_lastTable;
%let etls_tableExist = -1; 
%let etls_numIndex = -1; 
%let etls_lastTable = &SYSLAST; 

/*---- Define load data macro  ----*/ 

/* --------------------------------------------------------------
   Load Technique Selection: Replace - EntireTable
   Constraint and index action selections: 'INIT','ASIS','ASIS','ASIS'
   Additional options selections... 
      Set unmapped to missing on updates: false 
   -------------------------------------------------------------- */
%macro etls_loader;

   %let etls_tableOptions = ;
   
   /*---- Map the columns  ----*/ 
   proc datasets lib = work nolist nowarn memtype = (data view);
      delete WIROS80;
   quit;
   
   %put %str(NOTE: Mapping columns ...);
   proc sql;
      create view work.WIROS80 as
         select
            FINANCIAL_INSTRUMENT_ID as FINANCIAL_INSTRUMENT_ASSOC_ID,
            VALID_FROM_DTTM,
            VALID_TO_DTTM,
            ('DRV') as FINANCIAL_INSTR_ASSOC_TYPE_CD length = 3
               format = $3.
               informat = $3.,
            FINANCIAL_INSTRUMENT_ID,
            DRV_ACCOUNT_ID as REFERENCE_ACCOUNT_ID
      from &etls_lastTable
      ;
   quit;
   
   %let SYSLAST = work.WIROS80;
   
   %let etls_lastTable = &SYSLAST; 
   %let etls_tableOptions = ; 
   
   /* Determine if the target table exists  */ 
   %let etls_tableExist = %eval(%sysfunc(exist(work_ia.FIN_INSTR_ASSOC_FUT_BK, DATA)) or 
         %sysfunc(exist(work_ia.FIN_INSTR_ASSOC_FUT_BK, VIEW))); 
   
   %if &etls_tableExist %then 
   %do;/* table exists  */ 
      %let etls_hasPreExistingConstraint=0; 
      
      proc datasets lib = work nolist nowarn memtype = (data view);
         delete etls_commands etls_commands_F;
      quit;
      
      %let etls_otherTablesReferToThisTable=0;
      
      %macro etls_CIContents(table=,workTableOut=,inDSOptions=);
         %put NOTE: Building table listing Constraints and Indexes for: &table;
         proc datasets lib=work nolist; delete &workTableOut; quit;
         proc contents data=&table&inDSOptions out2=&workTableOut noprint; run;
         
         data &workTableOut;
            length name $60 type $20 icown idxUnique idxNoMiss $3 recreate $600;
            set &workTableOut;
            type=upcase(type);
            if type eq 'REFERENTIAL' then
            do;
               put "WARNING%QUOTE(:) Target table is referenced by constraints in"
                    " another table: " ref;
               call symput('etls_otherTablesReferToThisTable','1');
               delete;
            end;
            if type='INDEX' and ICOwn eq 'YES' then delete;
         run;
         %rcSet(&syserr); 
         
      %mend etls_CIContents;
      
      %etls_CIContents(table=work_ia.FIN_INSTR_ASSOC_FUT_BK, workTableOut=etls_commands, inDSOptions=);
      
      %if &etls_otherTablesReferToThisTable %then 
         %put WARNING%QUOTE(:) Replacing entire table will fail. Consider an alternate load technique or revising constraints.; 
      %else 
      %do; /* okay - remove foreign keys  */ 
      
         data etls_commands_F; 
            set etls_commands; 
            if upcase(type)="FOREIGN KEY" then 
            do; 
               command='ic delete '||trim(name)||';';
               output etls_commands_F; 
            end; 
         run; 
         
         %put %str(NOTE: Removing foreign keys before dropping table...);
         data _null_;
            set etls_commands_F;
            %rcSet(&syserr); 
            
      %end; /* okay - remove foreign keys  */ 
      
      proc datasets lib = work nolist nowarn memtype = (data view);
         delete etls_commands etls_commands_F;
      quit;
      
      /*---- Drop a table  ----*/ 
      %put %str(NOTE: Dropping table ...);
      proc datasets lib = work_ia nolist nowarn memtype = (data view);
         delete FIN_INSTR_ASSOC_FUT_BK;
      quit;
      
      %rcSet(&syserr); 
      
      %let etls_tableExist = 0;
      
   %end; /* table exists  */ 
   
   /*---- Create a new table  ----*/ 
   %if (&etls_tableExist eq 0) %then 
   %do;  /* if table does not exist  */ 
   
      %put %str(NOTE: Creating table ...);
      
      data work_ia.FIN_INSTR_ASSOC_FUT_BK;
         attrib FINANCIAL_INSTRUMENT_ASSOC_ID length = $32
            format = $32.
            informat = $32.
            label = 'FINANCIAL_INSTRUMENT_ASSOC_ID'; 
         attrib VALID_FROM_DTTM length = 8
            format = DATETIME20.
            informat = DATETIME20.
            label = 'VALID_FROM_DTTM'; 
         attrib VALID_TO_DTTM length = 8
            format = DATETIME20.
            informat = DATETIME20.
            label = 'VALID_TO_DTTM'; 
         attrib FINANCIAL_INSTR_ASSOC_TYPE_CD length = $3
            format = $3.
            informat = $3.
            label = 'FINANCIAL_INSTR_ASSOC_TYPE_CD'; 
         attrib FINANCIAL_INSTRUMENT_ID length = $32
            format = $32.
            informat = $32.
            label = 'FINANCIAL_INSTRUMENT_ID'; 
         attrib REFERENCE_ACCOUNT_ID length = $32
            format = $32.
            informat = $32.
            label = 'FINANCIAL_ACCOUNT_ID'; 
         call missing(of _all_);
         stop;
      run;
      
      %rcSet(&syserr); 
      
      /*---- Create the integrity constraints for a table  ----*/ 
      %put %str(NOTE: Creating integrity constraints ...);
      proc datasets library=work_ia nolist;
         modify FIN_INSTR_ASSOC_FUT_BK;
            ic create not null (FINANCIAL_INSTRUMENT_ASSOC_ID);
            ic create not null (VALID_FROM_DTTM);
            ic create not null (VALID_TO_DTTM);
            ic create not null (FINANCIAL_INSTR_ASSOC_TYPE_CD);
            ic create not null (FINANCIAL_INSTRUMENT_ID);
            ic create not null (REFERENCE_ACCOUNT_ID);
            ic create pk_index = primary key (FINANCIAL_INSTRUMENT_ASSOC_ID VALID_FROM_DTTM);
      quit;
      
      %rcSet(&syserr); 
      
   %end;  /* if table does not exist  */ 
   
   /*---- Append  ----*/ 
   %put %str(NOTE: Appending data ...);
   
   proc append base = work_ia.FIN_INSTR_ASSOC_FUT_BK 
      data = &etls_lastTable (&etls_tableOptions)  force ; 
    run; 
   
   %rcSet(&syserr); 
   
   proc datasets lib = work nolist nowarn memtype = (data view);
      delete WIROS80;
   quit;
   
%mend etls_loader;
%etls_loader;

%let etls_recCheckExist = 0; 
%let etls_recnt = 0; 
%macro etls_recordCheck; 
   %let etls_recCheckExist = %eval(%sysfunc(exist(work_ia.FIN_INSTR_ASSOC_FUT_BK, DATA)) or 
         %sysfunc(exist(work_ia.FIN_INSTR_ASSOC_FUT_BK, VIEW))); 
   
   %if (&etls_recCheckExist) %then
   %do;
      %local etls_syntaxcheck; 
      %let etls_syntaxcheck = %sysfunc(getoption(syntaxcheck)); 
      /* Turn off syntaxcheck option to perform following steps  */ 
      options nosyntaxcheck;
      
      proc contents data = work_ia.FIN_INSTR_ASSOC_FUT_BK out = work.etls_contents(keep = nobs) noprint; 
      run; 
      
      data _null_; 
         set work.etls_contents (obs = 1); 
         call symput("etls_recnt", left(put(nobs,32.))); 
      run;
      
      proc datasets lib = work nolist nowarn memtype = (data view);
         delete etls_contents;
      quit;
      
      /* Reset syntaxcheck option to previous setting  */ 
      options &etls_syntaxcheck; 
   %end;
%mend etls_recordCheck;
%etls_recordCheck;



/**  Step end Table Loader **/

/*==========================================================================* 
 * Step:            Завершить модуль                      A5Y50FNE.AQ000A38 * 
 * Transform:       Завершить модуль                                        * 
 * Description:                                                             * 
 *==========================================================================*/ 

%let transformID = %quote(A5Y50FNE.AQ000A38);
%let trans_rc = 0;
%let etls_stepStartTime = %sysfunc(datetime(), datetime20.); 

%let _INPUT_count = 0; 
%let _OUTPUT_count = 0; 


/*****************************************************************
* ВЕРСИЯ:
*   $Id: transform_job_finish.sas 247 2012-04-03 07:31:10Z nesterenok $
*
******************************************************************
* НАЗНАЧЕНИЕ:
*   Регистрирует конец модуля ETL.
*
* ПАРАМЕТРЫ:
*   нет
*
******************************************************************/

%macro transform_job_finish;

   /* Продолжаем модуль */
   %job_continue_reg(mpJobType=JOB, mpJobName=&ETLS_JobName., mpPostEvent=N);

   /* Завершаем модуль */
   %job_finish_reg(mpJobType=JOB);

%mend transform_job_finish;

%transform_job_finish;


%rcSet(&syserr); 
%rcSet(&sysrc); 
%rcSet(&sqlrc); 



/**  Step end Завершить модуль **/

%let etls_endTime = %sysfunc(datetime(),datetime.);



/**  Job end 042_947_Structure_FINANCIAL_ACCOUNT_FUT_BK **/

/* Reset jobid and name */
%let jobID = %quote(A569C89V.AQ0000CK);
%let etls_jobName = %nrquote(090_364_Stream_Midas_Fin_Account_BK);

/**************************************************************************** 
 * Job:             042_946_Structure_FINANCIAL_ACCOUNT_  A5Y50FNE.AN0000VO * 
 *                  SPT_BK                                                  * 
 * Description:                                                             * 
 *                                                                          * 
 * Metadata Server: bravo14                                                 * 
 * Port:            8561                                                    * 
 * Location:        /DWH_DWHDDS_IA/Jobs/042_Structure/Financial_Account     * 
 *                                                                          * 
 * Server:          SASApp                                A5C46MZY.AQ000002 * 
 *                                                                          * 
 * Source Table:    FINANCIAL_INSTRUMENT_SPT_BK -         A5Y50FNE.AE000142 * 
 *                   work_ia.FINANCIAL_INSTRUMENT_SPT_BK                    * 
 * Target Tables:   FINANCIAL_ACCOUNT_SPT_BK -            A5Y50FNE.AE00012R * 
 *                   work_ia.FINANCIAL_ACCOUNT_SPT_BK                       * 
 *                  FIN_INSTR_ASSOC_SPT_BK -              A5Y50FNE.AE000129 * 
 *                   work_ia.FIN_INSTR_ASSOC_SPT_BK                         * 
 *                  CUSTOMER_X_FIN_ACC_SPT_BK -           A5Y50FNE.AE00011V * 
 *                   work_ia.CUSTOMER_X_FIN_ACC_SPT_BK                      * 
 *                                                                          * 
 * Generated on:    16 Июль 2013 г. 17:14:47 MSD                            * 
 * Generated by:    sasdwh                                                  * 
 * Version:         SAS Data Integration Studio 4.5                         * 
 ****************************************************************************/ 

/* General macro variables  */ 
%let jobID = %quote(A5Y50FNE.AN0000VO);
%let etls_jobName = %nrquote(042_946_Structure_FINANCIAL_ACCOUNT_SPT_BK);
%let etls_userID = %nrquote(sasdwh);


/* Create metadata macro variables */
%let IOMServer      = %nrquote(SASApp);
%let metaPort       = %nrquote(8561);
%let metaServer     = %nrquote(bravo14);

/* Set metadata options */
options metaport       = &metaPort 
        metaserver     = "&metaServer"; 

/* Setup for capturing job status  */ 
%let etls_startTime = %sysfunc(datetime(),datetime.);
%let etls_recordsBefore = 0;
%let etls_recordsAfter = 0;
%let etls_lib = 0;
%let etls_table = 0;

%global etls_debug; 
%macro etls_setDebug; 
   %if %str(&etls_debug) ne 0 %then 
      OPTIONS MPRINT%str(;); 
%mend; 
%etls_setDebug; 

/*==========================================================================* 
 * Step:            Начать модуль                         A5Y50FNE.AQ000A2V * 
 * Transform:       Начать модуль                                           * 
 * Description:                                                             * 
 *==========================================================================*/ 

%let transformID = %quote(A5Y50FNE.AQ000A2V);
%let trans_rc = 0;
%let etls_stepStartTime = %sysfunc(datetime(), datetime20.); 

%let _INPUT_count = 0; 
%let _OUTPUT_count = 0; 


/*****************************************************************
* ВЕРСИЯ:
*   $Id: transform_job_start.sas 1747 2012-08-01 11:26:13Z nesterenok $
*
******************************************************************
* НАЗНАЧЕНИЕ:
*   Регистрирует начало модуля ETL.
*
* ПАРАМЕТРЫ:
*   нет
*
******************************************************************/

%macro transform_job_start;

   /* Продолжаем поток (или создаем новый) */
   %local lmvStreamName;
   %if %sysfunc(sysexist(LSB_JOBNAME)) %then
      %let lmvStreamName = %scan(%sysfunc(sysget(LSB_JOBNAME)), 3, :);
   %else
      %let lmvStreamName = ;

   %job_continue_reg(mpJobType=STREAM, mpJobName=&lmvStreamName, mpPostEvent=N, mpForcedStart=Y);

   /* Для DI, начинаем поток заново, если старый был начат не сегодня */
   %if %length(&lmvStreamName) eq 0 and &STREAM_START_DT ne %sysfunc(today()) %then %do;
      %job_start_reg(mpJobType=STREAM, mpParentJobId=, mpJobName=&lmvStreamName.);
   %end;

   /* Начинаем модуль */
   %job_start_reg(mpJobType=JOB, mpParentJobId=&STREAM_ID, mpJobName=&ETLS_JobName.);

%mend transform_job_start;

%transform_job_start;


%rcSet(&syserr); 
%rcSet(&sysrc); 
%rcSet(&sqlrc); 



/**  Step end Начать модуль **/

/*==========================================================================* 
 * Step:            Extract                               A5Y50FNE.AQ000A2W * 
 * Transform:       Extract                                                 * 
 * Description:                                                             * 
 *                                                                          * 
 * Source Table:    FINANCIAL_INSTRUMENT_SPT_BK -         A5Y50FNE.AE000142 * 
 *                   work_ia.FINANCIAL_INSTRUMENT_SPT_BK                    * 
 * Target Table:    Extract - work.W1MOEVV1               A5Y50FNE.AO0005NK * 
 *==========================================================================*/ 

%let transformID = %quote(A5Y50FNE.AQ000A2W);
%let trans_rc = 0;
%let etls_stepStartTime = %sysfunc(datetime(), datetime20.); 

%let etls_recCheckExist = 0; 
%let etls_recnt = 0; 
%macro etls_recordCheck; 
   %let etls_recCheckExist = %eval(%sysfunc(exist(work_ia.FINANCIAL_INSTRUMENT_SPT_BK, DATA)) or 
         %sysfunc(exist(work_ia.FINANCIAL_INSTRUMENT_SPT_BK, VIEW))); 
   
   %if (&etls_recCheckExist) %then
   %do;
      %local etls_syntaxcheck; 
      %let etls_syntaxcheck = %sysfunc(getoption(syntaxcheck)); 
      /* Turn off syntaxcheck option to perform following steps  */ 
      options nosyntaxcheck;
      
      proc contents data = work_ia.FINANCIAL_INSTRUMENT_SPT_BK out = work.etls_contents(keep = nobs) noprint; 
      run; 
      
      data _null_; 
         set work.etls_contents (obs = 1); 
         call symput("etls_recnt", left(put(nobs,32.))); 
      run;
      
      proc datasets lib = work nolist nowarn memtype = (data view);
         delete etls_contents;
      quit;
      
      /* Reset syntaxcheck option to previous setting  */ 
      options &etls_syntaxcheck; 
   %end;
%mend etls_recordCheck;
%etls_recordCheck;

%let SYSLAST = %nrquote(work_ia.FINANCIAL_INSTRUMENT_SPT_BK); 

%let SYS_SQL_IP_SPEEDO = Y;
%let SYS_SQL_MAPPUTTO = sas_put;
%let SYS_SQLREDUCEPUT = DBMS;
%global etls_sql_pushDown;
%let etls_sql_pushDown = -1;
option DBIDIRECTEXEC;

/*---- Map the columns  ----*/ 
proc datasets lib = work nolist nowarn memtype = (data view);
   delete W1MOEVV1;
quit;

%put %str(NOTE: Mapping columns ...);
proc sql;
   create view work.W1MOEVV1 as
      select
         VALID_FROM_DTTM,
         VALID_TO_DTTM,
         IRB_SRC_ACCOUNT_ID,
         ('MID') as SOURCE_SYSTEM_CD length = 3
            format = $3.
            informat = $3.
            label = 'SOURCE_SYSTEM_CD',
         ('') as ACCOUNT_REGISTRATION_NM length = 100
            format = $100.
            informat = $100.
            label = 'ACCOUNT_REGISTRATION_NM',
         ('') as ALTERNATE_ACCOUNT_NM length = 40
            format = $40.
            informat = $40.
            label = 'ALTERNATE_ACCOUNT_NM',
         ('DRV') as FINANCIAL_ACCOUNT_TYPE_CD length = 3
            format = $3.
            informat = $3.
            label = 'FINANCIAL_ACCOUNT_TYPE_CD',
         BRCA,
         IRB_INSTR_STATUS_CD as ACCOUNT_STATUS_CD   
            label = 'ACCOUNT_STATUS_CD',
         DDAT as OPEN_DT   
            label = 'OPEN_DT',
         FIRST_PAYMENT_DT as CLOSE_DT   
            label = 'corrected later',
         CURRENCY_CD,
         DAY_BASIS_CD,
         INTEREST_PAYMENT_TYPE_CD,
         FINANCIAL_INSTRUMENT_TYPE_CD,
         FINANCIAL_INSTRUMENT_ID,
         (put(CNUM ,z8.)) as CUSTOMER_NO length = 8,
         VDAT,
         LCD
   from &SYSLAST
      where VALID_TO_DTTM = &ETL_SCD_FUTURE_DTTM
   ;
quit;

%let SYSLAST = work.W1MOEVV1;

%global etls_sql_pushDown;
%let etls_sql_pushDown = &sys_sql_ip_all;

%rcSet(&sqlrc); 



/**  Step end Extract **/

/*==========================================================================* 
 * Step:            Генерация BK                          A5Y50FNE.AQ000A2X * 
 * Transform:       Генерация BK                                            * 
 * Description:                                                             * 
 *                                                                          * 
 * Source Table:    Extract - work.W1MOEVV1               A5Y50FNE.AO0005NK * 
 * Target Table:    Генерация BKtpOut - work.W1MHBF25     A5Y50FNE.AO0005NL * 
 *==========================================================================*/ 

%let transformID = %quote(A5Y50FNE.AQ000A2X);
%let trans_rc = 0;
%let etls_stepStartTime = %sysfunc(datetime(), datetime20.); 

%let etls_recnt = -1;
%let SYSLAST = %nrquote(work.W1MOEVV1); 

%let _INPUT_count = 1; 
%let _INPUT = work.W1MOEVV1;
%let _INPUT_connect = ;
%let _INPUT_engine = ;
%let _INPUT_memtype = VIEW;
%let _INPUT_options = %nrquote();
%let _INPUT_alter = %nrquote();
%let _INPUT_path = %nrquote(/Extract_A5Y50FNE.AO0005NK%(WorkTable%));
%let _INPUT_type = 1;
%let _INPUT_label = %nrquote();

%let tpIn = work.W1MOEVV1;
%let tpIn_connect = ;
%let tpIn_engine = ;
%let tpIn_memtype = VIEW;
%let tpIn_options = %nrquote();
%let tpIn_alter = %nrquote();
%let tpIn_path = %nrquote(/Extract_A5Y50FNE.AO0005NK%(WorkTable%));
%let tpIn_type = 1;
%let tpIn_label = %nrquote();

%let _OUTPUT_count = 1; 
%let _OUTPUT = work.W1MHBF25;
%let _OUTPUT_connect = ;
%let _OUTPUT_engine = ;
%let _OUTPUT_memtype = DATA;
%let _OUTPUT_options = %nrquote();
%let _OUTPUT_alter = %nrquote();
%let _OUTPUT_path = %nrquote(/Генерация BKtpOut_A5Y50FNE.AO0005NL%(WorkTable%));
%let _OUTPUT_type = 1;
%let _OUTPUT_label = %nrquote();
/* List of target columns to keep  */ 
%let _OUTPUT_keep = DRV_ACCOUNT_ID FCC_COUNTERPARTY_ID VALID_FROM_DTTM VALID_TO_DTTM 
        SOURCE_SYSTEM_CD ACCOUNT_REGISTRATION_NM ALTERNATE_ACCOUNT_NM 
        FINANCIAL_ACCOUNT_TYPE_CD ACCOUNT_STATUS_CD OPEN_DT CLOSE_DT 
        CURRENCY_CD DAY_BASIS_CD INTEREST_PAYMENT_TYPE_CD IRB_SRC_ACCOUNT_ID 
        MID_FINANCIAL_UNIT_ID_BRCA FINANCIAL_INSTRUMENT_ID BRCA 
        FINANCIAL_INSTRUMENT_TYPE_CD VDAT LCD;

%let tpOut = work.W1MHBF25;
%let tpOut_connect = ;
%let tpOut_engine = ;
%let tpOut_memtype = DATA;
%let tpOut_options = %nrquote();
%let tpOut_alter = %nrquote();
%let tpOut_path = %nrquote(/Генерация BKtpOut_A5Y50FNE.AO0005NL%(WorkTable%));
%let tpOut_type = 1;
%let tpOut_label = %nrquote();
/* List of target columns to keep  */ 
%let tpOut_keep = DRV_ACCOUNT_ID FCC_COUNTERPARTY_ID VALID_FROM_DTTM VALID_TO_DTTM 
        SOURCE_SYSTEM_CD ACCOUNT_REGISTRATION_NM ALTERNATE_ACCOUNT_NM 
        FINANCIAL_ACCOUNT_TYPE_CD ACCOUNT_STATUS_CD OPEN_DT CLOSE_DT 
        CURRENCY_CD DAY_BASIS_CD INTEREST_PAYMENT_TYPE_CD IRB_SRC_ACCOUNT_ID 
        MID_FINANCIAL_UNIT_ID_BRCA FINANCIAL_INSTRUMENT_ID BRCA 
        FINANCIAL_INSTRUMENT_TYPE_CD VDAT LCD;


proc datasets lib=work nolist nowarn memtype = (data view);
   delete W1MHBF25;
quit;

%let tpBK = %nrquote(FINANCIAL_ACCOUNT_DRV           );
%let tpBK0 = %nrquote(3);
%let tpBK1 = %nrquote(FINANCIAL_ACCOUNT_DRV           );
%let tpBK2 = %nrquote(FINANCIAL_UNIT_MID_BRCA         );
%let tpBK3 = %nrquote(FCC_COUNTERPARTY_FCC            );
%let tpBK_count = %nrquote(3);
%let tpOptionalBK_count = %nrquote(0);
%let tpOptionalBK = ;

/* List of target columns to keep  */ 
%let _keep = DRV_ACCOUNT_ID FCC_COUNTERPARTY_ID VALID_FROM_DTTM VALID_TO_DTTM 
        SOURCE_SYSTEM_CD ACCOUNT_REGISTRATION_NM ALTERNATE_ACCOUNT_NM 
        FINANCIAL_ACCOUNT_TYPE_CD ACCOUNT_STATUS_CD OPEN_DT CLOSE_DT 
        CURRENCY_CD DAY_BASIS_CD INTEREST_PAYMENT_TYPE_CD IRB_SRC_ACCOUNT_ID 
        MID_FINANCIAL_UNIT_ID_BRCA FINANCIAL_INSTRUMENT_ID BRCA 
        FINANCIAL_INSTRUMENT_TYPE_CD VDAT LCD;
/* List of target columns to keep  */ 
%let keep = DRV_ACCOUNT_ID FCC_COUNTERPARTY_ID VALID_FROM_DTTM VALID_TO_DTTM 
        SOURCE_SYSTEM_CD ACCOUNT_REGISTRATION_NM ALTERNATE_ACCOUNT_NM 
        FINANCIAL_ACCOUNT_TYPE_CD ACCOUNT_STATUS_CD OPEN_DT CLOSE_DT 
        CURRENCY_CD DAY_BASIS_CD INTEREST_PAYMENT_TYPE_CD IRB_SRC_ACCOUNT_ID 
        MID_FINANCIAL_UNIT_ID_BRCA FINANCIAL_INSTRUMENT_ID BRCA 
        FINANCIAL_INSTRUMENT_TYPE_CD VDAT LCD;
/*****************************************************************
* ВЕРСИЯ:
*     $Id: transform_generate_bk.sas 4889 2013-04-04 09:14:07Z nesterenok $
*
******************************************************************
* НАЗНАЧЕНИЕ:
*     Генерирует бизнес-ключи в таблице по списку.
*
* ПАРАМЕТРЫ:
*     tpIn                    +  имя входного набора
*     tpBK                    +  список кодов обязательных для генерации бизнес-ключей, разделенный пробелами
*                                Такой бизнес-ключ станет дамми, если заполнены не все поля, его составляющие
*                                FK к ETL_SYS.ETL_BK.BK_CD
*     tpOptionalBK            +  список кодов НЕобязательных для генерации бизнес-ключей, разделенный пробелами
*                                Такой бизнес-ключ останется пустым, если заполнены не все поля, его составляющие
*     tpOut                   +  имя выходного набора
*
******************************************************************/

%macro transform_generate_bk;
   %let tpBK_count         = %unquote(&tpBK_count);
   %let tpOptionalBK_count = %unquote(&tpOptionalBK_count);

   %local lmvDummyRows lmvFieldDummyCount lmvDummyRequired;
   %let lmvDummyRows       = work.tr_gen_bk_dummy_rows;
   %let lmvFieldDummyCount = etl_dummy_count;
   %let lmvDummyRequired   = %eval (&tpBK_count gt 0);

   /* Макросы для генерации одного ключа */
   %macro sm_trans_gen_bk_required;
      %etl_generate_bk (
         mpFieldBK=&bk_field_nm, mpLengthBK=%sysfunc(inputn(&bk_type_cd, bkt_cd_len.)),
         mpColumnList=&bk_column_list_txt, mpFormat=&bk_format_txt,
         mpFieldDummy=&lmvFieldDummy, mpFieldDummyCount=&lmvFieldDummyCount
      );
   %mend;
   %macro sm_trans_gen_bk_optional;
      %etl_generate_bk (
         mpFieldBK=&bk_field_nm, mpLengthBK=%sysfunc(inputn(&bk_type_cd, bkt_cd_len.)),
         mpColumnList=&bk_column_list_txt, mpFormat=&bk_format_txt,
         mpFieldDummy=
      );
   %mend;

   /* Макрос для подстановки в дамми-ключ уникального номера */
   %macro sm_trans_gen_bk_dummy;
      if &lmvFieldDummy gt 0 then do;
         set &lmvDummyIds (keep=OBJECT_ID rename=(OBJECT_ID=&lmvFieldDummy._no)) point=&lmvFieldDummy;
         &bk_field_nm = cats (&bk_field_nm, "_", &lmvFieldDummy._no);

         %error_check;
      end;
   %mend;


   /* Создаем выходной набор итерацией по всем заявленным бизнес-ключам */
   /* Считаем необходимое кол-во дамми-ключей */
   %local lmvBkIndex lmvFieldDummy lmvDummyCount;
   %let lmvDummyCount   = 0;
   data
      %if &lmvDummyRequired %then %do;
         &tpOut (drop= etl_dummy_:)
         &lmvDummyRows
      %end;
      %else %do;
         &tpOut
      %end;
   ;
      set &tpIn end=ds_end;

      /* Генерация необязательных ключей */
      %do lmvBkIndex=1 %to &tpOptionalBK_count;
         %util_loop_data (mpLoopMacro=sm_trans_gen_bk_optional, mpData=ETL_SYS.ETL_BK,
                          mpWhere=BK_CD eq %util_quote(&&tpOptionalBK&lmvBkIndex)
         );
      %end;

      %if &lmvDummyRequired %then %do;
         length &lmvFieldDummyCount 8;
         drop &lmvFieldDummyCount;
         retain &lmvFieldDummyCount 0;

         /* Генерация обязательных ключей */
         %do lmvBkIndex=1 %to &tpBK_count;
            %let lmvFieldDummy = etl_dummy_&lmvBkIndex.;

            %util_loop_data (mpLoopMacro=sm_trans_gen_bk_required, mpData=ETL_SYS.ETL_BK,
                             mpWhere=BK_CD eq %util_quote(&&tpBK&lmvBkIndex)
            );
         %end;

         /* Если в какой-то записи есть дамми, то не выводим ее сразу */
         if sum (of etl_dummy_1-etl_dummy_&tpBK_count) = 0 then
            output &tpOut;
         else do;
            output &lmvDummyRows;
         end;

         if ds_end then call symputx ("lmvDummyCount", &lmvFieldDummyCount);
      %end;
      %else %do;
         output &tpOut;
      %end;
   run;
   %error_check (mpStepType=DATA);

   /* Если дамми нет, то всё */
   %if (not &lmvDummyRequired) or (&lmvDummyCount eq 0) %then %return;


   /* Для каждого дамми генерируем уникальный номер */
   %local lmvDummyIds;
   %let lmvDummyIds = work.tr_gen_bk_dummy_ids;
   %unique_ids (mpIdCount=&lmvDummyCount, mpOut=&lmvDummyIds, mpSequenceName=ETL_DUMMY_SEQ);

   /* Добавляем номер к дамми */
   data &lmvDummyRows._id (drop= etl_dummy_:);
      set &lmvDummyRows;

      %do lmvBkIndex=1 %to &tpBK_count;
         %let lmvFieldDummy = etl_dummy_&lmvBkIndex.;

         %util_loop_data (mpLoopMacro=sm_trans_gen_bk_dummy, mpData=ETL_SYS.ETL_BK,
                          mpWhere=BK_CD eq %util_quote(&&tpBK&lmvBkIndex)
         );
      %end;
   run;
   %error_check (mpStepType=DATA);


   /* Добавляем дамми-строки к выходному набору */
   proc append base=&tpOut data=&lmvDummyRows._id;
   run;
   %error_check (mpStepType=DATA);

%mend transform_generate_bk;

%transform_generate_bk;

%rcSet(&syserr); 
%rcSet(&sysrc); 
%rcSet(&sqlrc); 



/**  Step end Генерация BK **/

/*==========================================================================* 
 * Step:            Table Loader                          A5Y50FNE.AQ000A2Y * 
 * Transform:       Table Loader (Version 2.1)                              * 
 * Description:                                                             * 
 *                                                                          * 
 * Source Table:    Генерация BKtpOut - work.W1MHBF25     A5Y50FNE.AO0005NL * 
 * Target Table:    FINANCIAL_ACCOUNT_SPT_BK -            A5Y50FNE.AE00012R * 
 *                   work_ia.FINANCIAL_ACCOUNT_SPT_BK                       * 
 *==========================================================================*/ 

%let transformID = %quote(A5Y50FNE.AQ000A2Y);
%let trans_rc = 0;
%let etls_stepStartTime = %sysfunc(datetime(), datetime20.); 

%let SYSLAST = %nrquote(work.W1MHBF25); 

%let SYS_SQL_IP_SPEEDO = Y;
%let SYS_SQL_MAPPUTTO = sas_put;
%let SYS_SQLREDUCEPUT = DBMS;
%global etls_sql_pushDown;
%let etls_sql_pushDown = -1;
option DBIDIRECTEXEC;

%global etls_tableExist;
%global etls_numIndex;
%global etls_lastTable;
%let etls_tableExist = -1; 
%let etls_numIndex = -1; 
%let etls_lastTable = &SYSLAST; 

/*---- Define load data macro  ----*/ 

/* --------------------------------------------------------------
   Load Technique Selection: Replace - EntireTable
   Constraint and index action selections: 'INIT','ASIS','ASIS','ASIS'
   Additional options selections... 
      Set unmapped to missing on updates: false 
   -------------------------------------------------------------- */
%macro etls_loader;

   %let etls_tableOptions = ;
   
   /*---- Map the columns  ----*/ 
   proc datasets lib = work nolist nowarn memtype = (data view);
      delete WIROSOV;
   quit;
   
   data _null_;
      put "NOTE: The following column(s) do not have a column mapping, so the"
           " value(s) will be set to missing: AUTO_DEBIT_ACCOUNT_TYPE_CD,"
           " ACCOUNT_REGISTRATION_TYPE_CD, CLOSE_REASON_CD,    ACCOUNT_TAX_ID,"
           " EXPECTED_LOSS_PCT, INDIVIDUAL_ORGANIZATION_CD, SOURCE_CD,   "
           " OPENING_CHANNEL_CD, PREFERRED_CHANNEL_CD, PRIMARY_PHONE_NO,   "
           " PRIMARY_PHONE_TYPE_CD, SECONDARY_PHONE_NO, SECONDARY_PHONE_TYPE_CD,"
           "    MAILABLE_FLG, TELEPHONABLE_FLG, EMAIL_FLG, SMS_FLG,"
           " DO_NOT_CONTACT_FLG,    EMPLOYEE_RK, CURRENCY_BASED_ACCOUNT_FLG,"
           " FEE_BASED_FLG, ANNUAL_FEES_AMT,    MONTHLY_FEES_AMT, CAMPAIGN_CD,"
           " COMMUNICATION_CD, REGISTERED_ONLINE_DT,    FIRST_LOGIN_DT,"
           " ONLINE_BILL_PAYMENT_FLG, ID_VERIFICATION_TYPE_CD,   "
           " PREVIOUS_ACCOUNT_ID, OPEN_BRANCH_FINANCIAL_UNIT_ID,   "
           " FINANCIAL_APPLICATION_ID, CREDIT_FACILITY_ID,"
           " FUTURE_MARGIN_INCOME_AMT,    IN_DEFAULT_FLG, FINANCIAL_BOOK_ID,"
           " IRRECOVERABLE_FLG,    OWNED_BY_INTERNAL_ORG_ID,"
           " PREVIOUS_BANK_EXTERNAL_ORG_ID, NETTING_SET_ID,    REVOLVING_FLG,"
           " SOURCE_CHANNEL_CD, GRACE_PERIOD_DAYS_CNT,    REMARGINING_DAYS_CNT,"
           " FINANCIAL_CALENDAR_ID, PORTFOLIO_ID,    SECURITIZATION_POOL_ID,"
           " RECEIVABLES_POOL_ID, ACCOUNT_USAGE_TYPE_CD,    RISK_ALARM_FLG,"
           " LOW_PROFITABILITY_FLG, ACCOUNT_LIFECYCLE_STG_CD,   "
           " ATTRITION_ALARM_FLG, BALANCE_FROZEN_FLG, BALANCE_FROZEN_DT,   "
           " ACCOUNT_BLOCK_REASON_CD, TAXATION_STATE_CD,"
           " EFFECTIVE_MATURITY_YEAR_NO,    GL_ACCOUNT_ID,"
           " FROM_OTHER_INSTITUTION_FLG, ACCOUNT_RENEWAL_CNT,   "
           " BALANCE_TRANSFER_DT, BALANCE_TRANSFER_AMT, BALANCE_TRANSFER_CNT,   "
           " BASE_LONG_TERM_APR_RT, BROKER_FLG, MULT_RATE_FLG,"
           " AUTO_DEBIT_ACCOUNT_NO,    WORST_STATUS_LAST_12_MTH_CD,"
           " WORST_STATUS_LAST_12_MTH_DT,    BALANCE_TRNSF_OTHER_ACCT_CNT,"
           " EFFECTIVE_FROM_DTTM, EFFECTIVE_TO_DTTM,    COUNTERPARTY_ID,"
           " INSURED_BY_COUNTERPARTY_ID, STATEMENT_FREQUENCY_CD,   "
           " SECURITY_DEPOSIT_AMT, SECURITY_DEPOSIT_REFUND_AMT,"
           " FIRST_PAYMENT_DT,    LAST_PAYMENT_DT, FIRST_RESET_DT,"
           " LAST_RESET_DT, RESETS_PER_ANNUM_NO,    PRINCIPAL_PAYMENT_TYPE_CD,"
           " PRINCIPAL_PAYMENT_AMT, RATE_POLICY_ID, SPREAD_RT,   "
           " DISCOUNT_SPREAD_RT, INITIAL_CONTRACT_RT,"
           " FIXED_MONTHLY_PREPAYMENT_RT,    CAPITAL_ALLOCATION_ID,"
           " CAPITAL_COST_ID, SEGMENT_ID,    NEAR_BRANCH_FINANCIAL_UNIT_ID,"
           " STATEMENT_OPT_FLG, VALUE_SCALING_FACTOR_RT,   "
           " INTERNAL_REPORTING_CATEGORY_CD, CONVEXITY_ADJUSTMENT_FLG,   "
           " ARREARS_PAYMENT_CD, QUANTO_FEATURE_ID, CASH_INTENSIVE_BUSINESS_FLG,"
           "    LETTER_OF_CREDIT_ONFILE_FLG, TRADE_FINANCE_FLG,"
           " ANNUITY_PAYMENT_TYPE_CD,    INTEREST_PAYMENT_TIME_FREQ_CD,"
           " LIQUIDITY_CATEGORY_TYPE_CD,    HOLIDAY_DATE_ROLL_CONV_CD,"
           " WEEKEND_DATE_ROLL_CONV_CD, EXPENSE_ALLOCATION_ID,   "
           " FIRST_INTEREST_PAYMENT_DT, LAST_INTEREST_PAYMENT_DT,"
           " IRB_DUMMY_TYPE_CD";
   run;
   
   %put %str(NOTE: Mapping columns ...);
   proc sql;
      create view work.WIROSOV as
         select
            DRV_ACCOUNT_ID as ACCOUNT_ID,
            VALID_FROM_DTTM,
            VALID_TO_DTTM,
            SOURCE_SYSTEM_CD,
            ACCOUNT_REGISTRATION_NM,
            ALTERNATE_ACCOUNT_NM,
            FINANCIAL_ACCOUNT_TYPE_CD,
            "" as AUTO_DEBIT_ACCOUNT_TYPE_CD length = 3
               format = $3.
               informat = $3.,
            "" as ACCOUNT_REGISTRATION_TYPE_CD length = 3
               format = $3.
               informat = $3.,
            ACCOUNT_STATUS_CD,
            OPEN_DT,
            (case when ACCOUNT_STATUS_CD='AUT' then .
                       when ACCOUNT_STATUS_CD='MAT' then VDAT
                       when ACCOUNT_STATUS_CD='REV' then min(LCD,VDAT)
               end
               
               /*ifn(ACCOUNT_STATUS_CD = 'AUT', ., CLOSE_DT) старый вариант*/) as CLOSE_DT length = 8
               format = DATETIME20.
               informat = DATETIME20.,
            "" as CLOSE_REASON_CD length = 3
               format = $3.
               informat = $3.,
            "" as ACCOUNT_TAX_ID length = 32
               format = $32.
               informat = $32.,
            . as EXPECTED_LOSS_PCT length = 8
               format = 11.4
               informat = 11.4,
            "" as INDIVIDUAL_ORGANIZATION_CD length = 3
               format = $3.
               informat = $3.,
            "" as SOURCE_CD length = 5
               format = $5.
               informat = $5.,
            "" as OPENING_CHANNEL_CD length = 3
               format = $3.
               informat = $3.,
            "" as PREFERRED_CHANNEL_CD length = 3
               format = $3.
               informat = $3.,
            CURRENCY_CD,
            "" as PRIMARY_PHONE_NO length = 20
               format = $20.
               informat = $20.,
            "" as PRIMARY_PHONE_TYPE_CD length = 3
               format = $3.
               informat = $3.,
            "" as SECONDARY_PHONE_NO length = 20
               format = $20.
               informat = $20.,
            "" as SECONDARY_PHONE_TYPE_CD length = 3
               format = $3.
               informat = $3.,
            "" as MAILABLE_FLG length = 1
               format = $1.
               informat = $1.,
            "" as TELEPHONABLE_FLG length = 1
               format = $1.
               informat = $1.,
            "" as EMAIL_FLG length = 1
               format = $1.
               informat = $1.,
            "" as SMS_FLG length = 1
               format = $1.
               informat = $1.,
            "" as DO_NOT_CONTACT_FLG length = 1
               format = $1.
               informat = $1.,
            . as EMPLOYEE_RK length = 8
               format = 11.
               informat = 11.,
            "" as CURRENCY_BASED_ACCOUNT_FLG length = 1
               format = $1.
               informat = $1.,
            "" as FEE_BASED_FLG length = 1
               format = $1.
               informat = $1.,
            . as ANNUAL_FEES_AMT length = 8
               format = 20.5
               informat = 20.5,
            . as MONTHLY_FEES_AMT length = 8
               format = 20.5
               informat = 20.5,
            "" as CAMPAIGN_CD length = 30
               format = $30.
               informat = $30.,
            "" as COMMUNICATION_CD length = 30
               format = $30.
               informat = $30.,
            . as REGISTERED_ONLINE_DT length = 8
               format = DATETIME20.
               informat = DATETIME20.,
            . as FIRST_LOGIN_DT length = 8
               format = DATETIME20.
               informat = DATETIME20.,
            "" as ONLINE_BILL_PAYMENT_FLG length = 1
               format = $1.
               informat = $1.,
            "" as ID_VERIFICATION_TYPE_CD length = 3
               format = $3.
               informat = $3.,
            "" as PREVIOUS_ACCOUNT_ID length = 32
               format = $32.
               informat = $32.,
            "" as OPEN_BRANCH_FINANCIAL_UNIT_ID length = 32
               format = $32.
               informat = $32.,
            MID_FINANCIAL_UNIT_ID_BRCA as PRIM_BRANCH_FINANCIAL_UNIT_ID,
            "" as FINANCIAL_APPLICATION_ID length = 32
               format = $32.
               informat = $32.,
            "" as CREDIT_FACILITY_ID length = 40
               format = $40.
               informat = $40.,
            . as FUTURE_MARGIN_INCOME_AMT length = 8
               format = 20.5
               informat = 20.5,
            "" as IN_DEFAULT_FLG length = 1
               format = $1.
               informat = $1.,
            "" as FINANCIAL_BOOK_ID length = 32
               format = $32.
               informat = $32.,
            "" as IRRECOVERABLE_FLG length = 1
               format = $1.
               informat = $1.,
            "" as OWNED_BY_INTERNAL_ORG_ID length = 32
               format = $32.
               informat = $32.,
            "" as PREVIOUS_BANK_EXTERNAL_ORG_ID length = 32
               format = $32.
               informat = $32.,
            "" as NETTING_SET_ID length = 32
               format = $32.
               informat = $32.,
            "" as REVOLVING_FLG length = 1
               format = $1.
               informat = $1.,
            "" as SOURCE_CHANNEL_CD length = 3
               format = $3.
               informat = $3.,
            . as GRACE_PERIOD_DAYS_CNT length = 8
               format = 7.
               informat = 7.,
            . as REMARGINING_DAYS_CNT length = 8
               format = 7.
               informat = 7.,
            "" as FINANCIAL_CALENDAR_ID length = 32
               format = $32.
               informat = $32.,
            DAY_BASIS_CD,
            "" as PORTFOLIO_ID length = 32
               format = $32.
               informat = $32.,
            "" as SECURITIZATION_POOL_ID length = 32
               format = $32.
               informat = $32.,
            "" as RECEIVABLES_POOL_ID length = 32
               format = $32.
               informat = $32.,
            "" as ACCOUNT_USAGE_TYPE_CD length = 3
               format = $3.
               informat = $3.,
            "" as RISK_ALARM_FLG length = 1
               format = $1.
               informat = $1.,
            "" as LOW_PROFITABILITY_FLG length = 1
               format = $1.
               informat = $1.,
            "" as ACCOUNT_LIFECYCLE_STG_CD length = 3
               format = $3.
               informat = $3.,
            "" as ATTRITION_ALARM_FLG length = 1
               format = $1.
               informat = $1.,
            "" as BALANCE_FROZEN_FLG length = 1
               format = $1.
               informat = $1.,
            . as BALANCE_FROZEN_DT length = 8
               format = DATETIME20.
               informat = DATETIME20.,
            "" as ACCOUNT_BLOCK_REASON_CD length = 3
               format = $3.
               informat = $3.,
            "" as TAXATION_STATE_CD length = 4
               format = $4.
               informat = $4.,
            . as EFFECTIVE_MATURITY_YEAR_NO length = 8
               format = 9.3
               informat = 9.3,
            "" as GL_ACCOUNT_ID length = 32
               format = $32.
               informat = $32.,
            "" as FROM_OTHER_INSTITUTION_FLG length = 1
               format = $1.
               informat = $1.,
            . as ACCOUNT_RENEWAL_CNT length = 8
               format = 7.
               informat = 7.,
            . as BALANCE_TRANSFER_DT length = 8
               format = DATETIME20.
               informat = DATETIME20.,
            . as BALANCE_TRANSFER_AMT length = 8
               format = 20.5
               informat = 20.5,
            . as BALANCE_TRANSFER_CNT length = 8
               format = 7.
               informat = 7.,
            . as BASE_LONG_TERM_APR_RT length = 8
               format = 11.4
               informat = 11.4,
            "" as BROKER_FLG length = 1
               format = $1.
               informat = $1.,
            "" as MULT_RATE_FLG length = 1
               format = $1.
               informat = $1.,
            "" as AUTO_DEBIT_ACCOUNT_NO length = 32
               format = $32.
               informat = $32.,
            "" as WORST_STATUS_LAST_12_MTH_CD length = 3
               format = $3.
               informat = $3.,
            . as WORST_STATUS_LAST_12_MTH_DT length = 8
               format = DATETIME20.
               informat = DATETIME20.,
            . as BALANCE_TRNSF_OTHER_ACCT_CNT length = 8
               format = 7.
               informat = 7.,
            . as EFFECTIVE_FROM_DTTM length = 8
               format = DATETIME20.
               informat = DATETIME20.,
            . as EFFECTIVE_TO_DTTM length = 8
               format = DATETIME20.
               informat = DATETIME20.,
            "" as COUNTERPARTY_ID length = 32
               format = $32.
               informat = $32.,
            "" as INSURED_BY_COUNTERPARTY_ID length = 32
               format = $32.
               informat = $32.,
            "" as STATEMENT_FREQUENCY_CD length = 3
               format = $3.
               informat = $3.,
            . as SECURITY_DEPOSIT_AMT length = 8
               format = 20.5
               informat = 20.5,
            . as SECURITY_DEPOSIT_REFUND_AMT length = 8
               format = 20.5
               informat = 20.5,
            . as FIRST_PAYMENT_DT length = 8
               format = DATETIME20.
               informat = DATETIME20.,
            . as LAST_PAYMENT_DT length = 8
               format = DATETIME20.
               informat = DATETIME20.,
            . as FIRST_RESET_DT length = 8
               format = DATETIME20.
               informat = DATETIME20.,
            . as LAST_RESET_DT length = 8
               format = DATETIME20.
               informat = DATETIME20.,
            . as RESETS_PER_ANNUM_NO length = 8
               format = 6.
               informat = 6.,
            "" as PRINCIPAL_PAYMENT_TYPE_CD length = 3
               format = $3.
               informat = $3.,
            . as PRINCIPAL_PAYMENT_AMT length = 8
               format = 20.5
               informat = 20.5,
            "" as RATE_POLICY_ID length = 32
               format = $32.
               informat = $32.,
            . as SPREAD_RT length = 8
               format = 11.4
               informat = 11.4,
            . as DISCOUNT_SPREAD_RT length = 8
               format = 11.4
               informat = 11.4,
            . as INITIAL_CONTRACT_RT length = 8
               format = 11.4
               informat = 11.4,
            . as FIXED_MONTHLY_PREPAYMENT_RT length = 8
               format = 11.4
               informat = 11.4,
            "" as CAPITAL_ALLOCATION_ID length = 32
               format = $32.
               informat = $32.,
            "" as CAPITAL_COST_ID length = 32
               format = $32.
               informat = $32.,
            "" as SEGMENT_ID length = 32
               format = $32.
               informat = $32.,
            "" as NEAR_BRANCH_FINANCIAL_UNIT_ID length = 32
               format = $32.
               informat = $32.,
            "" as STATEMENT_OPT_FLG length = 1
               format = $1.
               informat = $1.,
            . as VALUE_SCALING_FACTOR_RT length = 8
               format = 11.4
               informat = 11.4,
            "" as INTERNAL_REPORTING_CATEGORY_CD length = 3
               format = $3.
               informat = $3.,
            "" as CONVEXITY_ADJUSTMENT_FLG length = 1
               format = $1.
               informat = $1.,
            "" as ARREARS_PAYMENT_CD length = 3
               format = $3.
               informat = $3.,
            "" as QUANTO_FEATURE_ID length = 32
               format = $32.
               informat = $32.,
            "" as CASH_INTENSIVE_BUSINESS_FLG length = 1
               format = $1.
               informat = $1.,
            "" as LETTER_OF_CREDIT_ONFILE_FLG length = 1
               format = $1.
               informat = $1.,
            "" as TRADE_FINANCE_FLG length = 1
               format = $1.
               informat = $1.,
            "" as ANNUITY_PAYMENT_TYPE_CD length = 3
               format = $3.
               informat = $3.,
            INTEREST_PAYMENT_TYPE_CD,
            "" as INTEREST_PAYMENT_TIME_FREQ_CD length = 3
               format = $3.
               informat = $3.,
            "" as LIQUIDITY_CATEGORY_TYPE_CD length = 3
               format = $3.
               informat = $3.,
            "" as HOLIDAY_DATE_ROLL_CONV_CD length = 3
               format = $3.
               informat = $3.,
            "" as WEEKEND_DATE_ROLL_CONV_CD length = 3
               format = $3.
               informat = $3.,
            "" as EXPENSE_ALLOCATION_ID length = 32
               format = $32.
               informat = $32.,
            . as FIRST_INTEREST_PAYMENT_DT length = 8
               format = DATETIME20.
               informat = DATETIME20.,
            . as LAST_INTEREST_PAYMENT_DT length = 8
               format = DATETIME20.
               informat = DATETIME20.,
            "" as IRB_DUMMY_TYPE_CD length = 3
               format = $3.
               informat = $3.,
            IRB_SRC_ACCOUNT_ID,
            BRCA,
            FINANCIAL_INSTRUMENT_TYPE_CD
      from &etls_lastTable
      ;
   quit;
   
   %let SYSLAST = work.WIROSOV;
   
   %let etls_lastTable = &SYSLAST; 
   %let etls_tableOptions = ; 
   
   /* Determine if the target table exists  */ 
   %let etls_tableExist = %eval(%sysfunc(exist(work_ia.FINANCIAL_ACCOUNT_SPT_BK, DATA)) or 
         %sysfunc(exist(work_ia.FINANCIAL_ACCOUNT_SPT_BK, VIEW))); 
   
   %if &etls_tableExist %then 
   %do;/* table exists  */ 
      %let etls_hasPreExistingConstraint=0; 
      
      proc datasets lib = work nolist nowarn memtype = (data view);
         delete etls_commands etls_commands_F;
      quit;
      
      %let etls_otherTablesReferToThisTable=0;
      
      %macro etls_CIContents(table=,workTableOut=,inDSOptions=);
         %put NOTE: Building table listing Constraints and Indexes for: &table;
         proc datasets lib=work nolist; delete &workTableOut; quit;
         proc contents data=&table&inDSOptions out2=&workTableOut noprint; run;
         
         data &workTableOut;
            length name $60 type $20 icown idxUnique idxNoMiss $3 recreate $600;
            set &workTableOut;
            type=upcase(type);
            if type eq 'REFERENTIAL' then
            do;
               put "WARNING%QUOTE(:) Target table is referenced by constraints in"
                    " another table: " ref;
               call symput('etls_otherTablesReferToThisTable','1');
               delete;
            end;
            if type='INDEX' and ICOwn eq 'YES' then delete;
         run;
         %rcSet(&syserr); 
         
      %mend etls_CIContents;
      
      %etls_CIContents(table=work_ia.FINANCIAL_ACCOUNT_SPT_BK, workTableOut=etls_commands, inDSOptions=);
      
      %if &etls_otherTablesReferToThisTable %then 
         %put WARNING%QUOTE(:) Replacing entire table will fail. Consider an alternate load technique or revising constraints.; 
      %else 
      %do; /* okay - remove foreign keys  */ 
      
         data etls_commands_F; 
            set etls_commands; 
            if upcase(type)="FOREIGN KEY" then 
            do; 
               command='ic delete '||trim(name)||';';
               output etls_commands_F; 
            end; 
         run; 
         
         %put %str(NOTE: Removing foreign keys before dropping table...);
         data _null_;
            set etls_commands_F;
            %rcSet(&syserr); 
            
      %end; /* okay - remove foreign keys  */ 
      
      proc datasets lib = work nolist nowarn memtype = (data view);
         delete etls_commands etls_commands_F;
      quit;
      
      /*---- Drop a table  ----*/ 
      %put %str(NOTE: Dropping table ...);
      proc datasets lib = work_ia nolist nowarn memtype = (data view);
         delete FINANCIAL_ACCOUNT_SPT_BK;
      quit;
      
      %rcSet(&syserr); 
      
      %let etls_tableExist = 0;
      
   %end; /* table exists  */ 
   
   /*---- Create a new table  ----*/ 
   %if (&etls_tableExist eq 0) %then 
   %do;  /* if table does not exist  */ 
   
      %put %str(NOTE: Creating table ...);
      
      data work_ia.FINANCIAL_ACCOUNT_SPT_BK;
         attrib ACCOUNT_ID length = $32
            format = $32.
            informat = $32.
            label = 'ACCOUNT_ID'; 
         attrib VALID_FROM_DTTM length = 8
            format = DATETIME20.
            informat = DATETIME20.
            label = 'VALID_FROM_DTTM'; 
         attrib VALID_TO_DTTM length = 8
            format = DATETIME20.
            informat = DATETIME20.
            label = 'VALID_TO_DTTM'; 
         attrib SOURCE_SYSTEM_CD length = $3
            format = $3.
            informat = $3.
            label = 'SOURCE_SYSTEM_CD'; 
         attrib ACCOUNT_REGISTRATION_NM length = $100
            format = $100.
            informat = $100.
            label = 'ACCOUNT_REGISTRATION_NM'; 
         attrib ALTERNATE_ACCOUNT_NM length = $40
            format = $40.
            informat = $40.
            label = 'ALTERNATE_ACCOUNT_NM'; 
         attrib FINANCIAL_ACCOUNT_TYPE_CD length = $3
            format = $3.
            informat = $3.
            label = 'FINANCIAL_ACCOUNT_TYPE_CD'; 
         attrib AUTO_DEBIT_ACCOUNT_TYPE_CD length = $3
            format = $3.
            informat = $3.
            label = 'AUTO_DEBIT_ACCOUNT_TYPE_CD'; 
         attrib ACCOUNT_REGISTRATION_TYPE_CD length = $3
            format = $3.
            informat = $3.
            label = 'ACCOUNT_REGISTRATION_TYPE_CD'; 
         attrib ACCOUNT_STATUS_CD length = $3
            format = $3.
            informat = $3.
            label = 'ACCOUNT_STATUS_CD'; 
         attrib OPEN_DT length = 8
            format = DATETIME20.
            informat = DATETIME20.
            label = 'OPEN_DT'; 
         attrib CLOSE_DT length = 8
            format = DATETIME20.
            informat = DATETIME20.
            label = 'CLOSE_DT'; 
         attrib CLOSE_REASON_CD length = $3
            format = $3.
            informat = $3.
            label = 'CLOSE_REASON_CD'; 
         attrib ACCOUNT_TAX_ID length = $32
            format = $32.
            informat = $32.
            label = 'ACCOUNT_TAX_ID'; 
         attrib EXPECTED_LOSS_PCT length = 8
            format = 11.4
            informat = 11.4
            label = 'EXPECTED_LOSS_PCT'; 
         attrib INDIVIDUAL_ORGANIZATION_CD length = $3
            format = $3.
            informat = $3.
            label = 'INDIVIDUAL_ORGANIZATION_CD'; 
         attrib SOURCE_CD length = $5
            format = $5.
            informat = $5.
            label = 'SOURCE_CD'; 
         attrib OPENING_CHANNEL_CD length = $3
            format = $3.
            informat = $3.
            label = 'OPENING_CHANNEL_CD'; 
         attrib PREFERRED_CHANNEL_CD length = $3
            format = $3.
            informat = $3.
            label = 'PREFERRED_CHANNEL_CD'; 
         attrib CURRENCY_CD length = $3
            format = $3.
            informat = $3.
            label = 'CURRENCY_CD'; 
         attrib PRIMARY_PHONE_NO length = $20
            format = $20.
            informat = $20.
            label = 'PRIMARY_PHONE_NO'; 
         attrib PRIMARY_PHONE_TYPE_CD length = $3
            format = $3.
            informat = $3.
            label = 'PRIMARY_PHONE_TYPE_CD'; 
         attrib SECONDARY_PHONE_NO length = $20
            format = $20.
            informat = $20.
            label = 'SECONDARY_PHONE_NO'; 
         attrib SECONDARY_PHONE_TYPE_CD length = $3
            format = $3.
            informat = $3.
            label = 'SECONDARY_PHONE_TYPE_CD'; 
         attrib MAILABLE_FLG length = $1
            format = $1.
            informat = $1.
            label = 'MAILABLE_FLG'; 
         attrib TELEPHONABLE_FLG length = $1
            format = $1.
            informat = $1.
            label = 'TELEPHONABLE_FLG'; 
         attrib EMAIL_FLG length = $1
            format = $1.
            informat = $1.
            label = 'EMAIL_FLG'; 
         attrib SMS_FLG length = $1
            format = $1.
            informat = $1.
            label = 'SMS_FLG'; 
         attrib DO_NOT_CONTACT_FLG length = $1
            format = $1.
            informat = $1.
            label = 'DO_NOT_CONTACT_FLG'; 
         attrib EMPLOYEE_RK length = 8
            format = 11.
            informat = 11.
            label = 'EMPLOYEE_RK'; 
         attrib CURRENCY_BASED_ACCOUNT_FLG length = $1
            format = $1.
            informat = $1.
            label = 'CURRENCY_BASED_ACCOUNT_FLG'; 
         attrib FEE_BASED_FLG length = $1
            format = $1.
            informat = $1.
            label = 'FEE_BASED_FLG'; 
         attrib ANNUAL_FEES_AMT length = 8
            format = 20.5
            informat = 20.5
            label = 'ANNUAL_FEES_AMT'; 
         attrib MONTHLY_FEES_AMT length = 8
            format = 20.5
            informat = 20.5
            label = 'MONTHLY_FEES_AMT'; 
         attrib CAMPAIGN_CD length = $30
            format = $30.
            informat = $30.
            label = 'CAMPAIGN_CD'; 
         attrib COMMUNICATION_CD length = $30
            format = $30.
            informat = $30.
            label = 'COMMUNICATION_CD'; 
         attrib REGISTERED_ONLINE_DT length = 8
            format = DATETIME20.
            informat = DATETIME20.
            label = 'REGISTERED_ONLINE_DT'; 
         attrib FIRST_LOGIN_DT length = 8
            format = DATETIME20.
            informat = DATETIME20.
            label = 'FIRST_LOGIN_DT'; 
         attrib ONLINE_BILL_PAYMENT_FLG length = $1
            format = $1.
            informat = $1.
            label = 'ONLINE_BILL_PAYMENT_FLG'; 
         attrib ID_VERIFICATION_TYPE_CD length = $3
            format = $3.
            informat = $3.
            label = 'ID_VERIFICATION_TYPE_CD'; 
         attrib PREVIOUS_ACCOUNT_ID length = $32
            format = $32.
            informat = $32.
            label = 'PREVIOUS_ACCOUNT_ID'; 
         attrib OPEN_BRANCH_FINANCIAL_UNIT_ID length = $32
            format = $32.
            informat = $32.
            label = 'OPEN_BRANCH_FINANCIAL_UNIT_ID'; 
         attrib PRIM_BRANCH_FINANCIAL_UNIT_ID length = $32
            format = $32.
            informat = $32.
            label = 'PRIM_BRANCH_FINANCIAL_UNIT_ID'; 
         attrib FINANCIAL_APPLICATION_ID length = $32
            format = $32.
            informat = $32.
            label = 'FINANCIAL_APPLICATION_ID'; 
         attrib CREDIT_FACILITY_ID length = $40
            format = $40.
            informat = $40.
            label = 'CREDIT_FACILITY_ID'; 
         attrib FUTURE_MARGIN_INCOME_AMT length = 8
            format = 20.5
            informat = 20.5
            label = 'FUTURE_MARGIN_INCOME_AMT'; 
         attrib IN_DEFAULT_FLG length = $1
            format = $1.
            informat = $1.
            label = 'IN_DEFAULT_FLG'; 
         attrib FINANCIAL_BOOK_ID length = $32
            format = $32.
            informat = $32.
            label = 'FINANCIAL_BOOK_ID'; 
         attrib IRRECOVERABLE_FLG length = $1
            format = $1.
            informat = $1.
            label = 'IRRECOVERABLE_FLG'; 
         attrib OWNED_BY_INTERNAL_ORG_ID length = $32
            format = $32.
            informat = $32.
            label = 'OWNED_BY_INTERNAL_ORG_ID'; 
         attrib PREVIOUS_BANK_EXTERNAL_ORG_ID length = $32
            format = $32.
            informat = $32.
            label = 'PREVIOUS_BANK_EXTERNAL_ORG_ID'; 
         attrib NETTING_SET_ID length = $32
            format = $32.
            informat = $32.
            label = 'NETTING_SET_ID'; 
         attrib REVOLVING_FLG length = $1
            format = $1.
            informat = $1.
            label = 'REVOLVING_FLG'; 
         attrib SOURCE_CHANNEL_CD length = $3
            format = $3.
            informat = $3.
            label = 'SOURCE_CHANNEL_CD'; 
         attrib GRACE_PERIOD_DAYS_CNT length = 8
            format = 7.
            informat = 7.
            label = 'GRACE_PERIOD_DAYS_CNT'; 
         attrib REMARGINING_DAYS_CNT length = 8
            format = 7.
            informat = 7.
            label = 'REMARGINING_DAYS_CNT'; 
         attrib FINANCIAL_CALENDAR_ID length = $32
            format = $32.
            informat = $32.
            label = 'FINANCIAL_CALENDAR_ID'; 
         attrib DAY_BASIS_CD length = $10
            format = $10.
            informat = $10.
            label = 'DAY_BASIS_CD'; 
         attrib PORTFOLIO_ID length = $32
            format = $32.
            informat = $32.
            label = 'PORTFOLIO_ID'; 
         attrib SECURITIZATION_POOL_ID length = $32
            format = $32.
            informat = $32.
            label = 'SECURITIZATION_POOL_ID'; 
         attrib RECEIVABLES_POOL_ID length = $32
            format = $32.
            informat = $32.
            label = 'RECEIVABLES_POOL_ID'; 
         attrib ACCOUNT_USAGE_TYPE_CD length = $3
            format = $3.
            informat = $3.
            label = 'ACCOUNT_USAGE_TYPE_CD'; 
         attrib RISK_ALARM_FLG length = $1
            format = $1.
            informat = $1.
            label = 'RISK_ALARM_FLG'; 
         attrib LOW_PROFITABILITY_FLG length = $1
            format = $1.
            informat = $1.
            label = 'LOW_PROFITABILITY_FLG'; 
         attrib ACCOUNT_LIFECYCLE_STG_CD length = $3
            format = $3.
            informat = $3.
            label = 'ACCOUNT_LIFECYCLE_STG_CD'; 
         attrib ATTRITION_ALARM_FLG length = $1
            format = $1.
            informat = $1.
            label = 'ATTRITION_ALARM_FLG'; 
         attrib BALANCE_FROZEN_FLG length = $1
            format = $1.
            informat = $1.
            label = 'BALANCE_FROZEN_FLG'; 
         attrib BALANCE_FROZEN_DT length = 8
            format = DATETIME20.
            informat = DATETIME20.
            label = 'BALANCE_FROZEN_DT'; 
         attrib ACCOUNT_BLOCK_REASON_CD length = $3
            format = $3.
            informat = $3.
            label = 'ACCOUNT_BLOCK_REASON_CD'; 
         attrib TAXATION_STATE_CD length = $4
            format = $4.
            informat = $4.
            label = 'TAXATION_STATE_CD'; 
         attrib EFFECTIVE_MATURITY_YEAR_NO length = 8
            format = 9.3
            informat = 9.3
            label = 'EFFECTIVE_MATURITY_YEAR_NO'; 
         attrib GL_ACCOUNT_ID length = $32
            format = $32.
            informat = $32.
            label = 'GL_ACCOUNT_ID'; 
         attrib FROM_OTHER_INSTITUTION_FLG length = $1
            format = $1.
            informat = $1.
            label = 'FROM_OTHER_INSTITUTION_FLG'; 
         attrib ACCOUNT_RENEWAL_CNT length = 8
            format = 7.
            informat = 7.
            label = 'ACCOUNT_RENEWAL_CNT'; 
         attrib BALANCE_TRANSFER_DT length = 8
            format = DATETIME20.
            informat = DATETIME20.
            label = 'BALANCE_TRANSFER_DT'; 
         attrib BALANCE_TRANSFER_AMT length = 8
            format = 20.5
            informat = 20.5
            label = 'BALANCE_TRANSFER_AMT'; 
         attrib BALANCE_TRANSFER_CNT length = 8
            format = 7.
            informat = 7.
            label = 'BALANCE_TRANSFER_CNT'; 
         attrib BASE_LONG_TERM_APR_RT length = 8
            format = 11.4
            informat = 11.4
            label = 'BASE_LONG_TERM_APR_RT'; 
         attrib BROKER_FLG length = $1
            format = $1.
            informat = $1.
            label = 'BROKER_FLG'; 
         attrib MULT_RATE_FLG length = $1
            format = $1.
            informat = $1.
            label = 'MULT_RATE_FLG'; 
         attrib AUTO_DEBIT_ACCOUNT_NO length = $32
            format = $32.
            informat = $32.
            label = 'AUTO_DEBIT_ACCOUNT_NO'; 
         attrib WORST_STATUS_LAST_12_MTH_CD length = $3
            format = $3.
            informat = $3.
            label = 'WORST_STATUS_LAST_12_MTH_CD'; 
         attrib WORST_STATUS_LAST_12_MTH_DT length = 8
            format = DATETIME20.
            informat = DATETIME20.
            label = 'WORST_STATUS_LAST_12_MTH_DT'; 
         attrib BALANCE_TRNSF_OTHER_ACCT_CNT length = 8
            format = 7.
            informat = 7.
            label = 'BALANCE_TRNSF_OTHER_ACCT_CNT'; 
         attrib EFFECTIVE_FROM_DTTM length = 8
            format = DATETIME20.
            informat = DATETIME20.
            label = 'EFFECTIVE_FROM_DTTM'; 
         attrib EFFECTIVE_TO_DTTM length = 8
            format = DATETIME20.
            informat = DATETIME20.
            label = 'EFFECTIVE_TO_DTTM'; 
         attrib COUNTERPARTY_ID length = $32
            format = $32.
            informat = $32.
            label = 'COUNTERPARTY_ID'; 
         attrib INSURED_BY_COUNTERPARTY_ID length = $32
            format = $32.
            informat = $32.
            label = 'INSURED_BY_COUNTERPARTY_ID'; 
         attrib STATEMENT_FREQUENCY_CD length = $3
            format = $3.
            informat = $3.
            label = 'STATEMENT_FREQUENCY_CD'; 
         attrib SECURITY_DEPOSIT_AMT length = 8
            format = 20.5
            informat = 20.5
            label = 'SECURITY_DEPOSIT_AMT'; 
         attrib SECURITY_DEPOSIT_REFUND_AMT length = 8
            format = 20.5
            informat = 20.5
            label = 'SECURITY_DEPOSIT_REFUND_AMT'; 
         attrib FIRST_PAYMENT_DT length = 8
            format = DATETIME20.
            informat = DATETIME20.
            label = 'FIRST_PAYMENT_DT'; 
         attrib LAST_PAYMENT_DT length = 8
            format = DATETIME20.
            informat = DATETIME20.
            label = 'LAST_PAYMENT_DT'; 
         attrib FIRST_RESET_DT length = 8
            format = DATETIME20.
            informat = DATETIME20.
            label = 'FIRST_RESET_DT'; 
         attrib LAST_RESET_DT length = 8
            format = DATETIME20.
            informat = DATETIME20.
            label = 'LAST_RESET_DT'; 
         attrib RESETS_PER_ANNUM_NO length = 8
            format = 6.
            informat = 6.
            label = 'RESETS_PER_ANNUM_NO'; 
         attrib PRINCIPAL_PAYMENT_TYPE_CD length = $3
            format = $3.
            informat = $3.
            label = 'PRINCIPAL_PAYMENT_TYPE_CD'; 
         attrib PRINCIPAL_PAYMENT_AMT length = 8
            format = 20.5
            informat = 20.5
            label = 'PRINCIPAL_PAYMENT_AMT'; 
         attrib RATE_POLICY_ID length = $32
            format = $32.
            informat = $32.
            label = 'RATE_POLICY_ID'; 
         attrib SPREAD_RT length = 8
            format = 11.4
            informat = 11.4
            label = 'SPREAD_RT'; 
         attrib DISCOUNT_SPREAD_RT length = 8
            format = 11.4
            informat = 11.4
            label = 'DISCOUNT_SPREAD_RT'; 
         attrib INITIAL_CONTRACT_RT length = 8
            format = 11.4
            informat = 11.4
            label = 'INITIAL_CONTRACT_RT'; 
         attrib FIXED_MONTHLY_PREPAYMENT_RT length = 8
            format = 11.4
            informat = 11.4
            label = 'FIXED_MONTHLY_PREPAYMENT_RT'; 
         attrib CAPITAL_ALLOCATION_ID length = $32
            format = $32.
            informat = $32.
            label = 'CAPITAL_ALLOCATION_ID'; 
         attrib CAPITAL_COST_ID length = $32
            format = $32.
            informat = $32.
            label = 'CAPITAL_COST_ID'; 
         attrib SEGMENT_ID length = $32
            format = $32.
            informat = $32.
            label = 'SEGMENT_ID'; 
         attrib NEAR_BRANCH_FINANCIAL_UNIT_ID length = $32
            format = $32.
            informat = $32.
            label = 'NEAR_BRANCH_FINANCIAL_UNIT_ID'; 
         attrib STATEMENT_OPT_FLG length = $1
            format = $1.
            informat = $1.
            label = 'STATEMENT_OPT_FLG'; 
         attrib VALUE_SCALING_FACTOR_RT length = 8
            format = 11.4
            informat = 11.4
            label = 'VALUE_SCALING_FACTOR_RT'; 
         attrib INTERNAL_REPORTING_CATEGORY_CD length = $3
            format = $3.
            informat = $3.
            label = 'INTERNAL_REPORTING_CATEGORY_CD'; 
         attrib CONVEXITY_ADJUSTMENT_FLG length = $1
            format = $1.
            informat = $1.
            label = 'CONVEXITY_ADJUSTMENT_FLG'; 
         attrib ARREARS_PAYMENT_CD length = $3
            format = $3.
            informat = $3.
            label = 'ARREARS_PAYMENT_CD'; 
         attrib QUANTO_FEATURE_ID length = $32
            format = $32.
            informat = $32.
            label = 'QUANTO_FEATURE_ID'; 
         attrib CASH_INTENSIVE_BUSINESS_FLG length = $1
            format = $1.
            informat = $1.
            label = 'CASH_INTENSIVE_BUSINESS_FLG'; 
         attrib LETTER_OF_CREDIT_ONFILE_FLG length = $1
            format = $1.
            informat = $1.
            label = 'LETTER_OF_CREDIT_ONFILE_FLG'; 
         attrib TRADE_FINANCE_FLG length = $1
            format = $1.
            informat = $1.
            label = 'TRADE_FINANCE_FLG'; 
         attrib ANNUITY_PAYMENT_TYPE_CD length = $3
            format = $3.
            informat = $3.
            label = 'ANNUITY_PAYMENT_TYPE_CD'; 
         attrib INTEREST_PAYMENT_TYPE_CD length = $3
            format = $3.
            informat = $3.
            label = 'INTEREST_PAYMENT_TYPE_CD'; 
         attrib INTEREST_PAYMENT_TIME_FREQ_CD length = $3
            format = $3.
            informat = $3.
            label = 'INTEREST_PAYMENT_TIME_FREQ_CD'; 
         attrib LIQUIDITY_CATEGORY_TYPE_CD length = $3
            format = $3.
            informat = $3.
            label = 'LIQUIDITY_CATEGORY_TYPE_CD'; 
         attrib HOLIDAY_DATE_ROLL_CONV_CD length = $3
            format = $3.
            informat = $3.
            label = 'HOLIDAY_DATE_ROLL_CONV_CD'; 
         attrib WEEKEND_DATE_ROLL_CONV_CD length = $3
            format = $3.
            informat = $3.
            label = 'WEEKEND_DATE_ROLL_CONV_CD'; 
         attrib EXPENSE_ALLOCATION_ID length = $32
            format = $32.
            informat = $32.
            label = 'EXPENSE_ALLOCATION_ID'; 
         attrib FIRST_INTEREST_PAYMENT_DT length = 8
            format = DATETIME20.
            informat = DATETIME20.
            label = 'FIRST_INTEREST_PAYMENT_DT'; 
         attrib LAST_INTEREST_PAYMENT_DT length = 8
            format = DATETIME20.
            informat = DATETIME20.
            label = 'LAST_INTEREST_PAYMENT_DT'; 
         attrib IRB_DUMMY_TYPE_CD length = $3
            format = $3.
            informat = $3.
            label = 'IRB_DUMMY_TYPE_CD'; 
         attrib IRB_SRC_ACCOUNT_ID length = $32
            format = $32.
            informat = $32.
            label = 'IRB_SRC_ACCOUNT_ID'; 
         attrib BRCA length = $3
            format = $3.
            informat = $3.
            label = 'BRCA'; 
         attrib FINANCIAL_INSTRUMENT_TYPE_CD length = $3
            format = $3.
            informat = $3.
            label = 'FINANCIAL_INSTRUMENT_TYPE_CD'; 
         call missing(of _all_);
         stop;
      run;
      
      %rcSet(&syserr); 
      
      /*---- Create the integrity constraints for a table  ----*/ 
      %put %str(NOTE: Creating integrity constraints ...);
      proc datasets library=work_ia nolist;
         modify FINANCIAL_ACCOUNT_SPT_BK;
            ic create not null (ACCOUNT_ID);
            ic create not null (SOURCE_SYSTEM_CD);
            ic create not null (FINANCIAL_ACCOUNT_TYPE_CD);
            ic create not null (ACCOUNT_STATUS_CD);
            ic create not null (CURRENCY_CD);
            ic create not null (PRIM_BRANCH_FINANCIAL_UNIT_ID);
            ic create not null (BRCA);
            ic create Index1 = primary key (ACCOUNT_ID VALID_FROM_DTTM);
      quit;
      
      %rcSet(&syserr); 
      
   %end;  /* if table does not exist  */ 
   
   /*---- Append  ----*/ 
   %put %str(NOTE: Appending data ...);
   
   proc append base = work_ia.FINANCIAL_ACCOUNT_SPT_BK 
      data = &etls_lastTable (&etls_tableOptions)  force ; 
    run; 
   
   %rcSet(&syserr); 
   
   proc datasets lib = work nolist nowarn memtype = (data view);
      delete WIROSOV;
   quit;
   
%mend etls_loader;
%etls_loader;

%let etls_recCheckExist = 0; 
%let etls_recnt = 0; 
%macro etls_recordCheck; 
   %let etls_recCheckExist = %eval(%sysfunc(exist(work_ia.FINANCIAL_ACCOUNT_SPT_BK, DATA)) or 
         %sysfunc(exist(work_ia.FINANCIAL_ACCOUNT_SPT_BK, VIEW))); 
   
   %if (&etls_recCheckExist) %then
   %do;
      %local etls_syntaxcheck; 
      %let etls_syntaxcheck = %sysfunc(getoption(syntaxcheck)); 
      /* Turn off syntaxcheck option to perform following steps  */ 
      options nosyntaxcheck;
      
      proc contents data = work_ia.FINANCIAL_ACCOUNT_SPT_BK out = work.etls_contents(keep = nobs) noprint; 
      run; 
      
      data _null_; 
         set work.etls_contents (obs = 1); 
         call symput("etls_recnt", left(put(nobs,32.))); 
      run;
      
      proc datasets lib = work nolist nowarn memtype = (data view);
         delete etls_contents;
      quit;
      
      /* Reset syntaxcheck option to previous setting  */ 
      options &etls_syntaxcheck; 
   %end;
%mend etls_recordCheck;
%etls_recordCheck;



/**  Step end Table Loader **/

/*==========================================================================* 
 * Step:            Table Loader                          A5Y50FNE.AQ000A2Z * 
 * Transform:       Table Loader (Version 2.1)                              * 
 * Description:                                                             * 
 *                                                                          * 
 * Source Table:    Генерация BKtpOut - work.W1MHBF25     A5Y50FNE.AO0005NL * 
 * Target Table:    CUSTOMER_X_FIN_ACC_SPT_BK -           A5Y50FNE.AE00011V * 
 *                   work_ia.CUSTOMER_X_FIN_ACC_SPT_BK                      * 
 *==========================================================================*/ 

%let transformID = %quote(A5Y50FNE.AQ000A2Z);
%let trans_rc = 0;
%let etls_stepStartTime = %sysfunc(datetime(), datetime20.); 

%let SYSLAST = %nrquote(work.W1MHBF25); 

%let SYS_SQL_IP_SPEEDO = Y;
%let SYS_SQL_MAPPUTTO = sas_put;
%let SYS_SQLREDUCEPUT = DBMS;
%global etls_sql_pushDown;
%let etls_sql_pushDown = -1;
option DBIDIRECTEXEC;

%global etls_tableExist;
%global etls_numIndex;
%global etls_lastTable;
%let etls_tableExist = -1; 
%let etls_numIndex = -1; 
%let etls_lastTable = &SYSLAST; 

/*---- Define load data macro  ----*/ 

/* --------------------------------------------------------------
   Load Technique Selection: Replace - EntireTable
   Constraint and index action selections: 'INIT','ASIS','ASIS','ASIS'
   Additional options selections... 
      Set unmapped to missing on updates: false 
   -------------------------------------------------------------- */
%macro etls_loader;

   %let etls_tableOptions = ;
   
   /*---- Map the columns  ----*/ 
   proc datasets lib = work nolist nowarn memtype = (data view);
      delete WIROSR7;
   quit;
   
   data _null_;
      put "NOTE: The following column(s) do not have a column mapping, so the"
           " value(s) will be set to missing: RELSHP_TO_PRIMARY_CD,"
           " EFFECTIVE_FROM_DTTM, EFFECTIVE_TO_DTTM";
   run;
   
   %put %str(NOTE: Mapping columns ...);
   proc sql;
      create view work.WIROSR7 as
         select
            FCC_COUNTERPARTY_ID as CUSTOMER_ID,
            DRV_ACCOUNT_ID as ACCOUNT_ID,
            VALID_FROM_DTTM,
            VALID_TO_DTTM,
            "" as RELSHP_TO_PRIMARY_CD length = 3
               format = $3.
               informat = $3.,
            ('DDC') as RELATIONSHIP_TO_ACCOUNT_CD length = 3
               format = $3.
               informat = $3.,
            . as EFFECTIVE_FROM_DTTM length = 8
               format = DATETIME20.
               informat = DATETIME20.,
            . as EFFECTIVE_TO_DTTM length = 8
               format = DATETIME20.
               informat = DATETIME20.
      from &etls_lastTable
      ;
   quit;
   
   %let SYSLAST = work.WIROSR7;
   
   %let etls_lastTable = &SYSLAST; 
   %let etls_tableOptions = ; 
   
   /* Determine if the target table exists  */ 
   %let etls_tableExist = %eval(%sysfunc(exist(work_ia.CUSTOMER_X_FIN_ACC_SPT_BK, DATA)) or 
         %sysfunc(exist(work_ia.CUSTOMER_X_FIN_ACC_SPT_BK, VIEW))); 
   
   %if &etls_tableExist %then 
   %do;/* table exists  */ 
      %let etls_hasPreExistingConstraint=0; 
      
      proc datasets lib = work nolist nowarn memtype = (data view);
         delete etls_commands etls_commands_F;
      quit;
      
      %let etls_otherTablesReferToThisTable=0;
      
      %macro etls_CIContents(table=,workTableOut=,inDSOptions=);
         %put NOTE: Building table listing Constraints and Indexes for: &table;
         proc datasets lib=work nolist; delete &workTableOut; quit;
         proc contents data=&table&inDSOptions out2=&workTableOut noprint; run;
         
         data &workTableOut;
            length name $60 type $20 icown idxUnique idxNoMiss $3 recreate $600;
            set &workTableOut;
            type=upcase(type);
            if type eq 'REFERENTIAL' then
            do;
               put "WARNING%QUOTE(:) Target table is referenced by constraints in"
                    " another table: " ref;
               call symput('etls_otherTablesReferToThisTable','1');
               delete;
            end;
            if type='INDEX' and ICOwn eq 'YES' then delete;
         run;
         %rcSet(&syserr); 
         
      %mend etls_CIContents;
      
      %etls_CIContents(table=work_ia.CUSTOMER_X_FIN_ACC_SPT_BK, workTableOut=etls_commands, inDSOptions=);
      
      %if &etls_otherTablesReferToThisTable %then 
         %put WARNING%QUOTE(:) Replacing entire table will fail. Consider an alternate load technique or revising constraints.; 
      %else 
      %do; /* okay - remove foreign keys  */ 
      
         data etls_commands_F; 
            set etls_commands; 
            if upcase(type)="FOREIGN KEY" then 
            do; 
               command='ic delete '||trim(name)||';';
               output etls_commands_F; 
            end; 
         run; 
         
         %put %str(NOTE: Removing foreign keys before dropping table...);
         data _null_;
            set etls_commands_F;
            %rcSet(&syserr); 
            
      %end; /* okay - remove foreign keys  */ 
      
      proc datasets lib = work nolist nowarn memtype = (data view);
         delete etls_commands etls_commands_F;
      quit;
      
      /*---- Drop a table  ----*/ 
      %put %str(NOTE: Dropping table ...);
      proc datasets lib = work_ia nolist nowarn memtype = (data view);
         delete CUSTOMER_X_FIN_ACC_SPT_BK;
      quit;
      
      %rcSet(&syserr); 
      
      %let etls_tableExist = 0;
      
   %end; /* table exists  */ 
   
   /*---- Create a new table  ----*/ 
   %if (&etls_tableExist eq 0) %then 
   %do;  /* if table does not exist  */ 
   
      %put %str(NOTE: Creating table ...);
      
      data work_ia.CUSTOMER_X_FIN_ACC_SPT_BK;
         attrib CUSTOMER_ID length = $32
            format = $32.
            informat = $32.
            label = 'CUSTOMER_ID'; 
         attrib ACCOUNT_ID length = $32
            format = $32.
            informat = $32.
            label = 'ACCOUNT_ID'; 
         attrib VALID_FROM_DTTM length = 8
            format = DATETIME20.
            informat = DATETIME20.
            label = 'VALID_FROM_DTTM'; 
         attrib VALID_TO_DTTM length = 8
            format = DATETIME20.
            informat = DATETIME20.
            label = 'VALID_TO_DTTM'; 
         attrib RELSHP_TO_PRIMARY_CD length = $3
            format = $3.
            informat = $3.
            label = 'RELSHP_TO_PRIMARY_CD'; 
         attrib RELATIONSHIP_TO_ACCOUNT_CD length = $3
            format = $3.
            informat = $3.
            label = 'RELATIONSHIP_TO_ACCOUNT_CD'; 
         attrib EFFECTIVE_FROM_DTTM length = 8
            format = DATETIME20.
            informat = DATETIME20.
            label = 'EFFECTIVE_FROM_DTTM'; 
         attrib EFFECTIVE_TO_DTTM length = 8
            format = DATETIME20.
            informat = DATETIME20.
            label = 'EFFECTIVE_TO_DTTM'; 
         call missing(of _all_);
         stop;
      run;
      
      %rcSet(&syserr); 
      
      /*---- Create the integrity constraints for a table  ----*/ 
      %put %str(NOTE: Creating integrity constraints ...);
      proc datasets library=work_ia nolist;
         modify CUSTOMER_X_FIN_ACC_SPT_BK;
            ic create not null (CUSTOMER_ID);
            ic create not null (ACCOUNT_ID);
            ic create not null (VALID_FROM_DTTM);
            ic create not null (VALID_TO_DTTM);
            ic create not null (RELATIONSHIP_TO_ACCOUNT_CD);
            ic create Index1 = primary key (CUSTOMER_ID ACCOUNT_ID VALID_FROM_DTTM 
                           RELATIONSHIP_TO_ACCOUNT_CD);
      quit;
      
      %rcSet(&syserr); 
      
   %end;  /* if table does not exist  */ 
   
   /*---- Append  ----*/ 
   %put %str(NOTE: Appending data ...);
   
   proc append base = work_ia.CUSTOMER_X_FIN_ACC_SPT_BK 
      data = &etls_lastTable (&etls_tableOptions)  force ; 
    run; 
   
   %rcSet(&syserr); 
   
   proc datasets lib = work nolist nowarn memtype = (data view);
      delete WIROSR7;
   quit;
   
%mend etls_loader;
%etls_loader;

%let etls_recCheckExist = 0; 
%let etls_recnt = 0; 
%macro etls_recordCheck; 
   %let etls_recCheckExist = %eval(%sysfunc(exist(work_ia.CUSTOMER_X_FIN_ACC_SPT_BK, DATA)) or 
         %sysfunc(exist(work_ia.CUSTOMER_X_FIN_ACC_SPT_BK, VIEW))); 
   
   %if (&etls_recCheckExist) %then
   %do;
      %local etls_syntaxcheck; 
      %let etls_syntaxcheck = %sysfunc(getoption(syntaxcheck)); 
      /* Turn off syntaxcheck option to perform following steps  */ 
      options nosyntaxcheck;
      
      proc contents data = work_ia.CUSTOMER_X_FIN_ACC_SPT_BK out = work.etls_contents(keep = nobs) noprint; 
      run; 
      
      data _null_; 
         set work.etls_contents (obs = 1); 
         call symput("etls_recnt", left(put(nobs,32.))); 
      run;
      
      proc datasets lib = work nolist nowarn memtype = (data view);
         delete etls_contents;
      quit;
      
      /* Reset syntaxcheck option to previous setting  */ 
      options &etls_syntaxcheck; 
   %end;
%mend etls_recordCheck;
%etls_recordCheck;



/**  Step end Table Loader **/

/*==========================================================================* 
 * Step:            Table Loader                          A5Y50FNE.AQ000A30 * 
 * Transform:       Table Loader (Version 2.1)                              * 
 * Description:                                                             * 
 *                                                                          * 
 * Source Table:    Генерация BKtpOut - work.W1MHBF25     A5Y50FNE.AO0005NL * 
 * Target Table:    FIN_INSTR_ASSOC_SPT_BK -              A5Y50FNE.AE000129 * 
 *                   work_ia.FIN_INSTR_ASSOC_SPT_BK                         * 
 *==========================================================================*/ 

%let transformID = %quote(A5Y50FNE.AQ000A30);
%let trans_rc = 0;
%let etls_stepStartTime = %sysfunc(datetime(), datetime20.); 

%let SYSLAST = %nrquote(work.W1MHBF25); 

%let SYS_SQL_IP_SPEEDO = Y;
%let SYS_SQL_MAPPUTTO = sas_put;
%let SYS_SQLREDUCEPUT = DBMS;
%global etls_sql_pushDown;
%let etls_sql_pushDown = -1;
option DBIDIRECTEXEC;

%global etls_tableExist;
%global etls_numIndex;
%global etls_lastTable;
%let etls_tableExist = -1; 
%let etls_numIndex = -1; 
%let etls_lastTable = &SYSLAST; 

/*---- Define load data macro  ----*/ 

/* --------------------------------------------------------------
   Load Technique Selection: Replace - EntireTable
   Constraint and index action selections: 'INIT','ASIS','ASIS','ASIS'
   Additional options selections... 
      Set unmapped to missing on updates: false 
   -------------------------------------------------------------- */
%macro etls_loader;

   %let etls_tableOptions = ;
   
   /*---- Map the columns  ----*/ 
   proc datasets lib = work nolist nowarn memtype = (data view);
      delete WIROSRX;
   quit;
   
   %put %str(NOTE: Mapping columns ...);
   proc sql;
      create view work.WIROSRX as
         select
            FINANCIAL_INSTRUMENT_ID as FINANCIAL_INSTRUMENT_ASSOC_ID,
            VALID_FROM_DTTM,
            VALID_TO_DTTM,
            ('DRV') as FINANCIAL_INSTR_ASSOC_TYPE_CD length = 3
               format = $3.
               informat = $3.,
            FINANCIAL_INSTRUMENT_ID,
            DRV_ACCOUNT_ID as REFERENCE_ACCOUNT_ID
      from &etls_lastTable
      ;
   quit;
   
   %let SYSLAST = work.WIROSRX;
   
   %let etls_lastTable = &SYSLAST; 
   %let etls_tableOptions = ; 
   
   /* Determine if the target table exists  */ 
   %let etls_tableExist = %eval(%sysfunc(exist(work_ia.FIN_INSTR_ASSOC_SPT_BK, DATA)) or 
         %sysfunc(exist(work_ia.FIN_INSTR_ASSOC_SPT_BK, VIEW))); 
   
   %if &etls_tableExist %then 
   %do;/* table exists  */ 
      %let etls_hasPreExistingConstraint=0; 
      
      proc datasets lib = work nolist nowarn memtype = (data view);
         delete etls_commands etls_commands_F;
      quit;
      
      %let etls_otherTablesReferToThisTable=0;
      
      %macro etls_CIContents(table=,workTableOut=,inDSOptions=);
         %put NOTE: Building table listing Constraints and Indexes for: &table;
         proc datasets lib=work nolist; delete &workTableOut; quit;
         proc contents data=&table&inDSOptions out2=&workTableOut noprint; run;
         
         data &workTableOut;
            length name $60 type $20 icown idxUnique idxNoMiss $3 recreate $600;
            set &workTableOut;
            type=upcase(type);
            if type eq 'REFERENTIAL' then
            do;
               put "WARNING%QUOTE(:) Target table is referenced by constraints in"
                    " another table: " ref;
               call symput('etls_otherTablesReferToThisTable','1');
               delete;
            end;
            if type='INDEX' and ICOwn eq 'YES' then delete;
         run;
         %rcSet(&syserr); 
         
      %mend etls_CIContents;
      
      %etls_CIContents(table=work_ia.FIN_INSTR_ASSOC_SPT_BK, workTableOut=etls_commands, inDSOptions=);
      
      %if &etls_otherTablesReferToThisTable %then 
         %put WARNING%QUOTE(:) Replacing entire table will fail. Consider an alternate load technique or revising constraints.; 
      %else 
      %do; /* okay - remove foreign keys  */ 
      
         data etls_commands_F; 
            set etls_commands; 
            if upcase(type)="FOREIGN KEY" then 
            do; 
               command='ic delete '||trim(name)||';';
               output etls_commands_F; 
            end; 
         run; 
         
         %put %str(NOTE: Removing foreign keys before dropping table...);
         data _null_;
            set etls_commands_F;
            %rcSet(&syserr); 
            
      %end; /* okay - remove foreign keys  */ 
      
      proc datasets lib = work nolist nowarn memtype = (data view);
         delete etls_commands etls_commands_F;
      quit;
      
      /*---- Drop a table  ----*/ 
      %put %str(NOTE: Dropping table ...);
      proc datasets lib = work_ia nolist nowarn memtype = (data view);
         delete FIN_INSTR_ASSOC_SPT_BK;
      quit;
      
      %rcSet(&syserr); 
      
      %let etls_tableExist = 0;
      
   %end; /* table exists  */ 
   
   /*---- Create a new table  ----*/ 
   %if (&etls_tableExist eq 0) %then 
   %do;  /* if table does not exist  */ 
   
      %put %str(NOTE: Creating table ...);
      
      data work_ia.FIN_INSTR_ASSOC_SPT_BK;
         attrib FINANCIAL_INSTRUMENT_ASSOC_ID length = $32
            format = $32.
            informat = $32.
            label = 'FINANCIAL_INSTRUMENT_ASSOC_ID'; 
         attrib VALID_FROM_DTTM length = 8
            format = DATETIME20.
            informat = DATETIME20.
            label = 'VALID_FROM_DTTM'; 
         attrib VALID_TO_DTTM length = 8
            format = DATETIME20.
            informat = DATETIME20.
            label = 'VALID_TO_DTTM'; 
         attrib FINANCIAL_INSTR_ASSOC_TYPE_CD length = $3
            format = $3.
            informat = $3.
            label = 'FINANCIAL_INSTR_ASSOC_TYPE_CD'; 
         attrib FINANCIAL_INSTRUMENT_ID length = $32
            format = $32.
            informat = $32.
            label = 'FINANCIAL_INSTRUMENT_ID'; 
         attrib REFERENCE_ACCOUNT_ID length = $32
            format = $32.
            informat = $32.
            label = 'FINANCIAL_ACCOUNT_ID'; 
         call missing(of _all_);
         stop;
      run;
      
      %rcSet(&syserr); 
      
      /*---- Create the integrity constraints for a table  ----*/ 
      %put %str(NOTE: Creating integrity constraints ...);
      proc datasets library=work_ia nolist;
         modify FIN_INSTR_ASSOC_SPT_BK;
            ic create not null (FINANCIAL_INSTRUMENT_ASSOC_ID);
            ic create not null (VALID_FROM_DTTM);
            ic create not null (VALID_TO_DTTM);
            ic create not null (FINANCIAL_INSTR_ASSOC_TYPE_CD);
            ic create not null (FINANCIAL_INSTRUMENT_ID);
            ic create not null (REFERENCE_ACCOUNT_ID);
            ic create pk_index = primary key (FINANCIAL_INSTRUMENT_ASSOC_ID VALID_FROM_DTTM);
      quit;
      
      %rcSet(&syserr); 
      
   %end;  /* if table does not exist  */ 
   
   /*---- Append  ----*/ 
   %put %str(NOTE: Appending data ...);
   
   proc append base = work_ia.FIN_INSTR_ASSOC_SPT_BK 
      data = &etls_lastTable (&etls_tableOptions)  force ; 
    run; 
   
   %rcSet(&syserr); 
   
   proc datasets lib = work nolist nowarn memtype = (data view);
      delete WIROSRX;
   quit;
   
%mend etls_loader;
%etls_loader;

%let etls_recCheckExist = 0; 
%let etls_recnt = 0; 
%macro etls_recordCheck; 
   %let etls_recCheckExist = %eval(%sysfunc(exist(work_ia.FIN_INSTR_ASSOC_SPT_BK, DATA)) or 
         %sysfunc(exist(work_ia.FIN_INSTR_ASSOC_SPT_BK, VIEW))); 
   
   %if (&etls_recCheckExist) %then
   %do;
      %local etls_syntaxcheck; 
      %let etls_syntaxcheck = %sysfunc(getoption(syntaxcheck)); 
      /* Turn off syntaxcheck option to perform following steps  */ 
      options nosyntaxcheck;
      
      proc contents data = work_ia.FIN_INSTR_ASSOC_SPT_BK out = work.etls_contents(keep = nobs) noprint; 
      run; 
      
      data _null_; 
         set work.etls_contents (obs = 1); 
         call symput("etls_recnt", left(put(nobs,32.))); 
      run;
      
      proc datasets lib = work nolist nowarn memtype = (data view);
         delete etls_contents;
      quit;
      
      /* Reset syntaxcheck option to previous setting  */ 
      options &etls_syntaxcheck; 
   %end;
%mend etls_recordCheck;
%etls_recordCheck;



/**  Step end Table Loader **/

/*==========================================================================* 
 * Step:            Завершить модуль                      A5Y50FNE.AQ000A31 * 
 * Transform:       Завершить модуль                                        * 
 * Description:                                                             * 
 *==========================================================================*/ 

%let transformID = %quote(A5Y50FNE.AQ000A31);
%let trans_rc = 0;
%let etls_stepStartTime = %sysfunc(datetime(), datetime20.); 

%let _INPUT_count = 0; 
%let _OUTPUT_count = 0; 


/*****************************************************************
* ВЕРСИЯ:
*   $Id: transform_job_finish.sas 247 2012-04-03 07:31:10Z nesterenok $
*
******************************************************************
* НАЗНАЧЕНИЕ:
*   Регистрирует конец модуля ETL.
*
* ПАРАМЕТРЫ:
*   нет
*
******************************************************************/

%macro transform_job_finish;

   /* Продолжаем модуль */
   %job_continue_reg(mpJobType=JOB, mpJobName=&ETLS_JobName., mpPostEvent=N);

   /* Завершаем модуль */
   %job_finish_reg(mpJobType=JOB);

%mend transform_job_finish;

%transform_job_finish;


%rcSet(&syserr); 
%rcSet(&sysrc); 
%rcSet(&sqlrc); 



/**  Step end Завершить модуль **/

%let etls_endTime = %sysfunc(datetime(),datetime.);



/**  Job end 042_946_Structure_FINANCIAL_ACCOUNT_SPT_BK **/

/* Reset jobid and name */
%let jobID = %quote(A569C89V.AQ0000CK);
%let etls_jobName = %nrquote(090_364_Stream_Midas_Fin_Account_BK);

/**************************************************************************** 
 * Job:             042_944_Structure_FINANCIAL_ACCOUNT_  A5Y50FNE.AN0000VM * 
 *                  OPT_BK                                                  * 
 * Description:                                                             * 
 *                                                                          * 
 * Metadata Server: bravo14                                                 * 
 * Port:            8561                                                    * 
 * Location:        /DWH_DWHDDS_IA/Jobs/042_Structure/Financial_Account     * 
 *                                                                          * 
 * Server:          SASApp                                A5C46MZY.AQ000002 * 
 *                                                                          * 
 * Source Table:    FINANCIAL_INSTRUMENT_OPT_BK -         A5Y50FNE.AE000140 * 
 *                   work_ia.FINANCIAL_INSTRUMENT_OPT_BK                    * 
 * Target Tables:   FINANCIAL_ACCOUNT_OPT_BK -            A5Y50FNE.AE00012Q * 
 *                   work_ia.FINANCIAL_ACCOUNT_OPT_BK                       * 
 *                  FIN_INSTR_ASSOC_OPT_BK -              A5Y50FNE.AE000128 * 
 *                   work_ia.FIN_INSTR_ASSOC_OPT_BK                         * 
 *                  CUSTOMER_X_FIN_ACC_OPT_BK -           A5Y50FNE.AE00011U * 
 *                   work_ia.CUSTOMER_X_FIN_ACC_OPT_BK                      * 
 *                                                                          * 
 * Generated on:    16 Июль 2013 г. 17:14:47 MSD                            * 
 * Generated by:    sasdwh                                                  * 
 * Version:         SAS Data Integration Studio 4.5                         * 
 ****************************************************************************/ 

/* General macro variables  */ 
%let jobID = %quote(A5Y50FNE.AN0000VM);
%let etls_jobName = %nrquote(042_944_Structure_FINANCIAL_ACCOUNT_OPT_BK);
%let etls_userID = %nrquote(sasdwh);


/* Create metadata macro variables */
%let IOMServer      = %nrquote(SASApp);
%let metaPort       = %nrquote(8561);
%let metaServer     = %nrquote(bravo14);

/* Set metadata options */
options metaport       = &metaPort 
        metaserver     = "&metaServer"; 

/* Setup for capturing job status  */ 
%let etls_startTime = %sysfunc(datetime(),datetime.);
%let etls_recordsBefore = 0;
%let etls_recordsAfter = 0;
%let etls_lib = 0;
%let etls_table = 0;

%global etls_debug; 
%macro etls_setDebug; 
   %if %str(&etls_debug) ne 0 %then 
      OPTIONS MPRINT%str(;); 
%mend; 
%etls_setDebug; 

/*==========================================================================* 
 * Step:            Начать модуль                         A5Y50FNE.AQ00088U * 
 * Transform:       Начать модуль                                           * 
 * Description:                                                             * 
 *==========================================================================*/ 

%let transformID = %quote(A5Y50FNE.AQ00088U);
%let trans_rc = 0;
%let etls_stepStartTime = %sysfunc(datetime(), datetime20.); 

%let _INPUT_count = 0; 
%let _OUTPUT_count = 0; 


/*****************************************************************
* ВЕРСИЯ:
*   $Id: transform_job_start.sas 1747 2012-08-01 11:26:13Z nesterenok $
*
******************************************************************
* НАЗНАЧЕНИЕ:
*   Регистрирует начало модуля ETL.
*
* ПАРАМЕТРЫ:
*   нет
*
******************************************************************/

%macro transform_job_start;

   /* Продолжаем поток (или создаем новый) */
   %local lmvStreamName;
   %if %sysfunc(sysexist(LSB_JOBNAME)) %then
      %let lmvStreamName = %scan(%sysfunc(sysget(LSB_JOBNAME)), 3, :);
   %else
      %let lmvStreamName = ;

   %job_continue_reg(mpJobType=STREAM, mpJobName=&lmvStreamName, mpPostEvent=N, mpForcedStart=Y);

   /* Для DI, начинаем поток заново, если старый был начат не сегодня */
   %if %length(&lmvStreamName) eq 0 and &STREAM_START_DT ne %sysfunc(today()) %then %do;
      %job_start_reg(mpJobType=STREAM, mpParentJobId=, mpJobName=&lmvStreamName.);
   %end;

   /* Начинаем модуль */
   %job_start_reg(mpJobType=JOB, mpParentJobId=&STREAM_ID, mpJobName=&ETLS_JobName.);

%mend transform_job_start;

%transform_job_start;


%rcSet(&syserr); 
%rcSet(&sysrc); 
%rcSet(&sqlrc); 



/**  Step end Начать модуль **/

/*==========================================================================* 
 * Step:            Отбор первых и актуальных записей с   A5Y50FNE.AQ00088V * 
 *                   учетом ног                                             * 
 * Transform:       Splitter                                                * 
 * Description:                                                             * 
 *                                                                          * 
 * Source Table:    FINANCIAL_INSTRUMENT_OPT_BK -         A5Y50FNE.AE000140 * 
 *                   work_ia.FINANCIAL_INSTRUMENT_OPT_BK                    * 
 * Target Tables:   first recs - work.W1B87YYR            A5Y50FNE.AO0004NW * 
 *                  actual recs - work.W1BAZY4C           A5Y50FNE.AO0004NX * 
 *==========================================================================*/ 

%let transformID = %quote(A5Y50FNE.AQ00088V);
%let trans_rc = 0;
%let etls_stepStartTime = %sysfunc(datetime(), datetime20.); 

%let etls_recCheckExist = 0; 
%let etls_recnt = 0; 
%macro etls_recordCheck; 
   %let etls_recCheckExist = %eval(%sysfunc(exist(work_ia.FINANCIAL_INSTRUMENT_OPT_BK, DATA)) or 
         %sysfunc(exist(work_ia.FINANCIAL_INSTRUMENT_OPT_BK, VIEW))); 
   
   %if (&etls_recCheckExist) %then
   %do;
      %local etls_syntaxcheck; 
      %let etls_syntaxcheck = %sysfunc(getoption(syntaxcheck)); 
      /* Turn off syntaxcheck option to perform following steps  */ 
      options nosyntaxcheck;
      
      proc contents data = work_ia.FINANCIAL_INSTRUMENT_OPT_BK out = work.etls_contents(keep = nobs) noprint; 
      run; 
      
      data _null_; 
         set work.etls_contents (obs = 1); 
         call symput("etls_recnt", left(put(nobs,32.))); 
      run;
      
      proc datasets lib = work nolist nowarn memtype = (data view);
         delete etls_contents;
      quit;
      
      /* Reset syntaxcheck option to previous setting  */ 
      options &etls_syntaxcheck; 
   %end;
%mend etls_recordCheck;
%etls_recordCheck;

%let SYSLAST = %nrquote(work_ia.FINANCIAL_INSTRUMENT_OPT_BK); 

proc datasets lib=work nolist nowarn memtype = (data view);
   delete W1B87YYR;
   delete W1BAZY4C;
quit;

data 
     work.W1B87YYR
     work.W1BAZY4C;
   set &SYSLAST;
   if FSRT=1 then 
      output work.W1B87YYR;
   if VALID_TO_DTTM = &ETL_SCD_FUTURE_DTTM then 
      output work.W1BAZY4C;
run;

%rcSet(&syserr); 

/*---- Map the columns  ----*/ 
proc datasets lib = work nolist nowarn memtype = (data view);
   delete etls_mapped;
quit;

%put %str(NOTE: Mapping columns ...);
proc sql;
   create table work.etls_mapped as
      select
         VALID_FROM_DTTM,
         FINANCIAL_INSTRUMENT_ID,
         IRB_SRC_ACCOUNT_ID,
         DDAT,
         SETTLEMENT_TYPE_CD
   from work.W1B87YYR
   ;
quit;

%let SYSLAST = work.etls_mapped;

data work.W1B87YYR;
  set work.etls_mapped;
run;

proc datasets lib = work nolist nowarn memtype = (data view);
   delete etls_mapped;
quit;

%rcSet(&syscc); 

/*---- Map the columns  ----*/ 
proc datasets lib = work nolist nowarn memtype = (data view);
   delete etls_mapped;
quit;

%put %str(NOTE: Mapping columns ...);
proc sql;
   create table work.etls_mapped as
      select
         FINANCIAL_INSTRUMENT_ID,
         FIRST_PAYMENT_DT,
         FINANCIAL_INSTRUMENT_TYPE_CD,
         CURRENCY_CD,
         IRB_INSTR_STATUS_CD,
         IRB_SRC_ACCOUNT_ID,
         KONDOR_A   
            format = 11.
            informat = 11.,
         ARM302P_ID,
         FXMM_ID,
         CNUM,
         BRCA,
         SETTLEMENT_TYPE_CD,
         LCD,
         VDAT,
         DDAT as DDAT_ACTUAL
   from work.W1BAZY4C
   ;
quit;

%let SYSLAST = work.etls_mapped;

data work.W1BAZY4C;
  set work.etls_mapped;
run;

proc datasets lib = work nolist nowarn memtype = (data view);
   delete etls_mapped;
quit;

%rcSet(&syscc); 



/**  Step end Отбор первых и актуальных записей с учетом ног **/

/*==========================================================================* 
 * Step:            Собираем данные по сделке             A5Y50FNE.AQ00088W * 
 * Transform:       Join                                                    * 
 * Description:                                                             * 
 *                                                                          * 
 * Source Tables:   actual recs - work.W1BAZY4C           A5Y50FNE.AO0004NX * 
 *                  first recs - work.W1B87YYR            A5Y50FNE.AO0004NW * 
 * Target Table:    SQL Join - work.W1B4DNDN              A5Y50FNE.AO0004NY * 
 *==========================================================================*/ 

%let transformID = %quote(A5Y50FNE.AQ00088W);
%let trans_rc = 0;
%let etls_stepStartTime = %sysfunc(datetime(), datetime20.); 

%let etls_recCheckExist = 0; 
%let etls_recnt = 0; 
%macro etls_recordCheck; 
   %let etls_recCheckExist = %eval(%sysfunc(exist(work.W1BAZY4C, DATA)) or 
         %sysfunc(exist(work.W1BAZY4C, VIEW))); 
   
   %if (&etls_recCheckExist) %then
   %do;
      %local etls_syntaxcheck; 
      %let etls_syntaxcheck = %sysfunc(getoption(syntaxcheck)); 
      /* Turn off syntaxcheck option to perform following steps  */ 
      options nosyntaxcheck;
      
      proc contents data = work.W1BAZY4C out = work.etls_contents(keep = nobs) noprint; 
      run; 
      
      data _null_; 
         set work.etls_contents (obs = 1); 
         call symput("etls_recnt", left(put(nobs,32.))); 
      run;
      
      proc datasets lib = work nolist nowarn memtype = (data view);
         delete etls_contents;
      quit;
      
      /* Reset syntaxcheck option to previous setting  */ 
      options &etls_syntaxcheck; 
   %end;
%mend etls_recordCheck;
%etls_recordCheck;

%let SYS_SQL_IP_SPEEDO = Y;
%let SYS_SQL_MAPPUTTO = sas_put;
%let SYS_SQLREDUCEPUT = DBMS;
%global etls_sql_pushDown;
%let etls_sql_pushDown = -1;
option DBIDIRECTEXEC;

proc datasets lib = work nolist nowarn memtype = (data view);
   delete W1B4DNDN;
quit;

proc sql;
   create view work.W1B4DNDN as
   select
      W1B87YYR.VALID_FROM_DTTM length = 8   
         format = DATETIME20.
         informat = DATETIME20.
         label = 'VALID_FROM_DTTM',
      W1B87YYR.IRB_SRC_ACCOUNT_ID length = 32   
         format = $32.
         informat = $32.
         label = 'IRB_SRC_ACCOUNT_ID',
      W1BAZY4C.DDAT_ACTUAL as DDAT length = 8   
         format = DATETIME20.
         informat = DATETIME20.
         label = 'DDAT',
      W1BAZY4C.FIRST_PAYMENT_DT length = 8   
         format = DATETIME20.
         informat = DATETIME20.
         label = 'FIRST_PAYMENT_DT',
      W1BAZY4C.FINANCIAL_INSTRUMENT_TYPE_CD length = 3   
         format = $3.
         informat = $3.
         label = 'FINANCIAL_INSTRUMENT_TYPE_CD',
      W1BAZY4C.CURRENCY_CD length = 3   
         format = $3.
         informat = $3.
         label = 'CURRENCY_CD',
      W1BAZY4C.IRB_INSTR_STATUS_CD length = 3   
         format = $3.
         informat = $3.
         label = 'IRB_INSTR_STATUS_CD',
      W1BAZY4C.KONDOR_A length = 8   
         format = 11.
         informat = 11.
         label = 'KONDOR_A',
      W1BAZY4C.ARM302P_ID length = 8   
         format = 11.
         informat = 11.
         label = 'ARM302P_ID',
      W1BAZY4C.FXMM_ID length = 8   
         format = 11.
         informat = 11.
         label = 'FXMM_ID',
      W1BAZY4C.BRCA length = 3   
         format = $3.
         informat = $3.
         label = 'BRCA',
      W1BAZY4C.CNUM length = 8   
         format = 7.
         informat = 7.
         label = 'CNUM',
      W1BAZY4C.SETTLEMENT_TYPE_CD length = 3   
         format = $3.
         informat = $3.
         label = 'SETTLEMENT_TYPE_CD',
      W1BAZY4C.LCD length = 8   
         format = 6.
         informat = 6.
         label = 'LCD',
      W1BAZY4C.VDAT length = 8   
         format = DATETIME20.
         informat = DATETIME20.
         label = 'VDAT'
   from
      work.W1B87YYR, 
      work.W1BAZY4C
   where
      W1B87YYR.IRB_SRC_ACCOUNT_ID = W1BAZY4C.IRB_SRC_ACCOUNT_ID
   ;
quit;

%global etls_sql_pushDown;
%let etls_sql_pushDown = &sys_sql_ip_all;

%rcSet(&sqlrc); 



/**  Step end Собираем данные по сделке **/

/*==========================================================================* 
 * Step:            Extract                               A5Y50FNE.AQ00088X * 
 * Transform:       Extract                                                 * 
 * Description:                                                             * 
 *                                                                          * 
 * Source Table:    SQL Join - work.W1B4DNDN              A5Y50FNE.AO0004NY * 
 * Target Table:    Extract - work.W1MOEVV1               A5Y50FNE.AO0004NZ * 
 *==========================================================================*/ 

%let transformID = %quote(A5Y50FNE.AQ00088X);
%let trans_rc = 0;
%let etls_stepStartTime = %sysfunc(datetime(), datetime20.); 

%let etls_recnt = -1;
%let SYSLAST = %nrquote(work.W1B4DNDN); 

%let SYS_SQL_IP_SPEEDO = Y;
%let SYS_SQL_MAPPUTTO = sas_put;
%let SYS_SQLREDUCEPUT = DBMS;
%global etls_sql_pushDown;
%let etls_sql_pushDown = -1;
option DBIDIRECTEXEC;

/*---- Map the columns  ----*/ 
proc datasets lib = work nolist nowarn memtype = (data view);
   delete W1MOEVV1;
quit;

data _null_;
   put "NOTE: The following column(s) do not have a column mapping, so the"
        " value(s) will be set to missing: DAY_BASIS_CD,"
        " INTEREST_PAYMENT_TYPE_CD";
run;

%put %str(NOTE: Mapping columns ...);
proc sql;
   create view work.W1MOEVV1 as
      select
         VALID_FROM_DTTM,
         (&ETL_SCD_FUTURE_DTTM) as VALID_TO_DTTM length = 8
            format = DATETIME20.
            informat = DATETIME20.
            label = 'VALID_TO_DTTM',
         IRB_SRC_ACCOUNT_ID,
         ('MID') as SOURCE_SYSTEM_CD length = 3
            format = $3.
            informat = $3.
            label = 'SOURCE_SYSTEM_CD',
         (ifc(missing(KONDOR_A), '', cats(KONDOR_A))) as ACCOUNT_REGISTRATION_NM length = 100
            format = $100.
            informat = $100.
            label = 'ACCOUNT_REGISTRATION_NM',
         (ifc(missing(ARM302P_ID), '', cats(FXMM_ID, '_', ARM302P_ID))) as ALTERNATE_ACCOUNT_NM length = 40
            format = $40.
            informat = $40.
            label = 'ALTERNATE_ACCOUNT_NM',
         ('DRV') as FINANCIAL_ACCOUNT_TYPE_CD length = 3
            format = $3.
            informat = $3.
            label = 'FINANCIAL_ACCOUNT_TYPE_CD',
         BRCA,
         IRB_INSTR_STATUS_CD as ACCOUNT_STATUS_CD   
            label = 'ACCOUNT_STATUS_CD',
         DDAT as OPEN_DT   
            label = 'OPEN_DT',
         FIRST_PAYMENT_DT as CLOSE_DT   
            label = 'corrected later',
         CURRENCY_CD,
         "" as DAY_BASIS_CD length = 10
            format = $10.
            informat = $10.
            label = 'DAY_BASIS_CD',
         "" as INTEREST_PAYMENT_TYPE_CD length = 3
            format = $3.
            informat = $3.
            label = 'INTEREST_PAYMENT_TYPE_CD',
         FINANCIAL_INSTRUMENT_TYPE_CD,
         (put(CNUM , z8.)) as CUSTOMER_NO length = 8,
         SETTLEMENT_TYPE_CD,
         LCD,
         VDAT
   from &SYSLAST
   ;
quit;

%let SYSLAST = work.W1MOEVV1;

%global etls_sql_pushDown;
%let etls_sql_pushDown = &sys_sql_ip_all;

%rcSet(&sqlrc); 



/**  Step end Extract **/

/*==========================================================================* 
 * Step:            Генерация BK                          A5Y50FNE.AQ00088Y * 
 * Transform:       Генерация BK                                            * 
 * Description:                                                             * 
 *                                                                          * 
 * Source Table:    Extract - work.W1MOEVV1               A5Y50FNE.AO0004NZ * 
 * Target Table:    Генерация BKtpOut - work.W1MHBF25     A5Y50FNE.AO0004O0 * 
 *==========================================================================*/ 

%let transformID = %quote(A5Y50FNE.AQ00088Y);
%let trans_rc = 0;
%let etls_stepStartTime = %sysfunc(datetime(), datetime20.); 

%let etls_recnt = -1;
%let SYSLAST = %nrquote(work.W1MOEVV1); 

%let _INPUT_count = 1; 
%let _INPUT = work.W1MOEVV1;
%let _INPUT_connect = ;
%let _INPUT_engine = ;
%let _INPUT_memtype = VIEW;
%let _INPUT_options = %nrquote();
%let _INPUT_alter = %nrquote();
%let _INPUT_path = %nrquote(/Extract_A5Y50FNE.AO0004NZ%(WorkTable%));
%let _INPUT_type = 1;
%let _INPUT_label = %nrquote();

%let tpIn = work.W1MOEVV1;
%let tpIn_connect = ;
%let tpIn_engine = ;
%let tpIn_memtype = VIEW;
%let tpIn_options = %nrquote();
%let tpIn_alter = %nrquote();
%let tpIn_path = %nrquote(/Extract_A5Y50FNE.AO0004NZ%(WorkTable%));
%let tpIn_type = 1;
%let tpIn_label = %nrquote();

%let _OUTPUT_count = 1; 
%let _OUTPUT = work.W1MHBF25;
%let _OUTPUT_connect = ;
%let _OUTPUT_engine = ;
%let _OUTPUT_memtype = DATA;
%let _OUTPUT_options = %nrquote();
%let _OUTPUT_alter = %nrquote();
%let _OUTPUT_path = %nrquote(/Генерация BKtpOut_A5Y50FNE.AO0004O0%(WorkTable%));
%let _OUTPUT_type = 1;
%let _OUTPUT_label = %nrquote();
/* List of target columns to keep  */ 
%let _OUTPUT_keep = DRV_ACCOUNT_ID FCC_COUNTERPARTY_ID VALID_FROM_DTTM VALID_TO_DTTM 
        SOURCE_SYSTEM_CD ACCOUNT_REGISTRATION_NM ALTERNATE_ACCOUNT_NM 
        FINANCIAL_ACCOUNT_TYPE_CD ACCOUNT_STATUS_CD OPEN_DT CLOSE_DT 
        CURRENCY_CD DAY_BASIS_CD INTEREST_PAYMENT_TYPE_CD IRB_SRC_ACCOUNT_ID 
        MID_FINANCIAL_UNIT_ID_BRCA BRCA FINANCIAL_INSTRUMENT_TYPE_CD 
        SETTLEMENT_TYPE_CD LCD VDAT;

%let tpOut = work.W1MHBF25;
%let tpOut_connect = ;
%let tpOut_engine = ;
%let tpOut_memtype = DATA;
%let tpOut_options = %nrquote();
%let tpOut_alter = %nrquote();
%let tpOut_path = %nrquote(/Генерация BKtpOut_A5Y50FNE.AO0004O0%(WorkTable%));
%let tpOut_type = 1;
%let tpOut_label = %nrquote();
/* List of target columns to keep  */ 
%let tpOut_keep = DRV_ACCOUNT_ID FCC_COUNTERPARTY_ID VALID_FROM_DTTM VALID_TO_DTTM 
        SOURCE_SYSTEM_CD ACCOUNT_REGISTRATION_NM ALTERNATE_ACCOUNT_NM 
        FINANCIAL_ACCOUNT_TYPE_CD ACCOUNT_STATUS_CD OPEN_DT CLOSE_DT 
        CURRENCY_CD DAY_BASIS_CD INTEREST_PAYMENT_TYPE_CD IRB_SRC_ACCOUNT_ID 
        MID_FINANCIAL_UNIT_ID_BRCA BRCA FINANCIAL_INSTRUMENT_TYPE_CD 
        SETTLEMENT_TYPE_CD LCD VDAT;


proc datasets lib=work nolist nowarn memtype = (data view);
   delete W1MHBF25;
quit;

%let tpBK = %nrquote(FINANCIAL_ACCOUNT_DRV           );
%let tpBK0 = %nrquote(3);
%let tpBK1 = %nrquote(FINANCIAL_ACCOUNT_DRV           );
%let tpBK2 = %nrquote(FINANCIAL_UNIT_MID_BRCA         );
%let tpBK3 = %nrquote(FCC_COUNTERPARTY_FCC            );
%let tpBK_count = %nrquote(3);
%let tpOptionalBK_count = %nrquote(0);
%let tpOptionalBK = ;

/* List of target columns to keep  */ 
%let _keep = DRV_ACCOUNT_ID FCC_COUNTERPARTY_ID VALID_FROM_DTTM VALID_TO_DTTM 
        SOURCE_SYSTEM_CD ACCOUNT_REGISTRATION_NM ALTERNATE_ACCOUNT_NM 
        FINANCIAL_ACCOUNT_TYPE_CD ACCOUNT_STATUS_CD OPEN_DT CLOSE_DT 
        CURRENCY_CD DAY_BASIS_CD INTEREST_PAYMENT_TYPE_CD IRB_SRC_ACCOUNT_ID 
        MID_FINANCIAL_UNIT_ID_BRCA BRCA FINANCIAL_INSTRUMENT_TYPE_CD 
        SETTLEMENT_TYPE_CD LCD VDAT;
/* List of target columns to keep  */ 
%let keep = DRV_ACCOUNT_ID FCC_COUNTERPARTY_ID VALID_FROM_DTTM VALID_TO_DTTM 
        SOURCE_SYSTEM_CD ACCOUNT_REGISTRATION_NM ALTERNATE_ACCOUNT_NM 
        FINANCIAL_ACCOUNT_TYPE_CD ACCOUNT_STATUS_CD OPEN_DT CLOSE_DT 
        CURRENCY_CD DAY_BASIS_CD INTEREST_PAYMENT_TYPE_CD IRB_SRC_ACCOUNT_ID 
        MID_FINANCIAL_UNIT_ID_BRCA BRCA FINANCIAL_INSTRUMENT_TYPE_CD 
        SETTLEMENT_TYPE_CD LCD VDAT;
/*****************************************************************
* ВЕРСИЯ:
*     $Id: transform_generate_bk.sas 4889 2013-04-04 09:14:07Z nesterenok $
*
******************************************************************
* НАЗНАЧЕНИЕ:
*     Генерирует бизнес-ключи в таблице по списку.
*
* ПАРАМЕТРЫ:
*     tpIn                    +  имя входного набора
*     tpBK                    +  список кодов обязательных для генерации бизнес-ключей, разделенный пробелами
*                                Такой бизнес-ключ станет дамми, если заполнены не все поля, его составляющие
*                                FK к ETL_SYS.ETL_BK.BK_CD
*     tpOptionalBK            +  список кодов НЕобязательных для генерации бизнес-ключей, разделенный пробелами
*                                Такой бизнес-ключ останется пустым, если заполнены не все поля, его составляющие
*     tpOut                   +  имя выходного набора
*
******************************************************************/

%macro transform_generate_bk;
   %let tpBK_count         = %unquote(&tpBK_count);
   %let tpOptionalBK_count = %unquote(&tpOptionalBK_count);

   %local lmvDummyRows lmvFieldDummyCount lmvDummyRequired;
   %let lmvDummyRows       = work.tr_gen_bk_dummy_rows;
   %let lmvFieldDummyCount = etl_dummy_count;
   %let lmvDummyRequired   = %eval (&tpBK_count gt 0);

   /* Макросы для генерации одного ключа */
   %macro sm_trans_gen_bk_required;
      %etl_generate_bk (
         mpFieldBK=&bk_field_nm, mpLengthBK=%sysfunc(inputn(&bk_type_cd, bkt_cd_len.)),
         mpColumnList=&bk_column_list_txt, mpFormat=&bk_format_txt,
         mpFieldDummy=&lmvFieldDummy, mpFieldDummyCount=&lmvFieldDummyCount
      );
   %mend;
   %macro sm_trans_gen_bk_optional;
      %etl_generate_bk (
         mpFieldBK=&bk_field_nm, mpLengthBK=%sysfunc(inputn(&bk_type_cd, bkt_cd_len.)),
         mpColumnList=&bk_column_list_txt, mpFormat=&bk_format_txt,
         mpFieldDummy=
      );
   %mend;

   /* Макрос для подстановки в дамми-ключ уникального номера */
   %macro sm_trans_gen_bk_dummy;
      if &lmvFieldDummy gt 0 then do;
         set &lmvDummyIds (keep=OBJECT_ID rename=(OBJECT_ID=&lmvFieldDummy._no)) point=&lmvFieldDummy;
         &bk_field_nm = cats (&bk_field_nm, "_", &lmvFieldDummy._no);

         %error_check;
      end;
   %mend;


   /* Создаем выходной набор итерацией по всем заявленным бизнес-ключам */
   /* Считаем необходимое кол-во дамми-ключей */
   %local lmvBkIndex lmvFieldDummy lmvDummyCount;
   %let lmvDummyCount   = 0;
   data
      %if &lmvDummyRequired %then %do;
         &tpOut (drop= etl_dummy_:)
         &lmvDummyRows
      %end;
      %else %do;
         &tpOut
      %end;
   ;
      set &tpIn end=ds_end;

      /* Генерация необязательных ключей */
      %do lmvBkIndex=1 %to &tpOptionalBK_count;
         %util_loop_data (mpLoopMacro=sm_trans_gen_bk_optional, mpData=ETL_SYS.ETL_BK,
                          mpWhere=BK_CD eq %util_quote(&&tpOptionalBK&lmvBkIndex)
         );
      %end;

      %if &lmvDummyRequired %then %do;
         length &lmvFieldDummyCount 8;
         drop &lmvFieldDummyCount;
         retain &lmvFieldDummyCount 0;

         /* Генерация обязательных ключей */
         %do lmvBkIndex=1 %to &tpBK_count;
            %let lmvFieldDummy = etl_dummy_&lmvBkIndex.;

            %util_loop_data (mpLoopMacro=sm_trans_gen_bk_required, mpData=ETL_SYS.ETL_BK,
                             mpWhere=BK_CD eq %util_quote(&&tpBK&lmvBkIndex)
            );
         %end;

         /* Если в какой-то записи есть дамми, то не выводим ее сразу */
         if sum (of etl_dummy_1-etl_dummy_&tpBK_count) = 0 then
            output &tpOut;
         else do;
            output &lmvDummyRows;
         end;

         if ds_end then call symputx ("lmvDummyCount", &lmvFieldDummyCount);
      %end;
      %else %do;
         output &tpOut;
      %end;
   run;
   %error_check (mpStepType=DATA);

   /* Если дамми нет, то всё */
   %if (not &lmvDummyRequired) or (&lmvDummyCount eq 0) %then %return;


   /* Для каждого дамми генерируем уникальный номер */
   %local lmvDummyIds;
   %let lmvDummyIds = work.tr_gen_bk_dummy_ids;
   %unique_ids (mpIdCount=&lmvDummyCount, mpOut=&lmvDummyIds, mpSequenceName=ETL_DUMMY_SEQ);

   /* Добавляем номер к дамми */
   data &lmvDummyRows._id (drop= etl_dummy_:);
      set &lmvDummyRows;

      %do lmvBkIndex=1 %to &tpBK_count;
         %let lmvFieldDummy = etl_dummy_&lmvBkIndex.;

         %util_loop_data (mpLoopMacro=sm_trans_gen_bk_dummy, mpData=ETL_SYS.ETL_BK,
                          mpWhere=BK_CD eq %util_quote(&&tpBK&lmvBkIndex)
         );
      %end;
   run;
   %error_check (mpStepType=DATA);


   /* Добавляем дамми-строки к выходному набору */
   proc append base=&tpOut data=&lmvDummyRows._id;
   run;
   %error_check (mpStepType=DATA);

%mend transform_generate_bk;

%transform_generate_bk;

%rcSet(&syserr); 
%rcSet(&sysrc); 
%rcSet(&sqlrc); 



/**  Step end Генерация BK **/

/*==========================================================================* 
 * Step:            Table Loader                          A5Y50FNE.AQ00088Z * 
 * Transform:       Table Loader (Version 2.1)                              * 
 * Description:                                                             * 
 *                                                                          * 
 * Source Table:    Генерация BKtpOut - work.W1MHBF25     A5Y50FNE.AO0004O0 * 
 * Target Table:    CUSTOMER_X_FIN_ACC_OPT_BK -           A5Y50FNE.AE00011U * 
 *                   work_ia.CUSTOMER_X_FIN_ACC_OPT_BK                      * 
 *==========================================================================*/ 

%let transformID = %quote(A5Y50FNE.AQ00088Z);
%let trans_rc = 0;
%let etls_stepStartTime = %sysfunc(datetime(), datetime20.); 

%let SYSLAST = %nrquote(work.W1MHBF25); 

%let SYS_SQL_IP_SPEEDO = Y;
%let SYS_SQL_MAPPUTTO = sas_put;
%let SYS_SQLREDUCEPUT = DBMS;
%global etls_sql_pushDown;
%let etls_sql_pushDown = -1;
option DBIDIRECTEXEC;

%global etls_tableExist;
%global etls_numIndex;
%global etls_lastTable;
%let etls_tableExist = -1; 
%let etls_numIndex = -1; 
%let etls_lastTable = &SYSLAST; 

/*---- Define load data macro  ----*/ 

/* --------------------------------------------------------------
   Load Technique Selection: Replace - EntireTable
   Constraint and index action selections: 'INIT','ASIS','ASIS','ASIS'
   Additional options selections... 
      Set unmapped to missing on updates: false 
   -------------------------------------------------------------- */
%macro etls_loader;

   %let etls_tableOptions = ;
   
   /*---- Map the columns  ----*/ 
   proc datasets lib = work nolist nowarn memtype = (data view);
      delete WIROWIK;
   quit;
   
   data _null_;
      put "NOTE: The following column(s) do not have a column mapping, so the"
           " value(s) will be set to missing: RELSHP_TO_PRIMARY_CD,"
           " EFFECTIVE_FROM_DTTM, EFFECTIVE_TO_DTTM";
   run;
   
   %put %str(NOTE: Mapping columns ...);
   proc sql;
      create view work.WIROWIK as
         select
            FCC_COUNTERPARTY_ID as CUSTOMER_ID,
            DRV_ACCOUNT_ID as ACCOUNT_ID,
            VALID_FROM_DTTM,
            VALID_TO_DTTM,
            "" as RELSHP_TO_PRIMARY_CD length = 3
               format = $3.
               informat = $3.,
            ('DDC') as RELATIONSHIP_TO_ACCOUNT_CD length = 3
               format = $3.
               informat = $3.,
            . as EFFECTIVE_FROM_DTTM length = 8
               format = DATETIME20.
               informat = DATETIME20.,
            . as EFFECTIVE_TO_DTTM length = 8
               format = DATETIME20.
               informat = DATETIME20.
      from &etls_lastTable
      ;
   quit;
   
   %let SYSLAST = work.WIROWIK;
   
   %let etls_lastTable = &SYSLAST; 
   %let etls_tableOptions = ; 
   
   /* Determine if the target table exists  */ 
   %let etls_tableExist = %eval(%sysfunc(exist(work_ia.CUSTOMER_X_FIN_ACC_OPT_BK, DATA)) or 
         %sysfunc(exist(work_ia.CUSTOMER_X_FIN_ACC_OPT_BK, VIEW))); 
   
   %if &etls_tableExist %then 
   %do;/* table exists  */ 
      %let etls_hasPreExistingConstraint=0; 
      
      proc datasets lib = work nolist nowarn memtype = (data view);
         delete etls_commands etls_commands_F;
      quit;
      
      %let etls_otherTablesReferToThisTable=0;
      
      %macro etls_CIContents(table=,workTableOut=,inDSOptions=);
         %put NOTE: Building table listing Constraints and Indexes for: &table;
         proc datasets lib=work nolist; delete &workTableOut; quit;
         proc contents data=&table&inDSOptions out2=&workTableOut noprint; run;
         
         data &workTableOut;
            length name $60 type $20 icown idxUnique idxNoMiss $3 recreate $600;
            set &workTableOut;
            type=upcase(type);
            if type eq 'REFERENTIAL' then
            do;
               put "WARNING%QUOTE(:) Target table is referenced by constraints in"
                    " another table: " ref;
               call symput('etls_otherTablesReferToThisTable','1');
               delete;
            end;
            if type='INDEX' and ICOwn eq 'YES' then delete;
         run;
         %rcSet(&syserr); 
         
      %mend etls_CIContents;
      
      %etls_CIContents(table=work_ia.CUSTOMER_X_FIN_ACC_OPT_BK, workTableOut=etls_commands, inDSOptions=);
      
      %if &etls_otherTablesReferToThisTable %then 
         %put WARNING%QUOTE(:) Replacing entire table will fail. Consider an alternate load technique or revising constraints.; 
      %else 
      %do; /* okay - remove foreign keys  */ 
      
         data etls_commands_F; 
            set etls_commands; 
            if upcase(type)="FOREIGN KEY" then 
            do; 
               command='ic delete '||trim(name)||';';
               output etls_commands_F; 
            end; 
         run; 
         
         %put %str(NOTE: Removing foreign keys before dropping table...);
         data _null_;
            set etls_commands_F;
            %rcSet(&syserr); 
            
      %end; /* okay - remove foreign keys  */ 
      
      proc datasets lib = work nolist nowarn memtype = (data view);
         delete etls_commands etls_commands_F;
      quit;
      
      /*---- Drop a table  ----*/ 
      %put %str(NOTE: Dropping table ...);
      proc datasets lib = work_ia nolist nowarn memtype = (data view);
         delete CUSTOMER_X_FIN_ACC_OPT_BK;
      quit;
      
      %rcSet(&syserr); 
      
      %let etls_tableExist = 0;
      
   %end; /* table exists  */ 
   
   /*---- Create a new table  ----*/ 
   %if (&etls_tableExist eq 0) %then 
   %do;  /* if table does not exist  */ 
   
      %put %str(NOTE: Creating table ...);
      
      data work_ia.CUSTOMER_X_FIN_ACC_OPT_BK;
         attrib CUSTOMER_ID length = $32
            format = $32.
            informat = $32.
            label = 'CUSTOMER_ID'; 
         attrib ACCOUNT_ID length = $32
            format = $32.
            informat = $32.
            label = 'ACCOUNT_ID'; 
         attrib VALID_FROM_DTTM length = 8
            format = DATETIME20.
            informat = DATETIME20.
            label = 'VALID_FROM_DTTM'; 
         attrib VALID_TO_DTTM length = 8
            format = DATETIME20.
            informat = DATETIME20.
            label = 'VALID_TO_DTTM'; 
         attrib RELSHP_TO_PRIMARY_CD length = $3
            format = $3.
            informat = $3.
            label = 'RELSHP_TO_PRIMARY_CD'; 
         attrib RELATIONSHIP_TO_ACCOUNT_CD length = $3
            format = $3.
            informat = $3.
            label = 'RELATIONSHIP_TO_ACCOUNT_CD'; 
         attrib EFFECTIVE_FROM_DTTM length = 8
            format = DATETIME20.
            informat = DATETIME20.
            label = 'EFFECTIVE_FROM_DTTM'; 
         attrib EFFECTIVE_TO_DTTM length = 8
            format = DATETIME20.
            informat = DATETIME20.
            label = 'EFFECTIVE_TO_DTTM'; 
         call missing(of _all_);
         stop;
      run;
      
      %rcSet(&syserr); 
      
      /*---- Create the integrity constraints for a table  ----*/ 
      %put %str(NOTE: Creating integrity constraints ...);
      proc datasets library=work_ia nolist;
         modify CUSTOMER_X_FIN_ACC_OPT_BK;
            ic create not null (CUSTOMER_ID);
            ic create not null (ACCOUNT_ID);
            ic create not null (VALID_FROM_DTTM);
            ic create not null (VALID_TO_DTTM);
            ic create not null (RELATIONSHIP_TO_ACCOUNT_CD);
            ic create Index1 = primary key (CUSTOMER_ID ACCOUNT_ID VALID_FROM_DTTM 
                           RELATIONSHIP_TO_ACCOUNT_CD);
      quit;
      
      %rcSet(&syserr); 
      
   %end;  /* if table does not exist  */ 
   
   /*---- Append  ----*/ 
   %put %str(NOTE: Appending data ...);
   
   proc append base = work_ia.CUSTOMER_X_FIN_ACC_OPT_BK 
      data = &etls_lastTable (&etls_tableOptions)  force ; 
    run; 
   
   %rcSet(&syserr); 
   
   proc datasets lib = work nolist nowarn memtype = (data view);
      delete WIROWIK;
   quit;
   
%mend etls_loader;
%etls_loader;

%let etls_recCheckExist = 0; 
%let etls_recnt = 0; 
%macro etls_recordCheck; 
   %let etls_recCheckExist = %eval(%sysfunc(exist(work_ia.CUSTOMER_X_FIN_ACC_OPT_BK, DATA)) or 
         %sysfunc(exist(work_ia.CUSTOMER_X_FIN_ACC_OPT_BK, VIEW))); 
   
   %if (&etls_recCheckExist) %then
   %do;
      %local etls_syntaxcheck; 
      %let etls_syntaxcheck = %sysfunc(getoption(syntaxcheck)); 
      /* Turn off syntaxcheck option to perform following steps  */ 
      options nosyntaxcheck;
      
      proc contents data = work_ia.CUSTOMER_X_FIN_ACC_OPT_BK out = work.etls_contents(keep = nobs) noprint; 
      run; 
      
      data _null_; 
         set work.etls_contents (obs = 1); 
         call symput("etls_recnt", left(put(nobs,32.))); 
      run;
      
      proc datasets lib = work nolist nowarn memtype = (data view);
         delete etls_contents;
      quit;
      
      /* Reset syntaxcheck option to previous setting  */ 
      options &etls_syntaxcheck; 
   %end;
%mend etls_recordCheck;
%etls_recordCheck;



/**  Step end Table Loader **/

/*==========================================================================* 
 * Step:            Table Loader                          A5Y50FNE.AQ000890 * 
 * Transform:       Table Loader (Version 2.1)                              * 
 * Description:                                                             * 
 *                                                                          * 
 * Source Table:    Генерация BKtpOut - work.W1MHBF25     A5Y50FNE.AO0004O0 * 
 * Target Table:    FINANCIAL_ACCOUNT_OPT_BK -            A5Y50FNE.AE00012Q * 
 *                   work_ia.FINANCIAL_ACCOUNT_OPT_BK                       * 
 *==========================================================================*/ 

%let transformID = %quote(A5Y50FNE.AQ000890);
%let trans_rc = 0;
%let etls_stepStartTime = %sysfunc(datetime(), datetime20.); 

%let SYSLAST = %nrquote(work.W1MHBF25); 

%let SYS_SQL_IP_SPEEDO = Y;
%let SYS_SQL_MAPPUTTO = sas_put;
%let SYS_SQLREDUCEPUT = DBMS;
%global etls_sql_pushDown;
%let etls_sql_pushDown = -1;
option DBIDIRECTEXEC;

%global etls_tableExist;
%global etls_numIndex;
%global etls_lastTable;
%let etls_tableExist = -1; 
%let etls_numIndex = -1; 
%let etls_lastTable = &SYSLAST; 

/*---- Define load data macro  ----*/ 

/* --------------------------------------------------------------
   Load Technique Selection: Replace - EntireTable
   Constraint and index action selections: 'INIT','ASIS','ASIS','ASIS'
   Additional options selections... 
      Set unmapped to missing on updates: false 
   -------------------------------------------------------------- */
%macro etls_loader;

   %let etls_tableOptions = ;
   
   /*---- Map the columns  ----*/ 
   proc datasets lib = work nolist nowarn memtype = (data view);
      delete WIROWJB;
   quit;
   
   data _null_;
      put "NOTE: The following column(s) do not have a column mapping, so the"
           " value(s) will be set to missing: AUTO_DEBIT_ACCOUNT_TYPE_CD,"
           " ACCOUNT_REGISTRATION_TYPE_CD, CLOSE_REASON_CD,    ACCOUNT_TAX_ID,"
           " EXPECTED_LOSS_PCT, INDIVIDUAL_ORGANIZATION_CD, SOURCE_CD,   "
           " OPENING_CHANNEL_CD, PREFERRED_CHANNEL_CD, PRIMARY_PHONE_NO,   "
           " PRIMARY_PHONE_TYPE_CD, SECONDARY_PHONE_NO, SECONDARY_PHONE_TYPE_CD,"
           "    MAILABLE_FLG, TELEPHONABLE_FLG, EMAIL_FLG, SMS_FLG,"
           " DO_NOT_CONTACT_FLG,    EMPLOYEE_RK, CURRENCY_BASED_ACCOUNT_FLG,"
           " FEE_BASED_FLG, ANNUAL_FEES_AMT,    MONTHLY_FEES_AMT, CAMPAIGN_CD,"
           " COMMUNICATION_CD, REGISTERED_ONLINE_DT,    FIRST_LOGIN_DT,"
           " ONLINE_BILL_PAYMENT_FLG, ID_VERIFICATION_TYPE_CD,   "
           " PREVIOUS_ACCOUNT_ID, OPEN_BRANCH_FINANCIAL_UNIT_ID,   "
           " FINANCIAL_APPLICATION_ID, CREDIT_FACILITY_ID,"
           " FUTURE_MARGIN_INCOME_AMT,    IN_DEFAULT_FLG, FINANCIAL_BOOK_ID,"
           " IRRECOVERABLE_FLG,    OWNED_BY_INTERNAL_ORG_ID,"
           " PREVIOUS_BANK_EXTERNAL_ORG_ID, NETTING_SET_ID,    REVOLVING_FLG,"
           " SOURCE_CHANNEL_CD, GRACE_PERIOD_DAYS_CNT,    REMARGINING_DAYS_CNT,"
           " FINANCIAL_CALENDAR_ID, PORTFOLIO_ID,    SECURITIZATION_POOL_ID,"
           " RECEIVABLES_POOL_ID, ACCOUNT_USAGE_TYPE_CD,    RISK_ALARM_FLG,"
           " LOW_PROFITABILITY_FLG, ACCOUNT_LIFECYCLE_STG_CD,   "
           " ATTRITION_ALARM_FLG, BALANCE_FROZEN_FLG, BALANCE_FROZEN_DT,   "
           " ACCOUNT_BLOCK_REASON_CD, TAXATION_STATE_CD,"
           " EFFECTIVE_MATURITY_YEAR_NO,    GL_ACCOUNT_ID,"
           " FROM_OTHER_INSTITUTION_FLG, ACCOUNT_RENEWAL_CNT,   "
           " BALANCE_TRANSFER_DT, BALANCE_TRANSFER_AMT, BALANCE_TRANSFER_CNT,   "
           " BASE_LONG_TERM_APR_RT, BROKER_FLG, MULT_RATE_FLG,"
           " AUTO_DEBIT_ACCOUNT_NO,    WORST_STATUS_LAST_12_MTH_CD,"
           " WORST_STATUS_LAST_12_MTH_DT,    BALANCE_TRNSF_OTHER_ACCT_CNT,"
           " EFFECTIVE_FROM_DTTM, EFFECTIVE_TO_DTTM,    COUNTERPARTY_ID,"
           " INSURED_BY_COUNTERPARTY_ID, STATEMENT_FREQUENCY_CD,   "
           " SECURITY_DEPOSIT_AMT, SECURITY_DEPOSIT_REFUND_AMT,"
           " FIRST_PAYMENT_DT,    LAST_PAYMENT_DT, FIRST_RESET_DT,"
           " LAST_RESET_DT, RESETS_PER_ANNUM_NO,    PRINCIPAL_PAYMENT_TYPE_CD,"
           " PRINCIPAL_PAYMENT_AMT, RATE_POLICY_ID, SPREAD_RT,   "
           " DISCOUNT_SPREAD_RT, INITIAL_CONTRACT_RT,"
           " FIXED_MONTHLY_PREPAYMENT_RT,    CAPITAL_ALLOCATION_ID,"
           " CAPITAL_COST_ID, SEGMENT_ID,    NEAR_BRANCH_FINANCIAL_UNIT_ID,"
           " STATEMENT_OPT_FLG, VALUE_SCALING_FACTOR_RT,   "
           " INTERNAL_REPORTING_CATEGORY_CD, CONVEXITY_ADJUSTMENT_FLG,   "
           " ARREARS_PAYMENT_CD, QUANTO_FEATURE_ID, CASH_INTENSIVE_BUSINESS_FLG,"
           "    LETTER_OF_CREDIT_ONFILE_FLG, TRADE_FINANCE_FLG,"
           " ANNUITY_PAYMENT_TYPE_CD,    INTEREST_PAYMENT_TIME_FREQ_CD,"
           " LIQUIDITY_CATEGORY_TYPE_CD,    HOLIDAY_DATE_ROLL_CONV_CD,"
           " WEEKEND_DATE_ROLL_CONV_CD, EXPENSE_ALLOCATION_ID,   "
           " FIRST_INTEREST_PAYMENT_DT, LAST_INTEREST_PAYMENT_DT,"
           " IRB_DUMMY_TYPE_CD";
   run;
   
   %put %str(NOTE: Mapping columns ...);
   proc sql;
      create view work.WIROWJB as
         select
            DRV_ACCOUNT_ID as ACCOUNT_ID,
            VALID_FROM_DTTM,
            VALID_TO_DTTM,
            SOURCE_SYSTEM_CD,
            ACCOUNT_REGISTRATION_NM,
            ALTERNATE_ACCOUNT_NM,
            FINANCIAL_ACCOUNT_TYPE_CD,
            "" as AUTO_DEBIT_ACCOUNT_TYPE_CD length = 3
               format = $3.
               informat = $3.,
            "" as ACCOUNT_REGISTRATION_TYPE_CD length = 3
               format = $3.
               informat = $3.,
            ACCOUNT_STATUS_CD,
            OPEN_DT,
            (case when ACCOUNT_STATUS_CD='AUT' then .
                       when ACCOUNT_STATUS_CD='MAT' then VDAT
                       when ACCOUNT_STATUS_CD='REV' then min(LCD,VDAT)
               end
               
               /*ifn(ACCOUNT_STATUS_CD = 'AUT', ., CLOSE_DT) старый вариант*/) as CLOSE_DT length = 8
               format = DATETIME20.
               informat = DATETIME20.,
            "" as CLOSE_REASON_CD length = 3
               format = $3.
               informat = $3.,
            "" as ACCOUNT_TAX_ID length = 32
               format = $32.
               informat = $32.,
            . as EXPECTED_LOSS_PCT length = 8
               format = 11.4
               informat = 11.4,
            "" as INDIVIDUAL_ORGANIZATION_CD length = 3
               format = $3.
               informat = $3.,
            "" as SOURCE_CD length = 5
               format = $5.
               informat = $5.,
            "" as OPENING_CHANNEL_CD length = 3
               format = $3.
               informat = $3.,
            "" as PREFERRED_CHANNEL_CD length = 3
               format = $3.
               informat = $3.,
            CURRENCY_CD,
            "" as PRIMARY_PHONE_NO length = 20
               format = $20.
               informat = $20.,
            "" as PRIMARY_PHONE_TYPE_CD length = 3
               format = $3.
               informat = $3.,
            "" as SECONDARY_PHONE_NO length = 20
               format = $20.
               informat = $20.,
            "" as SECONDARY_PHONE_TYPE_CD length = 3
               format = $3.
               informat = $3.,
            "" as MAILABLE_FLG length = 1
               format = $1.
               informat = $1.,
            "" as TELEPHONABLE_FLG length = 1
               format = $1.
               informat = $1.,
            "" as EMAIL_FLG length = 1
               format = $1.
               informat = $1.,
            "" as SMS_FLG length = 1
               format = $1.
               informat = $1.,
            "" as DO_NOT_CONTACT_FLG length = 1
               format = $1.
               informat = $1.,
            . as EMPLOYEE_RK length = 8
               format = 11.
               informat = 11.,
            "" as CURRENCY_BASED_ACCOUNT_FLG length = 1
               format = $1.
               informat = $1.,
            "" as FEE_BASED_FLG length = 1
               format = $1.
               informat = $1.,
            . as ANNUAL_FEES_AMT length = 8
               format = 20.5
               informat = 20.5,
            . as MONTHLY_FEES_AMT length = 8
               format = 20.5
               informat = 20.5,
            "" as CAMPAIGN_CD length = 30
               format = $30.
               informat = $30.,
            "" as COMMUNICATION_CD length = 30
               format = $30.
               informat = $30.,
            . as REGISTERED_ONLINE_DT length = 8
               format = DATETIME20.
               informat = DATETIME20.,
            . as FIRST_LOGIN_DT length = 8
               format = DATETIME20.
               informat = DATETIME20.,
            "" as ONLINE_BILL_PAYMENT_FLG length = 1
               format = $1.
               informat = $1.,
            "" as ID_VERIFICATION_TYPE_CD length = 3
               format = $3.
               informat = $3.,
            "" as PREVIOUS_ACCOUNT_ID length = 32
               format = $32.
               informat = $32.,
            "" as OPEN_BRANCH_FINANCIAL_UNIT_ID length = 32
               format = $32.
               informat = $32.,
            MID_FINANCIAL_UNIT_ID_BRCA as PRIM_BRANCH_FINANCIAL_UNIT_ID,
            "" as FINANCIAL_APPLICATION_ID length = 32
               format = $32.
               informat = $32.,
            "" as CREDIT_FACILITY_ID length = 40
               format = $40.
               informat = $40.,
            . as FUTURE_MARGIN_INCOME_AMT length = 8
               format = 20.5
               informat = 20.5,
            "" as IN_DEFAULT_FLG length = 1
               format = $1.
               informat = $1.,
            "" as FINANCIAL_BOOK_ID length = 32
               format = $32.
               informat = $32.,
            "" as IRRECOVERABLE_FLG length = 1
               format = $1.
               informat = $1.,
            "" as OWNED_BY_INTERNAL_ORG_ID length = 32
               format = $32.
               informat = $32.,
            "" as PREVIOUS_BANK_EXTERNAL_ORG_ID length = 32
               format = $32.
               informat = $32.,
            "" as NETTING_SET_ID length = 32
               format = $32.
               informat = $32.,
            "" as REVOLVING_FLG length = 1
               format = $1.
               informat = $1.,
            "" as SOURCE_CHANNEL_CD length = 3
               format = $3.
               informat = $3.,
            . as GRACE_PERIOD_DAYS_CNT length = 8
               format = 7.
               informat = 7.,
            . as REMARGINING_DAYS_CNT length = 8
               format = 7.
               informat = 7.,
            "" as FINANCIAL_CALENDAR_ID length = 32
               format = $32.
               informat = $32.,
            DAY_BASIS_CD,
            "" as PORTFOLIO_ID length = 32
               format = $32.
               informat = $32.,
            "" as SECURITIZATION_POOL_ID length = 32
               format = $32.
               informat = $32.,
            "" as RECEIVABLES_POOL_ID length = 32
               format = $32.
               informat = $32.,
            "" as ACCOUNT_USAGE_TYPE_CD length = 3
               format = $3.
               informat = $3.,
            "" as RISK_ALARM_FLG length = 1
               format = $1.
               informat = $1.,
            "" as LOW_PROFITABILITY_FLG length = 1
               format = $1.
               informat = $1.,
            "" as ACCOUNT_LIFECYCLE_STG_CD length = 3
               format = $3.
               informat = $3.,
            "" as ATTRITION_ALARM_FLG length = 1
               format = $1.
               informat = $1.,
            "" as BALANCE_FROZEN_FLG length = 1
               format = $1.
               informat = $1.,
            . as BALANCE_FROZEN_DT length = 8
               format = DATETIME20.
               informat = DATETIME20.,
            "" as ACCOUNT_BLOCK_REASON_CD length = 3
               format = $3.
               informat = $3.,
            "" as TAXATION_STATE_CD length = 4
               format = $4.
               informat = $4.,
            . as EFFECTIVE_MATURITY_YEAR_NO length = 8
               format = 9.3
               informat = 9.3,
            "" as GL_ACCOUNT_ID length = 32
               format = $32.
               informat = $32.,
            "" as FROM_OTHER_INSTITUTION_FLG length = 1
               format = $1.
               informat = $1.,
            . as ACCOUNT_RENEWAL_CNT length = 8
               format = 7.
               informat = 7.,
            . as BALANCE_TRANSFER_DT length = 8
               format = DATETIME20.
               informat = DATETIME20.,
            . as BALANCE_TRANSFER_AMT length = 8
               format = 20.5
               informat = 20.5,
            . as BALANCE_TRANSFER_CNT length = 8
               format = 7.
               informat = 7.,
            . as BASE_LONG_TERM_APR_RT length = 8
               format = 11.4
               informat = 11.4,
            "" as BROKER_FLG length = 1
               format = $1.
               informat = $1.,
            "" as MULT_RATE_FLG length = 1
               format = $1.
               informat = $1.,
            "" as AUTO_DEBIT_ACCOUNT_NO length = 32
               format = $32.
               informat = $32.,
            "" as WORST_STATUS_LAST_12_MTH_CD length = 3
               format = $3.
               informat = $3.,
            . as WORST_STATUS_LAST_12_MTH_DT length = 8
               format = DATETIME20.
               informat = DATETIME20.,
            . as BALANCE_TRNSF_OTHER_ACCT_CNT length = 8
               format = 7.
               informat = 7.,
            . as EFFECTIVE_FROM_DTTM length = 8
               format = DATETIME20.
               informat = DATETIME20.,
            . as EFFECTIVE_TO_DTTM length = 8
               format = DATETIME20.
               informat = DATETIME20.,
            "" as COUNTERPARTY_ID length = 32
               format = $32.
               informat = $32.,
            "" as INSURED_BY_COUNTERPARTY_ID length = 32
               format = $32.
               informat = $32.,
            "" as STATEMENT_FREQUENCY_CD length = 3
               format = $3.
               informat = $3.,
            . as SECURITY_DEPOSIT_AMT length = 8
               format = 20.5
               informat = 20.5,
            . as SECURITY_DEPOSIT_REFUND_AMT length = 8
               format = 20.5
               informat = 20.5,
            . as FIRST_PAYMENT_DT length = 8
               format = DATETIME20.
               informat = DATETIME20.,
            . as LAST_PAYMENT_DT length = 8
               format = DATETIME20.
               informat = DATETIME20.,
            . as FIRST_RESET_DT length = 8
               format = DATETIME20.
               informat = DATETIME20.,
            . as LAST_RESET_DT length = 8
               format = DATETIME20.
               informat = DATETIME20.,
            . as RESETS_PER_ANNUM_NO length = 8
               format = 6.
               informat = 6.,
            "" as PRINCIPAL_PAYMENT_TYPE_CD length = 3
               format = $3.
               informat = $3.,
            . as PRINCIPAL_PAYMENT_AMT length = 8
               format = 20.5
               informat = 20.5,
            "" as RATE_POLICY_ID length = 32
               format = $32.
               informat = $32.,
            . as SPREAD_RT length = 8
               format = 11.4
               informat = 11.4,
            . as DISCOUNT_SPREAD_RT length = 8
               format = 11.4
               informat = 11.4,
            . as INITIAL_CONTRACT_RT length = 8
               format = 11.4
               informat = 11.4,
            . as FIXED_MONTHLY_PREPAYMENT_RT length = 8
               format = 11.4
               informat = 11.4,
            "" as CAPITAL_ALLOCATION_ID length = 32
               format = $32.
               informat = $32.,
            "" as CAPITAL_COST_ID length = 32
               format = $32.
               informat = $32.,
            "" as SEGMENT_ID length = 32
               format = $32.
               informat = $32.,
            "" as NEAR_BRANCH_FINANCIAL_UNIT_ID length = 32
               format = $32.
               informat = $32.,
            "" as STATEMENT_OPT_FLG length = 1
               format = $1.
               informat = $1.,
            . as VALUE_SCALING_FACTOR_RT length = 8
               format = 11.4
               informat = 11.4,
            "" as INTERNAL_REPORTING_CATEGORY_CD length = 3
               format = $3.
               informat = $3.,
            "" as CONVEXITY_ADJUSTMENT_FLG length = 1
               format = $1.
               informat = $1.,
            "" as ARREARS_PAYMENT_CD length = 3
               format = $3.
               informat = $3.,
            "" as QUANTO_FEATURE_ID length = 32
               format = $32.
               informat = $32.,
            "" as CASH_INTENSIVE_BUSINESS_FLG length = 1
               format = $1.
               informat = $1.,
            "" as LETTER_OF_CREDIT_ONFILE_FLG length = 1
               format = $1.
               informat = $1.,
            "" as TRADE_FINANCE_FLG length = 1
               format = $1.
               informat = $1.,
            "" as ANNUITY_PAYMENT_TYPE_CD length = 3
               format = $3.
               informat = $3.,
            INTEREST_PAYMENT_TYPE_CD,
            "" as INTEREST_PAYMENT_TIME_FREQ_CD length = 3
               format = $3.
               informat = $3.,
            "" as LIQUIDITY_CATEGORY_TYPE_CD length = 3
               format = $3.
               informat = $3.,
            "" as HOLIDAY_DATE_ROLL_CONV_CD length = 3
               format = $3.
               informat = $3.,
            "" as WEEKEND_DATE_ROLL_CONV_CD length = 3
               format = $3.
               informat = $3.,
            "" as EXPENSE_ALLOCATION_ID length = 32
               format = $32.
               informat = $32.,
            . as FIRST_INTEREST_PAYMENT_DT length = 8
               format = DATETIME20.
               informat = DATETIME20.,
            . as LAST_INTEREST_PAYMENT_DT length = 8
               format = DATETIME20.
               informat = DATETIME20.,
            "" as IRB_DUMMY_TYPE_CD length = 3
               format = $3.
               informat = $3.,
            IRB_SRC_ACCOUNT_ID,
            BRCA,
            FINANCIAL_INSTRUMENT_TYPE_CD,
            SETTLEMENT_TYPE_CD
      from &etls_lastTable
      ;
   quit;
   
   %let SYSLAST = work.WIROWJB;
   
   %let etls_lastTable = &SYSLAST; 
   %let etls_tableOptions = ; 
   
   /* Determine if the target table exists  */ 
   %let etls_tableExist = %eval(%sysfunc(exist(work_ia.FINANCIAL_ACCOUNT_OPT_BK, DATA)) or 
         %sysfunc(exist(work_ia.FINANCIAL_ACCOUNT_OPT_BK, VIEW))); 
   
   %if &etls_tableExist %then 
   %do;/* table exists  */ 
      %let etls_hasPreExistingConstraint=0; 
      
      proc datasets lib = work nolist nowarn memtype = (data view);
         delete etls_commands etls_commands_F;
      quit;
      
      %let etls_otherTablesReferToThisTable=0;
      
      %macro etls_CIContents(table=,workTableOut=,inDSOptions=);
         %put NOTE: Building table listing Constraints and Indexes for: &table;
         proc datasets lib=work nolist; delete &workTableOut; quit;
         proc contents data=&table&inDSOptions out2=&workTableOut noprint; run;
         
         data &workTableOut;
            length name $60 type $20 icown idxUnique idxNoMiss $3 recreate $600;
            set &workTableOut;
            type=upcase(type);
            if type eq 'REFERENTIAL' then
            do;
               put "WARNING%QUOTE(:) Target table is referenced by constraints in"
                    " another table: " ref;
               call symput('etls_otherTablesReferToThisTable','1');
               delete;
            end;
            if type='INDEX' and ICOwn eq 'YES' then delete;
         run;
         %rcSet(&syserr); 
         
      %mend etls_CIContents;
      
      %etls_CIContents(table=work_ia.FINANCIAL_ACCOUNT_OPT_BK, workTableOut=etls_commands, inDSOptions=);
      
      %if &etls_otherTablesReferToThisTable %then 
         %put WARNING%QUOTE(:) Replacing entire table will fail. Consider an alternate load technique or revising constraints.; 
      %else 
      %do; /* okay - remove foreign keys  */ 
      
         data etls_commands_F; 
            set etls_commands; 
            if upcase(type)="FOREIGN KEY" then 
            do; 
               command='ic delete '||trim(name)||';';
               output etls_commands_F; 
            end; 
         run; 
         
         %put %str(NOTE: Removing foreign keys before dropping table...);
         data _null_;
            set etls_commands_F;
            %rcSet(&syserr); 
            
      %end; /* okay - remove foreign keys  */ 
      
      proc datasets lib = work nolist nowarn memtype = (data view);
         delete etls_commands etls_commands_F;
      quit;
      
      /*---- Drop a table  ----*/ 
      %put %str(NOTE: Dropping table ...);
      proc datasets lib = work_ia nolist nowarn memtype = (data view);
         delete FINANCIAL_ACCOUNT_OPT_BK;
      quit;
      
      %rcSet(&syserr); 
      
      %let etls_tableExist = 0;
      
   %end; /* table exists  */ 
   
   /*---- Create a new table  ----*/ 
   %if (&etls_tableExist eq 0) %then 
   %do;  /* if table does not exist  */ 
   
      %put %str(NOTE: Creating table ...);
      
      data work_ia.FINANCIAL_ACCOUNT_OPT_BK;
         attrib ACCOUNT_ID length = $32
            format = $32.
            informat = $32.
            label = 'ACCOUNT_ID'; 
         attrib VALID_FROM_DTTM length = 8
            format = DATETIME20.
            informat = DATETIME20.
            label = 'VALID_FROM_DTTM'; 
         attrib VALID_TO_DTTM length = 8
            format = DATETIME20.
            informat = DATETIME20.
            label = 'VALID_TO_DTTM'; 
         attrib SOURCE_SYSTEM_CD length = $3
            format = $3.
            informat = $3.
            label = 'SOURCE_SYSTEM_CD'; 
         attrib ACCOUNT_REGISTRATION_NM length = $100
            format = $100.
            informat = $100.
            label = 'ACCOUNT_REGISTRATION_NM'; 
         attrib ALTERNATE_ACCOUNT_NM length = $40
            format = $40.
            informat = $40.
            label = 'ALTERNATE_ACCOUNT_NM'; 
         attrib FINANCIAL_ACCOUNT_TYPE_CD length = $3
            format = $3.
            informat = $3.
            label = 'FINANCIAL_ACCOUNT_TYPE_CD'; 
         attrib AUTO_DEBIT_ACCOUNT_TYPE_CD length = $3
            format = $3.
            informat = $3.
            label = 'AUTO_DEBIT_ACCOUNT_TYPE_CD'; 
         attrib ACCOUNT_REGISTRATION_TYPE_CD length = $3
            format = $3.
            informat = $3.
            label = 'ACCOUNT_REGISTRATION_TYPE_CD'; 
         attrib ACCOUNT_STATUS_CD length = $3
            format = $3.
            informat = $3.
            label = 'ACCOUNT_STATUS_CD'; 
         attrib OPEN_DT length = 8
            format = DATETIME20.
            informat = DATETIME20.
            label = 'OPEN_DT'; 
         attrib CLOSE_DT length = 8
            format = DATETIME20.
            informat = DATETIME20.
            label = 'CLOSE_DT'; 
         attrib CLOSE_REASON_CD length = $3
            format = $3.
            informat = $3.
            label = 'CLOSE_REASON_CD'; 
         attrib ACCOUNT_TAX_ID length = $32
            format = $32.
            informat = $32.
            label = 'ACCOUNT_TAX_ID'; 
         attrib EXPECTED_LOSS_PCT length = 8
            format = 11.4
            informat = 11.4
            label = 'EXPECTED_LOSS_PCT'; 
         attrib INDIVIDUAL_ORGANIZATION_CD length = $3
            format = $3.
            informat = $3.
            label = 'INDIVIDUAL_ORGANIZATION_CD'; 
         attrib SOURCE_CD length = $5
            format = $5.
            informat = $5.
            label = 'SOURCE_CD'; 
         attrib OPENING_CHANNEL_CD length = $3
            format = $3.
            informat = $3.
            label = 'OPENING_CHANNEL_CD'; 
         attrib PREFERRED_CHANNEL_CD length = $3
            format = $3.
            informat = $3.
            label = 'PREFERRED_CHANNEL_CD'; 
         attrib CURRENCY_CD length = $3
            format = $3.
            informat = $3.
            label = 'CURRENCY_CD'; 
         attrib PRIMARY_PHONE_NO length = $20
            format = $20.
            informat = $20.
            label = 'PRIMARY_PHONE_NO'; 
         attrib PRIMARY_PHONE_TYPE_CD length = $3
            format = $3.
            informat = $3.
            label = 'PRIMARY_PHONE_TYPE_CD'; 
         attrib SECONDARY_PHONE_NO length = $20
            format = $20.
            informat = $20.
            label = 'SECONDARY_PHONE_NO'; 
         attrib SECONDARY_PHONE_TYPE_CD length = $3
            format = $3.
            informat = $3.
            label = 'SECONDARY_PHONE_TYPE_CD'; 
         attrib MAILABLE_FLG length = $1
            format = $1.
            informat = $1.
            label = 'MAILABLE_FLG'; 
         attrib TELEPHONABLE_FLG length = $1
            format = $1.
            informat = $1.
            label = 'TELEPHONABLE_FLG'; 
         attrib EMAIL_FLG length = $1
            format = $1.
            informat = $1.
            label = 'EMAIL_FLG'; 
         attrib SMS_FLG length = $1
            format = $1.
            informat = $1.
            label = 'SMS_FLG'; 
         attrib DO_NOT_CONTACT_FLG length = $1
            format = $1.
            informat = $1.
            label = 'DO_NOT_CONTACT_FLG'; 
         attrib EMPLOYEE_RK length = 8
            format = 11.
            informat = 11.
            label = 'EMPLOYEE_RK'; 
         attrib CURRENCY_BASED_ACCOUNT_FLG length = $1
            format = $1.
            informat = $1.
            label = 'CURRENCY_BASED_ACCOUNT_FLG'; 
         attrib FEE_BASED_FLG length = $1
            format = $1.
            informat = $1.
            label = 'FEE_BASED_FLG'; 
         attrib ANNUAL_FEES_AMT length = 8
            format = 20.5
            informat = 20.5
            label = 'ANNUAL_FEES_AMT'; 
         attrib MONTHLY_FEES_AMT length = 8
            format = 20.5
            informat = 20.5
            label = 'MONTHLY_FEES_AMT'; 
         attrib CAMPAIGN_CD length = $30
            format = $30.
            informat = $30.
            label = 'CAMPAIGN_CD'; 
         attrib COMMUNICATION_CD length = $30
            format = $30.
            informat = $30.
            label = 'COMMUNICATION_CD'; 
         attrib REGISTERED_ONLINE_DT length = 8
            format = DATETIME20.
            informat = DATETIME20.
            label = 'REGISTERED_ONLINE_DT'; 
         attrib FIRST_LOGIN_DT length = 8
            format = DATETIME20.
            informat = DATETIME20.
            label = 'FIRST_LOGIN_DT'; 
         attrib ONLINE_BILL_PAYMENT_FLG length = $1
            format = $1.
            informat = $1.
            label = 'ONLINE_BILL_PAYMENT_FLG'; 
         attrib ID_VERIFICATION_TYPE_CD length = $3
            format = $3.
            informat = $3.
            label = 'ID_VERIFICATION_TYPE_CD'; 
         attrib PREVIOUS_ACCOUNT_ID length = $32
            format = $32.
            informat = $32.
            label = 'PREVIOUS_ACCOUNT_ID'; 
         attrib OPEN_BRANCH_FINANCIAL_UNIT_ID length = $32
            format = $32.
            informat = $32.
            label = 'OPEN_BRANCH_FINANCIAL_UNIT_ID'; 
         attrib PRIM_BRANCH_FINANCIAL_UNIT_ID length = $32
            format = $32.
            informat = $32.
            label = 'PRIM_BRANCH_FINANCIAL_UNIT_ID'; 
         attrib FINANCIAL_APPLICATION_ID length = $32
            format = $32.
            informat = $32.
            label = 'FINANCIAL_APPLICATION_ID'; 
         attrib CREDIT_FACILITY_ID length = $40
            format = $40.
            informat = $40.
            label = 'CREDIT_FACILITY_ID'; 
         attrib FUTURE_MARGIN_INCOME_AMT length = 8
            format = 20.5
            informat = 20.5
            label = 'FUTURE_MARGIN_INCOME_AMT'; 
         attrib IN_DEFAULT_FLG length = $1
            format = $1.
            informat = $1.
            label = 'IN_DEFAULT_FLG'; 
         attrib FINANCIAL_BOOK_ID length = $32
            format = $32.
            informat = $32.
            label = 'FINANCIAL_BOOK_ID'; 
         attrib IRRECOVERABLE_FLG length = $1
            format = $1.
            informat = $1.
            label = 'IRRECOVERABLE_FLG'; 
         attrib OWNED_BY_INTERNAL_ORG_ID length = $32
            format = $32.
            informat = $32.
            label = 'OWNED_BY_INTERNAL_ORG_ID'; 
         attrib PREVIOUS_BANK_EXTERNAL_ORG_ID length = $32
            format = $32.
            informat = $32.
            label = 'PREVIOUS_BANK_EXTERNAL_ORG_ID'; 
         attrib NETTING_SET_ID length = $32
            format = $32.
            informat = $32.
            label = 'NETTING_SET_ID'; 
         attrib REVOLVING_FLG length = $1
            format = $1.
            informat = $1.
            label = 'REVOLVING_FLG'; 
         attrib SOURCE_CHANNEL_CD length = $3
            format = $3.
            informat = $3.
            label = 'SOURCE_CHANNEL_CD'; 
         attrib GRACE_PERIOD_DAYS_CNT length = 8
            format = 7.
            informat = 7.
            label = 'GRACE_PERIOD_DAYS_CNT'; 
         attrib REMARGINING_DAYS_CNT length = 8
            format = 7.
            informat = 7.
            label = 'REMARGINING_DAYS_CNT'; 
         attrib FINANCIAL_CALENDAR_ID length = $32
            format = $32.
            informat = $32.
            label = 'FINANCIAL_CALENDAR_ID'; 
         attrib DAY_BASIS_CD length = $10
            format = $10.
            informat = $10.
            label = 'DAY_BASIS_CD'; 
         attrib PORTFOLIO_ID length = $32
            format = $32.
            informat = $32.
            label = 'PORTFOLIO_ID'; 
         attrib SECURITIZATION_POOL_ID length = $32
            format = $32.
            informat = $32.
            label = 'SECURITIZATION_POOL_ID'; 
         attrib RECEIVABLES_POOL_ID length = $32
            format = $32.
            informat = $32.
            label = 'RECEIVABLES_POOL_ID'; 
         attrib ACCOUNT_USAGE_TYPE_CD length = $3
            format = $3.
            informat = $3.
            label = 'ACCOUNT_USAGE_TYPE_CD'; 
         attrib RISK_ALARM_FLG length = $1
            format = $1.
            informat = $1.
            label = 'RISK_ALARM_FLG'; 
         attrib LOW_PROFITABILITY_FLG length = $1
            format = $1.
            informat = $1.
            label = 'LOW_PROFITABILITY_FLG'; 
         attrib ACCOUNT_LIFECYCLE_STG_CD length = $3
            format = $3.
            informat = $3.
            label = 'ACCOUNT_LIFECYCLE_STG_CD'; 
         attrib ATTRITION_ALARM_FLG length = $1
            format = $1.
            informat = $1.
            label = 'ATTRITION_ALARM_FLG'; 
         attrib BALANCE_FROZEN_FLG length = $1
            format = $1.
            informat = $1.
            label = 'BALANCE_FROZEN_FLG'; 
         attrib BALANCE_FROZEN_DT length = 8
            format = DATETIME20.
            informat = DATETIME20.
            label = 'BALANCE_FROZEN_DT'; 
         attrib ACCOUNT_BLOCK_REASON_CD length = $3
            format = $3.
            informat = $3.
            label = 'ACCOUNT_BLOCK_REASON_CD'; 
         attrib TAXATION_STATE_CD length = $4
            format = $4.
            informat = $4.
            label = 'TAXATION_STATE_CD'; 
         attrib EFFECTIVE_MATURITY_YEAR_NO length = 8
            format = 9.3
            informat = 9.3
            label = 'EFFECTIVE_MATURITY_YEAR_NO'; 
         attrib GL_ACCOUNT_ID length = $32
            format = $32.
            informat = $32.
            label = 'GL_ACCOUNT_ID'; 
         attrib FROM_OTHER_INSTITUTION_FLG length = $1
            format = $1.
            informat = $1.
            label = 'FROM_OTHER_INSTITUTION_FLG'; 
         attrib ACCOUNT_RENEWAL_CNT length = 8
            format = 7.
            informat = 7.
            label = 'ACCOUNT_RENEWAL_CNT'; 
         attrib BALANCE_TRANSFER_DT length = 8
            format = DATETIME20.
            informat = DATETIME20.
            label = 'BALANCE_TRANSFER_DT'; 
         attrib BALANCE_TRANSFER_AMT length = 8
            format = 20.5
            informat = 20.5
            label = 'BALANCE_TRANSFER_AMT'; 
         attrib BALANCE_TRANSFER_CNT length = 8
            format = 7.
            informat = 7.
            label = 'BALANCE_TRANSFER_CNT'; 
         attrib BASE_LONG_TERM_APR_RT length = 8
            format = 11.4
            informat = 11.4
            label = 'BASE_LONG_TERM_APR_RT'; 
         attrib BROKER_FLG length = $1
            format = $1.
            informat = $1.
            label = 'BROKER_FLG'; 
         attrib MULT_RATE_FLG length = $1
            format = $1.
            informat = $1.
            label = 'MULT_RATE_FLG'; 
         attrib AUTO_DEBIT_ACCOUNT_NO length = $32
            format = $32.
            informat = $32.
            label = 'AUTO_DEBIT_ACCOUNT_NO'; 
         attrib WORST_STATUS_LAST_12_MTH_CD length = $3
            format = $3.
            informat = $3.
            label = 'WORST_STATUS_LAST_12_MTH_CD'; 
         attrib WORST_STATUS_LAST_12_MTH_DT length = 8
            format = DATETIME20.
            informat = DATETIME20.
            label = 'WORST_STATUS_LAST_12_MTH_DT'; 
         attrib BALANCE_TRNSF_OTHER_ACCT_CNT length = 8
            format = 7.
            informat = 7.
            label = 'BALANCE_TRNSF_OTHER_ACCT_CNT'; 
         attrib EFFECTIVE_FROM_DTTM length = 8
            format = DATETIME20.
            informat = DATETIME20.
            label = 'EFFECTIVE_FROM_DTTM'; 
         attrib EFFECTIVE_TO_DTTM length = 8
            format = DATETIME20.
            informat = DATETIME20.
            label = 'EFFECTIVE_TO_DTTM'; 
         attrib COUNTERPARTY_ID length = $32
            format = $32.
            informat = $32.
            label = 'COUNTERPARTY_ID'; 
         attrib INSURED_BY_COUNTERPARTY_ID length = $32
            format = $32.
            informat = $32.
            label = 'INSURED_BY_COUNTERPARTY_ID'; 
         attrib STATEMENT_FREQUENCY_CD length = $3
            format = $3.
            informat = $3.
            label = 'STATEMENT_FREQUENCY_CD'; 
         attrib SECURITY_DEPOSIT_AMT length = 8
            format = 20.5
            informat = 20.5
            label = 'SECURITY_DEPOSIT_AMT'; 
         attrib SECURITY_DEPOSIT_REFUND_AMT length = 8
            format = 20.5
            informat = 20.5
            label = 'SECURITY_DEPOSIT_REFUND_AMT'; 
         attrib FIRST_PAYMENT_DT length = 8
            format = DATETIME20.
            informat = DATETIME20.
            label = 'FIRST_PAYMENT_DT'; 
         attrib LAST_PAYMENT_DT length = 8
            format = DATETIME20.
            informat = DATETIME20.
            label = 'LAST_PAYMENT_DT'; 
         attrib FIRST_RESET_DT length = 8
            format = DATETIME20.
            informat = DATETIME20.
            label = 'FIRST_RESET_DT'; 
         attrib LAST_RESET_DT length = 8
            format = DATETIME20.
            informat = DATETIME20.
            label = 'LAST_RESET_DT'; 
         attrib RESETS_PER_ANNUM_NO length = 8
            format = 6.
            informat = 6.
            label = 'RESETS_PER_ANNUM_NO'; 
         attrib PRINCIPAL_PAYMENT_TYPE_CD length = $3
            format = $3.
            informat = $3.
            label = 'PRINCIPAL_PAYMENT_TYPE_CD'; 
         attrib PRINCIPAL_PAYMENT_AMT length = 8
            format = 20.5
            informat = 20.5
            label = 'PRINCIPAL_PAYMENT_AMT'; 
         attrib RATE_POLICY_ID length = $32
            format = $32.
            informat = $32.
            label = 'RATE_POLICY_ID'; 
         attrib SPREAD_RT length = 8
            format = 11.4
            informat = 11.4
            label = 'SPREAD_RT'; 
         attrib DISCOUNT_SPREAD_RT length = 8
            format = 11.4
            informat = 11.4
            label = 'DISCOUNT_SPREAD_RT'; 
         attrib INITIAL_CONTRACT_RT length = 8
            format = 11.4
            informat = 11.4
            label = 'INITIAL_CONTRACT_RT'; 
         attrib FIXED_MONTHLY_PREPAYMENT_RT length = 8
            format = 11.4
            informat = 11.4
            label = 'FIXED_MONTHLY_PREPAYMENT_RT'; 
         attrib CAPITAL_ALLOCATION_ID length = $32
            format = $32.
            informat = $32.
            label = 'CAPITAL_ALLOCATION_ID'; 
         attrib CAPITAL_COST_ID length = $32
            format = $32.
            informat = $32.
            label = 'CAPITAL_COST_ID'; 
         attrib SEGMENT_ID length = $32
            format = $32.
            informat = $32.
            label = 'SEGMENT_ID'; 
         attrib NEAR_BRANCH_FINANCIAL_UNIT_ID length = $32
            format = $32.
            informat = $32.
            label = 'NEAR_BRANCH_FINANCIAL_UNIT_ID'; 
         attrib STATEMENT_OPT_FLG length = $1
            format = $1.
            informat = $1.
            label = 'STATEMENT_OPT_FLG'; 
         attrib VALUE_SCALING_FACTOR_RT length = 8
            format = 11.4
            informat = 11.4
            label = 'VALUE_SCALING_FACTOR_RT'; 
         attrib INTERNAL_REPORTING_CATEGORY_CD length = $3
            format = $3.
            informat = $3.
            label = 'INTERNAL_REPORTING_CATEGORY_CD'; 
         attrib CONVEXITY_ADJUSTMENT_FLG length = $1
            format = $1.
            informat = $1.
            label = 'CONVEXITY_ADJUSTMENT_FLG'; 
         attrib ARREARS_PAYMENT_CD length = $3
            format = $3.
            informat = $3.
            label = 'ARREARS_PAYMENT_CD'; 
         attrib QUANTO_FEATURE_ID length = $32
            format = $32.
            informat = $32.
            label = 'QUANTO_FEATURE_ID'; 
         attrib CASH_INTENSIVE_BUSINESS_FLG length = $1
            format = $1.
            informat = $1.
            label = 'CASH_INTENSIVE_BUSINESS_FLG'; 
         attrib LETTER_OF_CREDIT_ONFILE_FLG length = $1
            format = $1.
            informat = $1.
            label = 'LETTER_OF_CREDIT_ONFILE_FLG'; 
         attrib TRADE_FINANCE_FLG length = $1
            format = $1.
            informat = $1.
            label = 'TRADE_FINANCE_FLG'; 
         attrib ANNUITY_PAYMENT_TYPE_CD length = $3
            format = $3.
            informat = $3.
            label = 'ANNUITY_PAYMENT_TYPE_CD'; 
         attrib INTEREST_PAYMENT_TYPE_CD length = $3
            format = $3.
            informat = $3.
            label = 'INTEREST_PAYMENT_TYPE_CD'; 
         attrib INTEREST_PAYMENT_TIME_FREQ_CD length = $3
            format = $3.
            informat = $3.
            label = 'INTEREST_PAYMENT_TIME_FREQ_CD'; 
         attrib LIQUIDITY_CATEGORY_TYPE_CD length = $3
            format = $3.
            informat = $3.
            label = 'LIQUIDITY_CATEGORY_TYPE_CD'; 
         attrib HOLIDAY_DATE_ROLL_CONV_CD length = $3
            format = $3.
            informat = $3.
            label = 'HOLIDAY_DATE_ROLL_CONV_CD'; 
         attrib WEEKEND_DATE_ROLL_CONV_CD length = $3
            format = $3.
            informat = $3.
            label = 'WEEKEND_DATE_ROLL_CONV_CD'; 
         attrib EXPENSE_ALLOCATION_ID length = $32
            format = $32.
            informat = $32.
            label = 'EXPENSE_ALLOCATION_ID'; 
         attrib FIRST_INTEREST_PAYMENT_DT length = 8
            format = DATETIME20.
            informat = DATETIME20.
            label = 'FIRST_INTEREST_PAYMENT_DT'; 
         attrib LAST_INTEREST_PAYMENT_DT length = 8
            format = DATETIME20.
            informat = DATETIME20.
            label = 'LAST_INTEREST_PAYMENT_DT'; 
         attrib IRB_DUMMY_TYPE_CD length = $3
            format = $3.
            informat = $3.
            label = 'IRB_DUMMY_TYPE_CD'; 
         attrib IRB_SRC_ACCOUNT_ID length = $32
            format = $32.
            informat = $32.
            label = 'IRB_SRC_ACCOUNT_ID'; 
         attrib BRCA length = $3
            format = $3.
            informat = $3.
            label = 'BRCA'; 
         attrib FINANCIAL_INSTRUMENT_TYPE_CD length = $3
            format = $3.
            informat = $3.
            label = 'FINANCIAL_INSTRUMENT_TYPE_CD'; 
         attrib SETTLEMENT_TYPE_CD length = $3
            format = $3.
            informat = $3.
            label = 'SETTLEMENT_TYPE_CD'; 
         call missing(of _all_);
         stop;
      run;
      
      %rcSet(&syserr); 
      
      /*---- Create the integrity constraints for a table  ----*/ 
      %put %str(NOTE: Creating integrity constraints ...);
      proc datasets library=work_ia nolist;
         modify FINANCIAL_ACCOUNT_OPT_BK;
            ic create not null (ACCOUNT_ID);
            ic create not null (SOURCE_SYSTEM_CD);
            ic create not null (FINANCIAL_ACCOUNT_TYPE_CD);
            ic create not null (ACCOUNT_STATUS_CD);
            ic create not null (CURRENCY_CD);
            ic create not null (PRIM_BRANCH_FINANCIAL_UNIT_ID);
            ic create not null (BRCA);
            ic create Index1 = primary key (ACCOUNT_ID VALID_FROM_DTTM);
      quit;
      
      %rcSet(&syserr); 
      
   %end;  /* if table does not exist  */ 
   
   /*---- Append  ----*/ 
   %put %str(NOTE: Appending data ...);
   
   proc append base = work_ia.FINANCIAL_ACCOUNT_OPT_BK 
      data = &etls_lastTable (&etls_tableOptions)  force ; 
    run; 
   
   %rcSet(&syserr); 
   
   proc datasets lib = work nolist nowarn memtype = (data view);
      delete WIROWJB;
   quit;
   
%mend etls_loader;
%etls_loader;

%let etls_recCheckExist = 0; 
%let etls_recnt = 0; 
%macro etls_recordCheck; 
   %let etls_recCheckExist = %eval(%sysfunc(exist(work_ia.FINANCIAL_ACCOUNT_OPT_BK, DATA)) or 
         %sysfunc(exist(work_ia.FINANCIAL_ACCOUNT_OPT_BK, VIEW))); 
   
   %if (&etls_recCheckExist) %then
   %do;
      %local etls_syntaxcheck; 
      %let etls_syntaxcheck = %sysfunc(getoption(syntaxcheck)); 
      /* Turn off syntaxcheck option to perform following steps  */ 
      options nosyntaxcheck;
      
      proc contents data = work_ia.FINANCIAL_ACCOUNT_OPT_BK out = work.etls_contents(keep = nobs) noprint; 
      run; 
      
      data _null_; 
         set work.etls_contents (obs = 1); 
         call symput("etls_recnt", left(put(nobs,32.))); 
      run;
      
      proc datasets lib = work nolist nowarn memtype = (data view);
         delete etls_contents;
      quit;
      
      /* Reset syntaxcheck option to previous setting  */ 
      options &etls_syntaxcheck; 
   %end;
%mend etls_recordCheck;
%etls_recordCheck;



/**  Step end Table Loader **/

/*==========================================================================* 
 * Step:            Вяжем актуальные записи со сделками   A5Y50FNE.AQ000891 * 
 * Transform:       Join                                                    * 
 * Description:                                                             * 
 *                                                                          * 
 * Source Tables:   Генерация BKtpOut - work.W1MHBF25     A5Y50FNE.AO0004O0 * 
 *                  actual recs - work.W1BAZY4C           A5Y50FNE.AO0004NX * 
 * Target Table:    SQL Join - work.WVWXH9A               A5Y50FNE.AO0004O1 * 
 *==========================================================================*/ 

%let transformID = %quote(A5Y50FNE.AQ000891);
%let trans_rc = 0;
%let etls_stepStartTime = %sysfunc(datetime(), datetime20.); 

%let etls_recCheckExist = 0; 
%let etls_recnt = 0; 
%macro etls_recordCheck; 
   %let etls_recCheckExist = %eval(%sysfunc(exist(work.W1MHBF25, DATA)) or 
         %sysfunc(exist(work.W1MHBF25, VIEW))); 
   
   %if (&etls_recCheckExist) %then
   %do;
      %local etls_syntaxcheck; 
      %let etls_syntaxcheck = %sysfunc(getoption(syntaxcheck)); 
      /* Turn off syntaxcheck option to perform following steps  */ 
      options nosyntaxcheck;
      
      proc contents data = work.W1MHBF25 out = work.etls_contents(keep = nobs) noprint; 
      run; 
      
      data _null_; 
         set work.etls_contents (obs = 1); 
         call symput("etls_recnt", left(put(nobs,32.))); 
      run;
      
      proc datasets lib = work nolist nowarn memtype = (data view);
         delete etls_contents;
      quit;
      
      /* Reset syntaxcheck option to previous setting  */ 
      options &etls_syntaxcheck; 
   %end;
%mend etls_recordCheck;
%etls_recordCheck;

%let SYS_SQL_IP_SPEEDO = Y;
%let SYS_SQL_MAPPUTTO = sas_put;
%let SYS_SQLREDUCEPUT = DBMS;
%global etls_sql_pushDown;
%let etls_sql_pushDown = -1;
option DBIDIRECTEXEC;

proc datasets lib = work nolist nowarn memtype = (data view);
   delete WVWXH9A;
quit;

proc sql;
   create view work.WVWXH9A as
   select
      W1MHBF25.VALID_FROM_DTTM length = 8   
         format = DATETIME20.
         informat = DATETIME20.
         label = 'VALID_FROM_DTTM',
      W1MHBF25.VALID_TO_DTTM length = 8   
         format = DATETIME20.
         informat = DATETIME20.
         label = 'VALID_TO_DTTM',
      W1BAZY4C.FINANCIAL_INSTRUMENT_ID length = 32   
         format = $32.
         informat = $32.
         label = 'FINANCIAL_INSTRUMENT_ID',
      W1MHBF25.DRV_ACCOUNT_ID as REFERENCE_ACCOUNT_ID length = 32   
         format = $32.
         informat = $32.
         label = 'FINANCIAL_ACCOUNT_ID'
   from
      work.W1MHBF25 inner join 
      work.W1BAZY4C
         on
         (
            W1MHBF25.IRB_SRC_ACCOUNT_ID = W1BAZY4C.IRB_SRC_ACCOUNT_ID
         )
   ;
quit;

%global etls_sql_pushDown;
%let etls_sql_pushDown = &sys_sql_ip_all;

%rcSet(&sqlrc); 



/**  Step end Вяжем актуальные записи со сделками **/

/*==========================================================================* 
 * Step:            Table Loader                          A5Y50FNE.AQ000892 * 
 * Transform:       Table Loader (Version 2.1)                              * 
 * Description:                                                             * 
 *                                                                          * 
 * Source Table:    SQL Join - work.WVWXH9A               A5Y50FNE.AO0004O1 * 
 * Target Table:    FIN_INSTR_ASSOC_OPT_BK -              A5Y50FNE.AE000128 * 
 *                   work_ia.FIN_INSTR_ASSOC_OPT_BK                         * 
 *==========================================================================*/ 

%let transformID = %quote(A5Y50FNE.AQ000892);
%let trans_rc = 0;
%let etls_stepStartTime = %sysfunc(datetime(), datetime20.); 

%let SYSLAST = %nrquote(work.WVWXH9A); 

%let SYS_SQL_IP_SPEEDO = Y;
%let SYS_SQL_MAPPUTTO = sas_put;
%let SYS_SQLREDUCEPUT = DBMS;
%global etls_sql_pushDown;
%let etls_sql_pushDown = -1;
option DBIDIRECTEXEC;

%global etls_tableExist;
%global etls_numIndex;
%global etls_lastTable;
%let etls_tableExist = -1; 
%let etls_numIndex = -1; 
%let etls_lastTable = &SYSLAST; 

/*---- Define load data macro  ----*/ 

/* --------------------------------------------------------------
   Load Technique Selection: Replace - EntireTable
   Constraint and index action selections: 'INIT','ASIS','ASIS','ASIS'
   Additional options selections... 
      Set unmapped to missing on updates: false 
   -------------------------------------------------------------- */
%macro etls_loader;

   %let etls_tableOptions = ;
   
   /*---- Map the columns  ----*/ 
   proc datasets lib = work nolist nowarn memtype = (data view);
      delete WIROWLS;
   quit;
   
   %put %str(NOTE: Mapping columns ...);
   proc sql;
      create view work.WIROWLS as
         select
            FINANCIAL_INSTRUMENT_ID as FINANCIAL_INSTRUMENT_ASSOC_ID,
            VALID_FROM_DTTM,
            VALID_TO_DTTM,
            ('DRV') as FINANCIAL_INSTR_ASSOC_TYPE_CD length = 3
               format = $3.
               informat = $3.,
            FINANCIAL_INSTRUMENT_ID,
            REFERENCE_ACCOUNT_ID
      from &etls_lastTable
      ;
   quit;
   
   %let SYSLAST = work.WIROWLS;
   
   %let etls_lastTable = &SYSLAST; 
   %let etls_tableOptions = ; 
   
   /* Determine if the target table exists  */ 
   %let etls_tableExist = %eval(%sysfunc(exist(work_ia.FIN_INSTR_ASSOC_OPT_BK, DATA)) or 
         %sysfunc(exist(work_ia.FIN_INSTR_ASSOC_OPT_BK, VIEW))); 
   
   %if &etls_tableExist %then 
   %do;/* table exists  */ 
      %let etls_hasPreExistingConstraint=0; 
      
      proc datasets lib = work nolist nowarn memtype = (data view);
         delete etls_commands etls_commands_F;
      quit;
      
      %let etls_otherTablesReferToThisTable=0;
      
      %macro etls_CIContents(table=,workTableOut=,inDSOptions=);
         %put NOTE: Building table listing Constraints and Indexes for: &table;
         proc datasets lib=work nolist; delete &workTableOut; quit;
         proc contents data=&table&inDSOptions out2=&workTableOut noprint; run;
         
         data &workTableOut;
            length name $60 type $20 icown idxUnique idxNoMiss $3 recreate $600;
            set &workTableOut;
            type=upcase(type);
            if type eq 'REFERENTIAL' then
            do;
               put "WARNING%QUOTE(:) Target table is referenced by constraints in"
                    " another table: " ref;
               call symput('etls_otherTablesReferToThisTable','1');
               delete;
            end;
            if type='INDEX' and ICOwn eq 'YES' then delete;
         run;
         %rcSet(&syserr); 
         
      %mend etls_CIContents;
      
      %etls_CIContents(table=work_ia.FIN_INSTR_ASSOC_OPT_BK, workTableOut=etls_commands, inDSOptions=);
      
      %if &etls_otherTablesReferToThisTable %then 
         %put WARNING%QUOTE(:) Replacing entire table will fail. Consider an alternate load technique or revising constraints.; 
      %else 
      %do; /* okay - remove foreign keys  */ 
      
         data etls_commands_F; 
            set etls_commands; 
            if upcase(type)="FOREIGN KEY" then 
            do; 
               command='ic delete '||trim(name)||';';
               output etls_commands_F; 
            end; 
         run; 
         
         %put %str(NOTE: Removing foreign keys before dropping table...);
         data _null_;
            set etls_commands_F;
            %rcSet(&syserr); 
            
      %end; /* okay - remove foreign keys  */ 
      
      proc datasets lib = work nolist nowarn memtype = (data view);
         delete etls_commands etls_commands_F;
      quit;
      
      /*---- Drop a table  ----*/ 
      %put %str(NOTE: Dropping table ...);
      proc datasets lib = work_ia nolist nowarn memtype = (data view);
         delete FIN_INSTR_ASSOC_OPT_BK;
      quit;
      
      %rcSet(&syserr); 
      
      %let etls_tableExist = 0;
      
   %end; /* table exists  */ 
   
   /*---- Create a new table  ----*/ 
   %if (&etls_tableExist eq 0) %then 
   %do;  /* if table does not exist  */ 
   
      %put %str(NOTE: Creating table ...);
      
      data work_ia.FIN_INSTR_ASSOC_OPT_BK;
         attrib FINANCIAL_INSTRUMENT_ASSOC_ID length = $32
            format = $32.
            informat = $32.
            label = 'FINANCIAL_INSTRUMENT_ASSOC_ID'; 
         attrib VALID_FROM_DTTM length = 8
            format = DATETIME20.
            informat = DATETIME20.
            label = 'VALID_FROM_DTTM'; 
         attrib VALID_TO_DTTM length = 8
            format = DATETIME20.
            informat = DATETIME20.
            label = 'VALID_TO_DTTM'; 
         attrib FINANCIAL_INSTR_ASSOC_TYPE_CD length = $3
            format = $3.
            informat = $3.
            label = 'FINANCIAL_INSTR_ASSOC_TYPE_CD'; 
         attrib FINANCIAL_INSTRUMENT_ID length = $32
            format = $32.
            informat = $32.
            label = 'FINANCIAL_INSTRUMENT_ID'; 
         attrib REFERENCE_ACCOUNT_ID length = $32
            format = $32.
            informat = $32.
            label = 'FINANCIAL_ACCOUNT_ID'; 
         call missing(of _all_);
         stop;
      run;
      
      %rcSet(&syserr); 
      
      /*---- Create the integrity constraints for a table  ----*/ 
      %put %str(NOTE: Creating integrity constraints ...);
      proc datasets library=work_ia nolist;
         modify FIN_INSTR_ASSOC_OPT_BK;
            ic create not null (FINANCIAL_INSTRUMENT_ASSOC_ID);
            ic create not null (VALID_FROM_DTTM);
            ic create not null (VALID_TO_DTTM);
            ic create not null (FINANCIAL_INSTR_ASSOC_TYPE_CD);
            ic create not null (FINANCIAL_INSTRUMENT_ID);
            ic create not null (REFERENCE_ACCOUNT_ID);
            ic create pk_index = primary key (FINANCIAL_INSTRUMENT_ASSOC_ID VALID_FROM_DTTM);
      quit;
      
      %rcSet(&syserr); 
      
   %end;  /* if table does not exist  */ 
   
   /*---- Append  ----*/ 
   %put %str(NOTE: Appending data ...);
   
   proc append base = work_ia.FIN_INSTR_ASSOC_OPT_BK 
      data = &etls_lastTable (&etls_tableOptions)  force ; 
    run; 
   
   %rcSet(&syserr); 
   
   proc datasets lib = work nolist nowarn memtype = (data view);
      delete WIROWLS;
   quit;
   
%mend etls_loader;
%etls_loader;

%let etls_recCheckExist = 0; 
%let etls_recnt = 0; 
%macro etls_recordCheck; 
   %let etls_recCheckExist = %eval(%sysfunc(exist(work_ia.FIN_INSTR_ASSOC_OPT_BK, DATA)) or 
         %sysfunc(exist(work_ia.FIN_INSTR_ASSOC_OPT_BK, VIEW))); 
   
   %if (&etls_recCheckExist) %then
   %do;
      %local etls_syntaxcheck; 
      %let etls_syntaxcheck = %sysfunc(getoption(syntaxcheck)); 
      /* Turn off syntaxcheck option to perform following steps  */ 
      options nosyntaxcheck;
      
      proc contents data = work_ia.FIN_INSTR_ASSOC_OPT_BK out = work.etls_contents(keep = nobs) noprint; 
      run; 
      
      data _null_; 
         set work.etls_contents (obs = 1); 
         call symput("etls_recnt", left(put(nobs,32.))); 
      run;
      
      proc datasets lib = work nolist nowarn memtype = (data view);
         delete etls_contents;
      quit;
      
      /* Reset syntaxcheck option to previous setting  */ 
      options &etls_syntaxcheck; 
   %end;
%mend etls_recordCheck;
%etls_recordCheck;



/**  Step end Table Loader **/

/*==========================================================================* 
 * Step:            Завершить модуль                      A5Y50FNE.AQ000893 * 
 * Transform:       Завершить модуль                                        * 
 * Description:                                                             * 
 *==========================================================================*/ 

%let transformID = %quote(A5Y50FNE.AQ000893);
%let trans_rc = 0;
%let etls_stepStartTime = %sysfunc(datetime(), datetime20.); 

%let _INPUT_count = 0; 
%let _OUTPUT_count = 0; 


/*****************************************************************
* ВЕРСИЯ:
*   $Id: transform_job_finish.sas 247 2012-04-03 07:31:10Z nesterenok $
*
******************************************************************
* НАЗНАЧЕНИЕ:
*   Регистрирует конец модуля ETL.
*
* ПАРАМЕТРЫ:
*   нет
*
******************************************************************/

%macro transform_job_finish;

   /* Продолжаем модуль */
   %job_continue_reg(mpJobType=JOB, mpJobName=&ETLS_JobName., mpPostEvent=N);

   /* Завершаем модуль */
   %job_finish_reg(mpJobType=JOB);

%mend transform_job_finish;

%transform_job_finish;


%rcSet(&syserr); 
%rcSet(&sysrc); 
%rcSet(&sqlrc); 



/**  Step end Завершить модуль **/

%let etls_endTime = %sysfunc(datetime(),datetime.);



/**  Job end 042_944_Structure_FINANCIAL_ACCOUNT_OPT_BK **/

/* Reset jobid and name */
%let jobID = %quote(A569C89V.AQ0000CK);
%let etls_jobName = %nrquote(090_364_Stream_Midas_Fin_Account_BK);

/**************************************************************************** 
 * Job:             042_941_Structure_FINANCIAL_ACCOUNT_  A5Y50FNE.AN0000VJ * 
 *                  CSG_BK                                                  * 
 * Description:                                                             * 
 *                                                                          * 
 * Metadata Server: bravo14                                                 * 
 * Port:            8561                                                    * 
 * Location:        /DWH_DWHDDS_IA/Jobs/042_Structure/Financial_Account     * 
 *                                                                          * 
 * Server:          SASApp                                A5C46MZY.AQ000002 * 
 *                                                                          * 
 * Source Table:    FINANCIAL_INSTRUMENT_CSG_BK -         A5Y50FNE.AE00013T * 
 *                   work_ia.FINANCIAL_INSTRUMENT_CSG_BK                    * 
 * Target Table:    FIN_INSTR_ASSOC_CSG_BK -              A5Y50FNE.AE000120 * 
 *                   work_ia.FIN_INSTR_ASSOC_CSG_BK                         * 
 *                                                                          * 
 * Generated on:    16 Июль 2013 г. 17:14:47 MSD                            * 
 * Generated by:    sasdwh                                                  * 
 * Version:         SAS Data Integration Studio 4.5                         * 
 ****************************************************************************/ 

/* General macro variables  */ 
%let jobID = %quote(A5Y50FNE.AN0000VJ);
%let etls_jobName = %nrquote(042_941_Structure_FINANCIAL_ACCOUNT_CSG_BK);
%let etls_userID = %nrquote(sasdwh);


/* Create metadata macro variables */
%let IOMServer      = %nrquote(SASApp);
%let metaPort       = %nrquote(8561);
%let metaServer     = %nrquote(bravo14);

/* Set metadata options */
options metaport       = &metaPort 
        metaserver     = "&metaServer"; 

/* Setup for capturing job status  */ 
%let etls_startTime = %sysfunc(datetime(),datetime.);
%let etls_recordsBefore = 0;
%let etls_recordsAfter = 0;
%let etls_lib = 0;
%let etls_table = 0;

%global etls_debug; 
%macro etls_setDebug; 
   %if %str(&etls_debug) ne 0 %then 
      OPTIONS MPRINT%str(;); 
%mend; 
%etls_setDebug; 

/*==========================================================================* 
 * Step:            Начать модуль                         A5Y50FNE.AQ000A2Q * 
 * Transform:       Начать модуль                                           * 
 * Description:                                                             * 
 *==========================================================================*/ 

%let transformID = %quote(A5Y50FNE.AQ000A2Q);
%let trans_rc = 0;
%let etls_stepStartTime = %sysfunc(datetime(), datetime20.); 

%let _INPUT_count = 0; 
%let _OUTPUT_count = 0; 


/*****************************************************************
* ВЕРСИЯ:
*   $Id: transform_job_start.sas 1747 2012-08-01 11:26:13Z nesterenok $
*
******************************************************************
* НАЗНАЧЕНИЕ:
*   Регистрирует начало модуля ETL.
*
* ПАРАМЕТРЫ:
*   нет
*
******************************************************************/

%macro transform_job_start;

   /* Продолжаем поток (или создаем новый) */
   %local lmvStreamName;
   %if %sysfunc(sysexist(LSB_JOBNAME)) %then
      %let lmvStreamName = %scan(%sysfunc(sysget(LSB_JOBNAME)), 3, :);
   %else
      %let lmvStreamName = ;

   %job_continue_reg(mpJobType=STREAM, mpJobName=&lmvStreamName, mpPostEvent=N, mpForcedStart=Y);

   /* Для DI, начинаем поток заново, если старый был начат не сегодня */
   %if %length(&lmvStreamName) eq 0 and &STREAM_START_DT ne %sysfunc(today()) %then %do;
      %job_start_reg(mpJobType=STREAM, mpParentJobId=, mpJobName=&lmvStreamName.);
   %end;

   /* Начинаем модуль */
   %job_start_reg(mpJobType=JOB, mpParentJobId=&STREAM_ID, mpJobName=&ETLS_JobName.);

%mend transform_job_start;

%transform_job_start;


%rcSet(&syserr); 
%rcSet(&sysrc); 
%rcSet(&sqlrc); 



/**  Step end Начать модуль **/

/*==========================================================================* 
 * Step:            Extract                               A5Y50FNE.AQ000A2R * 
 * Transform:       Extract                                                 * 
 * Description:                                                             * 
 *                                                                          * 
 * Source Table:    FINANCIAL_INSTRUMENT_CSG_BK -         A5Y50FNE.AE00013T * 
 *                   work_ia.FINANCIAL_INSTRUMENT_CSG_BK                    * 
 * Target Table:    Extract - work.W1MOEVV1               A5Y50FNE.AO0005NI * 
 *==========================================================================*/ 

%let transformID = %quote(A5Y50FNE.AQ000A2R);
%let trans_rc = 0;
%let etls_stepStartTime = %sysfunc(datetime(), datetime20.); 

%let etls_recCheckExist = 0; 
%let etls_recnt = 0; 
%macro etls_recordCheck; 
   %let etls_recCheckExist = %eval(%sysfunc(exist(work_ia.FINANCIAL_INSTRUMENT_CSG_BK, DATA)) or 
         %sysfunc(exist(work_ia.FINANCIAL_INSTRUMENT_CSG_BK, VIEW))); 
   
   %if (&etls_recCheckExist) %then
   %do;
      %local etls_syntaxcheck; 
      %let etls_syntaxcheck = %sysfunc(getoption(syntaxcheck)); 
      /* Turn off syntaxcheck option to perform following steps  */ 
      options nosyntaxcheck;
      
      proc contents data = work_ia.FINANCIAL_INSTRUMENT_CSG_BK out = work.etls_contents(keep = nobs) noprint; 
      run; 
      
      data _null_; 
         set work.etls_contents (obs = 1); 
         call symput("etls_recnt", left(put(nobs,32.))); 
      run;
      
      proc datasets lib = work nolist nowarn memtype = (data view);
         delete etls_contents;
      quit;
      
      /* Reset syntaxcheck option to previous setting  */ 
      options &etls_syntaxcheck; 
   %end;
%mend etls_recordCheck;
%etls_recordCheck;

%let SYSLAST = %nrquote(work_ia.FINANCIAL_INSTRUMENT_CSG_BK); 

%let SYS_SQL_IP_SPEEDO = Y;
%let SYS_SQL_MAPPUTTO = sas_put;
%let SYS_SQLREDUCEPUT = DBMS;
%global etls_sql_pushDown;
%let etls_sql_pushDown = -1;
option DBIDIRECTEXEC;

/*---- Map the columns  ----*/ 
proc datasets lib = work nolist nowarn memtype = (data view);
   delete W1MOEVV1;
quit;

data _null_;
   put "NOTE: The following column(s) do not have a column mapping, so the"
        " value(s) will be set to missing: CLOSE_DT";
run;

%put %str(NOTE: Mapping columns ...);
proc sql;
   create table work.W1MOEVV1 as
      select
         VALID_FROM_DTTM,
         VALID_TO_DTTM,
         IRB_SRC_ACCOUNT_ID,
         ('MID') as SOURCE_SYSTEM_CD length = 3
            format = $3.
            informat = $3.
            label = 'SOURCE_SYSTEM_CD',
         (ifc(missing(KONDOR_A), '', cats(KONDOR_A))) as ACCOUNT_REGISTRATION_NM length = 100
            format = $100.
            informat = $100.
            label = 'ACCOUNT_REGISTRATION_NM',
         (ifc(missing(ARM302P_ID ), '', cats(FXMM_ID , '_', ARM302P_ID ))) as ALTERNATE_ACCOUNT_NM length = 40
            format = $40.
            informat = $40.
            label = 'ALTERNATE_ACCOUNT_NM',
         ('DRV') as FINANCIAL_ACCOUNT_TYPE_CD length = 3
            format = $3.
            informat = $3.
            label = 'FINANCIAL_ACCOUNT_TYPE_CD',
         BRCA,
         IRB_INSTR_STATUS_CD as ACCOUNT_STATUS_CD   
            label = 'ACCOUNT_STATUS_CD',
         DDAT as OPEN_DT   
            label = 'OPEN_DT',
         . as CLOSE_DT length = 8
            format = DATETIME20.
            informat = DATETIME20.
            label = 'corrected later',
         (coalesce(CURRENCY_CD, 'DUM')) as CURRENCY_CD length = 3
            format = $3.
            informat = $3.
            label = 'CURRENCY_CD',
         DAY_BASIS_CD,
         INTEREST_PAYMENT_TYPE_CD,
         ('CIS') as FINANCIAL_INSTRUMENT_TYPE_CD length = 3
            format = $3.
            informat = $3.
            label = 'FINANCIAL_INSTRUMENT_TYPE_CD',
         FINANCIAL_INSTRUMENT_ID
   from &SYSLAST
   ;
quit;

%let SYSLAST = work.W1MOEVV1;

%global etls_sql_pushDown;
%let etls_sql_pushDown = &sys_sql_ip_all;

%rcSet(&sqlrc); 



/**  Step end Extract **/

/*==========================================================================* 
 * Step:            Генерация BK                          A5Y50FNE.AQ000A2S * 
 * Transform:       Генерация BK                                            * 
 * Description:                                                             * 
 *                                                                          * 
 * Source Table:    Extract - work.W1MOEVV1               A5Y50FNE.AO0005NI * 
 * Target Table:    Генерация BKtpOut - work.W1MHBF25     A5Y50FNE.AO0005NJ * 
 *==========================================================================*/ 

%let transformID = %quote(A5Y50FNE.AQ000A2S);
%let trans_rc = 0;
%let etls_stepStartTime = %sysfunc(datetime(), datetime20.); 

%let etls_recCheckExist = 0; 
%let etls_recnt = 0; 
%macro etls_recordCheck; 
   %let etls_recCheckExist = %eval(%sysfunc(exist(work.W1MOEVV1, DATA)) or 
         %sysfunc(exist(work.W1MOEVV1, VIEW))); 
   
   %if (&etls_recCheckExist) %then
   %do;
      %local etls_syntaxcheck; 
      %let etls_syntaxcheck = %sysfunc(getoption(syntaxcheck)); 
      /* Turn off syntaxcheck option to perform following steps  */ 
      options nosyntaxcheck;
      
      proc contents data = work.W1MOEVV1 out = work.etls_contents(keep = nobs) noprint; 
      run; 
      
      data _null_; 
         set work.etls_contents (obs = 1); 
         call symput("etls_recnt", left(put(nobs,32.))); 
      run;
      
      proc datasets lib = work nolist nowarn memtype = (data view);
         delete etls_contents;
      quit;
      
      /* Reset syntaxcheck option to previous setting  */ 
      options &etls_syntaxcheck; 
   %end;
%mend etls_recordCheck;
%etls_recordCheck;

%let SYSLAST = %nrquote(work.W1MOEVV1); 

%let _INPUT_count = 1; 
%let _INPUT = work.W1MOEVV1;
%let _INPUT_connect = ;
%let _INPUT_engine = ;
%let _INPUT_memtype = DATA;
%let _INPUT_options = %nrquote();
%let _INPUT_alter = %nrquote();
%let _INPUT_path = %nrquote(/Extract_A5Y50FNE.AO0005NI%(WorkTable%));
%let _INPUT_type = 1;
%let _INPUT_label = %nrquote();

%let tpIn = work.W1MOEVV1;
%let tpIn_connect = ;
%let tpIn_engine = ;
%let tpIn_memtype = DATA;
%let tpIn_options = %nrquote();
%let tpIn_alter = %nrquote();
%let tpIn_path = %nrquote(/Extract_A5Y50FNE.AO0005NI%(WorkTable%));
%let tpIn_type = 1;
%let tpIn_label = %nrquote();

%let _OUTPUT_count = 1; 
%let _OUTPUT = work.W1MHBF25;
%let _OUTPUT_connect = ;
%let _OUTPUT_engine = ;
%let _OUTPUT_memtype = DATA;
%let _OUTPUT_options = %nrquote();
%let _OUTPUT_alter = %nrquote();
%let _OUTPUT_path = %nrquote(/Генерация BKtpOut_A5Y50FNE.AO0005NJ%(WorkTable%));
%let _OUTPUT_type = 1;
%let _OUTPUT_label = %nrquote();
/* List of target columns to keep  */ 
%let _OUTPUT_keep = DRV_ACCOUNT_ID MID_FINANCIAL_UNIT_ID_BRCA VALID_FROM_DTTM 
        VALID_TO_DTTM IRB_SRC_ACCOUNT_ID SOURCE_SYSTEM_CD 
        ACCOUNT_REGISTRATION_NM ALTERNATE_ACCOUNT_NM FINANCIAL_ACCOUNT_TYPE_CD 
        ACCOUNT_STATUS_CD OPEN_DT CLOSE_DT CURRENCY_CD DAY_BASIS_CD 
        INTEREST_PAYMENT_TYPE_CD FINANCIAL_INSTRUMENT_TYPE_CD 
        FINANCIAL_INSTRUMENT_ID;

%let tpOut = work.W1MHBF25;
%let tpOut_connect = ;
%let tpOut_engine = ;
%let tpOut_memtype = DATA;
%let tpOut_options = %nrquote();
%let tpOut_alter = %nrquote();
%let tpOut_path = %nrquote(/Генерация BKtpOut_A5Y50FNE.AO0005NJ%(WorkTable%));
%let tpOut_type = 1;
%let tpOut_label = %nrquote();
/* List of target columns to keep  */ 
%let tpOut_keep = DRV_ACCOUNT_ID MID_FINANCIAL_UNIT_ID_BRCA VALID_FROM_DTTM 
        VALID_TO_DTTM IRB_SRC_ACCOUNT_ID SOURCE_SYSTEM_CD 
        ACCOUNT_REGISTRATION_NM ALTERNATE_ACCOUNT_NM FINANCIAL_ACCOUNT_TYPE_CD 
        ACCOUNT_STATUS_CD OPEN_DT CLOSE_DT CURRENCY_CD DAY_BASIS_CD 
        INTEREST_PAYMENT_TYPE_CD FINANCIAL_INSTRUMENT_TYPE_CD 
        FINANCIAL_INSTRUMENT_ID;


proc datasets lib=work nolist nowarn memtype = (data view);
   delete W1MHBF25;
quit;

%let tpBK0 = %nrquote(2);
%let tpBK = %nrquote(FINANCIAL_ACCOUNT_DRV           );
%let tpBK1 = %nrquote(FINANCIAL_ACCOUNT_DRV           );
%let tpBK2 = %nrquote(FINANCIAL_UNIT_MID_BRCA         );
%let tpBK_count = %nrquote(2);
%let tpOptionalBK_count = %nrquote(0);
%let tpOptionalBK = ;

/* List of target columns to keep  */ 
%let _keep = DRV_ACCOUNT_ID MID_FINANCIAL_UNIT_ID_BRCA VALID_FROM_DTTM 
        VALID_TO_DTTM IRB_SRC_ACCOUNT_ID SOURCE_SYSTEM_CD 
        ACCOUNT_REGISTRATION_NM ALTERNATE_ACCOUNT_NM FINANCIAL_ACCOUNT_TYPE_CD 
        ACCOUNT_STATUS_CD OPEN_DT CLOSE_DT CURRENCY_CD DAY_BASIS_CD 
        INTEREST_PAYMENT_TYPE_CD FINANCIAL_INSTRUMENT_TYPE_CD 
        FINANCIAL_INSTRUMENT_ID;
/* List of target columns to keep  */ 
%let keep = DRV_ACCOUNT_ID MID_FINANCIAL_UNIT_ID_BRCA VALID_FROM_DTTM 
        VALID_TO_DTTM IRB_SRC_ACCOUNT_ID SOURCE_SYSTEM_CD 
        ACCOUNT_REGISTRATION_NM ALTERNATE_ACCOUNT_NM FINANCIAL_ACCOUNT_TYPE_CD 
        ACCOUNT_STATUS_CD OPEN_DT CLOSE_DT CURRENCY_CD DAY_BASIS_CD 
        INTEREST_PAYMENT_TYPE_CD FINANCIAL_INSTRUMENT_TYPE_CD 
        FINANCIAL_INSTRUMENT_ID;
/*****************************************************************
* ВЕРСИЯ:
*     $Id: transform_generate_bk.sas 4889 2013-04-04 09:14:07Z nesterenok $
*
******************************************************************
* НАЗНАЧЕНИЕ:
*     Генерирует бизнес-ключи в таблице по списку.
*
* ПАРАМЕТРЫ:
*     tpIn                    +  имя входного набора
*     tpBK                    +  список кодов обязательных для генерации бизнес-ключей, разделенный пробелами
*                                Такой бизнес-ключ станет дамми, если заполнены не все поля, его составляющие
*                                FK к ETL_SYS.ETL_BK.BK_CD
*     tpOptionalBK            +  список кодов НЕобязательных для генерации бизнес-ключей, разделенный пробелами
*                                Такой бизнес-ключ останется пустым, если заполнены не все поля, его составляющие
*     tpOut                   +  имя выходного набора
*
******************************************************************/

%macro transform_generate_bk;
   %let tpBK_count         = %unquote(&tpBK_count);
   %let tpOptionalBK_count = %unquote(&tpOptionalBK_count);

   %local lmvDummyRows lmvFieldDummyCount lmvDummyRequired;
   %let lmvDummyRows       = work.tr_gen_bk_dummy_rows;
   %let lmvFieldDummyCount = etl_dummy_count;
   %let lmvDummyRequired   = %eval (&tpBK_count gt 0);

   /* Макросы для генерации одного ключа */
   %macro sm_trans_gen_bk_required;
      %etl_generate_bk (
         mpFieldBK=&bk_field_nm, mpLengthBK=%sysfunc(inputn(&bk_type_cd, bkt_cd_len.)),
         mpColumnList=&bk_column_list_txt, mpFormat=&bk_format_txt,
         mpFieldDummy=&lmvFieldDummy, mpFieldDummyCount=&lmvFieldDummyCount
      );
   %mend;
   %macro sm_trans_gen_bk_optional;
      %etl_generate_bk (
         mpFieldBK=&bk_field_nm, mpLengthBK=%sysfunc(inputn(&bk_type_cd, bkt_cd_len.)),
         mpColumnList=&bk_column_list_txt, mpFormat=&bk_format_txt,
         mpFieldDummy=
      );
   %mend;

   /* Макрос для подстановки в дамми-ключ уникального номера */
   %macro sm_trans_gen_bk_dummy;
      if &lmvFieldDummy gt 0 then do;
         set &lmvDummyIds (keep=OBJECT_ID rename=(OBJECT_ID=&lmvFieldDummy._no)) point=&lmvFieldDummy;
         &bk_field_nm = cats (&bk_field_nm, "_", &lmvFieldDummy._no);

         %error_check;
      end;
   %mend;


   /* Создаем выходной набор итерацией по всем заявленным бизнес-ключам */
   /* Считаем необходимое кол-во дамми-ключей */
   %local lmvBkIndex lmvFieldDummy lmvDummyCount;
   %let lmvDummyCount   = 0;
   data
      %if &lmvDummyRequired %then %do;
         &tpOut (drop= etl_dummy_:)
         &lmvDummyRows
      %end;
      %else %do;
         &tpOut
      %end;
   ;
      set &tpIn end=ds_end;

      /* Генерация необязательных ключей */
      %do lmvBkIndex=1 %to &tpOptionalBK_count;
         %util_loop_data (mpLoopMacro=sm_trans_gen_bk_optional, mpData=ETL_SYS.ETL_BK,
                          mpWhere=BK_CD eq %util_quote(&&tpOptionalBK&lmvBkIndex)
         );
      %end;

      %if &lmvDummyRequired %then %do;
         length &lmvFieldDummyCount 8;
         drop &lmvFieldDummyCount;
         retain &lmvFieldDummyCount 0;

         /* Генерация обязательных ключей */
         %do lmvBkIndex=1 %to &tpBK_count;
            %let lmvFieldDummy = etl_dummy_&lmvBkIndex.;

            %util_loop_data (mpLoopMacro=sm_trans_gen_bk_required, mpData=ETL_SYS.ETL_BK,
                             mpWhere=BK_CD eq %util_quote(&&tpBK&lmvBkIndex)
            );
         %end;

         /* Если в какой-то записи есть дамми, то не выводим ее сразу */
         if sum (of etl_dummy_1-etl_dummy_&tpBK_count) = 0 then
            output &tpOut;
         else do;
            output &lmvDummyRows;
         end;

         if ds_end then call symputx ("lmvDummyCount", &lmvFieldDummyCount);
      %end;
      %else %do;
         output &tpOut;
      %end;
   run;
   %error_check (mpStepType=DATA);

   /* Если дамми нет, то всё */
   %if (not &lmvDummyRequired) or (&lmvDummyCount eq 0) %then %return;


   /* Для каждого дамми генерируем уникальный номер */
   %local lmvDummyIds;
   %let lmvDummyIds = work.tr_gen_bk_dummy_ids;
   %unique_ids (mpIdCount=&lmvDummyCount, mpOut=&lmvDummyIds, mpSequenceName=ETL_DUMMY_SEQ);

   /* Добавляем номер к дамми */
   data &lmvDummyRows._id (drop= etl_dummy_:);
      set &lmvDummyRows;

      %do lmvBkIndex=1 %to &tpBK_count;
         %let lmvFieldDummy = etl_dummy_&lmvBkIndex.;

         %util_loop_data (mpLoopMacro=sm_trans_gen_bk_dummy, mpData=ETL_SYS.ETL_BK,
                          mpWhere=BK_CD eq %util_quote(&&tpBK&lmvBkIndex)
         );
      %end;
   run;
   %error_check (mpStepType=DATA);


   /* Добавляем дамми-строки к выходному набору */
   proc append base=&tpOut data=&lmvDummyRows._id;
   run;
   %error_check (mpStepType=DATA);

%mend transform_generate_bk;

%transform_generate_bk;

%rcSet(&syserr); 
%rcSet(&sysrc); 
%rcSet(&sqlrc); 



/**  Step end Генерация BK **/

/*==========================================================================* 
 * Step:            Table Loader                          A5Y50FNE.AQ000A2T * 
 * Transform:       Table Loader (Version 2.1)                              * 
 * Description:                                                             * 
 *                                                                          * 
 * Source Table:    Генерация BKtpOut - work.W1MHBF25     A5Y50FNE.AO0005NJ * 
 * Target Table:    FIN_INSTR_ASSOC_CSG_BK -              A5Y50FNE.AE000120 * 
 *                   work_ia.FIN_INSTR_ASSOC_CSG_BK                         * 
 *==========================================================================*/ 

%let transformID = %quote(A5Y50FNE.AQ000A2T);
%let trans_rc = 0;
%let etls_stepStartTime = %sysfunc(datetime(), datetime20.); 

%let SYSLAST = %nrquote(work.W1MHBF25); 

%let SYS_SQL_IP_SPEEDO = Y;
%let SYS_SQL_MAPPUTTO = sas_put;
%let SYS_SQLREDUCEPUT = DBMS;
%global etls_sql_pushDown;
%let etls_sql_pushDown = -1;
option DBIDIRECTEXEC;

%global etls_tableExist;
%global etls_numIndex;
%global etls_lastTable;
%let etls_tableExist = -1; 
%let etls_numIndex = -1; 
%let etls_lastTable = &SYSLAST; 

/*---- Define load data macro  ----*/ 

/* --------------------------------------------------------------
   Load Technique Selection: Replace - EntireTable
   Constraint and index action selections: 'INIT','ASIS','ASIS','ASIS'
   Additional options selections... 
      Set unmapped to missing on updates: false 
   -------------------------------------------------------------- */
%macro etls_loader;

   %let etls_tableOptions = ;
   
   /*---- Map the columns  ----*/ 
   proc datasets lib = work nolist nowarn memtype = (data view);
      delete WIROX1C;
   quit;
   
   %put %str(NOTE: Mapping columns ...);
   proc sql;
      create view work.WIROX1C as
         select
            FINANCIAL_INSTRUMENT_ID as FINANCIAL_INSTRUMENT_ASSOC_ID,
            VALID_FROM_DTTM,
            VALID_TO_DTTM,
            ('DRV') as FINANCIAL_INSTR_ASSOC_TYPE_CD length = 3
               format = $3.
               informat = $3.,
            FINANCIAL_INSTRUMENT_ID,
            DRV_ACCOUNT_ID as REFERENCE_ACCOUNT_ID,
            FINANCIAL_INSTRUMENT_TYPE_CD
      from &etls_lastTable
      ;
   quit;
   
   %let SYSLAST = work.WIROX1C;
   
   %let etls_lastTable = &SYSLAST; 
   %let etls_tableOptions = ; 
   
   /* Determine if the target table exists  */ 
   %let etls_tableExist = %eval(%sysfunc(exist(work_ia.FIN_INSTR_ASSOC_CSG_BK, DATA)) or 
         %sysfunc(exist(work_ia.FIN_INSTR_ASSOC_CSG_BK, VIEW))); 
   
   %if &etls_tableExist %then 
   %do;/* table exists  */ 
      %let etls_hasPreExistingConstraint=0; 
      
      proc datasets lib = work nolist nowarn memtype = (data view);
         delete etls_commands etls_commands_F;
      quit;
      
      %let etls_otherTablesReferToThisTable=0;
      
      %macro etls_CIContents(table=,workTableOut=,inDSOptions=);
         %put NOTE: Building table listing Constraints and Indexes for: &table;
         proc datasets lib=work nolist; delete &workTableOut; quit;
         proc contents data=&table&inDSOptions out2=&workTableOut noprint; run;
         
         data &workTableOut;
            length name $60 type $20 icown idxUnique idxNoMiss $3 recreate $600;
            set &workTableOut;
            type=upcase(type);
            if type eq 'REFERENTIAL' then
            do;
               put "WARNING%QUOTE(:) Target table is referenced by constraints in"
                    " another table: " ref;
               call symput('etls_otherTablesReferToThisTable','1');
               delete;
            end;
            if type='INDEX' and ICOwn eq 'YES' then delete;
         run;
         %rcSet(&syserr); 
         
      %mend etls_CIContents;
      
      %etls_CIContents(table=work_ia.FIN_INSTR_ASSOC_CSG_BK, workTableOut=etls_commands, inDSOptions=);
      
      %if &etls_otherTablesReferToThisTable %then 
         %put WARNING%QUOTE(:) Replacing entire table will fail. Consider an alternate load technique or revising constraints.; 
      %else 
      %do; /* okay - remove foreign keys  */ 
      
         data etls_commands_F; 
            set etls_commands; 
            if upcase(type)="FOREIGN KEY" then 
            do; 
               command='ic delete '||trim(name)||';';
               output etls_commands_F; 
            end; 
         run; 
         
         %put %str(NOTE: Removing foreign keys before dropping table...);
         data _null_;
            set etls_commands_F;
            %rcSet(&syserr); 
            
      %end; /* okay - remove foreign keys  */ 
      
      proc datasets lib = work nolist nowarn memtype = (data view);
         delete etls_commands etls_commands_F;
      quit;
      
      /*---- Drop a table  ----*/ 
      %put %str(NOTE: Dropping table ...);
      proc datasets lib = work_ia nolist nowarn memtype = (data view);
         delete FIN_INSTR_ASSOC_CSG_BK;
      quit;
      
      %rcSet(&syserr); 
      
      %let etls_tableExist = 0;
      
   %end; /* table exists  */ 
   
   /*---- Create a new table  ----*/ 
   %if (&etls_tableExist eq 0) %then 
   %do;  /* if table does not exist  */ 
   
      %put %str(NOTE: Creating table ...);
      
      data work_ia.FIN_INSTR_ASSOC_CSG_BK;
         attrib FINANCIAL_INSTRUMENT_ASSOC_ID length = $32
            format = $32.
            informat = $32.
            label = 'FINANCIAL_INSTRUMENT_ASSOC_ID'; 
         attrib VALID_FROM_DTTM length = 8
            format = DATETIME20.
            informat = DATETIME20.
            label = 'VALID_FROM_DTTM'; 
         attrib VALID_TO_DTTM length = 8
            format = DATETIME20.
            informat = DATETIME20.
            label = 'VALID_TO_DTTM'; 
         attrib FINANCIAL_INSTR_ASSOC_TYPE_CD length = $3
            format = $3.
            informat = $3.
            label = 'FINANCIAL_INSTR_ASSOC_TYPE_CD'; 
         attrib FINANCIAL_INSTRUMENT_ID length = $32
            format = $32.
            informat = $32.
            label = 'FINANCIAL_INSTRUMENT_ID'; 
         attrib REFERENCE_ACCOUNT_ID length = $32
            format = $32.
            informat = $32.
            label = 'FINANCIAL_ACCOUNT_ID'; 
         attrib FINANCIAL_INSTRUMENT_TYPE_CD length = $3
            format = $3.
            informat = $3.
            label = 'FINANCIAL_INSTRUMENT_TYPE_CD'; 
         call missing(of _all_);
         stop;
      run;
      
      %rcSet(&syserr); 
      
      /*---- Create the integrity constraints for a table  ----*/ 
      %put %str(NOTE: Creating integrity constraints ...);
      proc datasets library=work_ia nolist;
         modify FIN_INSTR_ASSOC_CSG_BK;
            ic create not null (FINANCIAL_INSTRUMENT_ASSOC_ID);
            ic create not null (VALID_FROM_DTTM);
            ic create not null (VALID_TO_DTTM);
            ic create not null (FINANCIAL_INSTR_ASSOC_TYPE_CD);
            ic create not null (FINANCIAL_INSTRUMENT_ID);
            ic create not null (REFERENCE_ACCOUNT_ID);
            ic create pk_index = primary key (FINANCIAL_INSTRUMENT_ASSOC_ID VALID_FROM_DTTM);
      quit;
      
      %rcSet(&syserr); 
      
   %end;  /* if table does not exist  */ 
   
   /*---- Append  ----*/ 
   %put %str(NOTE: Appending data ...);
   
   proc append base = work_ia.FIN_INSTR_ASSOC_CSG_BK 
      data = &etls_lastTable (&etls_tableOptions)  force ; 
    run; 
   
   %rcSet(&syserr); 
   
   proc datasets lib = work nolist nowarn memtype = (data view);
      delete WIROX1C;
   quit;
   
%mend etls_loader;
%etls_loader;

%let etls_recCheckExist = 0; 
%let etls_recnt = 0; 
%macro etls_recordCheck; 
   %let etls_recCheckExist = %eval(%sysfunc(exist(work_ia.FIN_INSTR_ASSOC_CSG_BK, DATA)) or 
         %sysfunc(exist(work_ia.FIN_INSTR_ASSOC_CSG_BK, VIEW))); 
   
   %if (&etls_recCheckExist) %then
   %do;
      %local etls_syntaxcheck; 
      %let etls_syntaxcheck = %sysfunc(getoption(syntaxcheck)); 
      /* Turn off syntaxcheck option to perform following steps  */ 
      options nosyntaxcheck;
      
      proc contents data = work_ia.FIN_INSTR_ASSOC_CSG_BK out = work.etls_contents(keep = nobs) noprint; 
      run; 
      
      data _null_; 
         set work.etls_contents (obs = 1); 
         call symput("etls_recnt", left(put(nobs,32.))); 
      run;
      
      proc datasets lib = work nolist nowarn memtype = (data view);
         delete etls_contents;
      quit;
      
      /* Reset syntaxcheck option to previous setting  */ 
      options &etls_syntaxcheck; 
   %end;
%mend etls_recordCheck;
%etls_recordCheck;



/**  Step end Table Loader **/

/*==========================================================================* 
 * Step:            Завершить модуль                      A5Y50FNE.AQ000A2U * 
 * Transform:       Завершить модуль                                        * 
 * Description:                                                             * 
 *==========================================================================*/ 

%let transformID = %quote(A5Y50FNE.AQ000A2U);
%let trans_rc = 0;
%let etls_stepStartTime = %sysfunc(datetime(), datetime20.); 

%let _INPUT_count = 0; 
%let _OUTPUT_count = 0; 


/*****************************************************************
* ВЕРСИЯ:
*   $Id: transform_job_finish.sas 247 2012-04-03 07:31:10Z nesterenok $
*
******************************************************************
* НАЗНАЧЕНИЕ:
*   Регистрирует конец модуля ETL.
*
* ПАРАМЕТРЫ:
*   нет
*
******************************************************************/

%macro transform_job_finish;

   /* Продолжаем модуль */
   %job_continue_reg(mpJobType=JOB, mpJobName=&ETLS_JobName., mpPostEvent=N);

   /* Завершаем модуль */
   %job_finish_reg(mpJobType=JOB);

%mend transform_job_finish;

%transform_job_finish;


%rcSet(&syserr); 
%rcSet(&sysrc); 
%rcSet(&sqlrc); 



/**  Step end Завершить модуль **/

%let etls_endTime = %sysfunc(datetime(),datetime.);



/**  Job end 042_941_Structure_FINANCIAL_ACCOUNT_CSG_BK **/

/* Reset jobid and name */
%let jobID = %quote(A569C89V.AQ0000CK);
%let etls_jobName = %nrquote(090_364_Stream_Midas_Fin_Account_BK);

/**************************************************************************** 
 * Job:             042_945_Structure_FINANCIAL_ACCOUNT_  A5Y50FNE.AN0000VN * 
 *                  SWP_BK                                                  * 
 * Description:                                                             * 
 *                                                                          * 
 * Metadata Server: bravo14                                                 * 
 * Port:            8561                                                    * 
 * Location:        /DWH_DWHDDS_IA/Jobs/042_Structure/Financial_Account     * 
 *                                                                          * 
 * Server:          SASApp                                A5C46MZY.AQ000002 * 
 *                                                                          * 
 * Source Table:    FINANCIAL_INSTRUMENT_SWP_BK -         A5Y50FNE.AE000143 * 
 *                   work_ia.FINANCIAL_INSTRUMENT_SWP_BK                    * 
 * Target Tables:   FINANCIAL_ACCOUNT_SWP_BK -            A5Y50FNE.AE00012S * 
 *                   work_ia.FINANCIAL_ACCOUNT_SWP_BK                       * 
 *                  FIN_INSTR_ASSOC_SWP_BK -              A5Y50FNE.AE00012A * 
 *                   work_ia.FIN_INSTR_ASSOC_SWP_BK                         * 
 *                  CUSTOMER_X_FIN_ACC_SWP_BK -           A5Y50FNE.AE00011W * 
 *                   work_ia.CUSTOMER_X_FIN_ACC_SWP_BK                      * 
 *                                                                          * 
 * Generated on:    16 Июль 2013 г. 17:14:47 MSD                            * 
 * Generated by:    sasdwh                                                  * 
 * Version:         SAS Data Integration Studio 4.5                         * 
 ****************************************************************************/ 

/* General macro variables  */ 
%let jobID = %quote(A5Y50FNE.AN0000VN);
%let etls_jobName = %nrquote(042_945_Structure_FINANCIAL_ACCOUNT_SWP_BK);
%let etls_userID = %nrquote(sasdwh);


/* Create metadata macro variables */
%let IOMServer      = %nrquote(SASApp);
%let metaPort       = %nrquote(8561);
%let metaServer     = %nrquote(bravo14);

/* Set metadata options */
options metaport       = &metaPort 
        metaserver     = "&metaServer"; 

/* Setup for capturing job status  */ 
%let etls_startTime = %sysfunc(datetime(),datetime.);
%let etls_recordsBefore = 0;
%let etls_recordsAfter = 0;
%let etls_lib = 0;
%let etls_table = 0;

%global etls_debug; 
%macro etls_setDebug; 
   %if %str(&etls_debug) ne 0 %then 
      OPTIONS MPRINT%str(;); 
%mend; 
%etls_setDebug; 

/*==========================================================================* 
 * Step:            Начать модуль                         A5Y50FNE.AQ0009PT * 
 * Transform:       Начать модуль                                           * 
 * Description:                                                             * 
 *==========================================================================*/ 

%let transformID = %quote(A5Y50FNE.AQ0009PT);
%let trans_rc = 0;
%let etls_stepStartTime = %sysfunc(datetime(), datetime20.); 

%let _INPUT_count = 0; 
%let _OUTPUT_count = 0; 


/*****************************************************************
* ВЕРСИЯ:
*   $Id: transform_job_start.sas 1747 2012-08-01 11:26:13Z nesterenok $
*
******************************************************************
* НАЗНАЧЕНИЕ:
*   Регистрирует начало модуля ETL.
*
* ПАРАМЕТРЫ:
*   нет
*
******************************************************************/

%macro transform_job_start;

   /* Продолжаем поток (или создаем новый) */
   %local lmvStreamName;
   %if %sysfunc(sysexist(LSB_JOBNAME)) %then
      %let lmvStreamName = %scan(%sysfunc(sysget(LSB_JOBNAME)), 3, :);
   %else
      %let lmvStreamName = ;

   %job_continue_reg(mpJobType=STREAM, mpJobName=&lmvStreamName, mpPostEvent=N, mpForcedStart=Y);

   /* Для DI, начинаем поток заново, если старый был начат не сегодня */
   %if %length(&lmvStreamName) eq 0 and &STREAM_START_DT ne %sysfunc(today()) %then %do;
      %job_start_reg(mpJobType=STREAM, mpParentJobId=, mpJobName=&lmvStreamName.);
   %end;

   /* Начинаем модуль */
   %job_start_reg(mpJobType=JOB, mpParentJobId=&STREAM_ID, mpJobName=&ETLS_JobName.);

%mend transform_job_start;

%transform_job_start;


%rcSet(&syserr); 
%rcSet(&sysrc); 
%rcSet(&sqlrc); 



/**  Step end Начать модуль **/

/*==========================================================================* 
 * Step:            Отбор первых и актуальных записей с   A5Y50FNE.AQ0009PU * 
 *                   учетом ног                                             * 
 * Transform:       Splitter                                                * 
 * Description:                                                             * 
 *                                                                          * 
 * Source Table:    FINANCIAL_INSTRUMENT_SWP_BK -         A5Y50FNE.AE000143 * 
 *                   work_ia.FINANCIAL_INSTRUMENT_SWP_BK                    * 
 * Target Tables:   first1 recs - work.W1B87YYR           A5Y50FNE.AO0005FN * 
 *                  first2 recs - work.W1B889DD           A5Y50FNE.AO0005FO * 
 *                  actual1 recs - work.W1BAZY4C          A5Y50FNE.AO0005FP * 
 *                  actual2 recs - work.W1BB1D6X          A5Y50FNE.AO0005FQ * 
 *==========================================================================*/ 

%let transformID = %quote(A5Y50FNE.AQ0009PU);
%let trans_rc = 0;
%let etls_stepStartTime = %sysfunc(datetime(), datetime20.); 

%let etls_recCheckExist = 0; 
%let etls_recnt = 0; 
%macro etls_recordCheck; 
   %let etls_recCheckExist = %eval(%sysfunc(exist(work_ia.FINANCIAL_INSTRUMENT_SWP_BK, DATA)) or 
         %sysfunc(exist(work_ia.FINANCIAL_INSTRUMENT_SWP_BK, VIEW))); 
   
   %if (&etls_recCheckExist) %then
   %do;
      %local etls_syntaxcheck; 
      %let etls_syntaxcheck = %sysfunc(getoption(syntaxcheck)); 
      /* Turn off syntaxcheck option to perform following steps  */ 
      options nosyntaxcheck;
      
      proc contents data = work_ia.FINANCIAL_INSTRUMENT_SWP_BK out = work.etls_contents(keep = nobs) noprint; 
      run; 
      
      data _null_; 
         set work.etls_contents (obs = 1); 
         call symput("etls_recnt", left(put(nobs,32.))); 
      run;
      
      proc datasets lib = work nolist nowarn memtype = (data view);
         delete etls_contents;
      quit;
      
      /* Reset syntaxcheck option to previous setting  */ 
      options &etls_syntaxcheck; 
   %end;
%mend etls_recordCheck;
%etls_recordCheck;

%let SYSLAST = %nrquote(work_ia.FINANCIAL_INSTRUMENT_SWP_BK); 

proc datasets lib=work nolist nowarn memtype = (data view);
   delete W1B87YYR;
   delete W1B889DD;
   delete W1BAZY4C;
   delete W1BB1D6X;
quit;

data 
     work.W1B87YYR
     work.W1B889DD
     work.W1BAZY4C
     work.W1BB1D6X;
   set &SYSLAST;
   if FSRT=1 and LEGN=1 then 
      output work.W1B87YYR;
   if FSRT=1 and LEGN=2 then 
      output work.W1B889DD;
   if VALID_TO_DTTM = &ETL_SCD_FUTURE_DTTM and LEGN=1 then 
      output work.W1BAZY4C;
   if VALID_TO_DTTM = &ETL_SCD_FUTURE_DTTM and LEGN=2 then 
      output work.W1BB1D6X;
run;

%rcSet(&syserr); 

/*---- Map the columns  ----*/ 
proc datasets lib = work nolist nowarn memtype = (data view);
   delete etls_mapped;
quit;

%put %str(NOTE: Mapping columns ...);
proc sql;
   create table work.etls_mapped as
      select
         VALID_FROM_DTTM,
         FINANCIAL_INSTRUMENT_ID,
         IRB_SRC_ACCOUNT_ID,
         DDAT,
         VDAT,
         LEGN,
         IRB_DUMMY_TYPE_CD,
         ARM302P_ID,
         FXMM_ID,
         KONDOR_A
   from work.W1B87YYR
   ;
quit;

%let SYSLAST = work.etls_mapped;

data work.W1B87YYR;
  set work.etls_mapped;
run;

proc datasets lib = work nolist nowarn memtype = (data view);
   delete etls_mapped;
quit;

%rcSet(&syscc); 

/*---- Map the columns  ----*/ 
proc datasets lib = work nolist nowarn memtype = (data view);
   delete etls_mapped;
quit;

%put %str(NOTE: Mapping columns ...);
proc sql;
   create table work.etls_mapped as
      select
         VALID_FROM_DTTM,
         FINANCIAL_INSTRUMENT_ID,
         IRB_SRC_ACCOUNT_ID,
         DDAT,
         VDAT,
         LEGN,
         IRB_DUMMY_TYPE_CD,
         ARM302P_ID,
         FXMM_ID,
         KONDOR_A
   from work.W1B889DD
   ;
quit;

%let SYSLAST = work.etls_mapped;

data work.W1B889DD;
  set work.etls_mapped;
run;

proc datasets lib = work nolist nowarn memtype = (data view);
   delete etls_mapped;
quit;

%rcSet(&syscc); 

/*---- Map the columns  ----*/ 
proc datasets lib = work nolist nowarn memtype = (data view);
   delete etls_mapped;
quit;

%put %str(NOTE: Mapping columns ...);
proc sql;
   create table work.etls_mapped as
      select
         FINANCIAL_INSTRUMENT_ID,
         IRB_INSTR_STATUS_CD,
         IRB_SRC_ACCOUNT_ID,
         KONDOR_A   
            format = 11.
            informat = 11.,
         ARM302P_ID,
         FXMM_ID,
         LNKDN,
         BRCA,
         FINANCIAL_INSTRUMENT_TYPE_CD,
         CURRENCY_CD,
         VDAT as VDAT1,
         LEGN,
         CNUM,
         IRB_DUMMY_TYPE_CD,
         LCD as LCD1,
         DDAT as DDAT1
   from work.W1BAZY4C
   ;
quit;

%let SYSLAST = work.etls_mapped;

data work.W1BAZY4C;
  set work.etls_mapped;
run;

proc datasets lib = work nolist nowarn memtype = (data view);
   delete etls_mapped;
quit;

%rcSet(&syscc); 

/*---- Map the columns  ----*/ 
proc datasets lib = work nolist nowarn memtype = (data view);
   delete etls_mapped;
quit;

%put %str(NOTE: Mapping columns ...);
proc sql;
   create table work.etls_mapped as
      select
         FINANCIAL_INSTRUMENT_ID,
         IRB_INSTR_STATUS_CD,
         IRB_SRC_ACCOUNT_ID,
         KONDOR_A   
            format = 11.
            informat = 11.,
         ARM302P_ID,
         FXMM_ID,
         LNKDN,
         BRCA,
         FINANCIAL_INSTRUMENT_TYPE_CD,
         CURRENCY_CD,
         VDAT as VDAT2,
         LEGN,
         CNUM,
         IRB_DUMMY_TYPE_CD,
         LCD as LCD2,
         DDAT as DDAT2
   from work.W1BB1D6X
   ;
quit;

%let SYSLAST = work.etls_mapped;

data work.W1BB1D6X;
  set work.etls_mapped;
run;

proc datasets lib = work nolist nowarn memtype = (data view);
   delete etls_mapped;
quit;

%rcSet(&syscc); 



/**  Step end Отбор первых и актуальных записей с учетом ног **/

/*==========================================================================* 
 * Step:            Вяжем первые записи ног в одну запись A5Y50FNE.AQ0009PV * 
 * Transform:       Join                                                    * 
 * Description:                                                             * 
 *                                                                          * 
 * Source Tables:   first1 recs - work.W1B87YYR           A5Y50FNE.AO0005FN * 
 *                  first2 recs - work.W1B889DD           A5Y50FNE.AO0005FO * 
 * Target Table:    first recs - work.W17GRCZV            A5Y50FNE.AO0005FR * 
 *==========================================================================*/ 

%let transformID = %quote(A5Y50FNE.AQ0009PV);
%let trans_rc = 0;
%let etls_stepStartTime = %sysfunc(datetime(), datetime20.); 

%let etls_recCheckExist = 0; 
%let etls_recnt = 0; 
%macro etls_recordCheck; 
   %let etls_recCheckExist = %eval(%sysfunc(exist(work.W1B87YYR, DATA)) or 
         %sysfunc(exist(work.W1B87YYR, VIEW))); 
   
   %if (&etls_recCheckExist) %then
   %do;
      %local etls_syntaxcheck; 
      %let etls_syntaxcheck = %sysfunc(getoption(syntaxcheck)); 
      /* Turn off syntaxcheck option to perform following steps  */ 
      options nosyntaxcheck;
      
      proc contents data = work.W1B87YYR out = work.etls_contents(keep = nobs) noprint; 
      run; 
      
      data _null_; 
         set work.etls_contents (obs = 1); 
         call symput("etls_recnt", left(put(nobs,32.))); 
      run;
      
      proc datasets lib = work nolist nowarn memtype = (data view);
         delete etls_contents;
      quit;
      
      /* Reset syntaxcheck option to previous setting  */ 
      options &etls_syntaxcheck; 
   %end;
%mend etls_recordCheck;
%etls_recordCheck;

%let SYS_SQL_IP_SPEEDO = Y;
%let SYS_SQL_MAPPUTTO = sas_put;
%let SYS_SQLREDUCEPUT = DBMS;
%global etls_sql_pushDown;
%let etls_sql_pushDown = -1;
option DBIDIRECTEXEC;

proc datasets lib = work nolist nowarn memtype = (data view);
   delete W17GRCZV;
quit;

proc sql;
   create view work.W17GRCZV as
   select
      coalesce(W1B87YYR.VALID_FROM_DTTM , W1B889DD.VALID_FROM_DTTM) as VALID_FROM_DTTM length = 8   
         format = DATETIME20.
         informat = DATETIME20.
         label = 'VALID_FROM_DTTM',
      coalesce(W1B87YYR.FINANCIAL_INSTRUMENT_ID, W1B889DD.FINANCIAL_INSTRUMENT_ID) as FINANCIAL_INSTRUMENT_ID length = 32   
         format = $32.
         informat = $32.
         label = 'FINANCIAL_INSTRUMENT_ID',
      coalesce(W1B87YYR.IRB_SRC_ACCOUNT_ID, W1B889DD.IRB_SRC_ACCOUNT_ID) as IRB_SRC_ACCOUNT_ID length = 32   
         format = $32.
         informat = $32.
         label = 'IRB_SRC_ACCOUNT_ID',
      coalesce(W1B87YYR.DDAT, W1B889DD.DDAT) as DDAT length = 8   
         format = DATETIME20.
         informat = DATETIME20.
         label = 'DDAT',
      W1B889DD.VDAT length = 8   
         format = DATETIME20.
         informat = DATETIME20.
         label = 'VDAT',
      W1B889DD.LEGN length = 8   
         label = 'LEGN',
      W1B87YYR.IRB_DUMMY_TYPE_CD length = 3   
         format = $3.
         informat = $3.
         label = 'IRB_DUMMY_TYPE_CD'
   from
      work.W1B87YYR full join 
      work.W1B889DD
         on
         (
            W1B87YYR.IRB_SRC_ACCOUNT_ID = W1B889DD.IRB_SRC_ACCOUNT_ID
         )
   ;
quit;

%global etls_sql_pushDown;
%let etls_sql_pushDown = &sys_sql_ip_all;

%rcSet(&sqlrc); 



/**  Step end Вяжем первые записи ног в одну запись **/

/*==========================================================================* 
 * Step:            Вяжем актуальные записи ног в одну    A5Y50FNE.AQ0009PW * 
 *                   запись                                                 * 
 * Transform:       Join                                                    * 
 * Description:                                                             * 
 *                                                                          * 
 * Source Tables:   actual1 recs - work.W1BAZY4C          A5Y50FNE.AO0005FP * 
 *                  actual2 recs - work.W1BB1D6X          A5Y50FNE.AO0005FQ * 
 * Target Table:    actual recs - work.W1AL1VEQ           A5Y50FNE.AO0005FS * 
 *==========================================================================*/ 

%let transformID = %quote(A5Y50FNE.AQ0009PW);
%let trans_rc = 0;
%let etls_stepStartTime = %sysfunc(datetime(), datetime20.); 

%let etls_recCheckExist = 0; 
%let etls_recnt = 0; 
%macro etls_recordCheck; 
   %let etls_recCheckExist = %eval(%sysfunc(exist(work.W1BAZY4C, DATA)) or 
         %sysfunc(exist(work.W1BAZY4C, VIEW))); 
   
   %if (&etls_recCheckExist) %then
   %do;
      %local etls_syntaxcheck; 
      %let etls_syntaxcheck = %sysfunc(getoption(syntaxcheck)); 
      /* Turn off syntaxcheck option to perform following steps  */ 
      options nosyntaxcheck;
      
      proc contents data = work.W1BAZY4C out = work.etls_contents(keep = nobs) noprint; 
      run; 
      
      data _null_; 
         set work.etls_contents (obs = 1); 
         call symput("etls_recnt", left(put(nobs,32.))); 
      run;
      
      proc datasets lib = work nolist nowarn memtype = (data view);
         delete etls_contents;
      quit;
      
      /* Reset syntaxcheck option to previous setting  */ 
      options &etls_syntaxcheck; 
   %end;
%mend etls_recordCheck;
%etls_recordCheck;

%let SYS_SQL_IP_SPEEDO = Y;
%let SYS_SQL_MAPPUTTO = sas_put;
%let SYS_SQLREDUCEPUT = DBMS;
%global etls_sql_pushDown;
%let etls_sql_pushDown = -1;
option DBIDIRECTEXEC;

proc datasets lib = work nolist nowarn memtype = (data view);
   delete W1AL1VEQ;
quit;

proc sql;
   create view work.W1AL1VEQ as
   select
      ifc(W1BAZY4C.IRB_INSTR_STATUS_CD = 'AUT' or W1BB1D6X.IRB_INSTR_STATUS_CD = 'AUT', 'AUT', 
        ifc(W1BAZY4C.IRB_INSTR_STATUS_CD = 'REV' or W1BB1D6X.IRB_INSTR_STATUS_CD = 'REV', 'REV','MAT')) as IRB_INSTR_STATUS_CD length = 3   
         format = $3.
         informat = $3.
         label = 'IRB_INSTR_STATUS_CD',
      coalesce(W1BAZY4C.IRB_SRC_ACCOUNT_ID, W1BB1D6X.IRB_SRC_ACCOUNT_ID) as IRB_SRC_ACCOUNT_ID length = 32   
         format = $32.
         informat = $32.
         label = 'IRB_SRC_ACCOUNT_ID',
      coalesce(W1BAZY4C.ARM302P_ID, W1BB1D6X.ARM302P_ID) as ARM302P_ID length = 8   
         format = 11.
         informat = 11.
         label = 'ARM302P_ID',
      coalesce(W1BAZY4C.FXMM_ID, W1BB1D6X.FXMM_ID) as FXMM_ID length = 8   
         format = 11.
         informat = 11.
         label = 'FXMM_ID',
      coalesce(W1BAZY4C.BRCA, W1BB1D6X.BRCA) as BRCA length = 3   
         format = $3.
         informat = $3.
         label = 'BRCA',
      W1BB1D6X.LNKDN as LNKDN2 length = 8   
         format = 7.
         informat = 7.
         label = 'LNKDN',
      coalesce(W1BAZY4C.FINANCIAL_INSTRUMENT_TYPE_CD, W1BB1D6X.FINANCIAL_INSTRUMENT_TYPE_CD) as FINANCIAL_INSTRUMENT_TYPE_CD length = 3   
         format = $3.
         informat = $3.
         label = 'FINANCIAL_INSTRUMENT_TYPE_CD',
      coalesce(W1BAZY4C.KONDOR_A, W1BB1D6X.KONDOR_A) as KONDOR_A length = 8   
         format = 11.
         informat = 11.
         label = 'KONDOR_A',
      coalesce(W1BAZY4C.CURRENCY_CD, W1BB1D6X.CURRENCY_CD) as CURRENCY_CD length = 3   
         format = $3.
         informat = $3.
         label = 'CURRENCY_CD',
      coalesce(W1BB1D6X.VDAT2, W1BAZY4C.VDAT1) as VDAT length = 8   
         format = DATETIME20.
         informat = DATETIME20.
         label = 'VDAT',
      W1BB1D6X.LEGN length = 8   
         label = 'LEGN',
      coalesce(W1BAZY4C.FINANCIAL_INSTRUMENT_ID ,W1BB1D6X.FINANCIAL_INSTRUMENT_ID ) as FINANCIAL_INSTRUMENT_ID length = 32   
         format = $32.
         informat = $32.
         label = 'FINANCIAL_INSTRUMENT_ID',
      coalesce(W1BAZY4C.CNUM,W1BB1D6X.CNUM) as CNUM length = 8   
         format = 7.
         informat = 7.
         label = 'CNUM',
      W1BAZY4C.IRB_DUMMY_TYPE_CD length = 3   
         format = $3.
         informat = $3.
         label = 'IRB_DUMMY_TYPE_CD',
      coalesce(W1BB1D6X.LCD2, W1BAZY4C.LCD1) as LCD length = 8   
         format = DATETIME20.
         informat = DATETIME20.
         label = 'LCD',
      coalesce(W1BB1D6X.DDAT2, W1BAZY4C.DDAT1) as DDAT length = 8   
         format = DATETIME20.
         informat = DATETIME20.
         label = 'DDAT'
   from
      work.W1BAZY4C full join 
      work.W1BB1D6X
         on
         (
            W1BAZY4C.IRB_SRC_ACCOUNT_ID = W1BB1D6X.IRB_SRC_ACCOUNT_ID
         )
   ;
quit;

%global etls_sql_pushDown;
%let etls_sql_pushDown = &sys_sql_ip_all;

%rcSet(&sqlrc); 



/**  Step end Вяжем актуальные записи ног в одну запись **/

/*==========================================================================* 
 * Step:            Собираем данные по сделке             A5Y50FNE.AQ0009PX * 
 * Transform:       Join                                                    * 
 * Description:                                                             * 
 *                                                                          * 
 * Source Tables:   first recs - work.W17GRCZV            A5Y50FNE.AO0005FR * 
 *                  actual recs - work.W1AL1VEQ           A5Y50FNE.AO0005FS * 
 * Target Table:    SQL Join - work.W1B4DNDN              A5Y50FNE.AO0005FT * 
 *==========================================================================*/ 

%let transformID = %quote(A5Y50FNE.AQ0009PX);
%let trans_rc = 0;
%let etls_stepStartTime = %sysfunc(datetime(), datetime20.); 

%let etls_recnt = -1;
%let SYS_SQL_IP_SPEEDO = Y;
%let SYS_SQL_MAPPUTTO = sas_put;
%let SYS_SQLREDUCEPUT = DBMS;
%global etls_sql_pushDown;
%let etls_sql_pushDown = -1;
option DBIDIRECTEXEC;

proc datasets lib = work nolist nowarn memtype = (data view);
   delete W1B4DNDN;
quit;

proc sql;
   create view work.W1B4DNDN as
   select
      W17GRCZV.VALID_FROM_DTTM length = 8   
         format = DATETIME20.
         informat = DATETIME20.
         label = 'VALID_FROM_DTTM',
      W17GRCZV.IRB_SRC_ACCOUNT_ID length = 32   
         format = $32.
         informat = $32.
         label = 'IRB_SRC_ACCOUNT_ID',
      W1AL1VEQ.IRB_INSTR_STATUS_CD length = 3   
         format = $3.
         informat = $3.
         label = 'IRB_INSTR_STATUS_CD',
      W1AL1VEQ.DDAT length = 8   
         format = DATETIME20.
         informat = DATETIME20.
         label = 'DDAT',
      W1AL1VEQ.ARM302P_ID length = 8   
         format = 11.
         informat = 11.
         label = 'ARM302P_ID',
      W1AL1VEQ.FXMM_ID length = 8   
         format = 11.
         informat = 11.
         label = 'FXMM_ID',
      W1AL1VEQ.BRCA length = 3   
         format = $3.
         informat = $3.
         label = 'BRCA',
      W1AL1VEQ.LNKDN2 length = 8   
         format = 7.
         informat = 7.
         label = 'LNKDN',
      W1AL1VEQ.FINANCIAL_INSTRUMENT_TYPE_CD length = 3   
         format = $3.
         informat = $3.
         label = 'FINANCIAL_INSTRUMENT_TYPE_CD',
      W1AL1VEQ.KONDOR_A length = 8   
         format = 11.
         informat = 11.
         label = 'KONDOR_A',
      W1AL1VEQ.CURRENCY_CD length = 3   
         format = $3.
         informat = $3.
         label = 'CURRENCY_CD',
      W1AL1VEQ.VDAT length = 8   
         format = DATETIME20.
         informat = DATETIME20.
         label = 'VDAT',
      W1AL1VEQ.LEGN length = 8   
         label = 'LEGN',
      W1AL1VEQ.CNUM length = 8   
         format = 7.
         informat = 7.
         label = 'CNUM',
      W17GRCZV.IRB_DUMMY_TYPE_CD length = 3   
         format = $3.
         informat = $3.
         label = 'IRB_DUMMY_TYPE_CD',
      W1AL1VEQ.LCD length = 8   
         format = DATETIME20.
         informat = DATETIME20.
         label = 'LCD'
   from
      work.W17GRCZV, 
      work.W1AL1VEQ
   where
      W17GRCZV.IRB_SRC_ACCOUNT_ID = W1AL1VEQ.IRB_SRC_ACCOUNT_ID
   ;
quit;

%global etls_sql_pushDown;
%let etls_sql_pushDown = &sys_sql_ip_all;

%rcSet(&sqlrc); 



/**  Step end Собираем данные по сделке **/

/*==========================================================================* 
 * Step:            Extract                               A5Y50FNE.AQ0009PY * 
 * Transform:       Extract                                                 * 
 * Description:                                                             * 
 *                                                                          * 
 * Source Table:    SQL Join - work.W1B4DNDN              A5Y50FNE.AO0005FT * 
 * Target Table:    Extract - work.W1MOEVV1               A5Y50FNE.AO0005FU * 
 *==========================================================================*/ 

%let transformID = %quote(A5Y50FNE.AQ0009PY);
%let trans_rc = 0;
%let etls_stepStartTime = %sysfunc(datetime(), datetime20.); 

%let etls_recnt = -1;
%let SYSLAST = %nrquote(work.W1B4DNDN); 

%let SYS_SQL_IP_SPEEDO = Y;
%let SYS_SQL_MAPPUTTO = sas_put;
%let SYS_SQLREDUCEPUT = DBMS;
%global etls_sql_pushDown;
%let etls_sql_pushDown = -1;
option DBIDIRECTEXEC;

/*---- Map the columns  ----*/ 
proc datasets lib = work nolist nowarn memtype = (data view);
   delete W1MOEVV1;
quit;

data _null_;
   put "NOTE: The following column(s) do not have a column mapping, so the"
        " value(s) will be set to missing: DAY_BASIS_CD,"
        " INTEREST_PAYMENT_TYPE_CD";
run;

%put %str(NOTE: Mapping columns ...);
proc sql;
   create view work.W1MOEVV1 as
      select
         VALID_FROM_DTTM,
         (&ETL_SCD_FUTURE_DTTM) as VALID_TO_DTTM length = 8
            format = DATETIME20.
            informat = DATETIME20.
            label = 'VALID_TO_DTTM',
         ('MID') as SOURCE_SYSTEM_CD length = 3
            format = $3.
            informat = $3.
            label = 'SOURCE_SYSTEM_CD',
         (ifc(missing(KONDOR_A), '', cats(KONDOR_A))) as ACCOUNT_REGISTRATION_NM length = 100
            format = $100.
            informat = $100.
            label = 'ACCOUNT_REGISTRATION_NM',
         (ifc(missing(ARM302P_ID), '', cats(FXMM_ID, '_', ARM302P_ID))) as ALTERNATE_ACCOUNT_NM length = 40
            format = $40.
            informat = $40.
            label = 'ALTERNATE_ACCOUNT_NM',
         ('DRV') as FINANCIAL_ACCOUNT_TYPE_CD length = 3
            format = $3.
            informat = $3.
            label = 'FINANCIAL_ACCOUNT_TYPE_CD',
         BRCA,
         IRB_INSTR_STATUS_CD as ACCOUNT_STATUS_CD   
            label = 'ACCOUNT_STATUS_CD',
         DDAT as OPEN_DT   
            label = 'OPEN_DT',
         (case (IRB_INSTR_STATUS_CD)
            when 'MAT' then VDAT 
            when 'REV' then min(VDAT, coalesce(LCD, &ETL_SCD_FUTURE_DTTM))
            else .
            end) as CLOSE_DT length = 8
            format = DATETIME20.
            informat = DATETIME20.
            label = 'CLOSE_DT',
         (coalesce(CURRENCY_CD, 'DUM')) as CURRENCY_CD length = 3
            format = $3.
            informat = $3.
            label = 'CURRENCY_CD',
         "" as DAY_BASIS_CD length = 10
            format = $10.
            informat = $10.
            label = 'DAY_BASIS_CD',
         "" as INTEREST_PAYMENT_TYPE_CD length = 3
            format = $3.
            informat = $3.
            label = 'INTEREST_PAYMENT_TYPE_CD',
         IRB_SRC_ACCOUNT_ID,
         FINANCIAL_INSTRUMENT_TYPE_CD,
         (put(CNUM, z8.)) as CUSTOMER_NO length = 9
            format = $9.
            informat = $9.
            label = 'CNUM',
         IRB_DUMMY_TYPE_CD
   from &SYSLAST
   ;
quit;

%let SYSLAST = work.W1MOEVV1;

%global etls_sql_pushDown;
%let etls_sql_pushDown = &sys_sql_ip_all;

%rcSet(&sqlrc); 



/**  Step end Extract **/

/*==========================================================================* 
 * Step:            Генерация BK                          A5Y50FNE.AQ0009PZ * 
 * Transform:       Генерация BK                                            * 
 * Description:                                                             * 
 *                                                                          * 
 * Source Table:    Extract - work.W1MOEVV1               A5Y50FNE.AO0005FU * 
 * Target Table:    Генерация BKtpOut - work.W1MHBF25     A5Y50FNE.AO0005FV * 
 *==========================================================================*/ 

%let transformID = %quote(A5Y50FNE.AQ0009PZ);
%let trans_rc = 0;
%let etls_stepStartTime = %sysfunc(datetime(), datetime20.); 

%let etls_recnt = -1;
%let SYSLAST = %nrquote(work.W1MOEVV1); 

%let _INPUT_count = 1; 
%let _INPUT = work.W1MOEVV1;
%let _INPUT_connect = ;
%let _INPUT_engine = ;
%let _INPUT_memtype = VIEW;
%let _INPUT_options = %nrquote();
%let _INPUT_alter = %nrquote();
%let _INPUT_path = %nrquote(/Extract_A5Y50FNE.AO0005FU%(WorkTable%));
%let _INPUT_type = 1;
%let _INPUT_label = %nrquote();

%let tpIn = work.W1MOEVV1;
%let tpIn_connect = ;
%let tpIn_engine = ;
%let tpIn_memtype = VIEW;
%let tpIn_options = %nrquote();
%let tpIn_alter = %nrquote();
%let tpIn_path = %nrquote(/Extract_A5Y50FNE.AO0005FU%(WorkTable%));
%let tpIn_type = 1;
%let tpIn_label = %nrquote();

%let _OUTPUT_count = 1; 
%let _OUTPUT = work.W1MHBF25;
%let _OUTPUT_connect = ;
%let _OUTPUT_engine = ;
%let _OUTPUT_memtype = DATA;
%let _OUTPUT_options = %nrquote();
%let _OUTPUT_alter = %nrquote();
%let _OUTPUT_path = %nrquote(/Генерация BKtpOut_A5Y50FNE.AO0005FV%(WorkTable%));
%let _OUTPUT_type = 1;
%let _OUTPUT_label = %nrquote();
/* List of target columns to keep  */ 
%let _OUTPUT_keep = DRV_ACCOUNT_ID VALID_FROM_DTTM VALID_TO_DTTM SOURCE_SYSTEM_CD 
        ACCOUNT_REGISTRATION_NM ALTERNATE_ACCOUNT_NM FINANCIAL_ACCOUNT_TYPE_CD 
        ACCOUNT_STATUS_CD OPEN_DT CLOSE_DT CURRENCY_CD DAY_BASIS_CD 
        INTEREST_PAYMENT_TYPE_CD IRB_SRC_ACCOUNT_ID MID_FINANCIAL_UNIT_ID_BRCA 
        FCC_COUNTERPARTY_ID BRCA IRB_DUMMY_TYPE_CD 
        FINANCIAL_INSTRUMENT_TYPE_CD;

%let tpOut = work.W1MHBF25;
%let tpOut_connect = ;
%let tpOut_engine = ;
%let tpOut_memtype = DATA;
%let tpOut_options = %nrquote();
%let tpOut_alter = %nrquote();
%let tpOut_path = %nrquote(/Генерация BKtpOut_A5Y50FNE.AO0005FV%(WorkTable%));
%let tpOut_type = 1;
%let tpOut_label = %nrquote();
/* List of target columns to keep  */ 
%let tpOut_keep = DRV_ACCOUNT_ID VALID_FROM_DTTM VALID_TO_DTTM SOURCE_SYSTEM_CD 
        ACCOUNT_REGISTRATION_NM ALTERNATE_ACCOUNT_NM FINANCIAL_ACCOUNT_TYPE_CD 
        ACCOUNT_STATUS_CD OPEN_DT CLOSE_DT CURRENCY_CD DAY_BASIS_CD 
        INTEREST_PAYMENT_TYPE_CD IRB_SRC_ACCOUNT_ID MID_FINANCIAL_UNIT_ID_BRCA 
        FCC_COUNTERPARTY_ID BRCA IRB_DUMMY_TYPE_CD 
        FINANCIAL_INSTRUMENT_TYPE_CD;


proc datasets lib=work nolist nowarn memtype = (data view);
   delete W1MHBF25;
quit;

%let tpBK = %nrquote(FINANCIAL_ACCOUNT_DRV           );
%let tpBK0 = %nrquote(3);
%let tpBK1 = %nrquote(FINANCIAL_ACCOUNT_DRV           );
%let tpBK2 = %nrquote(FINANCIAL_UNIT_MID_BRCA         );
%let tpBK3 = %nrquote(FCC_COUNTERPARTY_FCC            );
%let tpBK_count = %nrquote(3);
%let tpOptionalBK_count = %nrquote(0);
%let tpOptionalBK = ;

/* List of target columns to keep  */ 
%let _keep = DRV_ACCOUNT_ID VALID_FROM_DTTM VALID_TO_DTTM SOURCE_SYSTEM_CD 
        ACCOUNT_REGISTRATION_NM ALTERNATE_ACCOUNT_NM FINANCIAL_ACCOUNT_TYPE_CD 
        ACCOUNT_STATUS_CD OPEN_DT CLOSE_DT CURRENCY_CD DAY_BASIS_CD 
        INTEREST_PAYMENT_TYPE_CD IRB_SRC_ACCOUNT_ID MID_FINANCIAL_UNIT_ID_BRCA 
        FCC_COUNTERPARTY_ID BRCA IRB_DUMMY_TYPE_CD 
        FINANCIAL_INSTRUMENT_TYPE_CD;
/* List of target columns to keep  */ 
%let keep = DRV_ACCOUNT_ID VALID_FROM_DTTM VALID_TO_DTTM SOURCE_SYSTEM_CD 
        ACCOUNT_REGISTRATION_NM ALTERNATE_ACCOUNT_NM FINANCIAL_ACCOUNT_TYPE_CD 
        ACCOUNT_STATUS_CD OPEN_DT CLOSE_DT CURRENCY_CD DAY_BASIS_CD 
        INTEREST_PAYMENT_TYPE_CD IRB_SRC_ACCOUNT_ID MID_FINANCIAL_UNIT_ID_BRCA 
        FCC_COUNTERPARTY_ID BRCA IRB_DUMMY_TYPE_CD 
        FINANCIAL_INSTRUMENT_TYPE_CD;
/*****************************************************************
* ВЕРСИЯ:
*     $Id: transform_generate_bk.sas 4889 2013-04-04 09:14:07Z nesterenok $
*
******************************************************************
* НАЗНАЧЕНИЕ:
*     Генерирует бизнес-ключи в таблице по списку.
*
* ПАРАМЕТРЫ:
*     tpIn                    +  имя входного набора
*     tpBK                    +  список кодов обязательных для генерации бизнес-ключей, разделенный пробелами
*                                Такой бизнес-ключ станет дамми, если заполнены не все поля, его составляющие
*                                FK к ETL_SYS.ETL_BK.BK_CD
*     tpOptionalBK            +  список кодов НЕобязательных для генерации бизнес-ключей, разделенный пробелами
*                                Такой бизнес-ключ останется пустым, если заполнены не все поля, его составляющие
*     tpOut                   +  имя выходного набора
*
******************************************************************/

%macro transform_generate_bk;
   %let tpBK_count         = %unquote(&tpBK_count);
   %let tpOptionalBK_count = %unquote(&tpOptionalBK_count);

   %local lmvDummyRows lmvFieldDummyCount lmvDummyRequired;
   %let lmvDummyRows       = work.tr_gen_bk_dummy_rows;
   %let lmvFieldDummyCount = etl_dummy_count;
   %let lmvDummyRequired   = %eval (&tpBK_count gt 0);

   /* Макросы для генерации одного ключа */
   %macro sm_trans_gen_bk_required;
      %etl_generate_bk (
         mpFieldBK=&bk_field_nm, mpLengthBK=%sysfunc(inputn(&bk_type_cd, bkt_cd_len.)),
         mpColumnList=&bk_column_list_txt, mpFormat=&bk_format_txt,
         mpFieldDummy=&lmvFieldDummy, mpFieldDummyCount=&lmvFieldDummyCount
      );
   %mend;
   %macro sm_trans_gen_bk_optional;
      %etl_generate_bk (
         mpFieldBK=&bk_field_nm, mpLengthBK=%sysfunc(inputn(&bk_type_cd, bkt_cd_len.)),
         mpColumnList=&bk_column_list_txt, mpFormat=&bk_format_txt,
         mpFieldDummy=
      );
   %mend;

   /* Макрос для подстановки в дамми-ключ уникального номера */
   %macro sm_trans_gen_bk_dummy;
      if &lmvFieldDummy gt 0 then do;
         set &lmvDummyIds (keep=OBJECT_ID rename=(OBJECT_ID=&lmvFieldDummy._no)) point=&lmvFieldDummy;
         &bk_field_nm = cats (&bk_field_nm, "_", &lmvFieldDummy._no);

         %error_check;
      end;
   %mend;


   /* Создаем выходной набор итерацией по всем заявленным бизнес-ключам */
   /* Считаем необходимое кол-во дамми-ключей */
   %local lmvBkIndex lmvFieldDummy lmvDummyCount;
   %let lmvDummyCount   = 0;
   data
      %if &lmvDummyRequired %then %do;
         &tpOut (drop= etl_dummy_:)
         &lmvDummyRows
      %end;
      %else %do;
         &tpOut
      %end;
   ;
      set &tpIn end=ds_end;

      /* Генерация необязательных ключей */
      %do lmvBkIndex=1 %to &tpOptionalBK_count;
         %util_loop_data (mpLoopMacro=sm_trans_gen_bk_optional, mpData=ETL_SYS.ETL_BK,
                          mpWhere=BK_CD eq %util_quote(&&tpOptionalBK&lmvBkIndex)
         );
      %end;

      %if &lmvDummyRequired %then %do;
         length &lmvFieldDummyCount 8;
         drop &lmvFieldDummyCount;
         retain &lmvFieldDummyCount 0;

         /* Генерация обязательных ключей */
         %do lmvBkIndex=1 %to &tpBK_count;
            %let lmvFieldDummy = etl_dummy_&lmvBkIndex.;

            %util_loop_data (mpLoopMacro=sm_trans_gen_bk_required, mpData=ETL_SYS.ETL_BK,
                             mpWhere=BK_CD eq %util_quote(&&tpBK&lmvBkIndex)
            );
         %end;

         /* Если в какой-то записи есть дамми, то не выводим ее сразу */
         if sum (of etl_dummy_1-etl_dummy_&tpBK_count) = 0 then
            output &tpOut;
         else do;
            output &lmvDummyRows;
         end;

         if ds_end then call symputx ("lmvDummyCount", &lmvFieldDummyCount);
      %end;
      %else %do;
         output &tpOut;
      %end;
   run;
   %error_check (mpStepType=DATA);

   /* Если дамми нет, то всё */
   %if (not &lmvDummyRequired) or (&lmvDummyCount eq 0) %then %return;


   /* Для каждого дамми генерируем уникальный номер */
   %local lmvDummyIds;
   %let lmvDummyIds = work.tr_gen_bk_dummy_ids;
   %unique_ids (mpIdCount=&lmvDummyCount, mpOut=&lmvDummyIds, mpSequenceName=ETL_DUMMY_SEQ);

   /* Добавляем номер к дамми */
   data &lmvDummyRows._id (drop= etl_dummy_:);
      set &lmvDummyRows;

      %do lmvBkIndex=1 %to &tpBK_count;
         %let lmvFieldDummy = etl_dummy_&lmvBkIndex.;

         %util_loop_data (mpLoopMacro=sm_trans_gen_bk_dummy, mpData=ETL_SYS.ETL_BK,
                          mpWhere=BK_CD eq %util_quote(&&tpBK&lmvBkIndex)
         );
      %end;
   run;
   %error_check (mpStepType=DATA);


   /* Добавляем дамми-строки к выходному набору */
   proc append base=&tpOut data=&lmvDummyRows._id;
   run;
   %error_check (mpStepType=DATA);

%mend transform_generate_bk;

%transform_generate_bk;

%rcSet(&syserr); 
%rcSet(&sysrc); 
%rcSet(&sqlrc); 



/**  Step end Генерация BK **/

/*==========================================================================* 
 * Step:            Table Loader                          A5Y50FNE.AQ0009Q0 * 
 * Transform:       Table Loader (Version 2.1)                              * 
 * Description:                                                             * 
 *                                                                          * 
 * Source Table:    Генерация BKtpOut - work.W1MHBF25     A5Y50FNE.AO0005FV * 
 * Target Table:    CUSTOMER_X_FIN_ACC_SWP_BK -           A5Y50FNE.AE00011W * 
 *                   work_ia.CUSTOMER_X_FIN_ACC_SWP_BK                      * 
 *==========================================================================*/ 

%let transformID = %quote(A5Y50FNE.AQ0009Q0);
%let trans_rc = 0;
%let etls_stepStartTime = %sysfunc(datetime(), datetime20.); 

%let SYSLAST = %nrquote(work.W1MHBF25); 

%let SYS_SQL_IP_SPEEDO = Y;
%let SYS_SQL_MAPPUTTO = sas_put;
%let SYS_SQLREDUCEPUT = DBMS;
%global etls_sql_pushDown;
%let etls_sql_pushDown = -1;
option DBIDIRECTEXEC;

%global etls_tableExist;
%global etls_numIndex;
%global etls_lastTable;
%let etls_tableExist = -1; 
%let etls_numIndex = -1; 
%let etls_lastTable = &SYSLAST; 

/*---- Define load data macro  ----*/ 

/* --------------------------------------------------------------
   Load Technique Selection: Replace - EntireTable
   Constraint and index action selections: 'INIT','ASIS','ASIS','ASIS'
   Additional options selections... 
      Set unmapped to missing on updates: false 
   -------------------------------------------------------------- */
%macro etls_loader;

   %let etls_tableOptions = ;
   
   /*---- Map the columns  ----*/ 
   proc datasets lib = work nolist nowarn memtype = (data view);
      delete WIRP59Q;
   quit;
   
   data _null_;
      put "NOTE: The following column(s) do not have a column mapping, so the"
           " value(s) will be set to missing: RELSHP_TO_PRIMARY_CD,"
           " EFFECTIVE_FROM_DTTM, EFFECTIVE_TO_DTTM";
   run;
   
   %put %str(NOTE: Mapping columns ...);
   proc sql;
      create view work.WIRP59Q as
         select
            FCC_COUNTERPARTY_ID as CUSTOMER_ID,
            DRV_ACCOUNT_ID as ACCOUNT_ID,
            VALID_FROM_DTTM,
            VALID_TO_DTTM,
            "" as RELSHP_TO_PRIMARY_CD length = 3
               format = $3.
               informat = $3.,
            ('DDC') as RELATIONSHIP_TO_ACCOUNT_CD length = 3
               format = $3.
               informat = $3.,
            . as EFFECTIVE_FROM_DTTM length = 8
               format = DATETIME20.
               informat = DATETIME20.,
            . as EFFECTIVE_TO_DTTM length = 8
               format = DATETIME20.
               informat = DATETIME20.
      from &etls_lastTable
      ;
   quit;
   
   %let SYSLAST = work.WIRP59Q;
   
   %let etls_lastTable = &SYSLAST; 
   %let etls_tableOptions = ; 
   
   /* Determine if the target table exists  */ 
   %let etls_tableExist = %eval(%sysfunc(exist(work_ia.CUSTOMER_X_FIN_ACC_SWP_BK, DATA)) or 
         %sysfunc(exist(work_ia.CUSTOMER_X_FIN_ACC_SWP_BK, VIEW))); 
   
   %if &etls_tableExist %then 
   %do;/* table exists  */ 
      %let etls_hasPreExistingConstraint=0; 
      
      proc datasets lib = work nolist nowarn memtype = (data view);
         delete etls_commands etls_commands_F;
      quit;
      
      %let etls_otherTablesReferToThisTable=0;
      
      %macro etls_CIContents(table=,workTableOut=,inDSOptions=);
         %put NOTE: Building table listing Constraints and Indexes for: &table;
         proc datasets lib=work nolist; delete &workTableOut; quit;
         proc contents data=&table&inDSOptions out2=&workTableOut noprint; run;
         
         data &workTableOut;
            length name $60 type $20 icown idxUnique idxNoMiss $3 recreate $600;
            set &workTableOut;
            type=upcase(type);
            if type eq 'REFERENTIAL' then
            do;
               put "WARNING%QUOTE(:) Target table is referenced by constraints in"
                    " another table: " ref;
               call symput('etls_otherTablesReferToThisTable','1');
               delete;
            end;
            if type='INDEX' and ICOwn eq 'YES' then delete;
         run;
         %rcSet(&syserr); 
         
      %mend etls_CIContents;
      
      %etls_CIContents(table=work_ia.CUSTOMER_X_FIN_ACC_SWP_BK, workTableOut=etls_commands, inDSOptions=);
      
      %if &etls_otherTablesReferToThisTable %then 
         %put WARNING%QUOTE(:) Replacing entire table will fail. Consider an alternate load technique or revising constraints.; 
      %else 
      %do; /* okay - remove foreign keys  */ 
      
         data etls_commands_F; 
            set etls_commands; 
            if upcase(type)="FOREIGN KEY" then 
            do; 
               command='ic delete '||trim(name)||';';
               output etls_commands_F; 
            end; 
         run; 
         
         %put %str(NOTE: Removing foreign keys before dropping table...);
         data _null_;
            set etls_commands_F;
            %rcSet(&syserr); 
            
      %end; /* okay - remove foreign keys  */ 
      
      proc datasets lib = work nolist nowarn memtype = (data view);
         delete etls_commands etls_commands_F;
      quit;
      
      /*---- Drop a table  ----*/ 
      %put %str(NOTE: Dropping table ...);
      proc datasets lib = work_ia nolist nowarn memtype = (data view);
         delete CUSTOMER_X_FIN_ACC_SWP_BK;
      quit;
      
      %rcSet(&syserr); 
      
      %let etls_tableExist = 0;
      
   %end; /* table exists  */ 
   
   /*---- Create a new table  ----*/ 
   %if (&etls_tableExist eq 0) %then 
   %do;  /* if table does not exist  */ 
   
      %put %str(NOTE: Creating table ...);
      
      data work_ia.CUSTOMER_X_FIN_ACC_SWP_BK;
         attrib CUSTOMER_ID length = $32
            format = $32.
            informat = $32.
            label = 'CUSTOMER_ID'; 
         attrib ACCOUNT_ID length = $32
            format = $32.
            informat = $32.
            label = 'ACCOUNT_ID'; 
         attrib VALID_FROM_DTTM length = 8
            format = DATETIME20.
            informat = DATETIME20.
            label = 'VALID_FROM_DTTM'; 
         attrib VALID_TO_DTTM length = 8
            format = DATETIME20.
            informat = DATETIME20.
            label = 'VALID_TO_DTTM'; 
         attrib RELSHP_TO_PRIMARY_CD length = $3
            format = $3.
            informat = $3.
            label = 'RELSHP_TO_PRIMARY_CD'; 
         attrib RELATIONSHIP_TO_ACCOUNT_CD length = $3
            format = $3.
            informat = $3.
            label = 'RELATIONSHIP_TO_ACCOUNT_CD'; 
         attrib EFFECTIVE_FROM_DTTM length = 8
            format = DATETIME20.
            informat = DATETIME20.
            label = 'EFFECTIVE_FROM_DTTM'; 
         attrib EFFECTIVE_TO_DTTM length = 8
            format = DATETIME20.
            informat = DATETIME20.
            label = 'EFFECTIVE_TO_DTTM'; 
         call missing(of _all_);
         stop;
      run;
      
      %rcSet(&syserr); 
      
      /*---- Create the integrity constraints for a table  ----*/ 
      %put %str(NOTE: Creating integrity constraints ...);
      proc datasets library=work_ia nolist;
         modify CUSTOMER_X_FIN_ACC_SWP_BK;
            ic create not null (CUSTOMER_ID);
            ic create not null (ACCOUNT_ID);
            ic create not null (VALID_FROM_DTTM);
            ic create not null (VALID_TO_DTTM);
            ic create not null (RELATIONSHIP_TO_ACCOUNT_CD);
            ic create Index1 = primary key (CUSTOMER_ID ACCOUNT_ID VALID_FROM_DTTM 
                           RELATIONSHIP_TO_ACCOUNT_CD);
      quit;
      
      %rcSet(&syserr); 
      
   %end;  /* if table does not exist  */ 
   
   /*---- Append  ----*/ 
   %put %str(NOTE: Appending data ...);
   
   proc append base = work_ia.CUSTOMER_X_FIN_ACC_SWP_BK 
      data = &etls_lastTable (&etls_tableOptions)  force ; 
    run; 
   
   %rcSet(&syserr); 
   
   proc datasets lib = work nolist nowarn memtype = (data view);
      delete WIRP59Q;
   quit;
   
%mend etls_loader;
%etls_loader;

%let etls_recCheckExist = 0; 
%let etls_recnt = 0; 
%macro etls_recordCheck; 
   %let etls_recCheckExist = %eval(%sysfunc(exist(work_ia.CUSTOMER_X_FIN_ACC_SWP_BK, DATA)) or 
         %sysfunc(exist(work_ia.CUSTOMER_X_FIN_ACC_SWP_BK, VIEW))); 
   
   %if (&etls_recCheckExist) %then
   %do;
      %local etls_syntaxcheck; 
      %let etls_syntaxcheck = %sysfunc(getoption(syntaxcheck)); 
      /* Turn off syntaxcheck option to perform following steps  */ 
      options nosyntaxcheck;
      
      proc contents data = work_ia.CUSTOMER_X_FIN_ACC_SWP_BK out = work.etls_contents(keep = nobs) noprint; 
      run; 
      
      data _null_; 
         set work.etls_contents (obs = 1); 
         call symput("etls_recnt", left(put(nobs,32.))); 
      run;
      
      proc datasets lib = work nolist nowarn memtype = (data view);
         delete etls_contents;
      quit;
      
      /* Reset syntaxcheck option to previous setting  */ 
      options &etls_syntaxcheck; 
   %end;
%mend etls_recordCheck;
%etls_recordCheck;



/**  Step end Table Loader **/

/*==========================================================================* 
 * Step:            Table Loader                          A5Y50FNE.AQ0009Q1 * 
 * Transform:       Table Loader (Version 2.1)                              * 
 * Description:                                                             * 
 *                                                                          * 
 * Source Table:    Генерация BKtpOut - work.W1MHBF25     A5Y50FNE.AO0005FV * 
 * Target Table:    FINANCIAL_ACCOUNT_SWP_BK -            A5Y50FNE.AE00012S * 
 *                   work_ia.FINANCIAL_ACCOUNT_SWP_BK                       * 
 *==========================================================================*/ 

%let transformID = %quote(A5Y50FNE.AQ0009Q1);
%let trans_rc = 0;
%let etls_stepStartTime = %sysfunc(datetime(), datetime20.); 

%let SYSLAST = %nrquote(work.W1MHBF25); 

%let SYS_SQL_IP_SPEEDO = Y;
%let SYS_SQL_MAPPUTTO = sas_put;
%let SYS_SQLREDUCEPUT = DBMS;
%global etls_sql_pushDown;
%let etls_sql_pushDown = -1;
option DBIDIRECTEXEC;

%global etls_tableExist;
%global etls_numIndex;
%global etls_lastTable;
%let etls_tableExist = -1; 
%let etls_numIndex = -1; 
%let etls_lastTable = &SYSLAST; 

/*---- Define load data macro  ----*/ 

/* --------------------------------------------------------------
   Load Technique Selection: Replace - EntireTable
   Constraint and index action selections: 'INIT','ASIS','ASIS','ASIS'
   Additional options selections... 
      Set unmapped to missing on updates: false 
   -------------------------------------------------------------- */
%macro etls_loader;

   %let etls_tableOptions = ;
   
   /*---- Map the columns  ----*/ 
   proc datasets lib = work nolist nowarn memtype = (data view);
      delete WIRP5BQ;
   quit;
   
   data _null_;
      put "NOTE: The following column(s) do not have a column mapping, so the"
           " value(s) will be set to missing: AUTO_DEBIT_ACCOUNT_TYPE_CD,"
           " ACCOUNT_REGISTRATION_TYPE_CD, CLOSE_REASON_CD,    ACCOUNT_TAX_ID,"
           " EXPECTED_LOSS_PCT, INDIVIDUAL_ORGANIZATION_CD, SOURCE_CD,   "
           " OPENING_CHANNEL_CD, PREFERRED_CHANNEL_CD, PRIMARY_PHONE_NO,   "
           " PRIMARY_PHONE_TYPE_CD, SECONDARY_PHONE_NO, SECONDARY_PHONE_TYPE_CD,"
           "    MAILABLE_FLG, TELEPHONABLE_FLG, EMAIL_FLG, SMS_FLG,"
           " DO_NOT_CONTACT_FLG,    EMPLOYEE_RK, CURRENCY_BASED_ACCOUNT_FLG,"
           " FEE_BASED_FLG, ANNUAL_FEES_AMT,    MONTHLY_FEES_AMT, CAMPAIGN_CD,"
           " COMMUNICATION_CD, REGISTERED_ONLINE_DT,    FIRST_LOGIN_DT,"
           " ONLINE_BILL_PAYMENT_FLG, ID_VERIFICATION_TYPE_CD,   "
           " PREVIOUS_ACCOUNT_ID, OPEN_BRANCH_FINANCIAL_UNIT_ID,   "
           " FINANCIAL_APPLICATION_ID, CREDIT_FACILITY_ID,"
           " FUTURE_MARGIN_INCOME_AMT,    IN_DEFAULT_FLG, FINANCIAL_BOOK_ID,"
           " IRRECOVERABLE_FLG,    OWNED_BY_INTERNAL_ORG_ID,"
           " PREVIOUS_BANK_EXTERNAL_ORG_ID, NETTING_SET_ID,    REVOLVING_FLG,"
           " SOURCE_CHANNEL_CD, GRACE_PERIOD_DAYS_CNT,    REMARGINING_DAYS_CNT,"
           " FINANCIAL_CALENDAR_ID, PORTFOLIO_ID,    SECURITIZATION_POOL_ID,"
           " RECEIVABLES_POOL_ID, ACCOUNT_USAGE_TYPE_CD,    RISK_ALARM_FLG,"
           " LOW_PROFITABILITY_FLG, ACCOUNT_LIFECYCLE_STG_CD,   "
           " ATTRITION_ALARM_FLG, BALANCE_FROZEN_FLG, BALANCE_FROZEN_DT,   "
           " ACCOUNT_BLOCK_REASON_CD, TAXATION_STATE_CD,"
           " EFFECTIVE_MATURITY_YEAR_NO,    GL_ACCOUNT_ID,"
           " FROM_OTHER_INSTITUTION_FLG, ACCOUNT_RENEWAL_CNT,   "
           " BALANCE_TRANSFER_DT, BALANCE_TRANSFER_AMT, BALANCE_TRANSFER_CNT,   "
           " BASE_LONG_TERM_APR_RT, BROKER_FLG, MULT_RATE_FLG,"
           " AUTO_DEBIT_ACCOUNT_NO,    WORST_STATUS_LAST_12_MTH_CD,"
           " WORST_STATUS_LAST_12_MTH_DT,    BALANCE_TRNSF_OTHER_ACCT_CNT,"
           " EFFECTIVE_FROM_DTTM, EFFECTIVE_TO_DTTM,    COUNTERPARTY_ID,"
           " INSURED_BY_COUNTERPARTY_ID, STATEMENT_FREQUENCY_CD,   "
           " SECURITY_DEPOSIT_AMT, SECURITY_DEPOSIT_REFUND_AMT,"
           " FIRST_PAYMENT_DT,    LAST_PAYMENT_DT, FIRST_RESET_DT,"
           " LAST_RESET_DT, RESETS_PER_ANNUM_NO,    PRINCIPAL_PAYMENT_TYPE_CD,"
           " PRINCIPAL_PAYMENT_AMT, RATE_POLICY_ID, SPREAD_RT,   "
           " DISCOUNT_SPREAD_RT, INITIAL_CONTRACT_RT,"
           " FIXED_MONTHLY_PREPAYMENT_RT,    CAPITAL_ALLOCATION_ID,"
           " CAPITAL_COST_ID, SEGMENT_ID,    NEAR_BRANCH_FINANCIAL_UNIT_ID,"
           " STATEMENT_OPT_FLG, VALUE_SCALING_FACTOR_RT,   "
           " INTERNAL_REPORTING_CATEGORY_CD, CONVEXITY_ADJUSTMENT_FLG,   "
           " ARREARS_PAYMENT_CD, QUANTO_FEATURE_ID, CASH_INTENSIVE_BUSINESS_FLG,"
           "    LETTER_OF_CREDIT_ONFILE_FLG, TRADE_FINANCE_FLG,"
           " ANNUITY_PAYMENT_TYPE_CD,    INTEREST_PAYMENT_TIME_FREQ_CD,"
           " LIQUIDITY_CATEGORY_TYPE_CD,    HOLIDAY_DATE_ROLL_CONV_CD,"
           " WEEKEND_DATE_ROLL_CONV_CD, EXPENSE_ALLOCATION_ID,   "
           " FIRST_INTEREST_PAYMENT_DT, LAST_INTEREST_PAYMENT_DT,"
           " IRB_DUMMY_TYPE_CD";
   run;
   
   %put %str(NOTE: Mapping columns ...);
   proc sql;
      create view work.WIRP5BQ as
         select
            DRV_ACCOUNT_ID as ACCOUNT_ID,
            VALID_FROM_DTTM,
            VALID_TO_DTTM,
            SOURCE_SYSTEM_CD,
            ACCOUNT_REGISTRATION_NM,
            ALTERNATE_ACCOUNT_NM,
            FINANCIAL_ACCOUNT_TYPE_CD,
            "" as AUTO_DEBIT_ACCOUNT_TYPE_CD length = 3
               format = $3.
               informat = $3.,
            "" as ACCOUNT_REGISTRATION_TYPE_CD length = 3
               format = $3.
               informat = $3.,
            ACCOUNT_STATUS_CD,
            OPEN_DT,
            (ifn(ACCOUNT_STATUS_CD = 'AUT', ., CLOSE_DT)) as CLOSE_DT length = 8
               format = DATETIME20.
               informat = DATETIME20.,
            "" as CLOSE_REASON_CD length = 3
               format = $3.
               informat = $3.,
            "" as ACCOUNT_TAX_ID length = 32
               format = $32.
               informat = $32.,
            . as EXPECTED_LOSS_PCT length = 8
               format = 11.4
               informat = 11.4,
            "" as INDIVIDUAL_ORGANIZATION_CD length = 3
               format = $3.
               informat = $3.,
            "" as SOURCE_CD length = 5
               format = $5.
               informat = $5.,
            "" as OPENING_CHANNEL_CD length = 3
               format = $3.
               informat = $3.,
            "" as PREFERRED_CHANNEL_CD length = 3
               format = $3.
               informat = $3.,
            CURRENCY_CD,
            "" as PRIMARY_PHONE_NO length = 20
               format = $20.
               informat = $20.,
            "" as PRIMARY_PHONE_TYPE_CD length = 3
               format = $3.
               informat = $3.,
            "" as SECONDARY_PHONE_NO length = 20
               format = $20.
               informat = $20.,
            "" as SECONDARY_PHONE_TYPE_CD length = 3
               format = $3.
               informat = $3.,
            "" as MAILABLE_FLG length = 1
               format = $1.
               informat = $1.,
            "" as TELEPHONABLE_FLG length = 1
               format = $1.
               informat = $1.,
            "" as EMAIL_FLG length = 1
               format = $1.
               informat = $1.,
            "" as SMS_FLG length = 1
               format = $1.
               informat = $1.,
            "" as DO_NOT_CONTACT_FLG length = 1
               format = $1.
               informat = $1.,
            . as EMPLOYEE_RK length = 8
               format = 11.
               informat = 11.,
            "" as CURRENCY_BASED_ACCOUNT_FLG length = 1
               format = $1.
               informat = $1.,
            "" as FEE_BASED_FLG length = 1
               format = $1.
               informat = $1.,
            . as ANNUAL_FEES_AMT length = 8
               format = 20.5
               informat = 20.5,
            . as MONTHLY_FEES_AMT length = 8
               format = 20.5
               informat = 20.5,
            "" as CAMPAIGN_CD length = 30
               format = $30.
               informat = $30.,
            "" as COMMUNICATION_CD length = 30
               format = $30.
               informat = $30.,
            . as REGISTERED_ONLINE_DT length = 8
               format = DATETIME20.
               informat = DATETIME20.,
            . as FIRST_LOGIN_DT length = 8
               format = DATETIME20.
               informat = DATETIME20.,
            "" as ONLINE_BILL_PAYMENT_FLG length = 1
               format = $1.
               informat = $1.,
            "" as ID_VERIFICATION_TYPE_CD length = 3
               format = $3.
               informat = $3.,
            "" as PREVIOUS_ACCOUNT_ID length = 32
               format = $32.
               informat = $32.,
            "" as OPEN_BRANCH_FINANCIAL_UNIT_ID length = 32
               format = $32.
               informat = $32.,
            MID_FINANCIAL_UNIT_ID_BRCA as PRIM_BRANCH_FINANCIAL_UNIT_ID,
            "" as FINANCIAL_APPLICATION_ID length = 32
               format = $32.
               informat = $32.,
            "" as CREDIT_FACILITY_ID length = 40
               format = $40.
               informat = $40.,
            . as FUTURE_MARGIN_INCOME_AMT length = 8
               format = 20.5
               informat = 20.5,
            "" as IN_DEFAULT_FLG length = 1
               format = $1.
               informat = $1.,
            "" as FINANCIAL_BOOK_ID length = 32
               format = $32.
               informat = $32.,
            "" as IRRECOVERABLE_FLG length = 1
               format = $1.
               informat = $1.,
            "" as OWNED_BY_INTERNAL_ORG_ID length = 32
               format = $32.
               informat = $32.,
            "" as PREVIOUS_BANK_EXTERNAL_ORG_ID length = 32
               format = $32.
               informat = $32.,
            "" as NETTING_SET_ID length = 32
               format = $32.
               informat = $32.,
            "" as REVOLVING_FLG length = 1
               format = $1.
               informat = $1.,
            "" as SOURCE_CHANNEL_CD length = 3
               format = $3.
               informat = $3.,
            . as GRACE_PERIOD_DAYS_CNT length = 8
               format = 7.
               informat = 7.,
            . as REMARGINING_DAYS_CNT length = 8
               format = 7.
               informat = 7.,
            "" as FINANCIAL_CALENDAR_ID length = 32
               format = $32.
               informat = $32.,
            DAY_BASIS_CD,
            "" as PORTFOLIO_ID length = 32
               format = $32.
               informat = $32.,
            "" as SECURITIZATION_POOL_ID length = 32
               format = $32.
               informat = $32.,
            "" as RECEIVABLES_POOL_ID length = 32
               format = $32.
               informat = $32.,
            "" as ACCOUNT_USAGE_TYPE_CD length = 3
               format = $3.
               informat = $3.,
            "" as RISK_ALARM_FLG length = 1
               format = $1.
               informat = $1.,
            "" as LOW_PROFITABILITY_FLG length = 1
               format = $1.
               informat = $1.,
            "" as ACCOUNT_LIFECYCLE_STG_CD length = 3
               format = $3.
               informat = $3.,
            "" as ATTRITION_ALARM_FLG length = 1
               format = $1.
               informat = $1.,
            "" as BALANCE_FROZEN_FLG length = 1
               format = $1.
               informat = $1.,
            . as BALANCE_FROZEN_DT length = 8
               format = DATETIME20.
               informat = DATETIME20.,
            "" as ACCOUNT_BLOCK_REASON_CD length = 3
               format = $3.
               informat = $3.,
            "" as TAXATION_STATE_CD length = 4
               format = $4.
               informat = $4.,
            . as EFFECTIVE_MATURITY_YEAR_NO length = 8
               format = 9.3
               informat = 9.3,
            "" as GL_ACCOUNT_ID length = 32
               format = $32.
               informat = $32.,
            "" as FROM_OTHER_INSTITUTION_FLG length = 1
               format = $1.
               informat = $1.,
            . as ACCOUNT_RENEWAL_CNT length = 8
               format = 7.
               informat = 7.,
            . as BALANCE_TRANSFER_DT length = 8
               format = DATETIME20.
               informat = DATETIME20.,
            . as BALANCE_TRANSFER_AMT length = 8
               format = 20.5
               informat = 20.5,
            . as BALANCE_TRANSFER_CNT length = 8
               format = 7.
               informat = 7.,
            . as BASE_LONG_TERM_APR_RT length = 8
               format = 11.4
               informat = 11.4,
            "" as BROKER_FLG length = 1
               format = $1.
               informat = $1.,
            "" as MULT_RATE_FLG length = 1
               format = $1.
               informat = $1.,
            "" as AUTO_DEBIT_ACCOUNT_NO length = 32
               format = $32.
               informat = $32.,
            "" as WORST_STATUS_LAST_12_MTH_CD length = 3
               format = $3.
               informat = $3.,
            . as WORST_STATUS_LAST_12_MTH_DT length = 8
               format = DATETIME20.
               informat = DATETIME20.,
            . as BALANCE_TRNSF_OTHER_ACCT_CNT length = 8
               format = 7.
               informat = 7.,
            . as EFFECTIVE_FROM_DTTM length = 8
               format = DATETIME20.
               informat = DATETIME20.,
            . as EFFECTIVE_TO_DTTM length = 8
               format = DATETIME20.
               informat = DATETIME20.,
            "" as COUNTERPARTY_ID length = 32
               format = $32.
               informat = $32.,
            "" as INSURED_BY_COUNTERPARTY_ID length = 32
               format = $32.
               informat = $32.,
            "" as STATEMENT_FREQUENCY_CD length = 3
               format = $3.
               informat = $3.,
            . as SECURITY_DEPOSIT_AMT length = 8
               format = 20.5
               informat = 20.5,
            . as SECURITY_DEPOSIT_REFUND_AMT length = 8
               format = 20.5
               informat = 20.5,
            . as FIRST_PAYMENT_DT length = 8
               format = DATETIME20.
               informat = DATETIME20.,
            . as LAST_PAYMENT_DT length = 8
               format = DATETIME20.
               informat = DATETIME20.,
            . as FIRST_RESET_DT length = 8
               format = DATETIME20.
               informat = DATETIME20.,
            . as LAST_RESET_DT length = 8
               format = DATETIME20.
               informat = DATETIME20.,
            . as RESETS_PER_ANNUM_NO length = 8
               format = 6.
               informat = 6.,
            "" as PRINCIPAL_PAYMENT_TYPE_CD length = 3
               format = $3.
               informat = $3.,
            . as PRINCIPAL_PAYMENT_AMT length = 8
               format = 20.5
               informat = 20.5,
            "" as RATE_POLICY_ID length = 32
               format = $32.
               informat = $32.,
            . as SPREAD_RT length = 8
               format = 11.4
               informat = 11.4,
            . as DISCOUNT_SPREAD_RT length = 8
               format = 11.4
               informat = 11.4,
            . as INITIAL_CONTRACT_RT length = 8
               format = 11.4
               informat = 11.4,
            . as FIXED_MONTHLY_PREPAYMENT_RT length = 8
               format = 11.4
               informat = 11.4,
            "" as CAPITAL_ALLOCATION_ID length = 32
               format = $32.
               informat = $32.,
            "" as CAPITAL_COST_ID length = 32
               format = $32.
               informat = $32.,
            "" as SEGMENT_ID length = 32
               format = $32.
               informat = $32.,
            "" as NEAR_BRANCH_FINANCIAL_UNIT_ID length = 32
               format = $32.
               informat = $32.,
            "" as STATEMENT_OPT_FLG length = 1
               format = $1.
               informat = $1.,
            . as VALUE_SCALING_FACTOR_RT length = 8
               format = 11.4
               informat = 11.4,
            "" as INTERNAL_REPORTING_CATEGORY_CD length = 3
               format = $3.
               informat = $3.,
            "" as CONVEXITY_ADJUSTMENT_FLG length = 1
               format = $1.
               informat = $1.,
            "" as ARREARS_PAYMENT_CD length = 3
               format = $3.
               informat = $3.,
            "" as QUANTO_FEATURE_ID length = 32
               format = $32.
               informat = $32.,
            "" as CASH_INTENSIVE_BUSINESS_FLG length = 1
               format = $1.
               informat = $1.,
            "" as LETTER_OF_CREDIT_ONFILE_FLG length = 1
               format = $1.
               informat = $1.,
            "" as TRADE_FINANCE_FLG length = 1
               format = $1.
               informat = $1.,
            "" as ANNUITY_PAYMENT_TYPE_CD length = 3
               format = $3.
               informat = $3.,
            INTEREST_PAYMENT_TYPE_CD,
            "" as INTEREST_PAYMENT_TIME_FREQ_CD length = 3
               format = $3.
               informat = $3.,
            "" as LIQUIDITY_CATEGORY_TYPE_CD length = 3
               format = $3.
               informat = $3.,
            "" as HOLIDAY_DATE_ROLL_CONV_CD length = 3
               format = $3.
               informat = $3.,
            "" as WEEKEND_DATE_ROLL_CONV_CD length = 3
               format = $3.
               informat = $3.,
            "" as EXPENSE_ALLOCATION_ID length = 32
               format = $32.
               informat = $32.,
            . as FIRST_INTEREST_PAYMENT_DT length = 8
               format = DATETIME20.
               informat = DATETIME20.,
            . as LAST_INTEREST_PAYMENT_DT length = 8
               format = DATETIME20.
               informat = DATETIME20.,
            "" as IRB_DUMMY_TYPE_CD length = 3
               format = $3.
               informat = $3.,
            IRB_SRC_ACCOUNT_ID,
            BRCA,
            FINANCIAL_INSTRUMENT_TYPE_CD
      from &etls_lastTable
      ;
   quit;
   
   %let SYSLAST = work.WIRP5BQ;
   
   %let etls_lastTable = &SYSLAST; 
   %let etls_tableOptions = ; 
   
   /* Determine if the target table exists  */ 
   %let etls_tableExist = %eval(%sysfunc(exist(work_ia.FINANCIAL_ACCOUNT_SWP_BK, DATA)) or 
         %sysfunc(exist(work_ia.FINANCIAL_ACCOUNT_SWP_BK, VIEW))); 
   
   %if &etls_tableExist %then 
   %do;/* table exists  */ 
      %let etls_hasPreExistingConstraint=0; 
      
      proc datasets lib = work nolist nowarn memtype = (data view);
         delete etls_commands etls_commands_F;
      quit;
      
      %let etls_otherTablesReferToThisTable=0;
      
      %macro etls_CIContents(table=,workTableOut=,inDSOptions=);
         %put NOTE: Building table listing Constraints and Indexes for: &table;
         proc datasets lib=work nolist; delete &workTableOut; quit;
         proc contents data=&table&inDSOptions out2=&workTableOut noprint; run;
         
         data &workTableOut;
            length name $60 type $20 icown idxUnique idxNoMiss $3 recreate $600;
            set &workTableOut;
            type=upcase(type);
            if type eq 'REFERENTIAL' then
            do;
               put "WARNING%QUOTE(:) Target table is referenced by constraints in"
                    " another table: " ref;
               call symput('etls_otherTablesReferToThisTable','1');
               delete;
            end;
            if type='INDEX' and ICOwn eq 'YES' then delete;
         run;
         %rcSet(&syserr); 
         
      %mend etls_CIContents;
      
      %etls_CIContents(table=work_ia.FINANCIAL_ACCOUNT_SWP_BK, workTableOut=etls_commands, inDSOptions=);
      
      %if &etls_otherTablesReferToThisTable %then 
         %put WARNING%QUOTE(:) Replacing entire table will fail. Consider an alternate load technique or revising constraints.; 
      %else 
      %do; /* okay - remove foreign keys  */ 
      
         data etls_commands_F; 
            set etls_commands; 
            if upcase(type)="FOREIGN KEY" then 
            do; 
               command='ic delete '||trim(name)||';';
               output etls_commands_F; 
            end; 
         run; 
         
         %put %str(NOTE: Removing foreign keys before dropping table...);
         data _null_;
            set etls_commands_F;
            %rcSet(&syserr); 
            
      %end; /* okay - remove foreign keys  */ 
      
      proc datasets lib = work nolist nowarn memtype = (data view);
         delete etls_commands etls_commands_F;
      quit;
      
      /*---- Drop a table  ----*/ 
      %put %str(NOTE: Dropping table ...);
      proc datasets lib = work_ia nolist nowarn memtype = (data view);
         delete FINANCIAL_ACCOUNT_SWP_BK;
      quit;
      
      %rcSet(&syserr); 
      
      %let etls_tableExist = 0;
      
   %end; /* table exists  */ 
   
   /*---- Create a new table  ----*/ 
   %if (&etls_tableExist eq 0) %then 
   %do;  /* if table does not exist  */ 
   
      %put %str(NOTE: Creating table ...);
      
      data work_ia.FINANCIAL_ACCOUNT_SWP_BK;
         attrib ACCOUNT_ID length = $32
            format = $32.
            informat = $32.
            label = 'ACCOUNT_ID'; 
         attrib VALID_FROM_DTTM length = 8
            format = DATETIME20.
            informat = DATETIME20.
            label = 'VALID_FROM_DTTM'; 
         attrib VALID_TO_DTTM length = 8
            format = DATETIME20.
            informat = DATETIME20.
            label = 'VALID_TO_DTTM'; 
         attrib SOURCE_SYSTEM_CD length = $3
            format = $3.
            informat = $3.
            label = 'SOURCE_SYSTEM_CD'; 
         attrib ACCOUNT_REGISTRATION_NM length = $100
            format = $100.
            informat = $100.
            label = 'ACCOUNT_REGISTRATION_NM'; 
         attrib ALTERNATE_ACCOUNT_NM length = $40
            format = $40.
            informat = $40.
            label = 'ALTERNATE_ACCOUNT_NM'; 
         attrib FINANCIAL_ACCOUNT_TYPE_CD length = $3
            format = $3.
            informat = $3.
            label = 'FINANCIAL_ACCOUNT_TYPE_CD'; 
         attrib AUTO_DEBIT_ACCOUNT_TYPE_CD length = $3
            format = $3.
            informat = $3.
            label = 'AUTO_DEBIT_ACCOUNT_TYPE_CD'; 
         attrib ACCOUNT_REGISTRATION_TYPE_CD length = $3
            format = $3.
            informat = $3.
            label = 'ACCOUNT_REGISTRATION_TYPE_CD'; 
         attrib ACCOUNT_STATUS_CD length = $3
            format = $3.
            informat = $3.
            label = 'ACCOUNT_STATUS_CD'; 
         attrib OPEN_DT length = 8
            format = DATETIME20.
            informat = DATETIME20.
            label = 'OPEN_DT'; 
         attrib CLOSE_DT length = 8
            format = DATETIME20.
            informat = DATETIME20.
            label = 'CLOSE_DT'; 
         attrib CLOSE_REASON_CD length = $3
            format = $3.
            informat = $3.
            label = 'CLOSE_REASON_CD'; 
         attrib ACCOUNT_TAX_ID length = $32
            format = $32.
            informat = $32.
            label = 'ACCOUNT_TAX_ID'; 
         attrib EXPECTED_LOSS_PCT length = 8
            format = 11.4
            informat = 11.4
            label = 'EXPECTED_LOSS_PCT'; 
         attrib INDIVIDUAL_ORGANIZATION_CD length = $3
            format = $3.
            informat = $3.
            label = 'INDIVIDUAL_ORGANIZATION_CD'; 
         attrib SOURCE_CD length = $5
            format = $5.
            informat = $5.
            label = 'SOURCE_CD'; 
         attrib OPENING_CHANNEL_CD length = $3
            format = $3.
            informat = $3.
            label = 'OPENING_CHANNEL_CD'; 
         attrib PREFERRED_CHANNEL_CD length = $3
            format = $3.
            informat = $3.
            label = 'PREFERRED_CHANNEL_CD'; 
         attrib CURRENCY_CD length = $3
            format = $3.
            informat = $3.
            label = 'CURRENCY_CD'; 
         attrib PRIMARY_PHONE_NO length = $20
            format = $20.
            informat = $20.
            label = 'PRIMARY_PHONE_NO'; 
         attrib PRIMARY_PHONE_TYPE_CD length = $3
            format = $3.
            informat = $3.
            label = 'PRIMARY_PHONE_TYPE_CD'; 
         attrib SECONDARY_PHONE_NO length = $20
            format = $20.
            informat = $20.
            label = 'SECONDARY_PHONE_NO'; 
         attrib SECONDARY_PHONE_TYPE_CD length = $3
            format = $3.
            informat = $3.
            label = 'SECONDARY_PHONE_TYPE_CD'; 
         attrib MAILABLE_FLG length = $1
            format = $1.
            informat = $1.
            label = 'MAILABLE_FLG'; 
         attrib TELEPHONABLE_FLG length = $1
            format = $1.
            informat = $1.
            label = 'TELEPHONABLE_FLG'; 
         attrib EMAIL_FLG length = $1
            format = $1.
            informat = $1.
            label = 'EMAIL_FLG'; 
         attrib SMS_FLG length = $1
            format = $1.
            informat = $1.
            label = 'SMS_FLG'; 
         attrib DO_NOT_CONTACT_FLG length = $1
            format = $1.
            informat = $1.
            label = 'DO_NOT_CONTACT_FLG'; 
         attrib EMPLOYEE_RK length = 8
            format = 11.
            informat = 11.
            label = 'EMPLOYEE_RK'; 
         attrib CURRENCY_BASED_ACCOUNT_FLG length = $1
            format = $1.
            informat = $1.
            label = 'CURRENCY_BASED_ACCOUNT_FLG'; 
         attrib FEE_BASED_FLG length = $1
            format = $1.
            informat = $1.
            label = 'FEE_BASED_FLG'; 
         attrib ANNUAL_FEES_AMT length = 8
            format = 20.5
            informat = 20.5
            label = 'ANNUAL_FEES_AMT'; 
         attrib MONTHLY_FEES_AMT length = 8
            format = 20.5
            informat = 20.5
            label = 'MONTHLY_FEES_AMT'; 
         attrib CAMPAIGN_CD length = $30
            format = $30.
            informat = $30.
            label = 'CAMPAIGN_CD'; 
         attrib COMMUNICATION_CD length = $30
            format = $30.
            informat = $30.
            label = 'COMMUNICATION_CD'; 
         attrib REGISTERED_ONLINE_DT length = 8
            format = DATETIME20.
            informat = DATETIME20.
            label = 'REGISTERED_ONLINE_DT'; 
         attrib FIRST_LOGIN_DT length = 8
            format = DATETIME20.
            informat = DATETIME20.
            label = 'FIRST_LOGIN_DT'; 
         attrib ONLINE_BILL_PAYMENT_FLG length = $1
            format = $1.
            informat = $1.
            label = 'ONLINE_BILL_PAYMENT_FLG'; 
         attrib ID_VERIFICATION_TYPE_CD length = $3
            format = $3.
            informat = $3.
            label = 'ID_VERIFICATION_TYPE_CD'; 
         attrib PREVIOUS_ACCOUNT_ID length = $32
            format = $32.
            informat = $32.
            label = 'PREVIOUS_ACCOUNT_ID'; 
         attrib OPEN_BRANCH_FINANCIAL_UNIT_ID length = $32
            format = $32.
            informat = $32.
            label = 'OPEN_BRANCH_FINANCIAL_UNIT_ID'; 
         attrib PRIM_BRANCH_FINANCIAL_UNIT_ID length = $32
            format = $32.
            informat = $32.
            label = 'PRIM_BRANCH_FINANCIAL_UNIT_ID'; 
         attrib FINANCIAL_APPLICATION_ID length = $32
            format = $32.
            informat = $32.
            label = 'FINANCIAL_APPLICATION_ID'; 
         attrib CREDIT_FACILITY_ID length = $40
            format = $40.
            informat = $40.
            label = 'CREDIT_FACILITY_ID'; 
         attrib FUTURE_MARGIN_INCOME_AMT length = 8
            format = 20.5
            informat = 20.5
            label = 'FUTURE_MARGIN_INCOME_AMT'; 
         attrib IN_DEFAULT_FLG length = $1
            format = $1.
            informat = $1.
            label = 'IN_DEFAULT_FLG'; 
         attrib FINANCIAL_BOOK_ID length = $32
            format = $32.
            informat = $32.
            label = 'FINANCIAL_BOOK_ID'; 
         attrib IRRECOVERABLE_FLG length = $1
            format = $1.
            informat = $1.
            label = 'IRRECOVERABLE_FLG'; 
         attrib OWNED_BY_INTERNAL_ORG_ID length = $32
            format = $32.
            informat = $32.
            label = 'OWNED_BY_INTERNAL_ORG_ID'; 
         attrib PREVIOUS_BANK_EXTERNAL_ORG_ID length = $32
            format = $32.
            informat = $32.
            label = 'PREVIOUS_BANK_EXTERNAL_ORG_ID'; 
         attrib NETTING_SET_ID length = $32
            format = $32.
            informat = $32.
            label = 'NETTING_SET_ID'; 
         attrib REVOLVING_FLG length = $1
            format = $1.
            informat = $1.
            label = 'REVOLVING_FLG'; 
         attrib SOURCE_CHANNEL_CD length = $3
            format = $3.
            informat = $3.
            label = 'SOURCE_CHANNEL_CD'; 
         attrib GRACE_PERIOD_DAYS_CNT length = 8
            format = 7.
            informat = 7.
            label = 'GRACE_PERIOD_DAYS_CNT'; 
         attrib REMARGINING_DAYS_CNT length = 8
            format = 7.
            informat = 7.
            label = 'REMARGINING_DAYS_CNT'; 
         attrib FINANCIAL_CALENDAR_ID length = $32
            format = $32.
            informat = $32.
            label = 'FINANCIAL_CALENDAR_ID'; 
         attrib DAY_BASIS_CD length = $10
            format = $10.
            informat = $10.
            label = 'DAY_BASIS_CD'; 
         attrib PORTFOLIO_ID length = $32
            format = $32.
            informat = $32.
            label = 'PORTFOLIO_ID'; 
         attrib SECURITIZATION_POOL_ID length = $32
            format = $32.
            informat = $32.
            label = 'SECURITIZATION_POOL_ID'; 
         attrib RECEIVABLES_POOL_ID length = $32
            format = $32.
            informat = $32.
            label = 'RECEIVABLES_POOL_ID'; 
         attrib ACCOUNT_USAGE_TYPE_CD length = $3
            format = $3.
            informat = $3.
            label = 'ACCOUNT_USAGE_TYPE_CD'; 
         attrib RISK_ALARM_FLG length = $1
            format = $1.
            informat = $1.
            label = 'RISK_ALARM_FLG'; 
         attrib LOW_PROFITABILITY_FLG length = $1
            format = $1.
            informat = $1.
            label = 'LOW_PROFITABILITY_FLG'; 
         attrib ACCOUNT_LIFECYCLE_STG_CD length = $3
            format = $3.
            informat = $3.
            label = 'ACCOUNT_LIFECYCLE_STG_CD'; 
         attrib ATTRITION_ALARM_FLG length = $1
            format = $1.
            informat = $1.
            label = 'ATTRITION_ALARM_FLG'; 
         attrib BALANCE_FROZEN_FLG length = $1
            format = $1.
            informat = $1.
            label = 'BALANCE_FROZEN_FLG'; 
         attrib BALANCE_FROZEN_DT length = 8
            format = DATETIME20.
            informat = DATETIME20.
            label = 'BALANCE_FROZEN_DT'; 
         attrib ACCOUNT_BLOCK_REASON_CD length = $3
            format = $3.
            informat = $3.
            label = 'ACCOUNT_BLOCK_REASON_CD'; 
         attrib TAXATION_STATE_CD length = $4
            format = $4.
            informat = $4.
            label = 'TAXATION_STATE_CD'; 
         attrib EFFECTIVE_MATURITY_YEAR_NO length = 8
            format = 9.3
            informat = 9.3
            label = 'EFFECTIVE_MATURITY_YEAR_NO'; 
         attrib GL_ACCOUNT_ID length = $32
            format = $32.
            informat = $32.
            label = 'GL_ACCOUNT_ID'; 
         attrib FROM_OTHER_INSTITUTION_FLG length = $1
            format = $1.
            informat = $1.
            label = 'FROM_OTHER_INSTITUTION_FLG'; 
         attrib ACCOUNT_RENEWAL_CNT length = 8
            format = 7.
            informat = 7.
            label = 'ACCOUNT_RENEWAL_CNT'; 
         attrib BALANCE_TRANSFER_DT length = 8
            format = DATETIME20.
            informat = DATETIME20.
            label = 'BALANCE_TRANSFER_DT'; 
         attrib BALANCE_TRANSFER_AMT length = 8
            format = 20.5
            informat = 20.5
            label = 'BALANCE_TRANSFER_AMT'; 
         attrib BALANCE_TRANSFER_CNT length = 8
            format = 7.
            informat = 7.
            label = 'BALANCE_TRANSFER_CNT'; 
         attrib BASE_LONG_TERM_APR_RT length = 8
            format = 11.4
            informat = 11.4
            label = 'BASE_LONG_TERM_APR_RT'; 
         attrib BROKER_FLG length = $1
            format = $1.
            informat = $1.
            label = 'BROKER_FLG'; 
         attrib MULT_RATE_FLG length = $1
            format = $1.
            informat = $1.
            label = 'MULT_RATE_FLG'; 
         attrib AUTO_DEBIT_ACCOUNT_NO length = $32
            format = $32.
            informat = $32.
            label = 'AUTO_DEBIT_ACCOUNT_NO'; 
         attrib WORST_STATUS_LAST_12_MTH_CD length = $3
            format = $3.
            informat = $3.
            label = 'WORST_STATUS_LAST_12_MTH_CD'; 
         attrib WORST_STATUS_LAST_12_MTH_DT length = 8
            format = DATETIME20.
            informat = DATETIME20.
            label = 'WORST_STATUS_LAST_12_MTH_DT'; 
         attrib BALANCE_TRNSF_OTHER_ACCT_CNT length = 8
            format = 7.
            informat = 7.
            label = 'BALANCE_TRNSF_OTHER_ACCT_CNT'; 
         attrib EFFECTIVE_FROM_DTTM length = 8
            format = DATETIME20.
            informat = DATETIME20.
            label = 'EFFECTIVE_FROM_DTTM'; 
         attrib EFFECTIVE_TO_DTTM length = 8
            format = DATETIME20.
            informat = DATETIME20.
            label = 'EFFECTIVE_TO_DTTM'; 
         attrib COUNTERPARTY_ID length = $32
            format = $32.
            informat = $32.
            label = 'COUNTERPARTY_ID'; 
         attrib INSURED_BY_COUNTERPARTY_ID length = $32
            format = $32.
            informat = $32.
            label = 'INSURED_BY_COUNTERPARTY_ID'; 
         attrib STATEMENT_FREQUENCY_CD length = $3
            format = $3.
            informat = $3.
            label = 'STATEMENT_FREQUENCY_CD'; 
         attrib SECURITY_DEPOSIT_AMT length = 8
            format = 20.5
            informat = 20.5
            label = 'SECURITY_DEPOSIT_AMT'; 
         attrib SECURITY_DEPOSIT_REFUND_AMT length = 8
            format = 20.5
            informat = 20.5
            label = 'SECURITY_DEPOSIT_REFUND_AMT'; 
         attrib FIRST_PAYMENT_DT length = 8
            format = DATETIME20.
            informat = DATETIME20.
            label = 'FIRST_PAYMENT_DT'; 
         attrib LAST_PAYMENT_DT length = 8
            format = DATETIME20.
            informat = DATETIME20.
            label = 'LAST_PAYMENT_DT'; 
         attrib FIRST_RESET_DT length = 8
            format = DATETIME20.
            informat = DATETIME20.
            label = 'FIRST_RESET_DT'; 
         attrib LAST_RESET_DT length = 8
            format = DATETIME20.
            informat = DATETIME20.
            label = 'LAST_RESET_DT'; 
         attrib RESETS_PER_ANNUM_NO length = 8
            format = 6.
            informat = 6.
            label = 'RESETS_PER_ANNUM_NO'; 
         attrib PRINCIPAL_PAYMENT_TYPE_CD length = $3
            format = $3.
            informat = $3.
            label = 'PRINCIPAL_PAYMENT_TYPE_CD'; 
         attrib PRINCIPAL_PAYMENT_AMT length = 8
            format = 20.5
            informat = 20.5
            label = 'PRINCIPAL_PAYMENT_AMT'; 
         attrib RATE_POLICY_ID length = $32
            format = $32.
            informat = $32.
            label = 'RATE_POLICY_ID'; 
         attrib SPREAD_RT length = 8
            format = 11.4
            informat = 11.4
            label = 'SPREAD_RT'; 
         attrib DISCOUNT_SPREAD_RT length = 8
            format = 11.4
            informat = 11.4
            label = 'DISCOUNT_SPREAD_RT'; 
         attrib INITIAL_CONTRACT_RT length = 8
            format = 11.4
            informat = 11.4
            label = 'INITIAL_CONTRACT_RT'; 
         attrib FIXED_MONTHLY_PREPAYMENT_RT length = 8
            format = 11.4
            informat = 11.4
            label = 'FIXED_MONTHLY_PREPAYMENT_RT'; 
         attrib CAPITAL_ALLOCATION_ID length = $32
            format = $32.
            informat = $32.
            label = 'CAPITAL_ALLOCATION_ID'; 
         attrib CAPITAL_COST_ID length = $32
            format = $32.
            informat = $32.
            label = 'CAPITAL_COST_ID'; 
         attrib SEGMENT_ID length = $32
            format = $32.
            informat = $32.
            label = 'SEGMENT_ID'; 
         attrib NEAR_BRANCH_FINANCIAL_UNIT_ID length = $32
            format = $32.
            informat = $32.
            label = 'NEAR_BRANCH_FINANCIAL_UNIT_ID'; 
         attrib STATEMENT_OPT_FLG length = $1
            format = $1.
            informat = $1.
            label = 'STATEMENT_OPT_FLG'; 
         attrib VALUE_SCALING_FACTOR_RT length = 8
            format = 11.4
            informat = 11.4
            label = 'VALUE_SCALING_FACTOR_RT'; 
         attrib INTERNAL_REPORTING_CATEGORY_CD length = $3
            format = $3.
            informat = $3.
            label = 'INTERNAL_REPORTING_CATEGORY_CD'; 
         attrib CONVEXITY_ADJUSTMENT_FLG length = $1
            format = $1.
            informat = $1.
            label = 'CONVEXITY_ADJUSTMENT_FLG'; 
         attrib ARREARS_PAYMENT_CD length = $3
            format = $3.
            informat = $3.
            label = 'ARREARS_PAYMENT_CD'; 
         attrib QUANTO_FEATURE_ID length = $32
            format = $32.
            informat = $32.
            label = 'QUANTO_FEATURE_ID'; 
         attrib CASH_INTENSIVE_BUSINESS_FLG length = $1
            format = $1.
            informat = $1.
            label = 'CASH_INTENSIVE_BUSINESS_FLG'; 
         attrib LETTER_OF_CREDIT_ONFILE_FLG length = $1
            format = $1.
            informat = $1.
            label = 'LETTER_OF_CREDIT_ONFILE_FLG'; 
         attrib TRADE_FINANCE_FLG length = $1
            format = $1.
            informat = $1.
            label = 'TRADE_FINANCE_FLG'; 
         attrib ANNUITY_PAYMENT_TYPE_CD length = $3
            format = $3.
            informat = $3.
            label = 'ANNUITY_PAYMENT_TYPE_CD'; 
         attrib INTEREST_PAYMENT_TYPE_CD length = $3
            format = $3.
            informat = $3.
            label = 'INTEREST_PAYMENT_TYPE_CD'; 
         attrib INTEREST_PAYMENT_TIME_FREQ_CD length = $3
            format = $3.
            informat = $3.
            label = 'INTEREST_PAYMENT_TIME_FREQ_CD'; 
         attrib LIQUIDITY_CATEGORY_TYPE_CD length = $3
            format = $3.
            informat = $3.
            label = 'LIQUIDITY_CATEGORY_TYPE_CD'; 
         attrib HOLIDAY_DATE_ROLL_CONV_CD length = $3
            format = $3.
            informat = $3.
            label = 'HOLIDAY_DATE_ROLL_CONV_CD'; 
         attrib WEEKEND_DATE_ROLL_CONV_CD length = $3
            format = $3.
            informat = $3.
            label = 'WEEKEND_DATE_ROLL_CONV_CD'; 
         attrib EXPENSE_ALLOCATION_ID length = $32
            format = $32.
            informat = $32.
            label = 'EXPENSE_ALLOCATION_ID'; 
         attrib FIRST_INTEREST_PAYMENT_DT length = 8
            format = DATETIME20.
            informat = DATETIME20.
            label = 'FIRST_INTEREST_PAYMENT_DT'; 
         attrib LAST_INTEREST_PAYMENT_DT length = 8
            format = DATETIME20.
            informat = DATETIME20.
            label = 'LAST_INTEREST_PAYMENT_DT'; 
         attrib IRB_DUMMY_TYPE_CD length = $3
            format = $3.
            informat = $3.
            label = 'IRB_DUMMY_TYPE_CD'; 
         attrib IRB_SRC_ACCOUNT_ID length = $32
            format = $32.
            informat = $32.
            label = 'IRB_SRC_ACCOUNT_ID'; 
         attrib BRCA length = $3
            format = $3.
            informat = $3.
            label = 'BRCA'; 
         attrib FINANCIAL_INSTRUMENT_TYPE_CD length = $3
            format = $3.
            informat = $3.
            label = 'FINANCIAL_INSTRUMENT_TYPE_CD'; 
         call missing(of _all_);
         stop;
      run;
      
      %rcSet(&syserr); 
      
      /*---- Create the integrity constraints for a table  ----*/ 
      %put %str(NOTE: Creating integrity constraints ...);
      proc datasets library=work_ia nolist;
         modify FINANCIAL_ACCOUNT_SWP_BK;
            ic create not null (ACCOUNT_ID);
            ic create not null (SOURCE_SYSTEM_CD);
            ic create not null (FINANCIAL_ACCOUNT_TYPE_CD);
            ic create not null (ACCOUNT_STATUS_CD);
            ic create not null (CURRENCY_CD);
            ic create not null (PRIM_BRANCH_FINANCIAL_UNIT_ID);
            ic create not null (BRCA);
            ic create Index1 = primary key (ACCOUNT_ID VALID_FROM_DTTM);
      quit;
      
      %rcSet(&syserr); 
      
   %end;  /* if table does not exist  */ 
   
   /*---- Append  ----*/ 
   %put %str(NOTE: Appending data ...);
   
   proc append base = work_ia.FINANCIAL_ACCOUNT_SWP_BK 
      data = &etls_lastTable (&etls_tableOptions)  force ; 
    run; 
   
   %rcSet(&syserr); 
   
   proc datasets lib = work nolist nowarn memtype = (data view);
      delete WIRP5BQ;
   quit;
   
%mend etls_loader;
%etls_loader;

%let etls_recCheckExist = 0; 
%let etls_recnt = 0; 
%macro etls_recordCheck; 
   %let etls_recCheckExist = %eval(%sysfunc(exist(work_ia.FINANCIAL_ACCOUNT_SWP_BK, DATA)) or 
         %sysfunc(exist(work_ia.FINANCIAL_ACCOUNT_SWP_BK, VIEW))); 
   
   %if (&etls_recCheckExist) %then
   %do;
      %local etls_syntaxcheck; 
      %let etls_syntaxcheck = %sysfunc(getoption(syntaxcheck)); 
      /* Turn off syntaxcheck option to perform following steps  */ 
      options nosyntaxcheck;
      
      proc contents data = work_ia.FINANCIAL_ACCOUNT_SWP_BK out = work.etls_contents(keep = nobs) noprint; 
      run; 
      
      data _null_; 
         set work.etls_contents (obs = 1); 
         call symput("etls_recnt", left(put(nobs,32.))); 
      run;
      
      proc datasets lib = work nolist nowarn memtype = (data view);
         delete etls_contents;
      quit;
      
      /* Reset syntaxcheck option to previous setting  */ 
      options &etls_syntaxcheck; 
   %end;
%mend etls_recordCheck;
%etls_recordCheck;



/**  Step end Table Loader **/

/*==========================================================================* 
 * Step:            Вяжем актуальные записи ног со        A5Y50FNE.AQ0009Q2 * 
 *                   сделкой                                                * 
 * Transform:       Join                                                    * 
 * Description:                                                             * 
 *                                                                          * 
 * Source Tables:   Генерация BKtpOut - work.W1MHBF25     A5Y50FNE.AO0005FV * 
 *                  actual1 recs - work.W1BAZY4C          A5Y50FNE.AO0005FP * 
 * Target Table:    SQL Join - work.WURW6P1               A5Y50FNE.AO0005FW * 
 *==========================================================================*/ 

%let transformID = %quote(A5Y50FNE.AQ0009Q2);
%let trans_rc = 0;
%let etls_stepStartTime = %sysfunc(datetime(), datetime20.); 

%let etls_recCheckExist = 0; 
%let etls_recnt = 0; 
%macro etls_recordCheck; 
   %let etls_recCheckExist = %eval(%sysfunc(exist(work.W1MHBF25, DATA)) or 
         %sysfunc(exist(work.W1MHBF25, VIEW))); 
   
   %if (&etls_recCheckExist) %then
   %do;
      %local etls_syntaxcheck; 
      %let etls_syntaxcheck = %sysfunc(getoption(syntaxcheck)); 
      /* Turn off syntaxcheck option to perform following steps  */ 
      options nosyntaxcheck;
      
      proc contents data = work.W1MHBF25 out = work.etls_contents(keep = nobs) noprint; 
      run; 
      
      data _null_; 
         set work.etls_contents (obs = 1); 
         call symput("etls_recnt", left(put(nobs,32.))); 
      run;
      
      proc datasets lib = work nolist nowarn memtype = (data view);
         delete etls_contents;
      quit;
      
      /* Reset syntaxcheck option to previous setting  */ 
      options &etls_syntaxcheck; 
   %end;
%mend etls_recordCheck;
%etls_recordCheck;

%let SYS_SQL_IP_SPEEDO = Y;
%let SYS_SQL_MAPPUTTO = sas_put;
%let SYS_SQLREDUCEPUT = DBMS;
%global etls_sql_pushDown;
%let etls_sql_pushDown = -1;
option DBIDIRECTEXEC;

proc datasets lib = work nolist nowarn memtype = (data view);
   delete WURW6P1;
quit;

proc sql;
   create view work.WURW6P1 as
   select
      W1MHBF25.VALID_FROM_DTTM length = 8   
         format = DATETIME20.
         informat = DATETIME20.
         label = 'VALID_FROM_DTTM',
      W1MHBF25.VALID_TO_DTTM length = 8   
         format = DATETIME20.
         informat = DATETIME20.
         label = 'VALID_TO_DTTM',
      W1BAZY4C.FINANCIAL_INSTRUMENT_ID length = 32   
         format = $32.
         informat = $32.
         label = 'FINANCIAL_INSTRUMENT_ID',
      W1MHBF25.DRV_ACCOUNT_ID as REFERENCE_ACCOUNT_ID length = 32   
         format = $32.
         informat = $32.
         label = 'FINANCIAL_ACCOUNT_ID'
   from
      work.W1MHBF25 inner join 
      work.W1BAZY4C
         on
         (
            W1MHBF25.IRB_SRC_ACCOUNT_ID = W1BAZY4C.IRB_SRC_ACCOUNT_ID
         )
   ;
quit;

%global etls_sql_pushDown;
%let etls_sql_pushDown = &sys_sql_ip_all;

%rcSet(&sqlrc); 



/**  Step end Вяжем актуальные записи ног со сделкой **/

/*==========================================================================* 
 * Step:            Вяжем актуальные записи ног со        A5Y50FNE.AQ0009Q3 * 
 *                   сделкой                                                * 
 * Transform:       Join                                                    * 
 * Description:                                                             * 
 *                                                                          * 
 * Source Tables:   Генерация BKtpOut - work.W1MHBF25     A5Y50FNE.AO0005FV * 
 *                  actual2 recs - work.W1BB1D6X          A5Y50FNE.AO0005FQ * 
 * Target Table:    SQL Join - work.WURXLBD               A5Y50FNE.AO0005FX * 
 *==========================================================================*/ 

%let transformID = %quote(A5Y50FNE.AQ0009Q3);
%let trans_rc = 0;
%let etls_stepStartTime = %sysfunc(datetime(), datetime20.); 

%let etls_recCheckExist = 0; 
%let etls_recnt = 0; 
%macro etls_recordCheck; 
   %let etls_recCheckExist = %eval(%sysfunc(exist(work.W1MHBF25, DATA)) or 
         %sysfunc(exist(work.W1MHBF25, VIEW))); 
   
   %if (&etls_recCheckExist) %then
   %do;
      %local etls_syntaxcheck; 
      %let etls_syntaxcheck = %sysfunc(getoption(syntaxcheck)); 
      /* Turn off syntaxcheck option to perform following steps  */ 
      options nosyntaxcheck;
      
      proc contents data = work.W1MHBF25 out = work.etls_contents(keep = nobs) noprint; 
      run; 
      
      data _null_; 
         set work.etls_contents (obs = 1); 
         call symput("etls_recnt", left(put(nobs,32.))); 
      run;
      
      proc datasets lib = work nolist nowarn memtype = (data view);
         delete etls_contents;
      quit;
      
      /* Reset syntaxcheck option to previous setting  */ 
      options &etls_syntaxcheck; 
   %end;
%mend etls_recordCheck;
%etls_recordCheck;

%let SYS_SQL_IP_SPEEDO = Y;
%let SYS_SQL_MAPPUTTO = sas_put;
%let SYS_SQLREDUCEPUT = DBMS;
%global etls_sql_pushDown;
%let etls_sql_pushDown = -1;
option DBIDIRECTEXEC;

proc datasets lib = work nolist nowarn memtype = (data view);
   delete WURXLBD;
quit;

proc sql;
   create view work.WURXLBD as
   select
      W1MHBF25.VALID_FROM_DTTM length = 8   
         format = DATETIME20.
         informat = DATETIME20.
         label = 'VALID_FROM_DTTM',
      W1MHBF25.VALID_TO_DTTM length = 8   
         format = DATETIME20.
         informat = DATETIME20.
         label = 'VALID_TO_DTTM',
      W1BB1D6X.FINANCIAL_INSTRUMENT_ID length = 32   
         format = $32.
         informat = $32.
         label = 'FINANCIAL_INSTRUMENT_ID',
      W1MHBF25.DRV_ACCOUNT_ID as REFERENCE_ACCOUNT_ID length = 32   
         format = $32.
         informat = $32.
         label = 'FINANCIAL_ACCOUNT_ID'
   from
      work.W1MHBF25 inner join 
      work.W1BB1D6X
         on
         (
            W1MHBF25.IRB_SRC_ACCOUNT_ID = W1BB1D6X.IRB_SRC_ACCOUNT_ID
         )
   ;
quit;

%global etls_sql_pushDown;
%let etls_sql_pushDown = &sys_sql_ip_all;

%rcSet(&sqlrc); 



/**  Step end Вяжем актуальные записи ног со сделкой **/

/*==========================================================================* 
 * Step:            Append                                A5Y50FNE.AQ0009Q4 * 
 * Transform:       Append                                                  * 
 * Description:                                                             * 
 *                                                                          * 
 * Source Tables:   SQL Join - work.WURW6P1               A5Y50FNE.AO0005FW * 
 *                  SQL Join - work.WURXLBD               A5Y50FNE.AO0005FX * 
 * Target Table:    Append - work.WURGNEB                 A5Y50FNE.AO0005FY * 
 *==========================================================================*/ 

%let transformID = %quote(A5Y50FNE.AQ0009Q4);
%let trans_rc = 0;
%let etls_stepStartTime = %sysfunc(datetime(), datetime20.); 

%let etls_recnt = -1;
%let dbxrc = %eval(%sysfunc(exist(work.WURW6P1, DATA)) or 
      %sysfunc(exist(work.WURW6P1, VIEW))); 

%let dbxrc = %eval(%sysfunc(exist(work.WURXLBD, DATA)) or 
      %sysfunc(exist(work.WURXLBD, VIEW))); 

proc datasets lib = work nolist nowarn memtype = (data view);
   delete WURGNEB;
quit;

data work.WURGNEB / view=work.WURGNEB;
   set work.WURW6P1
       work.WURXLBD;
   keep VALID_FROM_DTTM VALID_TO_DTTM FINANCIAL_INSTRUMENT_ID REFERENCE_ACCOUNT_ID; 
run;

%rcSet(&syserr); 



/**  Step end Append **/

/*==========================================================================* 
 * Step:            Table Loader                          A5Y50FNE.AQ0009Q5 * 
 * Transform:       Table Loader (Version 2.1)                              * 
 * Description:                                                             * 
 *                                                                          * 
 * Source Table:    Append - work.WURGNEB                 A5Y50FNE.AO0005FY * 
 * Target Table:    FIN_INSTR_ASSOC_SWP_BK -              A5Y50FNE.AE00012A * 
 *                   work_ia.FIN_INSTR_ASSOC_SWP_BK                         * 
 *==========================================================================*/ 

%let transformID = %quote(A5Y50FNE.AQ0009Q5);
%let trans_rc = 0;
%let etls_stepStartTime = %sysfunc(datetime(), datetime20.); 

%let SYSLAST = %nrquote(work.WURGNEB); 

%let SYS_SQL_IP_SPEEDO = Y;
%let SYS_SQL_MAPPUTTO = sas_put;
%let SYS_SQLREDUCEPUT = DBMS;
%global etls_sql_pushDown;
%let etls_sql_pushDown = -1;
option DBIDIRECTEXEC;

%global etls_tableExist;
%global etls_numIndex;
%global etls_lastTable;
%let etls_tableExist = -1; 
%let etls_numIndex = -1; 
%let etls_lastTable = &SYSLAST; 

/*---- Define load data macro  ----*/ 

/* --------------------------------------------------------------
   Load Technique Selection: Replace - EntireTable
   Constraint and index action selections: 'INIT','ASIS','ASIS','ASIS'
   Additional options selections... 
      Set unmapped to missing on updates: false 
   -------------------------------------------------------------- */
%macro etls_loader;

   %let etls_tableOptions = ;
   
   /*---- Map the columns  ----*/ 
   proc datasets lib = work nolist nowarn memtype = (data view);
      delete WIRP5KL;
   quit;
   
   %put %str(NOTE: Mapping columns ...);
   proc sql;
      create view work.WIRP5KL as
         select
            FINANCIAL_INSTRUMENT_ID as FINANCIAL_INSTRUMENT_ASSOC_ID,
            VALID_FROM_DTTM,
            VALID_TO_DTTM,
            ('DRV') as FINANCIAL_INSTR_ASSOC_TYPE_CD length = 3
               format = $3.
               informat = $3.,
            FINANCIAL_INSTRUMENT_ID,
            REFERENCE_ACCOUNT_ID
      from &etls_lastTable
      ;
   quit;
   
   %let SYSLAST = work.WIRP5KL;
   
   %let etls_lastTable = &SYSLAST; 
   %let etls_tableOptions = ; 
   
   /* Determine if the target table exists  */ 
   %let etls_tableExist = %eval(%sysfunc(exist(work_ia.FIN_INSTR_ASSOC_SWP_BK, DATA)) or 
         %sysfunc(exist(work_ia.FIN_INSTR_ASSOC_SWP_BK, VIEW))); 
   
   %if &etls_tableExist %then 
   %do;/* table exists  */ 
      %let etls_hasPreExistingConstraint=0; 
      
      proc datasets lib = work nolist nowarn memtype = (data view);
         delete etls_commands etls_commands_F;
      quit;
      
      %let etls_otherTablesReferToThisTable=0;
      
      %macro etls_CIContents(table=,workTableOut=,inDSOptions=);
         %put NOTE: Building table listing Constraints and Indexes for: &table;
         proc datasets lib=work nolist; delete &workTableOut; quit;
         proc contents data=&table&inDSOptions out2=&workTableOut noprint; run;
         
         data &workTableOut;
            length name $60 type $20 icown idxUnique idxNoMiss $3 recreate $600;
            set &workTableOut;
            type=upcase(type);
            if type eq 'REFERENTIAL' then
            do;
               put "WARNING%QUOTE(:) Target table is referenced by constraints in"
                    " another table: " ref;
               call symput('etls_otherTablesReferToThisTable','1');
               delete;
            end;
            if type='INDEX' and ICOwn eq 'YES' then delete;
         run;
         %rcSet(&syserr); 
         
      %mend etls_CIContents;
      
      %etls_CIContents(table=work_ia.FIN_INSTR_ASSOC_SWP_BK, workTableOut=etls_commands, inDSOptions=);
      
      %if &etls_otherTablesReferToThisTable %then 
         %put WARNING%QUOTE(:) Replacing entire table will fail. Consider an alternate load technique or revising constraints.; 
      %else 
      %do; /* okay - remove foreign keys  */ 
      
         data etls_commands_F; 
            set etls_commands; 
            if upcase(type)="FOREIGN KEY" then 
            do; 
               command='ic delete '||trim(name)||';';
               output etls_commands_F; 
            end; 
         run; 
         
         %put %str(NOTE: Removing foreign keys before dropping table...);
         data _null_;
            set etls_commands_F;
            %rcSet(&syserr); 
            
      %end; /* okay - remove foreign keys  */ 
      
      proc datasets lib = work nolist nowarn memtype = (data view);
         delete etls_commands etls_commands_F;
      quit;
      
      /*---- Drop a table  ----*/ 
      %put %str(NOTE: Dropping table ...);
      proc datasets lib = work_ia nolist nowarn memtype = (data view);
         delete FIN_INSTR_ASSOC_SWP_BK;
      quit;
      
      %rcSet(&syserr); 
      
      %let etls_tableExist = 0;
      
   %end; /* table exists  */ 
   
   /*---- Create a new table  ----*/ 
   %if (&etls_tableExist eq 0) %then 
   %do;  /* if table does not exist  */ 
   
      %put %str(NOTE: Creating table ...);
      
      data work_ia.FIN_INSTR_ASSOC_SWP_BK;
         attrib FINANCIAL_INSTRUMENT_ASSOC_ID length = $32
            format = $32.
            informat = $32.
            label = 'FINANCIAL_INSTRUMENT_ASSOC_ID'; 
         attrib VALID_FROM_DTTM length = 8
            format = DATETIME20.
            informat = DATETIME20.
            label = 'VALID_FROM_DTTM'; 
         attrib VALID_TO_DTTM length = 8
            format = DATETIME20.
            informat = DATETIME20.
            label = 'VALID_TO_DTTM'; 
         attrib FINANCIAL_INSTR_ASSOC_TYPE_CD length = $3
            format = $3.
            informat = $3.
            label = 'FINANCIAL_INSTR_ASSOC_TYPE_CD'; 
         attrib FINANCIAL_INSTRUMENT_ID length = $32
            format = $32.
            informat = $32.
            label = 'FINANCIAL_INSTRUMENT_ID'; 
         attrib REFERENCE_ACCOUNT_ID length = $32
            format = $32.
            informat = $32.
            label = 'FINANCIAL_ACCOUNT_ID'; 
         call missing(of _all_);
         stop;
      run;
      
      %rcSet(&syserr); 
      
      /*---- Create the integrity constraints for a table  ----*/ 
      %put %str(NOTE: Creating integrity constraints ...);
      proc datasets library=work_ia nolist;
         modify FIN_INSTR_ASSOC_SWP_BK;
            ic create not null (FINANCIAL_INSTRUMENT_ASSOC_ID);
            ic create not null (VALID_FROM_DTTM);
            ic create not null (VALID_TO_DTTM);
            ic create not null (FINANCIAL_INSTR_ASSOC_TYPE_CD);
            ic create not null (FINANCIAL_INSTRUMENT_ID);
            ic create not null (REFERENCE_ACCOUNT_ID);
            ic create pk_index = primary key (FINANCIAL_INSTRUMENT_ASSOC_ID VALID_FROM_DTTM);
      quit;
      
      %rcSet(&syserr); 
      
   %end;  /* if table does not exist  */ 
   
   /*---- Append  ----*/ 
   %put %str(NOTE: Appending data ...);
   
   proc append base = work_ia.FIN_INSTR_ASSOC_SWP_BK 
      data = &etls_lastTable (&etls_tableOptions)  force ; 
    run; 
   
   %rcSet(&syserr); 
   
   proc datasets lib = work nolist nowarn memtype = (data view);
      delete WIRP5KL;
   quit;
   
%mend etls_loader;
%etls_loader;

%let etls_recCheckExist = 0; 
%let etls_recnt = 0; 
%macro etls_recordCheck; 
   %let etls_recCheckExist = %eval(%sysfunc(exist(work_ia.FIN_INSTR_ASSOC_SWP_BK, DATA)) or 
         %sysfunc(exist(work_ia.FIN_INSTR_ASSOC_SWP_BK, VIEW))); 
   
   %if (&etls_recCheckExist) %then
   %do;
      %local etls_syntaxcheck; 
      %let etls_syntaxcheck = %sysfunc(getoption(syntaxcheck)); 
      /* Turn off syntaxcheck option to perform following steps  */ 
      options nosyntaxcheck;
      
      proc contents data = work_ia.FIN_INSTR_ASSOC_SWP_BK out = work.etls_contents(keep = nobs) noprint; 
      run; 
      
      data _null_; 
         set work.etls_contents (obs = 1); 
         call symput("etls_recnt", left(put(nobs,32.))); 
      run;
      
      proc datasets lib = work nolist nowarn memtype = (data view);
         delete etls_contents;
      quit;
      
      /* Reset syntaxcheck option to previous setting  */ 
      options &etls_syntaxcheck; 
   %end;
%mend etls_recordCheck;
%etls_recordCheck;



/**  Step end Table Loader **/

/*==========================================================================* 
 * Step:            Завершить модуль                      A5Y50FNE.AQ0009Q6 * 
 * Transform:       Завершить модуль                                        * 
 * Description:                                                             * 
 *==========================================================================*/ 

%let transformID = %quote(A5Y50FNE.AQ0009Q6);
%let trans_rc = 0;
%let etls_stepStartTime = %sysfunc(datetime(), datetime20.); 

%let _INPUT_count = 0; 
%let _OUTPUT_count = 0; 


/*****************************************************************
* ВЕРСИЯ:
*   $Id: transform_job_finish.sas 247 2012-04-03 07:31:10Z nesterenok $
*
******************************************************************
* НАЗНАЧЕНИЕ:
*   Регистрирует конец модуля ETL.
*
* ПАРАМЕТРЫ:
*   нет
*
******************************************************************/

%macro transform_job_finish;

   /* Продолжаем модуль */
   %job_continue_reg(mpJobType=JOB, mpJobName=&ETLS_JobName., mpPostEvent=N);

   /* Завершаем модуль */
   %job_finish_reg(mpJobType=JOB);

%mend transform_job_finish;

%transform_job_finish;


%rcSet(&syserr); 
%rcSet(&sysrc); 
%rcSet(&sqlrc); 



/**  Step end Завершить модуль **/

%let etls_endTime = %sysfunc(datetime(),datetime.);



/**  Job end 042_945_Structure_FINANCIAL_ACCOUNT_SWP_BK **/

/* Reset jobid and name */
%let jobID = %quote(A569C89V.AQ0000CK);
%let etls_jobName = %nrquote(090_364_Stream_Midas_Fin_Account_BK);

/**************************************************************************** 
 * Job:             043_930_Post_Structure_FINANCIAL_ACC  A5Y50FNE.AN0000NR * 
 *                  OUNT_DRV_BK                                             * 
 * Description:                                                             * 
 *                                                                          * 
 * Metadata Server: bravo14                                                 * 
 * Port:            8561                                                    * 
 * Location:        /DWH_DWHDDS_IA/Jobs/043_Post_Structure                  * 
 *                                                                          * 
 * Server:          SASApp                                A5C46MZY.AQ000002 * 
 *                                                                          * 
 * Source Tables:   FINANCIAL_ACCOUNT_FUT_BK -            A5Y50FNE.AE00012M * 
 *                   work_ia.FINANCIAL_ACCOUNT_FUT_BK                       * 
 *                  FINANCIAL_ACCOUNT_FWD_BK -            A5Y50FNE.AE00012N * 
 *                   work_ia.FINANCIAL_ACCOUNT_FWD_BK                       * 
 *                  FINANCIAL_ACCOUNT_NDF_BK -            A5Y50FNE.AE00012P * 
 *                   work_ia.FINANCIAL_ACCOUNT_NDF_BK                       * 
 *                  FINANCIAL_ACCOUNT_OPT_BK -            A5Y50FNE.AE00012Q * 
 *                   work_ia.FINANCIAL_ACCOUNT_OPT_BK                       * 
 *                  FINANCIAL_ACCOUNT_SPT_BK -            A5Y50FNE.AE00012R * 
 *                   work_ia.FINANCIAL_ACCOUNT_SPT_BK                       * 
 *                  FINANCIAL_ACCOUNT_SWP_BK -            A5Y50FNE.AE00012S * 
 *                   work_ia.FINANCIAL_ACCOUNT_SWP_BK                       * 
 *                  FINANCIAL_ACCOUNT_IRS_BK -            A5Y50FNE.AE00012O * 
 *                   work_ia.FINANCIAL_ACCOUNT_IRS_BK                       * 
 *                  FINANCIAL_ACCOUNT_CIS_BK -            A5Y50FNE.AE00012F * 
 *                   work_ia.FINANCIAL_ACCOUNT_CIS_BK                       * 
 *                  FINANCIAL_ACCOUNT_CAP_FLR_BK -        A5Y50FNE.AE00012E * 
 *                   work_ia.FINANCIAL_ACCOUNT_CAP_FLR_BK                   * 
 *                  FINANCIAL_ACCOUNT_FRA_BK -            A5Y50FNE.AE00012L * 
 *                   work_ia.FINANCIAL_ACCOUNT_FRA_BK                       * 
 *                  FINANCIAL_ACCOUNT_DCD_BK -            A5Y50FNE.AE00012G * 
 *                   work_ia.FINANCIAL_ACCOUNT_DCD_BK                       * 
 *                  INTERNAL_ORG_BK_BK -                  A5Y50FNE.AE0000R2 * 
 *                   etl_ia.INTERNAL_ORG_BK_BK                              * 
 * Target Table:    FINANCIAL_ACCOUNT_DRV_BK -            A5Y50FNE.AE00012J * 
 *                   work_ia.FINANCIAL_ACCOUNT_DRV_BK                       * 
 *                                                                          * 
 * Generated on:    16 Июль 2013 г. 17:14:48 MSD                            * 
 * Generated by:    sasdwh                                                  * 
 * Version:         SAS Data Integration Studio 4.5                         * 
 ****************************************************************************/ 

/* General macro variables  */ 
%let jobID = %quote(A5Y50FNE.AN0000NR);
%let etls_jobName = %nrquote(043_930_Post_Structure_FINANCIAL_ACCOUNT_DRV_BK);
%let etls_userID = %nrquote(sasdwh);


/* Create metadata macro variables */
%let IOMServer      = %nrquote(SASApp);
%let metaPort       = %nrquote(8561);
%let metaServer     = %nrquote(bravo14);

/* Set metadata options */
options metaport       = &metaPort 
        metaserver     = "&metaServer"; 

/* Setup for capturing job status  */ 
%let etls_startTime = %sysfunc(datetime(),datetime.);
%let etls_recordsBefore = 0;
%let etls_recordsAfter = 0;
%let etls_lib = 0;
%let etls_table = 0;

%global etls_debug; 
%macro etls_setDebug; 
   %if %str(&etls_debug) ne 0 %then 
      OPTIONS MPRINT%str(;); 
%mend; 
%etls_setDebug; 

/*==========================================================================* 
 * Step:            Начать модуль                         A5Y50FNE.AQ0008G5 * 
 * Transform:       Начать модуль                                           * 
 * Description:                                                             * 
 *==========================================================================*/ 

%let transformID = %quote(A5Y50FNE.AQ0008G5);
%let trans_rc = 0;
%let etls_stepStartTime = %sysfunc(datetime(), datetime20.); 

%let _INPUT_count = 0; 
%let _OUTPUT_count = 0; 


/*****************************************************************
* ВЕРСИЯ:
*   $Id: transform_job_start.sas 1747 2012-08-01 11:26:13Z nesterenok $
*
******************************************************************
* НАЗНАЧЕНИЕ:
*   Регистрирует начало модуля ETL.
*
* ПАРАМЕТРЫ:
*   нет
*
******************************************************************/

%macro transform_job_start;

   /* Продолжаем поток (или создаем новый) */
   %local lmvStreamName;
   %if %sysfunc(sysexist(LSB_JOBNAME)) %then
      %let lmvStreamName = %scan(%sysfunc(sysget(LSB_JOBNAME)), 3, :);
   %else
      %let lmvStreamName = ;

   %job_continue_reg(mpJobType=STREAM, mpJobName=&lmvStreamName, mpPostEvent=N, mpForcedStart=Y);

   /* Для DI, начинаем поток заново, если старый был начат не сегодня */
   %if %length(&lmvStreamName) eq 0 and &STREAM_START_DT ne %sysfunc(today()) %then %do;
      %job_start_reg(mpJobType=STREAM, mpParentJobId=, mpJobName=&lmvStreamName.);
   %end;

   /* Начинаем модуль */
   %job_start_reg(mpJobType=JOB, mpParentJobId=&STREAM_ID, mpJobName=&ETLS_JobName.);

%mend transform_job_start;

%transform_job_start;


%rcSet(&syserr); 
%rcSet(&sysrc); 
%rcSet(&sqlrc); 



/**  Step end Начать модуль **/

/*==========================================================================* 
 * Step:            Append                                A5Y50FNE.AQ0008G6 * 
 * Transform:       Append                                                  * 
 * Description:                                                             * 
 *                                                                          * 
 * Source Tables:   FINANCIAL_ACCOUNT_FUT_BK -            A5Y50FNE.AE00012M * 
 *                   work_ia.FINANCIAL_ACCOUNT_FUT_BK                       * 
 *                  FINANCIAL_ACCOUNT_FWD_BK -            A5Y50FNE.AE00012N * 
 *                   work_ia.FINANCIAL_ACCOUNT_FWD_BK                       * 
 *                  FINANCIAL_ACCOUNT_NDF_BK -            A5Y50FNE.AE00012P * 
 *                   work_ia.FINANCIAL_ACCOUNT_NDF_BK                       * 
 *                  FINANCIAL_ACCOUNT_OPT_BK -            A5Y50FNE.AE00012Q * 
 *                   work_ia.FINANCIAL_ACCOUNT_OPT_BK                       * 
 *                  FINANCIAL_ACCOUNT_SPT_BK -            A5Y50FNE.AE00012R * 
 *                   work_ia.FINANCIAL_ACCOUNT_SPT_BK                       * 
 *                  FINANCIAL_ACCOUNT_SWP_BK -            A5Y50FNE.AE00012S * 
 *                   work_ia.FINANCIAL_ACCOUNT_SWP_BK                       * 
 *                  FINANCIAL_ACCOUNT_IRS_BK -            A5Y50FNE.AE00012O * 
 *                   work_ia.FINANCIAL_ACCOUNT_IRS_BK                       * 
 *                  FINANCIAL_ACCOUNT_CIS_BK -            A5Y50FNE.AE00012F * 
 *                   work_ia.FINANCIAL_ACCOUNT_CIS_BK                       * 
 *                  FINANCIAL_ACCOUNT_CAP_FLR_BK -        A5Y50FNE.AE00012E * 
 *                   work_ia.FINANCIAL_ACCOUNT_CAP_FLR_BK                   * 
 *                  FINANCIAL_ACCOUNT_FRA_BK -            A5Y50FNE.AE00012L * 
 *                   work_ia.FINANCIAL_ACCOUNT_FRA_BK                       * 
 *                  FINANCIAL_ACCOUNT_DCD_BK -            A5Y50FNE.AE00012G * 
 *                   work_ia.FINANCIAL_ACCOUNT_DCD_BK                       * 
 * Target Table:    Append - work.WXB5Q7Z                 A5Y50FNE.AO0004S9 * 
 *==========================================================================*/ 

%let transformID = %quote(A5Y50FNE.AQ0008G6);
%let trans_rc = 0;
%let etls_stepStartTime = %sysfunc(datetime(), datetime20.); 

%let etls_recCheckExist = 0; 
%let etls_recnt = 0; 
%macro etls_recordCheck; 
   %let etls_recCheckExist = %eval(%sysfunc(exist(work_ia.FINANCIAL_ACCOUNT_FUT_BK, DATA)) or 
         %sysfunc(exist(work_ia.FINANCIAL_ACCOUNT_FUT_BK, VIEW))); 
   
   %if (&etls_recCheckExist) %then
   %do;
      %local etls_syntaxcheck; 
      %let etls_syntaxcheck = %sysfunc(getoption(syntaxcheck)); 
      /* Turn off syntaxcheck option to perform following steps  */ 
      options nosyntaxcheck;
      
      proc contents data = work_ia.FINANCIAL_ACCOUNT_FUT_BK out = work.etls_contents(keep = nobs) noprint; 
      run; 
      
      data _null_; 
         set work.etls_contents (obs = 1); 
         call symput("etls_recnt", left(put(nobs,32.))); 
      run;
      
      proc datasets lib = work nolist nowarn memtype = (data view);
         delete etls_contents;
      quit;
      
      /* Reset syntaxcheck option to previous setting  */ 
      options &etls_syntaxcheck; 
   %end;
%mend etls_recordCheck;
%etls_recordCheck;

%let dbxrc = %eval(%sysfunc(exist(work_ia.FINANCIAL_ACCOUNT_FUT_BK, DATA)) or 
      %sysfunc(exist(work_ia.FINANCIAL_ACCOUNT_FUT_BK, VIEW))); 

/*---- Map the columns  ----*/ 
proc datasets lib = work nolist nowarn memtype = (data view);
   delete WIRP630;
quit;

%put %str(NOTE: Mapping columns ...);
proc sql;
   create view work.WIRP630 as
      select
         ACCOUNT_ID,
         VALID_FROM_DTTM,
         VALID_TO_DTTM,
         SOURCE_SYSTEM_CD,
         ACCOUNT_REGISTRATION_NM,
         ALTERNATE_ACCOUNT_NM,
         FINANCIAL_ACCOUNT_TYPE_CD,
         AUTO_DEBIT_ACCOUNT_TYPE_CD,
         ACCOUNT_REGISTRATION_TYPE_CD,
         ACCOUNT_STATUS_CD,
         OPEN_DT,
         CLOSE_DT,
         CLOSE_REASON_CD,
         ACCOUNT_TAX_ID,
         EXPECTED_LOSS_PCT,
         INDIVIDUAL_ORGANIZATION_CD,
         SOURCE_CD,
         OPENING_CHANNEL_CD,
         PREFERRED_CHANNEL_CD,
         CURRENCY_CD,
         PRIMARY_PHONE_NO,
         PRIMARY_PHONE_TYPE_CD,
         SECONDARY_PHONE_NO,
         SECONDARY_PHONE_TYPE_CD,
         MAILABLE_FLG,
         TELEPHONABLE_FLG,
         EMAIL_FLG,
         SMS_FLG,
         DO_NOT_CONTACT_FLG,
         EMPLOYEE_RK,
         CURRENCY_BASED_ACCOUNT_FLG,
         FEE_BASED_FLG,
         ANNUAL_FEES_AMT,
         MONTHLY_FEES_AMT,
         CAMPAIGN_CD,
         COMMUNICATION_CD,
         REGISTERED_ONLINE_DT,
         FIRST_LOGIN_DT,
         ONLINE_BILL_PAYMENT_FLG,
         ID_VERIFICATION_TYPE_CD,
         PREVIOUS_ACCOUNT_ID,
         OPEN_BRANCH_FINANCIAL_UNIT_ID,
         PRIM_BRANCH_FINANCIAL_UNIT_ID,
         FINANCIAL_APPLICATION_ID,
         CREDIT_FACILITY_ID,
         FUTURE_MARGIN_INCOME_AMT,
         IN_DEFAULT_FLG,
         FINANCIAL_BOOK_ID,
         IRRECOVERABLE_FLG,
         OWNED_BY_INTERNAL_ORG_ID,
         PREVIOUS_BANK_EXTERNAL_ORG_ID,
         NETTING_SET_ID,
         REVOLVING_FLG,
         SOURCE_CHANNEL_CD,
         GRACE_PERIOD_DAYS_CNT,
         REMARGINING_DAYS_CNT,
         FINANCIAL_CALENDAR_ID,
         DAY_BASIS_CD,
         PORTFOLIO_ID,
         SECURITIZATION_POOL_ID,
         RECEIVABLES_POOL_ID,
         ACCOUNT_USAGE_TYPE_CD,
         RISK_ALARM_FLG,
         LOW_PROFITABILITY_FLG,
         ACCOUNT_LIFECYCLE_STG_CD,
         ATTRITION_ALARM_FLG,
         BALANCE_FROZEN_FLG,
         BALANCE_FROZEN_DT,
         ACCOUNT_BLOCK_REASON_CD,
         TAXATION_STATE_CD,
         EFFECTIVE_MATURITY_YEAR_NO,
         GL_ACCOUNT_ID,
         FROM_OTHER_INSTITUTION_FLG,
         ACCOUNT_RENEWAL_CNT,
         BALANCE_TRANSFER_DT,
         BALANCE_TRANSFER_AMT,
         BALANCE_TRANSFER_CNT,
         BASE_LONG_TERM_APR_RT,
         BROKER_FLG,
         MULT_RATE_FLG,
         AUTO_DEBIT_ACCOUNT_NO,
         WORST_STATUS_LAST_12_MTH_CD,
         WORST_STATUS_LAST_12_MTH_DT,
         BALANCE_TRNSF_OTHER_ACCT_CNT,
         EFFECTIVE_FROM_DTTM,
         EFFECTIVE_TO_DTTM,
         COUNTERPARTY_ID,
         INSURED_BY_COUNTERPARTY_ID,
         STATEMENT_FREQUENCY_CD,
         SECURITY_DEPOSIT_AMT,
         SECURITY_DEPOSIT_REFUND_AMT,
         FIRST_PAYMENT_DT,
         LAST_PAYMENT_DT,
         FIRST_RESET_DT,
         LAST_RESET_DT,
         RESETS_PER_ANNUM_NO,
         PRINCIPAL_PAYMENT_TYPE_CD,
         PRINCIPAL_PAYMENT_AMT,
         RATE_POLICY_ID,
         SPREAD_RT,
         DISCOUNT_SPREAD_RT,
         INITIAL_CONTRACT_RT,
         FIXED_MONTHLY_PREPAYMENT_RT,
         CAPITAL_ALLOCATION_ID,
         CAPITAL_COST_ID,
         SEGMENT_ID,
         NEAR_BRANCH_FINANCIAL_UNIT_ID,
         STATEMENT_OPT_FLG,
         VALUE_SCALING_FACTOR_RT,
         INTERNAL_REPORTING_CATEGORY_CD,
         CONVEXITY_ADJUSTMENT_FLG,
         ARREARS_PAYMENT_CD,
         QUANTO_FEATURE_ID,
         CASH_INTENSIVE_BUSINESS_FLG,
         LETTER_OF_CREDIT_ONFILE_FLG,
         TRADE_FINANCE_FLG,
         ANNUITY_PAYMENT_TYPE_CD,
         INTEREST_PAYMENT_TYPE_CD,
         INTEREST_PAYMENT_TIME_FREQ_CD,
         LIQUIDITY_CATEGORY_TYPE_CD,
         HOLIDAY_DATE_ROLL_CONV_CD,
         WEEKEND_DATE_ROLL_CONV_CD,
         EXPENSE_ALLOCATION_ID,
         FIRST_INTEREST_PAYMENT_DT,
         LAST_INTEREST_PAYMENT_DT,
         IRB_DUMMY_TYPE_CD,
         IRB_SRC_ACCOUNT_ID,
         BRCA,
         FINANCIAL_INSTRUMENT_TYPE_CD
   from work_ia.FINANCIAL_ACCOUNT_FUT_BK
   ;
quit;

%let SYSLAST = work.WIRP630;

%let dbxrc = %eval(%sysfunc(exist(work_ia.FINANCIAL_ACCOUNT_FWD_BK, DATA)) or 
      %sysfunc(exist(work_ia.FINANCIAL_ACCOUNT_FWD_BK, VIEW))); 

/*---- Map the columns  ----*/ 
proc datasets lib = work nolist nowarn memtype = (data view);
   delete WIRP64G;
quit;

%put %str(NOTE: Mapping columns ...);
proc sql;
   create view work.WIRP64G as
      select
         ACCOUNT_ID,
         VALID_FROM_DTTM,
         VALID_TO_DTTM,
         SOURCE_SYSTEM_CD,
         ACCOUNT_REGISTRATION_NM,
         ALTERNATE_ACCOUNT_NM,
         FINANCIAL_ACCOUNT_TYPE_CD,
         AUTO_DEBIT_ACCOUNT_TYPE_CD,
         ACCOUNT_REGISTRATION_TYPE_CD,
         ACCOUNT_STATUS_CD,
         OPEN_DT,
         CLOSE_DT,
         CLOSE_REASON_CD,
         ACCOUNT_TAX_ID,
         EXPECTED_LOSS_PCT,
         INDIVIDUAL_ORGANIZATION_CD,
         SOURCE_CD,
         OPENING_CHANNEL_CD,
         PREFERRED_CHANNEL_CD,
         CURRENCY_CD,
         PRIMARY_PHONE_NO,
         PRIMARY_PHONE_TYPE_CD,
         SECONDARY_PHONE_NO,
         SECONDARY_PHONE_TYPE_CD,
         MAILABLE_FLG,
         TELEPHONABLE_FLG,
         EMAIL_FLG,
         SMS_FLG,
         DO_NOT_CONTACT_FLG,
         EMPLOYEE_RK,
         CURRENCY_BASED_ACCOUNT_FLG,
         FEE_BASED_FLG,
         ANNUAL_FEES_AMT,
         MONTHLY_FEES_AMT,
         CAMPAIGN_CD,
         COMMUNICATION_CD,
         REGISTERED_ONLINE_DT,
         FIRST_LOGIN_DT,
         ONLINE_BILL_PAYMENT_FLG,
         ID_VERIFICATION_TYPE_CD,
         PREVIOUS_ACCOUNT_ID,
         OPEN_BRANCH_FINANCIAL_UNIT_ID,
         PRIM_BRANCH_FINANCIAL_UNIT_ID,
         FINANCIAL_APPLICATION_ID,
         CREDIT_FACILITY_ID,
         FUTURE_MARGIN_INCOME_AMT,
         IN_DEFAULT_FLG,
         FINANCIAL_BOOK_ID,
         IRRECOVERABLE_FLG,
         OWNED_BY_INTERNAL_ORG_ID,
         PREVIOUS_BANK_EXTERNAL_ORG_ID,
         NETTING_SET_ID,
         REVOLVING_FLG,
         SOURCE_CHANNEL_CD,
         GRACE_PERIOD_DAYS_CNT,
         REMARGINING_DAYS_CNT,
         FINANCIAL_CALENDAR_ID,
         DAY_BASIS_CD,
         PORTFOLIO_ID,
         SECURITIZATION_POOL_ID,
         RECEIVABLES_POOL_ID,
         ACCOUNT_USAGE_TYPE_CD,
         RISK_ALARM_FLG,
         LOW_PROFITABILITY_FLG,
         ACCOUNT_LIFECYCLE_STG_CD,
         ATTRITION_ALARM_FLG,
         BALANCE_FROZEN_FLG,
         BALANCE_FROZEN_DT,
         ACCOUNT_BLOCK_REASON_CD,
         TAXATION_STATE_CD,
         EFFECTIVE_MATURITY_YEAR_NO,
         GL_ACCOUNT_ID,
         FROM_OTHER_INSTITUTION_FLG,
         ACCOUNT_RENEWAL_CNT,
         BALANCE_TRANSFER_DT,
         BALANCE_TRANSFER_AMT,
         BALANCE_TRANSFER_CNT,
         BASE_LONG_TERM_APR_RT,
         BROKER_FLG,
         MULT_RATE_FLG,
         AUTO_DEBIT_ACCOUNT_NO,
         WORST_STATUS_LAST_12_MTH_CD,
         WORST_STATUS_LAST_12_MTH_DT,
         BALANCE_TRNSF_OTHER_ACCT_CNT,
         EFFECTIVE_FROM_DTTM,
         EFFECTIVE_TO_DTTM,
         COUNTERPARTY_ID,
         INSURED_BY_COUNTERPARTY_ID,
         STATEMENT_FREQUENCY_CD,
         SECURITY_DEPOSIT_AMT,
         SECURITY_DEPOSIT_REFUND_AMT,
         FIRST_PAYMENT_DT,
         LAST_PAYMENT_DT,
         FIRST_RESET_DT,
         LAST_RESET_DT,
         RESETS_PER_ANNUM_NO,
         PRINCIPAL_PAYMENT_TYPE_CD,
         PRINCIPAL_PAYMENT_AMT,
         RATE_POLICY_ID,
         SPREAD_RT,
         DISCOUNT_SPREAD_RT,
         INITIAL_CONTRACT_RT,
         FIXED_MONTHLY_PREPAYMENT_RT,
         CAPITAL_ALLOCATION_ID,
         CAPITAL_COST_ID,
         SEGMENT_ID,
         NEAR_BRANCH_FINANCIAL_UNIT_ID,
         STATEMENT_OPT_FLG,
         VALUE_SCALING_FACTOR_RT,
         INTERNAL_REPORTING_CATEGORY_CD,
         CONVEXITY_ADJUSTMENT_FLG,
         ARREARS_PAYMENT_CD,
         QUANTO_FEATURE_ID,
         CASH_INTENSIVE_BUSINESS_FLG,
         LETTER_OF_CREDIT_ONFILE_FLG,
         TRADE_FINANCE_FLG,
         ANNUITY_PAYMENT_TYPE_CD,
         INTEREST_PAYMENT_TYPE_CD,
         INTEREST_PAYMENT_TIME_FREQ_CD,
         LIQUIDITY_CATEGORY_TYPE_CD,
         HOLIDAY_DATE_ROLL_CONV_CD,
         WEEKEND_DATE_ROLL_CONV_CD,
         EXPENSE_ALLOCATION_ID,
         FIRST_INTEREST_PAYMENT_DT,
         LAST_INTEREST_PAYMENT_DT,
         IRB_DUMMY_TYPE_CD,
         IRB_SRC_ACCOUNT_ID,
         BRCA,
         FINANCIAL_INSTRUMENT_TYPE_CD
   from work_ia.FINANCIAL_ACCOUNT_FWD_BK
   ;
quit;

%let SYSLAST = work.WIRP64G;

%let dbxrc = %eval(%sysfunc(exist(work_ia.FINANCIAL_ACCOUNT_NDF_BK, DATA)) or 
      %sysfunc(exist(work_ia.FINANCIAL_ACCOUNT_NDF_BK, VIEW))); 

/*---- Map the columns  ----*/ 
proc datasets lib = work nolist nowarn memtype = (data view);
   delete WIRP65P;
quit;

%put %str(NOTE: Mapping columns ...);
proc sql;
   create view work.WIRP65P as
      select
         ACCOUNT_ID,
         VALID_FROM_DTTM,
         VALID_TO_DTTM,
         SOURCE_SYSTEM_CD,
         ACCOUNT_REGISTRATION_NM,
         ALTERNATE_ACCOUNT_NM,
         FINANCIAL_ACCOUNT_TYPE_CD,
         AUTO_DEBIT_ACCOUNT_TYPE_CD,
         ACCOUNT_REGISTRATION_TYPE_CD,
         ACCOUNT_STATUS_CD,
         OPEN_DT,
         CLOSE_DT,
         CLOSE_REASON_CD,
         ACCOUNT_TAX_ID,
         EXPECTED_LOSS_PCT,
         INDIVIDUAL_ORGANIZATION_CD,
         SOURCE_CD,
         OPENING_CHANNEL_CD,
         PREFERRED_CHANNEL_CD,
         CURRENCY_CD,
         PRIMARY_PHONE_NO,
         PRIMARY_PHONE_TYPE_CD,
         SECONDARY_PHONE_NO,
         SECONDARY_PHONE_TYPE_CD,
         MAILABLE_FLG,
         TELEPHONABLE_FLG,
         EMAIL_FLG,
         SMS_FLG,
         DO_NOT_CONTACT_FLG,
         EMPLOYEE_RK,
         CURRENCY_BASED_ACCOUNT_FLG,
         FEE_BASED_FLG,
         ANNUAL_FEES_AMT,
         MONTHLY_FEES_AMT,
         CAMPAIGN_CD,
         COMMUNICATION_CD,
         REGISTERED_ONLINE_DT,
         FIRST_LOGIN_DT,
         ONLINE_BILL_PAYMENT_FLG,
         ID_VERIFICATION_TYPE_CD,
         PREVIOUS_ACCOUNT_ID,
         OPEN_BRANCH_FINANCIAL_UNIT_ID,
         PRIM_BRANCH_FINANCIAL_UNIT_ID,
         FINANCIAL_APPLICATION_ID,
         CREDIT_FACILITY_ID,
         FUTURE_MARGIN_INCOME_AMT,
         IN_DEFAULT_FLG,
         FINANCIAL_BOOK_ID,
         IRRECOVERABLE_FLG,
         OWNED_BY_INTERNAL_ORG_ID,
         PREVIOUS_BANK_EXTERNAL_ORG_ID,
         NETTING_SET_ID,
         REVOLVING_FLG,
         SOURCE_CHANNEL_CD,
         GRACE_PERIOD_DAYS_CNT,
         REMARGINING_DAYS_CNT,
         FINANCIAL_CALENDAR_ID,
         DAY_BASIS_CD,
         PORTFOLIO_ID,
         SECURITIZATION_POOL_ID,
         RECEIVABLES_POOL_ID,
         ACCOUNT_USAGE_TYPE_CD,
         RISK_ALARM_FLG,
         LOW_PROFITABILITY_FLG,
         ACCOUNT_LIFECYCLE_STG_CD,
         ATTRITION_ALARM_FLG,
         BALANCE_FROZEN_FLG,
         BALANCE_FROZEN_DT,
         ACCOUNT_BLOCK_REASON_CD,
         TAXATION_STATE_CD,
         EFFECTIVE_MATURITY_YEAR_NO,
         GL_ACCOUNT_ID,
         FROM_OTHER_INSTITUTION_FLG,
         ACCOUNT_RENEWAL_CNT,
         BALANCE_TRANSFER_DT,
         BALANCE_TRANSFER_AMT,
         BALANCE_TRANSFER_CNT,
         BASE_LONG_TERM_APR_RT,
         BROKER_FLG,
         MULT_RATE_FLG,
         AUTO_DEBIT_ACCOUNT_NO,
         WORST_STATUS_LAST_12_MTH_CD,
         WORST_STATUS_LAST_12_MTH_DT,
         BALANCE_TRNSF_OTHER_ACCT_CNT,
         EFFECTIVE_FROM_DTTM,
         EFFECTIVE_TO_DTTM,
         COUNTERPARTY_ID,
         INSURED_BY_COUNTERPARTY_ID,
         STATEMENT_FREQUENCY_CD,
         SECURITY_DEPOSIT_AMT,
         SECURITY_DEPOSIT_REFUND_AMT,
         FIRST_PAYMENT_DT,
         LAST_PAYMENT_DT,
         FIRST_RESET_DT,
         LAST_RESET_DT,
         RESETS_PER_ANNUM_NO,
         PRINCIPAL_PAYMENT_TYPE_CD,
         PRINCIPAL_PAYMENT_AMT,
         RATE_POLICY_ID,
         SPREAD_RT,
         DISCOUNT_SPREAD_RT,
         INITIAL_CONTRACT_RT,
         FIXED_MONTHLY_PREPAYMENT_RT,
         CAPITAL_ALLOCATION_ID,
         CAPITAL_COST_ID,
         SEGMENT_ID,
         NEAR_BRANCH_FINANCIAL_UNIT_ID,
         STATEMENT_OPT_FLG,
         VALUE_SCALING_FACTOR_RT,
         INTERNAL_REPORTING_CATEGORY_CD,
         CONVEXITY_ADJUSTMENT_FLG,
         ARREARS_PAYMENT_CD,
         QUANTO_FEATURE_ID,
         CASH_INTENSIVE_BUSINESS_FLG,
         LETTER_OF_CREDIT_ONFILE_FLG,
         TRADE_FINANCE_FLG,
         ANNUITY_PAYMENT_TYPE_CD,
         INTEREST_PAYMENT_TYPE_CD,
         INTEREST_PAYMENT_TIME_FREQ_CD,
         LIQUIDITY_CATEGORY_TYPE_CD,
         HOLIDAY_DATE_ROLL_CONV_CD,
         WEEKEND_DATE_ROLL_CONV_CD,
         EXPENSE_ALLOCATION_ID,
         FIRST_INTEREST_PAYMENT_DT,
         LAST_INTEREST_PAYMENT_DT,
         IRB_DUMMY_TYPE_CD,
         IRB_SRC_ACCOUNT_ID,
         BRCA,
         FINANCIAL_INSTRUMENT_TYPE_CD
   from work_ia.FINANCIAL_ACCOUNT_NDF_BK
   ;
quit;

%let SYSLAST = work.WIRP65P;

%let dbxrc = %eval(%sysfunc(exist(work_ia.FINANCIAL_ACCOUNT_OPT_BK, DATA)) or 
      %sysfunc(exist(work_ia.FINANCIAL_ACCOUNT_OPT_BK, VIEW))); 

%let dbxrc = %eval(%sysfunc(exist(work_ia.FINANCIAL_ACCOUNT_SPT_BK, DATA)) or 
      %sysfunc(exist(work_ia.FINANCIAL_ACCOUNT_SPT_BK, VIEW))); 

/*---- Map the columns  ----*/ 
proc datasets lib = work nolist nowarn memtype = (data view);
   delete WIRP67D;
quit;

%put %str(NOTE: Mapping columns ...);
proc sql;
   create view work.WIRP67D as
      select
         ACCOUNT_ID,
         VALID_FROM_DTTM,
         VALID_TO_DTTM,
         SOURCE_SYSTEM_CD,
         ACCOUNT_REGISTRATION_NM,
         ALTERNATE_ACCOUNT_NM,
         FINANCIAL_ACCOUNT_TYPE_CD,
         AUTO_DEBIT_ACCOUNT_TYPE_CD,
         ACCOUNT_REGISTRATION_TYPE_CD,
         ACCOUNT_STATUS_CD,
         OPEN_DT,
         CLOSE_DT,
         CLOSE_REASON_CD,
         ACCOUNT_TAX_ID,
         EXPECTED_LOSS_PCT,
         INDIVIDUAL_ORGANIZATION_CD,
         SOURCE_CD,
         OPENING_CHANNEL_CD,
         PREFERRED_CHANNEL_CD,
         CURRENCY_CD,
         PRIMARY_PHONE_NO,
         PRIMARY_PHONE_TYPE_CD,
         SECONDARY_PHONE_NO,
         SECONDARY_PHONE_TYPE_CD,
         MAILABLE_FLG,
         TELEPHONABLE_FLG,
         EMAIL_FLG,
         SMS_FLG,
         DO_NOT_CONTACT_FLG,
         EMPLOYEE_RK,
         CURRENCY_BASED_ACCOUNT_FLG,
         FEE_BASED_FLG,
         ANNUAL_FEES_AMT,
         MONTHLY_FEES_AMT,
         CAMPAIGN_CD,
         COMMUNICATION_CD,
         REGISTERED_ONLINE_DT,
         FIRST_LOGIN_DT,
         ONLINE_BILL_PAYMENT_FLG,
         ID_VERIFICATION_TYPE_CD,
         PREVIOUS_ACCOUNT_ID,
         OPEN_BRANCH_FINANCIAL_UNIT_ID,
         PRIM_BRANCH_FINANCIAL_UNIT_ID,
         FINANCIAL_APPLICATION_ID,
         CREDIT_FACILITY_ID,
         FUTURE_MARGIN_INCOME_AMT,
         IN_DEFAULT_FLG,
         FINANCIAL_BOOK_ID,
         IRRECOVERABLE_FLG,
         OWNED_BY_INTERNAL_ORG_ID,
         PREVIOUS_BANK_EXTERNAL_ORG_ID,
         NETTING_SET_ID,
         REVOLVING_FLG,
         SOURCE_CHANNEL_CD,
         GRACE_PERIOD_DAYS_CNT,
         REMARGINING_DAYS_CNT,
         FINANCIAL_CALENDAR_ID,
         DAY_BASIS_CD,
         PORTFOLIO_ID,
         SECURITIZATION_POOL_ID,
         RECEIVABLES_POOL_ID,
         ACCOUNT_USAGE_TYPE_CD,
         RISK_ALARM_FLG,
         LOW_PROFITABILITY_FLG,
         ACCOUNT_LIFECYCLE_STG_CD,
         ATTRITION_ALARM_FLG,
         BALANCE_FROZEN_FLG,
         BALANCE_FROZEN_DT,
         ACCOUNT_BLOCK_REASON_CD,
         TAXATION_STATE_CD,
         EFFECTIVE_MATURITY_YEAR_NO,
         GL_ACCOUNT_ID,
         FROM_OTHER_INSTITUTION_FLG,
         ACCOUNT_RENEWAL_CNT,
         BALANCE_TRANSFER_DT,
         BALANCE_TRANSFER_AMT,
         BALANCE_TRANSFER_CNT,
         BASE_LONG_TERM_APR_RT,
         BROKER_FLG,
         MULT_RATE_FLG,
         AUTO_DEBIT_ACCOUNT_NO,
         WORST_STATUS_LAST_12_MTH_CD,
         WORST_STATUS_LAST_12_MTH_DT,
         BALANCE_TRNSF_OTHER_ACCT_CNT,
         EFFECTIVE_FROM_DTTM,
         EFFECTIVE_TO_DTTM,
         COUNTERPARTY_ID,
         INSURED_BY_COUNTERPARTY_ID,
         STATEMENT_FREQUENCY_CD,
         SECURITY_DEPOSIT_AMT,
         SECURITY_DEPOSIT_REFUND_AMT,
         FIRST_PAYMENT_DT,
         LAST_PAYMENT_DT,
         FIRST_RESET_DT,
         LAST_RESET_DT,
         RESETS_PER_ANNUM_NO,
         PRINCIPAL_PAYMENT_TYPE_CD,
         PRINCIPAL_PAYMENT_AMT,
         RATE_POLICY_ID,
         SPREAD_RT,
         DISCOUNT_SPREAD_RT,
         INITIAL_CONTRACT_RT,
         FIXED_MONTHLY_PREPAYMENT_RT,
         CAPITAL_ALLOCATION_ID,
         CAPITAL_COST_ID,
         SEGMENT_ID,
         NEAR_BRANCH_FINANCIAL_UNIT_ID,
         STATEMENT_OPT_FLG,
         VALUE_SCALING_FACTOR_RT,
         INTERNAL_REPORTING_CATEGORY_CD,
         CONVEXITY_ADJUSTMENT_FLG,
         ARREARS_PAYMENT_CD,
         QUANTO_FEATURE_ID,
         CASH_INTENSIVE_BUSINESS_FLG,
         LETTER_OF_CREDIT_ONFILE_FLG,
         TRADE_FINANCE_FLG,
         ANNUITY_PAYMENT_TYPE_CD,
         INTEREST_PAYMENT_TYPE_CD,
         INTEREST_PAYMENT_TIME_FREQ_CD,
         LIQUIDITY_CATEGORY_TYPE_CD,
         HOLIDAY_DATE_ROLL_CONV_CD,
         WEEKEND_DATE_ROLL_CONV_CD,
         EXPENSE_ALLOCATION_ID,
         FIRST_INTEREST_PAYMENT_DT,
         LAST_INTEREST_PAYMENT_DT,
         IRB_DUMMY_TYPE_CD,
         IRB_SRC_ACCOUNT_ID,
         BRCA,
         FINANCIAL_INSTRUMENT_TYPE_CD
   from work_ia.FINANCIAL_ACCOUNT_SPT_BK
   ;
quit;

%let SYSLAST = work.WIRP67D;

%let dbxrc = %eval(%sysfunc(exist(work_ia.FINANCIAL_ACCOUNT_SWP_BK, DATA)) or 
      %sysfunc(exist(work_ia.FINANCIAL_ACCOUNT_SWP_BK, VIEW))); 

/*---- Map the columns  ----*/ 
proc datasets lib = work nolist nowarn memtype = (data view);
   delete WIRP68P;
quit;

%put %str(NOTE: Mapping columns ...);
proc sql;
   create view work.WIRP68P as
      select
         ACCOUNT_ID,
         VALID_FROM_DTTM,
         VALID_TO_DTTM,
         SOURCE_SYSTEM_CD,
         ACCOUNT_REGISTRATION_NM,
         ALTERNATE_ACCOUNT_NM,
         FINANCIAL_ACCOUNT_TYPE_CD,
         AUTO_DEBIT_ACCOUNT_TYPE_CD,
         ACCOUNT_REGISTRATION_TYPE_CD,
         ACCOUNT_STATUS_CD,
         OPEN_DT,
         CLOSE_DT,
         CLOSE_REASON_CD,
         ACCOUNT_TAX_ID,
         EXPECTED_LOSS_PCT,
         INDIVIDUAL_ORGANIZATION_CD,
         SOURCE_CD,
         OPENING_CHANNEL_CD,
         PREFERRED_CHANNEL_CD,
         CURRENCY_CD,
         PRIMARY_PHONE_NO,
         PRIMARY_PHONE_TYPE_CD,
         SECONDARY_PHONE_NO,
         SECONDARY_PHONE_TYPE_CD,
         MAILABLE_FLG,
         TELEPHONABLE_FLG,
         EMAIL_FLG,
         SMS_FLG,
         DO_NOT_CONTACT_FLG,
         EMPLOYEE_RK,
         CURRENCY_BASED_ACCOUNT_FLG,
         FEE_BASED_FLG,
         ANNUAL_FEES_AMT,
         MONTHLY_FEES_AMT,
         CAMPAIGN_CD,
         COMMUNICATION_CD,
         REGISTERED_ONLINE_DT,
         FIRST_LOGIN_DT,
         ONLINE_BILL_PAYMENT_FLG,
         ID_VERIFICATION_TYPE_CD,
         PREVIOUS_ACCOUNT_ID,
         OPEN_BRANCH_FINANCIAL_UNIT_ID,
         PRIM_BRANCH_FINANCIAL_UNIT_ID,
         FINANCIAL_APPLICATION_ID,
         CREDIT_FACILITY_ID,
         FUTURE_MARGIN_INCOME_AMT,
         IN_DEFAULT_FLG,
         FINANCIAL_BOOK_ID,
         IRRECOVERABLE_FLG,
         OWNED_BY_INTERNAL_ORG_ID,
         PREVIOUS_BANK_EXTERNAL_ORG_ID,
         NETTING_SET_ID,
         REVOLVING_FLG,
         SOURCE_CHANNEL_CD,
         GRACE_PERIOD_DAYS_CNT,
         REMARGINING_DAYS_CNT,
         FINANCIAL_CALENDAR_ID,
         DAY_BASIS_CD,
         PORTFOLIO_ID,
         SECURITIZATION_POOL_ID,
         RECEIVABLES_POOL_ID,
         ACCOUNT_USAGE_TYPE_CD,
         RISK_ALARM_FLG,
         LOW_PROFITABILITY_FLG,
         ACCOUNT_LIFECYCLE_STG_CD,
         ATTRITION_ALARM_FLG,
         BALANCE_FROZEN_FLG,
         BALANCE_FROZEN_DT,
         ACCOUNT_BLOCK_REASON_CD,
         TAXATION_STATE_CD,
         EFFECTIVE_MATURITY_YEAR_NO,
         GL_ACCOUNT_ID,
         FROM_OTHER_INSTITUTION_FLG,
         ACCOUNT_RENEWAL_CNT,
         BALANCE_TRANSFER_DT,
         BALANCE_TRANSFER_AMT,
         BALANCE_TRANSFER_CNT,
         BASE_LONG_TERM_APR_RT,
         BROKER_FLG,
         MULT_RATE_FLG,
         AUTO_DEBIT_ACCOUNT_NO,
         WORST_STATUS_LAST_12_MTH_CD,
         WORST_STATUS_LAST_12_MTH_DT,
         BALANCE_TRNSF_OTHER_ACCT_CNT,
         EFFECTIVE_FROM_DTTM,
         EFFECTIVE_TO_DTTM,
         COUNTERPARTY_ID,
         INSURED_BY_COUNTERPARTY_ID,
         STATEMENT_FREQUENCY_CD,
         SECURITY_DEPOSIT_AMT,
         SECURITY_DEPOSIT_REFUND_AMT,
         FIRST_PAYMENT_DT,
         LAST_PAYMENT_DT,
         FIRST_RESET_DT,
         LAST_RESET_DT,
         RESETS_PER_ANNUM_NO,
         PRINCIPAL_PAYMENT_TYPE_CD,
         PRINCIPAL_PAYMENT_AMT,
         RATE_POLICY_ID,
         SPREAD_RT,
         DISCOUNT_SPREAD_RT,
         INITIAL_CONTRACT_RT,
         FIXED_MONTHLY_PREPAYMENT_RT,
         CAPITAL_ALLOCATION_ID,
         CAPITAL_COST_ID,
         SEGMENT_ID,
         NEAR_BRANCH_FINANCIAL_UNIT_ID,
         STATEMENT_OPT_FLG,
         VALUE_SCALING_FACTOR_RT,
         INTERNAL_REPORTING_CATEGORY_CD,
         CONVEXITY_ADJUSTMENT_FLG,
         ARREARS_PAYMENT_CD,
         QUANTO_FEATURE_ID,
         CASH_INTENSIVE_BUSINESS_FLG,
         LETTER_OF_CREDIT_ONFILE_FLG,
         TRADE_FINANCE_FLG,
         ANNUITY_PAYMENT_TYPE_CD,
         INTEREST_PAYMENT_TYPE_CD,
         INTEREST_PAYMENT_TIME_FREQ_CD,
         LIQUIDITY_CATEGORY_TYPE_CD,
         HOLIDAY_DATE_ROLL_CONV_CD,
         WEEKEND_DATE_ROLL_CONV_CD,
         EXPENSE_ALLOCATION_ID,
         FIRST_INTEREST_PAYMENT_DT,
         LAST_INTEREST_PAYMENT_DT,
         IRB_DUMMY_TYPE_CD,
         IRB_SRC_ACCOUNT_ID,
         BRCA,
         FINANCIAL_INSTRUMENT_TYPE_CD
   from work_ia.FINANCIAL_ACCOUNT_SWP_BK
   ;
quit;

%let SYSLAST = work.WIRP68P;

%let dbxrc = %eval(%sysfunc(exist(work_ia.FINANCIAL_ACCOUNT_IRS_BK, DATA)) or 
      %sysfunc(exist(work_ia.FINANCIAL_ACCOUNT_IRS_BK, VIEW))); 

/*---- Map the columns  ----*/ 
proc datasets lib = work nolist nowarn memtype = (data view);
   delete WIRP6BM;
quit;

%put %str(NOTE: Mapping columns ...);
proc sql;
   create view work.WIRP6BM as
      select
         ACCOUNT_ID,
         VALID_FROM_DTTM,
         VALID_TO_DTTM,
         SOURCE_SYSTEM_CD,
         ACCOUNT_REGISTRATION_NM,
         ALTERNATE_ACCOUNT_NM,
         FINANCIAL_ACCOUNT_TYPE_CD,
         AUTO_DEBIT_ACCOUNT_TYPE_CD,
         ACCOUNT_REGISTRATION_TYPE_CD,
         ACCOUNT_STATUS_CD,
         OPEN_DT,
         CLOSE_DT,
         CLOSE_REASON_CD,
         ACCOUNT_TAX_ID,
         EXPECTED_LOSS_PCT,
         INDIVIDUAL_ORGANIZATION_CD,
         SOURCE_CD,
         OPENING_CHANNEL_CD,
         PREFERRED_CHANNEL_CD,
         CURRENCY_CD,
         PRIMARY_PHONE_NO,
         PRIMARY_PHONE_TYPE_CD,
         SECONDARY_PHONE_NO,
         SECONDARY_PHONE_TYPE_CD,
         MAILABLE_FLG,
         TELEPHONABLE_FLG,
         EMAIL_FLG,
         SMS_FLG,
         DO_NOT_CONTACT_FLG,
         EMPLOYEE_RK,
         CURRENCY_BASED_ACCOUNT_FLG,
         FEE_BASED_FLG,
         ANNUAL_FEES_AMT,
         MONTHLY_FEES_AMT,
         CAMPAIGN_CD,
         COMMUNICATION_CD,
         REGISTERED_ONLINE_DT,
         FIRST_LOGIN_DT,
         ONLINE_BILL_PAYMENT_FLG,
         ID_VERIFICATION_TYPE_CD,
         PREVIOUS_ACCOUNT_ID,
         OPEN_BRANCH_FINANCIAL_UNIT_ID,
         PRIM_BRANCH_FINANCIAL_UNIT_ID,
         FINANCIAL_APPLICATION_ID,
         CREDIT_FACILITY_ID,
         FUTURE_MARGIN_INCOME_AMT,
         IN_DEFAULT_FLG,
         FINANCIAL_BOOK_ID,
         IRRECOVERABLE_FLG,
         OWNED_BY_INTERNAL_ORG_ID,
         PREVIOUS_BANK_EXTERNAL_ORG_ID,
         NETTING_SET_ID,
         REVOLVING_FLG,
         SOURCE_CHANNEL_CD,
         GRACE_PERIOD_DAYS_CNT,
         REMARGINING_DAYS_CNT,
         FINANCIAL_CALENDAR_ID,
         DAY_BASIS_CD,
         PORTFOLIO_ID,
         SECURITIZATION_POOL_ID,
         RECEIVABLES_POOL_ID,
         ACCOUNT_USAGE_TYPE_CD,
         RISK_ALARM_FLG,
         LOW_PROFITABILITY_FLG,
         ACCOUNT_LIFECYCLE_STG_CD,
         ATTRITION_ALARM_FLG,
         BALANCE_FROZEN_FLG,
         BALANCE_FROZEN_DT,
         ACCOUNT_BLOCK_REASON_CD,
         TAXATION_STATE_CD,
         EFFECTIVE_MATURITY_YEAR_NO,
         GL_ACCOUNT_ID,
         FROM_OTHER_INSTITUTION_FLG,
         ACCOUNT_RENEWAL_CNT,
         BALANCE_TRANSFER_DT,
         BALANCE_TRANSFER_AMT,
         BALANCE_TRANSFER_CNT,
         BASE_LONG_TERM_APR_RT,
         BROKER_FLG,
         MULT_RATE_FLG,
         AUTO_DEBIT_ACCOUNT_NO,
         WORST_STATUS_LAST_12_MTH_CD,
         WORST_STATUS_LAST_12_MTH_DT,
         BALANCE_TRNSF_OTHER_ACCT_CNT,
         EFFECTIVE_FROM_DTTM,
         EFFECTIVE_TO_DTTM,
         COUNTERPARTY_ID,
         INSURED_BY_COUNTERPARTY_ID,
         STATEMENT_FREQUENCY_CD,
         SECURITY_DEPOSIT_AMT,
         SECURITY_DEPOSIT_REFUND_AMT,
         FIRST_PAYMENT_DT,
         LAST_PAYMENT_DT,
         FIRST_RESET_DT,
         LAST_RESET_DT,
         RESETS_PER_ANNUM_NO,
         PRINCIPAL_PAYMENT_TYPE_CD,
         PRINCIPAL_PAYMENT_AMT,
         RATE_POLICY_ID,
         SPREAD_RT,
         DISCOUNT_SPREAD_RT,
         INITIAL_CONTRACT_RT,
         FIXED_MONTHLY_PREPAYMENT_RT,
         CAPITAL_ALLOCATION_ID,
         CAPITAL_COST_ID,
         SEGMENT_ID,
         NEAR_BRANCH_FINANCIAL_UNIT_ID,
         STATEMENT_OPT_FLG,
         VALUE_SCALING_FACTOR_RT,
         INTERNAL_REPORTING_CATEGORY_CD,
         CONVEXITY_ADJUSTMENT_FLG,
         ARREARS_PAYMENT_CD,
         QUANTO_FEATURE_ID,
         CASH_INTENSIVE_BUSINESS_FLG,
         LETTER_OF_CREDIT_ONFILE_FLG,
         TRADE_FINANCE_FLG,
         ANNUITY_PAYMENT_TYPE_CD,
         INTEREST_PAYMENT_TYPE_CD,
         INTEREST_PAYMENT_TIME_FREQ_CD,
         LIQUIDITY_CATEGORY_TYPE_CD,
         HOLIDAY_DATE_ROLL_CONV_CD,
         WEEKEND_DATE_ROLL_CONV_CD,
         EXPENSE_ALLOCATION_ID,
         FIRST_INTEREST_PAYMENT_DT,
         LAST_INTEREST_PAYMENT_DT,
         IRB_DUMMY_TYPE_CD,
         IRB_SRC_ACCOUNT_ID,
         BRCA,
         FINANCIAL_INSTRUMENT_TYPE_CD
   from work_ia.FINANCIAL_ACCOUNT_IRS_BK
   ;
quit;

%let SYSLAST = work.WIRP6BM;

%let dbxrc = %eval(%sysfunc(exist(work_ia.FINANCIAL_ACCOUNT_CIS_BK, DATA)) or 
      %sysfunc(exist(work_ia.FINANCIAL_ACCOUNT_CIS_BK, VIEW))); 

%let dbxrc = %eval(%sysfunc(exist(work_ia.FINANCIAL_ACCOUNT_CAP_FLR_BK, DATA)) or 
      %sysfunc(exist(work_ia.FINANCIAL_ACCOUNT_CAP_FLR_BK, VIEW))); 

/*---- Map the columns  ----*/ 
proc datasets lib = work nolist nowarn memtype = (data view);
   delete WIRP6FU;
quit;

%put %str(NOTE: Mapping columns ...);
proc sql;
   create view work.WIRP6FU as
      select
         ACCOUNT_ID,
         VALID_FROM_DTTM,
         VALID_TO_DTTM,
         SOURCE_SYSTEM_CD,
         ACCOUNT_REGISTRATION_NM,
         ALTERNATE_ACCOUNT_NM,
         FINANCIAL_ACCOUNT_TYPE_CD,
         AUTO_DEBIT_ACCOUNT_TYPE_CD,
         ACCOUNT_REGISTRATION_TYPE_CD,
         ACCOUNT_STATUS_CD,
         OPEN_DT,
         CLOSE_DT,
         CLOSE_REASON_CD,
         ACCOUNT_TAX_ID,
         EXPECTED_LOSS_PCT,
         INDIVIDUAL_ORGANIZATION_CD,
         SOURCE_CD,
         OPENING_CHANNEL_CD,
         PREFERRED_CHANNEL_CD,
         CURRENCY_CD,
         PRIMARY_PHONE_NO,
         PRIMARY_PHONE_TYPE_CD,
         SECONDARY_PHONE_NO,
         SECONDARY_PHONE_TYPE_CD,
         MAILABLE_FLG,
         TELEPHONABLE_FLG,
         EMAIL_FLG,
         SMS_FLG,
         DO_NOT_CONTACT_FLG,
         EMPLOYEE_RK,
         CURRENCY_BASED_ACCOUNT_FLG,
         FEE_BASED_FLG,
         ANNUAL_FEES_AMT,
         MONTHLY_FEES_AMT,
         CAMPAIGN_CD,
         COMMUNICATION_CD,
         REGISTERED_ONLINE_DT,
         FIRST_LOGIN_DT,
         ONLINE_BILL_PAYMENT_FLG,
         ID_VERIFICATION_TYPE_CD,
         PREVIOUS_ACCOUNT_ID,
         OPEN_BRANCH_FINANCIAL_UNIT_ID,
         PRIM_BRANCH_FINANCIAL_UNIT_ID,
         FINANCIAL_APPLICATION_ID,
         CREDIT_FACILITY_ID,
         FUTURE_MARGIN_INCOME_AMT,
         IN_DEFAULT_FLG,
         FINANCIAL_BOOK_ID,
         IRRECOVERABLE_FLG,
         OWNED_BY_INTERNAL_ORG_ID,
         PREVIOUS_BANK_EXTERNAL_ORG_ID,
         NETTING_SET_ID,
         REVOLVING_FLG,
         SOURCE_CHANNEL_CD,
         GRACE_PERIOD_DAYS_CNT,
         REMARGINING_DAYS_CNT,
         FINANCIAL_CALENDAR_ID,
         DAY_BASIS_CD,
         PORTFOLIO_ID,
         SECURITIZATION_POOL_ID,
         RECEIVABLES_POOL_ID,
         ACCOUNT_USAGE_TYPE_CD,
         RISK_ALARM_FLG,
         LOW_PROFITABILITY_FLG,
         ACCOUNT_LIFECYCLE_STG_CD,
         ATTRITION_ALARM_FLG,
         BALANCE_FROZEN_FLG,
         BALANCE_FROZEN_DT,
         ACCOUNT_BLOCK_REASON_CD,
         TAXATION_STATE_CD,
         EFFECTIVE_MATURITY_YEAR_NO,
         GL_ACCOUNT_ID,
         FROM_OTHER_INSTITUTION_FLG,
         ACCOUNT_RENEWAL_CNT,
         BALANCE_TRANSFER_DT,
         BALANCE_TRANSFER_AMT,
         BALANCE_TRANSFER_CNT,
         BASE_LONG_TERM_APR_RT,
         BROKER_FLG,
         MULT_RATE_FLG,
         AUTO_DEBIT_ACCOUNT_NO,
         WORST_STATUS_LAST_12_MTH_CD,
         WORST_STATUS_LAST_12_MTH_DT,
         BALANCE_TRNSF_OTHER_ACCT_CNT,
         EFFECTIVE_FROM_DTTM,
         EFFECTIVE_TO_DTTM,
         COUNTERPARTY_ID,
         INSURED_BY_COUNTERPARTY_ID,
         STATEMENT_FREQUENCY_CD,
         SECURITY_DEPOSIT_AMT,
         SECURITY_DEPOSIT_REFUND_AMT,
         FIRST_PAYMENT_DT,
         LAST_PAYMENT_DT,
         FIRST_RESET_DT,
         LAST_RESET_DT,
         RESETS_PER_ANNUM_NO,
         PRINCIPAL_PAYMENT_TYPE_CD,
         PRINCIPAL_PAYMENT_AMT,
         RATE_POLICY_ID,
         SPREAD_RT,
         DISCOUNT_SPREAD_RT,
         INITIAL_CONTRACT_RT,
         FIXED_MONTHLY_PREPAYMENT_RT,
         CAPITAL_ALLOCATION_ID,
         CAPITAL_COST_ID,
         SEGMENT_ID,
         NEAR_BRANCH_FINANCIAL_UNIT_ID,
         STATEMENT_OPT_FLG,
         VALUE_SCALING_FACTOR_RT,
         INTERNAL_REPORTING_CATEGORY_CD,
         CONVEXITY_ADJUSTMENT_FLG,
         ARREARS_PAYMENT_CD,
         QUANTO_FEATURE_ID,
         CASH_INTENSIVE_BUSINESS_FLG,
         LETTER_OF_CREDIT_ONFILE_FLG,
         TRADE_FINANCE_FLG,
         ANNUITY_PAYMENT_TYPE_CD,
         INTEREST_PAYMENT_TYPE_CD,
         INTEREST_PAYMENT_TIME_FREQ_CD,
         LIQUIDITY_CATEGORY_TYPE_CD,
         HOLIDAY_DATE_ROLL_CONV_CD,
         WEEKEND_DATE_ROLL_CONV_CD,
         EXPENSE_ALLOCATION_ID,
         FIRST_INTEREST_PAYMENT_DT,
         LAST_INTEREST_PAYMENT_DT,
         IRB_DUMMY_TYPE_CD,
         IRB_SRC_ACCOUNT_ID,
         BRCA,
         FINANCIAL_INSTRUMENT_TYPE_CD
   from work_ia.FINANCIAL_ACCOUNT_CAP_FLR_BK
   ;
quit;

%let SYSLAST = work.WIRP6FU;

%let dbxrc = %eval(%sysfunc(exist(work_ia.FINANCIAL_ACCOUNT_FRA_BK, DATA)) or 
      %sysfunc(exist(work_ia.FINANCIAL_ACCOUNT_FRA_BK, VIEW))); 

/*---- Map the columns  ----*/ 
proc datasets lib = work nolist nowarn memtype = (data view);
   delete WIRP6J2;
quit;

%put %str(NOTE: Mapping columns ...);
proc sql;
   create view work.WIRP6J2 as
      select
         ACCOUNT_ID,
         VALID_FROM_DTTM,
         VALID_TO_DTTM,
         SOURCE_SYSTEM_CD,
         ACCOUNT_REGISTRATION_NM,
         ALTERNATE_ACCOUNT_NM,
         FINANCIAL_ACCOUNT_TYPE_CD,
         AUTO_DEBIT_ACCOUNT_TYPE_CD,
         ACCOUNT_REGISTRATION_TYPE_CD,
         ACCOUNT_STATUS_CD,
         OPEN_DT,
         CLOSE_DT,
         CLOSE_REASON_CD,
         ACCOUNT_TAX_ID,
         EXPECTED_LOSS_PCT,
         INDIVIDUAL_ORGANIZATION_CD,
         SOURCE_CD,
         OPENING_CHANNEL_CD,
         PREFERRED_CHANNEL_CD,
         CURRENCY_CD,
         PRIMARY_PHONE_NO,
         PRIMARY_PHONE_TYPE_CD,
         SECONDARY_PHONE_NO,
         SECONDARY_PHONE_TYPE_CD,
         MAILABLE_FLG,
         TELEPHONABLE_FLG,
         EMAIL_FLG,
         SMS_FLG,
         DO_NOT_CONTACT_FLG,
         EMPLOYEE_RK,
         CURRENCY_BASED_ACCOUNT_FLG,
         FEE_BASED_FLG,
         ANNUAL_FEES_AMT,
         MONTHLY_FEES_AMT,
         CAMPAIGN_CD,
         COMMUNICATION_CD,
         REGISTERED_ONLINE_DT,
         FIRST_LOGIN_DT,
         ONLINE_BILL_PAYMENT_FLG,
         ID_VERIFICATION_TYPE_CD,
         PREVIOUS_ACCOUNT_ID,
         OPEN_BRANCH_FINANCIAL_UNIT_ID,
         PRIM_BRANCH_FINANCIAL_UNIT_ID,
         FINANCIAL_APPLICATION_ID,
         CREDIT_FACILITY_ID,
         FUTURE_MARGIN_INCOME_AMT,
         IN_DEFAULT_FLG,
         FINANCIAL_BOOK_ID,
         IRRECOVERABLE_FLG,
         OWNED_BY_INTERNAL_ORG_ID,
         PREVIOUS_BANK_EXTERNAL_ORG_ID,
         NETTING_SET_ID,
         REVOLVING_FLG,
         SOURCE_CHANNEL_CD,
         GRACE_PERIOD_DAYS_CNT,
         REMARGINING_DAYS_CNT,
         FINANCIAL_CALENDAR_ID,
         DAY_BASIS_CD,
         PORTFOLIO_ID,
         SECURITIZATION_POOL_ID,
         RECEIVABLES_POOL_ID,
         ACCOUNT_USAGE_TYPE_CD,
         RISK_ALARM_FLG,
         LOW_PROFITABILITY_FLG,
         ACCOUNT_LIFECYCLE_STG_CD,
         ATTRITION_ALARM_FLG,
         BALANCE_FROZEN_FLG,
         BALANCE_FROZEN_DT,
         ACCOUNT_BLOCK_REASON_CD,
         TAXATION_STATE_CD,
         EFFECTIVE_MATURITY_YEAR_NO,
         GL_ACCOUNT_ID,
         FROM_OTHER_INSTITUTION_FLG,
         ACCOUNT_RENEWAL_CNT,
         BALANCE_TRANSFER_DT,
         BALANCE_TRANSFER_AMT,
         BALANCE_TRANSFER_CNT,
         BASE_LONG_TERM_APR_RT,
         BROKER_FLG,
         MULT_RATE_FLG,
         AUTO_DEBIT_ACCOUNT_NO,
         WORST_STATUS_LAST_12_MTH_CD,
         WORST_STATUS_LAST_12_MTH_DT,
         BALANCE_TRNSF_OTHER_ACCT_CNT,
         EFFECTIVE_FROM_DTTM,
         EFFECTIVE_TO_DTTM,
         COUNTERPARTY_ID,
         INSURED_BY_COUNTERPARTY_ID,
         STATEMENT_FREQUENCY_CD,
         SECURITY_DEPOSIT_AMT,
         SECURITY_DEPOSIT_REFUND_AMT,
         FIRST_PAYMENT_DT,
         LAST_PAYMENT_DT,
         FIRST_RESET_DT,
         LAST_RESET_DT,
         RESETS_PER_ANNUM_NO,
         PRINCIPAL_PAYMENT_TYPE_CD,
         PRINCIPAL_PAYMENT_AMT,
         RATE_POLICY_ID,
         SPREAD_RT,
         DISCOUNT_SPREAD_RT,
         INITIAL_CONTRACT_RT,
         FIXED_MONTHLY_PREPAYMENT_RT,
         CAPITAL_ALLOCATION_ID,
         CAPITAL_COST_ID,
         SEGMENT_ID,
         NEAR_BRANCH_FINANCIAL_UNIT_ID,
         STATEMENT_OPT_FLG,
         VALUE_SCALING_FACTOR_RT,
         INTERNAL_REPORTING_CATEGORY_CD,
         CONVEXITY_ADJUSTMENT_FLG,
         ARREARS_PAYMENT_CD,
         QUANTO_FEATURE_ID,
         CASH_INTENSIVE_BUSINESS_FLG,
         LETTER_OF_CREDIT_ONFILE_FLG,
         TRADE_FINANCE_FLG,
         ANNUITY_PAYMENT_TYPE_CD,
         INTEREST_PAYMENT_TYPE_CD,
         INTEREST_PAYMENT_TIME_FREQ_CD,
         LIQUIDITY_CATEGORY_TYPE_CD,
         HOLIDAY_DATE_ROLL_CONV_CD,
         WEEKEND_DATE_ROLL_CONV_CD,
         EXPENSE_ALLOCATION_ID,
         FIRST_INTEREST_PAYMENT_DT,
         LAST_INTEREST_PAYMENT_DT,
         IRB_DUMMY_TYPE_CD,
         IRB_SRC_ACCOUNT_ID,
         BRCA,
         FINANCIAL_INSTRUMENT_TYPE_CD
   from work_ia.FINANCIAL_ACCOUNT_FRA_BK
   ;
quit;

%let SYSLAST = work.WIRP6J2;

%let dbxrc = %eval(%sysfunc(exist(work_ia.FINANCIAL_ACCOUNT_DCD_BK, DATA)) or 
      %sysfunc(exist(work_ia.FINANCIAL_ACCOUNT_DCD_BK, VIEW))); 

/*---- Map the columns  ----*/ 
proc datasets lib = work nolist nowarn memtype = (data view);
   delete WIRP6MC;
quit;

%put %str(NOTE: Mapping columns ...);
proc sql;
   create view work.WIRP6MC as
      select
         ACCOUNT_ID,
         VALID_FROM_DTTM,
         VALID_TO_DTTM,
         SOURCE_SYSTEM_CD,
         ACCOUNT_REGISTRATION_NM,
         ALTERNATE_ACCOUNT_NM,
         FINANCIAL_ACCOUNT_TYPE_CD,
         AUTO_DEBIT_ACCOUNT_TYPE_CD,
         ACCOUNT_REGISTRATION_TYPE_CD,
         ACCOUNT_STATUS_CD,
         OPEN_DT,
         CLOSE_DT,
         CLOSE_REASON_CD,
         ACCOUNT_TAX_ID,
         EXPECTED_LOSS_PCT,
         INDIVIDUAL_ORGANIZATION_CD,
         SOURCE_CD,
         OPENING_CHANNEL_CD,
         PREFERRED_CHANNEL_CD,
         CURRENCY_CD,
         PRIMARY_PHONE_NO,
         PRIMARY_PHONE_TYPE_CD,
         SECONDARY_PHONE_NO,
         SECONDARY_PHONE_TYPE_CD,
         MAILABLE_FLG,
         TELEPHONABLE_FLG,
         EMAIL_FLG,
         SMS_FLG,
         DO_NOT_CONTACT_FLG,
         EMPLOYEE_RK,
         CURRENCY_BASED_ACCOUNT_FLG,
         FEE_BASED_FLG,
         ANNUAL_FEES_AMT,
         MONTHLY_FEES_AMT,
         CAMPAIGN_CD,
         COMMUNICATION_CD,
         REGISTERED_ONLINE_DT,
         FIRST_LOGIN_DT,
         ONLINE_BILL_PAYMENT_FLG,
         ID_VERIFICATION_TYPE_CD,
         PREVIOUS_ACCOUNT_ID,
         OPEN_BRANCH_FINANCIAL_UNIT_ID,
         PRIM_BRANCH_FINANCIAL_UNIT_ID,
         FINANCIAL_APPLICATION_ID,
         CREDIT_FACILITY_ID,
         FUTURE_MARGIN_INCOME_AMT,
         IN_DEFAULT_FLG,
         FINANCIAL_BOOK_ID,
         IRRECOVERABLE_FLG,
         OWNED_BY_INTERNAL_ORG_ID,
         PREVIOUS_BANK_EXTERNAL_ORG_ID,
         NETTING_SET_ID,
         REVOLVING_FLG,
         SOURCE_CHANNEL_CD,
         GRACE_PERIOD_DAYS_CNT,
         REMARGINING_DAYS_CNT,
         FINANCIAL_CALENDAR_ID,
         DAY_BASIS_CD,
         PORTFOLIO_ID,
         SECURITIZATION_POOL_ID,
         RECEIVABLES_POOL_ID,
         ACCOUNT_USAGE_TYPE_CD,
         RISK_ALARM_FLG,
         LOW_PROFITABILITY_FLG,
         ACCOUNT_LIFECYCLE_STG_CD,
         ATTRITION_ALARM_FLG,
         BALANCE_FROZEN_FLG,
         BALANCE_FROZEN_DT,
         ACCOUNT_BLOCK_REASON_CD,
         TAXATION_STATE_CD,
         EFFECTIVE_MATURITY_YEAR_NO,
         GL_ACCOUNT_ID,
         FROM_OTHER_INSTITUTION_FLG,
         ACCOUNT_RENEWAL_CNT,
         BALANCE_TRANSFER_DT,
         BALANCE_TRANSFER_AMT,
         BALANCE_TRANSFER_CNT,
         BASE_LONG_TERM_APR_RT,
         BROKER_FLG,
         MULT_RATE_FLG,
         AUTO_DEBIT_ACCOUNT_NO,
         WORST_STATUS_LAST_12_MTH_CD,
         WORST_STATUS_LAST_12_MTH_DT,
         BALANCE_TRNSF_OTHER_ACCT_CNT,
         EFFECTIVE_FROM_DTTM,
         EFFECTIVE_TO_DTTM,
         COUNTERPARTY_ID,
         INSURED_BY_COUNTERPARTY_ID,
         STATEMENT_FREQUENCY_CD,
         SECURITY_DEPOSIT_AMT,
         SECURITY_DEPOSIT_REFUND_AMT,
         FIRST_PAYMENT_DT,
         LAST_PAYMENT_DT,
         FIRST_RESET_DT,
         LAST_RESET_DT,
         RESETS_PER_ANNUM_NO,
         PRINCIPAL_PAYMENT_TYPE_CD,
         PRINCIPAL_PAYMENT_AMT,
         RATE_POLICY_ID,
         SPREAD_RT,
         DISCOUNT_SPREAD_RT,
         INITIAL_CONTRACT_RT,
         FIXED_MONTHLY_PREPAYMENT_RT,
         CAPITAL_ALLOCATION_ID,
         CAPITAL_COST_ID,
         SEGMENT_ID,
         NEAR_BRANCH_FINANCIAL_UNIT_ID,
         STATEMENT_OPT_FLG,
         VALUE_SCALING_FACTOR_RT,
         INTERNAL_REPORTING_CATEGORY_CD,
         CONVEXITY_ADJUSTMENT_FLG,
         ARREARS_PAYMENT_CD,
         QUANTO_FEATURE_ID,
         CASH_INTENSIVE_BUSINESS_FLG,
         LETTER_OF_CREDIT_ONFILE_FLG,
         TRADE_FINANCE_FLG,
         ANNUITY_PAYMENT_TYPE_CD,
         INTEREST_PAYMENT_TYPE_CD,
         INTEREST_PAYMENT_TIME_FREQ_CD,
         LIQUIDITY_CATEGORY_TYPE_CD,
         HOLIDAY_DATE_ROLL_CONV_CD,
         WEEKEND_DATE_ROLL_CONV_CD,
         EXPENSE_ALLOCATION_ID,
         FIRST_INTEREST_PAYMENT_DT,
         LAST_INTEREST_PAYMENT_DT,
         IRB_DUMMY_TYPE_CD,
         IRB_SRC_ACCOUNT_ID,
         BRCA,
         FINANCIAL_INSTRUMENT_TYPE_CD
   from work_ia.FINANCIAL_ACCOUNT_DCD_BK
   ;
quit;

%let SYSLAST = work.WIRP6MC;

proc datasets lib = work nolist nowarn memtype = (data view);
   delete WXB5Q7Z;
quit;

data work.WXB5Q7Z / view=work.WXB5Q7Z;
   set work.WIRP630
       work.WIRP64G
       work.WIRP65P
       work_ia.FINANCIAL_ACCOUNT_OPT_BK
       work.WIRP67D
       work.WIRP68P
       work.WIRP6BM
       work_ia.FINANCIAL_ACCOUNT_CIS_BK
       work.WIRP6FU
       work.WIRP6J2
       work.WIRP6MC;
   keep ACCOUNT_ID VALID_FROM_DTTM VALID_TO_DTTM SOURCE_SYSTEM_CD 
    ACCOUNT_REGISTRATION_NM ALTERNATE_ACCOUNT_NM FINANCIAL_ACCOUNT_TYPE_CD 
    AUTO_DEBIT_ACCOUNT_TYPE_CD ACCOUNT_REGISTRATION_TYPE_CD ACCOUNT_STATUS_CD 
    OPEN_DT CLOSE_DT CLOSE_REASON_CD ACCOUNT_TAX_ID EXPECTED_LOSS_PCT 
    INDIVIDUAL_ORGANIZATION_CD SOURCE_CD OPENING_CHANNEL_CD PREFERRED_CHANNEL_CD 
    CURRENCY_CD PRIMARY_PHONE_NO PRIMARY_PHONE_TYPE_CD SECONDARY_PHONE_NO 
    SECONDARY_PHONE_TYPE_CD MAILABLE_FLG TELEPHONABLE_FLG EMAIL_FLG SMS_FLG 
    DO_NOT_CONTACT_FLG EMPLOYEE_RK CURRENCY_BASED_ACCOUNT_FLG FEE_BASED_FLG 
    ANNUAL_FEES_AMT MONTHLY_FEES_AMT CAMPAIGN_CD COMMUNICATION_CD 
    REGISTERED_ONLINE_DT FIRST_LOGIN_DT ONLINE_BILL_PAYMENT_FLG 
    ID_VERIFICATION_TYPE_CD PREVIOUS_ACCOUNT_ID OPEN_BRANCH_FINANCIAL_UNIT_ID 
    PRIM_BRANCH_FINANCIAL_UNIT_ID FINANCIAL_APPLICATION_ID CREDIT_FACILITY_ID 
    FUTURE_MARGIN_INCOME_AMT IN_DEFAULT_FLG FINANCIAL_BOOK_ID IRRECOVERABLE_FLG 
    OWNED_BY_INTERNAL_ORG_ID PREVIOUS_BANK_EXTERNAL_ORG_ID NETTING_SET_ID 
    REVOLVING_FLG SOURCE_CHANNEL_CD GRACE_PERIOD_DAYS_CNT REMARGINING_DAYS_CNT 
    FINANCIAL_CALENDAR_ID DAY_BASIS_CD PORTFOLIO_ID SECURITIZATION_POOL_ID 
    RECEIVABLES_POOL_ID ACCOUNT_USAGE_TYPE_CD RISK_ALARM_FLG 
    LOW_PROFITABILITY_FLG ACCOUNT_LIFECYCLE_STG_CD ATTRITION_ALARM_FLG 
    BALANCE_FROZEN_FLG BALANCE_FROZEN_DT ACCOUNT_BLOCK_REASON_CD 
    TAXATION_STATE_CD EFFECTIVE_MATURITY_YEAR_NO GL_ACCOUNT_ID 
    FROM_OTHER_INSTITUTION_FLG ACCOUNT_RENEWAL_CNT BALANCE_TRANSFER_DT 
    BALANCE_TRANSFER_AMT BALANCE_TRANSFER_CNT BASE_LONG_TERM_APR_RT BROKER_FLG 
    MULT_RATE_FLG AUTO_DEBIT_ACCOUNT_NO WORST_STATUS_LAST_12_MTH_CD 
    WORST_STATUS_LAST_12_MTH_DT BALANCE_TRNSF_OTHER_ACCT_CNT EFFECTIVE_FROM_DTTM 
    EFFECTIVE_TO_DTTM COUNTERPARTY_ID INSURED_BY_COUNTERPARTY_ID 
    STATEMENT_FREQUENCY_CD SECURITY_DEPOSIT_AMT SECURITY_DEPOSIT_REFUND_AMT 
    FIRST_PAYMENT_DT LAST_PAYMENT_DT FIRST_RESET_DT LAST_RESET_DT 
    RESETS_PER_ANNUM_NO PRINCIPAL_PAYMENT_TYPE_CD PRINCIPAL_PAYMENT_AMT 
    RATE_POLICY_ID SPREAD_RT DISCOUNT_SPREAD_RT INITIAL_CONTRACT_RT 
    FIXED_MONTHLY_PREPAYMENT_RT CAPITAL_ALLOCATION_ID CAPITAL_COST_ID SEGMENT_ID 
    NEAR_BRANCH_FINANCIAL_UNIT_ID STATEMENT_OPT_FLG VALUE_SCALING_FACTOR_RT 
    INTERNAL_REPORTING_CATEGORY_CD CONVEXITY_ADJUSTMENT_FLG ARREARS_PAYMENT_CD 
    QUANTO_FEATURE_ID CASH_INTENSIVE_BUSINESS_FLG LETTER_OF_CREDIT_ONFILE_FLG 
    TRADE_FINANCE_FLG ANNUITY_PAYMENT_TYPE_CD INTEREST_PAYMENT_TYPE_CD 
    INTEREST_PAYMENT_TIME_FREQ_CD LIQUIDITY_CATEGORY_TYPE_CD 
    HOLIDAY_DATE_ROLL_CONV_CD WEEKEND_DATE_ROLL_CONV_CD EXPENSE_ALLOCATION_ID 
    FIRST_INTEREST_PAYMENT_DT LAST_INTEREST_PAYMENT_DT IRB_DUMMY_TYPE_CD 
    IRB_SRC_ACCOUNT_ID BRCA FINANCIAL_INSTRUMENT_TYPE_CD SETTLEMENT_TYPE_CD; 
run;

%rcSet(&syserr); 



/**  Step end Append **/

/*==========================================================================* 
 * Step:            Генерация BK                          A5Y50FNE.AQ0008G7 * 
 * Transform:       Генерация BK                                            * 
 * Description:                                                             * 
 *                                                                          * 
 * Source Table:    Append - work.WXB5Q7Z                 A5Y50FNE.AO0004S9 * 
 * Target Table:    Генерация BKtpOut - work.W3AUGJV      A5Y50FNE.AO0004SA * 
 *==========================================================================*/ 

%let transformID = %quote(A5Y50FNE.AQ0008G7);
%let trans_rc = 0;
%let etls_stepStartTime = %sysfunc(datetime(), datetime20.); 

%let etls_recnt = -1;
%let SYSLAST = %nrquote(work.WXB5Q7Z); 

%let _INPUT_count = 1; 
%let _INPUT = work.WXB5Q7Z;
%let _INPUT_connect = ;
%let _INPUT_engine = ;
%let _INPUT_memtype = VIEW;
%let _INPUT_options = %nrquote();
%let _INPUT_alter = %nrquote();
%let _INPUT_path = %nrquote(/Append_A5Y50FNE.AO0004S9%(WorkTable%));
%let _INPUT_type = 1;
%let _INPUT_label = %nrquote();

%let tpIn = work.WXB5Q7Z;
%let tpIn_connect = ;
%let tpIn_engine = ;
%let tpIn_memtype = VIEW;
%let tpIn_options = %nrquote();
%let tpIn_alter = %nrquote();
%let tpIn_path = %nrquote(/Append_A5Y50FNE.AO0004S9%(WorkTable%));
%let tpIn_type = 1;
%let tpIn_label = %nrquote();

%let _OUTPUT_count = 1; 
%let _OUTPUT = work.W3AUGJV;
%let _OUTPUT_connect = ;
%let _OUTPUT_engine = ;
%let _OUTPUT_memtype = DATA;
%let _OUTPUT_options = %nrquote();
%let _OUTPUT_alter = %nrquote();
%let _OUTPUT_path = %nrquote(/Генерация BKtpOut_A5Y50FNE.AO0004SA%(WorkTable%));
%let _OUTPUT_type = 1;
%let _OUTPUT_label = %nrquote();
/* List of target columns to keep  */ 
%let _OUTPUT_keep = ACCOUNT_ID VALID_FROM_DTTM VALID_TO_DTTM SOURCE_SYSTEM_CD 
        ACCOUNT_REGISTRATION_NM ALTERNATE_ACCOUNT_NM FINANCIAL_ACCOUNT_TYPE_CD 
        AUTO_DEBIT_ACCOUNT_TYPE_CD ACCOUNT_REGISTRATION_TYPE_CD 
        ACCOUNT_STATUS_CD OPEN_DT CLOSE_DT CLOSE_REASON_CD ACCOUNT_TAX_ID 
        EXPECTED_LOSS_PCT INDIVIDUAL_ORGANIZATION_CD SOURCE_CD 
        OPENING_CHANNEL_CD PREFERRED_CHANNEL_CD CURRENCY_CD PRIMARY_PHONE_NO 
        PRIMARY_PHONE_TYPE_CD SECONDARY_PHONE_NO SECONDARY_PHONE_TYPE_CD 
        MAILABLE_FLG TELEPHONABLE_FLG EMAIL_FLG SMS_FLG DO_NOT_CONTACT_FLG 
        EMPLOYEE_RK CURRENCY_BASED_ACCOUNT_FLG FEE_BASED_FLG ANNUAL_FEES_AMT 
        MONTHLY_FEES_AMT CAMPAIGN_CD COMMUNICATION_CD REGISTERED_ONLINE_DT 
        FIRST_LOGIN_DT ONLINE_BILL_PAYMENT_FLG ID_VERIFICATION_TYPE_CD 
        PREVIOUS_ACCOUNT_ID OPEN_BRANCH_FINANCIAL_UNIT_ID 
        PRIM_BRANCH_FINANCIAL_UNIT_ID FINANCIAL_APPLICATION_ID 
        CREDIT_FACILITY_ID FUTURE_MARGIN_INCOME_AMT IN_DEFAULT_FLG 
        FINANCIAL_BOOK_ID IRRECOVERABLE_FLG OWNED_BY_INTERNAL_ORG_ID 
        PREVIOUS_BANK_EXTERNAL_ORG_ID NETTING_SET_ID REVOLVING_FLG 
        SOURCE_CHANNEL_CD GRACE_PERIOD_DAYS_CNT REMARGINING_DAYS_CNT 
        FINANCIAL_CALENDAR_ID DAY_BASIS_CD PORTFOLIO_ID SECURITIZATION_POOL_ID 
        RECEIVABLES_POOL_ID ACCOUNT_USAGE_TYPE_CD RISK_ALARM_FLG 
        LOW_PROFITABILITY_FLG ACCOUNT_LIFECYCLE_STG_CD ATTRITION_ALARM_FLG 
        BALANCE_FROZEN_FLG BALANCE_FROZEN_DT ACCOUNT_BLOCK_REASON_CD 
        TAXATION_STATE_CD EFFECTIVE_MATURITY_YEAR_NO GL_ACCOUNT_ID 
        FROM_OTHER_INSTITUTION_FLG ACCOUNT_RENEWAL_CNT BALANCE_TRANSFER_DT 
        BALANCE_TRANSFER_AMT BALANCE_TRANSFER_CNT BASE_LONG_TERM_APR_RT 
        BROKER_FLG MULT_RATE_FLG AUTO_DEBIT_ACCOUNT_NO 
        WORST_STATUS_LAST_12_MTH_CD WORST_STATUS_LAST_12_MTH_DT 
        BALANCE_TRNSF_OTHER_ACCT_CNT EFFECTIVE_FROM_DTTM EFFECTIVE_TO_DTTM 
        COUNTERPARTY_ID INSURED_BY_COUNTERPARTY_ID STATEMENT_FREQUENCY_CD 
        SECURITY_DEPOSIT_AMT SECURITY_DEPOSIT_REFUND_AMT FIRST_PAYMENT_DT 
        LAST_PAYMENT_DT FIRST_RESET_DT LAST_RESET_DT RESETS_PER_ANNUM_NO 
        PRINCIPAL_PAYMENT_TYPE_CD PRINCIPAL_PAYMENT_AMT RATE_POLICY_ID 
        SPREAD_RT DISCOUNT_SPREAD_RT INITIAL_CONTRACT_RT 
        FIXED_MONTHLY_PREPAYMENT_RT CAPITAL_ALLOCATION_ID CAPITAL_COST_ID 
        SEGMENT_ID NEAR_BRANCH_FINANCIAL_UNIT_ID STATEMENT_OPT_FLG 
        VALUE_SCALING_FACTOR_RT INTERNAL_REPORTING_CATEGORY_CD 
        CONVEXITY_ADJUSTMENT_FLG ARREARS_PAYMENT_CD QUANTO_FEATURE_ID 
        CASH_INTENSIVE_BUSINESS_FLG LETTER_OF_CREDIT_ONFILE_FLG 
        TRADE_FINANCE_FLG ANNUITY_PAYMENT_TYPE_CD INTEREST_PAYMENT_TYPE_CD 
        INTEREST_PAYMENT_TIME_FREQ_CD LIQUIDITY_CATEGORY_TYPE_CD 
        HOLIDAY_DATE_ROLL_CONV_CD WEEKEND_DATE_ROLL_CONV_CD 
        EXPENSE_ALLOCATION_ID FIRST_INTEREST_PAYMENT_DT 
        LAST_INTEREST_PAYMENT_DT IRB_DUMMY_TYPE_CD IRB_SRC_ACCOUNT_ID BRCA 
        MID_INTERNAL_ORG_ID FINANCIAL_INSTRUMENT_TYPE_CD SETTLEMENT_TYPE_CD;

%let tpOut = work.W3AUGJV;
%let tpOut_connect = ;
%let tpOut_engine = ;
%let tpOut_memtype = DATA;
%let tpOut_options = %nrquote();
%let tpOut_alter = %nrquote();
%let tpOut_path = %nrquote(/Генерация BKtpOut_A5Y50FNE.AO0004SA%(WorkTable%));
%let tpOut_type = 1;
%let tpOut_label = %nrquote();
/* List of target columns to keep  */ 
%let tpOut_keep = ACCOUNT_ID VALID_FROM_DTTM VALID_TO_DTTM SOURCE_SYSTEM_CD 
        ACCOUNT_REGISTRATION_NM ALTERNATE_ACCOUNT_NM FINANCIAL_ACCOUNT_TYPE_CD 
        AUTO_DEBIT_ACCOUNT_TYPE_CD ACCOUNT_REGISTRATION_TYPE_CD 
        ACCOUNT_STATUS_CD OPEN_DT CLOSE_DT CLOSE_REASON_CD ACCOUNT_TAX_ID 
        EXPECTED_LOSS_PCT INDIVIDUAL_ORGANIZATION_CD SOURCE_CD 
        OPENING_CHANNEL_CD PREFERRED_CHANNEL_CD CURRENCY_CD PRIMARY_PHONE_NO 
        PRIMARY_PHONE_TYPE_CD SECONDARY_PHONE_NO SECONDARY_PHONE_TYPE_CD 
        MAILABLE_FLG TELEPHONABLE_FLG EMAIL_FLG SMS_FLG DO_NOT_CONTACT_FLG 
        EMPLOYEE_RK CURRENCY_BASED_ACCOUNT_FLG FEE_BASED_FLG ANNUAL_FEES_AMT 
        MONTHLY_FEES_AMT CAMPAIGN_CD COMMUNICATION_CD REGISTERED_ONLINE_DT 
        FIRST_LOGIN_DT ONLINE_BILL_PAYMENT_FLG ID_VERIFICATION_TYPE_CD 
        PREVIOUS_ACCOUNT_ID OPEN_BRANCH_FINANCIAL_UNIT_ID 
        PRIM_BRANCH_FINANCIAL_UNIT_ID FINANCIAL_APPLICATION_ID 
        CREDIT_FACILITY_ID FUTURE_MARGIN_INCOME_AMT IN_DEFAULT_FLG 
        FINANCIAL_BOOK_ID IRRECOVERABLE_FLG OWNED_BY_INTERNAL_ORG_ID 
        PREVIOUS_BANK_EXTERNAL_ORG_ID NETTING_SET_ID REVOLVING_FLG 
        SOURCE_CHANNEL_CD GRACE_PERIOD_DAYS_CNT REMARGINING_DAYS_CNT 
        FINANCIAL_CALENDAR_ID DAY_BASIS_CD PORTFOLIO_ID SECURITIZATION_POOL_ID 
        RECEIVABLES_POOL_ID ACCOUNT_USAGE_TYPE_CD RISK_ALARM_FLG 
        LOW_PROFITABILITY_FLG ACCOUNT_LIFECYCLE_STG_CD ATTRITION_ALARM_FLG 
        BALANCE_FROZEN_FLG BALANCE_FROZEN_DT ACCOUNT_BLOCK_REASON_CD 
        TAXATION_STATE_CD EFFECTIVE_MATURITY_YEAR_NO GL_ACCOUNT_ID 
        FROM_OTHER_INSTITUTION_FLG ACCOUNT_RENEWAL_CNT BALANCE_TRANSFER_DT 
        BALANCE_TRANSFER_AMT BALANCE_TRANSFER_CNT BASE_LONG_TERM_APR_RT 
        BROKER_FLG MULT_RATE_FLG AUTO_DEBIT_ACCOUNT_NO 
        WORST_STATUS_LAST_12_MTH_CD WORST_STATUS_LAST_12_MTH_DT 
        BALANCE_TRNSF_OTHER_ACCT_CNT EFFECTIVE_FROM_DTTM EFFECTIVE_TO_DTTM 
        COUNTERPARTY_ID INSURED_BY_COUNTERPARTY_ID STATEMENT_FREQUENCY_CD 
        SECURITY_DEPOSIT_AMT SECURITY_DEPOSIT_REFUND_AMT FIRST_PAYMENT_DT 
        LAST_PAYMENT_DT FIRST_RESET_DT LAST_RESET_DT RESETS_PER_ANNUM_NO 
        PRINCIPAL_PAYMENT_TYPE_CD PRINCIPAL_PAYMENT_AMT RATE_POLICY_ID 
        SPREAD_RT DISCOUNT_SPREAD_RT INITIAL_CONTRACT_RT 
        FIXED_MONTHLY_PREPAYMENT_RT CAPITAL_ALLOCATION_ID CAPITAL_COST_ID 
        SEGMENT_ID NEAR_BRANCH_FINANCIAL_UNIT_ID STATEMENT_OPT_FLG 
        VALUE_SCALING_FACTOR_RT INTERNAL_REPORTING_CATEGORY_CD 
        CONVEXITY_ADJUSTMENT_FLG ARREARS_PAYMENT_CD QUANTO_FEATURE_ID 
        CASH_INTENSIVE_BUSINESS_FLG LETTER_OF_CREDIT_ONFILE_FLG 
        TRADE_FINANCE_FLG ANNUITY_PAYMENT_TYPE_CD INTEREST_PAYMENT_TYPE_CD 
        INTEREST_PAYMENT_TIME_FREQ_CD LIQUIDITY_CATEGORY_TYPE_CD 
        HOLIDAY_DATE_ROLL_CONV_CD WEEKEND_DATE_ROLL_CONV_CD 
        EXPENSE_ALLOCATION_ID FIRST_INTEREST_PAYMENT_DT 
        LAST_INTEREST_PAYMENT_DT IRB_DUMMY_TYPE_CD IRB_SRC_ACCOUNT_ID BRCA 
        MID_INTERNAL_ORG_ID FINANCIAL_INSTRUMENT_TYPE_CD SETTLEMENT_TYPE_CD;


proc datasets lib=work nolist nowarn memtype = (data view);
   delete W3AUGJV;
quit;

%let tpBK_count = %nrquote(0);
%let tpBK = ;
%let tpOptionalBK_count = %nrquote(1);
%let tpOptionalBK = %nrquote(INTERNAL_ORG_MID                );
%let tpOptionalBK1 = %nrquote(INTERNAL_ORG_MID                );

/* List of target columns to keep  */ 
%let _keep = ACCOUNT_ID VALID_FROM_DTTM VALID_TO_DTTM SOURCE_SYSTEM_CD 
        ACCOUNT_REGISTRATION_NM ALTERNATE_ACCOUNT_NM FINANCIAL_ACCOUNT_TYPE_CD 
        AUTO_DEBIT_ACCOUNT_TYPE_CD ACCOUNT_REGISTRATION_TYPE_CD 
        ACCOUNT_STATUS_CD OPEN_DT CLOSE_DT CLOSE_REASON_CD ACCOUNT_TAX_ID 
        EXPECTED_LOSS_PCT INDIVIDUAL_ORGANIZATION_CD SOURCE_CD 
        OPENING_CHANNEL_CD PREFERRED_CHANNEL_CD CURRENCY_CD PRIMARY_PHONE_NO 
        PRIMARY_PHONE_TYPE_CD SECONDARY_PHONE_NO SECONDARY_PHONE_TYPE_CD 
        MAILABLE_FLG TELEPHONABLE_FLG EMAIL_FLG SMS_FLG DO_NOT_CONTACT_FLG 
        EMPLOYEE_RK CURRENCY_BASED_ACCOUNT_FLG FEE_BASED_FLG ANNUAL_FEES_AMT 
        MONTHLY_FEES_AMT CAMPAIGN_CD COMMUNICATION_CD REGISTERED_ONLINE_DT 
        FIRST_LOGIN_DT ONLINE_BILL_PAYMENT_FLG ID_VERIFICATION_TYPE_CD 
        PREVIOUS_ACCOUNT_ID OPEN_BRANCH_FINANCIAL_UNIT_ID 
        PRIM_BRANCH_FINANCIAL_UNIT_ID FINANCIAL_APPLICATION_ID 
        CREDIT_FACILITY_ID FUTURE_MARGIN_INCOME_AMT IN_DEFAULT_FLG 
        FINANCIAL_BOOK_ID IRRECOVERABLE_FLG OWNED_BY_INTERNAL_ORG_ID 
        PREVIOUS_BANK_EXTERNAL_ORG_ID NETTING_SET_ID REVOLVING_FLG 
        SOURCE_CHANNEL_CD GRACE_PERIOD_DAYS_CNT REMARGINING_DAYS_CNT 
        FINANCIAL_CALENDAR_ID DAY_BASIS_CD PORTFOLIO_ID SECURITIZATION_POOL_ID 
        RECEIVABLES_POOL_ID ACCOUNT_USAGE_TYPE_CD RISK_ALARM_FLG 
        LOW_PROFITABILITY_FLG ACCOUNT_LIFECYCLE_STG_CD ATTRITION_ALARM_FLG 
        BALANCE_FROZEN_FLG BALANCE_FROZEN_DT ACCOUNT_BLOCK_REASON_CD 
        TAXATION_STATE_CD EFFECTIVE_MATURITY_YEAR_NO GL_ACCOUNT_ID 
        FROM_OTHER_INSTITUTION_FLG ACCOUNT_RENEWAL_CNT BALANCE_TRANSFER_DT 
        BALANCE_TRANSFER_AMT BALANCE_TRANSFER_CNT BASE_LONG_TERM_APR_RT 
        BROKER_FLG MULT_RATE_FLG AUTO_DEBIT_ACCOUNT_NO 
        WORST_STATUS_LAST_12_MTH_CD WORST_STATUS_LAST_12_MTH_DT 
        BALANCE_TRNSF_OTHER_ACCT_CNT EFFECTIVE_FROM_DTTM EFFECTIVE_TO_DTTM 
        COUNTERPARTY_ID INSURED_BY_COUNTERPARTY_ID STATEMENT_FREQUENCY_CD 
        SECURITY_DEPOSIT_AMT SECURITY_DEPOSIT_REFUND_AMT FIRST_PAYMENT_DT 
        LAST_PAYMENT_DT FIRST_RESET_DT LAST_RESET_DT RESETS_PER_ANNUM_NO 
        PRINCIPAL_PAYMENT_TYPE_CD PRINCIPAL_PAYMENT_AMT RATE_POLICY_ID 
        SPREAD_RT DISCOUNT_SPREAD_RT INITIAL_CONTRACT_RT 
        FIXED_MONTHLY_PREPAYMENT_RT CAPITAL_ALLOCATION_ID CAPITAL_COST_ID 
        SEGMENT_ID NEAR_BRANCH_FINANCIAL_UNIT_ID STATEMENT_OPT_FLG 
        VALUE_SCALING_FACTOR_RT INTERNAL_REPORTING_CATEGORY_CD 
        CONVEXITY_ADJUSTMENT_FLG ARREARS_PAYMENT_CD QUANTO_FEATURE_ID 
        CASH_INTENSIVE_BUSINESS_FLG LETTER_OF_CREDIT_ONFILE_FLG 
        TRADE_FINANCE_FLG ANNUITY_PAYMENT_TYPE_CD INTEREST_PAYMENT_TYPE_CD 
        INTEREST_PAYMENT_TIME_FREQ_CD LIQUIDITY_CATEGORY_TYPE_CD 
        HOLIDAY_DATE_ROLL_CONV_CD WEEKEND_DATE_ROLL_CONV_CD 
        EXPENSE_ALLOCATION_ID FIRST_INTEREST_PAYMENT_DT 
        LAST_INTEREST_PAYMENT_DT IRB_DUMMY_TYPE_CD IRB_SRC_ACCOUNT_ID BRCA 
        MID_INTERNAL_ORG_ID FINANCIAL_INSTRUMENT_TYPE_CD SETTLEMENT_TYPE_CD;
/* List of target columns to keep  */ 
%let keep = ACCOUNT_ID VALID_FROM_DTTM VALID_TO_DTTM SOURCE_SYSTEM_CD 
        ACCOUNT_REGISTRATION_NM ALTERNATE_ACCOUNT_NM FINANCIAL_ACCOUNT_TYPE_CD 
        AUTO_DEBIT_ACCOUNT_TYPE_CD ACCOUNT_REGISTRATION_TYPE_CD 
        ACCOUNT_STATUS_CD OPEN_DT CLOSE_DT CLOSE_REASON_CD ACCOUNT_TAX_ID 
        EXPECTED_LOSS_PCT INDIVIDUAL_ORGANIZATION_CD SOURCE_CD 
        OPENING_CHANNEL_CD PREFERRED_CHANNEL_CD CURRENCY_CD PRIMARY_PHONE_NO 
        PRIMARY_PHONE_TYPE_CD SECONDARY_PHONE_NO SECONDARY_PHONE_TYPE_CD 
        MAILABLE_FLG TELEPHONABLE_FLG EMAIL_FLG SMS_FLG DO_NOT_CONTACT_FLG 
        EMPLOYEE_RK CURRENCY_BASED_ACCOUNT_FLG FEE_BASED_FLG ANNUAL_FEES_AMT 
        MONTHLY_FEES_AMT CAMPAIGN_CD COMMUNICATION_CD REGISTERED_ONLINE_DT 
        FIRST_LOGIN_DT ONLINE_BILL_PAYMENT_FLG ID_VERIFICATION_TYPE_CD 
        PREVIOUS_ACCOUNT_ID OPEN_BRANCH_FINANCIAL_UNIT_ID 
        PRIM_BRANCH_FINANCIAL_UNIT_ID FINANCIAL_APPLICATION_ID 
        CREDIT_FACILITY_ID FUTURE_MARGIN_INCOME_AMT IN_DEFAULT_FLG 
        FINANCIAL_BOOK_ID IRRECOVERABLE_FLG OWNED_BY_INTERNAL_ORG_ID 
        PREVIOUS_BANK_EXTERNAL_ORG_ID NETTING_SET_ID REVOLVING_FLG 
        SOURCE_CHANNEL_CD GRACE_PERIOD_DAYS_CNT REMARGINING_DAYS_CNT 
        FINANCIAL_CALENDAR_ID DAY_BASIS_CD PORTFOLIO_ID SECURITIZATION_POOL_ID 
        RECEIVABLES_POOL_ID ACCOUNT_USAGE_TYPE_CD RISK_ALARM_FLG 
        LOW_PROFITABILITY_FLG ACCOUNT_LIFECYCLE_STG_CD ATTRITION_ALARM_FLG 
        BALANCE_FROZEN_FLG BALANCE_FROZEN_DT ACCOUNT_BLOCK_REASON_CD 
        TAXATION_STATE_CD EFFECTIVE_MATURITY_YEAR_NO GL_ACCOUNT_ID 
        FROM_OTHER_INSTITUTION_FLG ACCOUNT_RENEWAL_CNT BALANCE_TRANSFER_DT 
        BALANCE_TRANSFER_AMT BALANCE_TRANSFER_CNT BASE_LONG_TERM_APR_RT 
        BROKER_FLG MULT_RATE_FLG AUTO_DEBIT_ACCOUNT_NO 
        WORST_STATUS_LAST_12_MTH_CD WORST_STATUS_LAST_12_MTH_DT 
        BALANCE_TRNSF_OTHER_ACCT_CNT EFFECTIVE_FROM_DTTM EFFECTIVE_TO_DTTM 
        COUNTERPARTY_ID INSURED_BY_COUNTERPARTY_ID STATEMENT_FREQUENCY_CD 
        SECURITY_DEPOSIT_AMT SECURITY_DEPOSIT_REFUND_AMT FIRST_PAYMENT_DT 
        LAST_PAYMENT_DT FIRST_RESET_DT LAST_RESET_DT RESETS_PER_ANNUM_NO 
        PRINCIPAL_PAYMENT_TYPE_CD PRINCIPAL_PAYMENT_AMT RATE_POLICY_ID 
        SPREAD_RT DISCOUNT_SPREAD_RT INITIAL_CONTRACT_RT 
        FIXED_MONTHLY_PREPAYMENT_RT CAPITAL_ALLOCATION_ID CAPITAL_COST_ID 
        SEGMENT_ID NEAR_BRANCH_FINANCIAL_UNIT_ID STATEMENT_OPT_FLG 
        VALUE_SCALING_FACTOR_RT INTERNAL_REPORTING_CATEGORY_CD 
        CONVEXITY_ADJUSTMENT_FLG ARREARS_PAYMENT_CD QUANTO_FEATURE_ID 
        CASH_INTENSIVE_BUSINESS_FLG LETTER_OF_CREDIT_ONFILE_FLG 
        TRADE_FINANCE_FLG ANNUITY_PAYMENT_TYPE_CD INTEREST_PAYMENT_TYPE_CD 
        INTEREST_PAYMENT_TIME_FREQ_CD LIQUIDITY_CATEGORY_TYPE_CD 
        HOLIDAY_DATE_ROLL_CONV_CD WEEKEND_DATE_ROLL_CONV_CD 
        EXPENSE_ALLOCATION_ID FIRST_INTEREST_PAYMENT_DT 
        LAST_INTEREST_PAYMENT_DT IRB_DUMMY_TYPE_CD IRB_SRC_ACCOUNT_ID BRCA 
        MID_INTERNAL_ORG_ID FINANCIAL_INSTRUMENT_TYPE_CD SETTLEMENT_TYPE_CD;
/*****************************************************************
* ВЕРСИЯ:
*     $Id: transform_generate_bk.sas 4889 2013-04-04 09:14:07Z nesterenok $
*
******************************************************************
* НАЗНАЧЕНИЕ:
*     Генерирует бизнес-ключи в таблице по списку.
*
* ПАРАМЕТРЫ:
*     tpIn                    +  имя входного набора
*     tpBK                    +  список кодов обязательных для генерации бизнес-ключей, разделенный пробелами
*                                Такой бизнес-ключ станет дамми, если заполнены не все поля, его составляющие
*                                FK к ETL_SYS.ETL_BK.BK_CD
*     tpOptionalBK            +  список кодов НЕобязательных для генерации бизнес-ключей, разделенный пробелами
*                                Такой бизнес-ключ останется пустым, если заполнены не все поля, его составляющие
*     tpOut                   +  имя выходного набора
*
******************************************************************/

%macro transform_generate_bk;
   %let tpBK_count         = %unquote(&tpBK_count);
   %let tpOptionalBK_count = %unquote(&tpOptionalBK_count);

   %local lmvDummyRows lmvFieldDummyCount lmvDummyRequired;
   %let lmvDummyRows       = work.tr_gen_bk_dummy_rows;
   %let lmvFieldDummyCount = etl_dummy_count;
   %let lmvDummyRequired   = %eval (&tpBK_count gt 0);

   /* Макросы для генерации одного ключа */
   %macro sm_trans_gen_bk_required;
      %etl_generate_bk (
         mpFieldBK=&bk_field_nm, mpLengthBK=%sysfunc(inputn(&bk_type_cd, bkt_cd_len.)),
         mpColumnList=&bk_column_list_txt, mpFormat=&bk_format_txt,
         mpFieldDummy=&lmvFieldDummy, mpFieldDummyCount=&lmvFieldDummyCount
      );
   %mend;
   %macro sm_trans_gen_bk_optional;
      %etl_generate_bk (
         mpFieldBK=&bk_field_nm, mpLengthBK=%sysfunc(inputn(&bk_type_cd, bkt_cd_len.)),
         mpColumnList=&bk_column_list_txt, mpFormat=&bk_format_txt,
         mpFieldDummy=
      );
   %mend;

   /* Макрос для подстановки в дамми-ключ уникального номера */
   %macro sm_trans_gen_bk_dummy;
      if &lmvFieldDummy gt 0 then do;
         set &lmvDummyIds (keep=OBJECT_ID rename=(OBJECT_ID=&lmvFieldDummy._no)) point=&lmvFieldDummy;
         &bk_field_nm = cats (&bk_field_nm, "_", &lmvFieldDummy._no);

         %error_check;
      end;
   %mend;


   /* Создаем выходной набор итерацией по всем заявленным бизнес-ключам */
   /* Считаем необходимое кол-во дамми-ключей */
   %local lmvBkIndex lmvFieldDummy lmvDummyCount;
   %let lmvDummyCount   = 0;
   data
      %if &lmvDummyRequired %then %do;
         &tpOut (drop= etl_dummy_:)
         &lmvDummyRows
      %end;
      %else %do;
         &tpOut
      %end;
   ;
      set &tpIn end=ds_end;

      /* Генерация необязательных ключей */
      %do lmvBkIndex=1 %to &tpOptionalBK_count;
         %util_loop_data (mpLoopMacro=sm_trans_gen_bk_optional, mpData=ETL_SYS.ETL_BK,
                          mpWhere=BK_CD eq %util_quote(&&tpOptionalBK&lmvBkIndex)
         );
      %end;

      %if &lmvDummyRequired %then %do;
         length &lmvFieldDummyCount 8;
         drop &lmvFieldDummyCount;
         retain &lmvFieldDummyCount 0;

         /* Генерация обязательных ключей */
         %do lmvBkIndex=1 %to &tpBK_count;
            %let lmvFieldDummy = etl_dummy_&lmvBkIndex.;

            %util_loop_data (mpLoopMacro=sm_trans_gen_bk_required, mpData=ETL_SYS.ETL_BK,
                             mpWhere=BK_CD eq %util_quote(&&tpBK&lmvBkIndex)
            );
         %end;

         /* Если в какой-то записи есть дамми, то не выводим ее сразу */
         if sum (of etl_dummy_1-etl_dummy_&tpBK_count) = 0 then
            output &tpOut;
         else do;
            output &lmvDummyRows;
         end;

         if ds_end then call symputx ("lmvDummyCount", &lmvFieldDummyCount);
      %end;
      %else %do;
         output &tpOut;
      %end;
   run;
   %error_check (mpStepType=DATA);

   /* Если дамми нет, то всё */
   %if (not &lmvDummyRequired) or (&lmvDummyCount eq 0) %then %return;


   /* Для каждого дамми генерируем уникальный номер */
   %local lmvDummyIds;
   %let lmvDummyIds = work.tr_gen_bk_dummy_ids;
   %unique_ids (mpIdCount=&lmvDummyCount, mpOut=&lmvDummyIds, mpSequenceName=ETL_DUMMY_SEQ);

   /* Добавляем номер к дамми */
   data &lmvDummyRows._id (drop= etl_dummy_:);
      set &lmvDummyRows;

      %do lmvBkIndex=1 %to &tpBK_count;
         %let lmvFieldDummy = etl_dummy_&lmvBkIndex.;

         %util_loop_data (mpLoopMacro=sm_trans_gen_bk_dummy, mpData=ETL_SYS.ETL_BK,
                          mpWhere=BK_CD eq %util_quote(&&tpBK&lmvBkIndex)
         );
      %end;
   run;
   %error_check (mpStepType=DATA);


   /* Добавляем дамми-строки к выходному набору */
   proc append base=&tpOut data=&lmvDummyRows._id;
   run;
   %error_check (mpStepType=DATA);

%mend transform_generate_bk;

%transform_generate_bk;

%rcSet(&syserr); 
%rcSet(&sysrc); 
%rcSet(&sqlrc); 



/**  Step end Генерация BK **/

/*==========================================================================* 
 * Step:            SQL Join                              A5Y50FNE.AQ0008G8 * 
 * Transform:       Join                                                    * 
 * Description:                                                             * 
 *                                                                          * 
 * Source Tables:   INTERNAL_ORG_BK_BK -                  A5Y50FNE.AE0000R2 * 
 *                   etl_ia.INTERNAL_ORG_BK_BK                              * 
 *                  Генерация BKtpOut - work.W3AUGJV      A5Y50FNE.AO0004SA * 
 * Target Table:    SQL Join - work.WXEVF8C               A5Y50FNE.AO0004SB * 
 *==========================================================================*/ 

%let transformID = %quote(A5Y50FNE.AQ0008G8);
%let trans_rc = 0;
%let etls_stepStartTime = %sysfunc(datetime(), datetime20.); 

%let etls_recnt = 0;
%macro etls_recordCheck; 
   %let etls_recCheckExist = %eval(%sysfunc(exist(etl_ia.INTERNAL_ORG_BK_BK, DATA)) or 
         %sysfunc(exist(etl_ia.INTERNAL_ORG_BK_BK, VIEW))); 
   
   %if (&etls_recCheckExist) %then
   %do;
      proc sql noprint;
         select count(*) into :etls_recnt from etl_ia.INTERNAL_ORG_BK_BK;
      quit;
   %end;
%mend etls_recordCheck;
%etls_recordCheck;

%let SYS_SQL_IP_SPEEDO = Y;
%let SYS_SQL_MAPPUTTO = sas_put;
%let SYS_SQLREDUCEPUT = DBMS;
%global etls_sql_pushDown;
%let etls_sql_pushDown = -1;
option DBIDIRECTEXEC;

proc datasets lib = work nolist nowarn memtype = (data view);
   delete WXEVF8C;
quit;

proc sql;
   create view work.WXEVF8C as
   select
      W3AUGJV.ACCOUNT_ID length = 32   
         format = $32.
         informat = $32.
         label = 'ACCOUNT_ID',
      W3AUGJV.VALID_FROM_DTTM length = 8   
         format = DATETIME20.
         informat = DATETIME20.
         label = 'VALID_FROM_DTTM',
      W3AUGJV.VALID_TO_DTTM length = 8   
         format = DATETIME20.
         informat = DATETIME20.
         label = 'VALID_TO_DTTM',
      W3AUGJV.SOURCE_SYSTEM_CD length = 3   
         format = $3.
         informat = $3.
         label = 'SOURCE_SYSTEM_CD',
      W3AUGJV.ACCOUNT_REGISTRATION_NM length = 100   
         format = $100.
         informat = $100.
         label = 'ACCOUNT_REGISTRATION_NM',
      W3AUGJV.ALTERNATE_ACCOUNT_NM length = 40   
         format = $40.
         informat = $40.
         label = 'ALTERNATE_ACCOUNT_NM',
      W3AUGJV.FINANCIAL_ACCOUNT_TYPE_CD length = 3   
         format = $3.
         informat = $3.
         label = 'FINANCIAL_ACCOUNT_TYPE_CD',
      W3AUGJV.AUTO_DEBIT_ACCOUNT_TYPE_CD length = 3   
         format = $3.
         informat = $3.
         label = 'AUTO_DEBIT_ACCOUNT_TYPE_CD',
      W3AUGJV.ACCOUNT_REGISTRATION_TYPE_CD length = 3   
         format = $3.
         informat = $3.
         label = 'ACCOUNT_REGISTRATION_TYPE_CD',
      W3AUGJV.ACCOUNT_STATUS_CD length = 3   
         format = $3.
         informat = $3.
         label = 'ACCOUNT_STATUS_CD',
      W3AUGJV.OPEN_DT length = 8   
         format = DATETIME20.
         informat = DATETIME20.
         label = 'OPEN_DT',
      W3AUGJV.CLOSE_DT length = 8   
         format = DATETIME20.
         informat = DATETIME20.
         label = 'CLOSE_DT',
      W3AUGJV.CLOSE_REASON_CD length = 3   
         format = $3.
         informat = $3.
         label = 'CLOSE_REASON_CD',
      W3AUGJV.ACCOUNT_TAX_ID length = 32   
         format = $32.
         informat = $32.
         label = 'ACCOUNT_TAX_ID',
      W3AUGJV.EXPECTED_LOSS_PCT length = 8   
         format = 11.4
         informat = 11.4
         label = 'EXPECTED_LOSS_PCT',
      W3AUGJV.INDIVIDUAL_ORGANIZATION_CD length = 3   
         format = $3.
         informat = $3.
         label = 'INDIVIDUAL_ORGANIZATION_CD',
      W3AUGJV.SOURCE_CD length = 5   
         format = $5.
         informat = $5.
         label = 'SOURCE_CD',
      W3AUGJV.OPENING_CHANNEL_CD length = 3   
         format = $3.
         informat = $3.
         label = 'OPENING_CHANNEL_CD',
      W3AUGJV.PREFERRED_CHANNEL_CD length = 3   
         format = $3.
         informat = $3.
         label = 'PREFERRED_CHANNEL_CD',
      W3AUGJV.CURRENCY_CD length = 3   
         format = $3.
         informat = $3.
         label = 'CURRENCY_CD',
      W3AUGJV.PRIMARY_PHONE_NO length = 20   
         format = $20.
         informat = $20.
         label = 'PRIMARY_PHONE_NO',
      W3AUGJV.PRIMARY_PHONE_TYPE_CD length = 3   
         format = $3.
         informat = $3.
         label = 'PRIMARY_PHONE_TYPE_CD',
      W3AUGJV.SECONDARY_PHONE_NO length = 20   
         format = $20.
         informat = $20.
         label = 'SECONDARY_PHONE_NO',
      W3AUGJV.SECONDARY_PHONE_TYPE_CD length = 3   
         format = $3.
         informat = $3.
         label = 'SECONDARY_PHONE_TYPE_CD',
      W3AUGJV.MAILABLE_FLG length = 1   
         format = $1.
         informat = $1.
         label = 'MAILABLE_FLG',
      W3AUGJV.TELEPHONABLE_FLG length = 1   
         format = $1.
         informat = $1.
         label = 'TELEPHONABLE_FLG',
      W3AUGJV.EMAIL_FLG length = 1   
         format = $1.
         informat = $1.
         label = 'EMAIL_FLG',
      W3AUGJV.SMS_FLG length = 1   
         format = $1.
         informat = $1.
         label = 'SMS_FLG',
      W3AUGJV.DO_NOT_CONTACT_FLG length = 1   
         format = $1.
         informat = $1.
         label = 'DO_NOT_CONTACT_FLG',
      W3AUGJV.EMPLOYEE_RK length = 8   
         format = 11.
         informat = 11.
         label = 'EMPLOYEE_RK',
      W3AUGJV.CURRENCY_BASED_ACCOUNT_FLG length = 1   
         format = $1.
         informat = $1.
         label = 'CURRENCY_BASED_ACCOUNT_FLG',
      W3AUGJV.FEE_BASED_FLG length = 1   
         format = $1.
         informat = $1.
         label = 'FEE_BASED_FLG',
      W3AUGJV.ANNUAL_FEES_AMT length = 8   
         format = 20.5
         informat = 20.5
         label = 'ANNUAL_FEES_AMT',
      W3AUGJV.MONTHLY_FEES_AMT length = 8   
         format = 20.5
         informat = 20.5
         label = 'MONTHLY_FEES_AMT',
      W3AUGJV.CAMPAIGN_CD length = 30   
         format = $30.
         informat = $30.
         label = 'CAMPAIGN_CD',
      W3AUGJV.COMMUNICATION_CD length = 30   
         format = $30.
         informat = $30.
         label = 'COMMUNICATION_CD',
      W3AUGJV.REGISTERED_ONLINE_DT length = 8   
         format = DATETIME20.
         informat = DATETIME20.
         label = 'REGISTERED_ONLINE_DT',
      W3AUGJV.FIRST_LOGIN_DT length = 8   
         format = DATETIME20.
         informat = DATETIME20.
         label = 'FIRST_LOGIN_DT',
      W3AUGJV.ONLINE_BILL_PAYMENT_FLG length = 1   
         format = $1.
         informat = $1.
         label = 'ONLINE_BILL_PAYMENT_FLG',
      W3AUGJV.ID_VERIFICATION_TYPE_CD length = 3   
         format = $3.
         informat = $3.
         label = 'ID_VERIFICATION_TYPE_CD',
      W3AUGJV.PREVIOUS_ACCOUNT_ID length = 32   
         format = $32.
         informat = $32.
         label = 'PREVIOUS_ACCOUNT_ID',
      W3AUGJV.OPEN_BRANCH_FINANCIAL_UNIT_ID length = 32   
         format = $32.
         informat = $32.
         label = 'OPEN_BRANCH_FINANCIAL_UNIT_ID',
      INTERNAL_ORG_BK_BK.FINANCIAL_UNIT_ID as PRIM_BRANCH_FINANCIAL_UNIT_ID length = 32   
         format = $32.
         informat = $32.
         label = 'PRIM_BRANCH_FINANCIAL_UNIT_ID',
      W3AUGJV.FINANCIAL_APPLICATION_ID length = 32   
         format = $32.
         informat = $32.
         label = 'FINANCIAL_APPLICATION_ID',
      W3AUGJV.CREDIT_FACILITY_ID length = 40   
         format = $40.
         informat = $40.
         label = 'CREDIT_FACILITY_ID',
      W3AUGJV.FUTURE_MARGIN_INCOME_AMT length = 8   
         format = 20.5
         informat = 20.5
         label = 'FUTURE_MARGIN_INCOME_AMT',
      W3AUGJV.IN_DEFAULT_FLG length = 1   
         format = $1.
         informat = $1.
         label = 'IN_DEFAULT_FLG',
      W3AUGJV.FINANCIAL_BOOK_ID length = 32   
         format = $32.
         informat = $32.
         label = 'FINANCIAL_BOOK_ID',
      W3AUGJV.IRRECOVERABLE_FLG length = 1   
         format = $1.
         informat = $1.
         label = 'IRRECOVERABLE_FLG',
      INTERNAL_ORG_BK_BK.FCC_INTERNAL_ORG_ID as OWNED_BY_INTERNAL_ORG_ID length = 32   
         format = $32.
         informat = $32.
         label = 'OWNED_BY_INTERNAL_ORG_ID',
      W3AUGJV.PREVIOUS_BANK_EXTERNAL_ORG_ID length = 32   
         format = $32.
         informat = $32.
         label = 'PREVIOUS_BANK_EXTERNAL_ORG_ID',
      W3AUGJV.NETTING_SET_ID length = 32   
         format = $32.
         informat = $32.
         label = 'NETTING_SET_ID',
      W3AUGJV.REVOLVING_FLG length = 1   
         format = $1.
         informat = $1.
         label = 'REVOLVING_FLG',
      W3AUGJV.SOURCE_CHANNEL_CD length = 3   
         format = $3.
         informat = $3.
         label = 'SOURCE_CHANNEL_CD',
      W3AUGJV.GRACE_PERIOD_DAYS_CNT length = 8   
         format = 7.
         informat = 7.
         label = 'GRACE_PERIOD_DAYS_CNT',
      W3AUGJV.REMARGINING_DAYS_CNT length = 8   
         format = 7.
         informat = 7.
         label = 'REMARGINING_DAYS_CNT',
      W3AUGJV.FINANCIAL_CALENDAR_ID length = 32   
         format = $32.
         informat = $32.
         label = 'FINANCIAL_CALENDAR_ID',
      W3AUGJV.DAY_BASIS_CD length = 10   
         format = $10.
         informat = $10.
         label = 'DAY_BASIS_CD',
      W3AUGJV.PORTFOLIO_ID length = 32   
         format = $32.
         informat = $32.
         label = 'PORTFOLIO_ID',
      W3AUGJV.SECURITIZATION_POOL_ID length = 32   
         format = $32.
         informat = $32.
         label = 'SECURITIZATION_POOL_ID',
      W3AUGJV.RECEIVABLES_POOL_ID length = 32   
         format = $32.
         informat = $32.
         label = 'RECEIVABLES_POOL_ID',
      W3AUGJV.ACCOUNT_USAGE_TYPE_CD length = 3   
         format = $3.
         informat = $3.
         label = 'ACCOUNT_USAGE_TYPE_CD',
      W3AUGJV.RISK_ALARM_FLG length = 1   
         format = $1.
         informat = $1.
         label = 'RISK_ALARM_FLG',
      W3AUGJV.LOW_PROFITABILITY_FLG length = 1   
         format = $1.
         informat = $1.
         label = 'LOW_PROFITABILITY_FLG',
      W3AUGJV.ACCOUNT_LIFECYCLE_STG_CD length = 3   
         format = $3.
         informat = $3.
         label = 'ACCOUNT_LIFECYCLE_STG_CD',
      W3AUGJV.ATTRITION_ALARM_FLG length = 1   
         format = $1.
         informat = $1.
         label = 'ATTRITION_ALARM_FLG',
      W3AUGJV.BALANCE_FROZEN_FLG length = 1   
         format = $1.
         informat = $1.
         label = 'BALANCE_FROZEN_FLG',
      W3AUGJV.BALANCE_FROZEN_DT length = 8   
         format = DATETIME20.
         informat = DATETIME20.
         label = 'BALANCE_FROZEN_DT',
      W3AUGJV.ACCOUNT_BLOCK_REASON_CD length = 3   
         format = $3.
         informat = $3.
         label = 'ACCOUNT_BLOCK_REASON_CD',
      W3AUGJV.TAXATION_STATE_CD length = 4   
         format = $4.
         informat = $4.
         label = 'TAXATION_STATE_CD',
      W3AUGJV.EFFECTIVE_MATURITY_YEAR_NO length = 8   
         format = 9.3
         informat = 9.3
         label = 'EFFECTIVE_MATURITY_YEAR_NO',
      W3AUGJV.GL_ACCOUNT_ID length = 32   
         format = $32.
         informat = $32.
         label = 'GL_ACCOUNT_ID',
      W3AUGJV.FROM_OTHER_INSTITUTION_FLG length = 1   
         format = $1.
         informat = $1.
         label = 'FROM_OTHER_INSTITUTION_FLG',
      W3AUGJV.ACCOUNT_RENEWAL_CNT length = 8   
         format = 7.
         informat = 7.
         label = 'ACCOUNT_RENEWAL_CNT',
      W3AUGJV.BALANCE_TRANSFER_DT length = 8   
         format = DATETIME20.
         informat = DATETIME20.
         label = 'BALANCE_TRANSFER_DT',
      W3AUGJV.BALANCE_TRANSFER_AMT length = 8   
         format = 20.5
         informat = 20.5
         label = 'BALANCE_TRANSFER_AMT',
      W3AUGJV.BALANCE_TRANSFER_CNT length = 8   
         format = 7.
         informat = 7.
         label = 'BALANCE_TRANSFER_CNT',
      W3AUGJV.BASE_LONG_TERM_APR_RT length = 8   
         format = 11.4
         informat = 11.4
         label = 'BASE_LONG_TERM_APR_RT',
      W3AUGJV.BROKER_FLG length = 1   
         format = $1.
         informat = $1.
         label = 'BROKER_FLG',
      W3AUGJV.MULT_RATE_FLG length = 1   
         format = $1.
         informat = $1.
         label = 'MULT_RATE_FLG',
      W3AUGJV.AUTO_DEBIT_ACCOUNT_NO length = 32   
         format = $32.
         informat = $32.
         label = 'AUTO_DEBIT_ACCOUNT_NO',
      W3AUGJV.WORST_STATUS_LAST_12_MTH_CD length = 3   
         format = $3.
         informat = $3.
         label = 'WORST_STATUS_LAST_12_MTH_CD',
      W3AUGJV.WORST_STATUS_LAST_12_MTH_DT length = 8   
         format = DATETIME20.
         informat = DATETIME20.
         label = 'WORST_STATUS_LAST_12_MTH_DT',
      W3AUGJV.BALANCE_TRNSF_OTHER_ACCT_CNT length = 8   
         format = 7.
         informat = 7.
         label = 'BALANCE_TRNSF_OTHER_ACCT_CNT',
      W3AUGJV.EFFECTIVE_FROM_DTTM length = 8   
         format = DATETIME20.
         informat = DATETIME20.
         label = 'EFFECTIVE_FROM_DTTM',
      W3AUGJV.EFFECTIVE_TO_DTTM length = 8   
         format = DATETIME20.
         informat = DATETIME20.
         label = 'EFFECTIVE_TO_DTTM',
      W3AUGJV.COUNTERPARTY_ID length = 32   
         format = $32.
         informat = $32.
         label = 'COUNTERPARTY_ID',
      W3AUGJV.INSURED_BY_COUNTERPARTY_ID length = 32   
         format = $32.
         informat = $32.
         label = 'INSURED_BY_COUNTERPARTY_ID',
      W3AUGJV.STATEMENT_FREQUENCY_CD length = 3   
         format = $3.
         informat = $3.
         label = 'STATEMENT_FREQUENCY_CD',
      W3AUGJV.SECURITY_DEPOSIT_AMT length = 8   
         format = 20.5
         informat = 20.5
         label = 'SECURITY_DEPOSIT_AMT',
      W3AUGJV.SECURITY_DEPOSIT_REFUND_AMT length = 8   
         format = 20.5
         informat = 20.5
         label = 'SECURITY_DEPOSIT_REFUND_AMT',
      W3AUGJV.FIRST_PAYMENT_DT length = 8   
         format = DATETIME20.
         informat = DATETIME20.
         label = 'FIRST_PAYMENT_DT',
      W3AUGJV.LAST_PAYMENT_DT length = 8   
         format = DATETIME20.
         informat = DATETIME20.
         label = 'LAST_PAYMENT_DT',
      W3AUGJV.FIRST_RESET_DT length = 8   
         format = DATETIME20.
         informat = DATETIME20.
         label = 'FIRST_RESET_DT',
      W3AUGJV.LAST_RESET_DT length = 8   
         format = DATETIME20.
         informat = DATETIME20.
         label = 'LAST_RESET_DT',
      W3AUGJV.RESETS_PER_ANNUM_NO length = 8   
         format = 6.
         informat = 6.
         label = 'RESETS_PER_ANNUM_NO',
      W3AUGJV.PRINCIPAL_PAYMENT_TYPE_CD length = 3   
         format = $3.
         informat = $3.
         label = 'PRINCIPAL_PAYMENT_TYPE_CD',
      W3AUGJV.PRINCIPAL_PAYMENT_AMT length = 8   
         format = 20.5
         informat = 20.5
         label = 'PRINCIPAL_PAYMENT_AMT',
      W3AUGJV.RATE_POLICY_ID length = 32   
         format = $32.
         informat = $32.
         label = 'RATE_POLICY_ID',
      W3AUGJV.SPREAD_RT length = 8   
         format = 11.4
         informat = 11.4
         label = 'SPREAD_RT',
      W3AUGJV.DISCOUNT_SPREAD_RT length = 8   
         format = 11.4
         informat = 11.4
         label = 'DISCOUNT_SPREAD_RT',
      W3AUGJV.INITIAL_CONTRACT_RT length = 8   
         format = 11.4
         informat = 11.4
         label = 'INITIAL_CONTRACT_RT',
      W3AUGJV.FIXED_MONTHLY_PREPAYMENT_RT length = 8   
         format = 11.4
         informat = 11.4
         label = 'FIXED_MONTHLY_PREPAYMENT_RT',
      W3AUGJV.CAPITAL_ALLOCATION_ID length = 32   
         format = $32.
         informat = $32.
         label = 'CAPITAL_ALLOCATION_ID',
      W3AUGJV.CAPITAL_COST_ID length = 32   
         format = $32.
         informat = $32.
         label = 'CAPITAL_COST_ID',
      W3AUGJV.SEGMENT_ID length = 32   
         format = $32.
         informat = $32.
         label = 'SEGMENT_ID',
      W3AUGJV.NEAR_BRANCH_FINANCIAL_UNIT_ID length = 32   
         format = $32.
         informat = $32.
         label = 'NEAR_BRANCH_FINANCIAL_UNIT_ID',
      W3AUGJV.STATEMENT_OPT_FLG length = 1   
         format = $1.
         informat = $1.
         label = 'STATEMENT_OPT_FLG',
      W3AUGJV.VALUE_SCALING_FACTOR_RT length = 8   
         format = 11.4
         informat = 11.4
         label = 'VALUE_SCALING_FACTOR_RT',
      W3AUGJV.INTERNAL_REPORTING_CATEGORY_CD length = 3   
         format = $3.
         informat = $3.
         label = 'INTERNAL_REPORTING_CATEGORY_CD',
      W3AUGJV.CONVEXITY_ADJUSTMENT_FLG length = 1   
         format = $1.
         informat = $1.
         label = 'CONVEXITY_ADJUSTMENT_FLG',
      W3AUGJV.ARREARS_PAYMENT_CD length = 3   
         format = $3.
         informat = $3.
         label = 'ARREARS_PAYMENT_CD',
      W3AUGJV.QUANTO_FEATURE_ID length = 32   
         format = $32.
         informat = $32.
         label = 'QUANTO_FEATURE_ID',
      W3AUGJV.CASH_INTENSIVE_BUSINESS_FLG length = 1   
         format = $1.
         informat = $1.
         label = 'CASH_INTENSIVE_BUSINESS_FLG',
      W3AUGJV.LETTER_OF_CREDIT_ONFILE_FLG length = 1   
         format = $1.
         informat = $1.
         label = 'LETTER_OF_CREDIT_ONFILE_FLG',
      W3AUGJV.TRADE_FINANCE_FLG length = 1   
         format = $1.
         informat = $1.
         label = 'TRADE_FINANCE_FLG',
      W3AUGJV.ANNUITY_PAYMENT_TYPE_CD length = 3   
         format = $3.
         informat = $3.
         label = 'ANNUITY_PAYMENT_TYPE_CD',
      W3AUGJV.INTEREST_PAYMENT_TYPE_CD length = 3   
         format = $3.
         informat = $3.
         label = 'INTEREST_PAYMENT_TYPE_CD',
      W3AUGJV.INTEREST_PAYMENT_TIME_FREQ_CD length = 3   
         format = $3.
         informat = $3.
         label = 'INTEREST_PAYMENT_TIME_FREQ_CD',
      W3AUGJV.LIQUIDITY_CATEGORY_TYPE_CD length = 3   
         format = $3.
         informat = $3.
         label = 'LIQUIDITY_CATEGORY_TYPE_CD',
      W3AUGJV.HOLIDAY_DATE_ROLL_CONV_CD length = 3   
         format = $3.
         informat = $3.
         label = 'HOLIDAY_DATE_ROLL_CONV_CD',
      W3AUGJV.WEEKEND_DATE_ROLL_CONV_CD length = 3   
         format = $3.
         informat = $3.
         label = 'WEEKEND_DATE_ROLL_CONV_CD',
      W3AUGJV.EXPENSE_ALLOCATION_ID length = 32   
         format = $32.
         informat = $32.
         label = 'EXPENSE_ALLOCATION_ID',
      W3AUGJV.FIRST_INTEREST_PAYMENT_DT length = 8   
         format = DATETIME20.
         informat = DATETIME20.
         label = 'FIRST_INTEREST_PAYMENT_DT',
      W3AUGJV.LAST_INTEREST_PAYMENT_DT length = 8   
         format = DATETIME20.
         informat = DATETIME20.
         label = 'LAST_INTEREST_PAYMENT_DT',
      W3AUGJV.IRB_DUMMY_TYPE_CD length = 3   
         format = $3.
         informat = $3.
         label = 'IRB_DUMMY_TYPE_CD',
      W3AUGJV.IRB_SRC_ACCOUNT_ID length = 32   
         format = $32.
         informat = $32.
         label = 'IRB_SRC_ACCOUNT_ID',
      W3AUGJV.FINANCIAL_INSTRUMENT_TYPE_CD length = 3   
         format = $3.
         informat = $3.
         label = 'FINANCIAL_INSTRUMENT_TYPE_CD',
      W3AUGJV.SETTLEMENT_TYPE_CD length = 3   
         format = $3.
         informat = $3.
         label = 'SETTLEMENT_TYPE_CD'
   from
      work.W3AUGJV left join 
      etl_ia.INTERNAL_ORG_BK_BK
         on
         (
            W3AUGJV.MID_INTERNAL_ORG_ID = INTERNAL_ORG_BK_BK.MID_INTERNAL_ORG_ID
         )
   ;
quit;

%global etls_sql_pushDown;
%let etls_sql_pushDown = &sys_sql_ip_all;

%rcSet(&sqlrc); 



/**  Step end SQL Join **/

/*==========================================================================* 
 * Step:            Table Loader                          A5Y50FNE.AQ0008G9 * 
 * Transform:       Table Loader (Version 2.1)                              * 
 * Description:                                                             * 
 *                                                                          * 
 * Source Table:    SQL Join - work.WXEVF8C               A5Y50FNE.AO0004SB * 
 * Target Table:    FINANCIAL_ACCOUNT_DRV_BK -            A5Y50FNE.AE00012J * 
 *                   work_ia.FINANCIAL_ACCOUNT_DRV_BK                       * 
 *==========================================================================*/ 

%let transformID = %quote(A5Y50FNE.AQ0008G9);
%let trans_rc = 0;
%let etls_stepStartTime = %sysfunc(datetime(), datetime20.); 

%let SYSLAST = %nrquote(work.WXEVF8C); 

%let SYS_SQL_IP_SPEEDO = Y;
%let SYS_SQL_MAPPUTTO = sas_put;
%let SYS_SQLREDUCEPUT = DBMS;
%global etls_sql_pushDown;
%let etls_sql_pushDown = -1;
option DBIDIRECTEXEC;

%global etls_tableExist;
%global etls_numIndex;
%global etls_lastTable;
%let etls_tableExist = -1; 
%let etls_numIndex = -1; 
%let etls_lastTable = &SYSLAST; 

/*---- Define load data macro  ----*/ 

/* --------------------------------------------------------------
   Load Technique Selection: Replace - EntireTable
   Constraint and index action selections: 'INIT','ASIS','ASIS','ASIS'
   Additional options selections... 
      Set unmapped to missing on updates: false 
   -------------------------------------------------------------- */
%macro etls_loader;

   %let etls_tableOptions = ;
   
   /*---- Map the columns  ----*/ 
   proc datasets lib = work nolist nowarn memtype = (data view);
      delete WIRP72K;
   quit;
   
   %put %str(NOTE: Mapping columns ...);
   proc sql;
      create view work.WIRP72K as
         select
            ACCOUNT_ID,
            VALID_FROM_DTTM,
            VALID_TO_DTTM,
            SOURCE_SYSTEM_CD,
            ACCOUNT_REGISTRATION_NM,
            ALTERNATE_ACCOUNT_NM,
            FINANCIAL_ACCOUNT_TYPE_CD,
            AUTO_DEBIT_ACCOUNT_TYPE_CD,
            ACCOUNT_REGISTRATION_TYPE_CD,
            ACCOUNT_STATUS_CD,
            OPEN_DT,
            CLOSE_DT,
            CLOSE_REASON_CD,
            ACCOUNT_TAX_ID,
            EXPECTED_LOSS_PCT,
            INDIVIDUAL_ORGANIZATION_CD,
            SOURCE_CD,
            OPENING_CHANNEL_CD,
            PREFERRED_CHANNEL_CD,
            CURRENCY_CD,
            PRIMARY_PHONE_NO,
            PRIMARY_PHONE_TYPE_CD,
            SECONDARY_PHONE_NO,
            SECONDARY_PHONE_TYPE_CD,
            MAILABLE_FLG,
            TELEPHONABLE_FLG,
            EMAIL_FLG,
            SMS_FLG,
            DO_NOT_CONTACT_FLG,
            EMPLOYEE_RK,
            CURRENCY_BASED_ACCOUNT_FLG,
            FEE_BASED_FLG,
            ANNUAL_FEES_AMT,
            MONTHLY_FEES_AMT,
            CAMPAIGN_CD,
            COMMUNICATION_CD,
            REGISTERED_ONLINE_DT,
            FIRST_LOGIN_DT,
            ONLINE_BILL_PAYMENT_FLG,
            ID_VERIFICATION_TYPE_CD,
            PREVIOUS_ACCOUNT_ID,
            OPEN_BRANCH_FINANCIAL_UNIT_ID,
            PRIM_BRANCH_FINANCIAL_UNIT_ID,
            FINANCIAL_APPLICATION_ID,
            CREDIT_FACILITY_ID,
            FUTURE_MARGIN_INCOME_AMT,
            IN_DEFAULT_FLG,
            FINANCIAL_BOOK_ID,
            IRRECOVERABLE_FLG,
            OWNED_BY_INTERNAL_ORG_ID,
            PREVIOUS_BANK_EXTERNAL_ORG_ID,
            NETTING_SET_ID,
            REVOLVING_FLG,
            SOURCE_CHANNEL_CD,
            GRACE_PERIOD_DAYS_CNT,
            REMARGINING_DAYS_CNT,
            FINANCIAL_CALENDAR_ID,
            DAY_BASIS_CD,
            PORTFOLIO_ID,
            SECURITIZATION_POOL_ID,
            RECEIVABLES_POOL_ID,
            ACCOUNT_USAGE_TYPE_CD,
            RISK_ALARM_FLG,
            LOW_PROFITABILITY_FLG,
            ACCOUNT_LIFECYCLE_STG_CD,
            ATTRITION_ALARM_FLG,
            BALANCE_FROZEN_FLG,
            BALANCE_FROZEN_DT,
            ACCOUNT_BLOCK_REASON_CD,
            TAXATION_STATE_CD,
            EFFECTIVE_MATURITY_YEAR_NO,
            GL_ACCOUNT_ID,
            FROM_OTHER_INSTITUTION_FLG,
            ACCOUNT_RENEWAL_CNT,
            BALANCE_TRANSFER_DT,
            BALANCE_TRANSFER_AMT,
            BALANCE_TRANSFER_CNT,
            BASE_LONG_TERM_APR_RT,
            BROKER_FLG,
            MULT_RATE_FLG,
            AUTO_DEBIT_ACCOUNT_NO,
            WORST_STATUS_LAST_12_MTH_CD,
            WORST_STATUS_LAST_12_MTH_DT,
            BALANCE_TRNSF_OTHER_ACCT_CNT,
            EFFECTIVE_FROM_DTTM,
            EFFECTIVE_TO_DTTM,
            COUNTERPARTY_ID,
            INSURED_BY_COUNTERPARTY_ID,
            STATEMENT_FREQUENCY_CD,
            SECURITY_DEPOSIT_AMT,
            SECURITY_DEPOSIT_REFUND_AMT,
            FIRST_PAYMENT_DT,
            LAST_PAYMENT_DT,
            FIRST_RESET_DT,
            LAST_RESET_DT,
            RESETS_PER_ANNUM_NO,
            PRINCIPAL_PAYMENT_TYPE_CD,
            PRINCIPAL_PAYMENT_AMT,
            RATE_POLICY_ID,
            SPREAD_RT,
            DISCOUNT_SPREAD_RT,
            INITIAL_CONTRACT_RT,
            FIXED_MONTHLY_PREPAYMENT_RT,
            CAPITAL_ALLOCATION_ID,
            CAPITAL_COST_ID,
            SEGMENT_ID,
            NEAR_BRANCH_FINANCIAL_UNIT_ID,
            STATEMENT_OPT_FLG,
            VALUE_SCALING_FACTOR_RT,
            INTERNAL_REPORTING_CATEGORY_CD,
            CONVEXITY_ADJUSTMENT_FLG,
            ARREARS_PAYMENT_CD,
            QUANTO_FEATURE_ID,
            CASH_INTENSIVE_BUSINESS_FLG,
            LETTER_OF_CREDIT_ONFILE_FLG,
            TRADE_FINANCE_FLG,
            ANNUITY_PAYMENT_TYPE_CD,
            INTEREST_PAYMENT_TYPE_CD,
            INTEREST_PAYMENT_TIME_FREQ_CD,
            LIQUIDITY_CATEGORY_TYPE_CD,
            HOLIDAY_DATE_ROLL_CONV_CD,
            WEEKEND_DATE_ROLL_CONV_CD,
            EXPENSE_ALLOCATION_ID,
            FIRST_INTEREST_PAYMENT_DT,
            LAST_INTEREST_PAYMENT_DT,
            IRB_DUMMY_TYPE_CD,
            (cats(input(substr(IRB_SRC_ACCOUNT_ID, 2), 12.))) as IRB_SRC_ACCOUNT_ID length = 32
               format = $32.
               informat = $32.,
            FINANCIAL_INSTRUMENT_TYPE_CD,
            SETTLEMENT_TYPE_CD
      from &etls_lastTable
      ;
   quit;
   
   %let SYSLAST = work.WIRP72K;
   
   %let etls_lastTable = &SYSLAST; 
   %let etls_tableOptions = ; 
   
   /* Determine if the target table exists  */ 
   %let etls_tableExist = %eval(%sysfunc(exist(work_ia.FINANCIAL_ACCOUNT_DRV_BK, DATA)) or 
         %sysfunc(exist(work_ia.FINANCIAL_ACCOUNT_DRV_BK, VIEW))); 
   
   %if &etls_tableExist %then 
   %do;/* table exists  */ 
      %let etls_hasPreExistingConstraint=0; 
      
      proc datasets lib = work nolist nowarn memtype = (data view);
         delete etls_commands etls_commands_F;
      quit;
      
      %let etls_otherTablesReferToThisTable=0;
      
      %macro etls_CIContents(table=,workTableOut=,inDSOptions=);
         %put NOTE: Building table listing Constraints and Indexes for: &table;
         proc datasets lib=work nolist; delete &workTableOut; quit;
         proc contents data=&table&inDSOptions out2=&workTableOut noprint; run;
         
         data &workTableOut;
            length name $60 type $20 icown idxUnique idxNoMiss $3 recreate $600;
            set &workTableOut;
            type=upcase(type);
            if type eq 'REFERENTIAL' then
            do;
               put "WARNING%QUOTE(:) Target table is referenced by constraints in"
                    " another table: " ref;
               call symput('etls_otherTablesReferToThisTable','1');
               delete;
            end;
            if type='INDEX' and ICOwn eq 'YES' then delete;
         run;
         %rcSet(&syserr); 
         
      %mend etls_CIContents;
      
      %etls_CIContents(table=work_ia.FINANCIAL_ACCOUNT_DRV_BK, workTableOut=etls_commands, inDSOptions=);
      
      %if &etls_otherTablesReferToThisTable %then 
         %put WARNING%QUOTE(:) Replacing entire table will fail. Consider an alternate load technique or revising constraints.; 
      %else 
      %do; /* okay - remove foreign keys  */ 
      
         data etls_commands_F; 
            set etls_commands; 
            if upcase(type)="FOREIGN KEY" then 
            do; 
               command='ic delete '||trim(name)||';';
               output etls_commands_F; 
            end; 
         run; 
         
         %put %str(NOTE: Removing foreign keys before dropping table...);
         data _null_;
            set etls_commands_F;
            %rcSet(&syserr); 
            
      %end; /* okay - remove foreign keys  */ 
      
      proc datasets lib = work nolist nowarn memtype = (data view);
         delete etls_commands etls_commands_F;
      quit;
      
      /*---- Drop a table  ----*/ 
      %put %str(NOTE: Dropping table ...);
      proc datasets lib = work_ia nolist nowarn memtype = (data view);
         delete FINANCIAL_ACCOUNT_DRV_BK;
      quit;
      
      %rcSet(&syserr); 
      
      %let etls_tableExist = 0;
      
   %end; /* table exists  */ 
   
   /*---- Create a new table  ----*/ 
   %if (&etls_tableExist eq 0) %then 
   %do;  /* if table does not exist  */ 
   
      %put %str(NOTE: Creating table ...);
      
      data work_ia.FINANCIAL_ACCOUNT_DRV_BK;
         attrib ACCOUNT_ID length = $32
            format = $32.
            informat = $32.
            label = 'ACCOUNT_ID'; 
         attrib VALID_FROM_DTTM length = 8
            format = DATETIME20.
            informat = DATETIME20.
            label = 'VALID_FROM_DTTM'; 
         attrib VALID_TO_DTTM length = 8
            format = DATETIME20.
            informat = DATETIME20.
            label = 'VALID_TO_DTTM'; 
         attrib SOURCE_SYSTEM_CD length = $3
            format = $3.
            informat = $3.
            label = 'SOURCE_SYSTEM_CD'; 
         attrib ACCOUNT_REGISTRATION_NM length = $100
            format = $100.
            informat = $100.
            label = 'ACCOUNT_REGISTRATION_NM'; 
         attrib ALTERNATE_ACCOUNT_NM length = $40
            format = $40.
            informat = $40.
            label = 'ALTERNATE_ACCOUNT_NM'; 
         attrib FINANCIAL_ACCOUNT_TYPE_CD length = $3
            format = $3.
            informat = $3.
            label = 'FINANCIAL_ACCOUNT_TYPE_CD'; 
         attrib AUTO_DEBIT_ACCOUNT_TYPE_CD length = $3
            format = $3.
            informat = $3.
            label = 'AUTO_DEBIT_ACCOUNT_TYPE_CD'; 
         attrib ACCOUNT_REGISTRATION_TYPE_CD length = $3
            format = $3.
            informat = $3.
            label = 'ACCOUNT_REGISTRATION_TYPE_CD'; 
         attrib ACCOUNT_STATUS_CD length = $3
            format = $3.
            informat = $3.
            label = 'ACCOUNT_STATUS_CD'; 
         attrib OPEN_DT length = 8
            format = DATETIME20.
            informat = DATETIME20.
            label = 'OPEN_DT'; 
         attrib CLOSE_DT length = 8
            format = DATETIME20.
            informat = DATETIME20.
            label = 'CLOSE_DT'; 
         attrib CLOSE_REASON_CD length = $3
            format = $3.
            informat = $3.
            label = 'CLOSE_REASON_CD'; 
         attrib ACCOUNT_TAX_ID length = $32
            format = $32.
            informat = $32.
            label = 'ACCOUNT_TAX_ID'; 
         attrib EXPECTED_LOSS_PCT length = 8
            format = 11.4
            informat = 11.4
            label = 'EXPECTED_LOSS_PCT'; 
         attrib INDIVIDUAL_ORGANIZATION_CD length = $3
            format = $3.
            informat = $3.
            label = 'INDIVIDUAL_ORGANIZATION_CD'; 
         attrib SOURCE_CD length = $5
            format = $5.
            informat = $5.
            label = 'SOURCE_CD'; 
         attrib OPENING_CHANNEL_CD length = $3
            format = $3.
            informat = $3.
            label = 'OPENING_CHANNEL_CD'; 
         attrib PREFERRED_CHANNEL_CD length = $3
            format = $3.
            informat = $3.
            label = 'PREFERRED_CHANNEL_CD'; 
         attrib CURRENCY_CD length = $3
            format = $3.
            informat = $3.
            label = 'CURRENCY_CD'; 
         attrib PRIMARY_PHONE_NO length = $20
            format = $20.
            informat = $20.
            label = 'PRIMARY_PHONE_NO'; 
         attrib PRIMARY_PHONE_TYPE_CD length = $3
            format = $3.
            informat = $3.
            label = 'PRIMARY_PHONE_TYPE_CD'; 
         attrib SECONDARY_PHONE_NO length = $20
            format = $20.
            informat = $20.
            label = 'SECONDARY_PHONE_NO'; 
         attrib SECONDARY_PHONE_TYPE_CD length = $3
            format = $3.
            informat = $3.
            label = 'SECONDARY_PHONE_TYPE_CD'; 
         attrib MAILABLE_FLG length = $1
            format = $1.
            informat = $1.
            label = 'MAILABLE_FLG'; 
         attrib TELEPHONABLE_FLG length = $1
            format = $1.
            informat = $1.
            label = 'TELEPHONABLE_FLG'; 
         attrib EMAIL_FLG length = $1
            format = $1.
            informat = $1.
            label = 'EMAIL_FLG'; 
         attrib SMS_FLG length = $1
            format = $1.
            informat = $1.
            label = 'SMS_FLG'; 
         attrib DO_NOT_CONTACT_FLG length = $1
            format = $1.
            informat = $1.
            label = 'DO_NOT_CONTACT_FLG'; 
         attrib EMPLOYEE_RK length = 8
            format = 11.
            informat = 11.
            label = 'EMPLOYEE_RK'; 
         attrib CURRENCY_BASED_ACCOUNT_FLG length = $1
            format = $1.
            informat = $1.
            label = 'CURRENCY_BASED_ACCOUNT_FLG'; 
         attrib FEE_BASED_FLG length = $1
            format = $1.
            informat = $1.
            label = 'FEE_BASED_FLG'; 
         attrib ANNUAL_FEES_AMT length = 8
            format = 20.5
            informat = 20.5
            label = 'ANNUAL_FEES_AMT'; 
         attrib MONTHLY_FEES_AMT length = 8
            format = 20.5
            informat = 20.5
            label = 'MONTHLY_FEES_AMT'; 
         attrib CAMPAIGN_CD length = $30
            format = $30.
            informat = $30.
            label = 'CAMPAIGN_CD'; 
         attrib COMMUNICATION_CD length = $30
            format = $30.
            informat = $30.
            label = 'COMMUNICATION_CD'; 
         attrib REGISTERED_ONLINE_DT length = 8
            format = DATETIME20.
            informat = DATETIME20.
            label = 'REGISTERED_ONLINE_DT'; 
         attrib FIRST_LOGIN_DT length = 8
            format = DATETIME20.
            informat = DATETIME20.
            label = 'FIRST_LOGIN_DT'; 
         attrib ONLINE_BILL_PAYMENT_FLG length = $1
            format = $1.
            informat = $1.
            label = 'ONLINE_BILL_PAYMENT_FLG'; 
         attrib ID_VERIFICATION_TYPE_CD length = $3
            format = $3.
            informat = $3.
            label = 'ID_VERIFICATION_TYPE_CD'; 
         attrib PREVIOUS_ACCOUNT_ID length = $32
            format = $32.
            informat = $32.
            label = 'PREVIOUS_ACCOUNT_ID'; 
         attrib OPEN_BRANCH_FINANCIAL_UNIT_ID length = $32
            format = $32.
            informat = $32.
            label = 'OPEN_BRANCH_FINANCIAL_UNIT_ID'; 
         attrib PRIM_BRANCH_FINANCIAL_UNIT_ID length = $32
            format = $32.
            informat = $32.
            label = 'PRIM_BRANCH_FINANCIAL_UNIT_ID'; 
         attrib FINANCIAL_APPLICATION_ID length = $32
            format = $32.
            informat = $32.
            label = 'FINANCIAL_APPLICATION_ID'; 
         attrib CREDIT_FACILITY_ID length = $40
            format = $40.
            informat = $40.
            label = 'CREDIT_FACILITY_ID'; 
         attrib FUTURE_MARGIN_INCOME_AMT length = 8
            format = 20.5
            informat = 20.5
            label = 'FUTURE_MARGIN_INCOME_AMT'; 
         attrib IN_DEFAULT_FLG length = $1
            format = $1.
            informat = $1.
            label = 'IN_DEFAULT_FLG'; 
         attrib FINANCIAL_BOOK_ID length = $32
            format = $32.
            informat = $32.
            label = 'FINANCIAL_BOOK_ID'; 
         attrib IRRECOVERABLE_FLG length = $1
            format = $1.
            informat = $1.
            label = 'IRRECOVERABLE_FLG'; 
         attrib OWNED_BY_INTERNAL_ORG_ID length = $32
            format = $32.
            informat = $32.
            label = 'OWNED_BY_INTERNAL_ORG_ID'; 
         attrib PREVIOUS_BANK_EXTERNAL_ORG_ID length = $32
            format = $32.
            informat = $32.
            label = 'PREVIOUS_BANK_EXTERNAL_ORG_ID'; 
         attrib NETTING_SET_ID length = $32
            format = $32.
            informat = $32.
            label = 'NETTING_SET_ID'; 
         attrib REVOLVING_FLG length = $1
            format = $1.
            informat = $1.
            label = 'REVOLVING_FLG'; 
         attrib SOURCE_CHANNEL_CD length = $3
            format = $3.
            informat = $3.
            label = 'SOURCE_CHANNEL_CD'; 
         attrib GRACE_PERIOD_DAYS_CNT length = 8
            format = 7.
            informat = 7.
            label = 'GRACE_PERIOD_DAYS_CNT'; 
         attrib REMARGINING_DAYS_CNT length = 8
            format = 7.
            informat = 7.
            label = 'REMARGINING_DAYS_CNT'; 
         attrib FINANCIAL_CALENDAR_ID length = $32
            format = $32.
            informat = $32.
            label = 'FINANCIAL_CALENDAR_ID'; 
         attrib DAY_BASIS_CD length = $10
            format = $10.
            informat = $10.
            label = 'DAY_BASIS_CD'; 
         attrib PORTFOLIO_ID length = $32
            format = $32.
            informat = $32.
            label = 'PORTFOLIO_ID'; 
         attrib SECURITIZATION_POOL_ID length = $32
            format = $32.
            informat = $32.
            label = 'SECURITIZATION_POOL_ID'; 
         attrib RECEIVABLES_POOL_ID length = $32
            format = $32.
            informat = $32.
            label = 'RECEIVABLES_POOL_ID'; 
         attrib ACCOUNT_USAGE_TYPE_CD length = $3
            format = $3.
            informat = $3.
            label = 'ACCOUNT_USAGE_TYPE_CD'; 
         attrib RISK_ALARM_FLG length = $1
            format = $1.
            informat = $1.
            label = 'RISK_ALARM_FLG'; 
         attrib LOW_PROFITABILITY_FLG length = $1
            format = $1.
            informat = $1.
            label = 'LOW_PROFITABILITY_FLG'; 
         attrib ACCOUNT_LIFECYCLE_STG_CD length = $3
            format = $3.
            informat = $3.
            label = 'ACCOUNT_LIFECYCLE_STG_CD'; 
         attrib ATTRITION_ALARM_FLG length = $1
            format = $1.
            informat = $1.
            label = 'ATTRITION_ALARM_FLG'; 
         attrib BALANCE_FROZEN_FLG length = $1
            format = $1.
            informat = $1.
            label = 'BALANCE_FROZEN_FLG'; 
         attrib BALANCE_FROZEN_DT length = 8
            format = DATETIME20.
            informat = DATETIME20.
            label = 'BALANCE_FROZEN_DT'; 
         attrib ACCOUNT_BLOCK_REASON_CD length = $3
            format = $3.
            informat = $3.
            label = 'ACCOUNT_BLOCK_REASON_CD'; 
         attrib TAXATION_STATE_CD length = $4
            format = $4.
            informat = $4.
            label = 'TAXATION_STATE_CD'; 
         attrib EFFECTIVE_MATURITY_YEAR_NO length = 8
            format = 9.3
            informat = 9.3
            label = 'EFFECTIVE_MATURITY_YEAR_NO'; 
         attrib GL_ACCOUNT_ID length = $32
            format = $32.
            informat = $32.
            label = 'GL_ACCOUNT_ID'; 
         attrib FROM_OTHER_INSTITUTION_FLG length = $1
            format = $1.
            informat = $1.
            label = 'FROM_OTHER_INSTITUTION_FLG'; 
         attrib ACCOUNT_RENEWAL_CNT length = 8
            format = 7.
            informat = 7.
            label = 'ACCOUNT_RENEWAL_CNT'; 
         attrib BALANCE_TRANSFER_DT length = 8
            format = DATETIME20.
            informat = DATETIME20.
            label = 'BALANCE_TRANSFER_DT'; 
         attrib BALANCE_TRANSFER_AMT length = 8
            format = 20.5
            informat = 20.5
            label = 'BALANCE_TRANSFER_AMT'; 
         attrib BALANCE_TRANSFER_CNT length = 8
            format = 7.
            informat = 7.
            label = 'BALANCE_TRANSFER_CNT'; 
         attrib BASE_LONG_TERM_APR_RT length = 8
            format = 11.4
            informat = 11.4
            label = 'BASE_LONG_TERM_APR_RT'; 
         attrib BROKER_FLG length = $1
            format = $1.
            informat = $1.
            label = 'BROKER_FLG'; 
         attrib MULT_RATE_FLG length = $1
            format = $1.
            informat = $1.
            label = 'MULT_RATE_FLG'; 
         attrib AUTO_DEBIT_ACCOUNT_NO length = $32
            format = $32.
            informat = $32.
            label = 'AUTO_DEBIT_ACCOUNT_NO'; 
         attrib WORST_STATUS_LAST_12_MTH_CD length = $3
            format = $3.
            informat = $3.
            label = 'WORST_STATUS_LAST_12_MTH_CD'; 
         attrib WORST_STATUS_LAST_12_MTH_DT length = 8
            format = DATETIME20.
            informat = DATETIME20.
            label = 'WORST_STATUS_LAST_12_MTH_DT'; 
         attrib BALANCE_TRNSF_OTHER_ACCT_CNT length = 8
            format = 7.
            informat = 7.
            label = 'BALANCE_TRNSF_OTHER_ACCT_CNT'; 
         attrib EFFECTIVE_FROM_DTTM length = 8
            format = DATETIME20.
            informat = DATETIME20.
            label = 'EFFECTIVE_FROM_DTTM'; 
         attrib EFFECTIVE_TO_DTTM length = 8
            format = DATETIME20.
            informat = DATETIME20.
            label = 'EFFECTIVE_TO_DTTM'; 
         attrib COUNTERPARTY_ID length = $32
            format = $32.
            informat = $32.
            label = 'COUNTERPARTY_ID'; 
         attrib INSURED_BY_COUNTERPARTY_ID length = $32
            format = $32.
            informat = $32.
            label = 'INSURED_BY_COUNTERPARTY_ID'; 
         attrib STATEMENT_FREQUENCY_CD length = $3
            format = $3.
            informat = $3.
            label = 'STATEMENT_FREQUENCY_CD'; 
         attrib SECURITY_DEPOSIT_AMT length = 8
            format = 20.5
            informat = 20.5
            label = 'SECURITY_DEPOSIT_AMT'; 
         attrib SECURITY_DEPOSIT_REFUND_AMT length = 8
            format = 20.5
            informat = 20.5
            label = 'SECURITY_DEPOSIT_REFUND_AMT'; 
         attrib FIRST_PAYMENT_DT length = 8
            format = DATETIME20.
            informat = DATETIME20.
            label = 'FIRST_PAYMENT_DT'; 
         attrib LAST_PAYMENT_DT length = 8
            format = DATETIME20.
            informat = DATETIME20.
            label = 'LAST_PAYMENT_DT'; 
         attrib FIRST_RESET_DT length = 8
            format = DATETIME20.
            informat = DATETIME20.
            label = 'FIRST_RESET_DT'; 
         attrib LAST_RESET_DT length = 8
            format = DATETIME20.
            informat = DATETIME20.
            label = 'LAST_RESET_DT'; 
         attrib RESETS_PER_ANNUM_NO length = 8
            format = 6.
            informat = 6.
            label = 'RESETS_PER_ANNUM_NO'; 
         attrib PRINCIPAL_PAYMENT_TYPE_CD length = $3
            format = $3.
            informat = $3.
            label = 'PRINCIPAL_PAYMENT_TYPE_CD'; 
         attrib PRINCIPAL_PAYMENT_AMT length = 8
            format = 20.5
            informat = 20.5
            label = 'PRINCIPAL_PAYMENT_AMT'; 
         attrib RATE_POLICY_ID length = $32
            format = $32.
            informat = $32.
            label = 'RATE_POLICY_ID'; 
         attrib SPREAD_RT length = 8
            format = 11.4
            informat = 11.4
            label = 'SPREAD_RT'; 
         attrib DISCOUNT_SPREAD_RT length = 8
            format = 11.4
            informat = 11.4
            label = 'DISCOUNT_SPREAD_RT'; 
         attrib INITIAL_CONTRACT_RT length = 8
            format = 11.4
            informat = 11.4
            label = 'INITIAL_CONTRACT_RT'; 
         attrib FIXED_MONTHLY_PREPAYMENT_RT length = 8
            format = 11.4
            informat = 11.4
            label = 'FIXED_MONTHLY_PREPAYMENT_RT'; 
         attrib CAPITAL_ALLOCATION_ID length = $32
            format = $32.
            informat = $32.
            label = 'CAPITAL_ALLOCATION_ID'; 
         attrib CAPITAL_COST_ID length = $32
            format = $32.
            informat = $32.
            label = 'CAPITAL_COST_ID'; 
         attrib SEGMENT_ID length = $32
            format = $32.
            informat = $32.
            label = 'SEGMENT_ID'; 
         attrib NEAR_BRANCH_FINANCIAL_UNIT_ID length = $32
            format = $32.
            informat = $32.
            label = 'NEAR_BRANCH_FINANCIAL_UNIT_ID'; 
         attrib STATEMENT_OPT_FLG length = $1
            format = $1.
            informat = $1.
            label = 'STATEMENT_OPT_FLG'; 
         attrib VALUE_SCALING_FACTOR_RT length = 8
            format = 11.4
            informat = 11.4
            label = 'VALUE_SCALING_FACTOR_RT'; 
         attrib INTERNAL_REPORTING_CATEGORY_CD length = $3
            format = $3.
            informat = $3.
            label = 'INTERNAL_REPORTING_CATEGORY_CD'; 
         attrib CONVEXITY_ADJUSTMENT_FLG length = $1
            format = $1.
            informat = $1.
            label = 'CONVEXITY_ADJUSTMENT_FLG'; 
         attrib ARREARS_PAYMENT_CD length = $3
            format = $3.
            informat = $3.
            label = 'ARREARS_PAYMENT_CD'; 
         attrib QUANTO_FEATURE_ID length = $32
            format = $32.
            informat = $32.
            label = 'QUANTO_FEATURE_ID'; 
         attrib CASH_INTENSIVE_BUSINESS_FLG length = $1
            format = $1.
            informat = $1.
            label = 'CASH_INTENSIVE_BUSINESS_FLG'; 
         attrib LETTER_OF_CREDIT_ONFILE_FLG length = $1
            format = $1.
            informat = $1.
            label = 'LETTER_OF_CREDIT_ONFILE_FLG'; 
         attrib TRADE_FINANCE_FLG length = $1
            format = $1.
            informat = $1.
            label = 'TRADE_FINANCE_FLG'; 
         attrib ANNUITY_PAYMENT_TYPE_CD length = $3
            format = $3.
            informat = $3.
            label = 'ANNUITY_PAYMENT_TYPE_CD'; 
         attrib INTEREST_PAYMENT_TYPE_CD length = $3
            format = $3.
            informat = $3.
            label = 'INTEREST_PAYMENT_TYPE_CD'; 
         attrib INTEREST_PAYMENT_TIME_FREQ_CD length = $3
            format = $3.
            informat = $3.
            label = 'INTEREST_PAYMENT_TIME_FREQ_CD'; 
         attrib LIQUIDITY_CATEGORY_TYPE_CD length = $3
            format = $3.
            informat = $3.
            label = 'LIQUIDITY_CATEGORY_TYPE_CD'; 
         attrib HOLIDAY_DATE_ROLL_CONV_CD length = $3
            format = $3.
            informat = $3.
            label = 'HOLIDAY_DATE_ROLL_CONV_CD'; 
         attrib WEEKEND_DATE_ROLL_CONV_CD length = $3
            format = $3.
            informat = $3.
            label = 'WEEKEND_DATE_ROLL_CONV_CD'; 
         attrib EXPENSE_ALLOCATION_ID length = $32
            format = $32.
            informat = $32.
            label = 'EXPENSE_ALLOCATION_ID'; 
         attrib FIRST_INTEREST_PAYMENT_DT length = 8
            format = DATETIME20.
            informat = DATETIME20.
            label = 'FIRST_INTEREST_PAYMENT_DT'; 
         attrib LAST_INTEREST_PAYMENT_DT length = 8
            format = DATETIME20.
            informat = DATETIME20.
            label = 'LAST_INTEREST_PAYMENT_DT'; 
         attrib IRB_DUMMY_TYPE_CD length = $3
            format = $3.
            informat = $3.
            label = 'IRB_DUMMY_TYPE_CD'; 
         attrib IRB_SRC_ACCOUNT_ID length = $32
            format = $32.
            informat = $32.
            label = 'IRB_SRC_ACCOUNT_ID'; 
         attrib FINANCIAL_INSTRUMENT_TYPE_CD length = $3
            format = $3.
            informat = $3.
            label = 'FINANCIAL_INSTRUMENT_TYPE_CD'; 
         attrib SETTLEMENT_TYPE_CD length = $3
            format = $3.
            informat = $3.
            label = 'SETTLEMENT_TYPE_CD'; 
         call missing(of _all_);
         stop;
      run;
      
      %rcSet(&syserr); 
      
      /*---- Create the integrity constraints for a table  ----*/ 
      %put %str(NOTE: Creating integrity constraints ...);
      proc datasets library=work_ia nolist;
         modify FINANCIAL_ACCOUNT_DRV_BK;
            ic create not null (ACCOUNT_ID);
            ic create not null (SOURCE_SYSTEM_CD);
            ic create not null (FINANCIAL_ACCOUNT_TYPE_CD);
            ic create not null (ACCOUNT_STATUS_CD);
            ic create not null (CURRENCY_CD);
            ic create Index1 = primary key (ACCOUNT_ID VALID_FROM_DTTM);
      quit;
      
      %rcSet(&syserr); 
      
   %end;  /* if table does not exist  */ 
   
   /*---- Append  ----*/ 
   %put %str(NOTE: Appending data ...);
   
   proc append base = work_ia.FINANCIAL_ACCOUNT_DRV_BK 
      data = &etls_lastTable (&etls_tableOptions)  force ; 
    run; 
   
   %rcSet(&syserr); 
   
   proc datasets lib = work nolist nowarn memtype = (data view);
      delete WIRP72K;
   quit;
   
%mend etls_loader;
%etls_loader;

%let etls_recCheckExist = 0; 
%let etls_recnt = 0; 
%macro etls_recordCheck; 
   %let etls_recCheckExist = %eval(%sysfunc(exist(work_ia.FINANCIAL_ACCOUNT_DRV_BK, DATA)) or 
         %sysfunc(exist(work_ia.FINANCIAL_ACCOUNT_DRV_BK, VIEW))); 
   
   %if (&etls_recCheckExist) %then
   %do;
      %local etls_syntaxcheck; 
      %let etls_syntaxcheck = %sysfunc(getoption(syntaxcheck)); 
      /* Turn off syntaxcheck option to perform following steps  */ 
      options nosyntaxcheck;
      
      proc contents data = work_ia.FINANCIAL_ACCOUNT_DRV_BK out = work.etls_contents(keep = nobs) noprint; 
      run; 
      
      data _null_; 
         set work.etls_contents (obs = 1); 
         call symput("etls_recnt", left(put(nobs,32.))); 
      run;
      
      proc datasets lib = work nolist nowarn memtype = (data view);
         delete etls_contents;
      quit;
      
      /* Reset syntaxcheck option to previous setting  */ 
      options &etls_syntaxcheck; 
   %end;
%mend etls_recordCheck;
%etls_recordCheck;



/**  Step end Table Loader **/

/*==========================================================================* 
 * Step:            Завершить модуль                      A5Y50FNE.AQ0008GA * 
 * Transform:       Завершить модуль                                        * 
 * Description:                                                             * 
 *==========================================================================*/ 

%let transformID = %quote(A5Y50FNE.AQ0008GA);
%let trans_rc = 0;
%let etls_stepStartTime = %sysfunc(datetime(), datetime20.); 

%let _INPUT_count = 0; 
%let _OUTPUT_count = 0; 


/*****************************************************************
* ВЕРСИЯ:
*   $Id: transform_job_finish.sas 247 2012-04-03 07:31:10Z nesterenok $
*
******************************************************************
* НАЗНАЧЕНИЕ:
*   Регистрирует конец модуля ETL.
*
* ПАРАМЕТРЫ:
*   нет
*
******************************************************************/

%macro transform_job_finish;

   /* Продолжаем модуль */
   %job_continue_reg(mpJobType=JOB, mpJobName=&ETLS_JobName., mpPostEvent=N);

   /* Завершаем модуль */
   %job_finish_reg(mpJobType=JOB);

%mend transform_job_finish;

%transform_job_finish;


%rcSet(&syserr); 
%rcSet(&sysrc); 
%rcSet(&sqlrc); 



/**  Step end Завершить модуль **/

%let etls_endTime = %sysfunc(datetime(),datetime.);



/**  Job end 043_930_Post_Structure_FINANCIAL_ACCOUNT_DRV_BK **/

/* Reset jobid and name */
%let jobID = %quote(A569C89V.AQ0000CK);
%let etls_jobName = %nrquote(090_364_Stream_Midas_Fin_Account_BK);

/**************************************************************************** 
 * Job:             043_940_Post_Structure_FIN_PRODUCT_A  A5Y50FNE.AN0000NT * 
 *                  CCOUNT_DRV_BK                                           * 
 * Description:                                                             * 
 *                                                                          * 
 * Metadata Server: bravo14                                                 * 
 * Port:            8561                                                    * 
 * Location:        /DWH_DWHDDS_IA/Jobs/043_Post_Structure                  * 
 *                                                                          * 
 * Server:          SASApp                                A5C46MZY.AQ000002 * 
 *                                                                          * 
 * Source Table:    FINANCIAL_ACCOUNT_DRV_BK -            A5Y50FNE.AE00012J * 
 *                   work_ia.FINANCIAL_ACCOUNT_DRV_BK                       * 
 * Target Table:    FIN_PRODUCT_ACCOUNT_DRV_BK -          A5Y50FNE.AE00017A * 
 *                   work_ia.FIN_PRODUCT_ACCOUNT_DRV_BK                     * 
 *                                                                          * 
 * Generated on:    16 Июль 2013 г. 17:14:49 MSD                            * 
 * Generated by:    sasdwh                                                  * 
 * Version:         SAS Data Integration Studio 4.5                         * 
 ****************************************************************************/ 

/* General macro variables  */ 
%let jobID = %quote(A5Y50FNE.AN0000NT);
%let etls_jobName = %nrquote(043_940_Post_Structure_FIN_PRODUCT_ACCOUNT_DRV_BK);
%let etls_userID = %nrquote(sasdwh);


/* Create metadata macro variables */
%let IOMServer      = %nrquote(SASApp);
%let metaPort       = %nrquote(8561);
%let metaServer     = %nrquote(bravo14);

/* Set metadata options */
options metaport       = &metaPort 
        metaserver     = "&metaServer"; 

/* Setup for capturing job status  */ 
%let etls_startTime = %sysfunc(datetime(),datetime.);
%let etls_recordsBefore = 0;
%let etls_recordsAfter = 0;
%let etls_lib = 0;
%let etls_table = 0;

%global etls_debug; 
%macro etls_setDebug; 
   %if %str(&etls_debug) ne 0 %then 
      OPTIONS MPRINT%str(;); 
%mend; 
%etls_setDebug; 

/*==========================================================================* 
 * Step:            Начать модуль                         A5Y50FNE.AQ000AFD * 
 * Transform:       Начать модуль                                           * 
 * Description:                                                             * 
 *==========================================================================*/ 

%let transformID = %quote(A5Y50FNE.AQ000AFD);
%let trans_rc = 0;
%let etls_stepStartTime = %sysfunc(datetime(), datetime20.); 

%let _INPUT_count = 0; 
%let _OUTPUT_count = 0; 


/*****************************************************************
* ВЕРСИЯ:
*   $Id: transform_job_start.sas 1747 2012-08-01 11:26:13Z nesterenok $
*
******************************************************************
* НАЗНАЧЕНИЕ:
*   Регистрирует начало модуля ETL.
*
* ПАРАМЕТРЫ:
*   нет
*
******************************************************************/

%macro transform_job_start;

   /* Продолжаем поток (или создаем новый) */
   %local lmvStreamName;
   %if %sysfunc(sysexist(LSB_JOBNAME)) %then
      %let lmvStreamName = %scan(%sysfunc(sysget(LSB_JOBNAME)), 3, :);
   %else
      %let lmvStreamName = ;

   %job_continue_reg(mpJobType=STREAM, mpJobName=&lmvStreamName, mpPostEvent=N, mpForcedStart=Y);

   /* Для DI, начинаем поток заново, если старый был начат не сегодня */
   %if %length(&lmvStreamName) eq 0 and &STREAM_START_DT ne %sysfunc(today()) %then %do;
      %job_start_reg(mpJobType=STREAM, mpParentJobId=, mpJobName=&lmvStreamName.);
   %end;

   /* Начинаем модуль */
   %job_start_reg(mpJobType=JOB, mpParentJobId=&STREAM_ID, mpJobName=&ETLS_JobName.);

%mend transform_job_start;

%transform_job_start;


%rcSet(&syserr); 
%rcSet(&sysrc); 
%rcSet(&sqlrc); 



/**  Step end Начать модуль **/

/*==========================================================================* 
 * Step:            Extract                               A5Y50FNE.AQ000AFE * 
 * Transform:       Extract                                                 * 
 * Description:                                                             * 
 *                                                                          * 
 * Source Table:    FINANCIAL_ACCOUNT_DRV_BK -            A5Y50FNE.AE00012J * 
 *                   work_ia.FINANCIAL_ACCOUNT_DRV_BK                       * 
 * Target Table:    Extract - work.WRSP2QSJ               A5Y50FNE.AO0005UN * 
 *==========================================================================*/ 

%let transformID = %quote(A5Y50FNE.AQ000AFE);
%let trans_rc = 0;
%let etls_stepStartTime = %sysfunc(datetime(), datetime20.); 

%let etls_recCheckExist = 0; 
%let etls_recnt = 0; 
%macro etls_recordCheck; 
   %let etls_recCheckExist = %eval(%sysfunc(exist(work_ia.FINANCIAL_ACCOUNT_DRV_BK, DATA)) or 
         %sysfunc(exist(work_ia.FINANCIAL_ACCOUNT_DRV_BK, VIEW))); 
   
   %if (&etls_recCheckExist) %then
   %do;
      %local etls_syntaxcheck; 
      %let etls_syntaxcheck = %sysfunc(getoption(syntaxcheck)); 
      /* Turn off syntaxcheck option to perform following steps  */ 
      options nosyntaxcheck;
      
      proc contents data = work_ia.FINANCIAL_ACCOUNT_DRV_BK out = work.etls_contents(keep = nobs) noprint; 
      run; 
      
      data _null_; 
         set work.etls_contents (obs = 1); 
         call symput("etls_recnt", left(put(nobs,32.))); 
      run;
      
      proc datasets lib = work nolist nowarn memtype = (data view);
         delete etls_contents;
      quit;
      
      /* Reset syntaxcheck option to previous setting  */ 
      options &etls_syntaxcheck; 
   %end;
%mend etls_recordCheck;
%etls_recordCheck;

%let SYSLAST = %nrquote(work_ia.FINANCIAL_ACCOUNT_DRV_BK); 

%let SYS_SQL_IP_SPEEDO = Y;
%let SYS_SQL_MAPPUTTO = sas_put;
%let SYS_SQLREDUCEPUT = DBMS;
%global etls_sql_pushDown;
%let etls_sql_pushDown = -1;
option DBIDIRECTEXEC;

/*---- Map the columns  ----*/ 
proc datasets lib = work nolist nowarn memtype = (data view);
   delete WRSP2QSJ;
quit;

data _null_;
   put "NOTE: The following column(s) do not have a column mapping, so the"
        " value(s) will be set to missing: PRIMARY_PROD_FLG, REINVEST_FLG,"
        " INVEST_REGULAR_AMT,    INVEST_LAST_LUMP_SUM_AMT, FUND_UNITS_CNT,"
        " TOT_CURR_FUND_VAL";
run;

%put %str(NOTE: Mapping columns ...);
proc sql;
   create view work.WRSP2QSJ as
      select
         ACCOUNT_ID,
         (case FINANCIAL_INSTRUMENT_TYPE_CD when "IRS" then "FMDE01" when "CIS" then 
            (case SETTLEMENT_TYPE_CD when "DLV" then "FMDE02" when "CSH" then "FMDE03" end) 
            when "OPT" then (case SETTLEMENT_TYPE_CD when "DLV" then "FMDE04" when "CSH" then "FMDE05" end)
            when "CAP" then "FMDE06" when "FLR" then "FMDE06"
            when "FRA" then "FMDE07" when "DCD" then "FMDE08"
            when "SPT" then "FMDE12" when "FWD" then "FMDE13"
            when "FUT" then "FMDE14" when "SWP" then "FMDE15"
            when "SWS" then "FMDE15" when "NDF" then "FMDE16" end) as IRB_PRODUCT_CODE length = 32
            format = $32.
            informat = $32.
            label = 'IRB_PRODUCT_CODE',
         VALID_FROM_DTTM as START_DT   
            label = 'START_DT',
         (&ETL_SCD_FUTURE_DTTM) as END_DT length = 8
            format = DATETIME20.
            informat = DATETIME20.
            label = 'END_DT',
         SOURCE_SYSTEM_CD,
         "" as PRIMARY_PROD_FLG length = 1
            format = $1.
            informat = $1.
            label = 'PRIMARY_PROD_FLG',
         "" as REINVEST_FLG length = 1
            format = $1.
            informat = $1.
            label = 'REINVEST_FLG',
         . as INVEST_REGULAR_AMT length = 8
            format = 21.5
            informat = 21.5
            label = 'INVEST_REGULAR_AMT',
         . as INVEST_LAST_LUMP_SUM_AMT length = 8
            format = 21.5
            informat = 21.5
            label = 'INVEST_LAST_LUMP_SUM_AMT',
         . as FUND_UNITS_CNT length = 8
            format = 9.2
            informat = 9.2
            label = 'FUND_UNITS_CNT',
         . as TOT_CURR_FUND_VAL length = 8
            format = 21.5
            informat = 21.5
            label = 'TOT_CURR_FUND_VAL'
   from &SYSLAST
      where not missing(calculated IRB_PRODUCT_CODE)
   ;
quit;

%let SYSLAST = work.WRSP2QSJ;

%global etls_sql_pushDown;
%let etls_sql_pushDown = &sys_sql_ip_all;

%rcSet(&sqlrc); 



/**  Step end Extract **/

/*==========================================================================* 
 * Step:            Генерация BK                          A5Y50FNE.AQ000AFF * 
 * Transform:       Генерация BK                                            * 
 * Description:                                                             * 
 *                                                                          * 
 * Source Table:    Extract - work.WRSP2QSJ               A5Y50FNE.AO0005UN * 
 * Target Table:    Генерация BKtpOut - work.WRUDVXQU     A5Y50FNE.AO0005UO * 
 *==========================================================================*/ 

%let transformID = %quote(A5Y50FNE.AQ000AFF);
%let trans_rc = 0;
%let etls_stepStartTime = %sysfunc(datetime(), datetime20.); 

%let etls_recnt = -1;
%let SYSLAST = %nrquote(work.WRSP2QSJ); 

%let _INPUT_count = 1; 
%let _INPUT = work.WRSP2QSJ;
%let _INPUT_connect = ;
%let _INPUT_engine = ;
%let _INPUT_memtype = VIEW;
%let _INPUT_options = %nrquote();
%let _INPUT_alter = %nrquote();
%let _INPUT_path = %nrquote(/Extract_A5Y50FNE.AO0005UN%(WorkTable%));
%let _INPUT_type = 1;
%let _INPUT_label = %nrquote();

%let tpIn = work.WRSP2QSJ;
%let tpIn_connect = ;
%let tpIn_engine = ;
%let tpIn_memtype = VIEW;
%let tpIn_options = %nrquote();
%let tpIn_alter = %nrquote();
%let tpIn_path = %nrquote(/Extract_A5Y50FNE.AO0005UN%(WorkTable%));
%let tpIn_type = 1;
%let tpIn_label = %nrquote();

%let _OUTPUT_count = 1; 
%let _OUTPUT = work.WRUDVXQU;
%let _OUTPUT_connect = ;
%let _OUTPUT_engine = ;
%let _OUTPUT_memtype = DATA;
%let _OUTPUT_options = %nrquote();
%let _OUTPUT_alter = %nrquote();
%let _OUTPUT_path = %nrquote(/Генерация BKtpOut_A5Y50FNE.AO0005UO%(WorkTable%));
%let _OUTPUT_type = 1;
%let _OUTPUT_label = %nrquote();
/* List of target columns to keep  */ 
%let _OUTPUT_keep = ACCOUNT_ID IRB_PRODUCT_CODE START_DT END_DT SOURCE_SYSTEM_CD 
        PRIMARY_PROD_FLG REINVEST_FLG INVEST_REGULAR_AMT 
        INVEST_LAST_LUMP_SUM_AMT FUND_UNITS_CNT TOT_CURR_FUND_VAL PRODUCT_ID;

%let tpOut = work.WRUDVXQU;
%let tpOut_connect = ;
%let tpOut_engine = ;
%let tpOut_memtype = DATA;
%let tpOut_options = %nrquote();
%let tpOut_alter = %nrquote();
%let tpOut_path = %nrquote(/Генерация BKtpOut_A5Y50FNE.AO0005UO%(WorkTable%));
%let tpOut_type = 1;
%let tpOut_label = %nrquote();
/* List of target columns to keep  */ 
%let tpOut_keep = ACCOUNT_ID IRB_PRODUCT_CODE START_DT END_DT SOURCE_SYSTEM_CD 
        PRIMARY_PROD_FLG REINVEST_FLG INVEST_REGULAR_AMT 
        INVEST_LAST_LUMP_SUM_AMT FUND_UNITS_CNT TOT_CURR_FUND_VAL PRODUCT_ID;


proc datasets lib=work nolist nowarn memtype = (data view);
   delete WRUDVXQU;
quit;

%let tpBK_count = %nrquote(1);
%let tpBK = %nrquote(FINANCIAL_PRODUCT               );
%let tpBK1 = %nrquote(FINANCIAL_PRODUCT               );
%let tpOptionalBK_count = %nrquote(0);
%let tpOptionalBK = ;

/* List of target columns to keep  */ 
%let _keep = ACCOUNT_ID IRB_PRODUCT_CODE START_DT END_DT SOURCE_SYSTEM_CD 
        PRIMARY_PROD_FLG REINVEST_FLG INVEST_REGULAR_AMT 
        INVEST_LAST_LUMP_SUM_AMT FUND_UNITS_CNT TOT_CURR_FUND_VAL PRODUCT_ID;
/* List of target columns to keep  */ 
%let keep = ACCOUNT_ID IRB_PRODUCT_CODE START_DT END_DT SOURCE_SYSTEM_CD 
        PRIMARY_PROD_FLG REINVEST_FLG INVEST_REGULAR_AMT 
        INVEST_LAST_LUMP_SUM_AMT FUND_UNITS_CNT TOT_CURR_FUND_VAL PRODUCT_ID;
/*****************************************************************
* ВЕРСИЯ:
*     $Id: transform_generate_bk.sas 4889 2013-04-04 09:14:07Z nesterenok $
*
******************************************************************
* НАЗНАЧЕНИЕ:
*     Генерирует бизнес-ключи в таблице по списку.
*
* ПАРАМЕТРЫ:
*     tpIn                    +  имя входного набора
*     tpBK                    +  список кодов обязательных для генерации бизнес-ключей, разделенный пробелами
*                                Такой бизнес-ключ станет дамми, если заполнены не все поля, его составляющие
*                                FK к ETL_SYS.ETL_BK.BK_CD
*     tpOptionalBK            +  список кодов НЕобязательных для генерации бизнес-ключей, разделенный пробелами
*                                Такой бизнес-ключ останется пустым, если заполнены не все поля, его составляющие
*     tpOut                   +  имя выходного набора
*
******************************************************************/

%macro transform_generate_bk;
   %let tpBK_count         = %unquote(&tpBK_count);
   %let tpOptionalBK_count = %unquote(&tpOptionalBK_count);

   %local lmvDummyRows lmvFieldDummyCount lmvDummyRequired;
   %let lmvDummyRows       = work.tr_gen_bk_dummy_rows;
   %let lmvFieldDummyCount = etl_dummy_count;
   %let lmvDummyRequired   = %eval (&tpBK_count gt 0);

   /* Макросы для генерации одного ключа */
   %macro sm_trans_gen_bk_required;
      %etl_generate_bk (
         mpFieldBK=&bk_field_nm, mpLengthBK=%sysfunc(inputn(&bk_type_cd, bkt_cd_len.)),
         mpColumnList=&bk_column_list_txt, mpFormat=&bk_format_txt,
         mpFieldDummy=&lmvFieldDummy, mpFieldDummyCount=&lmvFieldDummyCount
      );
   %mend;
   %macro sm_trans_gen_bk_optional;
      %etl_generate_bk (
         mpFieldBK=&bk_field_nm, mpLengthBK=%sysfunc(inputn(&bk_type_cd, bkt_cd_len.)),
         mpColumnList=&bk_column_list_txt, mpFormat=&bk_format_txt,
         mpFieldDummy=
      );
   %mend;

   /* Макрос для подстановки в дамми-ключ уникального номера */
   %macro sm_trans_gen_bk_dummy;
      if &lmvFieldDummy gt 0 then do;
         set &lmvDummyIds (keep=OBJECT_ID rename=(OBJECT_ID=&lmvFieldDummy._no)) point=&lmvFieldDummy;
         &bk_field_nm = cats (&bk_field_nm, "_", &lmvFieldDummy._no);

         %error_check;
      end;
   %mend;


   /* Создаем выходной набор итерацией по всем заявленным бизнес-ключам */
   /* Считаем необходимое кол-во дамми-ключей */
   %local lmvBkIndex lmvFieldDummy lmvDummyCount;
   %let lmvDummyCount   = 0;
   data
      %if &lmvDummyRequired %then %do;
         &tpOut (drop= etl_dummy_:)
         &lmvDummyRows
      %end;
      %else %do;
         &tpOut
      %end;
   ;
      set &tpIn end=ds_end;

      /* Генерация необязательных ключей */
      %do lmvBkIndex=1 %to &tpOptionalBK_count;
         %util_loop_data (mpLoopMacro=sm_trans_gen_bk_optional, mpData=ETL_SYS.ETL_BK,
                          mpWhere=BK_CD eq %util_quote(&&tpOptionalBK&lmvBkIndex)
         );
      %end;

      %if &lmvDummyRequired %then %do;
         length &lmvFieldDummyCount 8;
         drop &lmvFieldDummyCount;
         retain &lmvFieldDummyCount 0;

         /* Генерация обязательных ключей */
         %do lmvBkIndex=1 %to &tpBK_count;
            %let lmvFieldDummy = etl_dummy_&lmvBkIndex.;

            %util_loop_data (mpLoopMacro=sm_trans_gen_bk_required, mpData=ETL_SYS.ETL_BK,
                             mpWhere=BK_CD eq %util_quote(&&tpBK&lmvBkIndex)
            );
         %end;

         /* Если в какой-то записи есть дамми, то не выводим ее сразу */
         if sum (of etl_dummy_1-etl_dummy_&tpBK_count) = 0 then
            output &tpOut;
         else do;
            output &lmvDummyRows;
         end;

         if ds_end then call symputx ("lmvDummyCount", &lmvFieldDummyCount);
      %end;
      %else %do;
         output &tpOut;
      %end;
   run;
   %error_check (mpStepType=DATA);

   /* Если дамми нет, то всё */
   %if (not &lmvDummyRequired) or (&lmvDummyCount eq 0) %then %return;


   /* Для каждого дамми генерируем уникальный номер */
   %local lmvDummyIds;
   %let lmvDummyIds = work.tr_gen_bk_dummy_ids;
   %unique_ids (mpIdCount=&lmvDummyCount, mpOut=&lmvDummyIds, mpSequenceName=ETL_DUMMY_SEQ);

   /* Добавляем номер к дамми */
   data &lmvDummyRows._id (drop= etl_dummy_:);
      set &lmvDummyRows;

      %do lmvBkIndex=1 %to &tpBK_count;
         %let lmvFieldDummy = etl_dummy_&lmvBkIndex.;

         %util_loop_data (mpLoopMacro=sm_trans_gen_bk_dummy, mpData=ETL_SYS.ETL_BK,
                          mpWhere=BK_CD eq %util_quote(&&tpBK&lmvBkIndex)
         );
      %end;
   run;
   %error_check (mpStepType=DATA);


   /* Добавляем дамми-строки к выходному набору */
   proc append base=&tpOut data=&lmvDummyRows._id;
   run;
   %error_check (mpStepType=DATA);

%mend transform_generate_bk;

%transform_generate_bk;

%rcSet(&syserr); 
%rcSet(&sysrc); 
%rcSet(&sqlrc); 



/**  Step end Генерация BK **/

/*==========================================================================* 
 * Step:            Table Loader                          A5Y50FNE.AQ000AFG * 
 * Transform:       Table Loader (Version 2.1)                              * 
 * Description:                                                             * 
 *                                                                          * 
 * Source Table:    Генерация BKtpOut - work.WRUDVXQU     A5Y50FNE.AO0005UO * 
 * Target Table:    FIN_PRODUCT_ACCOUNT_DRV_BK -          A5Y50FNE.AE00017A * 
 *                   work_ia.FIN_PRODUCT_ACCOUNT_DRV_BK                     * 
 *==========================================================================*/ 

%let transformID = %quote(A5Y50FNE.AQ000AFG);
%let trans_rc = 0;
%let etls_stepStartTime = %sysfunc(datetime(), datetime20.); 

%let SYSLAST = %nrquote(work.WRUDVXQU); 

%let SYS_SQL_IP_SPEEDO = Y;
%let SYS_SQL_MAPPUTTO = sas_put;
%let SYS_SQLREDUCEPUT = DBMS;
%global etls_sql_pushDown;
%let etls_sql_pushDown = -1;
option DBIDIRECTEXEC;

%global etls_tableExist;
%global etls_numIndex;
%global etls_lastTable;
%let etls_tableExist = -1; 
%let etls_numIndex = -1; 
%let etls_lastTable = &SYSLAST; 

/*---- Define load data macro  ----*/ 

/* --------------------------------------------------------------
   Load Technique Selection: Replace - EntireTable
   Constraint and index action selections: 'INIT','ASIS','ASIS','ASIS'
   Additional options selections... 
      Set unmapped to missing on updates: false 
   -------------------------------------------------------------- */
%macro etls_loader;

   %let etls_tableOptions = ;
   
   /*---- Map the columns  ----*/ 
   proc datasets lib = work nolist nowarn memtype = (data view);
      delete WIRP7M8;
   quit;
   
   %put %str(NOTE: Mapping columns ...);
   proc sql;
      create view work.WIRP7M8 as
         select
            ACCOUNT_ID,
            PRODUCT_ID,
            START_DT,
            END_DT,
            SOURCE_SYSTEM_CD,
            PRIMARY_PROD_FLG,
            REINVEST_FLG,
            INVEST_REGULAR_AMT,
            INVEST_LAST_LUMP_SUM_AMT,
            FUND_UNITS_CNT,
            TOT_CURR_FUND_VAL
      from &etls_lastTable
      ;
   quit;
   
   %let SYSLAST = work.WIRP7M8;
   
   %let etls_lastTable = &SYSLAST; 
   %let etls_tableOptions = ; 
   
   /* Determine if the target table exists  */ 
   %let etls_tableExist = %eval(%sysfunc(exist(work_ia.FIN_PRODUCT_ACCOUNT_DRV_BK, DATA)) or 
         %sysfunc(exist(work_ia.FIN_PRODUCT_ACCOUNT_DRV_BK, VIEW))); 
   
   %if &etls_tableExist %then 
   %do;/* table exists  */ 
      %let etls_hasPreExistingConstraint=0; 
      
      proc datasets lib = work nolist nowarn memtype = (data view);
         delete etls_commands etls_commands_F;
      quit;
      
      %let etls_otherTablesReferToThisTable=0;
      
      %macro etls_CIContents(table=,workTableOut=,inDSOptions=);
         %put NOTE: Building table listing Constraints and Indexes for: &table;
         proc datasets lib=work nolist; delete &workTableOut; quit;
         proc contents data=&table&inDSOptions out2=&workTableOut noprint; run;
         
         data &workTableOut;
            length name $60 type $20 icown idxUnique idxNoMiss $3 recreate $600;
            set &workTableOut;
            type=upcase(type);
            if type eq 'REFERENTIAL' then
            do;
               put "WARNING%QUOTE(:) Target table is referenced by constraints in"
                    " another table: " ref;
               call symput('etls_otherTablesReferToThisTable','1');
               delete;
            end;
            if type='INDEX' and ICOwn eq 'YES' then delete;
         run;
         %rcSet(&syserr); 
         
      %mend etls_CIContents;
      
      %etls_CIContents(table=work_ia.FIN_PRODUCT_ACCOUNT_DRV_BK, workTableOut=etls_commands, inDSOptions=);
      
      %if &etls_otherTablesReferToThisTable %then 
         %put WARNING%QUOTE(:) Replacing entire table will fail. Consider an alternate load technique or revising constraints.; 
      %else 
      %do; /* okay - remove foreign keys  */ 
      
         data etls_commands_F; 
            set etls_commands; 
            if upcase(type)="FOREIGN KEY" then 
            do; 
               command='ic delete '||trim(name)||';';
               output etls_commands_F; 
            end; 
         run; 
         
         %put %str(NOTE: Removing foreign keys before dropping table...);
         data _null_;
            set etls_commands_F;
            %rcSet(&syserr); 
            
      %end; /* okay - remove foreign keys  */ 
      
      proc datasets lib = work nolist nowarn memtype = (data view);
         delete etls_commands etls_commands_F;
      quit;
      
      /*---- Drop a table  ----*/ 
      %put %str(NOTE: Dropping table ...);
      proc datasets lib = work_ia nolist nowarn memtype = (data view);
         delete FIN_PRODUCT_ACCOUNT_DRV_BK;
      quit;
      
      %rcSet(&syserr); 
      
      %let etls_tableExist = 0;
      
   %end; /* table exists  */ 
   
   /*---- Create a new table  ----*/ 
   %if (&etls_tableExist eq 0) %then 
   %do;  /* if table does not exist  */ 
   
      %put %str(NOTE: Creating table ...);
      
      data work_ia.FIN_PRODUCT_ACCOUNT_DRV_BK;
         attrib ACCOUNT_ID length = $32
            format = $32.
            informat = $32.
            label = 'ACCOUNT_ID'; 
         attrib PRODUCT_ID length = $32
            format = $32.
            informat = $32.
            label = 'PRODUCT_ID'; 
         attrib START_DT length = 8
            format = DATETIME20.
            informat = DATETIME20.
            label = 'START_DT'; 
         attrib END_DT length = 8
            format = DATETIME20.
            informat = DATETIME20.
            label = 'END_DT'; 
         attrib SOURCE_SYSTEM_CD length = $3
            format = $3.
            label = 'SOURCE_SYSTEM_CD'; 
         attrib PRIMARY_PROD_FLG length = $1
            format = $1.
            informat = $1.
            label = 'PRIMARY_PROD_FLG'; 
         attrib REINVEST_FLG length = $1
            format = $1.
            informat = $1.
            label = 'REINVEST_FLG'; 
         attrib INVEST_REGULAR_AMT length = 8
            format = 21.5
            informat = 21.5
            label = 'INVEST_REGULAR_AMT'; 
         attrib INVEST_LAST_LUMP_SUM_AMT length = 8
            format = 21.5
            informat = 21.5
            label = 'INVEST_LAST_LUMP_SUM_AMT'; 
         attrib FUND_UNITS_CNT length = 8
            format = 9.2
            informat = 9.2
            label = 'FUND_UNITS_CNT'; 
         attrib TOT_CURR_FUND_VAL length = 8
            format = 21.5
            informat = 21.5
            label = 'TOT_CURR_FUND_VAL'; 
         call missing(of _all_);
         stop;
      run;
      
      %rcSet(&syserr); 
      
      /*---- Create the integrity constraints for a table  ----*/ 
      %put %str(NOTE: Creating integrity constraints ...);
      proc datasets library=work_ia nolist;
         modify FIN_PRODUCT_ACCOUNT_DRV_BK;
            ic create not null (ACCOUNT_ID);
            ic create not null (PRODUCT_ID);
            ic create not null (START_DT);
            ic create not null (END_DT);
            ic create not null (SOURCE_SYSTEM_CD);
      quit;
      
      %rcSet(&syserr); 
      
   %end;  /* if table does not exist  */ 
   
   /*---- Append  ----*/ 
   %put %str(NOTE: Appending data ...);
   
   proc append base = work_ia.FIN_PRODUCT_ACCOUNT_DRV_BK 
      data = &etls_lastTable (&etls_tableOptions)  force ; 
    run; 
   
   %rcSet(&syserr); 
   
   proc datasets lib = work nolist nowarn memtype = (data view);
      delete WIRP7M8;
   quit;
   
%mend etls_loader;
%etls_loader;

%let etls_recCheckExist = 0; 
%let etls_recnt = 0; 
%macro etls_recordCheck; 
   %let etls_recCheckExist = %eval(%sysfunc(exist(work_ia.FIN_PRODUCT_ACCOUNT_DRV_BK, DATA)) or 
         %sysfunc(exist(work_ia.FIN_PRODUCT_ACCOUNT_DRV_BK, VIEW))); 
   
   %if (&etls_recCheckExist) %then
   %do;
      %local etls_syntaxcheck; 
      %let etls_syntaxcheck = %sysfunc(getoption(syntaxcheck)); 
      /* Turn off syntaxcheck option to perform following steps  */ 
      options nosyntaxcheck;
      
      proc contents data = work_ia.FIN_PRODUCT_ACCOUNT_DRV_BK out = work.etls_contents(keep = nobs) noprint; 
      run; 
      
      data _null_; 
         set work.etls_contents (obs = 1); 
         call symput("etls_recnt", left(put(nobs,32.))); 
      run;
      
      proc datasets lib = work nolist nowarn memtype = (data view);
         delete etls_contents;
      quit;
      
      /* Reset syntaxcheck option to previous setting  */ 
      options &etls_syntaxcheck; 
   %end;
%mend etls_recordCheck;
%etls_recordCheck;



/**  Step end Table Loader **/

/*==========================================================================* 
 * Step:            Завершить модуль                      A5Y50FNE.AQ000AFH * 
 * Transform:       Завершить модуль                                        * 
 * Description:                                                             * 
 *==========================================================================*/ 

%let transformID = %quote(A5Y50FNE.AQ000AFH);
%let trans_rc = 0;
%let etls_stepStartTime = %sysfunc(datetime(), datetime20.); 

%let _INPUT_count = 0; 
%let _OUTPUT_count = 0; 


/*****************************************************************
* ВЕРСИЯ:
*   $Id: transform_job_finish.sas 247 2012-04-03 07:31:10Z nesterenok $
*
******************************************************************
* НАЗНАЧЕНИЕ:
*   Регистрирует конец модуля ETL.
*
* ПАРАМЕТРЫ:
*   нет
*
******************************************************************/

%macro transform_job_finish;

   /* Продолжаем модуль */
   %job_continue_reg(mpJobType=JOB, mpJobName=&ETLS_JobName., mpPostEvent=N);

   /* Завершаем модуль */
   %job_finish_reg(mpJobType=JOB);

%mend transform_job_finish;

%transform_job_finish;


%rcSet(&syserr); 
%rcSet(&sysrc); 
%rcSet(&sqlrc); 



/**  Step end Завершить модуль **/

%let etls_endTime = %sysfunc(datetime(),datetime.);



/**  Job end 043_940_Post_Structure_FIN_PRODUCT_ACCOUNT_DRV_BK **/

/* Reset jobid and name */
%let jobID = %quote(A569C89V.AQ0000CK);
%let etls_jobName = %nrquote(090_364_Stream_Midas_Fin_Account_BK);

/*==========================================================================* 
 * Step:            Завершить модуль                      A569C89V.AS00044F * 
 * Transform:       Завершить модуль                                        * 
 * Description:                                                             * 
 *==========================================================================*/ 

%let transformID = %quote(A569C89V.AS00044F);
%let trans_rc = 0;
%let etls_stepStartTime = %sysfunc(datetime(), datetime20.); 

%let _INPUT_count = 0; 
%let _OUTPUT_count = 0; 


/*****************************************************************
* ВЕРСИЯ:
*   $Id: transform_job_finish.sas 247 2012-04-03 07:31:10Z nesterenok $
*
******************************************************************
* НАЗНАЧЕНИЕ:
*   Регистрирует конец модуля ETL.
*
* ПАРАМЕТРЫ:
*   нет
*
******************************************************************/

%macro transform_job_finish;

   /* Продолжаем модуль */
   %job_continue_reg(mpJobType=JOB, mpJobName=&ETLS_JobName., mpPostEvent=N);

   /* Завершаем модуль */
   %job_finish_reg(mpJobType=JOB);

%mend transform_job_finish;

%transform_job_finish;


%rcSet(&syserr); 
%rcSet(&sysrc); 
%rcSet(&sqlrc); 



/**  Step end Завершить модуль **/

%let etls_endTime = %sysfunc(datetime(),datetime.);

